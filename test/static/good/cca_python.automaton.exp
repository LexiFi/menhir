State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On YIELD shift to state 1
-- On WITHx shift to state 243
-- On WHILE shift to state 275
-- On TRY shift to state 392
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 521
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On IF shift to state 410
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FOR shift to state 423
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On EOF shift to state 522
-- On DEL shift to state 326
-- On DEF shift to state 430
-- On CONTINUE shift to state 328
-- On CLASS shift to state 459
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On AT shift to state 471
-- On ASYNC shift to state 480
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On with_stmt shift to state 491
-- On while_stmt shift to state 492
-- On try_stmt shift to state 493
-- On try_except shift to state 494
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On stmt shift to state 523
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 502
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On main shift to state 524
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On if_stmt shift to state 503
-- On global_stmt shift to state 379
-- On funcdef shift to state 504
-- On for_stmt shift to state 505
-- On flow_stmt shift to state 380
-- On file_input_ shift to state 525
-- On file_input shift to state 528
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On decorators shift to state 506
-- On decorator shift to state 511
-- On decorated shift to state 513
-- On continue_stmt shift to state 384
-- On compound_stmt_ shift to state 514
-- On compound_stmt shift to state 515
-- On comparison shift to state 80
-- On classdef shift to state 516
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On async_stmt shift to state 517
-- On async_funcdef shift to state 518
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 1:
## Known stack suffix:
## YIELD
## LR(1) items:
yield_expr -> YIELD . [ SEMICOLON RPAREN NEWLINE EQ ]
yield_expr -> YIELD . testlist_star_expr [ SEMICOLON RPAREN NEWLINE EQ ]
yield_expr -> YIELD . FROM test [ SEMICOLON RPAREN NEWLINE EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FROM shift to state 236
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 238
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On SEMICOLON RPAREN NEWLINE EQ
--   reduce production yield_expr -> YIELD

State 2:
## Known stack suffix:
## TILDE
## LR(1) items:
factor -> TILDE . factor [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 235
-- On atom shift to state 43
-- On _primary shift to state 59
## Reductions:

State 3:
## Known stack suffix:
## SHORTSTRING
## LR(1) items:
stringliteral -> SHORTSTRING . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SHORTSTRING SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SHORTSTRING SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production stringliteral -> SHORTSTRING

State 4:
## Known stack suffix:
## PLUS
## LR(1) items:
factor -> PLUS . factor [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 234
-- On atom shift to state 43
-- On _primary shift to state 59
## Reductions:

State 5:
## Known stack suffix:
## NAMEx
## LR(1) items:
name -> NAMEx . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE NAMEx MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IMPORT IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE NAMEx MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IMPORT IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production name -> NAMEx

State 6:
## Known stack suffix:
## MINUS
## LR(1) items:
factor -> MINUS . factor [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 233
-- On atom shift to state 43
-- On _primary shift to state 59
## Reductions:

State 7:
## Known stack suffix:
## LPAREN
## LR(1) items:
atom -> LPAREN . RPAREN [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
atom -> LPAREN . yield_expr RPAREN [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
atom -> LPAREN . testlist_comp RPAREN [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RPAREN shift to state 228
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On yield_expr shift to state 229
-- On xor_expr shift to state 47
-- On testlist_comp shift to state 231
-- On testlist_ shift to state 217
-- On testlist1_ shift to state 218
-- On test shift to state 220
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 223
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On namedexpr_test shift to state 225
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 8:
## Known stack suffix:
## STAR
## LR(1) items:
star_expr -> STAR . expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ IN HAT_EQ GT_GT_EQ FOR EQ COMMA COLON ASYNC AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 227
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 9:
## Known stack suffix:
## LONGSTRING_BEGIN_S
## LR(1) items:
stringliteral -> LONGSTRING_BEGIN_S . LONGSTRING_REST [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SHORTSTRING SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On LONGSTRING_REST shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## LONGSTRING_BEGIN_S LONGSTRING_REST
## LR(1) items:
stringliteral -> LONGSTRING_BEGIN_S LONGSTRING_REST . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SHORTSTRING SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SHORTSTRING SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production stringliteral -> LONGSTRING_BEGIN_S LONGSTRING_REST

State 11:
## Known stack suffix:
## LONGSTRING_BEGIN_D
## LR(1) items:
stringliteral -> LONGSTRING_BEGIN_D . LONGSTRING_REST [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SHORTSTRING SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On LONGSTRING_REST shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## LONGSTRING_BEGIN_D LONGSTRING_REST
## LR(1) items:
stringliteral -> LONGSTRING_BEGIN_D LONGSTRING_REST . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SHORTSTRING SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SHORTSTRING SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production stringliteral -> LONGSTRING_BEGIN_D LONGSTRING_REST

State 13:
## Known stack suffix:
## LONGINTEGER
## LR(1) items:
literal -> LONGINTEGER . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production literal -> LONGINTEGER

State 14:
## Known stack suffix:
## LBRACKET
## LR(1) items:
atom -> LBRACKET . RBRACKET [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
atom -> LBRACKET . testlist_comp RBRACKET [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RBRACKET shift to state 15
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On testlist_comp shift to state 215
-- On testlist_ shift to state 217
-- On testlist1_ shift to state 218
-- On test shift to state 220
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 223
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On namedexpr_test shift to state 225
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 15:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
atom -> LBRACKET RBRACKET . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> LBRACKET RBRACKET

State 16:
## Known stack suffix:
## NOT
## LR(1) items:
not_test -> NOT . not_test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On not_test shift to state 214
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 17:
## Known stack suffix:
## LBRACE
## LR(1) items:
atom -> LBRACE . RBRACE [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
atom -> LBRACE . dictorsetmaker RBRACE [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR_STAR shift to state 18
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RBRACE shift to state 190
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On testlist1_star_expr shift to state 191
-- On test shift to state 195
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 202
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On namedexpr_test shift to state 204
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On dictorsetmaker shift to state 206
-- On dictelems shift to state 208
-- On dictelem shift to state 212
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 18:
## Known stack suffix:
## STAR_STAR
## LR(1) items:
dictelem -> STAR_STAR . expr [ RBRACE FOR COMMA ASYNC ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 189
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 19:
## Known stack suffix:
## INTEGER
## LR(1) items:
literal -> INTEGER . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production literal -> INTEGER

State 20:
## Known stack suffix:
## IMAGNUMBER
## LR(1) items:
literal -> IMAGNUMBER . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production literal -> IMAGNUMBER

State 21:
## Known stack suffix:
## FLOATNUMBER
## LR(1) items:
literal -> FLOATNUMBER . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production literal -> FLOATNUMBER

State 22:
## Known stack suffix:
## BACKQUOTE
## LR(1) items:
atom -> BACKQUOTE . testlist1 BACKQUOTE [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On testlist1 shift to state 184
-- On test shift to state 188
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 23:
## Known stack suffix:
## LAMBDA
## LR(1) items:
lambdef -> LAMBDA . COLON test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
lambdef -> LAMBDA . varargslist COLON test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On STAR_STAR shift to state 24
-- On STAR shift to state 26
-- On NAMEx shift to state 5
-- On LPAREN shift to state 28
-- On COLON shift to state 36
-- On varargslist shift to state 181
-- On varargs_ shift to state 152
-- On vararg shift to state 158
-- On name shift to state 29
-- On fpdef shift to state 155
## Reductions:

State 24:
## Known stack suffix:
## STAR_STAR
## LR(1) items:
vararg -> STAR_STAR . name [ COMMA COLON ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## STAR_STAR name
## LR(1) items:
vararg -> STAR_STAR name . [ COMMA COLON ]
## Transitions:
## Reductions:
-- On COMMA COLON
--   reduce production vararg -> STAR_STAR name

State 26:
## Known stack suffix:
## STAR
## LR(1) items:
vararg -> STAR . [ COMMA COLON ]
vararg -> STAR . name [ COMMA COLON ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 27
## Reductions:
-- On COMMA COLON
--   reduce production vararg -> STAR

State 27:
## Known stack suffix:
## STAR name
## LR(1) items:
vararg -> STAR name . [ COMMA COLON ]
## Transitions:
## Reductions:
-- On COMMA COLON
--   reduce production vararg -> STAR name

State 28:
## Known stack suffix:
## LPAREN
## LR(1) items:
fpdef -> LPAREN . fplist RPAREN [ RPAREN EQ COMMA COLON ]
## Transitions:
-- On NAMEx shift to state 5
-- On LPAREN shift to state 28
-- On name shift to state 29
-- On fplist shift to state 30
-- On fpdefs shift to state 32
-- On fpdef shift to state 35
## Reductions:

State 29:
## Known stack suffix:
## name
## LR(1) items:
fpdef -> name . [ RPAREN EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN EQ COMMA COLON
--   reduce production fpdef -> name

State 30:
## Known stack suffix:
## LPAREN fplist
## LR(1) items:
fpdef -> LPAREN fplist . RPAREN [ RPAREN EQ COMMA COLON ]
## Transitions:
-- On RPAREN shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## LPAREN fplist RPAREN
## LR(1) items:
fpdef -> LPAREN fplist RPAREN . [ RPAREN EQ COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN EQ COMMA COLON
--   reduce production fpdef -> LPAREN fplist RPAREN

State 32:
## Known stack suffix:
## fpdefs
## LR(1) items:
fpdefs -> fpdefs . COMMA fpdef [ RPAREN COMMA ]
fplist -> fpdefs . [ RPAREN ]
fplist -> fpdefs . COMMA [ RPAREN ]
## Transitions:
-- On COMMA shift to state 33
## Reductions:
-- On RPAREN
--   reduce production fplist -> fpdefs

State 33:
## Known stack suffix:
## fpdefs COMMA
## LR(1) items:
fpdefs -> fpdefs COMMA . fpdef [ RPAREN COMMA ]
fplist -> fpdefs COMMA . [ RPAREN ]
## Transitions:
-- On NAMEx shift to state 5
-- On LPAREN shift to state 28
-- On name shift to state 29
-- On fpdef shift to state 34
## Reductions:
-- On RPAREN
--   reduce production fplist -> fpdefs COMMA

State 34:
## Known stack suffix:
## fpdefs COMMA fpdef
## LR(1) items:
fpdefs -> fpdefs COMMA fpdef . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production fpdefs -> fpdefs COMMA fpdef

State 35:
## Known stack suffix:
## fpdef
## LR(1) items:
fpdefs -> fpdef . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production fpdefs -> fpdef

State 36:
## Known stack suffix:
## LAMBDA COLON
## LR(1) items:
lambdef -> LAMBDA COLON . test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 180
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 37:
## Known stack suffix:
## AWAIT
## LR(1) items:
primary -> AWAIT . _primary [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On SHORTSTRING shift to state 3
-- On NAMEx shift to state 5
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On name shift to state 41
-- On literal shift to state 42
-- On atom shift to state 43
-- On _primary shift to state 44
## Reductions:

State 38:
## Known stack suffix:
## strings
## LR(1) items:
literal -> strings . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production literal -> strings

State 39:
## Known stack suffix:
## stringliteral
## LR(1) items:
strings -> stringliteral . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
strings -> stringliteral . strings [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On SHORTSTRING shift to state 3
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On strings shift to state 40
-- On stringliteral shift to state 39
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production strings -> stringliteral

State 40:
## Known stack suffix:
## stringliteral strings
## LR(1) items:
strings -> stringliteral strings . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production strings -> stringliteral strings

State 41:
## Known stack suffix:
## name
## LR(1) items:
atom -> name . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> name

State 42:
## Known stack suffix:
## literal
## LR(1) items:
atom -> literal . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> literal

State 43:
## Known stack suffix:
## atom
## LR(1) items:
_primary -> atom . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production _primary -> atom

State 44:
## Known stack suffix:
## AWAIT _primary
## LR(1) items:
_primary -> _primary . trailer [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
primary -> AWAIT _primary . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On LPAREN shift to state 45
-- On LBRACKET shift to state 60
-- On DOT shift to state 122
-- On trailer shift to state 124
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production primary -> AWAIT _primary

State 45:
## Known stack suffix:
## LPAREN
## LR(1) items:
trailer -> LPAREN . RPAREN [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
trailer -> LPAREN . arglist RPAREN [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR_STAR shift to state 46
-- On STAR shift to state 130
-- On SHORTSTRING shift to state 3
-- On RPAREN shift to state 132
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 133
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On argument shift to state 173
-- On arglist shift to state 175
-- On arg_comma_list_ shift to state 177
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 46:
## Known stack suffix:
## STAR_STAR
## LR(1) items:
argument -> STAR_STAR . test [ RPAREN COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 129
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 47:
## Known stack suffix:
## xor_expr
## LR(1) items:
expr -> xor_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
expr -> xor_expr . PIPE expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
xor_expr -> xor_expr . HAT and_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
-- On PIPE shift to state 48
-- On HAT shift to state 127
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production expr -> xor_expr

State 48:
## Known stack suffix:
## xor_expr PIPE
## LR(1) items:
expr -> xor_expr PIPE . expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 126
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 49:
## Known stack suffix:
## term
## LR(1) items:
arith_expr -> term . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
term -> term . mop factor [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH_SLASH shift to state 51
-- On SLASH shift to state 52
-- On PERCENT shift to state 53
-- On mop shift to state 54
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production arith_expr -> term

State 50:
## Known stack suffix:
## STAR
## LR(1) items:
mop -> STAR . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production mop -> STAR

State 51:
## Known stack suffix:
## SLASH_SLASH
## LR(1) items:
mop -> SLASH_SLASH . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production mop -> SLASH_SLASH

State 52:
## Known stack suffix:
## SLASH
## LR(1) items:
mop -> SLASH . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production mop -> SLASH

State 53:
## Known stack suffix:
## PERCENT
## LR(1) items:
mop -> PERCENT . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production mop -> PERCENT

State 54:
## Known stack suffix:
## term mop
## LR(1) items:
term -> term mop . factor [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 125
-- On atom shift to state 43
-- On _primary shift to state 59
## Reductions:

State 55:
## Known stack suffix:
## primary
## LR(1) items:
power -> primary . [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
power -> primary . STAR_STAR factor [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On STAR_STAR shift to state 56
## Reductions:
-- On STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production power -> primary

State 56:
## Known stack suffix:
## primary STAR_STAR
## LR(1) items:
power -> primary STAR_STAR . factor [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 58
-- On atom shift to state 43
-- On _primary shift to state 59
## Reductions:

State 57:
## Known stack suffix:
## power
## LR(1) items:
factor -> power . [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production factor -> power

State 58:
## Known stack suffix:
## primary STAR_STAR factor
## LR(1) items:
power -> primary STAR_STAR factor . [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production power -> primary STAR_STAR factor

State 59:
## Known stack suffix:
## _primary
## LR(1) items:
_primary -> _primary . trailer [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
primary -> _primary . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On LPAREN shift to state 45
-- On LBRACKET shift to state 60
-- On DOT shift to state 122
-- On trailer shift to state 124
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production primary -> _primary

State 60:
## Known stack suffix:
## LBRACKET
## LR(1) items:
trailer -> LBRACKET . RBRACKET [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
trailer -> LBRACKET . subscriptlist RBRACKET [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On RBRACKET shift to state 61
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On ELLIPSIS shift to state 62
-- On COLON shift to state 63
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 111
-- On term shift to state 49
-- On subscripts shift to state 116
-- On subscriptlist shift to state 119
-- On subscript shift to state 121
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 61:
## Known stack suffix:
## LBRACKET RBRACKET
## LR(1) items:
trailer -> LBRACKET RBRACKET . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production trailer -> LBRACKET RBRACKET

State 62:
## Known stack suffix:
## ELLIPSIS
## LR(1) items:
subscript -> ELLIPSIS . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> ELLIPSIS

State 63:
## Known stack suffix:
## COLON
## LR(1) items:
subscript -> COLON . [ RBRACKET COMMA ]
subscript -> COLON . test [ RBRACKET COMMA ]
subscript -> COLON . sliceop [ RBRACKET COMMA ]
subscript -> COLON . test sliceop [ RBRACKET COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On COLON shift to state 64
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 108
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On sliceop shift to state 110
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> COLON

State 64:
## Known stack suffix:
## COLON
## LR(1) items:
sliceop -> COLON . [ RBRACKET COMMA ]
sliceop -> COLON . test [ RBRACKET COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 65
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On RBRACKET COMMA
--   reduce production sliceop -> COLON

State 65:
## Known stack suffix:
## COLON test
## LR(1) items:
sliceop -> COLON test . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production sliceop -> COLON test

State 66:
## Known stack suffix:
## shift_expr
## LR(1) items:
and_expr -> shift_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
shift_expr -> shift_expr . LT_LT arith_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
shift_expr -> shift_expr . GT_GT arith_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On LT_LT shift to state 67
-- On GT_GT shift to state 74
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production and_expr -> shift_expr

State 67:
## Known stack suffix:
## shift_expr LT_LT
## LR(1) items:
shift_expr -> shift_expr LT_LT . arith_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On atom shift to state 43
-- On arith_expr shift to state 69
-- On _primary shift to state 59
## Reductions:

State 68:
## Known stack suffix:
## factor
## LR(1) items:
term -> factor . [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production term -> factor

State 69:
## Known stack suffix:
## shift_expr LT_LT arith_expr
## LR(1) items:
arith_expr -> arith_expr . PLUS term [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
arith_expr -> arith_expr . MINUS term [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
shift_expr -> shift_expr LT_LT arith_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On PLUS shift to state 70
-- On MINUS shift to state 72
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production shift_expr -> shift_expr LT_LT arith_expr

State 70:
## Known stack suffix:
## arith_expr PLUS
## LR(1) items:
arith_expr -> arith_expr PLUS . term [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On term shift to state 71
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On atom shift to state 43
-- On _primary shift to state 59
## Reductions:

State 71:
## Known stack suffix:
## arith_expr PLUS term
## LR(1) items:
arith_expr -> arith_expr PLUS term . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
term -> term . mop factor [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH_SLASH shift to state 51
-- On SLASH shift to state 52
-- On PERCENT shift to state 53
-- On mop shift to state 54
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production arith_expr -> arith_expr PLUS term

State 72:
## Known stack suffix:
## arith_expr MINUS
## LR(1) items:
arith_expr -> arith_expr MINUS . term [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On term shift to state 73
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On atom shift to state 43
-- On _primary shift to state 59
## Reductions:

State 73:
## Known stack suffix:
## arith_expr MINUS term
## LR(1) items:
arith_expr -> arith_expr MINUS term . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
term -> term . mop factor [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On STAR shift to state 50
-- On SLASH_SLASH shift to state 51
-- On SLASH shift to state 52
-- On PERCENT shift to state 53
-- On mop shift to state 54
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production arith_expr -> arith_expr MINUS term

State 74:
## Known stack suffix:
## shift_expr GT_GT
## LR(1) items:
shift_expr -> shift_expr GT_GT . arith_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On atom shift to state 43
-- On arith_expr shift to state 75
-- On _primary shift to state 59
## Reductions:

State 75:
## Known stack suffix:
## shift_expr GT_GT arith_expr
## LR(1) items:
arith_expr -> arith_expr . PLUS term [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
arith_expr -> arith_expr . MINUS term [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
shift_expr -> shift_expr GT_GT arith_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On PLUS shift to state 70
-- On MINUS shift to state 72
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production shift_expr -> shift_expr GT_GT arith_expr

State 76:
## Known stack suffix:
## or_test
## LR(1) items:
or_test -> or_test . OR and_test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
test -> or_test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
test -> or_test . IF or_test ELSE test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On OR shift to state 77
-- On IF shift to state 102
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
--   reduce production test -> or_test

State 77:
## Known stack suffix:
## or_test OR
## LR(1) items:
or_test -> or_test OR . and_test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 99
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 78:
## Known stack suffix:
## not_test
## LR(1) items:
and_test -> not_test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production and_test -> not_test

State 79:
## Known stack suffix:
## expr
## LR(1) items:
comparison -> expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production comparison -> expr

State 80:
## Known stack suffix:
## comparison
## LR(1) items:
comparison -> comparison . comp_op expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
not_test -> comparison . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
-- On NOT shift to state 81
-- On LT_GT shift to state 83
-- On LT_EQ shift to state 84
-- On LT shift to state 85
-- On IS shift to state 86
-- On IN shift to state 88
-- On GT_EQ shift to state 89
-- On GT shift to state 90
-- On EXCLAM_EQ shift to state 91
-- On EQ_EQ shift to state 92
-- On comp_op shift to state 93
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production not_test -> comparison

State 81:
## Known stack suffix:
## NOT
## LR(1) items:
comp_op -> NOT . IN [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
-- On IN shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## NOT IN
## LR(1) items:
comp_op -> NOT IN . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> NOT IN

State 83:
## Known stack suffix:
## LT_GT
## LR(1) items:
comp_op -> LT_GT . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> LT_GT

State 84:
## Known stack suffix:
## LT_EQ
## LR(1) items:
comp_op -> LT_EQ . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> LT_EQ

State 85:
## Known stack suffix:
## LT
## LR(1) items:
comp_op -> LT . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> LT

State 86:
## Known stack suffix:
## IS
## LR(1) items:
comp_op -> IS . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
comp_op -> IS . NOT [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
-- On NOT shift to state 87
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> IS

State 87:
## Known stack suffix:
## IS NOT
## LR(1) items:
comp_op -> IS NOT . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> IS NOT

State 88:
## Known stack suffix:
## IN
## LR(1) items:
comp_op -> IN . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> IN

State 89:
## Known stack suffix:
## GT_EQ
## LR(1) items:
comp_op -> GT_EQ . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> GT_EQ

State 90:
## Known stack suffix:
## GT
## LR(1) items:
comp_op -> GT . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> GT

State 91:
## Known stack suffix:
## EXCLAM_EQ
## LR(1) items:
comp_op -> EXCLAM_EQ . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> EXCLAM_EQ

State 92:
## Known stack suffix:
## EQ_EQ
## LR(1) items:
comp_op -> EQ_EQ . [ TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production comp_op -> EQ_EQ

State 93:
## Known stack suffix:
## comparison comp_op
## LR(1) items:
comparison -> comparison comp_op . expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 94
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 94:
## Known stack suffix:
## comparison comp_op expr
## LR(1) items:
comparison -> comparison comp_op expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production comparison -> comparison comp_op expr

State 95:
## Known stack suffix:
## arith_expr
## LR(1) items:
arith_expr -> arith_expr . PLUS term [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
arith_expr -> arith_expr . MINUS term [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
shift_expr -> arith_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On PLUS shift to state 70
-- On MINUS shift to state 72
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production shift_expr -> arith_expr

State 96:
## Known stack suffix:
## and_expr
## LR(1) items:
and_expr -> and_expr . AMP shift_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
xor_expr -> and_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
-- On AMP shift to state 97
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production xor_expr -> and_expr

State 97:
## Known stack suffix:
## and_expr AMP
## LR(1) items:
and_expr -> and_expr AMP . shift_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 98
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On _primary shift to state 59
## Reductions:

State 98:
## Known stack suffix:
## and_expr AMP shift_expr
## LR(1) items:
and_expr -> and_expr AMP shift_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
shift_expr -> shift_expr . LT_LT arith_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
shift_expr -> shift_expr . GT_GT arith_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On LT_LT shift to state 67
-- On GT_GT shift to state 74
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production and_expr -> and_expr AMP shift_expr

State 99:
## Known stack suffix:
## or_test OR and_test
## LR(1) items:
and_test -> and_test . AND not_test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
or_test -> or_test OR and_test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On AND shift to state 100
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
--   reduce production or_test -> or_test OR and_test

State 100:
## Known stack suffix:
## and_test AND
## LR(1) items:
and_test -> and_test AND . not_test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On not_test shift to state 101
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 101:
## Known stack suffix:
## and_test AND not_test
## LR(1) items:
and_test -> and_test AND not_test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production and_test -> and_test AND not_test

State 102:
## Known stack suffix:
## or_test IF
## LR(1) items:
test -> or_test IF . or_test ELSE test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 103
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 103:
## Known stack suffix:
## or_test IF or_test
## LR(1) items:
or_test -> or_test . OR and_test [ OR ELSE ]
test -> or_test IF or_test . ELSE test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On OR shift to state 77
-- On ELSE shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## or_test IF or_test ELSE
## LR(1) items:
test -> or_test IF or_test ELSE . test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 105
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 105:
## Known stack suffix:
## or_test IF or_test ELSE test
## LR(1) items:
test -> or_test IF or_test ELSE test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
--   reduce production test -> or_test IF or_test ELSE test

State 106:
## Known stack suffix:
## lambdef
## LR(1) items:
test -> lambdef . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
--   reduce production test -> lambdef

State 107:
## Known stack suffix:
## and_test
## LR(1) items:
and_test -> and_test . AND not_test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
or_test -> and_test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On AND shift to state 100
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
--   reduce production or_test -> and_test

State 108:
## Known stack suffix:
## COLON test
## LR(1) items:
subscript -> COLON test . [ RBRACKET COMMA ]
subscript -> COLON test . sliceop [ RBRACKET COMMA ]
## Transitions:
-- On COLON shift to state 64
-- On sliceop shift to state 109
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> COLON test

State 109:
## Known stack suffix:
## COLON test sliceop
## LR(1) items:
subscript -> COLON test sliceop . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> COLON test sliceop

State 110:
## Known stack suffix:
## COLON sliceop
## LR(1) items:
subscript -> COLON sliceop . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> COLON sliceop

State 111:
## Known stack suffix:
## test
## LR(1) items:
subscript -> test . [ RBRACKET COMMA ]
subscript -> test . COLON [ RBRACKET COMMA ]
subscript -> test . COLON test [ RBRACKET COMMA ]
subscript -> test . COLON sliceop [ RBRACKET COMMA ]
subscript -> test . COLON test sliceop [ RBRACKET COMMA ]
## Transitions:
-- On COLON shift to state 112
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> test

State 112:
## Known stack suffix:
## test COLON
## LR(1) items:
subscript -> test COLON . [ RBRACKET COMMA ]
subscript -> test COLON . test [ RBRACKET COMMA ]
subscript -> test COLON . sliceop [ RBRACKET COMMA ]
subscript -> test COLON . test sliceop [ RBRACKET COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On COLON shift to state 64
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 113
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On sliceop shift to state 115
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> test COLON

State 113:
## Known stack suffix:
## test COLON test
## LR(1) items:
subscript -> test COLON test . [ RBRACKET COMMA ]
subscript -> test COLON test . sliceop [ RBRACKET COMMA ]
## Transitions:
-- On COLON shift to state 64
-- On sliceop shift to state 114
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> test COLON test

State 114:
## Known stack suffix:
## test COLON test sliceop
## LR(1) items:
subscript -> test COLON test sliceop . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> test COLON test sliceop

State 115:
## Known stack suffix:
## test COLON sliceop
## LR(1) items:
subscript -> test COLON sliceop . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscript -> test COLON sliceop

State 116:
## Known stack suffix:
## subscripts
## LR(1) items:
subscriptlist -> subscripts . [ RBRACKET ]
subscriptlist -> subscripts . COMMA [ RBRACKET ]
subscripts -> subscripts . COMMA subscript [ RBRACKET COMMA ]
## Transitions:
-- On COMMA shift to state 117
## Reductions:
-- On RBRACKET
--   reduce production subscriptlist -> subscripts

State 117:
## Known stack suffix:
## subscripts COMMA
## LR(1) items:
subscriptlist -> subscripts COMMA . [ RBRACKET ]
subscripts -> subscripts COMMA . subscript [ RBRACKET COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On ELLIPSIS shift to state 62
-- On COLON shift to state 63
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 111
-- On term shift to state 49
-- On subscript shift to state 118
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On RBRACKET
--   reduce production subscriptlist -> subscripts COMMA

State 118:
## Known stack suffix:
## subscripts COMMA subscript
## LR(1) items:
subscripts -> subscripts COMMA subscript . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscripts -> subscripts COMMA subscript

State 119:
## Known stack suffix:
## LBRACKET subscriptlist
## LR(1) items:
trailer -> LBRACKET subscriptlist . RBRACKET [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On RBRACKET shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## LBRACKET subscriptlist RBRACKET
## LR(1) items:
trailer -> LBRACKET subscriptlist RBRACKET . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production trailer -> LBRACKET subscriptlist RBRACKET

State 121:
## Known stack suffix:
## subscript
## LR(1) items:
subscripts -> subscript . [ RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET COMMA
--   reduce production subscripts -> subscript

State 122:
## Known stack suffix:
## DOT
## LR(1) items:
trailer -> DOT . name [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## DOT name
## LR(1) items:
trailer -> DOT name . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production trailer -> DOT name

State 124:
## Known stack suffix:
## _primary trailer
## LR(1) items:
_primary -> _primary trailer . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production _primary -> _primary trailer

State 125:
## Known stack suffix:
## term mop factor
## LR(1) items:
term -> term mop factor . [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production term -> term mop factor

State 126:
## Known stack suffix:
## xor_expr PIPE expr
## LR(1) items:
expr -> xor_expr PIPE expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production expr -> xor_expr PIPE expr

State 127:
## Known stack suffix:
## xor_expr HAT
## LR(1) items:
xor_expr -> xor_expr HAT . and_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 128
-- On _primary shift to state 59
## Reductions:

State 128:
## Known stack suffix:
## xor_expr HAT and_expr
## LR(1) items:
and_expr -> and_expr . AMP shift_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
xor_expr -> xor_expr HAT and_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
-- On AMP shift to state 97
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production xor_expr -> xor_expr HAT and_expr

State 129:
## Known stack suffix:
## STAR_STAR test
## LR(1) items:
argument -> STAR_STAR test . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production argument -> STAR_STAR test

State 130:
## Known stack suffix:
## STAR
## LR(1) items:
argument -> STAR . test [ RPAREN COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 131
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 131:
## Known stack suffix:
## STAR test
## LR(1) items:
argument -> STAR test . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production argument -> STAR test

State 132:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
trailer -> LPAREN RPAREN . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production trailer -> LPAREN RPAREN

State 133:
## Known stack suffix:
## test
## LR(1) items:
argument -> test . [ RPAREN COMMA ]
argument -> test . EQ test [ RPAREN COMMA ]
argument -> test . comp_for [ RPAREN COMMA ]
argument -> test . COLON_EQ test [ RPAREN COMMA ]
## Transitions:
-- On FOR shift to state 134
-- On EQ shift to state 168
-- On COLON_EQ shift to state 170
-- On ASYNC shift to state 160
-- On sync_comp_for shift to state 162
-- On comp_for shift to state 172
## Reductions:
-- On RPAREN COMMA
--   reduce production argument -> test

State 134:
## Known stack suffix:
## FOR
## LR(1) items:
sync_comp_for -> FOR . exprlist IN or_test [ RPAREN RBRACKET RBRACE COMMA ]
sync_comp_for -> FOR . exprlist IN or_test comp_iter [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 135
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On exprs shift to state 136
-- On exprlist shift to state 140
-- On expr shift to state 167
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 135:
## Known stack suffix:
## star_expr
## LR(1) items:
exprs -> star_expr . [ SEMICOLON NEWLINE IN COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE IN COMMA
--   reduce production exprs -> star_expr

State 136:
## Known stack suffix:
## exprs
## LR(1) items:
exprlist -> exprs . [ SEMICOLON NEWLINE IN ]
exprlist -> exprs . COMMA [ SEMICOLON NEWLINE IN ]
exprs -> exprs . COMMA expr [ SEMICOLON NEWLINE IN COMMA ]
exprs -> exprs . COMMA star_expr [ SEMICOLON NEWLINE IN COMMA ]
## Transitions:
-- On COMMA shift to state 137
## Reductions:
-- On SEMICOLON NEWLINE IN
--   reduce production exprlist -> exprs

State 137:
## Known stack suffix:
## exprs COMMA
## LR(1) items:
exprlist -> exprs COMMA . [ SEMICOLON NEWLINE IN ]
exprs -> exprs COMMA . expr [ SEMICOLON NEWLINE IN COMMA ]
exprs -> exprs COMMA . star_expr [ SEMICOLON NEWLINE IN COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 138
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 139
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On SEMICOLON NEWLINE IN
--   reduce production exprlist -> exprs COMMA

State 138:
## Known stack suffix:
## exprs COMMA star_expr
## LR(1) items:
exprs -> exprs COMMA star_expr . [ SEMICOLON NEWLINE IN COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE IN COMMA
--   reduce production exprs -> exprs COMMA star_expr

State 139:
## Known stack suffix:
## exprs COMMA expr
## LR(1) items:
exprs -> exprs COMMA expr . [ SEMICOLON NEWLINE IN COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE IN COMMA
--   reduce production exprs -> exprs COMMA expr

State 140:
## Known stack suffix:
## FOR exprlist
## LR(1) items:
sync_comp_for -> FOR exprlist . IN or_test [ RPAREN RBRACKET RBRACE COMMA ]
sync_comp_for -> FOR exprlist . IN or_test comp_iter [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
-- On IN shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## FOR exprlist IN
## LR(1) items:
sync_comp_for -> FOR exprlist IN . or_test [ RPAREN RBRACKET RBRACE COMMA ]
sync_comp_for -> FOR exprlist IN . or_test comp_iter [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 142
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 142:
## Known stack suffix:
## FOR exprlist IN or_test
## LR(1) items:
or_test -> or_test . OR and_test [ RPAREN RBRACKET RBRACE OR IF FOR COMMA ASYNC ]
sync_comp_for -> FOR exprlist IN or_test . [ RPAREN RBRACKET RBRACE COMMA ]
sync_comp_for -> FOR exprlist IN or_test . comp_iter [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
-- On OR shift to state 77
-- On IF shift to state 143
-- On FOR shift to state 134
-- On ASYNC shift to state 160
-- On sync_comp_for shift to state 162
-- On comp_iter shift to state 166
-- On comp_if shift to state 164
-- On comp_for shift to state 165
## Reductions:
-- On RPAREN RBRACKET RBRACE COMMA
--   reduce production sync_comp_for -> FOR exprlist IN or_test

State 143:
## Known stack suffix:
## IF
## LR(1) items:
comp_if -> IF . old_test [ RPAREN RBRACKET RBRACE COMMA ]
comp_if -> IF . old_test comp_iter [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 144
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 146
-- On old_test shift to state 159
-- On old_lambdef shift to state 148
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 144:
## Known stack suffix:
## LAMBDA
## LR(1) items:
old_lambdef -> LAMBDA . COLON old_test [ RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC ]
old_lambdef -> LAMBDA . varargslist COLON old_test [ RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC ]
## Transitions:
-- On STAR_STAR shift to state 24
-- On STAR shift to state 26
-- On NAMEx shift to state 5
-- On LPAREN shift to state 28
-- On COLON shift to state 145
-- On varargslist shift to state 149
-- On varargs_ shift to state 152
-- On vararg shift to state 158
-- On name shift to state 29
-- On fpdef shift to state 155
## Reductions:

State 145:
## Known stack suffix:
## LAMBDA COLON
## LR(1) items:
old_lambdef -> LAMBDA COLON . old_test [ RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 144
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 146
-- On old_test shift to state 147
-- On old_lambdef shift to state 148
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 146:
## Known stack suffix:
## or_test
## LR(1) items:
old_test -> or_test . [ RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC ]
or_test -> or_test . OR and_test [ RPAREN RBRACKET RBRACE OR IF FOR COMMA ASYNC ]
## Transitions:
-- On OR shift to state 77
## Reductions:
-- On RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC
--   reduce production old_test -> or_test

State 147:
## Known stack suffix:
## LAMBDA COLON old_test
## LR(1) items:
old_lambdef -> LAMBDA COLON old_test . [ RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC
--   reduce production old_lambdef -> LAMBDA COLON old_test

State 148:
## Known stack suffix:
## old_lambdef
## LR(1) items:
old_test -> old_lambdef . [ RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC
--   reduce production old_test -> old_lambdef

State 149:
## Known stack suffix:
## LAMBDA varargslist
## LR(1) items:
old_lambdef -> LAMBDA varargslist . COLON old_test [ RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC ]
## Transitions:
-- On COLON shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## LAMBDA varargslist COLON
## LR(1) items:
old_lambdef -> LAMBDA varargslist COLON . old_test [ RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 144
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 146
-- On old_test shift to state 151
-- On old_lambdef shift to state 148
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 151:
## Known stack suffix:
## LAMBDA varargslist COLON old_test
## LR(1) items:
old_lambdef -> LAMBDA varargslist COLON old_test . [ RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC
--   reduce production old_lambdef -> LAMBDA varargslist COLON old_test

State 152:
## Known stack suffix:
## varargs_
## LR(1) items:
varargs_ -> varargs_ . COMMA vararg [ COMMA COLON ]
varargslist -> varargs_ . [ COLON ]
varargslist -> varargs_ . COMMA [ COLON ]
## Transitions:
-- On COMMA shift to state 153
## Reductions:
-- On COLON
--   reduce production varargslist -> varargs_

State 153:
## Known stack suffix:
## varargs_ COMMA
## LR(1) items:
varargs_ -> varargs_ COMMA . vararg [ COMMA COLON ]
varargslist -> varargs_ COMMA . [ COLON ]
## Transitions:
-- On STAR_STAR shift to state 24
-- On STAR shift to state 26
-- On NAMEx shift to state 5
-- On LPAREN shift to state 28
-- On vararg shift to state 154
-- On name shift to state 29
-- On fpdef shift to state 155
## Reductions:
-- On COLON
--   reduce production varargslist -> varargs_ COMMA

State 154:
## Known stack suffix:
## varargs_ COMMA vararg
## LR(1) items:
varargs_ -> varargs_ COMMA vararg . [ COMMA COLON ]
## Transitions:
## Reductions:
-- On COMMA COLON
--   reduce production varargs_ -> varargs_ COMMA vararg

State 155:
## Known stack suffix:
## fpdef
## LR(1) items:
vararg -> fpdef . [ COMMA COLON ]
vararg -> fpdef . EQ test [ COMMA COLON ]
## Transitions:
-- On EQ shift to state 156
## Reductions:
-- On COMMA COLON
--   reduce production vararg -> fpdef

State 156:
## Known stack suffix:
## fpdef EQ
## LR(1) items:
vararg -> fpdef EQ . test [ COMMA COLON ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 157
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 157:
## Known stack suffix:
## fpdef EQ test
## LR(1) items:
vararg -> fpdef EQ test . [ COMMA COLON ]
## Transitions:
## Reductions:
-- On COMMA COLON
--   reduce production vararg -> fpdef EQ test

State 158:
## Known stack suffix:
## vararg
## LR(1) items:
varargs_ -> vararg . [ COMMA COLON ]
## Transitions:
## Reductions:
-- On COMMA COLON
--   reduce production varargs_ -> vararg

State 159:
## Known stack suffix:
## IF old_test
## LR(1) items:
comp_if -> IF old_test . [ RPAREN RBRACKET RBRACE COMMA ]
comp_if -> IF old_test . comp_iter [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
-- On IF shift to state 143
-- On FOR shift to state 134
-- On ASYNC shift to state 160
-- On sync_comp_for shift to state 162
-- On comp_iter shift to state 163
-- On comp_if shift to state 164
-- On comp_for shift to state 165
## Reductions:
-- On RPAREN RBRACKET RBRACE COMMA
--   reduce production comp_if -> IF old_test

State 160:
## Known stack suffix:
## ASYNC
## LR(1) items:
comp_for -> ASYNC . sync_comp_for [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
-- On FOR shift to state 134
-- On sync_comp_for shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## ASYNC sync_comp_for
## LR(1) items:
comp_for -> ASYNC sync_comp_for . [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE COMMA
--   reduce production comp_for -> ASYNC sync_comp_for

State 162:
## Known stack suffix:
## sync_comp_for
## LR(1) items:
comp_for -> sync_comp_for . [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE COMMA
--   reduce production comp_for -> sync_comp_for

State 163:
## Known stack suffix:
## IF old_test comp_iter
## LR(1) items:
comp_if -> IF old_test comp_iter . [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE COMMA
--   reduce production comp_if -> IF old_test comp_iter

State 164:
## Known stack suffix:
## comp_if
## LR(1) items:
comp_iter -> comp_if . [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE COMMA
--   reduce production comp_iter -> comp_if

State 165:
## Known stack suffix:
## comp_for
## LR(1) items:
comp_iter -> comp_for . [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE COMMA
--   reduce production comp_iter -> comp_for

State 166:
## Known stack suffix:
## FOR exprlist IN or_test comp_iter
## LR(1) items:
sync_comp_for -> FOR exprlist IN or_test comp_iter . [ RPAREN RBRACKET RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET RBRACE COMMA
--   reduce production sync_comp_for -> FOR exprlist IN or_test comp_iter

State 167:
## Known stack suffix:
## expr
## LR(1) items:
exprs -> expr . [ SEMICOLON NEWLINE IN COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE IN COMMA
--   reduce production exprs -> expr

State 168:
## Known stack suffix:
## test EQ
## LR(1) items:
argument -> test EQ . test [ RPAREN COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 169
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 169:
## Known stack suffix:
## test EQ test
## LR(1) items:
argument -> test EQ test . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production argument -> test EQ test

State 170:
## Known stack suffix:
## test COLON_EQ
## LR(1) items:
argument -> test COLON_EQ . test [ RPAREN COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 171
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 171:
## Known stack suffix:
## test COLON_EQ test
## LR(1) items:
argument -> test COLON_EQ test . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production argument -> test COLON_EQ test

State 172:
## Known stack suffix:
## test comp_for
## LR(1) items:
argument -> test comp_for . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production argument -> test comp_for

State 173:
## Known stack suffix:
## argument
## LR(1) items:
arg_comma_list_ -> argument . COMMA [ TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
arglist -> argument . [ RPAREN ]
arglist -> argument . COMMA [ RPAREN ]
## Transitions:
-- On COMMA shift to state 174
## Reductions:
-- On RPAREN
--   reduce production arglist -> argument

State 174:
## Known stack suffix:
## argument COMMA
## LR(1) items:
arg_comma_list_ -> argument COMMA . [ TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
arglist -> argument COMMA . [ RPAREN ]
## Transitions:
## Reductions:
-- On TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production arg_comma_list_ -> argument COMMA
-- On RPAREN
--   reduce production arglist -> argument COMMA

State 175:
## Known stack suffix:
## LPAREN arglist
## LR(1) items:
trailer -> LPAREN arglist . RPAREN [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On RPAREN shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## LPAREN arglist RPAREN
## LR(1) items:
trailer -> LPAREN arglist RPAREN . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production trailer -> LPAREN arglist RPAREN

State 177:
## Known stack suffix:
## arg_comma_list_
## LR(1) items:
arg_comma_list_ -> arg_comma_list_ . argument COMMA [ TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
arglist -> arg_comma_list_ . argument [ RPAREN ]
arglist -> arg_comma_list_ . argument COMMA [ RPAREN ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR_STAR shift to state 46
-- On STAR shift to state 130
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 133
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On argument shift to state 178
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 178:
## Known stack suffix:
## arg_comma_list_ argument
## LR(1) items:
arg_comma_list_ -> arg_comma_list_ argument . COMMA [ TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
arglist -> arg_comma_list_ argument . [ RPAREN ]
arglist -> arg_comma_list_ argument . COMMA [ RPAREN ]
## Transitions:
-- On COMMA shift to state 179
## Reductions:
-- On RPAREN
--   reduce production arglist -> arg_comma_list_ argument

State 179:
## Known stack suffix:
## arg_comma_list_ argument COMMA
## LR(1) items:
arg_comma_list_ -> arg_comma_list_ argument COMMA . [ TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
arglist -> arg_comma_list_ argument COMMA . [ RPAREN ]
## Transitions:
## Reductions:
-- On TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production arg_comma_list_ -> arg_comma_list_ argument COMMA
-- On RPAREN
--   reduce production arglist -> arg_comma_list_ argument COMMA

State 180:
## Known stack suffix:
## LAMBDA COLON test
## LR(1) items:
lambdef -> LAMBDA COLON test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
--   reduce production lambdef -> LAMBDA COLON test

State 181:
## Known stack suffix:
## LAMBDA varargslist
## LR(1) items:
lambdef -> LAMBDA varargslist . COLON test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On COLON shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## LAMBDA varargslist COLON
## LR(1) items:
lambdef -> LAMBDA varargslist COLON . test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 183
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 183:
## Known stack suffix:
## LAMBDA varargslist COLON test
## LR(1) items:
lambdef -> LAMBDA varargslist COLON test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
--   reduce production lambdef -> LAMBDA varargslist COLON test

State 184:
## Known stack suffix:
## BACKQUOTE testlist1
## LR(1) items:
atom -> BACKQUOTE testlist1 . BACKQUOTE [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
testlist1 -> testlist1 . COMMA test [ COMMA BACKQUOTE ]
## Transitions:
-- On COMMA shift to state 185
-- On BACKQUOTE shift to state 187
## Reductions:

State 185:
## Known stack suffix:
## testlist1 COMMA
## LR(1) items:
testlist1 -> testlist1 COMMA . test [ COMMA BACKQUOTE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 186
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 186:
## Known stack suffix:
## testlist1 COMMA test
## LR(1) items:
testlist1 -> testlist1 COMMA test . [ SEMICOLON NEWLINE COMMA COLON BACKQUOTE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE COMMA COLON BACKQUOTE
--   reduce production testlist1 -> testlist1 COMMA test

State 187:
## Known stack suffix:
## BACKQUOTE testlist1 BACKQUOTE
## LR(1) items:
atom -> BACKQUOTE testlist1 BACKQUOTE . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> BACKQUOTE testlist1 BACKQUOTE

State 188:
## Known stack suffix:
## test
## LR(1) items:
testlist1 -> test . [ SEMICOLON NEWLINE COMMA COLON BACKQUOTE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE COMMA COLON BACKQUOTE
--   reduce production testlist1 -> test

State 189:
## Known stack suffix:
## STAR_STAR expr
## LR(1) items:
dictelem -> STAR_STAR expr . [ RBRACE FOR COMMA ASYNC ]
## Transitions:
## Reductions:
-- On RBRACE FOR COMMA ASYNC
--   reduce production dictelem -> STAR_STAR expr

State 190:
## Known stack suffix:
## LBRACE RBRACE
## LR(1) items:
atom -> LBRACE RBRACE . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> LBRACE RBRACE

State 191:
## Known stack suffix:
## testlist1_star_expr
## LR(1) items:
dictorsetmaker -> testlist1_star_expr . [ RBRACE ]
dictorsetmaker -> testlist1_star_expr . COMMA [ RBRACE ]
testlist1_star_expr -> testlist1_star_expr . COMMA test [ RBRACE COMMA ]
testlist1_star_expr -> testlist1_star_expr . COMMA star_expr [ RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 192
## Reductions:
-- On RBRACE
--   reduce production dictorsetmaker -> testlist1_star_expr

State 192:
## Known stack suffix:
## testlist1_star_expr COMMA
## LR(1) items:
dictorsetmaker -> testlist1_star_expr COMMA . [ RBRACE ]
testlist1_star_expr -> testlist1_star_expr COMMA . test [ RBRACE COMMA ]
testlist1_star_expr -> testlist1_star_expr COMMA . star_expr [ RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 193
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 194
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On RBRACE
--   reduce production dictorsetmaker -> testlist1_star_expr COMMA

State 193:
## Known stack suffix:
## testlist1_star_expr COMMA test
## LR(1) items:
testlist1_star_expr -> testlist1_star_expr COMMA test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ
--   reduce production testlist1_star_expr -> testlist1_star_expr COMMA test

State 194:
## Known stack suffix:
## testlist1_star_expr COMMA star_expr
## LR(1) items:
testlist1_star_expr -> testlist1_star_expr COMMA star_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ
--   reduce production testlist1_star_expr -> testlist1_star_expr COMMA star_expr

State 195:
## Known stack suffix:
## test
## LR(1) items:
dictelem -> test . COLON test [ RBRACE FOR COMMA ASYNC ]
namedexpr_test -> test . [ FOR ASYNC ]
namedexpr_test -> test . COLON_EQ test [ FOR ASYNC ]
namedexpr_test -> test . EQ test [ FOR ASYNC ]
testlist1_star_expr -> test . [ RBRACE COMMA ]
## Transitions:
-- On EQ shift to state 196
-- On COLON_EQ shift to state 198
-- On COLON shift to state 200
## Reductions:
-- On FOR ASYNC
--   reduce production namedexpr_test -> test
-- On RBRACE COMMA
--   reduce production testlist1_star_expr -> test

State 196:
## Known stack suffix:
## test EQ
## LR(1) items:
namedexpr_test -> test EQ . test [ RPAREN RBRACKET FOR COMMA ASYNC ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 197
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 197:
## Known stack suffix:
## test EQ test
## LR(1) items:
namedexpr_test -> test EQ test . [ RPAREN RBRACKET FOR COMMA ASYNC ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET FOR COMMA ASYNC
--   reduce production namedexpr_test -> test EQ test

State 198:
## Known stack suffix:
## test COLON_EQ
## LR(1) items:
namedexpr_test -> test COLON_EQ . test [ RPAREN RBRACKET FOR COMMA ASYNC ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 199
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 199:
## Known stack suffix:
## test COLON_EQ test
## LR(1) items:
namedexpr_test -> test COLON_EQ test . [ RPAREN RBRACKET FOR COMMA ASYNC ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET FOR COMMA ASYNC
--   reduce production namedexpr_test -> test COLON_EQ test

State 200:
## Known stack suffix:
## test COLON
## LR(1) items:
dictelem -> test COLON . test [ RBRACE FOR COMMA ASYNC ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 201
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 201:
## Known stack suffix:
## test COLON test
## LR(1) items:
dictelem -> test COLON test . [ RBRACE FOR COMMA ASYNC ]
## Transitions:
## Reductions:
-- On RBRACE FOR COMMA ASYNC
--   reduce production dictelem -> test COLON test

State 202:
## Known stack suffix:
## star_expr
## LR(1) items:
dictorsetmaker -> star_expr . comp_for [ RBRACE ]
testlist1_star_expr -> star_expr . [ RBRACE COMMA ]
## Transitions:
-- On FOR shift to state 134
-- On ASYNC shift to state 160
-- On sync_comp_for shift to state 162
-- On comp_for shift to state 203
## Reductions:
-- On RBRACE COMMA
--   reduce production testlist1_star_expr -> star_expr

State 203:
## Known stack suffix:
## star_expr comp_for
## LR(1) items:
dictorsetmaker -> star_expr comp_for . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production dictorsetmaker -> star_expr comp_for

State 204:
## Known stack suffix:
## namedexpr_test
## LR(1) items:
dictorsetmaker -> namedexpr_test . comp_for [ RBRACE ]
## Transitions:
-- On FOR shift to state 134
-- On ASYNC shift to state 160
-- On sync_comp_for shift to state 162
-- On comp_for shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## namedexpr_test comp_for
## LR(1) items:
dictorsetmaker -> namedexpr_test comp_for . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production dictorsetmaker -> namedexpr_test comp_for

State 206:
## Known stack suffix:
## LBRACE dictorsetmaker
## LR(1) items:
atom -> LBRACE dictorsetmaker . RBRACE [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On RBRACE shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## LBRACE dictorsetmaker RBRACE
## LR(1) items:
atom -> LBRACE dictorsetmaker RBRACE . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> LBRACE dictorsetmaker RBRACE

State 208:
## Known stack suffix:
## dictelems
## LR(1) items:
dictelems -> dictelems . COMMA dictelem [ RBRACE COMMA ]
dictorsetmaker -> dictelems . [ RBRACE ]
dictorsetmaker -> dictelems . COMMA [ RBRACE ]
## Transitions:
-- On COMMA shift to state 209
## Reductions:
-- On RBRACE
--   reduce production dictorsetmaker -> dictelems

State 209:
## Known stack suffix:
## dictelems COMMA
## LR(1) items:
dictelems -> dictelems COMMA . dictelem [ RBRACE COMMA ]
dictorsetmaker -> dictelems COMMA . [ RBRACE ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR_STAR shift to state 18
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 210
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On dictelem shift to state 211
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On RBRACE
--   reduce production dictorsetmaker -> dictelems COMMA

State 210:
## Known stack suffix:
## test
## LR(1) items:
dictelem -> test . COLON test [ RBRACE COMMA ]
## Transitions:
-- On COLON shift to state 200
## Reductions:

State 211:
## Known stack suffix:
## dictelems COMMA dictelem
## LR(1) items:
dictelems -> dictelems COMMA dictelem . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE COMMA
--   reduce production dictelems -> dictelems COMMA dictelem

State 212:
## Known stack suffix:
## dictelem
## LR(1) items:
dictelems -> dictelem . [ RBRACE COMMA ]
dictorsetmaker -> dictelem . comp_for [ RBRACE ]
## Transitions:
-- On FOR shift to state 134
-- On ASYNC shift to state 160
-- On sync_comp_for shift to state 162
-- On comp_for shift to state 213
## Reductions:
-- On RBRACE COMMA
--   reduce production dictelems -> dictelem

State 213:
## Known stack suffix:
## dictelem comp_for
## LR(1) items:
dictorsetmaker -> dictelem comp_for . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production dictorsetmaker -> dictelem comp_for

State 214:
## Known stack suffix:
## NOT not_test
## LR(1) items:
not_test -> NOT not_test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
--   reduce production not_test -> NOT not_test

State 215:
## Known stack suffix:
## LBRACKET testlist_comp
## LR(1) items:
atom -> LBRACKET testlist_comp . RBRACKET [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On RBRACKET shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## LBRACKET testlist_comp RBRACKET
## LR(1) items:
atom -> LBRACKET testlist_comp RBRACKET . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> LBRACKET testlist_comp RBRACKET

State 217:
## Known stack suffix:
## testlist_
## LR(1) items:
testlist_comp -> testlist_ . [ RPAREN RBRACKET ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET
--   reduce production testlist_comp -> testlist_

State 218:
## Known stack suffix:
## testlist1_
## LR(1) items:
testlist1_ -> testlist1_ . COMMA namedexpr_test [ RPAREN RBRACKET COMMA ]
testlist1_ -> testlist1_ . COMMA star_expr [ RPAREN RBRACKET COMMA ]
testlist_ -> testlist1_ . [ RPAREN RBRACKET ]
testlist_ -> testlist1_ . COMMA [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 219
## Reductions:
-- On RPAREN RBRACKET
--   reduce production testlist_ -> testlist1_

State 219:
## Known stack suffix:
## testlist1_ COMMA
## LR(1) items:
testlist1_ -> testlist1_ COMMA . namedexpr_test [ RPAREN RBRACKET COMMA ]
testlist1_ -> testlist1_ COMMA . star_expr [ RPAREN RBRACKET COMMA ]
testlist_ -> testlist1_ COMMA . [ RPAREN RBRACKET ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 220
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 221
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On namedexpr_test shift to state 222
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On RPAREN RBRACKET
--   reduce production testlist_ -> testlist1_ COMMA

State 220:
## Known stack suffix:
## test
## LR(1) items:
namedexpr_test -> test . [ RPAREN RBRACKET FOR COMMA ASYNC ]
namedexpr_test -> test . COLON_EQ test [ RPAREN RBRACKET FOR COMMA ASYNC ]
namedexpr_test -> test . EQ test [ RPAREN RBRACKET FOR COMMA ASYNC ]
## Transitions:
-- On EQ shift to state 196
-- On COLON_EQ shift to state 198
## Reductions:
-- On RPAREN RBRACKET FOR COMMA ASYNC
--   reduce production namedexpr_test -> test

State 221:
## Known stack suffix:
## testlist1_ COMMA star_expr
## LR(1) items:
testlist1_ -> testlist1_ COMMA star_expr . [ RPAREN RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET COMMA
--   reduce production testlist1_ -> testlist1_ COMMA star_expr

State 222:
## Known stack suffix:
## testlist1_ COMMA namedexpr_test
## LR(1) items:
testlist1_ -> testlist1_ COMMA namedexpr_test . [ RPAREN RBRACKET COMMA ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET COMMA
--   reduce production testlist1_ -> testlist1_ COMMA namedexpr_test

State 223:
## Known stack suffix:
## star_expr
## LR(1) items:
testlist1_ -> star_expr . [ RPAREN RBRACKET COMMA ]
testlist_comp -> star_expr . comp_for [ RPAREN RBRACKET ]
## Transitions:
-- On FOR shift to state 134
-- On ASYNC shift to state 160
-- On sync_comp_for shift to state 162
-- On comp_for shift to state 224
## Reductions:
-- On RPAREN RBRACKET COMMA
--   reduce production testlist1_ -> star_expr

State 224:
## Known stack suffix:
## star_expr comp_for
## LR(1) items:
testlist_comp -> star_expr comp_for . [ RPAREN RBRACKET ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET
--   reduce production testlist_comp -> star_expr comp_for

State 225:
## Known stack suffix:
## namedexpr_test
## LR(1) items:
testlist1_ -> namedexpr_test . [ RPAREN RBRACKET COMMA ]
testlist_comp -> namedexpr_test . comp_for [ RPAREN RBRACKET ]
## Transitions:
-- On FOR shift to state 134
-- On ASYNC shift to state 160
-- On sync_comp_for shift to state 162
-- On comp_for shift to state 226
## Reductions:
-- On RPAREN RBRACKET COMMA
--   reduce production testlist1_ -> namedexpr_test

State 226:
## Known stack suffix:
## namedexpr_test comp_for
## LR(1) items:
testlist_comp -> namedexpr_test comp_for . [ RPAREN RBRACKET ]
## Transitions:
## Reductions:
-- On RPAREN RBRACKET
--   reduce production testlist_comp -> namedexpr_test comp_for

State 227:
## Known stack suffix:
## STAR expr
## LR(1) items:
star_expr -> STAR expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ IN HAT_EQ GT_GT_EQ FOR EQ COMMA COLON ASYNC AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ IN HAT_EQ GT_GT_EQ FOR EQ COMMA COLON ASYNC AMP_EQ
--   reduce production star_expr -> STAR expr

State 228:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
atom -> LPAREN RPAREN . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> LPAREN RPAREN

State 229:
## Known stack suffix:
## LPAREN yield_expr
## LR(1) items:
atom -> LPAREN yield_expr . RPAREN [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On RPAREN shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## LPAREN yield_expr RPAREN
## LR(1) items:
atom -> LPAREN yield_expr RPAREN . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> LPAREN yield_expr RPAREN

State 231:
## Known stack suffix:
## LPAREN testlist_comp
## LR(1) items:
atom -> LPAREN testlist_comp . RPAREN [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
-- On RPAREN shift to state 232
## Reductions:

State 232:
## Known stack suffix:
## LPAREN testlist_comp RPAREN
## LR(1) items:
atom -> LPAREN testlist_comp RPAREN . [ STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production atom -> LPAREN testlist_comp RPAREN

State 233:
## Known stack suffix:
## MINUS factor
## LR(1) items:
factor -> MINUS factor . [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production factor -> MINUS factor

State 234:
## Known stack suffix:
## PLUS factor
## LR(1) items:
factor -> PLUS factor . [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production factor -> PLUS factor

State 235:
## Known stack suffix:
## TILDE factor
## LR(1) items:
factor -> TILDE factor . [ STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
--   reduce production factor -> TILDE factor

State 236:
## Known stack suffix:
## YIELD FROM
## LR(1) items:
yield_expr -> YIELD FROM . test [ SEMICOLON RPAREN NEWLINE EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 237
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 237:
## Known stack suffix:
## YIELD FROM test
## LR(1) items:
yield_expr -> YIELD FROM test . [ SEMICOLON RPAREN NEWLINE EQ ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN NEWLINE EQ
--   reduce production yield_expr -> YIELD FROM test

State 238:
## Known stack suffix:
## YIELD testlist_star_expr
## LR(1) items:
yield_expr -> YIELD testlist_star_expr . [ SEMICOLON RPAREN NEWLINE EQ ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN NEWLINE EQ
--   reduce production yield_expr -> YIELD testlist_star_expr

State 239:
## Known stack suffix:
## testlist1_star_expr
## LR(1) items:
testlist1_star_expr -> testlist1_star_expr . COMMA test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ ]
testlist1_star_expr -> testlist1_star_expr . COMMA star_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ ]
testlist_star_expr -> testlist1_star_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COLON AMP_EQ ]
testlist_star_expr -> testlist1_star_expr . COMMA [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COLON AMP_EQ ]
## Transitions:
-- On COMMA shift to state 240
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COLON AMP_EQ
--   reduce production testlist_star_expr -> testlist1_star_expr

State 240:
## Known stack suffix:
## testlist1_star_expr COMMA
## LR(1) items:
testlist1_star_expr -> testlist1_star_expr COMMA . test [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ ]
testlist1_star_expr -> testlist1_star_expr COMMA . star_expr [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ ]
testlist_star_expr -> testlist1_star_expr COMMA . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COLON AMP_EQ ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 193
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 194
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COLON AMP_EQ
--   reduce production testlist_star_expr -> testlist1_star_expr COMMA

State 241:
## Known stack suffix:
## test
## LR(1) items:
testlist1_star_expr -> test . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ
--   reduce production testlist1_star_expr -> test

State 242:
## Known stack suffix:
## star_expr
## LR(1) items:
testlist1_star_expr -> star_expr . [ STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ ]
## Transitions:
## Reductions:
-- On STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ
--   reduce production testlist1_star_expr -> star_expr

State 243:
## Known stack suffix:
## WITHx
## LR(1) items:
with_stmt -> WITHx . with_item_list COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On with_item_list shift to state 244
-- On with_item shift to state 520
-- On test shift to state 247
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 244:
## Known stack suffix:
## WITHx with_item_list
## LR(1) items:
with_item_list -> with_item_list . COMMA with_item [ COMMA COLON ]
with_stmt -> WITHx with_item_list . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COMMA shift to state 245
-- On COLON shift to state 250
## Reductions:

State 245:
## Known stack suffix:
## with_item_list COMMA
## LR(1) items:
with_item_list -> with_item_list COMMA . with_item [ COMMA COLON ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On with_item shift to state 246
-- On test shift to state 247
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 246:
## Known stack suffix:
## with_item_list COMMA with_item
## LR(1) items:
with_item_list -> with_item_list COMMA with_item . [ COMMA COLON ]
## Transitions:
## Reductions:
-- On COMMA COLON
--   reduce production with_item_list -> with_item_list COMMA with_item

State 247:
## Known stack suffix:
## test
## LR(1) items:
with_item -> test . [ COMMA COLON ]
with_item -> test . AS expr [ COMMA COLON ]
## Transitions:
-- On AS shift to state 248
## Reductions:
-- On COMMA COLON
--   reduce production with_item -> test

State 248:
## Known stack suffix:
## test AS
## LR(1) items:
with_item -> test AS . expr [ COMMA COLON ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 249
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 249:
## Known stack suffix:
## test AS expr
## LR(1) items:
with_item -> test AS expr . [ COMMA COLON ]
## Transitions:
## Reductions:
-- On COMMA COLON
--   reduce production with_item -> test AS expr

State 250:
## Known stack suffix:
## WITHx with_item_list COLON
## LR(1) items:
with_stmt -> WITHx with_item_list COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 519
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 251:
## Known stack suffix:
## RETURN
## LR(1) items:
return_stmt -> RETURN . [ SEMICOLON NEWLINE ]
return_stmt -> RETURN . testlist_star_expr [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 252
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production return_stmt -> RETURN

State 252:
## Known stack suffix:
## RETURN testlist_star_expr
## LR(1) items:
return_stmt -> RETURN testlist_star_expr . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production return_stmt -> RETURN testlist_star_expr

State 253:
## Known stack suffix:
## RAISE
## LR(1) items:
raise_stmt -> RAISE . [ SEMICOLON NEWLINE ]
raise_stmt -> RAISE . test [ SEMICOLON NEWLINE ]
raise_stmt -> RAISE . test COMMA test [ SEMICOLON NEWLINE ]
raise_stmt -> RAISE . test COMMA test COMMA test [ SEMICOLON NEWLINE ]
raise_stmt -> RAISE . test FROM test [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 254
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production raise_stmt -> RAISE

State 254:
## Known stack suffix:
## RAISE test
## LR(1) items:
raise_stmt -> RAISE test . [ SEMICOLON NEWLINE ]
raise_stmt -> RAISE test . COMMA test [ SEMICOLON NEWLINE ]
raise_stmt -> RAISE test . COMMA test COMMA test [ SEMICOLON NEWLINE ]
raise_stmt -> RAISE test . FROM test [ SEMICOLON NEWLINE ]
## Transitions:
-- On FROM shift to state 255
-- On COMMA shift to state 257
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production raise_stmt -> RAISE test

State 255:
## Known stack suffix:
## RAISE test FROM
## LR(1) items:
raise_stmt -> RAISE test FROM . test [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 256
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 256:
## Known stack suffix:
## RAISE test FROM test
## LR(1) items:
raise_stmt -> RAISE test FROM test . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production raise_stmt -> RAISE test FROM test

State 257:
## Known stack suffix:
## RAISE test COMMA
## LR(1) items:
raise_stmt -> RAISE test COMMA . test [ SEMICOLON NEWLINE ]
raise_stmt -> RAISE test COMMA . test COMMA test [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 258
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 258:
## Known stack suffix:
## RAISE test COMMA test
## LR(1) items:
raise_stmt -> RAISE test COMMA test . [ SEMICOLON NEWLINE ]
raise_stmt -> RAISE test COMMA test . COMMA test [ SEMICOLON NEWLINE ]
## Transitions:
-- On COMMA shift to state 259
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production raise_stmt -> RAISE test COMMA test

State 259:
## Known stack suffix:
## RAISE test COMMA test COMMA
## LR(1) items:
raise_stmt -> RAISE test COMMA test COMMA . test [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 260
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 260:
## Known stack suffix:
## RAISE test COMMA test COMMA test
## LR(1) items:
raise_stmt -> RAISE test COMMA test COMMA test . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production raise_stmt -> RAISE test COMMA test COMMA test

State 261:
## Known stack suffix:
## PRINT
## LR(1) items:
print_stmt -> PRINT . [ SEMICOLON NEWLINE ]
print_stmt -> PRINT . testlist [ SEMICOLON NEWLINE ]
print_stmt -> PRINT . GT_GT testlist [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On GT_GT shift to state 262
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On testlist1 shift to state 263
-- On testlist shift to state 266
-- On test shift to state 188
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production print_stmt -> PRINT

State 262:
## Known stack suffix:
## PRINT GT_GT
## LR(1) items:
print_stmt -> PRINT GT_GT . testlist [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On testlist1 shift to state 263
-- On testlist shift to state 265
-- On test shift to state 188
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 263:
## Known stack suffix:
## testlist1
## LR(1) items:
testlist -> testlist1 . [ SEMICOLON NEWLINE COLON ]
testlist -> testlist1 . COMMA [ SEMICOLON NEWLINE COLON ]
testlist1 -> testlist1 . COMMA test [ SEMICOLON NEWLINE COMMA COLON ]
## Transitions:
-- On COMMA shift to state 264
## Reductions:
-- On SEMICOLON NEWLINE COLON
--   reduce production testlist -> testlist1

State 264:
## Known stack suffix:
## testlist1 COMMA
## LR(1) items:
testlist -> testlist1 COMMA . [ SEMICOLON NEWLINE COLON ]
testlist1 -> testlist1 COMMA . test [ SEMICOLON NEWLINE COMMA COLON ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 186
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On SEMICOLON NEWLINE COLON
--   reduce production testlist -> testlist1 COMMA

State 265:
## Known stack suffix:
## PRINT GT_GT testlist
## LR(1) items:
print_stmt -> PRINT GT_GT testlist . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production print_stmt -> PRINT GT_GT testlist

State 266:
## Known stack suffix:
## PRINT testlist
## LR(1) items:
print_stmt -> PRINT testlist . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production print_stmt -> PRINT testlist

State 267:
## Known stack suffix:
## PASS
## LR(1) items:
pass_stmt -> PASS . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production pass_stmt -> PASS

State 268:
## Known stack suffix:
## NONLOCAL
## LR(1) items:
nonlocal_stmt -> NONLOCAL . names [ SEMICOLON NEWLINE ]
## Transitions:
-- On NAMEx shift to state 5
-- On names shift to state 269
-- On name shift to state 270
## Reductions:

State 269:
## Known stack suffix:
## NONLOCAL names
## LR(1) items:
nonlocal_stmt -> NONLOCAL names . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production nonlocal_stmt -> NONLOCAL names

State 270:
## Known stack suffix:
## name
## LR(1) items:
names -> name . [ SEMICOLON NEWLINE ]
names -> name . COMMA names [ SEMICOLON NEWLINE ]
## Transitions:
-- On COMMA shift to state 271
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production names -> name

State 271:
## Known stack suffix:
## name COMMA
## LR(1) items:
names -> name COMMA . names [ SEMICOLON NEWLINE ]
## Transitions:
-- On NAMEx shift to state 5
-- On names shift to state 272
-- On name shift to state 270
## Reductions:

State 272:
## Known stack suffix:
## name COMMA names
## LR(1) items:
names -> name COMMA names . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production names -> name COMMA names

State 273:
## Known stack suffix:
## NEWLINE
## LR(1) items:
suite -> NEWLINE . INDENT stmts DEDENT [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On INDENT shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## NEWLINE INDENT
## LR(1) items:
suite -> NEWLINE INDENT . stmts DEDENT [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On WITHx shift to state 243
-- On WHILE shift to state 275
-- On TRY shift to state 392
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On IF shift to state 410
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FOR shift to state 423
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On DEF shift to state 430
-- On CONTINUE shift to state 328
-- On CLASS shift to state 459
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On AT shift to state 471
-- On ASYNC shift to state 480
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On with_stmt shift to state 491
-- On while_stmt shift to state 492
-- On try_stmt shift to state 493
-- On try_except shift to state 494
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On stmts shift to state 498
-- On stmt shift to state 500
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 502
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On if_stmt shift to state 503
-- On global_stmt shift to state 379
-- On funcdef shift to state 504
-- On for_stmt shift to state 505
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On decorators shift to state 506
-- On decorator shift to state 511
-- On decorated shift to state 513
-- On continue_stmt shift to state 384
-- On compound_stmt_ shift to state 514
-- On compound_stmt shift to state 515
-- On comparison shift to state 80
-- On classdef shift to state 516
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On async_stmt shift to state 517
-- On async_funcdef shift to state 518
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 275:
## Known stack suffix:
## WHILE
## LR(1) items:
while_stmt -> WHILE . test COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
while_stmt -> WHILE . test COLON suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 276
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 276:
## Known stack suffix:
## WHILE test
## LR(1) items:
while_stmt -> WHILE test . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
while_stmt -> WHILE test . COLON suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## WHILE test COLON
## LR(1) items:
while_stmt -> WHILE test COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
while_stmt -> WHILE test COLON . suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 363
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 278:
## Known stack suffix:
## IMPORT
## LR(1) items:
import_name -> IMPORT . dotted_as_names [ SEMICOLON NEWLINE ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 279
-- On dotted_name shift to state 282
-- On dotted_as_names shift to state 287
-- On dotted_as_name shift to state 288
## Reductions:

State 279:
## Known stack suffix:
## name
## LR(1) items:
dotted_name -> name . [ SEMICOLON NEWLINE NAMEx LPAREN IMPORT COMMA AS ]
dotted_name -> name . DOT dotted_name [ SEMICOLON NEWLINE NAMEx LPAREN IMPORT COMMA AS ]
## Transitions:
-- On DOT shift to state 280
## Reductions:
-- On SEMICOLON NEWLINE NAMEx LPAREN IMPORT COMMA AS
--   reduce production dotted_name -> name

State 280:
## Known stack suffix:
## name DOT
## LR(1) items:
dotted_name -> name DOT . dotted_name [ SEMICOLON NEWLINE NAMEx LPAREN IMPORT COMMA AS ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 279
-- On dotted_name shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## name DOT dotted_name
## LR(1) items:
dotted_name -> name DOT dotted_name . [ SEMICOLON NEWLINE NAMEx LPAREN IMPORT COMMA AS ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE NAMEx LPAREN IMPORT COMMA AS
--   reduce production dotted_name -> name DOT dotted_name

State 282:
## Known stack suffix:
## dotted_name
## LR(1) items:
dotted_as_name -> dotted_name . [ SEMICOLON NEWLINE COMMA ]
dotted_as_name -> dotted_name . name name [ SEMICOLON NEWLINE COMMA ]
dotted_as_name -> dotted_name . AS name [ SEMICOLON NEWLINE COMMA ]
## Transitions:
-- On NAMEx shift to state 5
-- On AS shift to state 283
-- On name shift to state 285
## Reductions:
-- On SEMICOLON NEWLINE COMMA
--   reduce production dotted_as_name -> dotted_name

State 283:
## Known stack suffix:
## dotted_name AS
## LR(1) items:
dotted_as_name -> dotted_name AS . name [ SEMICOLON NEWLINE COMMA ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## dotted_name AS name
## LR(1) items:
dotted_as_name -> dotted_name AS name . [ SEMICOLON NEWLINE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE COMMA
--   reduce production dotted_as_name -> dotted_name AS name

State 285:
## Known stack suffix:
## dotted_name name
## LR(1) items:
dotted_as_name -> dotted_name name . name [ SEMICOLON NEWLINE COMMA ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## dotted_name name name
## LR(1) items:
dotted_as_name -> dotted_name name name . [ SEMICOLON NEWLINE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE COMMA
--   reduce production dotted_as_name -> dotted_name name name

State 287:
## Known stack suffix:
## IMPORT dotted_as_names
## LR(1) items:
import_name -> IMPORT dotted_as_names . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production import_name -> IMPORT dotted_as_names

State 288:
## Known stack suffix:
## dotted_as_name
## LR(1) items:
dotted_as_names -> dotted_as_name . [ SEMICOLON NEWLINE ]
dotted_as_names -> dotted_as_name . COMMA dotted_as_names [ SEMICOLON NEWLINE ]
## Transitions:
-- On COMMA shift to state 289
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production dotted_as_names -> dotted_as_name

State 289:
## Known stack suffix:
## dotted_as_name COMMA
## LR(1) items:
dotted_as_names -> dotted_as_name COMMA . dotted_as_names [ SEMICOLON NEWLINE ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 279
-- On dotted_name shift to state 282
-- On dotted_as_names shift to state 290
-- On dotted_as_name shift to state 288
## Reductions:

State 290:
## Known stack suffix:
## dotted_as_name COMMA dotted_as_names
## LR(1) items:
dotted_as_names -> dotted_as_name COMMA dotted_as_names . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production dotted_as_names -> dotted_as_name COMMA dotted_as_names

State 291:
## Known stack suffix:
## GLOBAL
## LR(1) items:
global_stmt -> GLOBAL . names [ SEMICOLON NEWLINE ]
## Transitions:
-- On NAMEx shift to state 5
-- On names shift to state 292
-- On name shift to state 270
## Reductions:

State 292:
## Known stack suffix:
## GLOBAL names
## LR(1) items:
global_stmt -> GLOBAL names . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production global_stmt -> GLOBAL names

State 293:
## Known stack suffix:
## FROM
## LR(1) items:
import_from -> FROM . dotted_name IMPORT imports [ SEMICOLON NEWLINE ]
import_from -> FROM . dot_or_ellipsis_seq dotted_name IMPORT imports [ SEMICOLON NEWLINE ]
import_from -> FROM . dot_or_ellipsis_seq IMPORT imports [ SEMICOLON NEWLINE ]
## Transitions:
-- On NAMEx shift to state 5
-- On ELLIPSIS shift to state 294
-- On DOT shift to state 295
-- On nonempty_list(dot_or_ellipsis) shift to state 298
-- On name shift to state 279
-- On dotted_name shift to state 299
-- On dot_or_ellipsis_seq shift to state 314
## Reductions:

State 294:
## Known stack suffix:
## ELLIPSIS
## LR(1) items:
nonempty_list(dot_or_ellipsis) -> ELLIPSIS . [ NAMEx IMPORT ]
nonempty_list(dot_or_ellipsis) -> ELLIPSIS . nonempty_list(dot_or_ellipsis) [ NAMEx IMPORT ]
## Transitions:
-- On ELLIPSIS shift to state 294
-- On DOT shift to state 295
-- On nonempty_list(dot_or_ellipsis) shift to state 297
## Reductions:
-- On NAMEx IMPORT
--   reduce production nonempty_list(dot_or_ellipsis) -> ELLIPSIS

State 295:
## Known stack suffix:
## DOT
## LR(1) items:
nonempty_list(dot_or_ellipsis) -> DOT . [ NAMEx IMPORT ]
nonempty_list(dot_or_ellipsis) -> DOT . nonempty_list(dot_or_ellipsis) [ NAMEx IMPORT ]
## Transitions:
-- On ELLIPSIS shift to state 294
-- On DOT shift to state 295
-- On nonempty_list(dot_or_ellipsis) shift to state 296
## Reductions:
-- On NAMEx IMPORT
--   reduce production nonempty_list(dot_or_ellipsis) -> DOT

State 296:
## Known stack suffix:
## DOT nonempty_list(dot_or_ellipsis)
## LR(1) items:
nonempty_list(dot_or_ellipsis) -> DOT nonempty_list(dot_or_ellipsis) . [ NAMEx IMPORT ]
## Transitions:
## Reductions:
-- On NAMEx IMPORT
--   reduce production nonempty_list(dot_or_ellipsis) -> DOT nonempty_list(dot_or_ellipsis)

State 297:
## Known stack suffix:
## ELLIPSIS nonempty_list(dot_or_ellipsis)
## LR(1) items:
nonempty_list(dot_or_ellipsis) -> ELLIPSIS nonempty_list(dot_or_ellipsis) . [ NAMEx IMPORT ]
## Transitions:
## Reductions:
-- On NAMEx IMPORT
--   reduce production nonempty_list(dot_or_ellipsis) -> ELLIPSIS nonempty_list(dot_or_ellipsis)

State 298:
## Known stack suffix:
## nonempty_list(dot_or_ellipsis)
## LR(1) items:
dot_or_ellipsis_seq -> nonempty_list(dot_or_ellipsis) . [ NAMEx IMPORT ]
## Transitions:
## Reductions:
-- On NAMEx IMPORT
--   reduce production dot_or_ellipsis_seq -> nonempty_list(dot_or_ellipsis)

State 299:
## Known stack suffix:
## FROM dotted_name
## LR(1) items:
import_from -> FROM dotted_name . IMPORT imports [ SEMICOLON NEWLINE ]
## Transitions:
-- On IMPORT shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## FROM dotted_name IMPORT
## LR(1) items:
import_from -> FROM dotted_name IMPORT . imports [ SEMICOLON NEWLINE ]
## Transitions:
-- On STAR shift to state 301
-- On NAMEx shift to state 5
-- On LPAREN shift to state 302
-- On name shift to state 303
-- On imports shift to state 312
-- On import_as_names_list shift to state 313
-- On import_as_names shift to state 308
-- On import_as_name shift to state 311
## Reductions:

State 301:
## Known stack suffix:
## STAR
## LR(1) items:
imports -> STAR . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production imports -> STAR

State 302:
## Known stack suffix:
## LPAREN
## LR(1) items:
imports -> LPAREN . import_as_names_list RPAREN [ SEMICOLON NEWLINE ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 303
-- On import_as_names_list shift to state 306
-- On import_as_names shift to state 308
-- On import_as_name shift to state 311
## Reductions:

State 303:
## Known stack suffix:
## name
## LR(1) items:
import_as_name -> name . [ SEMICOLON RPAREN NEWLINE COMMA ]
import_as_name -> name . AS name [ SEMICOLON RPAREN NEWLINE COMMA ]
## Transitions:
-- On AS shift to state 304
## Reductions:
-- On SEMICOLON RPAREN NEWLINE COMMA
--   reduce production import_as_name -> name

State 304:
## Known stack suffix:
## name AS
## LR(1) items:
import_as_name -> name AS . name [ SEMICOLON RPAREN NEWLINE COMMA ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## name AS name
## LR(1) items:
import_as_name -> name AS name . [ SEMICOLON RPAREN NEWLINE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN NEWLINE COMMA
--   reduce production import_as_name -> name AS name

State 306:
## Known stack suffix:
## LPAREN import_as_names_list
## LR(1) items:
imports -> LPAREN import_as_names_list . RPAREN [ SEMICOLON NEWLINE ]
## Transitions:
-- On RPAREN shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## LPAREN import_as_names_list RPAREN
## LR(1) items:
imports -> LPAREN import_as_names_list RPAREN . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production imports -> LPAREN import_as_names_list RPAREN

State 308:
## Known stack suffix:
## import_as_names
## LR(1) items:
import_as_names -> import_as_names . COMMA import_as_name [ SEMICOLON RPAREN NEWLINE COMMA ]
import_as_names_list -> import_as_names . [ SEMICOLON RPAREN NEWLINE ]
import_as_names_list -> import_as_names . COMMA [ SEMICOLON RPAREN NEWLINE ]
## Transitions:
-- On COMMA shift to state 309
## Reductions:
-- On SEMICOLON RPAREN NEWLINE
--   reduce production import_as_names_list -> import_as_names

State 309:
## Known stack suffix:
## import_as_names COMMA
## LR(1) items:
import_as_names -> import_as_names COMMA . import_as_name [ SEMICOLON RPAREN NEWLINE COMMA ]
import_as_names_list -> import_as_names COMMA . [ SEMICOLON RPAREN NEWLINE ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 303
-- On import_as_name shift to state 310
## Reductions:
-- On SEMICOLON RPAREN NEWLINE
--   reduce production import_as_names_list -> import_as_names COMMA

State 310:
## Known stack suffix:
## import_as_names COMMA import_as_name
## LR(1) items:
import_as_names -> import_as_names COMMA import_as_name . [ SEMICOLON RPAREN NEWLINE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN NEWLINE COMMA
--   reduce production import_as_names -> import_as_names COMMA import_as_name

State 311:
## Known stack suffix:
## import_as_name
## LR(1) items:
import_as_names -> import_as_name . [ SEMICOLON RPAREN NEWLINE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAREN NEWLINE COMMA
--   reduce production import_as_names -> import_as_name

State 312:
## Known stack suffix:
## FROM dotted_name IMPORT imports
## LR(1) items:
import_from -> FROM dotted_name IMPORT imports . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production import_from -> FROM dotted_name IMPORT imports

State 313:
## Known stack suffix:
## import_as_names_list
## LR(1) items:
imports -> import_as_names_list . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production imports -> import_as_names_list

State 314:
## Known stack suffix:
## FROM dot_or_ellipsis_seq
## LR(1) items:
import_from -> FROM dot_or_ellipsis_seq . dotted_name IMPORT imports [ SEMICOLON NEWLINE ]
import_from -> FROM dot_or_ellipsis_seq . IMPORT imports [ SEMICOLON NEWLINE ]
## Transitions:
-- On NAMEx shift to state 5
-- On IMPORT shift to state 315
-- On name shift to state 279
-- On dotted_name shift to state 317
## Reductions:

State 315:
## Known stack suffix:
## FROM dot_or_ellipsis_seq IMPORT
## LR(1) items:
import_from -> FROM dot_or_ellipsis_seq IMPORT . imports [ SEMICOLON NEWLINE ]
## Transitions:
-- On STAR shift to state 301
-- On NAMEx shift to state 5
-- On LPAREN shift to state 302
-- On name shift to state 303
-- On imports shift to state 316
-- On import_as_names_list shift to state 313
-- On import_as_names shift to state 308
-- On import_as_name shift to state 311
## Reductions:

State 316:
## Known stack suffix:
## FROM dot_or_ellipsis_seq IMPORT imports
## LR(1) items:
import_from -> FROM dot_or_ellipsis_seq IMPORT imports . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production import_from -> FROM dot_or_ellipsis_seq IMPORT imports

State 317:
## Known stack suffix:
## FROM dot_or_ellipsis_seq dotted_name
## LR(1) items:
import_from -> FROM dot_or_ellipsis_seq dotted_name . IMPORT imports [ SEMICOLON NEWLINE ]
## Transitions:
-- On IMPORT shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## FROM dot_or_ellipsis_seq dotted_name IMPORT
## LR(1) items:
import_from -> FROM dot_or_ellipsis_seq dotted_name IMPORT . imports [ SEMICOLON NEWLINE ]
## Transitions:
-- On STAR shift to state 301
-- On NAMEx shift to state 5
-- On LPAREN shift to state 302
-- On name shift to state 303
-- On imports shift to state 319
-- On import_as_names_list shift to state 313
-- On import_as_names shift to state 308
-- On import_as_name shift to state 311
## Reductions:

State 319:
## Known stack suffix:
## FROM dot_or_ellipsis_seq dotted_name IMPORT imports
## LR(1) items:
import_from -> FROM dot_or_ellipsis_seq dotted_name IMPORT imports . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production import_from -> FROM dot_or_ellipsis_seq dotted_name IMPORT imports

State 320:
## Known stack suffix:
## EXEC
## LR(1) items:
exec_stmt -> EXEC . expr [ SEMICOLON NEWLINE ]
exec_stmt -> EXEC . expr IN test [ SEMICOLON NEWLINE ]
exec_stmt -> EXEC . expr IN test COMMA test [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On expr shift to state 321
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 321:
## Known stack suffix:
## EXEC expr
## LR(1) items:
exec_stmt -> EXEC expr . [ SEMICOLON NEWLINE ]
exec_stmt -> EXEC expr . IN test [ SEMICOLON NEWLINE ]
exec_stmt -> EXEC expr . IN test COMMA test [ SEMICOLON NEWLINE ]
## Transitions:
-- On IN shift to state 322
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production exec_stmt -> EXEC expr

State 322:
## Known stack suffix:
## EXEC expr IN
## LR(1) items:
exec_stmt -> EXEC expr IN . test [ SEMICOLON NEWLINE ]
exec_stmt -> EXEC expr IN . test COMMA test [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 323
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 323:
## Known stack suffix:
## EXEC expr IN test
## LR(1) items:
exec_stmt -> EXEC expr IN test . [ SEMICOLON NEWLINE ]
exec_stmt -> EXEC expr IN test . COMMA test [ SEMICOLON NEWLINE ]
## Transitions:
-- On COMMA shift to state 324
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production exec_stmt -> EXEC expr IN test

State 324:
## Known stack suffix:
## EXEC expr IN test COMMA
## LR(1) items:
exec_stmt -> EXEC expr IN test COMMA . test [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 325
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 325:
## Known stack suffix:
## EXEC expr IN test COMMA test
## LR(1) items:
exec_stmt -> EXEC expr IN test COMMA test . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production exec_stmt -> EXEC expr IN test COMMA test

State 326:
## Known stack suffix:
## DEL
## LR(1) items:
del_stmt -> DEL . exprlist [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 135
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On exprs shift to state 136
-- On exprlist shift to state 327
-- On expr shift to state 167
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 327:
## Known stack suffix:
## DEL exprlist
## LR(1) items:
del_stmt -> DEL exprlist . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production del_stmt -> DEL exprlist

State 328:
## Known stack suffix:
## CONTINUE
## LR(1) items:
continue_stmt -> CONTINUE . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production continue_stmt -> CONTINUE

State 329:
## Known stack suffix:
## BREAK
## LR(1) items:
break_stmt -> BREAK . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production break_stmt -> BREAK

State 330:
## Known stack suffix:
## ASSERT
## LR(1) items:
assert_stmt -> ASSERT . test [ SEMICOLON NEWLINE ]
assert_stmt -> ASSERT . test COMMA test [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 331
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 331:
## Known stack suffix:
## ASSERT test
## LR(1) items:
assert_stmt -> ASSERT test . [ SEMICOLON NEWLINE ]
assert_stmt -> ASSERT test . COMMA test [ SEMICOLON NEWLINE ]
## Transitions:
-- On COMMA shift to state 332
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production assert_stmt -> ASSERT test

State 332:
## Known stack suffix:
## ASSERT test COMMA
## LR(1) items:
assert_stmt -> ASSERT test COMMA . test [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 333
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 333:
## Known stack suffix:
## ASSERT test COMMA test
## LR(1) items:
assert_stmt -> ASSERT test COMMA test . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production assert_stmt -> ASSERT test COMMA test

State 334:
## Known stack suffix:
## yield_stmt
## LR(1) items:
flow_stmt -> yield_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production flow_stmt -> yield_stmt

State 335:
## Known stack suffix:
## yield_expr
## LR(1) items:
yield_stmt -> yield_expr . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production yield_stmt -> yield_expr

State 336:
## Known stack suffix:
## testlist_star_expr
## LR(1) items:
expr_stmt -> testlist_star_expr . [ SEMICOLON NEWLINE ]
expr_stmt -> testlist_star_expr . annassign [ SEMICOLON NEWLINE ]
expr_stmt -> testlist_star_expr . augassign testlist_or_yield_expr [ SEMICOLON NEWLINE ]
expr_stmt -> testlist_star_expr . eq_testlists [ SEMICOLON NEWLINE ]
## Transitions:
-- On STAR_STAR_EQ shift to state 337
-- On STAR_EQ shift to state 338
-- On SLASH_SLASH_EQ shift to state 339
-- On SLASH_EQ shift to state 340
-- On PLUS_EQ shift to state 341
-- On PIPE_EQ shift to state 342
-- On PERCENT_EQ shift to state 343
-- On MINUS_EQ shift to state 344
-- On LT_LT_EQ shift to state 345
-- On HAT_EQ shift to state 346
-- On GT_GT_EQ shift to state 347
-- On EQ shift to state 348
-- On COLON shift to state 352
-- On AMP_EQ shift to state 356
-- On eq_testlists shift to state 357
-- On augassign shift to state 360
-- On annassign shift to state 362
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production expr_stmt -> testlist_star_expr

State 337:
## Known stack suffix:
## STAR_STAR_EQ
## LR(1) items:
augassign -> STAR_STAR_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> STAR_STAR_EQ

State 338:
## Known stack suffix:
## STAR_EQ
## LR(1) items:
augassign -> STAR_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> STAR_EQ

State 339:
## Known stack suffix:
## SLASH_SLASH_EQ
## LR(1) items:
augassign -> SLASH_SLASH_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> SLASH_SLASH_EQ

State 340:
## Known stack suffix:
## SLASH_EQ
## LR(1) items:
augassign -> SLASH_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> SLASH_EQ

State 341:
## Known stack suffix:
## PLUS_EQ
## LR(1) items:
augassign -> PLUS_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> PLUS_EQ

State 342:
## Known stack suffix:
## PIPE_EQ
## LR(1) items:
augassign -> PIPE_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> PIPE_EQ

State 343:
## Known stack suffix:
## PERCENT_EQ
## LR(1) items:
augassign -> PERCENT_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> PERCENT_EQ

State 344:
## Known stack suffix:
## MINUS_EQ
## LR(1) items:
augassign -> MINUS_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> MINUS_EQ

State 345:
## Known stack suffix:
## LT_LT_EQ
## LR(1) items:
augassign -> LT_LT_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> LT_LT_EQ

State 346:
## Known stack suffix:
## HAT_EQ
## LR(1) items:
augassign -> HAT_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> HAT_EQ

State 347:
## Known stack suffix:
## GT_GT_EQ
## LR(1) items:
augassign -> GT_GT_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> GT_GT_EQ

State 348:
## Known stack suffix:
## EQ
## LR(1) items:
eq_testlists -> EQ . testlist_or_yield_expr [ SEMICOLON NEWLINE EQ ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On yield_expr shift to state 349
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 350
-- On testlist_or_yield_expr shift to state 351
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 349:
## Known stack suffix:
## yield_expr
## LR(1) items:
testlist_or_yield_expr -> yield_expr . [ SEMICOLON NEWLINE EQ ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE EQ
--   reduce production testlist_or_yield_expr -> yield_expr

State 350:
## Known stack suffix:
## testlist_star_expr
## LR(1) items:
testlist_or_yield_expr -> testlist_star_expr . [ SEMICOLON NEWLINE EQ ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE EQ
--   reduce production testlist_or_yield_expr -> testlist_star_expr

State 351:
## Known stack suffix:
## EQ testlist_or_yield_expr
## LR(1) items:
eq_testlists -> EQ testlist_or_yield_expr . [ SEMICOLON NEWLINE EQ ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE EQ
--   reduce production eq_testlists -> EQ testlist_or_yield_expr

State 352:
## Known stack suffix:
## COLON
## LR(1) items:
annassign -> COLON . test [ SEMICOLON NEWLINE ]
annassign -> COLON . test EQ testlist_or_yield_expr [ SEMICOLON NEWLINE ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 353
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 353:
## Known stack suffix:
## COLON test
## LR(1) items:
annassign -> COLON test . [ SEMICOLON NEWLINE ]
annassign -> COLON test . EQ testlist_or_yield_expr [ SEMICOLON NEWLINE ]
## Transitions:
-- On EQ shift to state 354
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production annassign -> COLON test

State 354:
## Known stack suffix:
## COLON test EQ
## LR(1) items:
annassign -> COLON test EQ . testlist_or_yield_expr [ SEMICOLON NEWLINE ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On yield_expr shift to state 349
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 350
-- On testlist_or_yield_expr shift to state 355
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 355:
## Known stack suffix:
## COLON test EQ testlist_or_yield_expr
## LR(1) items:
annassign -> COLON test EQ testlist_or_yield_expr . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production annassign -> COLON test EQ testlist_or_yield_expr

State 356:
## Known stack suffix:
## AMP_EQ
## LR(1) items:
augassign -> AMP_EQ . [ YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT ]
## Transitions:
## Reductions:
-- On YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
--   reduce production augassign -> AMP_EQ

State 357:
## Known stack suffix:
## testlist_star_expr eq_testlists
## LR(1) items:
eq_testlists -> eq_testlists . EQ testlist_or_yield_expr [ SEMICOLON NEWLINE EQ ]
expr_stmt -> testlist_star_expr eq_testlists . [ SEMICOLON NEWLINE ]
## Transitions:
-- On EQ shift to state 358
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production expr_stmt -> testlist_star_expr eq_testlists

State 358:
## Known stack suffix:
## eq_testlists EQ
## LR(1) items:
eq_testlists -> eq_testlists EQ . testlist_or_yield_expr [ SEMICOLON NEWLINE EQ ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On yield_expr shift to state 349
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 350
-- On testlist_or_yield_expr shift to state 359
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 359:
## Known stack suffix:
## eq_testlists EQ testlist_or_yield_expr
## LR(1) items:
eq_testlists -> eq_testlists EQ testlist_or_yield_expr . [ SEMICOLON NEWLINE EQ ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE EQ
--   reduce production eq_testlists -> eq_testlists EQ testlist_or_yield_expr

State 360:
## Known stack suffix:
## testlist_star_expr augassign
## LR(1) items:
expr_stmt -> testlist_star_expr augassign . testlist_or_yield_expr [ SEMICOLON NEWLINE ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On yield_expr shift to state 349
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 350
-- On testlist_or_yield_expr shift to state 361
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 361:
## Known stack suffix:
## testlist_star_expr augassign testlist_or_yield_expr
## LR(1) items:
expr_stmt -> testlist_star_expr augassign testlist_or_yield_expr . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production expr_stmt -> testlist_star_expr augassign testlist_or_yield_expr

State 362:
## Known stack suffix:
## testlist_star_expr annassign
## LR(1) items:
expr_stmt -> testlist_star_expr annassign . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production expr_stmt -> testlist_star_expr annassign

State 363:
## Known stack suffix:
## WHILE test COLON suite
## LR(1) items:
while_stmt -> WHILE test COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
while_stmt -> WHILE test COLON suite . els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On ELSE shift to state 364
-- On els shift to state 391
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production while_stmt -> WHILE test COLON suite

State 364:
## Known stack suffix:
## ELSE
## LR(1) items:
els -> ELSE . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## ELSE COLON
## LR(1) items:
els -> ELSE COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 366
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 366:
## Known stack suffix:
## ELSE COLON suite
## LR(1) items:
els -> ELSE COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production els -> ELSE COLON suite

State 367:
## Known stack suffix:
## small_stmts
## LR(1) items:
simple_stmt_ -> small_stmts . [ NEWLINE ]
simple_stmt_ -> small_stmts . SEMICOLON [ NEWLINE ]
small_stmts -> small_stmts . SEMICOLON small_stmt [ SEMICOLON NEWLINE ]
## Transitions:
-- On SEMICOLON shift to state 368
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt_ -> small_stmts

State 368:
## Known stack suffix:
## small_stmts SEMICOLON
## LR(1) items:
simple_stmt_ -> small_stmts SEMICOLON . [ NEWLINE ]
small_stmts -> small_stmts SEMICOLON . small_stmt [ SEMICOLON NEWLINE ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 370
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On NEWLINE
--   reduce production simple_stmt_ -> small_stmts SEMICOLON

State 369:
## Known stack suffix:
## small_stmt_
## LR(1) items:
small_stmt -> small_stmt_ . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt -> small_stmt_

State 370:
## Known stack suffix:
## small_stmts SEMICOLON small_stmt
## LR(1) items:
small_stmts -> small_stmts SEMICOLON small_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmts -> small_stmts SEMICOLON small_stmt

State 371:
## Known stack suffix:
## return_stmt
## LR(1) items:
flow_stmt -> return_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production flow_stmt -> return_stmt

State 372:
## Known stack suffix:
## raise_stmt
## LR(1) items:
flow_stmt -> raise_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production flow_stmt -> raise_stmt

State 373:
## Known stack suffix:
## print_stmt
## LR(1) items:
small_stmt_ -> print_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> print_stmt

State 374:
## Known stack suffix:
## pass_stmt
## LR(1) items:
small_stmt_ -> pass_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> pass_stmt

State 375:
## Known stack suffix:
## nonlocal_stmt
## LR(1) items:
small_stmt_ -> nonlocal_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> nonlocal_stmt

State 376:
## Known stack suffix:
## import_stmt
## LR(1) items:
small_stmt_ -> import_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> import_stmt

State 377:
## Known stack suffix:
## import_name
## LR(1) items:
import_stmt -> import_name . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production import_stmt -> import_name

State 378:
## Known stack suffix:
## import_from
## LR(1) items:
import_stmt -> import_from . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production import_stmt -> import_from

State 379:
## Known stack suffix:
## global_stmt
## LR(1) items:
small_stmt_ -> global_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> global_stmt

State 380:
## Known stack suffix:
## flow_stmt
## LR(1) items:
small_stmt_ -> flow_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> flow_stmt

State 381:
## Known stack suffix:
## expr_stmt
## LR(1) items:
small_stmt_ -> expr_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> expr_stmt

State 382:
## Known stack suffix:
## exec_stmt
## LR(1) items:
small_stmt_ -> exec_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> exec_stmt

State 383:
## Known stack suffix:
## del_stmt
## LR(1) items:
small_stmt_ -> del_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> del_stmt

State 384:
## Known stack suffix:
## continue_stmt
## LR(1) items:
flow_stmt -> continue_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production flow_stmt -> continue_stmt

State 385:
## Known stack suffix:
## break_stmt
## LR(1) items:
flow_stmt -> break_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production flow_stmt -> break_stmt

State 386:
## Known stack suffix:
## assert_stmt
## LR(1) items:
small_stmt_ -> assert_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmt_ -> assert_stmt

State 387:
## Known stack suffix:
## small_stmt
## LR(1) items:
small_stmts -> small_stmt . [ SEMICOLON NEWLINE ]
## Transitions:
## Reductions:
-- On SEMICOLON NEWLINE
--   reduce production small_stmts -> small_stmt

State 388:
## Known stack suffix:
## simple_stmt_
## LR(1) items:
simple_stmt -> simple_stmt_ . NEWLINE [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On NEWLINE shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## simple_stmt_ NEWLINE
## LR(1) items:
simple_stmt -> simple_stmt_ NEWLINE . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production simple_stmt -> simple_stmt_ NEWLINE

State 390:
## Known stack suffix:
## simple_stmt
## LR(1) items:
suite -> simple_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production suite -> simple_stmt

State 391:
## Known stack suffix:
## WHILE test COLON suite els
## LR(1) items:
while_stmt -> WHILE test COLON suite els . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production while_stmt -> WHILE test COLON suite els

State 392:
## Known stack suffix:
## TRY
## LR(1) items:
try_except -> TRY . COLON suite except_clause_suites [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
try_stmt -> TRY . COLON suite finally [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## TRY COLON
## LR(1) items:
try_except -> TRY COLON . suite except_clause_suites [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
try_stmt -> TRY COLON . suite finally [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 394
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 394:
## Known stack suffix:
## TRY COLON suite
## LR(1) items:
try_except -> TRY COLON suite . except_clause_suites [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
try_stmt -> TRY COLON suite . finally [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On FINALLY shift to state 395
-- On EXCEPT shift to state 398
-- On finally shift to state 404
-- On except_clause_suites shift to state 405
-- On except_clause shift to state 406
## Reductions:

State 395:
## Known stack suffix:
## FINALLY
## LR(1) items:
finally -> FINALLY . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 396
## Reductions:

State 396:
## Known stack suffix:
## FINALLY COLON
## LR(1) items:
finally -> FINALLY COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 397
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 397:
## Known stack suffix:
## FINALLY COLON suite
## LR(1) items:
finally -> FINALLY COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production finally -> FINALLY COLON suite

State 398:
## Known stack suffix:
## EXCEPT
## LR(1) items:
except_clause -> EXCEPT . [ COLON ]
except_clause -> EXCEPT . test [ COLON ]
except_clause -> EXCEPT . test COMMA test [ COLON ]
except_clause -> EXCEPT . test AS test [ COLON ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 399
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On COLON
--   reduce production except_clause -> EXCEPT

State 399:
## Known stack suffix:
## EXCEPT test
## LR(1) items:
except_clause -> EXCEPT test . [ COLON ]
except_clause -> EXCEPT test . COMMA test [ COLON ]
except_clause -> EXCEPT test . AS test [ COLON ]
## Transitions:
-- On COMMA shift to state 400
-- On AS shift to state 402
## Reductions:
-- On COLON
--   reduce production except_clause -> EXCEPT test

State 400:
## Known stack suffix:
## EXCEPT test COMMA
## LR(1) items:
except_clause -> EXCEPT test COMMA . test [ COLON ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 401
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 401:
## Known stack suffix:
## EXCEPT test COMMA test
## LR(1) items:
except_clause -> EXCEPT test COMMA test . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production except_clause -> EXCEPT test COMMA test

State 402:
## Known stack suffix:
## EXCEPT test AS
## LR(1) items:
except_clause -> EXCEPT test AS . test [ COLON ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 403
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 403:
## Known stack suffix:
## EXCEPT test AS test
## LR(1) items:
except_clause -> EXCEPT test AS test . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production except_clause -> EXCEPT test AS test

State 404:
## Known stack suffix:
## TRY COLON suite finally
## LR(1) items:
try_stmt -> TRY COLON suite finally . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production try_stmt -> TRY COLON suite finally

State 405:
## Known stack suffix:
## TRY COLON suite except_clause_suites
## LR(1) items:
try_except -> TRY COLON suite except_clause_suites . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production try_except -> TRY COLON suite except_clause_suites

State 406:
## Known stack suffix:
## except_clause
## LR(1) items:
except_clause_suites -> except_clause . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
except_clause_suites -> except_clause . COLON suite except_clause_suites [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 407
## Reductions:

State 407:
## Known stack suffix:
## except_clause COLON
## LR(1) items:
except_clause_suites -> except_clause COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
except_clause_suites -> except_clause COLON . suite except_clause_suites [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 408
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 408:
## Known stack suffix:
## except_clause COLON suite
## LR(1) items:
except_clause_suites -> except_clause COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
except_clause_suites -> except_clause COLON suite . except_clause_suites [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On EXCEPT shift to state 398
-- On except_clause_suites shift to state 409
-- On except_clause shift to state 406
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production except_clause_suites -> except_clause COLON suite

State 409:
## Known stack suffix:
## except_clause COLON suite except_clause_suites
## LR(1) items:
except_clause_suites -> except_clause COLON suite except_clause_suites . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production except_clause_suites -> except_clause COLON suite except_clause_suites

State 410:
## Known stack suffix:
## IF
## LR(1) items:
if_stmt -> IF . test COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF . test COLON suite elifs [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF . test COLON suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF . test COLON suite elifs els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 411
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 411:
## Known stack suffix:
## IF test
## LR(1) items:
if_stmt -> IF test . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test . COLON suite elifs [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test . COLON suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test . COLON suite elifs els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 412
## Reductions:

State 412:
## Known stack suffix:
## IF test COLON
## LR(1) items:
if_stmt -> IF test COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test COLON . suite elifs [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test COLON . suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test COLON . suite elifs els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 413
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 413:
## Known stack suffix:
## IF test COLON suite
## LR(1) items:
if_stmt -> IF test COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test COLON suite . elifs [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test COLON suite . els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test COLON suite . elifs els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On ELSE shift to state 364
-- On ELIF shift to state 414
-- On els shift to state 418
-- On elifs shift to state 419
-- On elif shift to state 421
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production if_stmt -> IF test COLON suite

State 414:
## Known stack suffix:
## ELIF
## LR(1) items:
elif -> ELIF . test COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 415
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 415:
## Known stack suffix:
## ELIF test
## LR(1) items:
elif -> ELIF test . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## ELIF test COLON
## LR(1) items:
elif -> ELIF test COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 417
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 417:
## Known stack suffix:
## ELIF test COLON suite
## LR(1) items:
elif -> ELIF test COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production elif -> ELIF test COLON suite

State 418:
## Known stack suffix:
## IF test COLON suite els
## LR(1) items:
if_stmt -> IF test COLON suite els . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production if_stmt -> IF test COLON suite els

State 419:
## Known stack suffix:
## IF test COLON suite elifs
## LR(1) items:
if_stmt -> IF test COLON suite elifs . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
if_stmt -> IF test COLON suite elifs . els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On ELSE shift to state 364
-- On els shift to state 420
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production if_stmt -> IF test COLON suite elifs

State 420:
## Known stack suffix:
## IF test COLON suite elifs els
## LR(1) items:
if_stmt -> IF test COLON suite elifs els . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production if_stmt -> IF test COLON suite elifs els

State 421:
## Known stack suffix:
## elif
## LR(1) items:
elifs -> elif . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
elifs -> elif . elifs [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On ELIF shift to state 414
-- On elifs shift to state 422
-- On elif shift to state 421
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production elifs -> elif

State 422:
## Known stack suffix:
## elif elifs
## LR(1) items:
elifs -> elif elifs . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production elifs -> elif elifs

State 423:
## Known stack suffix:
## FOR
## LR(1) items:
for_stmt -> FOR . exprlist IN testlist COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
for_stmt -> FOR . exprlist IN testlist COLON suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 135
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On name shift to state 41
-- On literal shift to state 42
-- On factor shift to state 68
-- On exprs shift to state 136
-- On exprlist shift to state 424
-- On expr shift to state 167
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 424:
## Known stack suffix:
## FOR exprlist
## LR(1) items:
for_stmt -> FOR exprlist . IN testlist COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
for_stmt -> FOR exprlist . IN testlist COLON suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On IN shift to state 425
## Reductions:

State 425:
## Known stack suffix:
## FOR exprlist IN
## LR(1) items:
for_stmt -> FOR exprlist IN . testlist COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
for_stmt -> FOR exprlist IN . testlist COLON suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On testlist1 shift to state 263
-- On testlist shift to state 426
-- On test shift to state 188
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 426:
## Known stack suffix:
## FOR exprlist IN testlist
## LR(1) items:
for_stmt -> FOR exprlist IN testlist . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
for_stmt -> FOR exprlist IN testlist . COLON suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 427
## Reductions:

State 427:
## Known stack suffix:
## FOR exprlist IN testlist COLON
## LR(1) items:
for_stmt -> FOR exprlist IN testlist COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
for_stmt -> FOR exprlist IN testlist COLON . suite els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 428
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 428:
## Known stack suffix:
## FOR exprlist IN testlist COLON suite
## LR(1) items:
for_stmt -> FOR exprlist IN testlist COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
for_stmt -> FOR exprlist IN testlist COLON suite . els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On ELSE shift to state 364
-- On els shift to state 429
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production for_stmt -> FOR exprlist IN testlist COLON suite

State 429:
## Known stack suffix:
## FOR exprlist IN testlist COLON suite els
## LR(1) items:
for_stmt -> FOR exprlist IN testlist COLON suite els . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production for_stmt -> FOR exprlist IN testlist COLON suite els

State 430:
## Known stack suffix:
## DEF
## LR(1) items:
funcdef -> DEF . name parameters COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
funcdef -> DEF . name parameters ret_annot COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 431
## Reductions:

State 431:
## Known stack suffix:
## DEF name
## LR(1) items:
funcdef -> DEF name . parameters COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
funcdef -> DEF name . parameters ret_annot COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On LPAREN shift to state 432
-- On parameters shift to state 451
## Reductions:

State 432:
## Known stack suffix:
## LPAREN
## LR(1) items:
parameters -> LPAREN . RPAREN [ MINUS_GT COLON ]
parameters -> LPAREN . typedargslist RPAREN [ MINUS_GT COLON ]
## Transitions:
-- On STAR_STAR shift to state 433
-- On STAR shift to state 435
-- On RPAREN shift to state 437
-- On NAMEx shift to state 5
-- On LPAREN shift to state 28
-- On typedargslist shift to state 438
-- On typedargs_ shift to state 440
-- On typedarg shift to state 450
-- On tfpdef shift to state 443
-- On name shift to state 446
-- On fpdef shift to state 449
## Reductions:

State 433:
## Known stack suffix:
## STAR_STAR
## LR(1) items:
typedarg -> STAR_STAR . name [ RPAREN COMMA ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 434
## Reductions:

State 434:
## Known stack suffix:
## STAR_STAR name
## LR(1) items:
typedarg -> STAR_STAR name . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production typedarg -> STAR_STAR name

State 435:
## Known stack suffix:
## STAR
## LR(1) items:
typedarg -> STAR . [ RPAREN COMMA ]
typedarg -> STAR . name [ RPAREN COMMA ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 436
## Reductions:
-- On RPAREN COMMA
--   reduce production typedarg -> STAR

State 436:
## Known stack suffix:
## STAR name
## LR(1) items:
typedarg -> STAR name . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production typedarg -> STAR name

State 437:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
parameters -> LPAREN RPAREN . [ MINUS_GT COLON ]
## Transitions:
## Reductions:
-- On MINUS_GT COLON
--   reduce production parameters -> LPAREN RPAREN

State 438:
## Known stack suffix:
## LPAREN typedargslist
## LR(1) items:
parameters -> LPAREN typedargslist . RPAREN [ MINUS_GT COLON ]
## Transitions:
-- On RPAREN shift to state 439
## Reductions:

State 439:
## Known stack suffix:
## LPAREN typedargslist RPAREN
## LR(1) items:
parameters -> LPAREN typedargslist RPAREN . [ MINUS_GT COLON ]
## Transitions:
## Reductions:
-- On MINUS_GT COLON
--   reduce production parameters -> LPAREN typedargslist RPAREN

State 440:
## Known stack suffix:
## typedargs_
## LR(1) items:
typedargs_ -> typedargs_ . COMMA typedarg [ RPAREN COMMA ]
typedargslist -> typedargs_ . [ RPAREN ]
typedargslist -> typedargs_ . COMMA [ RPAREN ]
## Transitions:
-- On COMMA shift to state 441
## Reductions:
-- On RPAREN
--   reduce production typedargslist -> typedargs_

State 441:
## Known stack suffix:
## typedargs_ COMMA
## LR(1) items:
typedargs_ -> typedargs_ COMMA . typedarg [ RPAREN COMMA ]
typedargslist -> typedargs_ COMMA . [ RPAREN ]
## Transitions:
-- On STAR_STAR shift to state 433
-- On STAR shift to state 435
-- On NAMEx shift to state 5
-- On LPAREN shift to state 28
-- On typedarg shift to state 442
-- On tfpdef shift to state 443
-- On name shift to state 446
-- On fpdef shift to state 449
## Reductions:
-- On RPAREN
--   reduce production typedargslist -> typedargs_ COMMA

State 442:
## Known stack suffix:
## typedargs_ COMMA typedarg
## LR(1) items:
typedargs_ -> typedargs_ COMMA typedarg . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production typedargs_ -> typedargs_ COMMA typedarg

State 443:
## Known stack suffix:
## tfpdef
## LR(1) items:
typedarg -> tfpdef . [ RPAREN COMMA ]
typedarg -> tfpdef . EQ test [ RPAREN COMMA ]
## Transitions:
-- On EQ shift to state 444
## Reductions:
-- On RPAREN COMMA
--   reduce production typedarg -> tfpdef

State 444:
## Known stack suffix:
## tfpdef EQ
## LR(1) items:
typedarg -> tfpdef EQ . test [ RPAREN COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 445
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 445:
## Known stack suffix:
## tfpdef EQ test
## LR(1) items:
typedarg -> tfpdef EQ test . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production typedarg -> tfpdef EQ test

State 446:
## Known stack suffix:
## name
## LR(1) items:
fpdef -> name . [ RPAREN EQ COMMA ]
tfpdef -> name . COLON test [ RPAREN EQ COMMA ]
## Transitions:
-- On COLON shift to state 447
## Reductions:
-- On RPAREN EQ COMMA
--   reduce production fpdef -> name

State 447:
## Known stack suffix:
## name COLON
## LR(1) items:
tfpdef -> name COLON . test [ RPAREN EQ COMMA ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 448
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 448:
## Known stack suffix:
## name COLON test
## LR(1) items:
tfpdef -> name COLON test . [ RPAREN EQ COMMA ]
## Transitions:
## Reductions:
-- On RPAREN EQ COMMA
--   reduce production tfpdef -> name COLON test

State 449:
## Known stack suffix:
## fpdef
## LR(1) items:
tfpdef -> fpdef . [ RPAREN EQ COMMA ]
## Transitions:
## Reductions:
-- On RPAREN EQ COMMA
--   reduce production tfpdef -> fpdef

State 450:
## Known stack suffix:
## typedarg
## LR(1) items:
typedargs_ -> typedarg . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production typedargs_ -> typedarg

State 451:
## Known stack suffix:
## DEF name parameters
## LR(1) items:
funcdef -> DEF name parameters . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
funcdef -> DEF name parameters . ret_annot COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On MINUS_GT shift to state 452
-- On COLON shift to state 454
-- On ret_annot shift to state 456
## Reductions:

State 452:
## Known stack suffix:
## MINUS_GT
## LR(1) items:
ret_annot -> MINUS_GT . test [ COLON ]
## Transitions:
-- On TILDE shift to state 2
-- On SHORTSTRING shift to state 3
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 453
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 453:
## Known stack suffix:
## MINUS_GT test
## LR(1) items:
ret_annot -> MINUS_GT test . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production ret_annot -> MINUS_GT test

State 454:
## Known stack suffix:
## DEF name parameters COLON
## LR(1) items:
funcdef -> DEF name parameters COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 455
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 455:
## Known stack suffix:
## DEF name parameters COLON suite
## LR(1) items:
funcdef -> DEF name parameters COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production funcdef -> DEF name parameters COLON suite

State 456:
## Known stack suffix:
## DEF name parameters ret_annot
## LR(1) items:
funcdef -> DEF name parameters ret_annot . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 457
## Reductions:

State 457:
## Known stack suffix:
## DEF name parameters ret_annot COLON
## LR(1) items:
funcdef -> DEF name parameters ret_annot COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 458
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 458:
## Known stack suffix:
## DEF name parameters ret_annot COLON suite
## LR(1) items:
funcdef -> DEF name parameters ret_annot COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production funcdef -> DEF name parameters ret_annot COLON suite

State 459:
## Known stack suffix:
## CLASS
## LR(1) items:
classdef -> CLASS . name COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
classdef -> CLASS . name LPAREN RPAREN COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
classdef -> CLASS . name LPAREN arglist RPAREN COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 460
## Reductions:

State 460:
## Known stack suffix:
## CLASS name
## LR(1) items:
classdef -> CLASS name . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
classdef -> CLASS name . LPAREN RPAREN COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
classdef -> CLASS name . LPAREN arglist RPAREN COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On LPAREN shift to state 461
-- On COLON shift to state 469
## Reductions:

State 461:
## Known stack suffix:
## CLASS name LPAREN
## LR(1) items:
classdef -> CLASS name LPAREN . RPAREN COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
classdef -> CLASS name LPAREN . arglist RPAREN COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR_STAR shift to state 46
-- On STAR shift to state 130
-- On SHORTSTRING shift to state 3
-- On RPAREN shift to state 462
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 133
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On argument shift to state 173
-- On arglist shift to state 465
-- On arg_comma_list_ shift to state 177
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 462:
## Known stack suffix:
## CLASS name LPAREN RPAREN
## LR(1) items:
classdef -> CLASS name LPAREN RPAREN . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 463
## Reductions:

State 463:
## Known stack suffix:
## CLASS name LPAREN RPAREN COLON
## LR(1) items:
classdef -> CLASS name LPAREN RPAREN COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 464
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 464:
## Known stack suffix:
## CLASS name LPAREN RPAREN COLON suite
## LR(1) items:
classdef -> CLASS name LPAREN RPAREN COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production classdef -> CLASS name LPAREN RPAREN COLON suite

State 465:
## Known stack suffix:
## CLASS name LPAREN arglist
## LR(1) items:
classdef -> CLASS name LPAREN arglist . RPAREN COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On RPAREN shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## CLASS name LPAREN arglist RPAREN
## LR(1) items:
classdef -> CLASS name LPAREN arglist RPAREN . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 467
## Reductions:

State 467:
## Known stack suffix:
## CLASS name LPAREN arglist RPAREN COLON
## LR(1) items:
classdef -> CLASS name LPAREN arglist RPAREN COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 468
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 468:
## Known stack suffix:
## CLASS name LPAREN arglist RPAREN COLON suite
## LR(1) items:
classdef -> CLASS name LPAREN arglist RPAREN COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production classdef -> CLASS name LPAREN arglist RPAREN COLON suite

State 469:
## Known stack suffix:
## CLASS name COLON
## LR(1) items:
classdef -> CLASS name COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 470
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 470:
## Known stack suffix:
## CLASS name COLON suite
## LR(1) items:
classdef -> CLASS name COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production classdef -> CLASS name COLON suite

State 471:
## Known stack suffix:
## AT
## LR(1) items:
decorator -> AT . dotted_name NEWLINE [ DEF CLASS AT ASYNC ]
decorator -> AT . dotted_name LPAREN RPAREN NEWLINE [ DEF CLASS AT ASYNC ]
decorator -> AT . dotted_name LPAREN arglist RPAREN NEWLINE [ DEF CLASS AT ASYNC ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 279
-- On dotted_name shift to state 472
## Reductions:

State 472:
## Known stack suffix:
## AT dotted_name
## LR(1) items:
decorator -> AT dotted_name . NEWLINE [ DEF CLASS AT ASYNC ]
decorator -> AT dotted_name . LPAREN RPAREN NEWLINE [ DEF CLASS AT ASYNC ]
decorator -> AT dotted_name . LPAREN arglist RPAREN NEWLINE [ DEF CLASS AT ASYNC ]
## Transitions:
-- On NEWLINE shift to state 473
-- On LPAREN shift to state 474
## Reductions:

State 473:
## Known stack suffix:
## AT dotted_name NEWLINE
## LR(1) items:
decorator -> AT dotted_name NEWLINE . [ DEF CLASS AT ASYNC ]
## Transitions:
## Reductions:
-- On DEF CLASS AT ASYNC
--   reduce production decorator -> AT dotted_name NEWLINE

State 474:
## Known stack suffix:
## AT dotted_name LPAREN
## LR(1) items:
decorator -> AT dotted_name LPAREN . RPAREN NEWLINE [ DEF CLASS AT ASYNC ]
decorator -> AT dotted_name LPAREN . arglist RPAREN NEWLINE [ DEF CLASS AT ASYNC ]
## Transitions:
-- On TILDE shift to state 2
-- On STAR_STAR shift to state 46
-- On STAR shift to state 130
-- On SHORTSTRING shift to state 3
-- On RPAREN shift to state 475
-- On PLUS shift to state 4
-- On NOT shift to state 16
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMAGNUMBER shift to state 20
-- On FLOATNUMBER shift to state 21
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On xor_expr shift to state 47
-- On test shift to state 133
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On shift_expr shift to state 66
-- On primary shift to state 55
-- On power shift to state 57
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On factor shift to state 68
-- On expr shift to state 79
-- On comparison shift to state 80
-- On atom shift to state 43
-- On arith_expr shift to state 95
-- On argument shift to state 173
-- On arglist shift to state 477
-- On arg_comma_list_ shift to state 177
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 475:
## Known stack suffix:
## AT dotted_name LPAREN RPAREN
## LR(1) items:
decorator -> AT dotted_name LPAREN RPAREN . NEWLINE [ DEF CLASS AT ASYNC ]
## Transitions:
-- On NEWLINE shift to state 476
## Reductions:

State 476:
## Known stack suffix:
## AT dotted_name LPAREN RPAREN NEWLINE
## LR(1) items:
decorator -> AT dotted_name LPAREN RPAREN NEWLINE . [ DEF CLASS AT ASYNC ]
## Transitions:
## Reductions:
-- On DEF CLASS AT ASYNC
--   reduce production decorator -> AT dotted_name LPAREN RPAREN NEWLINE

State 477:
## Known stack suffix:
## AT dotted_name LPAREN arglist
## LR(1) items:
decorator -> AT dotted_name LPAREN arglist . RPAREN NEWLINE [ DEF CLASS AT ASYNC ]
## Transitions:
-- On RPAREN shift to state 478
## Reductions:

State 478:
## Known stack suffix:
## AT dotted_name LPAREN arglist RPAREN
## LR(1) items:
decorator -> AT dotted_name LPAREN arglist RPAREN . NEWLINE [ DEF CLASS AT ASYNC ]
## Transitions:
-- On NEWLINE shift to state 479
## Reductions:

State 479:
## Known stack suffix:
## AT dotted_name LPAREN arglist RPAREN NEWLINE
## LR(1) items:
decorator -> AT dotted_name LPAREN arglist RPAREN NEWLINE . [ DEF CLASS AT ASYNC ]
## Transitions:
## Reductions:
-- On DEF CLASS AT ASYNC
--   reduce production decorator -> AT dotted_name LPAREN arglist RPAREN NEWLINE

State 480:
## Known stack suffix:
## ASYNC
## LR(1) items:
async_funcdef -> ASYNC . DEF name parameters COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
async_funcdef -> ASYNC . DEF name parameters ret_annot COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
async_stmt -> ASYNC . with_stmt [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
async_stmt -> ASYNC . for_stmt [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On WITHx shift to state 243
-- On FOR shift to state 423
-- On DEF shift to state 481
-- On with_stmt shift to state 489
-- On for_stmt shift to state 490
## Reductions:

State 481:
## Known stack suffix:
## ASYNC DEF
## LR(1) items:
async_funcdef -> ASYNC DEF . name parameters COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
async_funcdef -> ASYNC DEF . name parameters ret_annot COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On NAMEx shift to state 5
-- On name shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## ASYNC DEF name
## LR(1) items:
async_funcdef -> ASYNC DEF name . parameters COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
async_funcdef -> ASYNC DEF name . parameters ret_annot COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On LPAREN shift to state 432
-- On parameters shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## ASYNC DEF name parameters
## LR(1) items:
async_funcdef -> ASYNC DEF name parameters . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
async_funcdef -> ASYNC DEF name parameters . ret_annot COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On MINUS_GT shift to state 452
-- On COLON shift to state 484
-- On ret_annot shift to state 486
## Reductions:

State 484:
## Known stack suffix:
## ASYNC DEF name parameters COLON
## LR(1) items:
async_funcdef -> ASYNC DEF name parameters COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 485
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 485:
## Known stack suffix:
## ASYNC DEF name parameters COLON suite
## LR(1) items:
async_funcdef -> ASYNC DEF name parameters COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production async_funcdef -> ASYNC DEF name parameters COLON suite

State 486:
## Known stack suffix:
## ASYNC DEF name parameters ret_annot
## LR(1) items:
async_funcdef -> ASYNC DEF name parameters ret_annot . COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On COLON shift to state 487
## Reductions:

State 487:
## Known stack suffix:
## ASYNC DEF name parameters ret_annot COLON
## LR(1) items:
async_funcdef -> ASYNC DEF name parameters ret_annot COLON . suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 273
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On CONTINUE shift to state 328
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On suite shift to state 488
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 390
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On global_stmt shift to state 379
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On continue_stmt shift to state 384
-- On comparison shift to state 80
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:

State 488:
## Known stack suffix:
## ASYNC DEF name parameters ret_annot COLON suite
## LR(1) items:
async_funcdef -> ASYNC DEF name parameters ret_annot COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production async_funcdef -> ASYNC DEF name parameters ret_annot COLON suite

State 489:
## Known stack suffix:
## ASYNC with_stmt
## LR(1) items:
async_stmt -> ASYNC with_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production async_stmt -> ASYNC with_stmt

State 490:
## Known stack suffix:
## ASYNC for_stmt
## LR(1) items:
async_stmt -> ASYNC for_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production async_stmt -> ASYNC for_stmt

State 491:
## Known stack suffix:
## with_stmt
## LR(1) items:
compound_stmt_ -> with_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> with_stmt

State 492:
## Known stack suffix:
## while_stmt
## LR(1) items:
compound_stmt_ -> while_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> while_stmt

State 493:
## Known stack suffix:
## try_stmt
## LR(1) items:
compound_stmt_ -> try_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> try_stmt

State 494:
## Known stack suffix:
## try_except
## LR(1) items:
try_stmt -> try_except . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
try_stmt -> try_except . els [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
try_stmt -> try_except . finally [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
try_stmt -> try_except . els finally [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On FINALLY shift to state 395
-- On ELSE shift to state 364
-- On finally shift to state 495
-- On els shift to state 496
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production try_stmt -> try_except

State 495:
## Known stack suffix:
## try_except finally
## LR(1) items:
try_stmt -> try_except finally . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production try_stmt -> try_except finally

State 496:
## Known stack suffix:
## try_except els
## LR(1) items:
try_stmt -> try_except els . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
try_stmt -> try_except els . finally [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On FINALLY shift to state 395
-- On finally shift to state 497
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production try_stmt -> try_except els

State 497:
## Known stack suffix:
## try_except els finally
## LR(1) items:
try_stmt -> try_except els finally . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production try_stmt -> try_except els finally

State 498:
## Known stack suffix:
## NEWLINE INDENT stmts
## LR(1) items:
suite -> NEWLINE INDENT stmts . DEDENT [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On DEDENT shift to state 499
## Reductions:

State 499:
## Known stack suffix:
## NEWLINE INDENT stmts DEDENT
## LR(1) items:
suite -> NEWLINE INDENT stmts DEDENT . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production suite -> NEWLINE INDENT stmts DEDENT

State 500:
## Known stack suffix:
## stmt
## LR(1) items:
stmts -> stmt . [ DEDENT ]
stmts -> stmt . stmts [ DEDENT ]
## Transitions:
-- On YIELD shift to state 1
-- On WITHx shift to state 243
-- On WHILE shift to state 275
-- On TRY shift to state 392
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On IF shift to state 410
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FOR shift to state 423
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On DEF shift to state 430
-- On CONTINUE shift to state 328
-- On CLASS shift to state 459
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On AT shift to state 471
-- On ASYNC shift to state 480
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On with_stmt shift to state 491
-- On while_stmt shift to state 492
-- On try_stmt shift to state 493
-- On try_except shift to state 494
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On stmts shift to state 501
-- On stmt shift to state 500
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 502
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On if_stmt shift to state 503
-- On global_stmt shift to state 379
-- On funcdef shift to state 504
-- On for_stmt shift to state 505
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On decorators shift to state 506
-- On decorator shift to state 511
-- On decorated shift to state 513
-- On continue_stmt shift to state 384
-- On compound_stmt_ shift to state 514
-- On compound_stmt shift to state 515
-- On comparison shift to state 80
-- On classdef shift to state 516
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On async_stmt shift to state 517
-- On async_funcdef shift to state 518
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On DEDENT
--   reduce production stmts -> stmt

State 501:
## Known stack suffix:
## stmt stmts
## LR(1) items:
stmts -> stmt stmts . [ DEDENT ]
## Transitions:
## Reductions:
-- On DEDENT
--   reduce production stmts -> stmt stmts

State 502:
## Known stack suffix:
## simple_stmt
## LR(1) items:
stmt -> simple_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production stmt -> simple_stmt

State 503:
## Known stack suffix:
## if_stmt
## LR(1) items:
compound_stmt_ -> if_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> if_stmt

State 504:
## Known stack suffix:
## funcdef
## LR(1) items:
compound_stmt_ -> funcdef . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> funcdef

State 505:
## Known stack suffix:
## for_stmt
## LR(1) items:
compound_stmt_ -> for_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> for_stmt

State 506:
## Known stack suffix:
## decorators
## LR(1) items:
decorated -> decorators . classdef [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
decorated -> decorators . funcdef [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
decorated -> decorators . async_funcdef [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On DEF shift to state 430
-- On CLASS shift to state 459
-- On ASYNC shift to state 507
-- On funcdef shift to state 508
-- On classdef shift to state 509
-- On async_funcdef shift to state 510
## Reductions:

State 507:
## Known stack suffix:
## ASYNC
## LR(1) items:
async_funcdef -> ASYNC . DEF name parameters COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
async_funcdef -> ASYNC . DEF name parameters ret_annot COLON suite [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On DEF shift to state 481
## Reductions:

State 508:
## Known stack suffix:
## decorators funcdef
## LR(1) items:
decorated -> decorators funcdef . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production decorated -> decorators funcdef

State 509:
## Known stack suffix:
## decorators classdef
## LR(1) items:
decorated -> decorators classdef . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production decorated -> decorators classdef

State 510:
## Known stack suffix:
## decorators async_funcdef
## LR(1) items:
decorated -> decorators async_funcdef . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production decorated -> decorators async_funcdef

State 511:
## Known stack suffix:
## decorator
## LR(1) items:
decorators -> decorator . [ DEF CLASS ASYNC ]
decorators -> decorator . decorators [ DEF CLASS ASYNC ]
## Transitions:
-- On AT shift to state 471
-- On decorators shift to state 512
-- On decorator shift to state 511
## Reductions:
-- On DEF CLASS ASYNC
--   reduce production decorators -> decorator

State 512:
## Known stack suffix:
## decorator decorators
## LR(1) items:
decorators -> decorator decorators . [ DEF CLASS ASYNC ]
## Transitions:
## Reductions:
-- On DEF CLASS ASYNC
--   reduce production decorators -> decorator decorators

State 513:
## Known stack suffix:
## decorated
## LR(1) items:
compound_stmt_ -> decorated . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> decorated

State 514:
## Known stack suffix:
## compound_stmt_
## LR(1) items:
compound_stmt -> compound_stmt_ . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt -> compound_stmt_

State 515:
## Known stack suffix:
## compound_stmt
## LR(1) items:
stmt -> compound_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production stmt -> compound_stmt

State 516:
## Known stack suffix:
## classdef
## LR(1) items:
compound_stmt_ -> classdef . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> classdef

State 517:
## Known stack suffix:
## async_stmt
## LR(1) items:
compound_stmt_ -> async_stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> async_stmt

State 518:
## Known stack suffix:
## async_funcdef
## LR(1) items:
compound_stmt_ -> async_funcdef . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production compound_stmt_ -> async_funcdef

State 519:
## Known stack suffix:
## WITHx with_item_list COLON suite
## LR(1) items:
with_stmt -> WITHx with_item_list COLON suite . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production with_stmt -> WITHx with_item_list COLON suite

State 520:
## Known stack suffix:
## with_item
## LR(1) items:
with_item_list -> with_item . [ COMMA COLON ]
## Transitions:
## Reductions:
-- On COMMA COLON
--   reduce production with_item_list -> with_item

State 521:
## Known stack suffix:
## NEWLINE
## LR(1) items:
file_input_ -> NEWLINE . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production file_input_ -> NEWLINE

State 522:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 523:
## Known stack suffix:
## stmt
## LR(1) items:
file_input_ -> stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production file_input_ -> stmt

State 524:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

State 525:
## Known stack suffix:
## file_input_
## LR(1) items:
file_input -> file_input_ . [ EOF ]
file_input_ -> file_input_ . NEWLINE [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
file_input_ -> file_input_ . stmt [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
-- On YIELD shift to state 1
-- On WITHx shift to state 243
-- On WHILE shift to state 275
-- On TRY shift to state 392
-- On TILDE shift to state 2
-- On STAR shift to state 8
-- On SHORTSTRING shift to state 3
-- On RETURN shift to state 251
-- On RAISE shift to state 253
-- On PRINT shift to state 261
-- On PLUS shift to state 4
-- On PASS shift to state 267
-- On NOT shift to state 16
-- On NONLOCAL shift to state 268
-- On NEWLINE shift to state 526
-- On NAMEx shift to state 5
-- On MINUS shift to state 6
-- On LPAREN shift to state 7
-- On LONGSTRING_BEGIN_S shift to state 9
-- On LONGSTRING_BEGIN_D shift to state 11
-- On LONGINTEGER shift to state 13
-- On LBRACKET shift to state 14
-- On LBRACE shift to state 17
-- On LAMBDA shift to state 23
-- On INTEGER shift to state 19
-- On IMPORT shift to state 278
-- On IMAGNUMBER shift to state 20
-- On IF shift to state 410
-- On GLOBAL shift to state 291
-- On FROM shift to state 293
-- On FOR shift to state 423
-- On FLOATNUMBER shift to state 21
-- On EXEC shift to state 320
-- On DEL shift to state 326
-- On DEF shift to state 430
-- On CONTINUE shift to state 328
-- On CLASS shift to state 459
-- On BREAK shift to state 329
-- On BACKQUOTE shift to state 22
-- On AWAIT shift to state 37
-- On AT shift to state 471
-- On ASYNC shift to state 480
-- On ASSERT shift to state 330
-- On yield_stmt shift to state 334
-- On yield_expr shift to state 335
-- On xor_expr shift to state 47
-- On with_stmt shift to state 491
-- On while_stmt shift to state 492
-- On try_stmt shift to state 493
-- On try_except shift to state 494
-- On testlist_star_expr shift to state 336
-- On testlist1_star_expr shift to state 239
-- On test shift to state 241
-- On term shift to state 49
-- On strings shift to state 38
-- On stringliteral shift to state 39
-- On stmt shift to state 527
-- On star_expr shift to state 242
-- On small_stmts shift to state 367
-- On small_stmt_ shift to state 369
-- On small_stmt shift to state 387
-- On simple_stmt_ shift to state 388
-- On simple_stmt shift to state 502
-- On shift_expr shift to state 66
-- On return_stmt shift to state 371
-- On raise_stmt shift to state 372
-- On print_stmt shift to state 373
-- On primary shift to state 55
-- On power shift to state 57
-- On pass_stmt shift to state 374
-- On or_test shift to state 76
-- On not_test shift to state 78
-- On nonlocal_stmt shift to state 375
-- On name shift to state 41
-- On literal shift to state 42
-- On lambdef shift to state 106
-- On import_stmt shift to state 376
-- On import_name shift to state 377
-- On import_from shift to state 378
-- On if_stmt shift to state 503
-- On global_stmt shift to state 379
-- On funcdef shift to state 504
-- On for_stmt shift to state 505
-- On flow_stmt shift to state 380
-- On factor shift to state 68
-- On expr_stmt shift to state 381
-- On expr shift to state 79
-- On exec_stmt shift to state 382
-- On del_stmt shift to state 383
-- On decorators shift to state 506
-- On decorator shift to state 511
-- On decorated shift to state 513
-- On continue_stmt shift to state 384
-- On compound_stmt_ shift to state 514
-- On compound_stmt shift to state 515
-- On comparison shift to state 80
-- On classdef shift to state 516
-- On break_stmt shift to state 385
-- On atom shift to state 43
-- On async_stmt shift to state 517
-- On async_funcdef shift to state 518
-- On assert_stmt shift to state 386
-- On arith_expr shift to state 95
-- On and_test shift to state 107
-- On and_expr shift to state 96
-- On _primary shift to state 59
## Reductions:
-- On EOF
--   reduce production file_input -> file_input_

State 526:
## Known stack suffix:
## file_input_ NEWLINE
## LR(1) items:
file_input_ -> file_input_ NEWLINE . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production file_input_ -> file_input_ NEWLINE

State 527:
## Known stack suffix:
## file_input_ stmt
## LR(1) items:
file_input_ -> file_input_ stmt . [ YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT ]
## Transitions:
## Reductions:
-- On YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
--   reduce production file_input_ -> file_input_ stmt

State 528:
## Known stack suffix:
## file_input
## LR(1) items:
main -> file_input . EOF [ # ]
## Transitions:
-- On EOF shift to state 529
## Reductions:

State 529:
## Known stack suffix:
## file_input EOF
## LR(1) items:
main -> file_input EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> file_input EOF

