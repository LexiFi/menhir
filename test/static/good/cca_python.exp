Grammar has 129 nonterminal symbols, among which 1 start symbols.
Grammar has 95 terminal symbols.
Grammar has 355 productions.
nullable(yield_stmt) = false
nullable(yield_expr) = false
nullable(xor_expr) = false
nullable(with_stmt) = false
nullable(with_item_list) = false
nullable(with_item) = false
nullable(while_stmt) = false
nullable(varargslist) = false
nullable(varargs_) = false
nullable(vararg) = false
nullable(typedargslist) = false
nullable(typedargs_) = false
nullable(typedarg) = false
nullable(try_stmt) = false
nullable(try_except) = false
nullable(trailer) = false
nullable(tfpdef) = false
nullable(testlist_star_expr) = false
nullable(testlist_or_yield_expr) = false
nullable(testlist_comp) = false
nullable(testlist_) = false
nullable(testlist1_star_expr) = false
nullable(testlist1_) = false
nullable(testlist1) = false
nullable(testlist) = false
nullable(test) = false
nullable(term) = false
nullable(sync_comp_for) = false
nullable(suite) = false
nullable(subscripts) = false
nullable(subscriptlist) = false
nullable(subscript) = false
nullable(strings) = false
nullable(stringliteral) = false
nullable(stmts) = false
nullable(stmt) = false
nullable(star_expr) = false
nullable(small_stmts) = false
nullable(small_stmt_) = false
nullable(small_stmt) = false
nullable(sliceop) = false
nullable(simple_stmt_) = false
nullable(simple_stmt) = false
nullable(shift_expr) = false
nullable(return_stmt) = false
nullable(ret_annot) = false
nullable(raise_stmt) = false
nullable(print_stmt) = false
nullable(primary) = false
nullable(power) = false
nullable(pass_stmt) = false
nullable(parameters) = false
nullable(or_test) = false
nullable(old_test) = false
nullable(old_lambdef) = false
nullable(not_test) = false
nullable(nonlocal_stmt) = false
nullable(nonempty_list(dot_or_ellipsis)) = false
nullable(names) = false
nullable(namedexpr_test) = false
nullable(name) = false
nullable(mop) = false
nullable(main) = false
nullable(literal) = false
nullable(lambdef) = false
nullable(imports) = false
nullable(import_stmt) = false
nullable(import_name) = false
nullable(import_from) = false
nullable(import_as_names_list) = false
nullable(import_as_names) = false
nullable(import_as_name) = false
nullable(if_stmt) = false
nullable(global_stmt) = false
nullable(funcdef) = false
nullable(fplist) = false
nullable(fpdefs) = false
nullable(fpdef) = false
nullable(for_stmt) = false
nullable(flow_stmt) = false
nullable(finally) = false
nullable(file_input_) = false
nullable(file_input) = false
nullable(factor) = false
nullable(exprs) = false
nullable(exprlist) = false
nullable(expr_stmt) = false
nullable(expr) = false
nullable(exec_stmt) = false
nullable(except_clause_suites) = false
nullable(except_clause) = false
nullable(eq_testlists) = false
nullable(els) = false
nullable(elifs) = false
nullable(elif) = false
nullable(dotted_name) = false
nullable(dotted_as_names) = false
nullable(dotted_as_name) = false
nullable(dot_or_ellipsis_seq) = false
nullable(dictorsetmaker) = false
nullable(dictelems) = false
nullable(dictelem) = false
nullable(del_stmt) = false
nullable(decorators) = false
nullable(decorator) = false
nullable(decorated) = false
nullable(continue_stmt) = false
nullable(compound_stmt_) = false
nullable(compound_stmt) = false
nullable(comparison) = false
nullable(comp_op) = false
nullable(comp_iter) = false
nullable(comp_if) = false
nullable(comp_for) = false
nullable(classdef) = false
nullable(break_stmt) = false
nullable(augassign) = false
nullable(atom) = false
nullable(async_stmt) = false
nullable(async_funcdef) = false
nullable(assert_stmt) = false
nullable(arith_expr) = false
nullable(argument) = false
nullable(arglist) = false
nullable(arg_comma_list_) = false
nullable(annassign) = false
nullable(and_test) = false
nullable(and_expr) = false
nullable(_primary) = false
first(yield_stmt) = YIELD
first(yield_expr) = YIELD
first(xor_expr) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(with_stmt) = WITHx
first(with_item_list) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(with_item) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(while_stmt) = WHILE
first(varargslist) = STAR_STAR STAR NAMEx LPAREN
first(varargs_) = STAR_STAR STAR NAMEx LPAREN
first(vararg) = STAR_STAR STAR NAMEx LPAREN
first(typedargslist) = STAR_STAR STAR NAMEx LPAREN
first(typedargs_) = STAR_STAR STAR NAMEx LPAREN
first(typedarg) = STAR_STAR STAR NAMEx LPAREN
first(try_stmt) = TRY
first(try_except) = TRY
first(trailer) = LPAREN LBRACKET DOT
first(tfpdef) = NAMEx LPAREN
first(testlist_star_expr) = TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(testlist_or_yield_expr) = YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(testlist_comp) = TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(testlist_) = TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(testlist1_star_expr) = TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(testlist1_) = TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(testlist1) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(testlist) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(test) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(term) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(sync_comp_for) = FOR
first(suite) = YIELD TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER GLOBAL FROM FLOATNUMBER EXEC DEL CONTINUE BREAK BACKQUOTE AWAIT ASSERT
first(subscripts) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER ELLIPSIS COLON BACKQUOTE AWAIT
first(subscriptlist) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER ELLIPSIS COLON BACKQUOTE AWAIT
first(subscript) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER ELLIPSIS COLON BACKQUOTE AWAIT
first(strings) = SHORTSTRING LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D
first(stringliteral) = SHORTSTRING LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D
first(stmts) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
first(stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
first(star_expr) = STAR
first(small_stmts) = YIELD TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER GLOBAL FROM FLOATNUMBER EXEC DEL CONTINUE BREAK BACKQUOTE AWAIT ASSERT
first(small_stmt_) = YIELD TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER GLOBAL FROM FLOATNUMBER EXEC DEL CONTINUE BREAK BACKQUOTE AWAIT ASSERT
first(small_stmt) = YIELD TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER GLOBAL FROM FLOATNUMBER EXEC DEL CONTINUE BREAK BACKQUOTE AWAIT ASSERT
first(sliceop) = COLON
first(simple_stmt_) = YIELD TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER GLOBAL FROM FLOATNUMBER EXEC DEL CONTINUE BREAK BACKQUOTE AWAIT ASSERT
first(simple_stmt) = YIELD TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER GLOBAL FROM FLOATNUMBER EXEC DEL CONTINUE BREAK BACKQUOTE AWAIT ASSERT
first(shift_expr) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(return_stmt) = RETURN
first(ret_annot) = MINUS_GT
first(raise_stmt) = RAISE
first(print_stmt) = PRINT
first(primary) = SHORTSTRING NAMEx LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(power) = SHORTSTRING NAMEx LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(pass_stmt) = PASS
first(parameters) = LPAREN
first(or_test) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(old_test) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(old_lambdef) = LAMBDA
first(not_test) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(nonlocal_stmt) = NONLOCAL
first(nonempty_list(dot_or_ellipsis)) = ELLIPSIS DOT
first(names) = NAMEx
first(namedexpr_test) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(name) = NAMEx
first(mop) = STAR SLASH_SLASH SLASH PERCENT
first(main) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
first(literal) = SHORTSTRING LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER INTEGER IMAGNUMBER FLOATNUMBER
first(lambdef) = LAMBDA
first(imports) = STAR NAMEx LPAREN
first(import_stmt) = IMPORT FROM
first(import_name) = IMPORT
first(import_from) = FROM
first(import_as_names_list) = NAMEx
first(import_as_names) = NAMEx
first(import_as_name) = NAMEx
first(if_stmt) = IF
first(global_stmt) = GLOBAL
first(funcdef) = DEF
first(fplist) = NAMEx LPAREN
first(fpdefs) = NAMEx LPAREN
first(fpdef) = NAMEx LPAREN
first(for_stmt) = FOR
first(flow_stmt) = YIELD RETURN RAISE CONTINUE BREAK
first(finally) = FINALLY
first(file_input_) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
first(file_input) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
first(factor) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(exprs) = TILDE STAR SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(exprlist) = TILDE STAR SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(expr_stmt) = TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(expr) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(exec_stmt) = EXEC
first(except_clause_suites) = EXCEPT
first(except_clause) = EXCEPT
first(eq_testlists) = EQ
first(els) = ELSE
first(elifs) = ELIF
first(elif) = ELIF
first(dotted_name) = NAMEx
first(dotted_as_names) = NAMEx
first(dotted_as_name) = NAMEx
first(dot_or_ellipsis_seq) = ELLIPSIS DOT
first(dictorsetmaker) = TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(dictelems) = TILDE STAR_STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(dictelem) = TILDE STAR_STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(del_stmt) = DEL
first(decorators) = AT
first(decorator) = AT
first(decorated) = AT
first(continue_stmt) = CONTINUE
first(compound_stmt_) = WITHx WHILE TRY IF FOR DEF CLASS AT ASYNC
first(compound_stmt) = WITHx WHILE TRY IF FOR DEF CLASS AT ASYNC
first(comparison) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(comp_op) = NOT LT_GT LT_EQ LT IS IN GT_EQ GT EXCLAM_EQ EQ_EQ
first(comp_iter) = IF FOR ASYNC
first(comp_if) = IF
first(comp_for) = FOR ASYNC
first(classdef) = CLASS
first(break_stmt) = BREAK
first(augassign) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ PLUS_EQ PIPE_EQ PERCENT_EQ MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ AMP_EQ
first(atom) = SHORTSTRING NAMEx LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE
first(async_stmt) = ASYNC
first(async_funcdef) = ASYNC
first(assert_stmt) = ASSERT
first(arith_expr) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(argument) = TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(arglist) = TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(arg_comma_list_) = TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(annassign) = COLON
first(and_test) = TILDE SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(and_expr) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
first(_primary) = SHORTSTRING NAMEx LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE
minimal(yield_stmt) = (* 1 *) YIELD
minimal(yield_expr) = (* 1 *) YIELD
minimal(xor_expr) = (* 1 *) NAMEx
minimal(with_stmt) = (* 5 *) WITHx NAMEx COLON NAMEx NEWLINE
minimal(with_item_list) = (* 1 *) NAMEx
minimal(with_item) = (* 1 *) NAMEx
minimal(while_stmt) = (* 5 *) WHILE NAMEx COLON NAMEx NEWLINE
minimal(varargslist) = (* 1 *) NAMEx
minimal(varargs_) = (* 1 *) NAMEx
minimal(vararg) = (* 1 *) NAMEx
minimal(typedargslist) = (* 1 *) NAMEx
minimal(typedargs_) = (* 1 *) NAMEx
minimal(typedarg) = (* 1 *) NAMEx
minimal(try_stmt) = (* 8 *) TRY COLON NAMEx NEWLINE FINALLY COLON NAMEx NEWLINE
minimal(try_except) = (* 8 *) TRY COLON NAMEx NEWLINE EXCEPT COLON NAMEx NEWLINE
minimal(trailer) = (* 2 *) LPAREN RPAREN
minimal(tfpdef) = (* 1 *) NAMEx
minimal(testlist_star_expr) = (* 1 *) NAMEx
minimal(testlist_or_yield_expr) = (* 1 *) NAMEx
minimal(testlist_comp) = (* 1 *) NAMEx
minimal(testlist_) = (* 1 *) NAMEx
minimal(testlist1_star_expr) = (* 1 *) NAMEx
minimal(testlist1_) = (* 1 *) NAMEx
minimal(testlist1) = (* 1 *) NAMEx
minimal(testlist) = (* 1 *) NAMEx
minimal(test) = (* 1 *) NAMEx
minimal(term) = (* 1 *) NAMEx
minimal(sync_comp_for) = (* 4 *) FOR NAMEx IN NAMEx
minimal(suite) = (* 2 *) NAMEx NEWLINE
minimal(subscripts) = (* 1 *) ELLIPSIS
minimal(subscriptlist) = (* 1 *) ELLIPSIS
minimal(subscript) = (* 1 *) ELLIPSIS
minimal(strings) = (* 1 *) SHORTSTRING
minimal(stringliteral) = (* 1 *) SHORTSTRING
minimal(stmts) = (* 2 *) NAMEx NEWLINE
minimal(stmt) = (* 2 *) NAMEx NEWLINE
minimal(star_expr) = (* 2 *) STAR NAMEx
minimal(small_stmts) = (* 1 *) NAMEx
minimal(small_stmt_) = (* 1 *) NAMEx
minimal(small_stmt) = (* 1 *) NAMEx
minimal(sliceop) = (* 1 *) COLON
minimal(simple_stmt_) = (* 1 *) NAMEx
minimal(simple_stmt) = (* 2 *) NAMEx NEWLINE
minimal(shift_expr) = (* 1 *) NAMEx
minimal(return_stmt) = (* 1 *) RETURN
minimal(ret_annot) = (* 2 *) MINUS_GT NAMEx
minimal(raise_stmt) = (* 1 *) RAISE
minimal(print_stmt) = (* 1 *) PRINT
minimal(primary) = (* 1 *) NAMEx
minimal(power) = (* 1 *) NAMEx
minimal(pass_stmt) = (* 1 *) PASS
minimal(parameters) = (* 2 *) LPAREN RPAREN
minimal(or_test) = (* 1 *) NAMEx
minimal(old_test) = (* 1 *) NAMEx
minimal(old_lambdef) = (* 3 *) LAMBDA COLON NAMEx
minimal(not_test) = (* 1 *) NAMEx
minimal(nonlocal_stmt) = (* 2 *) NONLOCAL NAMEx
minimal(nonempty_list(dot_or_ellipsis)) = (* 1 *) DOT
minimal(names) = (* 1 *) NAMEx
minimal(namedexpr_test) = (* 1 *) NAMEx
minimal(name) = (* 1 *) NAMEx
minimal(mop) = (* 1 *) STAR
minimal(main) = (* 1 *) EOF
minimal(literal) = (* 1 *) INTEGER
minimal(lambdef) = (* 3 *) LAMBDA COLON NAMEx
minimal(imports) = (* 1 *) STAR
minimal(import_stmt) = (* 2 *) IMPORT NAMEx
minimal(import_name) = (* 2 *) IMPORT NAMEx
minimal(import_from) = (* 4 *) FROM NAMEx IMPORT STAR
minimal(import_as_names_list) = (* 1 *) NAMEx
minimal(import_as_names) = (* 1 *) NAMEx
minimal(import_as_name) = (* 1 *) NAMEx
minimal(if_stmt) = (* 5 *) IF NAMEx COLON NAMEx NEWLINE
minimal(global_stmt) = (* 2 *) GLOBAL NAMEx
minimal(funcdef) = (* 7 *) DEF NAMEx LPAREN RPAREN COLON NAMEx NEWLINE
minimal(fplist) = (* 1 *) NAMEx
minimal(fpdefs) = (* 1 *) NAMEx
minimal(fpdef) = (* 1 *) NAMEx
minimal(for_stmt) = (* 7 *) FOR NAMEx IN NAMEx COLON NAMEx NEWLINE
minimal(flow_stmt) = (* 1 *) BREAK
minimal(finally) = (* 4 *) FINALLY COLON NAMEx NEWLINE
minimal(file_input_) = (* 1 *) NEWLINE
minimal(file_input) = (* 1 *) NEWLINE
minimal(factor) = (* 1 *) NAMEx
minimal(exprs) = (* 1 *) NAMEx
minimal(exprlist) = (* 1 *) NAMEx
minimal(expr_stmt) = (* 1 *) NAMEx
minimal(expr) = (* 1 *) NAMEx
minimal(exec_stmt) = (* 2 *) EXEC NAMEx
minimal(except_clause_suites) = (* 4 *) EXCEPT COLON NAMEx NEWLINE
minimal(except_clause) = (* 1 *) EXCEPT
minimal(eq_testlists) = (* 2 *) EQ NAMEx
minimal(els) = (* 4 *) ELSE COLON NAMEx NEWLINE
minimal(elifs) = (* 5 *) ELIF NAMEx COLON NAMEx NEWLINE
minimal(elif) = (* 5 *) ELIF NAMEx COLON NAMEx NEWLINE
minimal(dotted_name) = (* 1 *) NAMEx
minimal(dotted_as_names) = (* 1 *) NAMEx
minimal(dotted_as_name) = (* 1 *) NAMEx
minimal(dot_or_ellipsis_seq) = (* 1 *) DOT
minimal(dictorsetmaker) = (* 1 *) NAMEx
minimal(dictelems) = (* 2 *) STAR_STAR NAMEx
minimal(dictelem) = (* 2 *) STAR_STAR NAMEx
minimal(del_stmt) = (* 2 *) DEL NAMEx
minimal(decorators) = (* 3 *) AT NAMEx NEWLINE
minimal(decorator) = (* 3 *) AT NAMEx NEWLINE
minimal(decorated) = (* 8 *) AT NAMEx NEWLINE CLASS NAMEx COLON NAMEx NEWLINE
minimal(continue_stmt) = (* 1 *) CONTINUE
minimal(compound_stmt_) = (* 5 *) IF NAMEx COLON NAMEx NEWLINE
minimal(compound_stmt) = (* 5 *) IF NAMEx COLON NAMEx NEWLINE
minimal(comparison) = (* 1 *) NAMEx
minimal(comp_op) = (* 1 *) LT
minimal(comp_iter) = (* 2 *) IF NAMEx
minimal(comp_if) = (* 2 *) IF NAMEx
minimal(comp_for) = (* 4 *) FOR NAMEx IN NAMEx
minimal(classdef) = (* 5 *) CLASS NAMEx COLON NAMEx NEWLINE
minimal(break_stmt) = (* 1 *) BREAK
minimal(augassign) = (* 1 *) PLUS_EQ
minimal(atom) = (* 1 *) NAMEx
minimal(async_stmt) = (* 6 *) ASYNC WITHx NAMEx COLON NAMEx NEWLINE
minimal(async_funcdef) = (* 8 *) ASYNC DEF NAMEx LPAREN RPAREN COLON NAMEx NEWLINE
minimal(assert_stmt) = (* 2 *) ASSERT NAMEx
minimal(arith_expr) = (* 1 *) NAMEx
minimal(argument) = (* 1 *) NAMEx
minimal(arglist) = (* 1 *) NAMEx
minimal(arg_comma_list_) = (* 2 *) NAMEx COMMA
minimal(annassign) = (* 2 *) COLON NAMEx
minimal(and_test) = (* 1 *) NAMEx
minimal(and_expr) = (* 1 *) NAMEx
minimal(_primary) = (* 1 *) NAMEx
follow(yield_stmt) = SEMICOLON NEWLINE
follow(yield_expr) = SEMICOLON RPAREN NEWLINE EQ
follow(xor_expr) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
follow(with_stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(with_item_list) = COMMA COLON
follow(with_item) = COMMA COLON
follow(while_stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(varargslist) = COLON
follow(varargs_) = COMMA COLON
follow(vararg) = COMMA COLON
follow(typedargslist) = RPAREN
follow(typedargs_) = RPAREN COMMA
follow(typedarg) = RPAREN COMMA
follow(try_stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(try_except) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(trailer) = STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(tfpdef) = RPAREN EQ COMMA
follow(testlist_star_expr) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COLON AMP_EQ
follow(testlist_or_yield_expr) = SEMICOLON NEWLINE EQ
follow(testlist_comp) = RPAREN RBRACKET
follow(testlist_) = RPAREN RBRACKET
follow(testlist1_star_expr) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ EQ COMMA COLON AMP_EQ
follow(testlist1_) = RPAREN RBRACKET COMMA
follow(testlist1) = SEMICOLON NEWLINE COMMA COLON BACKQUOTE
follow(testlist) = SEMICOLON NEWLINE COLON
follow(test) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
follow(term) = STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(sync_comp_for) = RPAREN RBRACKET RBRACE COMMA
follow(suite) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(subscripts) = RBRACKET COMMA
follow(subscriptlist) = RBRACKET
follow(subscript) = RBRACKET COMMA
follow(strings) = STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(stringliteral) = STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SHORTSTRING SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(stmts) = DEDENT
follow(stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(star_expr) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ IN HAT_EQ GT_GT_EQ FOR EQ COMMA COLON ASYNC AMP_EQ
follow(small_stmts) = SEMICOLON NEWLINE
follow(small_stmt_) = SEMICOLON NEWLINE
follow(small_stmt) = SEMICOLON NEWLINE
follow(sliceop) = RBRACKET COMMA
follow(simple_stmt_) = NEWLINE
follow(simple_stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EXCEPT EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(shift_expr) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(return_stmt) = SEMICOLON NEWLINE
follow(ret_annot) = COLON
follow(raise_stmt) = SEMICOLON NEWLINE
follow(print_stmt) = SEMICOLON NEWLINE
follow(primary) = STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(power) = STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(pass_stmt) = SEMICOLON NEWLINE
follow(parameters) = MINUS_GT COLON
follow(or_test) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
follow(old_test) = RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC
follow(old_lambdef) = RPAREN RBRACKET RBRACE IF FOR COMMA ASYNC
follow(not_test) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
follow(nonlocal_stmt) = SEMICOLON NEWLINE
follow(nonempty_list(dot_or_ellipsis)) = NAMEx IMPORT
follow(names) = SEMICOLON NEWLINE
follow(namedexpr_test) = RPAREN RBRACKET FOR COMMA ASYNC
follow(name) = STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE NAMEx MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IMPORT IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(mop) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
follow(main) = #
follow(literal) = STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(lambdef) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ NEWLINE MINUS_EQ LT_LT_EQ HAT_EQ GT_GT_EQ FROM FOR EQ COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AMP_EQ
follow(imports) = SEMICOLON NEWLINE
follow(import_stmt) = SEMICOLON NEWLINE
follow(import_name) = SEMICOLON NEWLINE
follow(import_from) = SEMICOLON NEWLINE
follow(import_as_names_list) = SEMICOLON RPAREN NEWLINE
follow(import_as_names) = SEMICOLON RPAREN NEWLINE COMMA
follow(import_as_name) = SEMICOLON RPAREN NEWLINE COMMA
follow(if_stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(global_stmt) = SEMICOLON NEWLINE
follow(funcdef) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(fplist) = RPAREN
follow(fpdefs) = RPAREN COMMA
follow(fpdef) = RPAREN EQ COMMA COLON
follow(for_stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(flow_stmt) = SEMICOLON NEWLINE
follow(finally) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(file_input_) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(file_input) = EOF
follow(factor) = STAR_STAR_EQ STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(exprs) = SEMICOLON NEWLINE IN COMMA
follow(exprlist) = SEMICOLON NEWLINE IN
follow(expr_stmt) = SEMICOLON NEWLINE
follow(expr) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
follow(exec_stmt) = SEMICOLON NEWLINE
follow(except_clause_suites) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(except_clause) = COLON
follow(eq_testlists) = SEMICOLON NEWLINE EQ
follow(els) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER FINALLY EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(elifs) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(elif) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF ELSE ELIF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(dotted_name) = SEMICOLON NEWLINE NAMEx LPAREN IMPORT COMMA AS
follow(dotted_as_names) = SEMICOLON NEWLINE
follow(dotted_as_name) = SEMICOLON NEWLINE COMMA
follow(dot_or_ellipsis_seq) = NAMEx IMPORT
follow(dictorsetmaker) = RBRACE
follow(dictelems) = RBRACE COMMA
follow(dictelem) = RBRACE FOR COMMA ASYNC
follow(del_stmt) = SEMICOLON NEWLINE
follow(decorators) = DEF CLASS ASYNC
follow(decorator) = DEF CLASS AT ASYNC
follow(decorated) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(continue_stmt) = SEMICOLON NEWLINE
follow(compound_stmt_) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(compound_stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(comparison) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
follow(comp_op) = TILDE SHORTSTRING PLUS NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
follow(comp_iter) = RPAREN RBRACKET RBRACE COMMA
follow(comp_if) = RPAREN RBRACKET RBRACE COMMA
follow(comp_for) = RPAREN RBRACKET RBRACE COMMA
follow(classdef) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(break_stmt) = SEMICOLON NEWLINE
follow(augassign) = YIELD TILDE STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
follow(atom) = STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(async_stmt) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(async_funcdef) = YIELD WITHx WHILE TRY TILDE STAR SHORTSTRING RETURN RAISE PRINT PLUS PASS NOT NONLOCAL NEWLINE NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMPORT IMAGNUMBER IF GLOBAL FROM FOR FLOATNUMBER EXEC EOF DEL DEF DEDENT CONTINUE CLASS BREAK BACKQUOTE AWAIT AT ASYNC ASSERT
follow(assert_stmt) = SEMICOLON NEWLINE
follow(arith_expr) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(argument) = RPAREN COMMA
follow(arglist) = RPAREN
follow(arg_comma_list_) = TILDE STAR_STAR STAR SHORTSTRING PLUS NOT NAMEx MINUS LPAREN LONGSTRING_BEGIN_S LONGSTRING_BEGIN_D LONGINTEGER LBRACKET LBRACE LAMBDA INTEGER IMAGNUMBER FLOATNUMBER BACKQUOTE AWAIT
follow(annassign) = SEMICOLON NEWLINE
follow(and_test) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PERCENT_EQ OR NEWLINE MINUS_EQ LT_LT_EQ IF HAT_EQ GT_GT_EQ FROM FOR EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ
follow(and_expr) = STAR_STAR_EQ STAR_EQ SLASH_SLASH_EQ SLASH_EQ SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PIPE_EQ PIPE PERCENT_EQ OR NOT NEWLINE MINUS_EQ LT_LT_EQ LT_GT LT_EQ LT IS IN IF HAT_EQ HAT GT_GT_EQ GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
follow(_primary) = STAR_STAR_EQ STAR_STAR STAR_EQ STAR SLASH_SLASH_EQ SLASH_SLASH SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET RBRACE PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT OR NOT NEWLINE MINUS_EQ MINUS LT_LT_EQ LT_LT LT_GT LT_EQ LT LPAREN LBRACKET IS IN IF HAT_EQ HAT GT_GT_EQ GT_GT GT_EQ GT FROM FOR EXCLAM_EQ EQ_EQ EQ ELSE DOT COMMA COLON_EQ COLON BACKQUOTE ASYNC AS AND AMP_EQ AMP
Built an LR(0) automaton with 530 states.
The grammar is not SLR(1) -- 2 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 530 states.
255 out of 530 states have a default reduction.
178 out of 530 states are represented.
134 out of 227 symbols keep track of their start position.
131 out of 227 symbols keep track of their end position.
169 out of 356 productions exploit shiftreduce optimization.
0 out of 530 states can peek at an error.
1550 functions before inlining, 202 functions after inlining.
