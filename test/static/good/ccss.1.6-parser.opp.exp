%{
let nelist = function
    | hd :: tl -> (hd, tl)
    | []       -> failwith "nelist"
%}
%start stylesheet
%token AND
%token ASTERISK
%token ATTR_DASHMATCH
%token ATTR_EQUALS
%token ATTR_INCLUDES
%token ATTR_PREFIX
%token ATTR_SUBSTRING
%token ATTR_SUFFIX
%token <string option> CHARSET
%token CLOSE_CURLY
%token CLOSE_ROUND
%token CLOSE_SQUARE
%token COLON
%token COMMA
%token DOUBLE_COLON
%token EOF
%token <string option> FONTFACE
%token GT
%token <string> HASH
%token <string> IDENT
%token <string option> IMPORT
%token IMPORTANT
%token <string option> KEYFRAMES
%token <string option> MEDIA
%token MINUS
%token NOT
%token <string> NTH
%token ONLY
%token OPEN_CURLY
%token OPEN_ROUND
%token OPEN_SQUARE
%token <string option> PAGE
%token PERIOD
%token PLUS
%token <Ast.quantity> QUANTITY
%token QUOTIENT
%token S
%token <string> SEL_FUNC
%token SEMICOLON
%token SLASH
%token <string> STRING
%token <string> TERM_FUNC
%token TILDE
%token <string> URANGE
%token URI
%token <string> VAR
%left MINUS PLUS
%left ASTERISK QUOTIENT
%type <Ast.t> stylesheet
%%

option_S_:
  
    {    ( None )} [@name none_S]
| x = S
    {    ( Some x )} [@name some_S]

option_media_expression_list_:
  
    {    ( None )} [@name none_media_expression_list]
| x = media_expression_list
    {    ( Some x )} [@name some_media_expression_list]

option_media_prefix_:
  
    {    ( None )} [@name none_media_prefix]
| x = media_prefix
    {    ( Some x )} [@name some_media_prefix]

option_media_query_list_:
  
    {    ( None )} [@name none_media_query_list]
| x = media_query_list
    {    ( Some x )} [@name some_media_query_list]

option_media_sentence_:
  
    {    ( None )} [@name none_media_sentence]
| x = media_sentence
    {    ( Some x )} [@name some_media_sentence]

option_pseudo_page_:
  
    {    ( None )} [@name none_pseudo_page]
| x = pseudo_page
    {    ( Some x )} [@name some_pseudo_page]

boption_IMPORTANT_:
  
    {    ( false )} [@name none_IMPORTANT]
| _1 = IMPORTANT
    {    ( true )} [@name some_IMPORTANT]

list_S_:
  
    {    ( [] )} [@name nil_S]
| x = S xs = list_S_
    {    ( x :: xs )} [@name cons_S]

list_combination_:
  
    {    ( [] )} [@name nil_combination]
| x = combination xs = list_combination_
    {    ( x :: xs )} [@name cons_combination]

list_qualifier_:
  
    {    ( [] )} [@name nil_qualifier]
| x = qualifier xs = list_qualifier_
    {    ( x :: xs )} [@name cons_qualifier]

list_statement_:
  
    {    ( [] )} [@name nil_statement]
| x = statement xs = list_statement_
    {    ( x :: xs )} [@name cons_statement]

nonempty_list_declaration_:
  x = declaration
    {    ( [ x ] )} [@name one_declaration]
| x = declaration xs = nonempty_list_declaration_
    {    ( x :: xs )} [@name more_declaration]

nonempty_list_keyframe_block_:
  x = keyframe_block
    {    ( [ x ] )} [@name one_keyframe_block]
| x = keyframe_block xs = nonempty_list_keyframe_block_
    {    ( x :: xs )} [@name more_keyframe_block]

nonempty_list_qualifier_:
  x = qualifier
    {    ( [ x ] )} [@name one_qualifier]
| x = qualifier xs = nonempty_list_qualifier_
    {    ( x :: xs )} [@name more_qualifier]

nonempty_list_rule_:
  x = rule
    {    ( [ x ] )} [@name one_rule]
| x = rule xs = nonempty_list_rule_
    {    ( x :: xs )} [@name more_rule]

separated_nonempty_list_AND_media_expression_:
  x = media_expression
    {    ( [ x ] )} [@name one_AND_media_expression]
| x = media_expression _2 = AND xs = separated_nonempty_list_AND_media_expression_
    {    ( x :: xs )} [@name more_AND_media_expression]

separated_nonempty_list_COMMA_media_query_:
  x = media_query
    {    ( [ x ] )} [@name one_COMMA_media_query]
| x = media_query _2 = COMMA xs = separated_nonempty_list_COMMA_media_query_
    {    ( x :: xs )} [@name more_COMMA_media_query]

separated_nonempty_list_COMMA_selector_:
  x = selector
    {    ( [ x ] )} [@name one_COMMA_selector]
| x = selector _2 = COMMA xs = separated_nonempty_list_COMMA_selector_
    {    ( x :: xs )} [@name more_COMMA_selector]

separated_nonempty_list_COMMA_sentence_:
  x = sentence
    {    ( [ x ] )} [@name one_COMMA_sentence]
| x = sentence _2 = COMMA xs = separated_nonempty_list_COMMA_sentence_
    {    ( x :: xs )} [@name more_COMMA_sentence]

separated_nonempty_list_option_S__term_:
  x = term
    {    ( [ x ] )} [@name one_option_S__term]
| x = term _2 = option_S_ xs = separated_nonempty_list_option_S__term_
    {    ( x :: xs )} [@name more_option_S__term]

stylesheet:
  _1 = list_S_ _2 = list_statement_ _3 = EOF
    {                                                                (_2)}

statement:
  _1 = atrule
    {                                                                (`Atrule _1)}
| _1 = rule
    {                                                                (`Rule _1)}
| _1 = VAR _2 = COLON _3 = var_decl
    {                                                                (`Vardecl ((_startpos__1_, _1), _3))}

atrule:
  _1 = CHARSET _2 = STRING _3 = SEMICOLON
    {                                                                ((_1, `Charset _2))}
| _1 = IMPORT _2 = source _3 = option_S_ _4 = option_media_query_list_ _5 = SEMICOLON
    {                                                                ((_1, `Import (_2, _4)))}
| _1 = MEDIA _2 = media_query_list _3 = OPEN_CURLY _4 = nonempty_list_rule_ _5 = CLOSE_CURLY
    {                                                                ((_1, `Media (_2, _4)))}
| _1 = PAGE _2 = option_pseudo_page_ _3 = declaration_block
    {                                                                ((_1, `Page (_2, _3)))}
| _1 = FONTFACE _2 = declaration_block
    {                                                                ((_1, `Fontface _2))}
| _1 = KEYFRAMES _2 = IDENT _3 = OPEN_CURLY _4 = nonempty_list_keyframe_block_ _5 = CLOSE_CURLY
    {                                                                ((_1, `Keyframes (_2, _4)))}

rule:
  _1 = selector_list _2 = declaration_block
    {                                                                ((_1, _2))}

var_decl:
  _1 = expr _2 = SEMICOLON
    {                                                                (`Expr _1)}
| _1 = declaration_block
    {                                                                (`Mixin _1)}

source:
  _1 = STRING
    {                                                                (`String _1)}
| _1 = URI _2 = STRING _3 = CLOSE_ROUND
    {                                                                (`Uri _2)}

media_query_list:
  _1 = separated_nonempty_list_COMMA_media_query_
    {                                                                (_1)}

media_query:
  _1 = media_type _2 = option_media_expression_list_
    {                                                                (`Typed (_1, _2))}
| _1 = media_expression_nelist
    {                                                                (`Untyped _1)}

media_type:
  _1 = option_media_prefix_ _2 = IDENT
    {                                                                ((_1, _2))}

media_prefix:
  _1 = ONLY
    {                                                                (`Only)}
| _1 = NOT
    {                                                                (`Not)}

media_expression_list:
  _1 = AND _2 = separated_nonempty_list_AND_media_expression_
    {                                                                (_2)}

media_expression_nelist:
  _1 = separated_nonempty_list_AND_media_expression_
    {                                                                (_1)}

media_expression:
  _1 = OPEN_ROUND _2 = media_feature _3 = option_media_sentence_ _4 = CLOSE_ROUND
    {                                                                ((_2, _3))}

media_sentence:
  _1 = COLON _2 = sentence
    {                                                                (_2)}

media_feature:
  _1 = IDENT
    {                                                                (_1)}

pseudo_page:
  _1 = COLON _2 = IDENT
    {                                                                (_2)}

keyframe_block:
  _1 = keyframe_sel _2 = declaration_block
    {                                                                ((_1, _2))}

keyframe_sel:
  _1 = IDENT
    {                                                                (`Ident _1)}
| _1 = calc
    {                                                                (`Calc _1)}

selector_list:
  _1 = separated_nonempty_list_COMMA_selector_
    {                                                    (_1)}

selector:
  _1 = simple_selector _2 = list_combination_
    {                                                    ((_1, _2))}

combination:
  _1 = combinator _2 = simple_selector
    {                                                    ((_1, _2))}

combinator:
  _1 = S
    {                                                    (`Descendant)}
| _1 = TILDE
    {                                                    (`General_sibling)}
| _1 = PLUS
    {                                                    (`Adjacent_sibling)}
| _1 = GT
    {                                                    (`Child)}

simple_selector:
  _1 = element _2 = list_qualifier_
    {                                                    (`Explicit (_1, _2))}
| _1 = nonempty_list_qualifier_
    {                                                    (`Generic (nelist _1))}

element:
  _1 = IDENT
    {                                                    (`Tag _1)}
| _1 = ASTERISK
    {                                                    (`Universal)}

qualifier:
  _1 = HASH
    {                                                    (`Id _1)}
| _1 = PERIOD _2 = IDENT
    {                                                    (`Class _2)}
| _1 = OPEN_SQUARE _2 = IDENT _3 = attr_operation _4 = CLOSE_SQUARE
    {                                                    (`Attr (_2, _3))}
| _1 = COLON _2 = IDENT
    {                                                    (`Pseudo_class _2)}
| _1 = DOUBLE_COLON _2 = IDENT
    {                                                    (`Pseudo_element _2)}
| _1 = SEL_FUNC _2 = function_args _3 = CLOSE_ROUND
    {                                                    (`Sel_func (_1, _2))}

function_args:
  _1 = nonempty_list_qualifier_
    {                                                    (`Qualified _1)}
| _1 = NTH
    {                                                    (`Nth _1)}
| _1 = IDENT
    {                                                    (`Nth _1)}

attr_operation:
  
    {                                                    (`Attr_exists)}
| _1 = ATTR_EQUALS _2 = attr_operand
    {                                                    (`Attr_equals _2)}
| _1 = ATTR_INCLUDES _2 = attr_operand
    {                                                    (`Attr_includes _2)}
| _1 = ATTR_DASHMATCH _2 = attr_operand
    {                                                    (`Attr_dashmatch _2)}
| _1 = ATTR_PREFIX _2 = attr_operand
    {                                                    (`Attr_prefix _2)}
| _1 = ATTR_SUFFIX _2 = attr_operand
    {                                                    (`Attr_suffix _2)}
| _1 = ATTR_SUBSTRING _2 = attr_operand
    {                                                    (`Attr_substring _2)}

attr_operand:
  _1 = IDENT
    {                                                    (_1)}
| _1 = STRING
    {                                                    (_1)}

declaration_block:
  _1 = OPEN_CURLY _2 = nonempty_list_declaration_ _3 = CLOSE_CURLY
    {                                                    (_2)}

declaration:
  _1 = IDENT _2 = COLON _3 = expr _4 = boption_IMPORTANT_ _5 = SEMICOLON
    {                                                    (`Property (_1, _3, _4))}
| _1 = VAR _2 = SEMICOLON
    {                                                    (`Varref (_startpos__1_, _1))}

expr:
  _1 = separated_nonempty_list_COMMA_sentence_
    {                                                    (_1)}

sentence:
  _1 = separated_nonempty_list_option_S__term_
    {                                                    (_1)}

term:
  _1 = calc
    {                                                    (`Calc _1)}
| _1 = STRING
    {                                                    (`String _1)}
| _1 = IDENT
    {                                                    (`Ident _1)}
| _1 = URI _2 = STRING _3 = CLOSE_ROUND
    {                                                    (`Uri _2)}
| _1 = HASH
    {                                                    (`Hash _1)}
| _1 = URANGE
    {                                                    (`Urange _1)}
| _1 = TERM_FUNC _2 = expr _3 = CLOSE_ROUND
    {                                                    (`Term_func (_1, _2))}
| _1 = SLASH
    {                                                    (`Slash)}

calc:
  _1 = VAR
    {                                                    (`Varref (_startpos__1_, _1))}
| _1 = QUANTITY
    {                                                    (`Quantity _1)}
| _1 = calc _2 = ASTERISK _3 = calc
    {                                                    (`Mul (_startpos__2_, _1, _3))}
| _1 = calc _2 = QUOTIENT _3 = calc
    {                                                    (`Div (_startpos__2_, _1, _3))}
| _1 = calc _2 = PLUS _3 = calc
    {                                                    (`Sum (_startpos__2_, _1, _3))}
| _1 = calc _2 = MINUS _3 = calc
    {                                                    (`Sub (_startpos__2_, _1, _3))}
| _1 = OPEN_ROUND _2 = calc _3 = CLOSE_ROUND
    {                                                    (_2)}

%%
