%{
  type statement =
    | Range of Ipaddr.V4.t * Ipaddr.V4.t
    | Dhcp_option of Dhcp_wire.dhcp_option
    | Hw_eth of Macaddr.t
    | Fixed_addr of Ipaddr.V4.t
    | Default_lease_time of int32
    | Max_lease_time of int32

  let choke s = invalid_arg s

%}
%start main
%token COMMA
%token DEFAULTLEASETIME
%token DOMAINNAME
%token DOMAINNAMESERVERS
%token EOF
%token ETHERNET
%token FIXEDADDRESS
%token HARDWARE
%token HOST
%token <int> INTEGER
%token <Ipaddr.V4.t> IP
%token LBRACKET
%token <Macaddr.t> MACADDR
%token MAXLEASETIME
%token NETMASK
%token OPTION
%token RANGE
%token RBRACKET
%token ROUTERS
%token SCOLON
%token <string> STRING
%token SUBNET
%token <string> WORD
%type <Ast.t> main
%%

main:
  s = statement ss = statements sub = subnet subs = subnets _5 = EOF
    {                                                                      (
  let statements = s :: ss in
  let subnets = sub :: subs in
  (* Now extract the options from the statements *)
  let () = List.iter (function
      | Dhcp_option o -> ()
      | Default_lease_time t -> ()
      | Max_lease_time t -> ()
      | _ -> choke "Only dhcp options and default|max-lease-time \
                    are allowed in the global section")
      statements
  in
  let options = Util.filter_map (function
      | Dhcp_option o -> Some o
      | _ -> None)
      statements
  in
  let default_lease_time =
    match (Util.find_map (function
        | Default_lease_time t -> Some t
        | _ -> None)
        statements)
    with | Some time -> time
         | None -> Int32.of_int (60 * 60 * 60) (* 1h *)
  in
  let max_lease_time =
    match (Util.find_map (function
        | Max_lease_time t -> Some t
        | _ -> None)
        statements)
    with | Some time -> time
         | None -> Int32.of_int (60 * 60 * 60 * 24) (* 24h *)
  in
  { Ast.subnets; options; default_lease_time; max_lease_time }
)}

ips:
  ip = IP
    {            ( [ip] )}
| ip = IP _2 = COMMA ips = ips
    {                              ( ip :: ips )}

statements:
  
    {                ( [] )}
| s = statement ss = statements
    {                                   ( s :: (List.rev ss) )}

statement:
  _1 = OPTION _2 = DOMAINNAME v = STRING _4 = SCOLON
    {                                           ( Dhcp_option (Dhcp_wire.Domain_name v))}
| _1 = OPTION _2 = DOMAINNAMESERVERS ips = ips _4 = SCOLON
    {                                                 ( Dhcp_option (Dhcp_wire.Dns_servers ips) )}
| _1 = OPTION _2 = ROUTERS ips = ips _4 = SCOLON
    {                                       ( Dhcp_option (Dhcp_wire.Routers ips) )}
| _1 = RANGE v1 = IP v2 = IP _4 = SCOLON
    {                                    (
  if Int32.compare (Ipaddr.V4.to_int32 v1) (Ipaddr.V4.to_int32 v2) >= 0 then
    choke "Invalid `range` statement, must be `low high`";
  Range (v1, v2)
  )}
| _1 = HARDWARE _2 = ETHERNET mac = MACADDR _4 = SCOLON
    {                                              ( Hw_eth mac )}
| _1 = FIXEDADDRESS v = IP _3 = SCOLON
    {                                 ( Fixed_addr v )}
| _1 = DEFAULTLEASETIME v = INTEGER _3 = SCOLON
    {                                          ( Default_lease_time (Int32.of_int v) )}
| _1 = MAXLEASETIME v = INTEGER _3 = SCOLON
    {                                      ( Max_lease_time (Int32.of_int v) )}

subnets:
  
    {                ( [] )}
| sub = subnet subs = subnets
    {                                 ( sub :: (List.rev subs) )}

subnet:
  _1 = SUBNET ip = IP _3 = NETMASK mask = IP _5 = LBRACKET statements = statements hosts = hosts _8 = RBRACKET
    {                                                   (
  let network = Ipaddr.V4.Prefix.of_netmask mask ip in
  (* Catch statements that don't make sense in a subnet *)
  let () = List.iter (function
      | Hw_eth _ | Fixed_addr _ ->
        choke "`hardware` and `fixed-address` belong to `host` context, not subnet"
      | _ -> ())
      statements
  in
  (* First find the range statement, XXX ignoring if multiple *)
  let range = Util.find_map (function
      | Range (v1, v2) -> Some (v1, v2)
      | _ -> None)
      statements |> (function
      | Some (v1, v2) -> (v1, v2)
      | None -> choke ("Missing `range` statement for subnet " ^
                       (Ipaddr.V4.to_string ip)))
  in
  let options = Util.filter_map (function
      | Dhcp_option o -> Some o
      | _ -> None)
      statements
  in
  let default_lease_time =
    (Util.find_map (function Default_lease_time t -> Some t | _ -> None)
        statements)
  in
  let max_lease_time =
    (Util.find_map (function Max_lease_time t -> Some t | _ -> None)
        statements)
  in
  { Ast.network; range = Some range; options; hosts; default_lease_time; max_lease_time }
)}

hosts:
  
    {                ( [] )}
| host = host hosts = hosts
    {                               ( host :: hosts )}

host:
  _1 = HOST hostname = WORD _3 = LBRACKET statements = statements _5 = RBRACKET
    {                                                                       (
  let () = List.iter (function
      | Range _ -> choke "Range is invalid in host context"
      | _ -> ())
      statements
  in
  let options = Util.filter_map (function
      | Dhcp_option o -> Some o
      | _ -> None)
      statements
  in
  let fixed_addr = Util.find_map (function
      | Fixed_addr fa -> Some fa
      | _ -> None)
      statements
  in
  let hw_addr = Util.find_map (function
      | Hw_eth he -> Some he
      | _ -> None)
      statements
  in
  let hw_addr =
    Util.some_or_f hw_addr
                   (fun () -> choke "Missing hardware ethernet statement." )
  in
  { Ast.hostname; options; fixed_addr; hw_addr }
)}

%%
