File "cigen-cparser.mly", line 124, characters 18-36:
Warning: the token Chars_extended_raw is unused.
File "cigen-cparser.mly", line 123, characters 18-27:
Warning: the token Chars_raw is unused.
File "cigen-cparser.mly", line 120, characters 17-23:
Warning: the token Double is unused.
File "cigen-cparser.mly", line 121, characters 17-28:
Warning: the token Double_long is unused.
File "cigen-cparser.mly", line 122, characters 17-22:
Warning: the token Float is unused.
File "cigen-cparser.mly", line 118, characters 15-27:
Warning: the token Integer_long is unused.
File "cigen-cparser.mly", line 119, characters 15-31:
Warning: the token Integer_unsigned is unused.
File "cigen-cparser.mly", line 74, characters 7-16:
Warning: the token KW_access is unused.
File "cigen-cparser.mly", line 68, characters 7-13:
Warning: the token KW_add is unused.
File "cigen-cparser.mly", line 78, characters 7-16:
Warning: the token KW_add_to is unused.
File "cigen-cparser.mly", line 96, characters 7-13:
Warning: the token KW_and is unused.
File "cigen-cparser.mly", line 86, characters 7-20:
Warning: the token KW_assign_add is unused.
File "cigen-cparser.mly", line 90, characters 7-20:
Warning: the token KW_assign_and is unused.
File "cigen-cparser.mly", line 84, characters 7-20:
Warning: the token KW_assign_div is unused.
File "cigen-cparser.mly", line 91, characters 7-21:
Warning: the token KW_assign_exor is unused.
File "cigen-cparser.mly", line 88, characters 7-21:
Warning: the token KW_assign_left is unused.
File "cigen-cparser.mly", line 85, characters 7-20:
Warning: the token KW_assign_mod is unused.
File "cigen-cparser.mly", line 92, characters 7-19:
Warning: the token KW_assign_or is unused.
File "cigen-cparser.mly", line 89, characters 7-22:
Warning: the token KW_assign_right is unused.
File "cigen-cparser.mly", line 87, characters 7-20:
Warning: the token KW_assign_sub is unused.
File "cigen-cparser.mly", line 83, characters 7-22:
Warning: the token KW_assign_times is unused.
File "cigen-cparser.mly", line 34, characters 7-15:
Warning: the token KW_break is unused.
File "cigen-cparser.mly", line 35, characters 7-14:
Warning: the token KW_case is unused.
File "cigen-cparser.mly", line 107, characters 7-15:
Warning: the token KW_colon is unused.
File "cigen-cparser.mly", line 80, characters 7-20:
Warning: the token KW_complement is unused.
File "cigen-cparser.mly", line 38, characters 7-18:
Warning: the token KW_continue is unused.
File "cigen-cparser.mly", line 39, characters 7-17:
Warning: the token KW_default is unused.
File "cigen-cparser.mly", line 71, characters 7-13:
Warning: the token KW_div is unused.
File "cigen-cparser.mly", line 40, characters 7-12:
Warning: the token KW_do is unused.
File "cigen-cparser.mly", line 42, characters 7-14:
Warning: the token KW_else is unused.
File "cigen-cparser.mly", line 98, characters 7-15:
Warning: the token KW_equal is unused.
File "cigen-cparser.mly", line 97, characters 7-14:
Warning: the token KW_exor is unused.
File "cigen-cparser.mly", line 46, characters 7-13:
Warning: the token KW_for is unused.
File "cigen-cparser.mly", line 47, characters 7-14:
Warning: the token KW_goto is unused.
File "cigen-cparser.mly", line 103, characters 7-17:
Warning: the token KW_greater is unused.
File "cigen-cparser.mly", line 105, characters 7-19:
Warning: the token KW_greatereq is unused.
File "cigen-cparser.mly", line 48, characters 7-12:
Warning: the token KW_if is unused.
File "cigen-cparser.mly", line 94, characters 7-18:
Warning: the token KW_lazy_and is unused.
File "cigen-cparser.mly", line 93, characters 7-17:
Warning: the token KW_lazy_or is unused.
File "cigen-cparser.mly", line 100, characters 7-14:
Warning: the token KW_left is unused.
File "cigen-cparser.mly", line 102, characters 7-15:
Warning: the token KW_lower is unused.
File "cigen-cparser.mly", line 104, characters 7-17:
Warning: the token KW_lowereq is unused.
File "cigen-cparser.mly", line 72, characters 7-13:
Warning: the token KW_mod is unused.
File "cigen-cparser.mly", line 81, characters 7-13:
Warning: the token KW_not is unused.
File "cigen-cparser.mly", line 95, characters 7-12:
Warning: the token KW_or is unused.
File "cigen-cparser.mly", line 73, characters 7-15:
Warning: the token KW_point is unused.
File "cigen-cparser.mly", line 52, characters 7-16:
Warning: the token KW_return is unused.
File "cigen-cparser.mly", line 101, characters 7-15:
Warning: the token KW_right is unused.
File "cigen-cparser.mly", line 55, characters 7-16:
Warning: the token KW_sizeof is unused.
File "cigen-cparser.mly", line 69, characters 7-13:
Warning: the token KW_sub is unused.
File "cigen-cparser.mly", line 79, characters 7-18:
Warning: the token KW_sub_from is unused.
File "cigen-cparser.mly", line 58, characters 7-16:
Warning: the token KW_switch is unused.
File "cigen-cparser.mly", line 75, characters 7-14:
Warning: the token KW_test is unused.
File "cigen-cparser.mly", line 99, characters 7-17:
Warning: the token KW_unequal is unused.
File "cigen-cparser.mly", line 64, characters 7-15:
Warning: the token KW_while is unused.
File "cigen-cparser.mly", line 134, characters 7-16:
Warning: the token Nulltoken is unused.
File "cigen-cparser.mly", line 126, characters 18-37:
Warning: the token String_extended_raw is unused.
File "cigen-cparser.mly", line 125, characters 18-28:
Warning: the token String_raw is unused.
%{
  (* header *)
  open Ctypes
  open Cparseraux

  let check_for_typedefs d =
  ( if List.mem S_typedef (fst(d.d_specs)) then
    (  let n = (List.map name_of_declarator (d.d_decl)) in
          List.iter (fun x-> print_endline ("new typedef: "^x)) n;
          flush stdout;
          typedef_names := n @ !typedef_names
    )
  )

%}
%start nothing
%start translation_unit
%token < string > Chars_extended_raw
%token < string > Chars_raw
%token < float > Double
%token < float > Double_long
%token Endofstream
%token < float > Float
%token < string > Ident
%token < int > Integer_long
%token < int > Integer_unsigned
%token < int > Integer_unsuffixed
%token KW_access
%token KW_add
%token KW_add_to
%token KW_and
%token KW_andsoon
%token KW_assign
%token KW_assign_add
%token KW_assign_and
%token KW_assign_div
%token KW_assign_exor
%token KW_assign_left
%token KW_assign_mod
%token KW_assign_or
%token KW_assign_right
%token KW_assign_sub
%token KW_assign_times
%token KW_auto
%token KW_break
%token KW_case
%token KW_cbrace
%token KW_cbracket
%token KW_char
%token KW_colon
%token KW_comma
%token KW_complement
%token KW_const
%token KW_continue
%token KW_cparen
%token KW_default
%token KW_div
%token KW_do
%token KW_double
%token KW_else
%token KW_enum
%token KW_equal
%token KW_exor
%token KW_extern
%token KW_float
%token KW_for
%token KW_goto
%token KW_greater
%token KW_greatereq
%token KW_if
%token KW_int
%token KW_lazy_and
%token KW_lazy_or
%token KW_left
%token KW_long
%token KW_lower
%token KW_lowereq
%token KW_mod
%token KW_not
%token KW_obrace
%token KW_obracket
%token KW_oparen
%token KW_or
%token KW_point
%token KW_register
%token KW_return
%token KW_right
%token KW_semicolon
%token KW_short
%token KW_signed
%token KW_sizeof
%token KW_static
%token KW_struct
%token KW_sub
%token KW_sub_from
%token KW_switch
%token KW_test
%token KW_times
%token KW_typedef
%token KW_unequal
%token KW_union
%token KW_unsigned
%token KW_void
%token KW_volatile
%token KW_while
%token Nulltoken
%token < string > String_extended_raw
%token < string > String_raw
%token < string > Typedef_ident
%type < unit > nothing
%type < Ctypes.declaration list > translation_unit
%%

nothing:
  _1 = Endofstream
    {              ( () )}

translation_unit:
  _1 = declaration _2 = Endofstream
    {      ( [_1] )}
| _1 = declaration _2 = translation_unit
    {      ( _1 :: _2 )}

declaration:
  _1 = declaration_specifiers _2 = init_declarator_list _3 = KW_semicolon
    {      ( let d = {d_specs=_1; d_decl=_2} in
          check_for_typedefs d;
          d
      )}
| _1 = declaration_specifiers _2 = KW_semicolon
    {      ( let d = {d_specs=_1; d_decl=[]} in
          check_for_typedefs d;
          d
      )}

declaration_specifiers:
  _1 = storage_class_specifier _2 = declaration_specifiers
    {      ( (_1::(fst _2), snd _2) )}
| _1 = storage_class_specifier
    {      ( ([_1], ([],[])) )}
| _1 = type_specifier _2 = declaration_specifiers
    {      ( (fst _2, (_1::fst(snd _2),snd (snd _2)) ) )}
| _1 = type_specifier
    {      ( ([],([_1],[])) )}
| _1 = type_qualifier _2 = declaration_specifiers
    {      ( (fst _2, (fst(snd _2), _1::snd(snd _2))) )}
| _1 = type_qualifier
    {      ( ([],([],[_1])) )}

storage_class_specifier:
  _1 = KW_auto
    {                ( S_auto )}
| _1 = KW_register
    {                ( S_register )}
| _1 = KW_static
    {                ( S_static )}
| _1 = KW_extern
    {                ( S_extern )}
| _1 = KW_typedef
    {                ( S_typedef )}

type_specifier:
  _1 = KW_void
    {                                ( T_void )}
| _1 = KW_char
    {              ( T_char )}
| _1 = KW_short
    {               ( T_short )}
| _1 = KW_int
    {             ( T_int )}
| _1 = KW_long
    {              ( T_long )}
| _1 = KW_float
    {               ( T_float )}
| _1 = KW_double
    {                ( T_double )}
| _1 = KW_signed
    {                ( T_signed )}
| _1 = KW_unsigned
    {                  ( T_unsigned )}
| _1 = struct_or_union_specifier
    {                              ( T_struct _1 )}
| _1 = enum_specifier
    {                    ( T_enum _1 )}
| _1 = typedef_name
    {                  ( T_typedef _1 )}

type_qualifier:
  _1 = KW_const
    {                ( Q_const )}
| _1 = KW_volatile
    {                ( Q_volatile )}

struct_or_union_specifier:
  _1 = struct_or_union _2 = Ident _3 = KW_obrace _4 = struct_declaration_list _5 = KW_cbrace
    {      ( {struct_su = _1; struct_tag = Some _2; struct_lst = _4 })}
| _1 = struct_or_union _2 = Typedef_ident _3 = KW_obrace _4 = struct_declaration_list _5 = KW_cbrace
    {      ( {struct_su = _1; struct_tag = Some _2; struct_lst = _4 })}
| _1 = struct_or_union _2 = KW_obrace _3 = struct_declaration_list _4 = KW_cbrace
    {      ( {struct_su = _1; struct_tag = None; struct_lst = _3 })}
| _1 = struct_or_union _2 = Ident
    {      ( {struct_su = _1; struct_tag = Some _2; struct_lst = [] })}
| _1 = struct_or_union _2 = Typedef_ident
    {      ( {struct_su = _1; struct_tag = Some _2; struct_lst = [] })}

struct_or_union:
  _1 = KW_struct
    {              ( Is_struct )}
| _1 = KW_union
    {              ( Is_union )}

struct_declaration_list:
  _1 = struct_declaration
    {      ( [_1] )}
| _1 = struct_declaration _2 = struct_declaration_list
    {      ( _1 :: _2 )}

init_declarator_list:
  _1 = declarator
    {      ( [_1] )}
| _1 = declarator _2 = KW_comma _3 = init_declarator_list
    {      ( _1 :: _3 )}

struct_declaration:
  _1 = specifier_qualifier_list _2 = struct_declarator_list _3 = KW_semicolon
    {      ( {s_specs = _1; s_decl = _2} )}

specifier_qualifier_list:
  _1 = type_specifier
    {      ( ([_1],[]) )}
| _1 = type_specifier _2 = specifier_qualifier_list
    {      ( (_1::(fst _2),snd _2) )}
| _1 = type_qualifier
    {      ( ([],[_1]) )}
| _1 = type_qualifier _2 = specifier_qualifier_list
    {     ( (fst _2,_1::(snd _2)) )}

struct_declarator_list:
  _1 = declarator
    {      ( [_1] )}
| _1 = declarator _2 = KW_comma _3 = struct_declarator_list
    {      ( _1 :: _3 )}

enum_specifier:
  _1 = KW_enum _2 = Ident _3 = KW_obrace _4 = enumerator_list _5 = KW_cbrace
    {      ( {enum_tag = Some _2; enum_labels =_4 })}
| _1 = KW_enum _2 = Typedef_ident _3 = KW_obrace _4 = enumerator_list _5 = KW_cbrace
    {      ( {enum_tag = Some _2; enum_labels =_4 })}
| _1 = KW_enum _2 = KW_obrace _3 = enumerator_list _4 = KW_cbrace
    {      ( {enum_tag = None; enum_labels = _3} )}
| _1 = KW_enum _2 = Ident
    {      ( {enum_tag = Some _2; enum_labels = [] } )}
| _1 = KW_enum _2 = Typedef_ident
    {      ( {enum_tag = Some _2; enum_labels = [] } )}

enumerator_list:
  _1 = enumerator
    {      ( [_1] )}
| _1 = enumerator _2 = KW_comma _3 = enumerator_list
    {      ( _1 :: _3 )}

enumerator:
  _1 = Ident
    {      ( (_1,None) )}
| _1 = Ident _2 = KW_assign _3 = Integer_unsuffixed
    {      ( (_1,Some _3) )}

declarator:
  _1 = direct_declarator
    {      ( _1 )}
| _1 = pointer _2 = direct_declarator
    {      ( D_pointer (_2,_1) )}

direct_declarator:
  _1 = Ident
    {      ( D_name _1 )}
| _1 = KW_oparen _2 = declarator _3 = KW_cparen
    {      ( _2 )}
| _1 = direct_declarator _2 = KW_obracket _3 = KW_cbracket
    {      ( D_openarray _1 )}
| _1 = direct_declarator _2 = KW_obracket _3 = Integer_unsuffixed _4 = KW_cbracket
    {      ( D_array (_1,_3) )}
| _1 = direct_declarator _2 = KW_oparen _3 = parameter_type_list _4 = KW_cparen
    {      ( D_function (_1,_3) )}

pointer:
  _1 = KW_times _2 = type_qualifier_list
    {      ( [_2] )}
| _1 = KW_times
    {      ( [[]] )}
| _1 = KW_times _2 = type_qualifier_list _3 = pointer
    {      ( _2 :: _3 )}
| _1 = KW_times _2 = pointer
    {      ( [] :: _2 )}

type_qualifier_list:
  _1 = type_qualifier
    {      ( [_1] )}
| _1 = type_qualifier _2 = type_qualifier_list
    {      ( _1 :: _2 )}

parameter_type_list:
  _1 = parameter_list
    {      ( _1 )}
| _1 = parameter_list _2 = KW_comma _3 = KW_andsoon
    {      ( _1 @ [P_var] )}

parameter_list:
  _1 = parameter_declaration
    {      ( [_1] )}
| _1 = parameter_list _2 = KW_comma _3 = parameter_declaration
    {      ( _1 @  [_3] )}

parameter_declaration:
  _1 = declaration_specifiers _2 = declarator
    {      ( P_decl (_1,_2) )}
| _1 = declaration_specifiers _2 = abstract_declarator
    {      ( P_abs (_1,_2) )}
| _1 = declaration_specifiers
    {      ( P_null _1 )}

abstract_declarator:
  _1 = pointer
    {      ( D_abspointer _1 )}
| _1 = pointer _2 = direct_abstract_declarator
    {      ( D_pointer (_2,_1) )}
| _1 = direct_abstract_declarator
    {      ( _1 )}

direct_abstract_declarator:
  _1 = KW_oparen _2 = abstract_declarator _3 = KW_cparen
    {      ( _2 )}
| _1 = direct_abstract_declarator _2 = KW_obracket _3 = KW_cbracket
    {      ( D_openarray _1 )}
| _1 = direct_abstract_declarator _2 = KW_obracket _3 = Integer_unsuffixed _4 = KW_cbracket
    {      ( D_array (_1,_3) )}
| _1 = KW_obracket _2 = KW_cbracket
    {      ( D_absopenarray )}
| _1 = KW_obracket _2 = Integer_unsuffixed _3 = KW_cbracket
    {      ( D_absarray _2 )}
| _1 = direct_abstract_declarator _2 = KW_oparen _3 = parameter_type_list _4 = KW_cparen
    {      ( D_function (_1,_3) )}
| _1 = direct_abstract_declarator _2 = KW_oparen _3 = KW_cparen
    {      ( D_function (_1,[]) )}
| _1 = KW_oparen _2 = parameter_type_list _3 = KW_cparen
    {      ( D_absfunction _2 )}
| _1 = KW_oparen _2 = KW_cparen
    {      ( D_absfunction [] )}

typedef_name:
  _1 = Typedef_ident
    {       ( _1 )}

%%


(**** trailer ****)

