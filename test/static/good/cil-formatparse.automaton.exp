State 0:
expression' -> . expression [ # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 171
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 1:
expression -> TILDE . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 170
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 2:
lval -> STAR . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 169
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 3:
expression -> SIZEOF . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> SIZEOF . LPAREN typename RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 165
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 168
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 4:
expression -> PLUS . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 164
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 5:
expression -> MINUS . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 163
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 6:
expression -> LPAREN . expression RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . typename RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> LPAREN . STAR expression RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 32
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On INT shift to state 91
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CHAR shift to state 94
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_g shift to state 24
-- On ARG_f shift to state 97
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On typename shift to state 161
-- On type_spec shift to state 101
-- On one_formal shift to state 153
-- On lval shift to state 33
-- On expression shift to state 154
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 7:
type_spec -> VOID . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> VOID
-- On STAR reduce production type_spec -> VOID
-- On SEMICOLON reduce production type_spec -> VOID
-- On RPAREN reduce production type_spec -> VOID
-- On RESTRICT reduce production type_spec -> VOID
-- On LPAREN reduce production type_spec -> VOID
-- On LBRACKET reduce production type_spec -> VOID
-- On IDENT reduce production type_spec -> VOID
-- On EQ reduce production type_spec -> VOID
-- On CONST reduce production type_spec -> VOID
-- On COMMA reduce production type_spec -> VOID
-- On ATTRIBUTE reduce production type_spec -> VOID
-- On ARG_A reduce production type_spec -> VOID
-- On # reduce production type_spec -> VOID
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> VOID
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 8:
type_spec -> UNSIGNED . CHAR [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED . SHORT [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED . INT [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED . LONG [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED . LONG LONG [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On SHORT shift to state 9
-- On LONG shift to state 10
-- On INT shift to state 12
-- On CHAR shift to state 13

State 9:
type_spec -> UNSIGNED SHORT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> UNSIGNED SHORT
-- On STAR reduce production type_spec -> UNSIGNED SHORT
-- On SEMICOLON reduce production type_spec -> UNSIGNED SHORT
-- On RPAREN reduce production type_spec -> UNSIGNED SHORT
-- On RESTRICT reduce production type_spec -> UNSIGNED SHORT
-- On LPAREN reduce production type_spec -> UNSIGNED SHORT
-- On LBRACKET reduce production type_spec -> UNSIGNED SHORT
-- On IDENT reduce production type_spec -> UNSIGNED SHORT
-- On EQ reduce production type_spec -> UNSIGNED SHORT
-- On CONST reduce production type_spec -> UNSIGNED SHORT
-- On COMMA reduce production type_spec -> UNSIGNED SHORT
-- On ATTRIBUTE reduce production type_spec -> UNSIGNED SHORT
-- On ARG_A reduce production type_spec -> UNSIGNED SHORT
-- On # reduce production type_spec -> UNSIGNED SHORT
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> UNSIGNED SHORT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 10:
type_spec -> UNSIGNED LONG . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED LONG . LONG [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On LONG shift to state 11
-- On VOLATILE reduce production type_spec -> UNSIGNED LONG
-- On STAR reduce production type_spec -> UNSIGNED LONG
-- On SEMICOLON reduce production type_spec -> UNSIGNED LONG
-- On RPAREN reduce production type_spec -> UNSIGNED LONG
-- On RESTRICT reduce production type_spec -> UNSIGNED LONG
-- On LPAREN reduce production type_spec -> UNSIGNED LONG
-- On LBRACKET reduce production type_spec -> UNSIGNED LONG
-- On IDENT reduce production type_spec -> UNSIGNED LONG
-- On EQ reduce production type_spec -> UNSIGNED LONG
-- On CONST reduce production type_spec -> UNSIGNED LONG
-- On COMMA reduce production type_spec -> UNSIGNED LONG
-- On ATTRIBUTE reduce production type_spec -> UNSIGNED LONG
-- On ARG_A reduce production type_spec -> UNSIGNED LONG
-- On # reduce production type_spec -> UNSIGNED LONG
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LONG LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> UNSIGNED LONG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 11:
type_spec -> UNSIGNED LONG LONG . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> UNSIGNED LONG LONG
-- On STAR reduce production type_spec -> UNSIGNED LONG LONG
-- On SEMICOLON reduce production type_spec -> UNSIGNED LONG LONG
-- On RPAREN reduce production type_spec -> UNSIGNED LONG LONG
-- On RESTRICT reduce production type_spec -> UNSIGNED LONG LONG
-- On LPAREN reduce production type_spec -> UNSIGNED LONG LONG
-- On LBRACKET reduce production type_spec -> UNSIGNED LONG LONG
-- On IDENT reduce production type_spec -> UNSIGNED LONG LONG
-- On EQ reduce production type_spec -> UNSIGNED LONG LONG
-- On CONST reduce production type_spec -> UNSIGNED LONG LONG
-- On COMMA reduce production type_spec -> UNSIGNED LONG LONG
-- On ATTRIBUTE reduce production type_spec -> UNSIGNED LONG LONG
-- On ARG_A reduce production type_spec -> UNSIGNED LONG LONG
-- On # reduce production type_spec -> UNSIGNED LONG LONG
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> UNSIGNED LONG LONG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 12:
type_spec -> UNSIGNED INT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> UNSIGNED INT
-- On STAR reduce production type_spec -> UNSIGNED INT
-- On SEMICOLON reduce production type_spec -> UNSIGNED INT
-- On RPAREN reduce production type_spec -> UNSIGNED INT
-- On RESTRICT reduce production type_spec -> UNSIGNED INT
-- On LPAREN reduce production type_spec -> UNSIGNED INT
-- On LBRACKET reduce production type_spec -> UNSIGNED INT
-- On IDENT reduce production type_spec -> UNSIGNED INT
-- On EQ reduce production type_spec -> UNSIGNED INT
-- On CONST reduce production type_spec -> UNSIGNED INT
-- On COMMA reduce production type_spec -> UNSIGNED INT
-- On ATTRIBUTE reduce production type_spec -> UNSIGNED INT
-- On ARG_A reduce production type_spec -> UNSIGNED INT
-- On # reduce production type_spec -> UNSIGNED INT
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> UNSIGNED INT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 13:
type_spec -> UNSIGNED CHAR . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> UNSIGNED CHAR
-- On STAR reduce production type_spec -> UNSIGNED CHAR
-- On SEMICOLON reduce production type_spec -> UNSIGNED CHAR
-- On RPAREN reduce production type_spec -> UNSIGNED CHAR
-- On RESTRICT reduce production type_spec -> UNSIGNED CHAR
-- On LPAREN reduce production type_spec -> UNSIGNED CHAR
-- On LBRACKET reduce production type_spec -> UNSIGNED CHAR
-- On IDENT reduce production type_spec -> UNSIGNED CHAR
-- On EQ reduce production type_spec -> UNSIGNED CHAR
-- On CONST reduce production type_spec -> UNSIGNED CHAR
-- On COMMA reduce production type_spec -> UNSIGNED CHAR
-- On ATTRIBUTE reduce production type_spec -> UNSIGNED CHAR
-- On ARG_A reduce production type_spec -> UNSIGNED CHAR
-- On # reduce production type_spec -> UNSIGNED CHAR
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> UNSIGNED CHAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 14:
type_spec -> UNION . ARG_c [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On ARG_c shift to state 15

State 15:
type_spec -> UNION ARG_c . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> UNION ARG_c
-- On STAR reduce production type_spec -> UNION ARG_c
-- On SEMICOLON reduce production type_spec -> UNION ARG_c
-- On RPAREN reduce production type_spec -> UNION ARG_c
-- On RESTRICT reduce production type_spec -> UNION ARG_c
-- On LPAREN reduce production type_spec -> UNION ARG_c
-- On LBRACKET reduce production type_spec -> UNION ARG_c
-- On IDENT reduce production type_spec -> UNION ARG_c
-- On EQ reduce production type_spec -> UNION ARG_c
-- On CONST reduce production type_spec -> UNION ARG_c
-- On COMMA reduce production type_spec -> UNION ARG_c
-- On ATTRIBUTE reduce production type_spec -> UNION ARG_c
-- On ARG_A reduce production type_spec -> UNION ARG_c
-- On # reduce production type_spec -> UNION ARG_c
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> UNION ARG_c
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 16:
type_spec -> TYPEOF . LPAREN expression RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On LPAREN shift to state 17

State 17:
type_spec -> TYPEOF LPAREN . expression RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 159
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 18:
argv -> IDENT . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production argv -> IDENT
-- On SUP_SUP reduce production argv -> IDENT
-- On SUP_EQ reduce production argv -> IDENT
-- On SUP reduce production argv -> IDENT
-- On STAR_EQ reduce production argv -> IDENT
-- On STAR reduce production argv -> IDENT
-- On SLASH_EQ reduce production argv -> IDENT
-- On SLASH reduce production argv -> IDENT
-- On SEMICOLON reduce production argv -> IDENT
-- On RPAREN reduce production argv -> IDENT
-- On RBRACKET reduce production argv -> IDENT
-- On PLUS_EQ reduce production argv -> IDENT
-- On PLUS reduce production argv -> IDENT
-- On PIPE_EQ reduce production argv -> IDENT
-- On PIPE reduce production argv -> IDENT
-- On PERCENT_EQ reduce production argv -> IDENT
-- On PERCENT reduce production argv -> IDENT
-- On MINUS_EQ reduce production argv -> IDENT
-- On MINUS reduce production argv -> IDENT
-- On LPAREN reduce production argv -> IDENT
-- On LBRACKET reduce production argv -> IDENT
-- On INF_INF_EQ reduce production argv -> IDENT
-- On INF_INF reduce production argv -> IDENT
-- On INF_EQ reduce production argv -> IDENT
-- On INF reduce production argv -> IDENT
-- On EXCLAM_EQ reduce production argv -> IDENT
-- On EQ_EQ reduce production argv -> IDENT
-- On EQ reduce production argv -> IDENT
-- On DOT reduce production argv -> IDENT
-- On COMMA reduce production argv -> IDENT
-- On CIRC_EQ reduce production argv -> IDENT
-- On CIRC reduce production argv -> IDENT
-- On ARROW reduce production argv -> IDENT
-- On ARG_o reduce production argv -> IDENT
-- On ARG_b reduce production argv -> IDENT
-- On AND_EQ reduce production argv -> IDENT
-- On AND reduce production argv -> IDENT
-- On # reduce production argv -> IDENT
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production argv -> IDENT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 19:
expression -> EXCLAM . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 158
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 20:
constant -> CST_INT . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production constant -> CST_INT
-- On SUP_SUP reduce production constant -> CST_INT
-- On SUP_EQ reduce production constant -> CST_INT
-- On SUP reduce production constant -> CST_INT
-- On STAR_EQ reduce production constant -> CST_INT
-- On STAR reduce production constant -> CST_INT
-- On SLASH_EQ reduce production constant -> CST_INT
-- On SLASH reduce production constant -> CST_INT
-- On SEMICOLON reduce production constant -> CST_INT
-- On RPAREN reduce production constant -> CST_INT
-- On RBRACKET reduce production constant -> CST_INT
-- On PLUS_EQ reduce production constant -> CST_INT
-- On PLUS reduce production constant -> CST_INT
-- On PIPE_EQ reduce production constant -> CST_INT
-- On PIPE reduce production constant -> CST_INT
-- On PERCENT_EQ reduce production constant -> CST_INT
-- On PERCENT reduce production constant -> CST_INT
-- On MINUS_EQ reduce production constant -> CST_INT
-- On MINUS reduce production constant -> CST_INT
-- On LPAREN reduce production constant -> CST_INT
-- On INF_INF_EQ reduce production constant -> CST_INT
-- On INF_INF reduce production constant -> CST_INT
-- On INF_EQ reduce production constant -> CST_INT
-- On INF reduce production constant -> CST_INT
-- On EXCLAM_EQ reduce production constant -> CST_INT
-- On EQ_EQ reduce production constant -> CST_INT
-- On EQ reduce production constant -> CST_INT
-- On COMMA reduce production constant -> CST_INT
-- On CIRC_EQ reduce production constant -> CST_INT
-- On CIRC reduce production constant -> CST_INT
-- On ARROW reduce production constant -> CST_INT
-- On ARG_b reduce production constant -> CST_INT
-- On AND_EQ reduce production constant -> CST_INT
-- On AND reduce production constant -> CST_INT
-- On # reduce production constant -> CST_INT
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production constant -> CST_INT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 21:
argv -> ARG_v . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production argv -> ARG_v
-- On SUP_SUP reduce production argv -> ARG_v
-- On SUP_EQ reduce production argv -> ARG_v
-- On SUP reduce production argv -> ARG_v
-- On STAR_EQ reduce production argv -> ARG_v
-- On STAR reduce production argv -> ARG_v
-- On SLASH_EQ reduce production argv -> ARG_v
-- On SLASH reduce production argv -> ARG_v
-- On SEMICOLON reduce production argv -> ARG_v
-- On RPAREN reduce production argv -> ARG_v
-- On RBRACKET reduce production argv -> ARG_v
-- On PLUS_EQ reduce production argv -> ARG_v
-- On PLUS reduce production argv -> ARG_v
-- On PIPE_EQ reduce production argv -> ARG_v
-- On PIPE reduce production argv -> ARG_v
-- On PERCENT_EQ reduce production argv -> ARG_v
-- On PERCENT reduce production argv -> ARG_v
-- On MINUS_EQ reduce production argv -> ARG_v
-- On MINUS reduce production argv -> ARG_v
-- On LPAREN reduce production argv -> ARG_v
-- On LBRACKET reduce production argv -> ARG_v
-- On INF_INF_EQ reduce production argv -> ARG_v
-- On INF_INF reduce production argv -> ARG_v
-- On INF_EQ reduce production argv -> ARG_v
-- On INF reduce production argv -> ARG_v
-- On EXCLAM_EQ reduce production argv -> ARG_v
-- On EQ_EQ reduce production argv -> ARG_v
-- On EQ reduce production argv -> ARG_v
-- On DOT reduce production argv -> ARG_v
-- On COMMA reduce production argv -> ARG_v
-- On CIRC_EQ reduce production argv -> ARG_v
-- On CIRC reduce production argv -> ARG_v
-- On ARROW reduce production argv -> ARG_v
-- On ARG_o reduce production argv -> ARG_v
-- On ARG_b reduce production argv -> ARG_v
-- On AND_EQ reduce production argv -> ARG_v
-- On AND reduce production argv -> ARG_v
-- On # reduce production argv -> ARG_v
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production argv -> ARG_v
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 22:
argu -> ARG_u . [ TILDE STAR SIZEOF PLUS MINUS LPAREN IDENT EXCLAM CST_INT ARG_v ARG_u ARG_l ARG_g ARG_e ARG_d AND ALIGNOF ]
-- On TILDE reduce production argu -> ARG_u
-- On STAR reduce production argu -> ARG_u
-- On SIZEOF reduce production argu -> ARG_u
-- On PLUS reduce production argu -> ARG_u
-- On MINUS reduce production argu -> ARG_u
-- On LPAREN reduce production argu -> ARG_u
-- On IDENT reduce production argu -> ARG_u
-- On EXCLAM reduce production argu -> ARG_u
-- On CST_INT reduce production argu -> ARG_u
-- On ARG_v reduce production argu -> ARG_u
-- On ARG_u reduce production argu -> ARG_u
-- On ARG_l reduce production argu -> ARG_u
-- On ARG_g reduce production argu -> ARG_u
-- On ARG_e reduce production argu -> ARG_u
-- On ARG_d reduce production argu -> ARG_u
-- On AND reduce production argu -> ARG_u
-- On ALIGNOF reduce production argu -> ARG_u

State 23:
lval -> ARG_l . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production lval -> ARG_l
-- On SUP_SUP reduce production lval -> ARG_l
-- On SUP_EQ reduce production lval -> ARG_l
-- On SUP reduce production lval -> ARG_l
-- On STAR_EQ reduce production lval -> ARG_l
-- On STAR reduce production lval -> ARG_l
-- On SLASH_EQ reduce production lval -> ARG_l
-- On SLASH reduce production lval -> ARG_l
-- On SEMICOLON reduce production lval -> ARG_l
-- On RPAREN reduce production lval -> ARG_l
-- On RBRACKET reduce production lval -> ARG_l
-- On PLUS_EQ reduce production lval -> ARG_l
-- On PLUS reduce production lval -> ARG_l
-- On PIPE_EQ reduce production lval -> ARG_l
-- On PIPE reduce production lval -> ARG_l
-- On PERCENT_EQ reduce production lval -> ARG_l
-- On PERCENT reduce production lval -> ARG_l
-- On MINUS_EQ reduce production lval -> ARG_l
-- On MINUS reduce production lval -> ARG_l
-- On LPAREN reduce production lval -> ARG_l
-- On INF_INF_EQ reduce production lval -> ARG_l
-- On INF_INF reduce production lval -> ARG_l
-- On INF_EQ reduce production lval -> ARG_l
-- On INF reduce production lval -> ARG_l
-- On EXCLAM_EQ reduce production lval -> ARG_l
-- On EQ_EQ reduce production lval -> ARG_l
-- On EQ reduce production lval -> ARG_l
-- On COMMA reduce production lval -> ARG_l
-- On CIRC_EQ reduce production lval -> ARG_l
-- On CIRC reduce production lval -> ARG_l
-- On ARROW reduce production lval -> ARG_l
-- On ARG_b reduce production lval -> ARG_l
-- On AND_EQ reduce production lval -> ARG_l
-- On AND reduce production lval -> ARG_l
-- On # reduce production lval -> ARG_l
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production lval -> ARG_l
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 24:
constant -> ARG_g . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production constant -> ARG_g
-- On SUP_SUP reduce production constant -> ARG_g
-- On SUP_EQ reduce production constant -> ARG_g
-- On SUP reduce production constant -> ARG_g
-- On STAR_EQ reduce production constant -> ARG_g
-- On STAR reduce production constant -> ARG_g
-- On SLASH_EQ reduce production constant -> ARG_g
-- On SLASH reduce production constant -> ARG_g
-- On SEMICOLON reduce production constant -> ARG_g
-- On RPAREN reduce production constant -> ARG_g
-- On RBRACKET reduce production constant -> ARG_g
-- On PLUS_EQ reduce production constant -> ARG_g
-- On PLUS reduce production constant -> ARG_g
-- On PIPE_EQ reduce production constant -> ARG_g
-- On PIPE reduce production constant -> ARG_g
-- On PERCENT_EQ reduce production constant -> ARG_g
-- On PERCENT reduce production constant -> ARG_g
-- On MINUS_EQ reduce production constant -> ARG_g
-- On MINUS reduce production constant -> ARG_g
-- On LPAREN reduce production constant -> ARG_g
-- On INF_INF_EQ reduce production constant -> ARG_g
-- On INF_INF reduce production constant -> ARG_g
-- On INF_EQ reduce production constant -> ARG_g
-- On INF reduce production constant -> ARG_g
-- On EXCLAM_EQ reduce production constant -> ARG_g
-- On EQ_EQ reduce production constant -> ARG_g
-- On EQ reduce production constant -> ARG_g
-- On COMMA reduce production constant -> ARG_g
-- On CIRC_EQ reduce production constant -> ARG_g
-- On CIRC reduce production constant -> ARG_g
-- On ARROW reduce production constant -> ARG_g
-- On ARG_b reduce production constant -> ARG_g
-- On AND_EQ reduce production constant -> ARG_g
-- On AND reduce production constant -> ARG_g
-- On # reduce production constant -> ARG_g
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production constant -> ARG_g
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 25:
expression -> ARG_e . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production expression -> ARG_e
-- On SUP_SUP reduce production expression -> ARG_e
-- On SUP_EQ reduce production expression -> ARG_e
-- On SUP reduce production expression -> ARG_e
-- On STAR_EQ reduce production expression -> ARG_e
-- On STAR reduce production expression -> ARG_e
-- On SLASH_EQ reduce production expression -> ARG_e
-- On SLASH reduce production expression -> ARG_e
-- On SEMICOLON reduce production expression -> ARG_e
-- On RPAREN reduce production expression -> ARG_e
-- On RBRACKET reduce production expression -> ARG_e
-- On PLUS_EQ reduce production expression -> ARG_e
-- On PLUS reduce production expression -> ARG_e
-- On PIPE_EQ reduce production expression -> ARG_e
-- On PIPE reduce production expression -> ARG_e
-- On PERCENT_EQ reduce production expression -> ARG_e
-- On PERCENT reduce production expression -> ARG_e
-- On MINUS_EQ reduce production expression -> ARG_e
-- On MINUS reduce production expression -> ARG_e
-- On LPAREN reduce production expression -> ARG_e
-- On INF_INF_EQ reduce production expression -> ARG_e
-- On INF_INF reduce production expression -> ARG_e
-- On INF_EQ reduce production expression -> ARG_e
-- On INF reduce production expression -> ARG_e
-- On EXCLAM_EQ reduce production expression -> ARG_e
-- On EQ_EQ reduce production expression -> ARG_e
-- On EQ reduce production expression -> ARG_e
-- On COMMA reduce production expression -> ARG_e
-- On CIRC_EQ reduce production expression -> ARG_e
-- On CIRC reduce production expression -> ARG_e
-- On ARROW reduce production expression -> ARG_e
-- On ARG_b reduce production expression -> ARG_e
-- On AND_EQ reduce production expression -> ARG_e
-- On AND reduce production expression -> ARG_e
-- On # reduce production expression -> ARG_e
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> ARG_e
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 26:
constant -> ARG_d . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production constant -> ARG_d
-- On SUP_SUP reduce production constant -> ARG_d
-- On SUP_EQ reduce production constant -> ARG_d
-- On SUP reduce production constant -> ARG_d
-- On STAR_EQ reduce production constant -> ARG_d
-- On STAR reduce production constant -> ARG_d
-- On SLASH_EQ reduce production constant -> ARG_d
-- On SLASH reduce production constant -> ARG_d
-- On SEMICOLON reduce production constant -> ARG_d
-- On RPAREN reduce production constant -> ARG_d
-- On RBRACKET reduce production constant -> ARG_d
-- On PLUS_EQ reduce production constant -> ARG_d
-- On PLUS reduce production constant -> ARG_d
-- On PIPE_EQ reduce production constant -> ARG_d
-- On PIPE reduce production constant -> ARG_d
-- On PERCENT_EQ reduce production constant -> ARG_d
-- On PERCENT reduce production constant -> ARG_d
-- On MINUS_EQ reduce production constant -> ARG_d
-- On MINUS reduce production constant -> ARG_d
-- On LPAREN reduce production constant -> ARG_d
-- On INF_INF_EQ reduce production constant -> ARG_d
-- On INF_INF reduce production constant -> ARG_d
-- On INF_EQ reduce production constant -> ARG_d
-- On INF reduce production constant -> ARG_d
-- On EXCLAM_EQ reduce production constant -> ARG_d
-- On EQ_EQ reduce production constant -> ARG_d
-- On EQ reduce production constant -> ARG_d
-- On COMMA reduce production constant -> ARG_d
-- On CIRC_EQ reduce production constant -> ARG_d
-- On CIRC reduce production constant -> ARG_d
-- On ARROW reduce production constant -> ARG_d
-- On ARG_b reduce production constant -> ARG_d
-- On AND_EQ reduce production constant -> ARG_d
-- On AND reduce production constant -> ARG_d
-- On # reduce production constant -> ARG_d
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production constant -> ARG_d
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 27:
expression -> AND . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 157
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 28:
expression -> ALIGNOF . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> ALIGNOF . LPAREN typename RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 29
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 156
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 29:
expression -> ALIGNOF LPAREN . typename RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . expression RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . typename RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> LPAREN . STAR expression RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 32
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On INT shift to state 91
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CHAR shift to state 94
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_g shift to state 24
-- On ARG_f shift to state 97
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On typename shift to state 98
-- On type_spec shift to state 101
-- On one_formal shift to state 153
-- On lval shift to state 33
-- On expression shift to state 154
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 30:
type_spec -> STRUCT . ARG_c [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On ARG_c shift to state 31

State 31:
type_spec -> STRUCT ARG_c . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> STRUCT ARG_c
-- On STAR reduce production type_spec -> STRUCT ARG_c
-- On SEMICOLON reduce production type_spec -> STRUCT ARG_c
-- On RPAREN reduce production type_spec -> STRUCT ARG_c
-- On RESTRICT reduce production type_spec -> STRUCT ARG_c
-- On LPAREN reduce production type_spec -> STRUCT ARG_c
-- On LBRACKET reduce production type_spec -> STRUCT ARG_c
-- On IDENT reduce production type_spec -> STRUCT ARG_c
-- On EQ reduce production type_spec -> STRUCT ARG_c
-- On CONST reduce production type_spec -> STRUCT ARG_c
-- On COMMA reduce production type_spec -> STRUCT ARG_c
-- On ATTRIBUTE reduce production type_spec -> STRUCT ARG_c
-- On ARG_A reduce production type_spec -> STRUCT ARG_c
-- On # reduce production type_spec -> STRUCT ARG_c
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> STRUCT ARG_c
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 32:
lval -> STAR . expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> LPAREN STAR . expression RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 34
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 33:
expression -> lval . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production expression -> lval
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR_EQ reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH_EQ reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On SEMICOLON reduce production expression -> lval
-- On RPAREN reduce production expression -> lval
-- On RBRACKET reduce production expression -> lval
-- On PLUS_EQ reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE_EQ reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT_EQ reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS_EQ reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On LPAREN reduce production expression -> lval
-- On INF_INF_EQ reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On EQ reduce production expression -> lval
-- On COMMA reduce production expression -> lval
-- On CIRC_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND_EQ reduce production expression -> lval
-- On AND reduce production expression -> lval
-- On # reduce production expression -> lval
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> lval
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 34:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> STAR expression . [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> LPAREN STAR expression . RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On RPAREN shift to state 35
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP reduce production lval -> STAR expression
-- On SUP_EQ reduce production lval -> STAR expression
-- On SUP reduce production lval -> STAR expression
-- On STAR reduce production lval -> STAR expression
-- On SLASH reduce production lval -> STAR expression
-- On PLUS reduce production lval -> STAR expression
-- On PIPE reduce production lval -> STAR expression
-- On PERCENT reduce production lval -> STAR expression
-- On MINUS reduce production lval -> STAR expression
-- On INF_INF reduce production lval -> STAR expression
-- On INF_EQ reduce production lval -> STAR expression
-- On INF reduce production lval -> STAR expression
-- On EXCLAM_EQ reduce production lval -> STAR expression
-- On EQ_EQ reduce production lval -> STAR expression
-- On CIRC reduce production lval -> STAR expression
-- On ARG_b reduce production lval -> STAR expression
-- On AND reduce production lval -> STAR expression

State 35:
lval -> LPAREN STAR expression RPAREN . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 87
-- On SUP_SUP_EQ reduce production offset -> 
-- On SUP_SUP reduce production offset -> 
-- On SUP_EQ reduce production offset -> 
-- On SUP reduce production offset -> 
-- On STAR_EQ reduce production offset -> 
-- On STAR reduce production offset -> 
-- On SLASH_EQ reduce production offset -> 
-- On SLASH reduce production offset -> 
-- On SEMICOLON reduce production offset -> 
-- On RPAREN reduce production offset -> 
-- On RBRACKET reduce production offset -> 
-- On PLUS_EQ reduce production offset -> 
-- On PLUS reduce production offset -> 
-- On PIPE_EQ reduce production offset -> 
-- On PIPE reduce production offset -> 
-- On PERCENT_EQ reduce production offset -> 
-- On PERCENT reduce production offset -> 
-- On MINUS_EQ reduce production offset -> 
-- On MINUS reduce production offset -> 
-- On LPAREN reduce production offset -> 
-- On INF_INF_EQ reduce production offset -> 
-- On INF_INF reduce production offset -> 
-- On INF_EQ reduce production offset -> 
-- On INF reduce production offset -> 
-- On EXCLAM_EQ reduce production offset -> 
-- On EQ_EQ reduce production offset -> 
-- On EQ reduce production offset -> 
-- On COMMA reduce production offset -> 
-- On CIRC_EQ reduce production offset -> 
-- On CIRC reduce production offset -> 
-- On ARROW reduce production offset -> 
-- On ARG_b reduce production offset -> 
-- On AND_EQ reduce production offset -> 
-- On AND reduce production offset -> 
-- On # reduce production offset -> 
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production offset -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 36:
offset -> LBRACKET . expression RBRACKET offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 37
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 37:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
offset -> LBRACKET expression . RBRACKET offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RBRACKET shift to state 84
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 38:
expression -> expression SUP_SUP . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 39
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 39:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression SUP_SUP expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression SUP_SUP expression
-- On SUP_SUP reduce production expression -> expression SUP_SUP expression
-- On SUP_EQ reduce production expression -> expression SUP_SUP expression
-- On SUP reduce production expression -> expression SUP_SUP expression
-- On STAR_EQ reduce production expression -> expression SUP_SUP expression
-- On SLASH_EQ reduce production expression -> expression SUP_SUP expression
-- On SEMICOLON reduce production expression -> expression SUP_SUP expression
-- On RPAREN reduce production expression -> expression SUP_SUP expression
-- On RBRACKET reduce production expression -> expression SUP_SUP expression
-- On PLUS_EQ reduce production expression -> expression SUP_SUP expression
-- On PIPE_EQ reduce production expression -> expression SUP_SUP expression
-- On PIPE reduce production expression -> expression SUP_SUP expression
-- On PERCENT_EQ reduce production expression -> expression SUP_SUP expression
-- On MINUS_EQ reduce production expression -> expression SUP_SUP expression
-- On LPAREN reduce production expression -> expression SUP_SUP expression
-- On INF_INF_EQ reduce production expression -> expression SUP_SUP expression
-- On INF_INF reduce production expression -> expression SUP_SUP expression
-- On INF_EQ reduce production expression -> expression SUP_SUP expression
-- On INF reduce production expression -> expression SUP_SUP expression
-- On EXCLAM_EQ reduce production expression -> expression SUP_SUP expression
-- On EQ_EQ reduce production expression -> expression SUP_SUP expression
-- On EQ reduce production expression -> expression SUP_SUP expression
-- On COMMA reduce production expression -> expression SUP_SUP expression
-- On CIRC_EQ reduce production expression -> expression SUP_SUP expression
-- On CIRC reduce production expression -> expression SUP_SUP expression
-- On ARG_b reduce production expression -> expression SUP_SUP expression
-- On AND_EQ reduce production expression -> expression SUP_SUP expression
-- On AND reduce production expression -> expression SUP_SUP expression
-- On # reduce production expression -> expression SUP_SUP expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression SUP_SUP expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 40:
expression -> expression STAR . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 41
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 41:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression STAR expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression STAR expression
-- On SUP_SUP reduce production expression -> expression STAR expression
-- On SUP_EQ reduce production expression -> expression STAR expression
-- On SUP reduce production expression -> expression STAR expression
-- On STAR_EQ reduce production expression -> expression STAR expression
-- On STAR reduce production expression -> expression STAR expression
-- On SLASH_EQ reduce production expression -> expression STAR expression
-- On SLASH reduce production expression -> expression STAR expression
-- On SEMICOLON reduce production expression -> expression STAR expression
-- On RPAREN reduce production expression -> expression STAR expression
-- On RBRACKET reduce production expression -> expression STAR expression
-- On PLUS_EQ reduce production expression -> expression STAR expression
-- On PLUS reduce production expression -> expression STAR expression
-- On PIPE_EQ reduce production expression -> expression STAR expression
-- On PIPE reduce production expression -> expression STAR expression
-- On PERCENT_EQ reduce production expression -> expression STAR expression
-- On PERCENT reduce production expression -> expression STAR expression
-- On MINUS_EQ reduce production expression -> expression STAR expression
-- On MINUS reduce production expression -> expression STAR expression
-- On LPAREN reduce production expression -> expression STAR expression
-- On INF_INF_EQ reduce production expression -> expression STAR expression
-- On INF_INF reduce production expression -> expression STAR expression
-- On INF_EQ reduce production expression -> expression STAR expression
-- On INF reduce production expression -> expression STAR expression
-- On EXCLAM_EQ reduce production expression -> expression STAR expression
-- On EQ_EQ reduce production expression -> expression STAR expression
-- On EQ reduce production expression -> expression STAR expression
-- On COMMA reduce production expression -> expression STAR expression
-- On CIRC_EQ reduce production expression -> expression STAR expression
-- On CIRC reduce production expression -> expression STAR expression
-- On ARG_b reduce production expression -> expression STAR expression
-- On AND_EQ reduce production expression -> expression STAR expression
-- On AND reduce production expression -> expression STAR expression
-- On # reduce production expression -> expression STAR expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression STAR expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 42:
lval -> expression ARROW . IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On IDENT shift to state 43

State 43:
lval -> expression ARROW IDENT . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 48
-- On SUP_SUP_EQ reduce production offset -> 
-- On SUP_SUP reduce production offset -> 
-- On SUP_EQ reduce production offset -> 
-- On SUP reduce production offset -> 
-- On STAR_EQ reduce production offset -> 
-- On STAR reduce production offset -> 
-- On SLASH_EQ reduce production offset -> 
-- On SLASH reduce production offset -> 
-- On SEMICOLON reduce production offset -> 
-- On RPAREN reduce production offset -> 
-- On RBRACKET reduce production offset -> 
-- On PLUS_EQ reduce production offset -> 
-- On PLUS reduce production offset -> 
-- On PIPE_EQ reduce production offset -> 
-- On PIPE reduce production offset -> 
-- On PERCENT_EQ reduce production offset -> 
-- On PERCENT reduce production offset -> 
-- On MINUS_EQ reduce production offset -> 
-- On MINUS reduce production offset -> 
-- On LPAREN reduce production offset -> 
-- On INF_INF_EQ reduce production offset -> 
-- On INF_INF reduce production offset -> 
-- On INF_EQ reduce production offset -> 
-- On INF reduce production offset -> 
-- On EXCLAM_EQ reduce production offset -> 
-- On EQ_EQ reduce production offset -> 
-- On EQ reduce production offset -> 
-- On COMMA reduce production offset -> 
-- On CIRC_EQ reduce production offset -> 
-- On CIRC reduce production offset -> 
-- On ARROW reduce production offset -> 
-- On ARG_b reduce production offset -> 
-- On AND_EQ reduce production offset -> 
-- On AND reduce production offset -> 
-- On # reduce production offset -> 
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production offset -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 44:
offset -> DOT . IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On IDENT shift to state 45

State 45:
offset -> DOT IDENT . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 47
-- On SUP_SUP_EQ reduce production offset -> 
-- On SUP_SUP reduce production offset -> 
-- On SUP_EQ reduce production offset -> 
-- On SUP reduce production offset -> 
-- On STAR_EQ reduce production offset -> 
-- On STAR reduce production offset -> 
-- On SLASH_EQ reduce production offset -> 
-- On SLASH reduce production offset -> 
-- On SEMICOLON reduce production offset -> 
-- On RPAREN reduce production offset -> 
-- On RBRACKET reduce production offset -> 
-- On PLUS_EQ reduce production offset -> 
-- On PLUS reduce production offset -> 
-- On PIPE_EQ reduce production offset -> 
-- On PIPE reduce production offset -> 
-- On PERCENT_EQ reduce production offset -> 
-- On PERCENT reduce production offset -> 
-- On MINUS_EQ reduce production offset -> 
-- On MINUS reduce production offset -> 
-- On LPAREN reduce production offset -> 
-- On INF_INF_EQ reduce production offset -> 
-- On INF_INF reduce production offset -> 
-- On INF_EQ reduce production offset -> 
-- On INF reduce production offset -> 
-- On EXCLAM_EQ reduce production offset -> 
-- On EQ_EQ reduce production offset -> 
-- On EQ reduce production offset -> 
-- On COMMA reduce production offset -> 
-- On CIRC_EQ reduce production offset -> 
-- On CIRC reduce production offset -> 
-- On ARROW reduce production offset -> 
-- On ARG_b reduce production offset -> 
-- On AND_EQ reduce production offset -> 
-- On AND reduce production offset -> 
-- On # reduce production offset -> 
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production offset -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 46:
offset -> ARG_o . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production offset -> ARG_o
-- On SUP_SUP reduce production offset -> ARG_o
-- On SUP_EQ reduce production offset -> ARG_o
-- On SUP reduce production offset -> ARG_o
-- On STAR_EQ reduce production offset -> ARG_o
-- On STAR reduce production offset -> ARG_o
-- On SLASH_EQ reduce production offset -> ARG_o
-- On SLASH reduce production offset -> ARG_o
-- On SEMICOLON reduce production offset -> ARG_o
-- On RPAREN reduce production offset -> ARG_o
-- On RBRACKET reduce production offset -> ARG_o
-- On PLUS_EQ reduce production offset -> ARG_o
-- On PLUS reduce production offset -> ARG_o
-- On PIPE_EQ reduce production offset -> ARG_o
-- On PIPE reduce production offset -> ARG_o
-- On PERCENT_EQ reduce production offset -> ARG_o
-- On PERCENT reduce production offset -> ARG_o
-- On MINUS_EQ reduce production offset -> ARG_o
-- On MINUS reduce production offset -> ARG_o
-- On LPAREN reduce production offset -> ARG_o
-- On INF_INF_EQ reduce production offset -> ARG_o
-- On INF_INF reduce production offset -> ARG_o
-- On INF_EQ reduce production offset -> ARG_o
-- On INF reduce production offset -> ARG_o
-- On EXCLAM_EQ reduce production offset -> ARG_o
-- On EQ_EQ reduce production offset -> ARG_o
-- On EQ reduce production offset -> ARG_o
-- On COMMA reduce production offset -> ARG_o
-- On CIRC_EQ reduce production offset -> ARG_o
-- On CIRC reduce production offset -> ARG_o
-- On ARROW reduce production offset -> ARG_o
-- On ARG_b reduce production offset -> ARG_o
-- On AND_EQ reduce production offset -> ARG_o
-- On AND reduce production offset -> ARG_o
-- On # reduce production offset -> ARG_o
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production offset -> ARG_o
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 47:
offset -> DOT IDENT offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production offset -> DOT IDENT offset
-- On SUP_SUP reduce production offset -> DOT IDENT offset
-- On SUP_EQ reduce production offset -> DOT IDENT offset
-- On SUP reduce production offset -> DOT IDENT offset
-- On STAR_EQ reduce production offset -> DOT IDENT offset
-- On STAR reduce production offset -> DOT IDENT offset
-- On SLASH_EQ reduce production offset -> DOT IDENT offset
-- On SLASH reduce production offset -> DOT IDENT offset
-- On SEMICOLON reduce production offset -> DOT IDENT offset
-- On RPAREN reduce production offset -> DOT IDENT offset
-- On RBRACKET reduce production offset -> DOT IDENT offset
-- On PLUS_EQ reduce production offset -> DOT IDENT offset
-- On PLUS reduce production offset -> DOT IDENT offset
-- On PIPE_EQ reduce production offset -> DOT IDENT offset
-- On PIPE reduce production offset -> DOT IDENT offset
-- On PERCENT_EQ reduce production offset -> DOT IDENT offset
-- On PERCENT reduce production offset -> DOT IDENT offset
-- On MINUS_EQ reduce production offset -> DOT IDENT offset
-- On MINUS reduce production offset -> DOT IDENT offset
-- On LPAREN reduce production offset -> DOT IDENT offset
-- On INF_INF_EQ reduce production offset -> DOT IDENT offset
-- On INF_INF reduce production offset -> DOT IDENT offset
-- On INF_EQ reduce production offset -> DOT IDENT offset
-- On INF reduce production offset -> DOT IDENT offset
-- On EXCLAM_EQ reduce production offset -> DOT IDENT offset
-- On EQ_EQ reduce production offset -> DOT IDENT offset
-- On EQ reduce production offset -> DOT IDENT offset
-- On COMMA reduce production offset -> DOT IDENT offset
-- On CIRC_EQ reduce production offset -> DOT IDENT offset
-- On CIRC reduce production offset -> DOT IDENT offset
-- On ARROW reduce production offset -> DOT IDENT offset
-- On ARG_b reduce production offset -> DOT IDENT offset
-- On AND_EQ reduce production offset -> DOT IDENT offset
-- On AND reduce production offset -> DOT IDENT offset
-- On # reduce production offset -> DOT IDENT offset
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production offset -> DOT IDENT offset
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 48:
lval -> expression ARROW IDENT offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production lval -> expression ARROW IDENT offset
-- On SUP_SUP reduce production lval -> expression ARROW IDENT offset
-- On SUP_EQ reduce production lval -> expression ARROW IDENT offset
-- On SUP reduce production lval -> expression ARROW IDENT offset
-- On STAR_EQ reduce production lval -> expression ARROW IDENT offset
-- On STAR reduce production lval -> expression ARROW IDENT offset
-- On SLASH_EQ reduce production lval -> expression ARROW IDENT offset
-- On SLASH reduce production lval -> expression ARROW IDENT offset
-- On SEMICOLON reduce production lval -> expression ARROW IDENT offset
-- On RPAREN reduce production lval -> expression ARROW IDENT offset
-- On RBRACKET reduce production lval -> expression ARROW IDENT offset
-- On PLUS_EQ reduce production lval -> expression ARROW IDENT offset
-- On PLUS reduce production lval -> expression ARROW IDENT offset
-- On PIPE_EQ reduce production lval -> expression ARROW IDENT offset
-- On PIPE reduce production lval -> expression ARROW IDENT offset
-- On PERCENT_EQ reduce production lval -> expression ARROW IDENT offset
-- On PERCENT reduce production lval -> expression ARROW IDENT offset
-- On MINUS_EQ reduce production lval -> expression ARROW IDENT offset
-- On MINUS reduce production lval -> expression ARROW IDENT offset
-- On LPAREN reduce production lval -> expression ARROW IDENT offset
-- On INF_INF_EQ reduce production lval -> expression ARROW IDENT offset
-- On INF_INF reduce production lval -> expression ARROW IDENT offset
-- On INF_EQ reduce production lval -> expression ARROW IDENT offset
-- On INF reduce production lval -> expression ARROW IDENT offset
-- On EXCLAM_EQ reduce production lval -> expression ARROW IDENT offset
-- On EQ_EQ reduce production lval -> expression ARROW IDENT offset
-- On EQ reduce production lval -> expression ARROW IDENT offset
-- On COMMA reduce production lval -> expression ARROW IDENT offset
-- On CIRC_EQ reduce production lval -> expression ARROW IDENT offset
-- On CIRC reduce production lval -> expression ARROW IDENT offset
-- On ARROW reduce production lval -> expression ARROW IDENT offset
-- On ARG_b reduce production lval -> expression ARROW IDENT offset
-- On AND_EQ reduce production lval -> expression ARROW IDENT offset
-- On AND reduce production lval -> expression ARROW IDENT offset
-- On # reduce production lval -> expression ARROW IDENT offset
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production lval -> expression ARROW IDENT offset
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 49:
expression -> expression argb . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 50
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 50:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression argb expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On AND shift to state 82
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression argb expression
-- On STAR_EQ reduce production expression -> expression argb expression
-- On SLASH_EQ reduce production expression -> expression argb expression
-- On SEMICOLON reduce production expression -> expression argb expression
-- On RPAREN reduce production expression -> expression argb expression
-- On RBRACKET reduce production expression -> expression argb expression
-- On PLUS_EQ reduce production expression -> expression argb expression
-- On PIPE_EQ reduce production expression -> expression argb expression
-- On PERCENT_EQ reduce production expression -> expression argb expression
-- On MINUS_EQ reduce production expression -> expression argb expression
-- On LPAREN reduce production expression -> expression argb expression
-- On INF_INF_EQ reduce production expression -> expression argb expression
-- On EQ reduce production expression -> expression argb expression
-- On COMMA reduce production expression -> expression argb expression
-- On CIRC_EQ reduce production expression -> expression argb expression
-- On ARG_b reduce production expression -> expression argb expression
-- On AND_EQ reduce production expression -> expression argb expression
-- On # reduce production expression -> expression argb expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression argb expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 51:
expression -> expression SUP_EQ . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 52
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 52:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression SUP_EQ expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression SUP_EQ expression
-- On SUP_EQ reduce production expression -> expression SUP_EQ expression
-- On SUP reduce production expression -> expression SUP_EQ expression
-- On STAR_EQ reduce production expression -> expression SUP_EQ expression
-- On SLASH_EQ reduce production expression -> expression SUP_EQ expression
-- On SEMICOLON reduce production expression -> expression SUP_EQ expression
-- On RPAREN reduce production expression -> expression SUP_EQ expression
-- On RBRACKET reduce production expression -> expression SUP_EQ expression
-- On PLUS_EQ reduce production expression -> expression SUP_EQ expression
-- On PIPE_EQ reduce production expression -> expression SUP_EQ expression
-- On PIPE reduce production expression -> expression SUP_EQ expression
-- On PERCENT_EQ reduce production expression -> expression SUP_EQ expression
-- On MINUS_EQ reduce production expression -> expression SUP_EQ expression
-- On LPAREN reduce production expression -> expression SUP_EQ expression
-- On INF_INF_EQ reduce production expression -> expression SUP_EQ expression
-- On INF_EQ reduce production expression -> expression SUP_EQ expression
-- On INF reduce production expression -> expression SUP_EQ expression
-- On EXCLAM_EQ reduce production expression -> expression SUP_EQ expression
-- On EQ_EQ reduce production expression -> expression SUP_EQ expression
-- On EQ reduce production expression -> expression SUP_EQ expression
-- On COMMA reduce production expression -> expression SUP_EQ expression
-- On CIRC_EQ reduce production expression -> expression SUP_EQ expression
-- On CIRC reduce production expression -> expression SUP_EQ expression
-- On ARG_b reduce production expression -> expression SUP_EQ expression
-- On AND_EQ reduce production expression -> expression SUP_EQ expression
-- On AND reduce production expression -> expression SUP_EQ expression
-- On # reduce production expression -> expression SUP_EQ expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression SUP_EQ expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 53:
expression -> expression SLASH . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 54
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 54:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression SLASH expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression SLASH expression
-- On SUP_SUP reduce production expression -> expression SLASH expression
-- On SUP_EQ reduce production expression -> expression SLASH expression
-- On SUP reduce production expression -> expression SLASH expression
-- On STAR_EQ reduce production expression -> expression SLASH expression
-- On STAR reduce production expression -> expression SLASH expression
-- On SLASH_EQ reduce production expression -> expression SLASH expression
-- On SLASH reduce production expression -> expression SLASH expression
-- On SEMICOLON reduce production expression -> expression SLASH expression
-- On RPAREN reduce production expression -> expression SLASH expression
-- On RBRACKET reduce production expression -> expression SLASH expression
-- On PLUS_EQ reduce production expression -> expression SLASH expression
-- On PLUS reduce production expression -> expression SLASH expression
-- On PIPE_EQ reduce production expression -> expression SLASH expression
-- On PIPE reduce production expression -> expression SLASH expression
-- On PERCENT_EQ reduce production expression -> expression SLASH expression
-- On PERCENT reduce production expression -> expression SLASH expression
-- On MINUS_EQ reduce production expression -> expression SLASH expression
-- On MINUS reduce production expression -> expression SLASH expression
-- On LPAREN reduce production expression -> expression SLASH expression
-- On INF_INF_EQ reduce production expression -> expression SLASH expression
-- On INF_INF reduce production expression -> expression SLASH expression
-- On INF_EQ reduce production expression -> expression SLASH expression
-- On INF reduce production expression -> expression SLASH expression
-- On EXCLAM_EQ reduce production expression -> expression SLASH expression
-- On EQ_EQ reduce production expression -> expression SLASH expression
-- On EQ reduce production expression -> expression SLASH expression
-- On COMMA reduce production expression -> expression SLASH expression
-- On CIRC_EQ reduce production expression -> expression SLASH expression
-- On CIRC reduce production expression -> expression SLASH expression
-- On ARG_b reduce production expression -> expression SLASH expression
-- On AND_EQ reduce production expression -> expression SLASH expression
-- On AND reduce production expression -> expression SLASH expression
-- On # reduce production expression -> expression SLASH expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression SLASH expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 55:
expression -> constant . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production expression -> constant
-- On SUP_SUP reduce production expression -> constant
-- On SUP_EQ reduce production expression -> constant
-- On SUP reduce production expression -> constant
-- On STAR_EQ reduce production expression -> constant
-- On STAR reduce production expression -> constant
-- On SLASH_EQ reduce production expression -> constant
-- On SLASH reduce production expression -> constant
-- On SEMICOLON reduce production expression -> constant
-- On RPAREN reduce production expression -> constant
-- On RBRACKET reduce production expression -> constant
-- On PLUS_EQ reduce production expression -> constant
-- On PLUS reduce production expression -> constant
-- On PIPE_EQ reduce production expression -> constant
-- On PIPE reduce production expression -> constant
-- On PERCENT_EQ reduce production expression -> constant
-- On PERCENT reduce production expression -> constant
-- On MINUS_EQ reduce production expression -> constant
-- On MINUS reduce production expression -> constant
-- On LPAREN reduce production expression -> constant
-- On INF_INF_EQ reduce production expression -> constant
-- On INF_INF reduce production expression -> constant
-- On INF_EQ reduce production expression -> constant
-- On INF reduce production expression -> constant
-- On EXCLAM_EQ reduce production expression -> constant
-- On EQ_EQ reduce production expression -> constant
-- On EQ reduce production expression -> constant
-- On COMMA reduce production expression -> constant
-- On CIRC_EQ reduce production expression -> constant
-- On CIRC reduce production expression -> constant
-- On ARROW reduce production expression -> constant
-- On ARG_b reduce production expression -> constant
-- On AND_EQ reduce production expression -> constant
-- On AND reduce production expression -> constant
-- On # reduce production expression -> constant
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> constant
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 56:
lval -> argv . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 57
-- On SUP_SUP_EQ reduce production offset -> 
-- On SUP_SUP reduce production offset -> 
-- On SUP_EQ reduce production offset -> 
-- On SUP reduce production offset -> 
-- On STAR_EQ reduce production offset -> 
-- On STAR reduce production offset -> 
-- On SLASH_EQ reduce production offset -> 
-- On SLASH reduce production offset -> 
-- On SEMICOLON reduce production offset -> 
-- On RPAREN reduce production offset -> 
-- On RBRACKET reduce production offset -> 
-- On PLUS_EQ reduce production offset -> 
-- On PLUS reduce production offset -> 
-- On PIPE_EQ reduce production offset -> 
-- On PIPE reduce production offset -> 
-- On PERCENT_EQ reduce production offset -> 
-- On PERCENT reduce production offset -> 
-- On MINUS_EQ reduce production offset -> 
-- On MINUS reduce production offset -> 
-- On LPAREN reduce production offset -> 
-- On INF_INF_EQ reduce production offset -> 
-- On INF_INF reduce production offset -> 
-- On INF_EQ reduce production offset -> 
-- On INF reduce production offset -> 
-- On EXCLAM_EQ reduce production offset -> 
-- On EQ_EQ reduce production offset -> 
-- On EQ reduce production offset -> 
-- On COMMA reduce production offset -> 
-- On CIRC_EQ reduce production offset -> 
-- On CIRC reduce production offset -> 
-- On ARROW reduce production offset -> 
-- On ARG_b reduce production offset -> 
-- On AND_EQ reduce production offset -> 
-- On AND reduce production offset -> 
-- On # reduce production offset -> 
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production offset -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 57:
lval -> argv offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production lval -> argv offset
-- On SUP_SUP reduce production lval -> argv offset
-- On SUP_EQ reduce production lval -> argv offset
-- On SUP reduce production lval -> argv offset
-- On STAR_EQ reduce production lval -> argv offset
-- On STAR reduce production lval -> argv offset
-- On SLASH_EQ reduce production lval -> argv offset
-- On SLASH reduce production lval -> argv offset
-- On SEMICOLON reduce production lval -> argv offset
-- On RPAREN reduce production lval -> argv offset
-- On RBRACKET reduce production lval -> argv offset
-- On PLUS_EQ reduce production lval -> argv offset
-- On PLUS reduce production lval -> argv offset
-- On PIPE_EQ reduce production lval -> argv offset
-- On PIPE reduce production lval -> argv offset
-- On PERCENT_EQ reduce production lval -> argv offset
-- On PERCENT reduce production lval -> argv offset
-- On MINUS_EQ reduce production lval -> argv offset
-- On MINUS reduce production lval -> argv offset
-- On LPAREN reduce production lval -> argv offset
-- On INF_INF_EQ reduce production lval -> argv offset
-- On INF_INF reduce production lval -> argv offset
-- On INF_EQ reduce production lval -> argv offset
-- On INF reduce production lval -> argv offset
-- On EXCLAM_EQ reduce production lval -> argv offset
-- On EQ_EQ reduce production lval -> argv offset
-- On EQ reduce production lval -> argv offset
-- On COMMA reduce production lval -> argv offset
-- On CIRC_EQ reduce production lval -> argv offset
-- On CIRC reduce production lval -> argv offset
-- On ARROW reduce production lval -> argv offset
-- On ARG_b reduce production lval -> argv offset
-- On AND_EQ reduce production lval -> argv offset
-- On AND reduce production lval -> argv offset
-- On # reduce production lval -> argv offset
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production lval -> argv offset
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 58:
expression -> argu . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 59
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 59:
expression -> argu expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> argu expression
-- On SUP_SUP reduce production expression -> argu expression
-- On SUP_EQ reduce production expression -> argu expression
-- On SUP reduce production expression -> argu expression
-- On STAR_EQ reduce production expression -> argu expression
-- On STAR reduce production expression -> argu expression
-- On SLASH_EQ reduce production expression -> argu expression
-- On SLASH reduce production expression -> argu expression
-- On SEMICOLON reduce production expression -> argu expression
-- On RPAREN reduce production expression -> argu expression
-- On RBRACKET reduce production expression -> argu expression
-- On PLUS_EQ reduce production expression -> argu expression
-- On PLUS reduce production expression -> argu expression
-- On PIPE_EQ reduce production expression -> argu expression
-- On PIPE reduce production expression -> argu expression
-- On PERCENT_EQ reduce production expression -> argu expression
-- On PERCENT reduce production expression -> argu expression
-- On MINUS_EQ reduce production expression -> argu expression
-- On MINUS reduce production expression -> argu expression
-- On LPAREN reduce production expression -> argu expression
-- On INF_INF_EQ reduce production expression -> argu expression
-- On INF_INF reduce production expression -> argu expression
-- On INF_EQ reduce production expression -> argu expression
-- On INF reduce production expression -> argu expression
-- On EXCLAM_EQ reduce production expression -> argu expression
-- On EQ_EQ reduce production expression -> argu expression
-- On EQ reduce production expression -> argu expression
-- On COMMA reduce production expression -> argu expression
-- On CIRC_EQ reduce production expression -> argu expression
-- On CIRC reduce production expression -> argu expression
-- On ARG_b reduce production expression -> argu expression
-- On AND_EQ reduce production expression -> argu expression
-- On AND reduce production expression -> argu expression
-- On # reduce production expression -> argu expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> argu expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 60:
expression -> expression PLUS . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 61
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 61:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression PLUS expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PERCENT shift to state 62
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression PLUS expression
-- On SUP_SUP reduce production expression -> expression PLUS expression
-- On SUP_EQ reduce production expression -> expression PLUS expression
-- On SUP reduce production expression -> expression PLUS expression
-- On STAR_EQ reduce production expression -> expression PLUS expression
-- On SLASH_EQ reduce production expression -> expression PLUS expression
-- On SEMICOLON reduce production expression -> expression PLUS expression
-- On RPAREN reduce production expression -> expression PLUS expression
-- On RBRACKET reduce production expression -> expression PLUS expression
-- On PLUS_EQ reduce production expression -> expression PLUS expression
-- On PLUS reduce production expression -> expression PLUS expression
-- On PIPE_EQ reduce production expression -> expression PLUS expression
-- On PIPE reduce production expression -> expression PLUS expression
-- On PERCENT_EQ reduce production expression -> expression PLUS expression
-- On MINUS_EQ reduce production expression -> expression PLUS expression
-- On MINUS reduce production expression -> expression PLUS expression
-- On LPAREN reduce production expression -> expression PLUS expression
-- On INF_INF_EQ reduce production expression -> expression PLUS expression
-- On INF_INF reduce production expression -> expression PLUS expression
-- On INF_EQ reduce production expression -> expression PLUS expression
-- On INF reduce production expression -> expression PLUS expression
-- On EXCLAM_EQ reduce production expression -> expression PLUS expression
-- On EQ_EQ reduce production expression -> expression PLUS expression
-- On EQ reduce production expression -> expression PLUS expression
-- On COMMA reduce production expression -> expression PLUS expression
-- On CIRC_EQ reduce production expression -> expression PLUS expression
-- On CIRC reduce production expression -> expression PLUS expression
-- On ARG_b reduce production expression -> expression PLUS expression
-- On AND_EQ reduce production expression -> expression PLUS expression
-- On AND reduce production expression -> expression PLUS expression
-- On # reduce production expression -> expression PLUS expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression PLUS expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 62:
expression -> expression PERCENT . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 63
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 63:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression PERCENT expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression PERCENT expression
-- On SUP_SUP reduce production expression -> expression PERCENT expression
-- On SUP_EQ reduce production expression -> expression PERCENT expression
-- On SUP reduce production expression -> expression PERCENT expression
-- On STAR_EQ reduce production expression -> expression PERCENT expression
-- On STAR reduce production expression -> expression PERCENT expression
-- On SLASH_EQ reduce production expression -> expression PERCENT expression
-- On SLASH reduce production expression -> expression PERCENT expression
-- On SEMICOLON reduce production expression -> expression PERCENT expression
-- On RPAREN reduce production expression -> expression PERCENT expression
-- On RBRACKET reduce production expression -> expression PERCENT expression
-- On PLUS_EQ reduce production expression -> expression PERCENT expression
-- On PLUS reduce production expression -> expression PERCENT expression
-- On PIPE_EQ reduce production expression -> expression PERCENT expression
-- On PIPE reduce production expression -> expression PERCENT expression
-- On PERCENT_EQ reduce production expression -> expression PERCENT expression
-- On PERCENT reduce production expression -> expression PERCENT expression
-- On MINUS_EQ reduce production expression -> expression PERCENT expression
-- On MINUS reduce production expression -> expression PERCENT expression
-- On LPAREN reduce production expression -> expression PERCENT expression
-- On INF_INF_EQ reduce production expression -> expression PERCENT expression
-- On INF_INF reduce production expression -> expression PERCENT expression
-- On INF_EQ reduce production expression -> expression PERCENT expression
-- On INF reduce production expression -> expression PERCENT expression
-- On EXCLAM_EQ reduce production expression -> expression PERCENT expression
-- On EQ_EQ reduce production expression -> expression PERCENT expression
-- On EQ reduce production expression -> expression PERCENT expression
-- On COMMA reduce production expression -> expression PERCENT expression
-- On CIRC_EQ reduce production expression -> expression PERCENT expression
-- On CIRC reduce production expression -> expression PERCENT expression
-- On ARG_b reduce production expression -> expression PERCENT expression
-- On AND_EQ reduce production expression -> expression PERCENT expression
-- On AND reduce production expression -> expression PERCENT expression
-- On # reduce production expression -> expression PERCENT expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression PERCENT expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 64:
expression -> expression MINUS . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 65
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 65:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression MINUS expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PERCENT shift to state 62
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression MINUS expression
-- On SUP_SUP reduce production expression -> expression MINUS expression
-- On SUP_EQ reduce production expression -> expression MINUS expression
-- On SUP reduce production expression -> expression MINUS expression
-- On STAR_EQ reduce production expression -> expression MINUS expression
-- On SLASH_EQ reduce production expression -> expression MINUS expression
-- On SEMICOLON reduce production expression -> expression MINUS expression
-- On RPAREN reduce production expression -> expression MINUS expression
-- On RBRACKET reduce production expression -> expression MINUS expression
-- On PLUS_EQ reduce production expression -> expression MINUS expression
-- On PLUS reduce production expression -> expression MINUS expression
-- On PIPE_EQ reduce production expression -> expression MINUS expression
-- On PIPE reduce production expression -> expression MINUS expression
-- On PERCENT_EQ reduce production expression -> expression MINUS expression
-- On MINUS_EQ reduce production expression -> expression MINUS expression
-- On MINUS reduce production expression -> expression MINUS expression
-- On LPAREN reduce production expression -> expression MINUS expression
-- On INF_INF_EQ reduce production expression -> expression MINUS expression
-- On INF_INF reduce production expression -> expression MINUS expression
-- On INF_EQ reduce production expression -> expression MINUS expression
-- On INF reduce production expression -> expression MINUS expression
-- On EXCLAM_EQ reduce production expression -> expression MINUS expression
-- On EQ_EQ reduce production expression -> expression MINUS expression
-- On EQ reduce production expression -> expression MINUS expression
-- On COMMA reduce production expression -> expression MINUS expression
-- On CIRC_EQ reduce production expression -> expression MINUS expression
-- On CIRC reduce production expression -> expression MINUS expression
-- On ARG_b reduce production expression -> expression MINUS expression
-- On AND_EQ reduce production expression -> expression MINUS expression
-- On AND reduce production expression -> expression MINUS expression
-- On # reduce production expression -> expression MINUS expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression MINUS expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 66:
expression -> expression INF_INF . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 67
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 67:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression INF_INF expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression INF_INF expression
-- On SUP_SUP reduce production expression -> expression INF_INF expression
-- On SUP_EQ reduce production expression -> expression INF_INF expression
-- On SUP reduce production expression -> expression INF_INF expression
-- On STAR_EQ reduce production expression -> expression INF_INF expression
-- On SLASH_EQ reduce production expression -> expression INF_INF expression
-- On SEMICOLON reduce production expression -> expression INF_INF expression
-- On RPAREN reduce production expression -> expression INF_INF expression
-- On RBRACKET reduce production expression -> expression INF_INF expression
-- On PLUS_EQ reduce production expression -> expression INF_INF expression
-- On PIPE_EQ reduce production expression -> expression INF_INF expression
-- On PIPE reduce production expression -> expression INF_INF expression
-- On PERCENT_EQ reduce production expression -> expression INF_INF expression
-- On MINUS_EQ reduce production expression -> expression INF_INF expression
-- On LPAREN reduce production expression -> expression INF_INF expression
-- On INF_INF_EQ reduce production expression -> expression INF_INF expression
-- On INF_INF reduce production expression -> expression INF_INF expression
-- On INF_EQ reduce production expression -> expression INF_INF expression
-- On INF reduce production expression -> expression INF_INF expression
-- On EXCLAM_EQ reduce production expression -> expression INF_INF expression
-- On EQ_EQ reduce production expression -> expression INF_INF expression
-- On EQ reduce production expression -> expression INF_INF expression
-- On COMMA reduce production expression -> expression INF_INF expression
-- On CIRC_EQ reduce production expression -> expression INF_INF expression
-- On CIRC reduce production expression -> expression INF_INF expression
-- On ARG_b reduce production expression -> expression INF_INF expression
-- On AND_EQ reduce production expression -> expression INF_INF expression
-- On AND reduce production expression -> expression INF_INF expression
-- On # reduce production expression -> expression INF_INF expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression INF_INF expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 68:
expression -> expression SUP . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 69
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 69:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression SUP expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression SUP expression
-- On SUP_EQ reduce production expression -> expression SUP expression
-- On SUP reduce production expression -> expression SUP expression
-- On STAR_EQ reduce production expression -> expression SUP expression
-- On SLASH_EQ reduce production expression -> expression SUP expression
-- On SEMICOLON reduce production expression -> expression SUP expression
-- On RPAREN reduce production expression -> expression SUP expression
-- On RBRACKET reduce production expression -> expression SUP expression
-- On PLUS_EQ reduce production expression -> expression SUP expression
-- On PIPE_EQ reduce production expression -> expression SUP expression
-- On PIPE reduce production expression -> expression SUP expression
-- On PERCENT_EQ reduce production expression -> expression SUP expression
-- On MINUS_EQ reduce production expression -> expression SUP expression
-- On LPAREN reduce production expression -> expression SUP expression
-- On INF_INF_EQ reduce production expression -> expression SUP expression
-- On INF_EQ reduce production expression -> expression SUP expression
-- On INF reduce production expression -> expression SUP expression
-- On EXCLAM_EQ reduce production expression -> expression SUP expression
-- On EQ_EQ reduce production expression -> expression SUP expression
-- On EQ reduce production expression -> expression SUP expression
-- On COMMA reduce production expression -> expression SUP expression
-- On CIRC_EQ reduce production expression -> expression SUP expression
-- On CIRC reduce production expression -> expression SUP expression
-- On ARG_b reduce production expression -> expression SUP expression
-- On AND_EQ reduce production expression -> expression SUP expression
-- On AND reduce production expression -> expression SUP expression
-- On # reduce production expression -> expression SUP expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression SUP expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 70:
expression -> expression PIPE . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 71
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 71:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression PIPE expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On AND shift to state 82
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression PIPE expression
-- On STAR_EQ reduce production expression -> expression PIPE expression
-- On SLASH_EQ reduce production expression -> expression PIPE expression
-- On SEMICOLON reduce production expression -> expression PIPE expression
-- On RPAREN reduce production expression -> expression PIPE expression
-- On RBRACKET reduce production expression -> expression PIPE expression
-- On PLUS_EQ reduce production expression -> expression PIPE expression
-- On PIPE_EQ reduce production expression -> expression PIPE expression
-- On PIPE reduce production expression -> expression PIPE expression
-- On PERCENT_EQ reduce production expression -> expression PIPE expression
-- On MINUS_EQ reduce production expression -> expression PIPE expression
-- On LPAREN reduce production expression -> expression PIPE expression
-- On INF_INF_EQ reduce production expression -> expression PIPE expression
-- On EQ reduce production expression -> expression PIPE expression
-- On COMMA reduce production expression -> expression PIPE expression
-- On CIRC_EQ reduce production expression -> expression PIPE expression
-- On ARG_b reduce production expression -> expression PIPE expression
-- On AND_EQ reduce production expression -> expression PIPE expression
-- On # reduce production expression -> expression PIPE expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression PIPE expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 72:
expression -> expression INF_EQ . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 73
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 73:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression INF_EQ expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression INF_EQ expression
-- On SUP_EQ reduce production expression -> expression INF_EQ expression
-- On SUP reduce production expression -> expression INF_EQ expression
-- On STAR_EQ reduce production expression -> expression INF_EQ expression
-- On SLASH_EQ reduce production expression -> expression INF_EQ expression
-- On SEMICOLON reduce production expression -> expression INF_EQ expression
-- On RPAREN reduce production expression -> expression INF_EQ expression
-- On RBRACKET reduce production expression -> expression INF_EQ expression
-- On PLUS_EQ reduce production expression -> expression INF_EQ expression
-- On PIPE_EQ reduce production expression -> expression INF_EQ expression
-- On PIPE reduce production expression -> expression INF_EQ expression
-- On PERCENT_EQ reduce production expression -> expression INF_EQ expression
-- On MINUS_EQ reduce production expression -> expression INF_EQ expression
-- On LPAREN reduce production expression -> expression INF_EQ expression
-- On INF_INF_EQ reduce production expression -> expression INF_EQ expression
-- On INF_EQ reduce production expression -> expression INF_EQ expression
-- On INF reduce production expression -> expression INF_EQ expression
-- On EXCLAM_EQ reduce production expression -> expression INF_EQ expression
-- On EQ_EQ reduce production expression -> expression INF_EQ expression
-- On EQ reduce production expression -> expression INF_EQ expression
-- On COMMA reduce production expression -> expression INF_EQ expression
-- On CIRC_EQ reduce production expression -> expression INF_EQ expression
-- On CIRC reduce production expression -> expression INF_EQ expression
-- On ARG_b reduce production expression -> expression INF_EQ expression
-- On AND_EQ reduce production expression -> expression INF_EQ expression
-- On AND reduce production expression -> expression INF_EQ expression
-- On # reduce production expression -> expression INF_EQ expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression INF_EQ expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 74:
expression -> expression INF . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 75
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 75:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression INF expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression INF expression
-- On SUP_EQ reduce production expression -> expression INF expression
-- On SUP reduce production expression -> expression INF expression
-- On STAR_EQ reduce production expression -> expression INF expression
-- On SLASH_EQ reduce production expression -> expression INF expression
-- On SEMICOLON reduce production expression -> expression INF expression
-- On RPAREN reduce production expression -> expression INF expression
-- On RBRACKET reduce production expression -> expression INF expression
-- On PLUS_EQ reduce production expression -> expression INF expression
-- On PIPE_EQ reduce production expression -> expression INF expression
-- On PIPE reduce production expression -> expression INF expression
-- On PERCENT_EQ reduce production expression -> expression INF expression
-- On MINUS_EQ reduce production expression -> expression INF expression
-- On LPAREN reduce production expression -> expression INF expression
-- On INF_INF_EQ reduce production expression -> expression INF expression
-- On INF_EQ reduce production expression -> expression INF expression
-- On INF reduce production expression -> expression INF expression
-- On EXCLAM_EQ reduce production expression -> expression INF expression
-- On EQ_EQ reduce production expression -> expression INF expression
-- On EQ reduce production expression -> expression INF expression
-- On COMMA reduce production expression -> expression INF expression
-- On CIRC_EQ reduce production expression -> expression INF expression
-- On CIRC reduce production expression -> expression INF expression
-- On ARG_b reduce production expression -> expression INF expression
-- On AND_EQ reduce production expression -> expression INF expression
-- On AND reduce production expression -> expression INF expression
-- On # reduce production expression -> expression INF expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression INF expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 76:
expression -> expression EXCLAM_EQ . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 77
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 77:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression EXCLAM_EQ expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On STAR_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On SLASH_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On SEMICOLON reduce production expression -> expression EXCLAM_EQ expression
-- On RPAREN reduce production expression -> expression EXCLAM_EQ expression
-- On RBRACKET reduce production expression -> expression EXCLAM_EQ expression
-- On PLUS_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On PIPE_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On PIPE reduce production expression -> expression EXCLAM_EQ expression
-- On PERCENT_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On MINUS_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On LPAREN reduce production expression -> expression EXCLAM_EQ expression
-- On INF_INF_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On EXCLAM_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On EQ_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On EQ reduce production expression -> expression EXCLAM_EQ expression
-- On COMMA reduce production expression -> expression EXCLAM_EQ expression
-- On CIRC_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On CIRC reduce production expression -> expression EXCLAM_EQ expression
-- On ARG_b reduce production expression -> expression EXCLAM_EQ expression
-- On AND_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On AND reduce production expression -> expression EXCLAM_EQ expression
-- On # reduce production expression -> expression EXCLAM_EQ expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression EXCLAM_EQ expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 78:
expression -> expression EQ_EQ . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 79
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 79:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression EQ_EQ expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression EQ_EQ expression
-- On STAR_EQ reduce production expression -> expression EQ_EQ expression
-- On SLASH_EQ reduce production expression -> expression EQ_EQ expression
-- On SEMICOLON reduce production expression -> expression EQ_EQ expression
-- On RPAREN reduce production expression -> expression EQ_EQ expression
-- On RBRACKET reduce production expression -> expression EQ_EQ expression
-- On PLUS_EQ reduce production expression -> expression EQ_EQ expression
-- On PIPE_EQ reduce production expression -> expression EQ_EQ expression
-- On PIPE reduce production expression -> expression EQ_EQ expression
-- On PERCENT_EQ reduce production expression -> expression EQ_EQ expression
-- On MINUS_EQ reduce production expression -> expression EQ_EQ expression
-- On LPAREN reduce production expression -> expression EQ_EQ expression
-- On INF_INF_EQ reduce production expression -> expression EQ_EQ expression
-- On EXCLAM_EQ reduce production expression -> expression EQ_EQ expression
-- On EQ_EQ reduce production expression -> expression EQ_EQ expression
-- On EQ reduce production expression -> expression EQ_EQ expression
-- On COMMA reduce production expression -> expression EQ_EQ expression
-- On CIRC_EQ reduce production expression -> expression EQ_EQ expression
-- On CIRC reduce production expression -> expression EQ_EQ expression
-- On ARG_b reduce production expression -> expression EQ_EQ expression
-- On AND_EQ reduce production expression -> expression EQ_EQ expression
-- On AND reduce production expression -> expression EQ_EQ expression
-- On # reduce production expression -> expression EQ_EQ expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression EQ_EQ expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 80:
expression -> expression CIRC . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 81
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 81:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression CIRC expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On ARROW shift to state 42
-- On AND shift to state 82
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression CIRC expression
-- On STAR_EQ reduce production expression -> expression CIRC expression
-- On SLASH_EQ reduce production expression -> expression CIRC expression
-- On SEMICOLON reduce production expression -> expression CIRC expression
-- On RPAREN reduce production expression -> expression CIRC expression
-- On RBRACKET reduce production expression -> expression CIRC expression
-- On PLUS_EQ reduce production expression -> expression CIRC expression
-- On PIPE_EQ reduce production expression -> expression CIRC expression
-- On PIPE reduce production expression -> expression CIRC expression
-- On PERCENT_EQ reduce production expression -> expression CIRC expression
-- On MINUS_EQ reduce production expression -> expression CIRC expression
-- On LPAREN reduce production expression -> expression CIRC expression
-- On INF_INF_EQ reduce production expression -> expression CIRC expression
-- On EQ reduce production expression -> expression CIRC expression
-- On COMMA reduce production expression -> expression CIRC expression
-- On CIRC_EQ reduce production expression -> expression CIRC expression
-- On CIRC reduce production expression -> expression CIRC expression
-- On ARG_b reduce production expression -> expression CIRC expression
-- On AND_EQ reduce production expression -> expression CIRC expression
-- On # reduce production expression -> expression CIRC expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression CIRC expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 82:
expression -> expression AND . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 83
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 83:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression AND expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> expression AND expression
-- On STAR_EQ reduce production expression -> expression AND expression
-- On SLASH_EQ reduce production expression -> expression AND expression
-- On SEMICOLON reduce production expression -> expression AND expression
-- On RPAREN reduce production expression -> expression AND expression
-- On RBRACKET reduce production expression -> expression AND expression
-- On PLUS_EQ reduce production expression -> expression AND expression
-- On PIPE_EQ reduce production expression -> expression AND expression
-- On PIPE reduce production expression -> expression AND expression
-- On PERCENT_EQ reduce production expression -> expression AND expression
-- On MINUS_EQ reduce production expression -> expression AND expression
-- On LPAREN reduce production expression -> expression AND expression
-- On INF_INF_EQ reduce production expression -> expression AND expression
-- On EQ reduce production expression -> expression AND expression
-- On COMMA reduce production expression -> expression AND expression
-- On CIRC_EQ reduce production expression -> expression AND expression
-- On CIRC reduce production expression -> expression AND expression
-- On ARG_b reduce production expression -> expression AND expression
-- On AND_EQ reduce production expression -> expression AND expression
-- On AND reduce production expression -> expression AND expression
-- On # reduce production expression -> expression AND expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> expression AND expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 84:
offset -> LBRACKET expression RBRACKET . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 85
-- On SUP_SUP_EQ reduce production offset -> 
-- On SUP_SUP reduce production offset -> 
-- On SUP_EQ reduce production offset -> 
-- On SUP reduce production offset -> 
-- On STAR_EQ reduce production offset -> 
-- On STAR reduce production offset -> 
-- On SLASH_EQ reduce production offset -> 
-- On SLASH reduce production offset -> 
-- On SEMICOLON reduce production offset -> 
-- On RPAREN reduce production offset -> 
-- On RBRACKET reduce production offset -> 
-- On PLUS_EQ reduce production offset -> 
-- On PLUS reduce production offset -> 
-- On PIPE_EQ reduce production offset -> 
-- On PIPE reduce production offset -> 
-- On PERCENT_EQ reduce production offset -> 
-- On PERCENT reduce production offset -> 
-- On MINUS_EQ reduce production offset -> 
-- On MINUS reduce production offset -> 
-- On LPAREN reduce production offset -> 
-- On INF_INF_EQ reduce production offset -> 
-- On INF_INF reduce production offset -> 
-- On INF_EQ reduce production offset -> 
-- On INF reduce production offset -> 
-- On EXCLAM_EQ reduce production offset -> 
-- On EQ_EQ reduce production offset -> 
-- On EQ reduce production offset -> 
-- On COMMA reduce production offset -> 
-- On CIRC_EQ reduce production offset -> 
-- On CIRC reduce production offset -> 
-- On ARROW reduce production offset -> 
-- On ARG_b reduce production offset -> 
-- On AND_EQ reduce production offset -> 
-- On AND reduce production offset -> 
-- On # reduce production offset -> 
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production offset -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 85:
offset -> LBRACKET expression RBRACKET offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On SUP_SUP reduce production offset -> LBRACKET expression RBRACKET offset
-- On SUP_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On SUP reduce production offset -> LBRACKET expression RBRACKET offset
-- On STAR_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On STAR reduce production offset -> LBRACKET expression RBRACKET offset
-- On SLASH_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On SLASH reduce production offset -> LBRACKET expression RBRACKET offset
-- On SEMICOLON reduce production offset -> LBRACKET expression RBRACKET offset
-- On RPAREN reduce production offset -> LBRACKET expression RBRACKET offset
-- On RBRACKET reduce production offset -> LBRACKET expression RBRACKET offset
-- On PLUS_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On PLUS reduce production offset -> LBRACKET expression RBRACKET offset
-- On PIPE_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On PIPE reduce production offset -> LBRACKET expression RBRACKET offset
-- On PERCENT_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On PERCENT reduce production offset -> LBRACKET expression RBRACKET offset
-- On MINUS_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On MINUS reduce production offset -> LBRACKET expression RBRACKET offset
-- On LPAREN reduce production offset -> LBRACKET expression RBRACKET offset
-- On INF_INF_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On INF_INF reduce production offset -> LBRACKET expression RBRACKET offset
-- On INF_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On INF reduce production offset -> LBRACKET expression RBRACKET offset
-- On EXCLAM_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On EQ_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On COMMA reduce production offset -> LBRACKET expression RBRACKET offset
-- On CIRC_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On CIRC reduce production offset -> LBRACKET expression RBRACKET offset
-- On ARROW reduce production offset -> LBRACKET expression RBRACKET offset
-- On ARG_b reduce production offset -> LBRACKET expression RBRACKET offset
-- On AND_EQ reduce production offset -> LBRACKET expression RBRACKET offset
-- On AND reduce production offset -> LBRACKET expression RBRACKET offset
-- On # reduce production offset -> LBRACKET expression RBRACKET offset
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production offset -> LBRACKET expression RBRACKET offset
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 86:
argb -> ARG_b . [ TILDE STAR SIZEOF PLUS MINUS LPAREN IDENT EXCLAM CST_INT ARG_v ARG_u ARG_l ARG_g ARG_e ARG_d AND ALIGNOF ]
-- On TILDE reduce production argb -> ARG_b
-- On STAR reduce production argb -> ARG_b
-- On SIZEOF reduce production argb -> ARG_b
-- On PLUS reduce production argb -> ARG_b
-- On MINUS reduce production argb -> ARG_b
-- On LPAREN reduce production argb -> ARG_b
-- On IDENT reduce production argb -> ARG_b
-- On EXCLAM reduce production argb -> ARG_b
-- On CST_INT reduce production argb -> ARG_b
-- On ARG_v reduce production argb -> ARG_b
-- On ARG_u reduce production argb -> ARG_b
-- On ARG_l reduce production argb -> ARG_b
-- On ARG_g reduce production argb -> ARG_b
-- On ARG_e reduce production argb -> ARG_b
-- On ARG_d reduce production argb -> ARG_b
-- On AND reduce production argb -> ARG_b
-- On ALIGNOF reduce production argb -> ARG_b

State 87:
lval -> LPAREN STAR expression RPAREN offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On SUP_SUP reduce production lval -> LPAREN STAR expression RPAREN offset
-- On SUP_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On SUP reduce production lval -> LPAREN STAR expression RPAREN offset
-- On STAR_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On STAR reduce production lval -> LPAREN STAR expression RPAREN offset
-- On SLASH_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On SLASH reduce production lval -> LPAREN STAR expression RPAREN offset
-- On SEMICOLON reduce production lval -> LPAREN STAR expression RPAREN offset
-- On RPAREN reduce production lval -> LPAREN STAR expression RPAREN offset
-- On RBRACKET reduce production lval -> LPAREN STAR expression RPAREN offset
-- On PLUS_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On PLUS reduce production lval -> LPAREN STAR expression RPAREN offset
-- On PIPE_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On PIPE reduce production lval -> LPAREN STAR expression RPAREN offset
-- On PERCENT_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On PERCENT reduce production lval -> LPAREN STAR expression RPAREN offset
-- On MINUS_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On MINUS reduce production lval -> LPAREN STAR expression RPAREN offset
-- On LPAREN reduce production lval -> LPAREN STAR expression RPAREN offset
-- On INF_INF_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On INF_INF reduce production lval -> LPAREN STAR expression RPAREN offset
-- On INF_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On INF reduce production lval -> LPAREN STAR expression RPAREN offset
-- On EXCLAM_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On EQ_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On COMMA reduce production lval -> LPAREN STAR expression RPAREN offset
-- On CIRC_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On CIRC reduce production lval -> LPAREN STAR expression RPAREN offset
-- On ARROW reduce production lval -> LPAREN STAR expression RPAREN offset
-- On ARG_b reduce production lval -> LPAREN STAR expression RPAREN offset
-- On AND_EQ reduce production lval -> LPAREN STAR expression RPAREN offset
-- On AND reduce production lval -> LPAREN STAR expression RPAREN offset
-- On # reduce production lval -> LPAREN STAR expression RPAREN offset
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production lval -> LPAREN STAR expression RPAREN offset
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 88:
type_spec -> SHORT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> SHORT
-- On STAR reduce production type_spec -> SHORT
-- On SEMICOLON reduce production type_spec -> SHORT
-- On RPAREN reduce production type_spec -> SHORT
-- On RESTRICT reduce production type_spec -> SHORT
-- On LPAREN reduce production type_spec -> SHORT
-- On LBRACKET reduce production type_spec -> SHORT
-- On IDENT reduce production type_spec -> SHORT
-- On EQ reduce production type_spec -> SHORT
-- On CONST reduce production type_spec -> SHORT
-- On COMMA reduce production type_spec -> SHORT
-- On ATTRIBUTE reduce production type_spec -> SHORT
-- On ARG_A reduce production type_spec -> SHORT
-- On # reduce production type_spec -> SHORT
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> SHORT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 89:
type_spec -> LONG . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> LONG . LONG [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On LONG shift to state 90
-- On VOLATILE reduce production type_spec -> LONG
-- On STAR reduce production type_spec -> LONG
-- On SEMICOLON reduce production type_spec -> LONG
-- On RPAREN reduce production type_spec -> LONG
-- On RESTRICT reduce production type_spec -> LONG
-- On LPAREN reduce production type_spec -> LONG
-- On LBRACKET reduce production type_spec -> LONG
-- On IDENT reduce production type_spec -> LONG
-- On EQ reduce production type_spec -> LONG
-- On CONST reduce production type_spec -> LONG
-- On COMMA reduce production type_spec -> LONG
-- On ATTRIBUTE reduce production type_spec -> LONG
-- On ARG_A reduce production type_spec -> LONG
-- On # reduce production type_spec -> LONG
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LONG LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> LONG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 90:
type_spec -> LONG LONG . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> LONG LONG
-- On STAR reduce production type_spec -> LONG LONG
-- On SEMICOLON reduce production type_spec -> LONG LONG
-- On RPAREN reduce production type_spec -> LONG LONG
-- On RESTRICT reduce production type_spec -> LONG LONG
-- On LPAREN reduce production type_spec -> LONG LONG
-- On LBRACKET reduce production type_spec -> LONG LONG
-- On IDENT reduce production type_spec -> LONG LONG
-- On EQ reduce production type_spec -> LONG LONG
-- On CONST reduce production type_spec -> LONG LONG
-- On COMMA reduce production type_spec -> LONG LONG
-- On ATTRIBUTE reduce production type_spec -> LONG LONG
-- On ARG_A reduce production type_spec -> LONG LONG
-- On # reduce production type_spec -> LONG LONG
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> LONG LONG
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 91:
type_spec -> INT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> INT
-- On STAR reduce production type_spec -> INT
-- On SEMICOLON reduce production type_spec -> INT
-- On RPAREN reduce production type_spec -> INT
-- On RESTRICT reduce production type_spec -> INT
-- On LPAREN reduce production type_spec -> INT
-- On LBRACKET reduce production type_spec -> INT
-- On IDENT reduce production type_spec -> INT
-- On EQ reduce production type_spec -> INT
-- On CONST reduce production type_spec -> INT
-- On COMMA reduce production type_spec -> INT
-- On ATTRIBUTE reduce production type_spec -> INT
-- On ARG_A reduce production type_spec -> INT
-- On # reduce production type_spec -> INT
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> INT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 92:
type_spec -> FLOAT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> FLOAT
-- On STAR reduce production type_spec -> FLOAT
-- On SEMICOLON reduce production type_spec -> FLOAT
-- On RPAREN reduce production type_spec -> FLOAT
-- On RESTRICT reduce production type_spec -> FLOAT
-- On LPAREN reduce production type_spec -> FLOAT
-- On LBRACKET reduce production type_spec -> FLOAT
-- On IDENT reduce production type_spec -> FLOAT
-- On EQ reduce production type_spec -> FLOAT
-- On CONST reduce production type_spec -> FLOAT
-- On COMMA reduce production type_spec -> FLOAT
-- On ATTRIBUTE reduce production type_spec -> FLOAT
-- On ARG_A reduce production type_spec -> FLOAT
-- On # reduce production type_spec -> FLOAT
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> FLOAT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 93:
type_spec -> DOUBLE . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> DOUBLE
-- On STAR reduce production type_spec -> DOUBLE
-- On SEMICOLON reduce production type_spec -> DOUBLE
-- On RPAREN reduce production type_spec -> DOUBLE
-- On RESTRICT reduce production type_spec -> DOUBLE
-- On LPAREN reduce production type_spec -> DOUBLE
-- On LBRACKET reduce production type_spec -> DOUBLE
-- On IDENT reduce production type_spec -> DOUBLE
-- On EQ reduce production type_spec -> DOUBLE
-- On CONST reduce production type_spec -> DOUBLE
-- On COMMA reduce production type_spec -> DOUBLE
-- On ATTRIBUTE reduce production type_spec -> DOUBLE
-- On ARG_A reduce production type_spec -> DOUBLE
-- On # reduce production type_spec -> DOUBLE
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> DOUBLE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 94:
type_spec -> CHAR . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> CHAR
-- On STAR reduce production type_spec -> CHAR
-- On SEMICOLON reduce production type_spec -> CHAR
-- On RPAREN reduce production type_spec -> CHAR
-- On RESTRICT reduce production type_spec -> CHAR
-- On LPAREN reduce production type_spec -> CHAR
-- On LBRACKET reduce production type_spec -> CHAR
-- On IDENT reduce production type_spec -> CHAR
-- On EQ reduce production type_spec -> CHAR
-- On CONST reduce production type_spec -> CHAR
-- On COMMA reduce production type_spec -> CHAR
-- On ATTRIBUTE reduce production type_spec -> CHAR
-- On ARG_A reduce production type_spec -> CHAR
-- On # reduce production type_spec -> CHAR
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> CHAR
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 95:
type_spec -> ARG_t . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> ARG_t
-- On STAR reduce production type_spec -> ARG_t
-- On SEMICOLON reduce production type_spec -> ARG_t
-- On RPAREN reduce production type_spec -> ARG_t
-- On RESTRICT reduce production type_spec -> ARG_t
-- On LPAREN reduce production type_spec -> ARG_t
-- On LBRACKET reduce production type_spec -> ARG_t
-- On IDENT reduce production type_spec -> ARG_t
-- On EQ reduce production type_spec -> ARG_t
-- On CONST reduce production type_spec -> ARG_t
-- On COMMA reduce production type_spec -> ARG_t
-- On ATTRIBUTE reduce production type_spec -> ARG_t
-- On ARG_A reduce production type_spec -> ARG_t
-- On # reduce production type_spec -> ARG_t
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> ARG_t
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 96:
type_spec -> ARG_k . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> ARG_k
-- On STAR reduce production type_spec -> ARG_k
-- On SEMICOLON reduce production type_spec -> ARG_k
-- On RPAREN reduce production type_spec -> ARG_k
-- On RESTRICT reduce production type_spec -> ARG_k
-- On LPAREN reduce production type_spec -> ARG_k
-- On LBRACKET reduce production type_spec -> ARG_k
-- On IDENT reduce production type_spec -> ARG_k
-- On EQ reduce production type_spec -> ARG_k
-- On CONST reduce production type_spec -> ARG_k
-- On COMMA reduce production type_spec -> ARG_k
-- On ATTRIBUTE reduce production type_spec -> ARG_k
-- On ARG_A reduce production type_spec -> ARG_k
-- On # reduce production type_spec -> ARG_k
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> ARG_k
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 97:
one_formal -> ARG_f . [ RPAREN COMMA ]
-- On RPAREN reduce production one_formal -> ARG_f
-- On COMMA reduce production one_formal -> ARG_f

State 98:
expression -> ALIGNOF LPAREN typename . RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename . RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On RPAREN shift to state 99

State 99:
expression -> ALIGNOF LPAREN typename RPAREN . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename RPAREN . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On SIZEOF shift to state 3
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 100
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On SUP_SUP_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SUP_SUP reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SUP_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SUP reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On STAR_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On STAR reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SLASH_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SLASH reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SEMICOLON reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On RPAREN reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On RBRACKET reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PLUS_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PLUS reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PIPE_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PIPE reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PERCENT_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PERCENT reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On MINUS_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On MINUS reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On INF_INF_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On INF_INF reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On INF_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On INF reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On EXCLAM_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On EQ_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On COMMA reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On CIRC_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On CIRC reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On ARROW reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On ARG_b reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On AND_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On AND reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On # reduce production expression -> ALIGNOF LPAREN typename RPAREN
** End-of-stream conflict on TILDE SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SIZEOF SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF IDENT EXCLAM_EQ EXCLAM EQ_EQ EQ CST_INT COMMA CIRC_EQ CIRC ARROW ARG_v ARG_u ARG_l ARG_g ARG_e ARG_d ARG_b AND_EQ AND ALIGNOF
**   There is a tension between
**   (1) reducing production expression -> ALIGNOF LPAREN typename RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 100:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename RPAREN expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On SUP_SUP reduce production expression -> LPAREN typename RPAREN expression
-- On SUP_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On SUP reduce production expression -> LPAREN typename RPAREN expression
-- On STAR_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On STAR reduce production expression -> LPAREN typename RPAREN expression
-- On SLASH_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On SLASH reduce production expression -> LPAREN typename RPAREN expression
-- On SEMICOLON reduce production expression -> LPAREN typename RPAREN expression
-- On RPAREN reduce production expression -> LPAREN typename RPAREN expression
-- On RBRACKET reduce production expression -> LPAREN typename RPAREN expression
-- On PLUS_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On PLUS reduce production expression -> LPAREN typename RPAREN expression
-- On PIPE_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On PIPE reduce production expression -> LPAREN typename RPAREN expression
-- On PERCENT_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On PERCENT reduce production expression -> LPAREN typename RPAREN expression
-- On MINUS_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On MINUS reduce production expression -> LPAREN typename RPAREN expression
-- On LPAREN reduce production expression -> LPAREN typename RPAREN expression
-- On INF_INF_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On INF_INF reduce production expression -> LPAREN typename RPAREN expression
-- On INF_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On INF reduce production expression -> LPAREN typename RPAREN expression
-- On EXCLAM_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On EQ_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On EQ reduce production expression -> LPAREN typename RPAREN expression
-- On COMMA reduce production expression -> LPAREN typename RPAREN expression
-- On CIRC_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On CIRC reduce production expression -> LPAREN typename RPAREN expression
-- On ARG_b reduce production expression -> LPAREN typename RPAREN expression
-- On AND_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On AND reduce production expression -> LPAREN typename RPAREN expression
-- On # reduce production expression -> LPAREN typename RPAREN expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> LPAREN typename RPAREN expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 101:
one_formal -> type_spec . attributes decl [ RPAREN COMMA ]
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 125
-- On attribute shift to state 149
-- On STAR reduce production attributes -> 
-- On RPAREN reduce production attributes -> 
-- On LPAREN reduce production attributes -> 
-- On LBRACKET reduce production attributes -> 
-- On IDENT reduce production attributes -> 
-- On COMMA reduce production attributes -> 

State 102:
attribute -> VOLATILE . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production attribute -> VOLATILE
-- On STAR reduce production attribute -> VOLATILE
-- On SEMICOLON reduce production attribute -> VOLATILE
-- On RPAREN reduce production attribute -> VOLATILE
-- On RESTRICT reduce production attribute -> VOLATILE
-- On LPAREN reduce production attribute -> VOLATILE
-- On LBRACKET reduce production attribute -> VOLATILE
-- On IDENT reduce production attribute -> VOLATILE
-- On EQ reduce production attribute -> VOLATILE
-- On CONST reduce production attribute -> VOLATILE
-- On COMMA reduce production attribute -> VOLATILE
-- On ATTRIBUTE reduce production attribute -> VOLATILE
-- On ARG_A reduce production attribute -> VOLATILE
-- On # reduce production attribute -> VOLATILE
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production attribute -> VOLATILE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 103:
attribute -> RESTRICT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production attribute -> RESTRICT
-- On STAR reduce production attribute -> RESTRICT
-- On SEMICOLON reduce production attribute -> RESTRICT
-- On RPAREN reduce production attribute -> RESTRICT
-- On RESTRICT reduce production attribute -> RESTRICT
-- On LPAREN reduce production attribute -> RESTRICT
-- On LBRACKET reduce production attribute -> RESTRICT
-- On IDENT reduce production attribute -> RESTRICT
-- On EQ reduce production attribute -> RESTRICT
-- On CONST reduce production attribute -> RESTRICT
-- On COMMA reduce production attribute -> RESTRICT
-- On ATTRIBUTE reduce production attribute -> RESTRICT
-- On ARG_A reduce production attribute -> RESTRICT
-- On # reduce production attribute -> RESTRICT
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production attribute -> RESTRICT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 104:
attribute -> CONST . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production attribute -> CONST
-- On STAR reduce production attribute -> CONST
-- On SEMICOLON reduce production attribute -> CONST
-- On RPAREN reduce production attribute -> CONST
-- On RESTRICT reduce production attribute -> CONST
-- On LPAREN reduce production attribute -> CONST
-- On LBRACKET reduce production attribute -> CONST
-- On IDENT reduce production attribute -> CONST
-- On EQ reduce production attribute -> CONST
-- On CONST reduce production attribute -> CONST
-- On COMMA reduce production attribute -> CONST
-- On ATTRIBUTE reduce production attribute -> CONST
-- On ARG_A reduce production attribute -> CONST
-- On # reduce production attribute -> CONST
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production attribute -> CONST
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 105:
attribute -> ATTRIBUTE . LPAREN LPAREN attr RPAREN RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On LPAREN shift to state 106

State 106:
attribute -> ATTRIBUTE LPAREN . LPAREN attr RPAREN RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On LPAREN shift to state 107

State 107:
attribute -> ATTRIBUTE LPAREN LPAREN . attr RPAREN RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On IDENT shift to state 108
-- On attr shift to state 121

State 108:
attr -> IDENT . [ RPAREN ]
attr -> IDENT . LPAREN attr_args_ne RPAREN [ RPAREN ]
-- On LPAREN shift to state 109
-- On RPAREN reduce production attr -> IDENT

State 109:
attr -> IDENT LPAREN . attr_args_ne RPAREN [ RPAREN ]
-- On IDENT shift to state 110
-- On ARG_p shift to state 112
-- On ARG_P shift to state 113
-- On attr_args_ne shift to state 119
-- On attr_arg shift to state 116

State 110:
attr_arg -> IDENT . [ RPAREN COMMA ]
attr_arg -> IDENT . LPAREN attr_args_ne RPAREN [ RPAREN COMMA ]
-- On LPAREN shift to state 111
-- On RPAREN reduce production attr_arg -> IDENT
-- On COMMA reduce production attr_arg -> IDENT

State 111:
attr_arg -> IDENT LPAREN . attr_args_ne RPAREN [ RPAREN COMMA ]
-- On IDENT shift to state 110
-- On ARG_p shift to state 112
-- On ARG_P shift to state 113
-- On attr_args_ne shift to state 114
-- On attr_arg shift to state 116

State 112:
attr_arg -> ARG_p . [ RPAREN COMMA ]
-- On RPAREN reduce production attr_arg -> ARG_p
-- On COMMA reduce production attr_arg -> ARG_p

State 113:
attr_args_ne -> ARG_P . [ RPAREN ]
-- On RPAREN reduce production attr_args_ne -> ARG_P

State 114:
attr_arg -> IDENT LPAREN attr_args_ne . RPAREN [ RPAREN COMMA ]
-- On RPAREN shift to state 115

State 115:
attr_arg -> IDENT LPAREN attr_args_ne RPAREN . [ RPAREN COMMA ]
-- On RPAREN reduce production attr_arg -> IDENT LPAREN attr_args_ne RPAREN
-- On COMMA reduce production attr_arg -> IDENT LPAREN attr_args_ne RPAREN

State 116:
attr_args_ne -> attr_arg . [ RPAREN ]
attr_args_ne -> attr_arg . COMMA attr_args_ne [ RPAREN ]
-- On COMMA shift to state 117
-- On RPAREN reduce production attr_args_ne -> attr_arg

State 117:
attr_args_ne -> attr_arg COMMA . attr_args_ne [ RPAREN ]
-- On IDENT shift to state 110
-- On ARG_p shift to state 112
-- On ARG_P shift to state 113
-- On attr_args_ne shift to state 118
-- On attr_arg shift to state 116

State 118:
attr_args_ne -> attr_arg COMMA attr_args_ne . [ RPAREN ]
-- On RPAREN reduce production attr_args_ne -> attr_arg COMMA attr_args_ne

State 119:
attr -> IDENT LPAREN attr_args_ne . RPAREN [ RPAREN ]
-- On RPAREN shift to state 120

State 120:
attr -> IDENT LPAREN attr_args_ne RPAREN . [ RPAREN ]
-- On RPAREN reduce production attr -> IDENT LPAREN attr_args_ne RPAREN

State 121:
attribute -> ATTRIBUTE LPAREN LPAREN attr . RPAREN RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On RPAREN shift to state 122

State 122:
attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN . RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On RPAREN shift to state 123

State 123:
attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On STAR reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On SEMICOLON reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On RPAREN reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On RESTRICT reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On LPAREN reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On LBRACKET reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On IDENT reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On EQ reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On CONST reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On COMMA reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On ATTRIBUTE reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On ARG_A reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
-- On # reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 124:
attributes -> ARG_A . [ STAR SEMICOLON RPAREN LPAREN LBRACKET IDENT EQ COMMA # ]
-- On STAR reduce production attributes -> ARG_A
-- On SEMICOLON reduce production attributes -> ARG_A
-- On RPAREN reduce production attributes -> ARG_A
-- On LPAREN reduce production attributes -> ARG_A
-- On LBRACKET reduce production attributes -> ARG_A
-- On IDENT reduce production attributes -> ARG_A
-- On EQ reduce production attributes -> ARG_A
-- On COMMA reduce production attributes -> ARG_A
-- On # reduce production attributes -> ARG_A
** End-of-stream conflict on STAR SEMICOLON RPAREN LPAREN LBRACKET IDENT EQ COMMA
**   There is a tension between
**   (1) reducing production attributes -> ARG_A
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 125:
one_formal -> type_spec attributes . decl [ RPAREN COMMA ]
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 152
-- On RPAREN reduce production direct_decl -> 
-- On LBRACKET reduce production direct_decl -> 
-- On COMMA reduce production direct_decl -> 

State 126:
decl -> STAR . attributes decl [ SEMICOLON RPAREN EQ COMMA ]
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 127
-- On attribute shift to state 149
-- On STAR reduce production attributes -> 
-- On SEMICOLON reduce production attributes -> 
-- On RPAREN reduce production attributes -> 
-- On LPAREN reduce production attributes -> 
-- On LBRACKET reduce production attributes -> 
-- On IDENT reduce production attributes -> 
-- On EQ reduce production attributes -> 
-- On COMMA reduce production attributes -> 

State 127:
decl -> STAR attributes . decl [ SEMICOLON RPAREN EQ COMMA ]
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 151
-- On SEMICOLON reduce production direct_decl -> 
-- On RPAREN reduce production direct_decl -> 
-- On LBRACKET reduce production direct_decl -> 
-- On EQ reduce production direct_decl -> 
-- On COMMA reduce production direct_decl -> 

State 128:
direct_decl -> LPAREN . attributes decl RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
direct_decl -> LPAREN . attributes decl RPAREN LPAREN parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 129
-- On attribute shift to state 149
-- On STAR reduce production attributes -> 
-- On RPAREN reduce production attributes -> 
-- On LPAREN reduce production attributes -> 
-- On LBRACKET reduce production attributes -> 
-- On IDENT reduce production attributes -> 

State 129:
direct_decl -> LPAREN attributes . decl RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
direct_decl -> LPAREN attributes . decl RPAREN LPAREN parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 137
-- On RPAREN reduce production direct_decl -> 
-- On LBRACKET reduce production direct_decl -> 

State 130:
direct_decl -> IDENT . [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On SEMICOLON reduce production direct_decl -> IDENT
-- On RPAREN reduce production direct_decl -> IDENT
-- On LBRACKET reduce production direct_decl -> IDENT
-- On EQ reduce production direct_decl -> IDENT
-- On COMMA reduce production direct_decl -> IDENT
-- On # reduce production direct_decl -> IDENT
** End-of-stream conflict on SEMICOLON RPAREN LBRACKET EQ COMMA
**   There is a tension between
**   (1) reducing production direct_decl -> IDENT
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 131:
decl -> direct_decl . [ SEMICOLON RPAREN EQ COMMA ]
direct_decl -> direct_decl . LBRACKET exp_opt RBRACKET [ SEMICOLON RPAREN LBRACKET EQ COMMA ]
-- On LBRACKET shift to state 132
-- On SEMICOLON reduce production decl -> direct_decl
-- On RPAREN reduce production decl -> direct_decl
-- On EQ reduce production decl -> direct_decl
-- On COMMA reduce production decl -> direct_decl

State 132:
direct_decl -> direct_decl LBRACKET . exp_opt RBRACKET [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_eo shift to state 133
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 134
-- On exp_opt shift to state 135
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On RBRACKET reduce production exp_opt -> 

State 133:
exp_opt -> ARG_eo . [ SEMICOLON RBRACKET ]
-- On SEMICOLON reduce production exp_opt -> ARG_eo
-- On RBRACKET reduce production exp_opt -> ARG_eo

State 134:
exp_opt -> expression . [ SEMICOLON RBRACKET ]
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
-- On SEMICOLON reduce production exp_opt -> expression
-- On RBRACKET reduce production exp_opt -> expression

State 135:
direct_decl -> direct_decl LBRACKET exp_opt . RBRACKET [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On RBRACKET shift to state 136

State 136:
direct_decl -> direct_decl LBRACKET exp_opt RBRACKET . [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On SEMICOLON reduce production direct_decl -> direct_decl LBRACKET exp_opt RBRACKET
-- On RPAREN reduce production direct_decl -> direct_decl LBRACKET exp_opt RBRACKET
-- On LBRACKET reduce production direct_decl -> direct_decl LBRACKET exp_opt RBRACKET
-- On EQ reduce production direct_decl -> direct_decl LBRACKET exp_opt RBRACKET
-- On COMMA reduce production direct_decl -> direct_decl LBRACKET exp_opt RBRACKET
-- On # reduce production direct_decl -> direct_decl LBRACKET exp_opt RBRACKET
** End-of-stream conflict on SEMICOLON RPAREN LBRACKET EQ COMMA
**   There is a tension between
**   (1) reducing production direct_decl -> direct_decl LBRACKET exp_opt RBRACKET
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 137:
direct_decl -> LPAREN attributes decl . RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
direct_decl -> LPAREN attributes decl . RPAREN LPAREN parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On RPAREN shift to state 138

State 138:
direct_decl -> LPAREN attributes decl RPAREN . [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
direct_decl -> LPAREN attributes decl RPAREN . LPAREN parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On LPAREN shift to state 139
-- On SEMICOLON reduce production direct_decl -> LPAREN attributes decl RPAREN
-- On RPAREN reduce production direct_decl -> LPAREN attributes decl RPAREN
-- On LBRACKET reduce production direct_decl -> LPAREN attributes decl RPAREN
-- On EQ reduce production direct_decl -> LPAREN attributes decl RPAREN
-- On COMMA reduce production direct_decl -> LPAREN attributes decl RPAREN
-- On # reduce production direct_decl -> LPAREN attributes decl RPAREN
** End-of-stream conflict on SEMICOLON RPAREN LPAREN LBRACKET EQ COMMA
**   There is a tension between
**   (1) reducing production direct_decl -> LPAREN attributes decl RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 139:
direct_decl -> LPAREN attributes decl RPAREN LPAREN . parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On STRUCT shift to state 30
-- On SHORT shift to state 88
-- On LONG shift to state 89
-- On INT shift to state 91
-- On FLOAT shift to state 92
-- On ELLIPSIS shift to state 140
-- On DOUBLE shift to state 93
-- On CHAR shift to state 94
-- On ARG_va shift to state 141
-- On ARG_t shift to state 95
-- On ARG_k shift to state 96
-- On ARG_f shift to state 97
-- On ARG_F shift to state 142
-- On type_spec shift to state 101
-- On parameters_ne shift to state 143
-- On parameters shift to state 144
-- On one_formal shift to state 146
-- On RPAREN reduce production parameters -> 

State 140:
parameters_ne -> ELLIPSIS . [ RPAREN ]
-- On RPAREN reduce production parameters_ne -> ELLIPSIS

State 141:
parameters_ne -> ARG_va . [ RPAREN ]
-- On RPAREN reduce production parameters_ne -> ARG_va

State 142:
parameters_ne -> ARG_F . [ RPAREN ]
-- On RPAREN reduce production parameters_ne -> ARG_F

State 143:
parameters -> parameters_ne . [ RPAREN ]
-- On RPAREN reduce production parameters -> parameters_ne

State 144:
direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters . RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On RPAREN shift to state 145

State 145:
direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN . [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
-- On SEMICOLON reduce production direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN
-- On RPAREN reduce production direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN
-- On LBRACKET reduce production direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN
-- On EQ reduce production direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN
-- On COMMA reduce production direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN
-- On # reduce production direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN
** End-of-stream conflict on SEMICOLON RPAREN LBRACKET EQ COMMA
**   There is a tension between
**   (1) reducing production direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 146:
parameters_ne -> one_formal . [ RPAREN ]
parameters_ne -> one_formal . COMMA parameters_ne [ RPAREN ]
-- On COMMA shift to state 147
-- On RPAREN reduce production parameters_ne -> one_formal

State 147:
parameters_ne -> one_formal COMMA . parameters_ne [ RPAREN ]
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On STRUCT shift to state 30
-- On SHORT shift to state 88
-- On LONG shift to state 89
-- On INT shift to state 91
-- On FLOAT shift to state 92
-- On ELLIPSIS shift to state 140
-- On DOUBLE shift to state 93
-- On CHAR shift to state 94
-- On ARG_va shift to state 141
-- On ARG_t shift to state 95
-- On ARG_k shift to state 96
-- On ARG_f shift to state 97
-- On ARG_F shift to state 142
-- On type_spec shift to state 101
-- On parameters_ne shift to state 148
-- On one_formal shift to state 146

State 148:
parameters_ne -> one_formal COMMA parameters_ne . [ RPAREN ]
-- On RPAREN reduce production parameters_ne -> one_formal COMMA parameters_ne

State 149:
attributes -> attribute . attributes [ STAR SEMICOLON RPAREN LPAREN LBRACKET IDENT EQ COMMA # ]
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 150
-- On attribute shift to state 149
-- On STAR reduce production attributes -> 
-- On SEMICOLON reduce production attributes -> 
-- On RPAREN reduce production attributes -> 
-- On LPAREN reduce production attributes -> 
-- On LBRACKET reduce production attributes -> 
-- On IDENT reduce production attributes -> 
-- On EQ reduce production attributes -> 
-- On COMMA reduce production attributes -> 
-- On # reduce production attributes -> 
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production attributes -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 150:
attributes -> attribute attributes . [ STAR SEMICOLON RPAREN LPAREN LBRACKET IDENT EQ COMMA # ]
-- On STAR reduce production attributes -> attribute attributes
-- On SEMICOLON reduce production attributes -> attribute attributes
-- On RPAREN reduce production attributes -> attribute attributes
-- On LPAREN reduce production attributes -> attribute attributes
-- On LBRACKET reduce production attributes -> attribute attributes
-- On IDENT reduce production attributes -> attribute attributes
-- On EQ reduce production attributes -> attribute attributes
-- On COMMA reduce production attributes -> attribute attributes
-- On # reduce production attributes -> attribute attributes
** End-of-stream conflict on STAR SEMICOLON RPAREN LPAREN LBRACKET IDENT EQ COMMA
**   There is a tension between
**   (1) reducing production attributes -> attribute attributes
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 151:
decl -> STAR attributes decl . [ SEMICOLON RPAREN EQ COMMA ]
-- On SEMICOLON reduce production decl -> STAR attributes decl
-- On RPAREN reduce production decl -> STAR attributes decl
-- On EQ reduce production decl -> STAR attributes decl
-- On COMMA reduce production decl -> STAR attributes decl

State 152:
one_formal -> type_spec attributes decl . [ RPAREN COMMA ]
-- On RPAREN reduce production one_formal -> type_spec attributes decl
-- On COMMA reduce production one_formal -> type_spec attributes decl

State 153:
typename -> one_formal . [ RPAREN ]
-- On RPAREN reduce production typename -> one_formal

State 154:
expression -> LPAREN expression . RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RPAREN shift to state 155
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 155:
expression -> LPAREN expression RPAREN . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP_EQ reduce production expression -> LPAREN expression RPAREN
-- On SUP_SUP reduce production expression -> LPAREN expression RPAREN
-- On SUP_EQ reduce production expression -> LPAREN expression RPAREN
-- On SUP reduce production expression -> LPAREN expression RPAREN
-- On STAR_EQ reduce production expression -> LPAREN expression RPAREN
-- On STAR reduce production expression -> LPAREN expression RPAREN
-- On SLASH_EQ reduce production expression -> LPAREN expression RPAREN
-- On SLASH reduce production expression -> LPAREN expression RPAREN
-- On SEMICOLON reduce production expression -> LPAREN expression RPAREN
-- On RPAREN reduce production expression -> LPAREN expression RPAREN
-- On RBRACKET reduce production expression -> LPAREN expression RPAREN
-- On PLUS_EQ reduce production expression -> LPAREN expression RPAREN
-- On PLUS reduce production expression -> LPAREN expression RPAREN
-- On PIPE_EQ reduce production expression -> LPAREN expression RPAREN
-- On PIPE reduce production expression -> LPAREN expression RPAREN
-- On PERCENT_EQ reduce production expression -> LPAREN expression RPAREN
-- On PERCENT reduce production expression -> LPAREN expression RPAREN
-- On MINUS_EQ reduce production expression -> LPAREN expression RPAREN
-- On MINUS reduce production expression -> LPAREN expression RPAREN
-- On LPAREN reduce production expression -> LPAREN expression RPAREN
-- On INF_INF_EQ reduce production expression -> LPAREN expression RPAREN
-- On INF_INF reduce production expression -> LPAREN expression RPAREN
-- On INF_EQ reduce production expression -> LPAREN expression RPAREN
-- On INF reduce production expression -> LPAREN expression RPAREN
-- On EXCLAM_EQ reduce production expression -> LPAREN expression RPAREN
-- On EQ_EQ reduce production expression -> LPAREN expression RPAREN
-- On EQ reduce production expression -> LPAREN expression RPAREN
-- On COMMA reduce production expression -> LPAREN expression RPAREN
-- On CIRC_EQ reduce production expression -> LPAREN expression RPAREN
-- On CIRC reduce production expression -> LPAREN expression RPAREN
-- On ARROW reduce production expression -> LPAREN expression RPAREN
-- On ARG_b reduce production expression -> LPAREN expression RPAREN
-- On AND_EQ reduce production expression -> LPAREN expression RPAREN
-- On AND reduce production expression -> LPAREN expression RPAREN
-- On # reduce production expression -> LPAREN expression RPAREN
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> LPAREN expression RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 156:
expression -> ALIGNOF expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> ALIGNOF expression
-- On SUP_SUP reduce production expression -> ALIGNOF expression
-- On SUP_EQ reduce production expression -> ALIGNOF expression
-- On SUP reduce production expression -> ALIGNOF expression
-- On STAR_EQ reduce production expression -> ALIGNOF expression
-- On STAR reduce production expression -> ALIGNOF expression
-- On SLASH_EQ reduce production expression -> ALIGNOF expression
-- On SLASH reduce production expression -> ALIGNOF expression
-- On SEMICOLON reduce production expression -> ALIGNOF expression
-- On RPAREN reduce production expression -> ALIGNOF expression
-- On RBRACKET reduce production expression -> ALIGNOF expression
-- On PLUS_EQ reduce production expression -> ALIGNOF expression
-- On PLUS reduce production expression -> ALIGNOF expression
-- On PIPE_EQ reduce production expression -> ALIGNOF expression
-- On PIPE reduce production expression -> ALIGNOF expression
-- On PERCENT_EQ reduce production expression -> ALIGNOF expression
-- On PERCENT reduce production expression -> ALIGNOF expression
-- On MINUS_EQ reduce production expression -> ALIGNOF expression
-- On MINUS reduce production expression -> ALIGNOF expression
-- On LPAREN reduce production expression -> ALIGNOF expression
-- On INF_INF_EQ reduce production expression -> ALIGNOF expression
-- On INF_INF reduce production expression -> ALIGNOF expression
-- On INF_EQ reduce production expression -> ALIGNOF expression
-- On INF reduce production expression -> ALIGNOF expression
-- On EXCLAM_EQ reduce production expression -> ALIGNOF expression
-- On EQ_EQ reduce production expression -> ALIGNOF expression
-- On EQ reduce production expression -> ALIGNOF expression
-- On COMMA reduce production expression -> ALIGNOF expression
-- On CIRC_EQ reduce production expression -> ALIGNOF expression
-- On CIRC reduce production expression -> ALIGNOF expression
-- On ARG_b reduce production expression -> ALIGNOF expression
-- On AND_EQ reduce production expression -> ALIGNOF expression
-- On AND reduce production expression -> ALIGNOF expression
-- On # reduce production expression -> ALIGNOF expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> ALIGNOF expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 157:
expression -> AND expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> AND expression
-- On SUP_SUP reduce production expression -> AND expression
-- On SUP_EQ reduce production expression -> AND expression
-- On SUP reduce production expression -> AND expression
-- On STAR_EQ reduce production expression -> AND expression
-- On STAR reduce production expression -> AND expression
-- On SLASH_EQ reduce production expression -> AND expression
-- On SLASH reduce production expression -> AND expression
-- On SEMICOLON reduce production expression -> AND expression
-- On RPAREN reduce production expression -> AND expression
-- On RBRACKET reduce production expression -> AND expression
-- On PLUS_EQ reduce production expression -> AND expression
-- On PLUS reduce production expression -> AND expression
-- On PIPE_EQ reduce production expression -> AND expression
-- On PIPE reduce production expression -> AND expression
-- On PERCENT_EQ reduce production expression -> AND expression
-- On PERCENT reduce production expression -> AND expression
-- On MINUS_EQ reduce production expression -> AND expression
-- On MINUS reduce production expression -> AND expression
-- On LPAREN reduce production expression -> AND expression
-- On INF_INF_EQ reduce production expression -> AND expression
-- On INF_INF reduce production expression -> AND expression
-- On INF_EQ reduce production expression -> AND expression
-- On INF reduce production expression -> AND expression
-- On EXCLAM_EQ reduce production expression -> AND expression
-- On EQ_EQ reduce production expression -> AND expression
-- On EQ reduce production expression -> AND expression
-- On COMMA reduce production expression -> AND expression
-- On CIRC_EQ reduce production expression -> AND expression
-- On CIRC reduce production expression -> AND expression
-- On ARG_b reduce production expression -> AND expression
-- On AND_EQ reduce production expression -> AND expression
-- On AND reduce production expression -> AND expression
-- On # reduce production expression -> AND expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> AND expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 158:
expression -> EXCLAM expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> EXCLAM expression
-- On SUP_SUP reduce production expression -> EXCLAM expression
-- On SUP_EQ reduce production expression -> EXCLAM expression
-- On SUP reduce production expression -> EXCLAM expression
-- On STAR_EQ reduce production expression -> EXCLAM expression
-- On STAR reduce production expression -> EXCLAM expression
-- On SLASH_EQ reduce production expression -> EXCLAM expression
-- On SLASH reduce production expression -> EXCLAM expression
-- On SEMICOLON reduce production expression -> EXCLAM expression
-- On RPAREN reduce production expression -> EXCLAM expression
-- On RBRACKET reduce production expression -> EXCLAM expression
-- On PLUS_EQ reduce production expression -> EXCLAM expression
-- On PLUS reduce production expression -> EXCLAM expression
-- On PIPE_EQ reduce production expression -> EXCLAM expression
-- On PIPE reduce production expression -> EXCLAM expression
-- On PERCENT_EQ reduce production expression -> EXCLAM expression
-- On PERCENT reduce production expression -> EXCLAM expression
-- On MINUS_EQ reduce production expression -> EXCLAM expression
-- On MINUS reduce production expression -> EXCLAM expression
-- On LPAREN reduce production expression -> EXCLAM expression
-- On INF_INF_EQ reduce production expression -> EXCLAM expression
-- On INF_INF reduce production expression -> EXCLAM expression
-- On INF_EQ reduce production expression -> EXCLAM expression
-- On INF reduce production expression -> EXCLAM expression
-- On EXCLAM_EQ reduce production expression -> EXCLAM expression
-- On EQ_EQ reduce production expression -> EXCLAM expression
-- On EQ reduce production expression -> EXCLAM expression
-- On COMMA reduce production expression -> EXCLAM expression
-- On CIRC_EQ reduce production expression -> EXCLAM expression
-- On CIRC reduce production expression -> EXCLAM expression
-- On ARG_b reduce production expression -> EXCLAM expression
-- On AND_EQ reduce production expression -> EXCLAM expression
-- On AND reduce production expression -> EXCLAM expression
-- On # reduce production expression -> EXCLAM expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> EXCLAM expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 159:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
type_spec -> TYPEOF LPAREN expression . RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RPAREN shift to state 160
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 160:
type_spec -> TYPEOF LPAREN expression RPAREN . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
-- On VOLATILE reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On STAR reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On SEMICOLON reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On RPAREN reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On RESTRICT reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On LPAREN reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On LBRACKET reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On IDENT reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On EQ reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On CONST reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On COMMA reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On ATTRIBUTE reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On ARG_A reduce production type_spec -> TYPEOF LPAREN expression RPAREN
-- On # reduce production type_spec -> TYPEOF LPAREN expression RPAREN
** End-of-stream conflict on VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production type_spec -> TYPEOF LPAREN expression RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 161:
expression -> LPAREN typename . RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On RPAREN shift to state 162

State 162:
expression -> LPAREN typename RPAREN . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 100
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 163:
expression -> MINUS expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PERCENT shift to state 62
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> MINUS expression
-- On SUP_SUP reduce production expression -> MINUS expression
-- On SUP_EQ reduce production expression -> MINUS expression
-- On SUP reduce production expression -> MINUS expression
-- On STAR_EQ reduce production expression -> MINUS expression
-- On SLASH_EQ reduce production expression -> MINUS expression
-- On SEMICOLON reduce production expression -> MINUS expression
-- On RPAREN reduce production expression -> MINUS expression
-- On RBRACKET reduce production expression -> MINUS expression
-- On PLUS_EQ reduce production expression -> MINUS expression
-- On PLUS reduce production expression -> MINUS expression
-- On PIPE_EQ reduce production expression -> MINUS expression
-- On PIPE reduce production expression -> MINUS expression
-- On PERCENT_EQ reduce production expression -> MINUS expression
-- On MINUS_EQ reduce production expression -> MINUS expression
-- On MINUS reduce production expression -> MINUS expression
-- On LPAREN reduce production expression -> MINUS expression
-- On INF_INF_EQ reduce production expression -> MINUS expression
-- On INF_INF reduce production expression -> MINUS expression
-- On INF_EQ reduce production expression -> MINUS expression
-- On INF reduce production expression -> MINUS expression
-- On EXCLAM_EQ reduce production expression -> MINUS expression
-- On EQ_EQ reduce production expression -> MINUS expression
-- On EQ reduce production expression -> MINUS expression
-- On COMMA reduce production expression -> MINUS expression
-- On CIRC_EQ reduce production expression -> MINUS expression
-- On CIRC reduce production expression -> MINUS expression
-- On ARG_b reduce production expression -> MINUS expression
-- On AND_EQ reduce production expression -> MINUS expression
-- On AND reduce production expression -> MINUS expression
-- On # reduce production expression -> MINUS expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> MINUS expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 164:
expression -> PLUS expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PERCENT shift to state 62
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> PLUS expression
-- On SUP_SUP reduce production expression -> PLUS expression
-- On SUP_EQ reduce production expression -> PLUS expression
-- On SUP reduce production expression -> PLUS expression
-- On STAR_EQ reduce production expression -> PLUS expression
-- On SLASH_EQ reduce production expression -> PLUS expression
-- On SEMICOLON reduce production expression -> PLUS expression
-- On RPAREN reduce production expression -> PLUS expression
-- On RBRACKET reduce production expression -> PLUS expression
-- On PLUS_EQ reduce production expression -> PLUS expression
-- On PLUS reduce production expression -> PLUS expression
-- On PIPE_EQ reduce production expression -> PLUS expression
-- On PIPE reduce production expression -> PLUS expression
-- On PERCENT_EQ reduce production expression -> PLUS expression
-- On MINUS_EQ reduce production expression -> PLUS expression
-- On MINUS reduce production expression -> PLUS expression
-- On LPAREN reduce production expression -> PLUS expression
-- On INF_INF_EQ reduce production expression -> PLUS expression
-- On INF_INF reduce production expression -> PLUS expression
-- On INF_EQ reduce production expression -> PLUS expression
-- On INF reduce production expression -> PLUS expression
-- On EXCLAM_EQ reduce production expression -> PLUS expression
-- On EQ_EQ reduce production expression -> PLUS expression
-- On EQ reduce production expression -> PLUS expression
-- On COMMA reduce production expression -> PLUS expression
-- On CIRC_EQ reduce production expression -> PLUS expression
-- On CIRC reduce production expression -> PLUS expression
-- On ARG_b reduce production expression -> PLUS expression
-- On AND_EQ reduce production expression -> PLUS expression
-- On AND reduce production expression -> PLUS expression
-- On # reduce production expression -> PLUS expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> PLUS expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 165:
expression -> SIZEOF LPAREN . typename RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . expression RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . typename RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> LPAREN . STAR expression RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 32
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On INT shift to state 91
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CHAR shift to state 94
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_g shift to state 24
-- On ARG_f shift to state 97
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On typename shift to state 166
-- On type_spec shift to state 101
-- On one_formal shift to state 153
-- On lval shift to state 33
-- On expression shift to state 154
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 166:
expression -> SIZEOF LPAREN typename . RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename . RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On RPAREN shift to state 167

State 167:
expression -> SIZEOF LPAREN typename RPAREN . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename RPAREN . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On TILDE shift to state 1
-- On SIZEOF shift to state 3
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 100
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On SUP_SUP_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SUP_SUP reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SUP_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SUP reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On STAR_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On STAR reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SLASH_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SLASH reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SEMICOLON reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On RPAREN reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On RBRACKET reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PLUS_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PLUS reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PIPE_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PIPE reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PERCENT_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PERCENT reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On MINUS_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On MINUS reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On INF_INF_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On INF_INF reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On INF_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On INF reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On EXCLAM_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On EQ_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On COMMA reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On CIRC_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On CIRC reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On ARROW reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On ARG_b reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On AND_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On AND reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On # reduce production expression -> SIZEOF LPAREN typename RPAREN
** End-of-stream conflict on TILDE SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SIZEOF SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF IDENT EXCLAM_EQ EXCLAM EQ_EQ EQ CST_INT COMMA CIRC_EQ CIRC ARROW ARG_v ARG_u ARG_l ARG_g ARG_e ARG_d ARG_b AND_EQ AND ALIGNOF
**   There is a tension between
**   (1) reducing production expression -> SIZEOF LPAREN typename RPAREN
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 168:
expression -> SIZEOF expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> SIZEOF expression
-- On SUP_SUP reduce production expression -> SIZEOF expression
-- On SUP_EQ reduce production expression -> SIZEOF expression
-- On SUP reduce production expression -> SIZEOF expression
-- On STAR_EQ reduce production expression -> SIZEOF expression
-- On STAR reduce production expression -> SIZEOF expression
-- On SLASH_EQ reduce production expression -> SIZEOF expression
-- On SLASH reduce production expression -> SIZEOF expression
-- On SEMICOLON reduce production expression -> SIZEOF expression
-- On RPAREN reduce production expression -> SIZEOF expression
-- On RBRACKET reduce production expression -> SIZEOF expression
-- On PLUS_EQ reduce production expression -> SIZEOF expression
-- On PLUS reduce production expression -> SIZEOF expression
-- On PIPE_EQ reduce production expression -> SIZEOF expression
-- On PIPE reduce production expression -> SIZEOF expression
-- On PERCENT_EQ reduce production expression -> SIZEOF expression
-- On PERCENT reduce production expression -> SIZEOF expression
-- On MINUS_EQ reduce production expression -> SIZEOF expression
-- On MINUS reduce production expression -> SIZEOF expression
-- On LPAREN reduce production expression -> SIZEOF expression
-- On INF_INF_EQ reduce production expression -> SIZEOF expression
-- On INF_INF reduce production expression -> SIZEOF expression
-- On INF_EQ reduce production expression -> SIZEOF expression
-- On INF reduce production expression -> SIZEOF expression
-- On EXCLAM_EQ reduce production expression -> SIZEOF expression
-- On EQ_EQ reduce production expression -> SIZEOF expression
-- On EQ reduce production expression -> SIZEOF expression
-- On COMMA reduce production expression -> SIZEOF expression
-- On CIRC_EQ reduce production expression -> SIZEOF expression
-- On CIRC reduce production expression -> SIZEOF expression
-- On ARG_b reduce production expression -> SIZEOF expression
-- On AND_EQ reduce production expression -> SIZEOF expression
-- On AND reduce production expression -> SIZEOF expression
-- On # reduce production expression -> SIZEOF expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> SIZEOF expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 169:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> STAR expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production lval -> STAR expression
-- On SUP_SUP reduce production lval -> STAR expression
-- On SUP_EQ reduce production lval -> STAR expression
-- On SUP reduce production lval -> STAR expression
-- On STAR_EQ reduce production lval -> STAR expression
-- On STAR reduce production lval -> STAR expression
-- On SLASH_EQ reduce production lval -> STAR expression
-- On SLASH reduce production lval -> STAR expression
-- On SEMICOLON reduce production lval -> STAR expression
-- On RPAREN reduce production lval -> STAR expression
-- On RBRACKET reduce production lval -> STAR expression
-- On PLUS_EQ reduce production lval -> STAR expression
-- On PLUS reduce production lval -> STAR expression
-- On PIPE_EQ reduce production lval -> STAR expression
-- On PIPE reduce production lval -> STAR expression
-- On PERCENT_EQ reduce production lval -> STAR expression
-- On PERCENT reduce production lval -> STAR expression
-- On MINUS_EQ reduce production lval -> STAR expression
-- On MINUS reduce production lval -> STAR expression
-- On LPAREN reduce production lval -> STAR expression
-- On INF_INF_EQ reduce production lval -> STAR expression
-- On INF_INF reduce production lval -> STAR expression
-- On INF_EQ reduce production lval -> STAR expression
-- On INF reduce production lval -> STAR expression
-- On EXCLAM_EQ reduce production lval -> STAR expression
-- On EQ_EQ reduce production lval -> STAR expression
-- On EQ reduce production lval -> STAR expression
-- On COMMA reduce production lval -> STAR expression
-- On CIRC_EQ reduce production lval -> STAR expression
-- On CIRC reduce production lval -> STAR expression
-- On ARG_b reduce production lval -> STAR expression
-- On AND_EQ reduce production lval -> STAR expression
-- On AND reduce production lval -> STAR expression
-- On # reduce production lval -> STAR expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production lval -> STAR expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 170:
expression -> TILDE expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On ARROW shift to state 42
-- On argb shift to state 49
-- On SUP_SUP_EQ reduce production expression -> TILDE expression
-- On SUP_SUP reduce production expression -> TILDE expression
-- On SUP_EQ reduce production expression -> TILDE expression
-- On SUP reduce production expression -> TILDE expression
-- On STAR_EQ reduce production expression -> TILDE expression
-- On STAR reduce production expression -> TILDE expression
-- On SLASH_EQ reduce production expression -> TILDE expression
-- On SLASH reduce production expression -> TILDE expression
-- On SEMICOLON reduce production expression -> TILDE expression
-- On RPAREN reduce production expression -> TILDE expression
-- On RBRACKET reduce production expression -> TILDE expression
-- On PLUS_EQ reduce production expression -> TILDE expression
-- On PLUS reduce production expression -> TILDE expression
-- On PIPE_EQ reduce production expression -> TILDE expression
-- On PIPE reduce production expression -> TILDE expression
-- On PERCENT_EQ reduce production expression -> TILDE expression
-- On PERCENT reduce production expression -> TILDE expression
-- On MINUS_EQ reduce production expression -> TILDE expression
-- On MINUS reduce production expression -> TILDE expression
-- On LPAREN reduce production expression -> TILDE expression
-- On INF_INF_EQ reduce production expression -> TILDE expression
-- On INF_INF reduce production expression -> TILDE expression
-- On INF_EQ reduce production expression -> TILDE expression
-- On INF reduce production expression -> TILDE expression
-- On EXCLAM_EQ reduce production expression -> TILDE expression
-- On EQ_EQ reduce production expression -> TILDE expression
-- On EQ reduce production expression -> TILDE expression
-- On COMMA reduce production expression -> TILDE expression
-- On CIRC_EQ reduce production expression -> TILDE expression
-- On CIRC reduce production expression -> TILDE expression
-- On ARG_b reduce production expression -> TILDE expression
-- On AND_EQ reduce production expression -> TILDE expression
-- On AND reduce production expression -> TILDE expression
-- On # reduce production expression -> TILDE expression
** End-of-stream conflict on SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND
**   There is a tension between
**   (1) reducing production expression -> TILDE expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 171:
expression' -> expression . [ # ]
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
-- On # accept expression
** End-of-stream conflict on SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND
**   There is a tension between
**   (1) accepting expression
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 172:
instr' -> . instr [ # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 176
-- On instr shift to state 224
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226

State 173:
arglo -> ARG_lo . [ TILDE STAR SIZEOF PLUS MINUS LPAREN IDENT EXCLAM CST_INT ARG_v ARG_u ARG_l ARG_g ARG_e ARG_d AND ALIGNOF ]
-- On TILDE reduce production arglo -> ARG_lo
-- On STAR reduce production arglo -> ARG_lo
-- On SIZEOF reduce production arglo -> ARG_lo
-- On PLUS reduce production arglo -> ARG_lo
-- On MINUS reduce production arglo -> ARG_lo
-- On LPAREN reduce production arglo -> ARG_lo
-- On IDENT reduce production arglo -> ARG_lo
-- On EXCLAM reduce production arglo -> ARG_lo
-- On CST_INT reduce production arglo -> ARG_lo
-- On ARG_v reduce production arglo -> ARG_lo
-- On ARG_u reduce production arglo -> ARG_lo
-- On ARG_l reduce production arglo -> ARG_lo
-- On ARG_g reduce production arglo -> ARG_lo
-- On ARG_e reduce production arglo -> ARG_lo
-- On ARG_d reduce production arglo -> ARG_lo
-- On AND reduce production arglo -> ARG_lo
-- On ALIGNOF reduce production arglo -> ARG_lo

State 174:
instr -> ARG_i . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SEMICOLON shift to state 175

State 175:
instr -> ARG_i SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> ARG_i SEMICOLON
-- On VOID reduce production instr -> ARG_i SEMICOLON
-- On UNSIGNED reduce production instr -> ARG_i SEMICOLON
-- On UNION reduce production instr -> ARG_i SEMICOLON
-- On TYPEOF reduce production instr -> ARG_i SEMICOLON
-- On TILDE reduce production instr -> ARG_i SEMICOLON
-- On STRUCT reduce production instr -> ARG_i SEMICOLON
-- On STAR reduce production instr -> ARG_i SEMICOLON
-- On SIZEOF reduce production instr -> ARG_i SEMICOLON
-- On SHORT reduce production instr -> ARG_i SEMICOLON
-- On RETURN reduce production instr -> ARG_i SEMICOLON
-- On RBRACE reduce production instr -> ARG_i SEMICOLON
-- On PLUS reduce production instr -> ARG_i SEMICOLON
-- On MINUS reduce production instr -> ARG_i SEMICOLON
-- On LPAREN reduce production instr -> ARG_i SEMICOLON
-- On LONG reduce production instr -> ARG_i SEMICOLON
-- On LBRACE reduce production instr -> ARG_i SEMICOLON
-- On INT reduce production instr -> ARG_i SEMICOLON
-- On IF reduce production instr -> ARG_i SEMICOLON
-- On IDENT reduce production instr -> ARG_i SEMICOLON
-- On FLOAT reduce production instr -> ARG_i SEMICOLON
-- On EXCLAM reduce production instr -> ARG_i SEMICOLON
-- On ELSE reduce production instr -> ARG_i SEMICOLON
-- On DOUBLE reduce production instr -> ARG_i SEMICOLON
-- On CST_INT reduce production instr -> ARG_i SEMICOLON
-- On CONTINUE reduce production instr -> ARG_i SEMICOLON
-- On CHAR reduce production instr -> ARG_i SEMICOLON
-- On BREAK reduce production instr -> ARG_i SEMICOLON
-- On ARG_v reduce production instr -> ARG_i SEMICOLON
-- On ARG_u reduce production instr -> ARG_i SEMICOLON
-- On ARG_t reduce production instr -> ARG_i SEMICOLON
-- On ARG_s reduce production instr -> ARG_i SEMICOLON
-- On ARG_lo reduce production instr -> ARG_i SEMICOLON
-- On ARG_l reduce production instr -> ARG_i SEMICOLON
-- On ARG_k reduce production instr -> ARG_i SEMICOLON
-- On ARG_i reduce production instr -> ARG_i SEMICOLON
-- On ARG_g reduce production instr -> ARG_i SEMICOLON
-- On ARG_e reduce production instr -> ARG_i SEMICOLON
-- On ARG_d reduce production instr -> ARG_i SEMICOLON
-- On ARG_S reduce production instr -> ARG_i SEMICOLON
-- On ARG_I reduce production instr -> ARG_i SEMICOLON
-- On AND reduce production instr -> ARG_i SEMICOLON
-- On ALIGNOF reduce production instr -> ARG_i SEMICOLON
-- On # reduce production instr -> ARG_i SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> ARG_i SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 176:
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval . EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . PLUS_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . MINUS_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . STAR_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . SLASH_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . PERCENT_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . AND_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . PIPE_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . CIRC_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . INF_INF_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . SUP_SUP_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . EQ lval LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SUP_SUP_EQ shift to state 177
-- On STAR_EQ shift to state 180
-- On SLASH_EQ shift to state 183
-- On PLUS_EQ shift to state 186
-- On PIPE_EQ shift to state 189
-- On PERCENT_EQ shift to state 192
-- On MINUS_EQ shift to state 195
-- On LPAREN shift to state 198
-- On INF_INF_EQ shift to state 207
-- On EQ shift to state 210
-- On CIRC_EQ shift to state 218
-- On AND_EQ shift to state 221
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND reduce production expression -> lval

State 177:
instr -> lval SUP_SUP_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 178
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 178:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval SUP_SUP_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 179
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 179:
instr -> lval SUP_SUP_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On INT reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On IF reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On AND reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
-- On # reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval SUP_SUP_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 180:
instr -> lval STAR_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 181
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 181:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval STAR_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 182
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 182:
instr -> lval STAR_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On INT reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On IF reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On AND reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval STAR_EQ expression SEMICOLON
-- On # reduce production instr -> lval STAR_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval STAR_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 183:
instr -> lval SLASH_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 184
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 184:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval SLASH_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 185
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 185:
instr -> lval SLASH_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On INT reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On IF reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On AND reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval SLASH_EQ expression SEMICOLON
-- On # reduce production instr -> lval SLASH_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval SLASH_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 186:
instr -> lval PLUS_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 187
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 187:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval PLUS_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 188
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 188:
instr -> lval PLUS_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On INT reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On IF reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On AND reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval PLUS_EQ expression SEMICOLON
-- On # reduce production instr -> lval PLUS_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval PLUS_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 189:
instr -> lval PIPE_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 190
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 190:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval PIPE_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 191
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 191:
instr -> lval PIPE_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On INT reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On IF reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On AND reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval PIPE_EQ expression SEMICOLON
-- On # reduce production instr -> lval PIPE_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval PIPE_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 192:
instr -> lval PERCENT_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 193
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 193:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval PERCENT_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 194
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 194:
instr -> lval PERCENT_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On INT reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On IF reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On AND reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval PERCENT_EQ expression SEMICOLON
-- On # reduce production instr -> lval PERCENT_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval PERCENT_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 195:
instr -> lval MINUS_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 196
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 196:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval MINUS_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 197
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 197:
instr -> lval MINUS_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On INT reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On IF reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On AND reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval MINUS_EQ expression SEMICOLON
-- On # reduce production instr -> lval MINUS_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval MINUS_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 198:
instr -> lval LPAREN . arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 203
-- On arguments shift to state 204
-- On argu shift to state 58
-- On RPAREN reduce production arguments -> 

State 199:
arguments_ne -> ARG_E . [ RPAREN ]
-- On RPAREN reduce production arguments_ne -> ARG_E

State 200:
arguments_ne -> expression . [ RPAREN ]
arguments_ne -> expression . COMMA arguments_ne [ RPAREN ]
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On COMMA shift to state 201
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
-- On RPAREN reduce production arguments_ne -> expression

State 201:
arguments_ne -> expression COMMA . arguments_ne [ RPAREN ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 202
-- On argu shift to state 58

State 202:
arguments_ne -> expression COMMA arguments_ne . [ RPAREN ]
-- On RPAREN reduce production arguments_ne -> expression COMMA arguments_ne

State 203:
arguments -> arguments_ne . [ RPAREN ]
-- On RPAREN reduce production arguments -> arguments_ne

State 204:
instr -> lval LPAREN arguments . RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On RPAREN shift to state 205

State 205:
instr -> lval LPAREN arguments RPAREN . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SEMICOLON shift to state 206

State 206:
instr -> lval LPAREN arguments RPAREN SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On VOID reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On UNSIGNED reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On UNION reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On TYPEOF reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On TILDE reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On STRUCT reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On STAR reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On SIZEOF reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On SHORT reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On RETURN reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On RBRACE reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On PLUS reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On MINUS reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On LPAREN reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On LONG reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On LBRACE reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On INT reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On IF reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On IDENT reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On FLOAT reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On EXCLAM reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ELSE reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On DOUBLE reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On CST_INT reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On CONTINUE reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On CHAR reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On BREAK reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_v reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_u reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_t reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_s reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_lo reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_l reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_k reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_i reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_g reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_e reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_d reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_S reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_I reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On AND reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On ALIGNOF reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
-- On # reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval LPAREN arguments RPAREN SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 207:
instr -> lval INF_INF_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 208
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 208:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval INF_INF_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 209
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 209:
instr -> lval INF_INF_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On INT reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On IF reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On AND reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval INF_INF_EQ expression SEMICOLON
-- On # reduce production instr -> lval INF_INF_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval INF_INF_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 210:
instr -> lval EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval EQ . lval LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 211
-- On expression shift to state 216
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 211:
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval EQ lval . LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On LPAREN shift to state 212
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On SEMICOLON reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND reduce production expression -> lval

State 212:
instr -> lval EQ lval LPAREN . arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 203
-- On arguments shift to state 213
-- On argu shift to state 58
-- On RPAREN reduce production arguments -> 

State 213:
instr -> lval EQ lval LPAREN arguments . RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On RPAREN shift to state 214

State 214:
instr -> lval EQ lval LPAREN arguments RPAREN . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SEMICOLON shift to state 215

State 215:
instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On VOID reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On UNSIGNED reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On UNION reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On TYPEOF reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On TILDE reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On STRUCT reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On STAR reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On SIZEOF reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On SHORT reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On RETURN reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On RBRACE reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On PLUS reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On MINUS reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On LPAREN reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On LONG reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On LBRACE reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On INT reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On IF reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On IDENT reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On FLOAT reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On EXCLAM reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ELSE reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On DOUBLE reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On CST_INT reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On CONTINUE reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On CHAR reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On BREAK reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_v reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_u reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_t reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_s reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_lo reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_l reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_k reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_i reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_g reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_e reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_d reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_S reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_I reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On AND reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On ALIGNOF reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
-- On # reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 216:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS LPAREN INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 217
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 217:
instr -> lval EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval EQ expression SEMICOLON
-- On VOID reduce production instr -> lval EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval EQ expression SEMICOLON
-- On UNION reduce production instr -> lval EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval EQ expression SEMICOLON
-- On STAR reduce production instr -> lval EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval EQ expression SEMICOLON
-- On LONG reduce production instr -> lval EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval EQ expression SEMICOLON
-- On INT reduce production instr -> lval EQ expression SEMICOLON
-- On IF reduce production instr -> lval EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval EQ expression SEMICOLON
-- On AND reduce production instr -> lval EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval EQ expression SEMICOLON
-- On # reduce production instr -> lval EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 218:
instr -> lval CIRC_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 219
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 219:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval CIRC_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 220
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 220:
instr -> lval CIRC_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On INT reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On IF reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On AND reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval CIRC_EQ expression SEMICOLON
-- On # reduce production instr -> lval CIRC_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval CIRC_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 221:
instr -> lval AND_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 222
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 222:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval AND_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 223
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 223:
instr -> lval AND_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> lval AND_EQ expression SEMICOLON
-- On VOID reduce production instr -> lval AND_EQ expression SEMICOLON
-- On UNSIGNED reduce production instr -> lval AND_EQ expression SEMICOLON
-- On UNION reduce production instr -> lval AND_EQ expression SEMICOLON
-- On TYPEOF reduce production instr -> lval AND_EQ expression SEMICOLON
-- On TILDE reduce production instr -> lval AND_EQ expression SEMICOLON
-- On STRUCT reduce production instr -> lval AND_EQ expression SEMICOLON
-- On STAR reduce production instr -> lval AND_EQ expression SEMICOLON
-- On SIZEOF reduce production instr -> lval AND_EQ expression SEMICOLON
-- On SHORT reduce production instr -> lval AND_EQ expression SEMICOLON
-- On RETURN reduce production instr -> lval AND_EQ expression SEMICOLON
-- On RBRACE reduce production instr -> lval AND_EQ expression SEMICOLON
-- On PLUS reduce production instr -> lval AND_EQ expression SEMICOLON
-- On MINUS reduce production instr -> lval AND_EQ expression SEMICOLON
-- On LPAREN reduce production instr -> lval AND_EQ expression SEMICOLON
-- On LONG reduce production instr -> lval AND_EQ expression SEMICOLON
-- On LBRACE reduce production instr -> lval AND_EQ expression SEMICOLON
-- On INT reduce production instr -> lval AND_EQ expression SEMICOLON
-- On IF reduce production instr -> lval AND_EQ expression SEMICOLON
-- On IDENT reduce production instr -> lval AND_EQ expression SEMICOLON
-- On FLOAT reduce production instr -> lval AND_EQ expression SEMICOLON
-- On EXCLAM reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ELSE reduce production instr -> lval AND_EQ expression SEMICOLON
-- On DOUBLE reduce production instr -> lval AND_EQ expression SEMICOLON
-- On CST_INT reduce production instr -> lval AND_EQ expression SEMICOLON
-- On CONTINUE reduce production instr -> lval AND_EQ expression SEMICOLON
-- On CHAR reduce production instr -> lval AND_EQ expression SEMICOLON
-- On BREAK reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_v reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_u reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_t reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_s reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_lo reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_l reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_k reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_i reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_g reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_e reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_d reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_S reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ARG_I reduce production instr -> lval AND_EQ expression SEMICOLON
-- On AND reduce production instr -> lval AND_EQ expression SEMICOLON
-- On ALIGNOF reduce production instr -> lval AND_EQ expression SEMICOLON
-- On # reduce production instr -> lval AND_EQ expression SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> lval AND_EQ expression SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 224:
instr' -> instr . [ # ]
-- On # accept instr

State 225:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 226:
instr -> arglo . lval LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 227
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 227:
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> arglo lval . LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On LPAREN shift to state 228
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND reduce production expression -> lval

State 228:
instr -> arglo lval LPAREN . arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 203
-- On arguments shift to state 229
-- On argu shift to state 58
-- On RPAREN reduce production arguments -> 

State 229:
instr -> arglo lval LPAREN arguments . RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On RPAREN shift to state 230

State 230:
instr -> arglo lval LPAREN arguments RPAREN . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SEMICOLON shift to state 231

State 231:
instr -> arglo lval LPAREN arguments RPAREN SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On VOID reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On UNSIGNED reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On UNION reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On TYPEOF reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On TILDE reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On STRUCT reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On STAR reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On SIZEOF reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On SHORT reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On RETURN reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On RBRACE reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On PLUS reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On MINUS reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On LPAREN reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On LONG reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On LBRACE reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On INT reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On IF reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On IDENT reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On FLOAT reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On EXCLAM reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ELSE reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On DOUBLE reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On CST_INT reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On CONTINUE reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On CHAR reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On BREAK reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_v reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_u reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_t reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_s reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_lo reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_l reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_k reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_i reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_g reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_e reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_d reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_S reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ARG_I reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On AND reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On ALIGNOF reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
-- On # reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 232:
lval' -> . lval [ # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 233
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 233:
lval' -> lval . [ # ]
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND reduce production expression -> lval
-- On # accept lval
** End-of-stream conflict on SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND
**   There is a tension between
**   (1) accepting lval
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 234:
offset' -> . offset [ # ]
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 235
-- On # reduce production offset -> 
** End-of-stream conflict on LBRACKET DOT ARG_o
**   There is a tension between
**   (1) reducing production offset -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 235:
offset' -> offset . [ # ]
-- On # accept offset

State 236:
stmt' -> . stmt [ # ]
-- On WHILE shift to state 237
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LBRACE shift to state 244
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On stmt shift to state 279
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226

State 237:
stmt -> WHILE . LPAREN expression RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On LPAREN shift to state 238

State 238:
stmt -> WHILE LPAREN . expression RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 239
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 239:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
stmt -> WHILE LPAREN expression . RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RPAREN shift to state 240
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 240:
stmt -> WHILE LPAREN expression RPAREN . stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE shift to state 237
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LBRACE shift to state 244
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On stmt shift to state 278
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226

State 241:
stmt -> RETURN . exp_opt SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_eo shift to state 133
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 134
-- On exp_opt shift to state 242
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On SEMICOLON reduce production exp_opt -> 

State 242:
stmt -> RETURN exp_opt . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SEMICOLON shift to state 243

State 243:
stmt -> RETURN exp_opt SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production stmt -> RETURN exp_opt SEMICOLON
-- On VOID reduce production stmt -> RETURN exp_opt SEMICOLON
-- On UNSIGNED reduce production stmt -> RETURN exp_opt SEMICOLON
-- On UNION reduce production stmt -> RETURN exp_opt SEMICOLON
-- On TYPEOF reduce production stmt -> RETURN exp_opt SEMICOLON
-- On TILDE reduce production stmt -> RETURN exp_opt SEMICOLON
-- On STRUCT reduce production stmt -> RETURN exp_opt SEMICOLON
-- On STAR reduce production stmt -> RETURN exp_opt SEMICOLON
-- On SIZEOF reduce production stmt -> RETURN exp_opt SEMICOLON
-- On SHORT reduce production stmt -> RETURN exp_opt SEMICOLON
-- On RETURN reduce production stmt -> RETURN exp_opt SEMICOLON
-- On RBRACE reduce production stmt -> RETURN exp_opt SEMICOLON
-- On PLUS reduce production stmt -> RETURN exp_opt SEMICOLON
-- On MINUS reduce production stmt -> RETURN exp_opt SEMICOLON
-- On LPAREN reduce production stmt -> RETURN exp_opt SEMICOLON
-- On LONG reduce production stmt -> RETURN exp_opt SEMICOLON
-- On LBRACE reduce production stmt -> RETURN exp_opt SEMICOLON
-- On INT reduce production stmt -> RETURN exp_opt SEMICOLON
-- On IF reduce production stmt -> RETURN exp_opt SEMICOLON
-- On IDENT reduce production stmt -> RETURN exp_opt SEMICOLON
-- On FLOAT reduce production stmt -> RETURN exp_opt SEMICOLON
-- On EXCLAM reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ELSE reduce production stmt -> RETURN exp_opt SEMICOLON
-- On DOUBLE reduce production stmt -> RETURN exp_opt SEMICOLON
-- On CST_INT reduce production stmt -> RETURN exp_opt SEMICOLON
-- On CONTINUE reduce production stmt -> RETURN exp_opt SEMICOLON
-- On CHAR reduce production stmt -> RETURN exp_opt SEMICOLON
-- On BREAK reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_v reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_u reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_t reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_s reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_lo reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_l reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_k reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_i reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_g reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_e reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_d reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_S reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ARG_I reduce production stmt -> RETURN exp_opt SEMICOLON
-- On AND reduce production stmt -> RETURN exp_opt SEMICOLON
-- On ALIGNOF reduce production stmt -> RETURN exp_opt SEMICOLON
-- On # reduce production stmt -> RETURN exp_opt SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt -> RETURN exp_opt SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 244:
stmt -> LBRACE . stmt_list RBRACE [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 261
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 262
-- On stmt_list shift to state 276
-- On stmt shift to state 274
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
-- On RBRACE reduce production stmt_list -> 

State 245:
stmt -> IF . LPAREN expression RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF . LPAREN expression RPAREN stmt ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On LPAREN shift to state 246

State 246:
stmt -> IF LPAREN . expression RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF LPAREN . expression RPAREN stmt ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 247
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 247:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
stmt -> IF LPAREN expression . RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF LPAREN expression . RPAREN stmt ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RPAREN shift to state 248
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49

State 248:
stmt -> IF LPAREN expression RPAREN . stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF LPAREN expression RPAREN . stmt ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE shift to state 237
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LBRACE shift to state 244
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On stmt shift to state 255
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226

State 249:
stmt -> CONTINUE . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SEMICOLON shift to state 250

State 250:
stmt -> CONTINUE SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production stmt -> CONTINUE SEMICOLON
-- On VOID reduce production stmt -> CONTINUE SEMICOLON
-- On UNSIGNED reduce production stmt -> CONTINUE SEMICOLON
-- On UNION reduce production stmt -> CONTINUE SEMICOLON
-- On TYPEOF reduce production stmt -> CONTINUE SEMICOLON
-- On TILDE reduce production stmt -> CONTINUE SEMICOLON
-- On STRUCT reduce production stmt -> CONTINUE SEMICOLON
-- On STAR reduce production stmt -> CONTINUE SEMICOLON
-- On SIZEOF reduce production stmt -> CONTINUE SEMICOLON
-- On SHORT reduce production stmt -> CONTINUE SEMICOLON
-- On RETURN reduce production stmt -> CONTINUE SEMICOLON
-- On RBRACE reduce production stmt -> CONTINUE SEMICOLON
-- On PLUS reduce production stmt -> CONTINUE SEMICOLON
-- On MINUS reduce production stmt -> CONTINUE SEMICOLON
-- On LPAREN reduce production stmt -> CONTINUE SEMICOLON
-- On LONG reduce production stmt -> CONTINUE SEMICOLON
-- On LBRACE reduce production stmt -> CONTINUE SEMICOLON
-- On INT reduce production stmt -> CONTINUE SEMICOLON
-- On IF reduce production stmt -> CONTINUE SEMICOLON
-- On IDENT reduce production stmt -> CONTINUE SEMICOLON
-- On FLOAT reduce production stmt -> CONTINUE SEMICOLON
-- On EXCLAM reduce production stmt -> CONTINUE SEMICOLON
-- On ELSE reduce production stmt -> CONTINUE SEMICOLON
-- On DOUBLE reduce production stmt -> CONTINUE SEMICOLON
-- On CST_INT reduce production stmt -> CONTINUE SEMICOLON
-- On CONTINUE reduce production stmt -> CONTINUE SEMICOLON
-- On CHAR reduce production stmt -> CONTINUE SEMICOLON
-- On BREAK reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_v reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_u reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_t reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_s reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_lo reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_l reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_k reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_i reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_g reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_e reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_d reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_S reduce production stmt -> CONTINUE SEMICOLON
-- On ARG_I reduce production stmt -> CONTINUE SEMICOLON
-- On AND reduce production stmt -> CONTINUE SEMICOLON
-- On ALIGNOF reduce production stmt -> CONTINUE SEMICOLON
-- On # reduce production stmt -> CONTINUE SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt -> CONTINUE SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 251:
stmt -> BREAK . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On SEMICOLON shift to state 252

State 252:
stmt -> BREAK SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production stmt -> BREAK SEMICOLON
-- On VOID reduce production stmt -> BREAK SEMICOLON
-- On UNSIGNED reduce production stmt -> BREAK SEMICOLON
-- On UNION reduce production stmt -> BREAK SEMICOLON
-- On TYPEOF reduce production stmt -> BREAK SEMICOLON
-- On TILDE reduce production stmt -> BREAK SEMICOLON
-- On STRUCT reduce production stmt -> BREAK SEMICOLON
-- On STAR reduce production stmt -> BREAK SEMICOLON
-- On SIZEOF reduce production stmt -> BREAK SEMICOLON
-- On SHORT reduce production stmt -> BREAK SEMICOLON
-- On RETURN reduce production stmt -> BREAK SEMICOLON
-- On RBRACE reduce production stmt -> BREAK SEMICOLON
-- On PLUS reduce production stmt -> BREAK SEMICOLON
-- On MINUS reduce production stmt -> BREAK SEMICOLON
-- On LPAREN reduce production stmt -> BREAK SEMICOLON
-- On LONG reduce production stmt -> BREAK SEMICOLON
-- On LBRACE reduce production stmt -> BREAK SEMICOLON
-- On INT reduce production stmt -> BREAK SEMICOLON
-- On IF reduce production stmt -> BREAK SEMICOLON
-- On IDENT reduce production stmt -> BREAK SEMICOLON
-- On FLOAT reduce production stmt -> BREAK SEMICOLON
-- On EXCLAM reduce production stmt -> BREAK SEMICOLON
-- On ELSE reduce production stmt -> BREAK SEMICOLON
-- On DOUBLE reduce production stmt -> BREAK SEMICOLON
-- On CST_INT reduce production stmt -> BREAK SEMICOLON
-- On CONTINUE reduce production stmt -> BREAK SEMICOLON
-- On CHAR reduce production stmt -> BREAK SEMICOLON
-- On BREAK reduce production stmt -> BREAK SEMICOLON
-- On ARG_v reduce production stmt -> BREAK SEMICOLON
-- On ARG_u reduce production stmt -> BREAK SEMICOLON
-- On ARG_t reduce production stmt -> BREAK SEMICOLON
-- On ARG_s reduce production stmt -> BREAK SEMICOLON
-- On ARG_lo reduce production stmt -> BREAK SEMICOLON
-- On ARG_l reduce production stmt -> BREAK SEMICOLON
-- On ARG_k reduce production stmt -> BREAK SEMICOLON
-- On ARG_i reduce production stmt -> BREAK SEMICOLON
-- On ARG_g reduce production stmt -> BREAK SEMICOLON
-- On ARG_e reduce production stmt -> BREAK SEMICOLON
-- On ARG_d reduce production stmt -> BREAK SEMICOLON
-- On ARG_S reduce production stmt -> BREAK SEMICOLON
-- On ARG_I reduce production stmt -> BREAK SEMICOLON
-- On AND reduce production stmt -> BREAK SEMICOLON
-- On ALIGNOF reduce production stmt -> BREAK SEMICOLON
-- On # reduce production stmt -> BREAK SEMICOLON
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt -> BREAK SEMICOLON
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 253:
stmt -> ARG_s . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production stmt -> ARG_s
-- On VOID reduce production stmt -> ARG_s
-- On UNSIGNED reduce production stmt -> ARG_s
-- On UNION reduce production stmt -> ARG_s
-- On TYPEOF reduce production stmt -> ARG_s
-- On TILDE reduce production stmt -> ARG_s
-- On STRUCT reduce production stmt -> ARG_s
-- On STAR reduce production stmt -> ARG_s
-- On SIZEOF reduce production stmt -> ARG_s
-- On SHORT reduce production stmt -> ARG_s
-- On RETURN reduce production stmt -> ARG_s
-- On RBRACE reduce production stmt -> ARG_s
-- On PLUS reduce production stmt -> ARG_s
-- On MINUS reduce production stmt -> ARG_s
-- On LPAREN reduce production stmt -> ARG_s
-- On LONG reduce production stmt -> ARG_s
-- On LBRACE reduce production stmt -> ARG_s
-- On INT reduce production stmt -> ARG_s
-- On IF reduce production stmt -> ARG_s
-- On IDENT reduce production stmt -> ARG_s
-- On FLOAT reduce production stmt -> ARG_s
-- On EXCLAM reduce production stmt -> ARG_s
-- On ELSE reduce production stmt -> ARG_s
-- On DOUBLE reduce production stmt -> ARG_s
-- On CST_INT reduce production stmt -> ARG_s
-- On CONTINUE reduce production stmt -> ARG_s
-- On CHAR reduce production stmt -> ARG_s
-- On BREAK reduce production stmt -> ARG_s
-- On ARG_v reduce production stmt -> ARG_s
-- On ARG_u reduce production stmt -> ARG_s
-- On ARG_t reduce production stmt -> ARG_s
-- On ARG_s reduce production stmt -> ARG_s
-- On ARG_lo reduce production stmt -> ARG_s
-- On ARG_l reduce production stmt -> ARG_s
-- On ARG_k reduce production stmt -> ARG_s
-- On ARG_i reduce production stmt -> ARG_s
-- On ARG_g reduce production stmt -> ARG_s
-- On ARG_e reduce production stmt -> ARG_s
-- On ARG_d reduce production stmt -> ARG_s
-- On ARG_S reduce production stmt -> ARG_s
-- On ARG_I reduce production stmt -> ARG_s
-- On AND reduce production stmt -> ARG_s
-- On ALIGNOF reduce production stmt -> ARG_s
-- On # reduce production stmt -> ARG_s
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt -> ARG_s
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 254:
instr_list -> ARG_I . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr_list -> ARG_I
-- On VOID reduce production instr_list -> ARG_I
-- On UNSIGNED reduce production instr_list -> ARG_I
-- On UNION reduce production instr_list -> ARG_I
-- On TYPEOF reduce production instr_list -> ARG_I
-- On TILDE reduce production instr_list -> ARG_I
-- On STRUCT reduce production instr_list -> ARG_I
-- On STAR reduce production instr_list -> ARG_I
-- On SIZEOF reduce production instr_list -> ARG_I
-- On SHORT reduce production instr_list -> ARG_I
-- On RETURN reduce production instr_list -> ARG_I
-- On RBRACE reduce production instr_list -> ARG_I
-- On PLUS reduce production instr_list -> ARG_I
-- On MINUS reduce production instr_list -> ARG_I
-- On LPAREN reduce production instr_list -> ARG_I
-- On LONG reduce production instr_list -> ARG_I
-- On LBRACE reduce production instr_list -> ARG_I
-- On INT reduce production instr_list -> ARG_I
-- On IF reduce production instr_list -> ARG_I
-- On IDENT reduce production instr_list -> ARG_I
-- On FLOAT reduce production instr_list -> ARG_I
-- On EXCLAM reduce production instr_list -> ARG_I
-- On ELSE reduce production instr_list -> ARG_I
-- On DOUBLE reduce production instr_list -> ARG_I
-- On CST_INT reduce production instr_list -> ARG_I
-- On CONTINUE reduce production instr_list -> ARG_I
-- On CHAR reduce production instr_list -> ARG_I
-- On BREAK reduce production instr_list -> ARG_I
-- On ARG_v reduce production instr_list -> ARG_I
-- On ARG_u reduce production instr_list -> ARG_I
-- On ARG_t reduce production instr_list -> ARG_I
-- On ARG_s reduce production instr_list -> ARG_I
-- On ARG_lo reduce production instr_list -> ARG_I
-- On ARG_l reduce production instr_list -> ARG_I
-- On ARG_k reduce production instr_list -> ARG_I
-- On ARG_i reduce production instr_list -> ARG_I
-- On ARG_g reduce production instr_list -> ARG_I
-- On ARG_e reduce production instr_list -> ARG_I
-- On ARG_d reduce production instr_list -> ARG_I
-- On ARG_S reduce production instr_list -> ARG_I
-- On ARG_I reduce production instr_list -> ARG_I
-- On AND reduce production instr_list -> ARG_I
-- On ALIGNOF reduce production instr_list -> ARG_I
-- On # reduce production instr_list -> ARG_I
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr_list -> ARG_I
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 255:
stmt -> IF LPAREN expression RPAREN stmt . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF LPAREN expression RPAREN stmt . ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On ELSE shift to state 256
-- On WHILE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On VOID reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On UNSIGNED reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On UNION reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On TYPEOF reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On TILDE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On STRUCT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On STAR reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On SIZEOF reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On SHORT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On RETURN reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On RBRACE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On PLUS reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On MINUS reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On LPAREN reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On LONG reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On LBRACE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On INT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On IF reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On IDENT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On FLOAT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On EXCLAM reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On DOUBLE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On CST_INT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On CONTINUE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On CHAR reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On BREAK reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_v reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_u reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_t reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_s reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_lo reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_l reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_k reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_i reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_g reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_e reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_d reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_S reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_I reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On AND reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ALIGNOF reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On # reduce production stmt -> IF LPAREN expression RPAREN stmt
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt -> IF LPAREN expression RPAREN stmt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 256:
stmt -> IF LPAREN expression RPAREN stmt ELSE . stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE shift to state 237
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LBRACE shift to state 244
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On stmt shift to state 257
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226

State 257:
stmt -> IF LPAREN expression RPAREN stmt ELSE stmt . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On VOID reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On UNSIGNED reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On UNION reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On TYPEOF reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On TILDE reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On STRUCT reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On STAR reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On SIZEOF reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On SHORT reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On RETURN reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On RBRACE reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On PLUS reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On MINUS reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On LPAREN reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On LONG reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On LBRACE reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On INT reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On IF reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On IDENT reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On FLOAT reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On EXCLAM reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ELSE reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On DOUBLE reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On CST_INT reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On CONTINUE reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On CHAR reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On BREAK reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_v reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_u reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_t reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_s reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_lo reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_l reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_k reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_i reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_g reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_e reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_d reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_S reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ARG_I reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On AND reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On ALIGNOF reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
-- On # reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 258:
stmt -> instr_list . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production stmt -> instr_list
-- On VOID reduce production stmt -> instr_list
-- On UNSIGNED reduce production stmt -> instr_list
-- On UNION reduce production stmt -> instr_list
-- On TYPEOF reduce production stmt -> instr_list
-- On TILDE reduce production stmt -> instr_list
-- On STRUCT reduce production stmt -> instr_list
-- On STAR reduce production stmt -> instr_list
-- On SIZEOF reduce production stmt -> instr_list
-- On SHORT reduce production stmt -> instr_list
-- On RETURN reduce production stmt -> instr_list
-- On RBRACE reduce production stmt -> instr_list
-- On PLUS reduce production stmt -> instr_list
-- On MINUS reduce production stmt -> instr_list
-- On LPAREN reduce production stmt -> instr_list
-- On LONG reduce production stmt -> instr_list
-- On LBRACE reduce production stmt -> instr_list
-- On INT reduce production stmt -> instr_list
-- On IF reduce production stmt -> instr_list
-- On IDENT reduce production stmt -> instr_list
-- On FLOAT reduce production stmt -> instr_list
-- On EXCLAM reduce production stmt -> instr_list
-- On ELSE reduce production stmt -> instr_list
-- On DOUBLE reduce production stmt -> instr_list
-- On CST_INT reduce production stmt -> instr_list
-- On CONTINUE reduce production stmt -> instr_list
-- On CHAR reduce production stmt -> instr_list
-- On BREAK reduce production stmt -> instr_list
-- On ARG_v reduce production stmt -> instr_list
-- On ARG_u reduce production stmt -> instr_list
-- On ARG_t reduce production stmt -> instr_list
-- On ARG_s reduce production stmt -> instr_list
-- On ARG_lo reduce production stmt -> instr_list
-- On ARG_l reduce production stmt -> instr_list
-- On ARG_k reduce production stmt -> instr_list
-- On ARG_i reduce production stmt -> instr_list
-- On ARG_g reduce production stmt -> instr_list
-- On ARG_e reduce production stmt -> instr_list
-- On ARG_d reduce production stmt -> instr_list
-- On ARG_S reduce production stmt -> instr_list
-- On ARG_I reduce production stmt -> instr_list
-- On AND reduce production stmt -> instr_list
-- On ALIGNOF reduce production stmt -> instr_list
-- On # reduce production stmt -> instr_list
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt -> instr_list
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 259:
instr_list -> instr . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr_list -> instr . instr_list [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 176
-- On instr_list shift to state 260
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
-- On WHILE reduce production instr_list -> instr
-- On VOID reduce production instr_list -> instr
-- On UNSIGNED reduce production instr_list -> instr
-- On UNION reduce production instr_list -> instr
-- On TYPEOF reduce production instr_list -> instr
-- On STRUCT reduce production instr_list -> instr
-- On SHORT reduce production instr_list -> instr
-- On RETURN reduce production instr_list -> instr
-- On RBRACE reduce production instr_list -> instr
-- On LONG reduce production instr_list -> instr
-- On LBRACE reduce production instr_list -> instr
-- On INT reduce production instr_list -> instr
-- On IF reduce production instr_list -> instr
-- On FLOAT reduce production instr_list -> instr
-- On ELSE reduce production instr_list -> instr
-- On DOUBLE reduce production instr_list -> instr
-- On CONTINUE reduce production instr_list -> instr
-- On CHAR reduce production instr_list -> instr
-- On BREAK reduce production instr_list -> instr
-- On ARG_t reduce production instr_list -> instr
-- On ARG_s reduce production instr_list -> instr
-- On ARG_k reduce production instr_list -> instr
-- On ARG_S reduce production instr_list -> instr
-- On # reduce production instr_list -> instr
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr_list -> instr
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 260:
instr_list -> instr instr_list . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production instr_list -> instr instr_list
-- On VOID reduce production instr_list -> instr instr_list
-- On UNSIGNED reduce production instr_list -> instr instr_list
-- On UNION reduce production instr_list -> instr instr_list
-- On TYPEOF reduce production instr_list -> instr instr_list
-- On TILDE reduce production instr_list -> instr instr_list
-- On STRUCT reduce production instr_list -> instr instr_list
-- On STAR reduce production instr_list -> instr instr_list
-- On SIZEOF reduce production instr_list -> instr instr_list
-- On SHORT reduce production instr_list -> instr instr_list
-- On RETURN reduce production instr_list -> instr instr_list
-- On RBRACE reduce production instr_list -> instr instr_list
-- On PLUS reduce production instr_list -> instr instr_list
-- On MINUS reduce production instr_list -> instr instr_list
-- On LPAREN reduce production instr_list -> instr instr_list
-- On LONG reduce production instr_list -> instr instr_list
-- On LBRACE reduce production instr_list -> instr instr_list
-- On INT reduce production instr_list -> instr instr_list
-- On IF reduce production instr_list -> instr instr_list
-- On IDENT reduce production instr_list -> instr instr_list
-- On FLOAT reduce production instr_list -> instr instr_list
-- On EXCLAM reduce production instr_list -> instr instr_list
-- On ELSE reduce production instr_list -> instr instr_list
-- On DOUBLE reduce production instr_list -> instr instr_list
-- On CST_INT reduce production instr_list -> instr instr_list
-- On CONTINUE reduce production instr_list -> instr instr_list
-- On CHAR reduce production instr_list -> instr instr_list
-- On BREAK reduce production instr_list -> instr instr_list
-- On ARG_v reduce production instr_list -> instr instr_list
-- On ARG_u reduce production instr_list -> instr instr_list
-- On ARG_t reduce production instr_list -> instr instr_list
-- On ARG_s reduce production instr_list -> instr instr_list
-- On ARG_lo reduce production instr_list -> instr instr_list
-- On ARG_l reduce production instr_list -> instr instr_list
-- On ARG_k reduce production instr_list -> instr instr_list
-- On ARG_i reduce production instr_list -> instr instr_list
-- On ARG_g reduce production instr_list -> instr instr_list
-- On ARG_e reduce production instr_list -> instr instr_list
-- On ARG_d reduce production instr_list -> instr instr_list
-- On ARG_S reduce production instr_list -> instr instr_list
-- On ARG_I reduce production instr_list -> instr instr_list
-- On AND reduce production instr_list -> instr instr_list
-- On ALIGNOF reduce production instr_list -> instr instr_list
-- On # reduce production instr_list -> instr instr_list
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production instr_list -> instr instr_list
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 261:
stmt_list -> ARG_S . [ RBRACE ]
-- On RBRACE reduce production stmt_list -> ARG_S

State 262:
stmt_list -> type_spec . attributes decl maybe_init SEMICOLON stmt_list [ RBRACE ]
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 263
-- On attribute shift to state 149
-- On STAR reduce production attributes -> 
-- On SEMICOLON reduce production attributes -> 
-- On LPAREN reduce production attributes -> 
-- On LBRACKET reduce production attributes -> 
-- On IDENT reduce production attributes -> 
-- On EQ reduce production attributes -> 

State 263:
stmt_list -> type_spec attributes . decl maybe_init SEMICOLON stmt_list [ RBRACE ]
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 264
-- On SEMICOLON reduce production direct_decl -> 
-- On LBRACKET reduce production direct_decl -> 
-- On EQ reduce production direct_decl -> 

State 264:
stmt_list -> type_spec attributes decl . maybe_init SEMICOLON stmt_list [ RBRACE ]
-- On EQ shift to state 265
-- On maybe_init shift to state 271
-- On SEMICOLON reduce production maybe_init -> 

State 265:
maybe_init -> EQ . expression [ SEMICOLON ]
maybe_init -> EQ . lval LPAREN arguments RPAREN [ SEMICOLON ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 266
-- On expression shift to state 270
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58

State 266:
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
maybe_init -> EQ lval . LPAREN arguments RPAREN [ SEMICOLON ]
-- On LPAREN shift to state 267
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On SEMICOLON reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND reduce production expression -> lval

State 267:
maybe_init -> EQ lval LPAREN . arguments RPAREN [ SEMICOLON ]
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 203
-- On arguments shift to state 268
-- On argu shift to state 58
-- On RPAREN reduce production arguments -> 

State 268:
maybe_init -> EQ lval LPAREN arguments . RPAREN [ SEMICOLON ]
-- On RPAREN shift to state 269

State 269:
maybe_init -> EQ lval LPAREN arguments RPAREN . [ SEMICOLON ]
-- On SEMICOLON reduce production maybe_init -> EQ lval LPAREN arguments RPAREN

State 270:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS LPAREN INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
maybe_init -> EQ expression . [ SEMICOLON ]
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
-- On SEMICOLON reduce production maybe_init -> EQ expression

State 271:
stmt_list -> type_spec attributes decl maybe_init . SEMICOLON stmt_list [ RBRACE ]
-- On SEMICOLON shift to state 272

State 272:
stmt_list -> type_spec attributes decl maybe_init SEMICOLON . stmt_list [ RBRACE ]
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 261
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 262
-- On stmt_list shift to state 273
-- On stmt shift to state 274
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
-- On RBRACE reduce production stmt_list -> 

State 273:
stmt_list -> type_spec attributes decl maybe_init SEMICOLON stmt_list . [ RBRACE ]
-- On RBRACE reduce production stmt_list -> type_spec attributes decl maybe_init SEMICOLON stmt_list

State 274:
stmt_list -> stmt . stmt_list [ RBRACE ]
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 261
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 262
-- On stmt_list shift to state 275
-- On stmt shift to state 274
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
-- On RBRACE reduce production stmt_list -> 

State 275:
stmt_list -> stmt stmt_list . [ RBRACE ]
-- On RBRACE reduce production stmt_list -> stmt stmt_list

State 276:
stmt -> LBRACE stmt_list . RBRACE [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On RBRACE shift to state 277

State 277:
stmt -> LBRACE stmt_list RBRACE . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production stmt -> LBRACE stmt_list RBRACE
-- On VOID reduce production stmt -> LBRACE stmt_list RBRACE
-- On UNSIGNED reduce production stmt -> LBRACE stmt_list RBRACE
-- On UNION reduce production stmt -> LBRACE stmt_list RBRACE
-- On TYPEOF reduce production stmt -> LBRACE stmt_list RBRACE
-- On TILDE reduce production stmt -> LBRACE stmt_list RBRACE
-- On STRUCT reduce production stmt -> LBRACE stmt_list RBRACE
-- On STAR reduce production stmt -> LBRACE stmt_list RBRACE
-- On SIZEOF reduce production stmt -> LBRACE stmt_list RBRACE
-- On SHORT reduce production stmt -> LBRACE stmt_list RBRACE
-- On RETURN reduce production stmt -> LBRACE stmt_list RBRACE
-- On RBRACE reduce production stmt -> LBRACE stmt_list RBRACE
-- On PLUS reduce production stmt -> LBRACE stmt_list RBRACE
-- On MINUS reduce production stmt -> LBRACE stmt_list RBRACE
-- On LPAREN reduce production stmt -> LBRACE stmt_list RBRACE
-- On LONG reduce production stmt -> LBRACE stmt_list RBRACE
-- On LBRACE reduce production stmt -> LBRACE stmt_list RBRACE
-- On INT reduce production stmt -> LBRACE stmt_list RBRACE
-- On IF reduce production stmt -> LBRACE stmt_list RBRACE
-- On IDENT reduce production stmt -> LBRACE stmt_list RBRACE
-- On FLOAT reduce production stmt -> LBRACE stmt_list RBRACE
-- On EXCLAM reduce production stmt -> LBRACE stmt_list RBRACE
-- On ELSE reduce production stmt -> LBRACE stmt_list RBRACE
-- On DOUBLE reduce production stmt -> LBRACE stmt_list RBRACE
-- On CST_INT reduce production stmt -> LBRACE stmt_list RBRACE
-- On CONTINUE reduce production stmt -> LBRACE stmt_list RBRACE
-- On CHAR reduce production stmt -> LBRACE stmt_list RBRACE
-- On BREAK reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_v reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_u reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_t reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_s reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_lo reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_l reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_k reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_i reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_g reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_e reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_d reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_S reduce production stmt -> LBRACE stmt_list RBRACE
-- On ARG_I reduce production stmt -> LBRACE stmt_list RBRACE
-- On AND reduce production stmt -> LBRACE stmt_list RBRACE
-- On ALIGNOF reduce production stmt -> LBRACE stmt_list RBRACE
-- On # reduce production stmt -> LBRACE stmt_list RBRACE
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt -> LBRACE stmt_list RBRACE
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 278:
stmt -> WHILE LPAREN expression RPAREN stmt . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
-- On WHILE reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On VOID reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On UNSIGNED reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On UNION reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On TYPEOF reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On TILDE reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On STRUCT reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On STAR reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On SIZEOF reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On SHORT reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On RETURN reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On RBRACE reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On PLUS reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On MINUS reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On LPAREN reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On LONG reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On LBRACE reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On INT reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On IF reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On IDENT reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On FLOAT reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On EXCLAM reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ELSE reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On DOUBLE reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On CST_INT reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On CONTINUE reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On CHAR reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On BREAK reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_v reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_u reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_t reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_s reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_lo reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_l reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_k reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_i reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_g reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_e reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_d reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_S reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ARG_I reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On AND reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On ALIGNOF reduce production stmt -> WHILE LPAREN expression RPAREN stmt
-- On # reduce production stmt -> WHILE LPAREN expression RPAREN stmt
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt -> WHILE LPAREN expression RPAREN stmt
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 279:
stmt' -> stmt . [ # ]
-- On # accept stmt

State 280:
stmt_list' -> . stmt_list [ # ]
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 281
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 282
-- On stmt_list shift to state 290
-- On stmt shift to state 288
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
-- On # reduce production stmt_list -> 
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt_list -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 281:
stmt_list -> ARG_S . [ # ]
-- On # reduce production stmt_list -> ARG_S

State 282:
stmt_list -> type_spec . attributes decl maybe_init SEMICOLON stmt_list [ # ]
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 283
-- On attribute shift to state 149
-- On STAR reduce production attributes -> 
-- On SEMICOLON reduce production attributes -> 
-- On LPAREN reduce production attributes -> 
-- On LBRACKET reduce production attributes -> 
-- On IDENT reduce production attributes -> 
-- On EQ reduce production attributes -> 

State 283:
stmt_list -> type_spec attributes . decl maybe_init SEMICOLON stmt_list [ # ]
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 284
-- On SEMICOLON reduce production direct_decl -> 
-- On LBRACKET reduce production direct_decl -> 
-- On EQ reduce production direct_decl -> 

State 284:
stmt_list -> type_spec attributes decl . maybe_init SEMICOLON stmt_list [ # ]
-- On EQ shift to state 265
-- On maybe_init shift to state 285
-- On SEMICOLON reduce production maybe_init -> 

State 285:
stmt_list -> type_spec attributes decl maybe_init . SEMICOLON stmt_list [ # ]
-- On SEMICOLON shift to state 286

State 286:
stmt_list -> type_spec attributes decl maybe_init SEMICOLON . stmt_list [ # ]
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 281
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 282
-- On stmt_list shift to state 287
-- On stmt shift to state 288
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
-- On # reduce production stmt_list -> 
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt_list -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 287:
stmt_list -> type_spec attributes decl maybe_init SEMICOLON stmt_list . [ # ]
-- On # reduce production stmt_list -> type_spec attributes decl maybe_init SEMICOLON stmt_list

State 288:
stmt_list -> stmt . stmt_list [ # ]
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 281
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 282
-- On stmt_list shift to state 289
-- On stmt shift to state 288
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
-- On # reduce production stmt_list -> 
** End-of-stream conflict on WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF
**   There is a tension between
**   (1) reducing production stmt_list -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 289:
stmt_list -> stmt stmt_list . [ # ]
-- On # reduce production stmt_list -> stmt stmt_list

State 290:
stmt_list' -> stmt_list . [ # ]
-- On # accept stmt_list

State 291:
typename' -> . typename [ # ]
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On STRUCT shift to state 30
-- On SHORT shift to state 88
-- On LONG shift to state 89
-- On INT shift to state 91
-- On FLOAT shift to state 92
-- On DOUBLE shift to state 93
-- On CHAR shift to state 94
-- On ARG_t shift to state 95
-- On ARG_k shift to state 96
-- On ARG_f shift to state 292
-- On typename shift to state 293
-- On type_spec shift to state 294
-- On one_formal shift to state 301

State 292:
one_formal -> ARG_f . [ # ]
-- On # reduce production one_formal -> ARG_f

State 293:
typename' -> typename . [ # ]
-- On # accept typename

State 294:
one_formal -> type_spec . attributes decl [ # ]
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 295
-- On attribute shift to state 149
-- On STAR reduce production attributes -> 
-- On LPAREN reduce production attributes -> 
-- On LBRACKET reduce production attributes -> 
-- On IDENT reduce production attributes -> 
-- On # reduce production attributes -> 
** End-of-stream conflict on VOLATILE STAR RESTRICT LPAREN LBRACKET IDENT CONST ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production attributes -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 295:
one_formal -> type_spec attributes . decl [ # ]
-- On STAR shift to state 296
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 298
-- On decl shift to state 300
-- On LBRACKET reduce production direct_decl -> 
-- On # reduce production direct_decl -> 
** End-of-stream conflict on STAR LPAREN LBRACKET IDENT
**   There is a tension between
**   (1) reducing production direct_decl -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 296:
decl -> STAR . attributes decl [ # ]
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 297
-- On attribute shift to state 149
-- On STAR reduce production attributes -> 
-- On LPAREN reduce production attributes -> 
-- On LBRACKET reduce production attributes -> 
-- On IDENT reduce production attributes -> 
-- On # reduce production attributes -> 
** End-of-stream conflict on VOLATILE STAR RESTRICT LPAREN LBRACKET IDENT CONST ATTRIBUTE ARG_A
**   There is a tension between
**   (1) reducing production attributes -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 297:
decl -> STAR attributes . decl [ # ]
-- On STAR shift to state 296
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 298
-- On decl shift to state 299
-- On LBRACKET reduce production direct_decl -> 
-- On # reduce production direct_decl -> 
** End-of-stream conflict on STAR LPAREN LBRACKET IDENT
**   There is a tension between
**   (1) reducing production direct_decl -> 
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 298:
decl -> direct_decl . [ # ]
direct_decl -> direct_decl . LBRACKET exp_opt RBRACKET [ LBRACKET # ]
-- On LBRACKET shift to state 132
-- On # reduce production decl -> direct_decl
** End-of-stream conflict on LBRACKET
**   There is a tension between
**   (1) reducing production decl -> direct_decl
**   without even requesting a lookahead token, and
**   (2) testing whether the lookahead token is a member of the above set.

State 299:
decl -> STAR attributes decl . [ # ]
-- On # reduce production decl -> STAR attributes decl

State 300:
one_formal -> type_spec attributes decl . [ # ]
-- On # reduce production one_formal -> type_spec attributes decl

State 301:
typename -> one_formal . [ # ]
-- On # reduce production typename -> one_formal

