State 0:
## Known stack suffix:
##
## LR(1) items:
expression' -> . expression [ # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 171
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 1:
## Known stack suffix:
## TILDE
## LR(1) items:
expression -> TILDE . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 170
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 2:
## Known stack suffix:
## STAR
## LR(1) items:
lval -> STAR . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 169
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 3:
## Known stack suffix:
## SIZEOF
## LR(1) items:
expression -> SIZEOF . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> SIZEOF . LPAREN typename RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 165
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 168
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 4:
## Known stack suffix:
## PLUS
## LR(1) items:
expression -> PLUS . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 164
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 5:
## Known stack suffix:
## MINUS
## LR(1) items:
expression -> MINUS . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 163
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 6:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression -> LPAREN . expression RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . typename RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> LPAREN . STAR expression RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 32
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On INT shift to state 91
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CHAR shift to state 94
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_g shift to state 24
-- On ARG_f shift to state 97
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On typename shift to state 161
-- On type_spec shift to state 101
-- On one_formal shift to state 153
-- On lval shift to state 33
-- On expression shift to state 154
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 7:
## Known stack suffix:
## VOID
## LR(1) items:
type_spec -> VOID . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> VOID

State 8:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
type_spec -> UNSIGNED . CHAR [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED . SHORT [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED . INT [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED . LONG [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED . LONG LONG [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On SHORT shift to state 9
-- On LONG shift to state 10
-- On INT shift to state 12
-- On CHAR shift to state 13
## Reductions:

State 9:
## Known stack suffix:
## UNSIGNED SHORT
## LR(1) items:
type_spec -> UNSIGNED SHORT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> UNSIGNED SHORT

State 10:
## Known stack suffix:
## UNSIGNED LONG
## LR(1) items:
type_spec -> UNSIGNED LONG . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> UNSIGNED LONG . LONG [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On LONG shift to state 11
## Reductions:
-- On VOLATILE reduce production type_spec -> UNSIGNED LONG
-- On STAR reduce production type_spec -> UNSIGNED LONG
-- On SEMICOLON reduce production type_spec -> UNSIGNED LONG
-- On RPAREN reduce production type_spec -> UNSIGNED LONG
-- On RESTRICT reduce production type_spec -> UNSIGNED LONG
-- On LPAREN reduce production type_spec -> UNSIGNED LONG
-- On LBRACKET reduce production type_spec -> UNSIGNED LONG
-- On IDENT reduce production type_spec -> UNSIGNED LONG
-- On EQ reduce production type_spec -> UNSIGNED LONG
-- On CONST reduce production type_spec -> UNSIGNED LONG
-- On COMMA reduce production type_spec -> UNSIGNED LONG
-- On ATTRIBUTE reduce production type_spec -> UNSIGNED LONG
-- On ARG_A reduce production type_spec -> UNSIGNED LONG

State 11:
## Known stack suffix:
## UNSIGNED LONG LONG
## LR(1) items:
type_spec -> UNSIGNED LONG LONG . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> UNSIGNED LONG LONG

State 12:
## Known stack suffix:
## UNSIGNED INT
## LR(1) items:
type_spec -> UNSIGNED INT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> UNSIGNED INT

State 13:
## Known stack suffix:
## UNSIGNED CHAR
## LR(1) items:
type_spec -> UNSIGNED CHAR . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> UNSIGNED CHAR

State 14:
## Known stack suffix:
## UNION
## LR(1) items:
type_spec -> UNION . ARG_c [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On ARG_c shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## UNION ARG_c
## LR(1) items:
type_spec -> UNION ARG_c . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> UNION ARG_c

State 16:
## Known stack suffix:
## TYPEOF
## LR(1) items:
type_spec -> TYPEOF . LPAREN expression RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On LPAREN shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## TYPEOF LPAREN
## LR(1) items:
type_spec -> TYPEOF LPAREN . expression RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 159
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 18:
## Known stack suffix:
## IDENT
## LR(1) items:
argv -> IDENT . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argv -> IDENT

State 19:
## Known stack suffix:
## EXCLAM
## LR(1) items:
expression -> EXCLAM . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 158
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 20:
## Known stack suffix:
## CST_INT
## LR(1) items:
constant -> CST_INT . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> CST_INT

State 21:
## Known stack suffix:
## ARG_v
## LR(1) items:
argv -> ARG_v . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN LBRACKET INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ DOT COMMA CIRC_EQ CIRC ARROW ARG_o ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argv -> ARG_v

State 22:
## Known stack suffix:
## ARG_u
## LR(1) items:
argu -> ARG_u . [ TILDE STAR SIZEOF PLUS MINUS LPAREN IDENT EXCLAM CST_INT ARG_v ARG_u ARG_l ARG_g ARG_e ARG_d AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argu -> ARG_u

State 23:
## Known stack suffix:
## ARG_l
## LR(1) items:
lval -> ARG_l . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lval -> ARG_l

State 24:
## Known stack suffix:
## ARG_g
## LR(1) items:
constant -> ARG_g . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> ARG_g

State 25:
## Known stack suffix:
## ARG_e
## LR(1) items:
expression -> ARG_e . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> ARG_e

State 26:
## Known stack suffix:
## ARG_d
## LR(1) items:
constant -> ARG_d . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constant -> ARG_d

State 27:
## Known stack suffix:
## AND
## LR(1) items:
expression -> AND . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 157
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 28:
## Known stack suffix:
## ALIGNOF
## LR(1) items:
expression -> ALIGNOF . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> ALIGNOF . LPAREN typename RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 29
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 156
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 29:
## Known stack suffix:
## ALIGNOF LPAREN
## LR(1) items:
expression -> ALIGNOF LPAREN . typename RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . expression RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . typename RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> LPAREN . STAR expression RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 32
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On INT shift to state 91
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CHAR shift to state 94
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_g shift to state 24
-- On ARG_f shift to state 97
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On typename shift to state 98
-- On type_spec shift to state 101
-- On one_formal shift to state 153
-- On lval shift to state 33
-- On expression shift to state 154
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 30:
## Known stack suffix:
## STRUCT
## LR(1) items:
type_spec -> STRUCT . ARG_c [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On ARG_c shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## STRUCT ARG_c
## LR(1) items:
type_spec -> STRUCT ARG_c . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> STRUCT ARG_c

State 32:
## Known stack suffix:
## LPAREN STAR
## LR(1) items:
lval -> STAR . expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> LPAREN STAR . expression RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 34
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 33:
## Known stack suffix:
## lval
## LR(1) items:
expression -> lval . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> lval

State 34:
## Known stack suffix:
## LPAREN STAR expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> STAR expression . [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> LPAREN STAR expression . RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On RPAREN shift to state 35
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP reduce production lval -> STAR expression
-- On SUP_EQ reduce production lval -> STAR expression
-- On SUP reduce production lval -> STAR expression
-- On STAR reduce production lval -> STAR expression
-- On SLASH reduce production lval -> STAR expression
-- On PLUS reduce production lval -> STAR expression
-- On PIPE reduce production lval -> STAR expression
-- On PERCENT reduce production lval -> STAR expression
-- On MINUS reduce production lval -> STAR expression
-- On INF_INF reduce production lval -> STAR expression
-- On INF_EQ reduce production lval -> STAR expression
-- On INF reduce production lval -> STAR expression
-- On EXCLAM_EQ reduce production lval -> STAR expression
-- On EQ_EQ reduce production lval -> STAR expression
-- On CIRC reduce production lval -> STAR expression
-- On ARG_b reduce production lval -> STAR expression
-- On AND reduce production lval -> STAR expression

State 35:
## Known stack suffix:
## LPAREN STAR expression RPAREN
## LR(1) items:
lval -> LPAREN STAR expression RPAREN . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 87
## Reductions:
-- On SUP_SUP_EQ reduce production offset ->
-- On SUP_SUP reduce production offset ->
-- On SUP_EQ reduce production offset ->
-- On SUP reduce production offset ->
-- On STAR_EQ reduce production offset ->
-- On STAR reduce production offset ->
-- On SLASH_EQ reduce production offset ->
-- On SLASH reduce production offset ->
-- On SEMICOLON reduce production offset ->
-- On RPAREN reduce production offset ->
-- On RBRACKET reduce production offset ->
-- On PLUS_EQ reduce production offset ->
-- On PLUS reduce production offset ->
-- On PIPE_EQ reduce production offset ->
-- On PIPE reduce production offset ->
-- On PERCENT_EQ reduce production offset ->
-- On PERCENT reduce production offset ->
-- On MINUS_EQ reduce production offset ->
-- On MINUS reduce production offset ->
-- On LPAREN reduce production offset ->
-- On INF_INF_EQ reduce production offset ->
-- On INF_INF reduce production offset ->
-- On INF_EQ reduce production offset ->
-- On INF reduce production offset ->
-- On EXCLAM_EQ reduce production offset ->
-- On EQ_EQ reduce production offset ->
-- On EQ reduce production offset ->
-- On COMMA reduce production offset ->
-- On CIRC_EQ reduce production offset ->
-- On CIRC reduce production offset ->
-- On ARROW reduce production offset ->
-- On ARG_b reduce production offset ->
-- On AND_EQ reduce production offset ->
-- On AND reduce production offset ->

State 36:
## Known stack suffix:
## LBRACKET
## LR(1) items:
offset -> LBRACKET . expression RBRACKET offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 37
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 37:
## Known stack suffix:
## LBRACKET expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
offset -> LBRACKET expression . RBRACKET offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RBRACKET shift to state 84
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 38:
## Known stack suffix:
## expression SUP_SUP
## LR(1) items:
expression -> expression SUP_SUP . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 39
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 39:
## Known stack suffix:
## expression SUP_SUP expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression SUP_SUP expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression SUP_SUP expression
-- On SUP_SUP reduce production expression -> expression SUP_SUP expression
-- On SUP_EQ reduce production expression -> expression SUP_SUP expression
-- On SUP reduce production expression -> expression SUP_SUP expression
-- On STAR_EQ reduce production expression -> expression SUP_SUP expression
-- On SLASH_EQ reduce production expression -> expression SUP_SUP expression
-- On SEMICOLON reduce production expression -> expression SUP_SUP expression
-- On RPAREN reduce production expression -> expression SUP_SUP expression
-- On RBRACKET reduce production expression -> expression SUP_SUP expression
-- On PLUS_EQ reduce production expression -> expression SUP_SUP expression
-- On PIPE_EQ reduce production expression -> expression SUP_SUP expression
-- On PIPE reduce production expression -> expression SUP_SUP expression
-- On PERCENT_EQ reduce production expression -> expression SUP_SUP expression
-- On MINUS_EQ reduce production expression -> expression SUP_SUP expression
-- On LPAREN reduce production expression -> expression SUP_SUP expression
-- On INF_INF_EQ reduce production expression -> expression SUP_SUP expression
-- On INF_INF reduce production expression -> expression SUP_SUP expression
-- On INF_EQ reduce production expression -> expression SUP_SUP expression
-- On INF reduce production expression -> expression SUP_SUP expression
-- On EXCLAM_EQ reduce production expression -> expression SUP_SUP expression
-- On EQ_EQ reduce production expression -> expression SUP_SUP expression
-- On EQ reduce production expression -> expression SUP_SUP expression
-- On COMMA reduce production expression -> expression SUP_SUP expression
-- On CIRC_EQ reduce production expression -> expression SUP_SUP expression
-- On CIRC reduce production expression -> expression SUP_SUP expression
-- On ARG_b reduce production expression -> expression SUP_SUP expression
-- On AND_EQ reduce production expression -> expression SUP_SUP expression
-- On AND reduce production expression -> expression SUP_SUP expression

State 40:
## Known stack suffix:
## expression STAR
## LR(1) items:
expression -> expression STAR . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 41
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 41:
## Known stack suffix:
## expression STAR expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression STAR expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression STAR expression
-- On SUP_SUP reduce production expression -> expression STAR expression
-- On SUP_EQ reduce production expression -> expression STAR expression
-- On SUP reduce production expression -> expression STAR expression
-- On STAR_EQ reduce production expression -> expression STAR expression
-- On STAR reduce production expression -> expression STAR expression
-- On SLASH_EQ reduce production expression -> expression STAR expression
-- On SLASH reduce production expression -> expression STAR expression
-- On SEMICOLON reduce production expression -> expression STAR expression
-- On RPAREN reduce production expression -> expression STAR expression
-- On RBRACKET reduce production expression -> expression STAR expression
-- On PLUS_EQ reduce production expression -> expression STAR expression
-- On PLUS reduce production expression -> expression STAR expression
-- On PIPE_EQ reduce production expression -> expression STAR expression
-- On PIPE reduce production expression -> expression STAR expression
-- On PERCENT_EQ reduce production expression -> expression STAR expression
-- On PERCENT reduce production expression -> expression STAR expression
-- On MINUS_EQ reduce production expression -> expression STAR expression
-- On MINUS reduce production expression -> expression STAR expression
-- On LPAREN reduce production expression -> expression STAR expression
-- On INF_INF_EQ reduce production expression -> expression STAR expression
-- On INF_INF reduce production expression -> expression STAR expression
-- On INF_EQ reduce production expression -> expression STAR expression
-- On INF reduce production expression -> expression STAR expression
-- On EXCLAM_EQ reduce production expression -> expression STAR expression
-- On EQ_EQ reduce production expression -> expression STAR expression
-- On EQ reduce production expression -> expression STAR expression
-- On COMMA reduce production expression -> expression STAR expression
-- On CIRC_EQ reduce production expression -> expression STAR expression
-- On CIRC reduce production expression -> expression STAR expression
-- On ARG_b reduce production expression -> expression STAR expression
-- On AND_EQ reduce production expression -> expression STAR expression
-- On AND reduce production expression -> expression STAR expression

State 42:
## Known stack suffix:
## expression ARROW
## LR(1) items:
lval -> expression ARROW . IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On IDENT shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## expression ARROW IDENT
## LR(1) items:
lval -> expression ARROW IDENT . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 48
## Reductions:
-- On SUP_SUP_EQ reduce production offset ->
-- On SUP_SUP reduce production offset ->
-- On SUP_EQ reduce production offset ->
-- On SUP reduce production offset ->
-- On STAR_EQ reduce production offset ->
-- On STAR reduce production offset ->
-- On SLASH_EQ reduce production offset ->
-- On SLASH reduce production offset ->
-- On SEMICOLON reduce production offset ->
-- On RPAREN reduce production offset ->
-- On RBRACKET reduce production offset ->
-- On PLUS_EQ reduce production offset ->
-- On PLUS reduce production offset ->
-- On PIPE_EQ reduce production offset ->
-- On PIPE reduce production offset ->
-- On PERCENT_EQ reduce production offset ->
-- On PERCENT reduce production offset ->
-- On MINUS_EQ reduce production offset ->
-- On MINUS reduce production offset ->
-- On LPAREN reduce production offset ->
-- On INF_INF_EQ reduce production offset ->
-- On INF_INF reduce production offset ->
-- On INF_EQ reduce production offset ->
-- On INF reduce production offset ->
-- On EXCLAM_EQ reduce production offset ->
-- On EQ_EQ reduce production offset ->
-- On EQ reduce production offset ->
-- On COMMA reduce production offset ->
-- On CIRC_EQ reduce production offset ->
-- On CIRC reduce production offset ->
-- On ARROW reduce production offset ->
-- On ARG_b reduce production offset ->
-- On AND_EQ reduce production offset ->
-- On AND reduce production offset ->

State 44:
## Known stack suffix:
## DOT
## LR(1) items:
offset -> DOT . IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On IDENT shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## DOT IDENT
## LR(1) items:
offset -> DOT IDENT . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 47
## Reductions:
-- On SUP_SUP_EQ reduce production offset ->
-- On SUP_SUP reduce production offset ->
-- On SUP_EQ reduce production offset ->
-- On SUP reduce production offset ->
-- On STAR_EQ reduce production offset ->
-- On STAR reduce production offset ->
-- On SLASH_EQ reduce production offset ->
-- On SLASH reduce production offset ->
-- On SEMICOLON reduce production offset ->
-- On RPAREN reduce production offset ->
-- On RBRACKET reduce production offset ->
-- On PLUS_EQ reduce production offset ->
-- On PLUS reduce production offset ->
-- On PIPE_EQ reduce production offset ->
-- On PIPE reduce production offset ->
-- On PERCENT_EQ reduce production offset ->
-- On PERCENT reduce production offset ->
-- On MINUS_EQ reduce production offset ->
-- On MINUS reduce production offset ->
-- On LPAREN reduce production offset ->
-- On INF_INF_EQ reduce production offset ->
-- On INF_INF reduce production offset ->
-- On INF_EQ reduce production offset ->
-- On INF reduce production offset ->
-- On EXCLAM_EQ reduce production offset ->
-- On EQ_EQ reduce production offset ->
-- On EQ reduce production offset ->
-- On COMMA reduce production offset ->
-- On CIRC_EQ reduce production offset ->
-- On CIRC reduce production offset ->
-- On ARROW reduce production offset ->
-- On ARG_b reduce production offset ->
-- On AND_EQ reduce production offset ->
-- On AND reduce production offset ->

State 46:
## Known stack suffix:
## ARG_o
## LR(1) items:
offset -> ARG_o . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production offset -> ARG_o

State 47:
## Known stack suffix:
## DOT IDENT offset
## LR(1) items:
offset -> DOT IDENT offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production offset -> DOT IDENT offset

State 48:
## Known stack suffix:
## expression ARROW IDENT offset
## LR(1) items:
lval -> expression ARROW IDENT offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lval -> expression ARROW IDENT offset

State 49:
## Known stack suffix:
## expression argb
## LR(1) items:
expression -> expression argb . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 50
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 50:
## Known stack suffix:
## expression argb expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression argb expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression argb expression
-- On STAR_EQ reduce production expression -> expression argb expression
-- On SLASH_EQ reduce production expression -> expression argb expression
-- On SEMICOLON reduce production expression -> expression argb expression
-- On RPAREN reduce production expression -> expression argb expression
-- On RBRACKET reduce production expression -> expression argb expression
-- On PLUS_EQ reduce production expression -> expression argb expression
-- On PIPE_EQ reduce production expression -> expression argb expression
-- On PERCENT_EQ reduce production expression -> expression argb expression
-- On MINUS_EQ reduce production expression -> expression argb expression
-- On LPAREN reduce production expression -> expression argb expression
-- On INF_INF_EQ reduce production expression -> expression argb expression
-- On EQ reduce production expression -> expression argb expression
-- On COMMA reduce production expression -> expression argb expression
-- On CIRC_EQ reduce production expression -> expression argb expression
-- On ARG_b reduce production expression -> expression argb expression
-- On AND_EQ reduce production expression -> expression argb expression

State 51:
## Known stack suffix:
## expression SUP_EQ
## LR(1) items:
expression -> expression SUP_EQ . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 52
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 52:
## Known stack suffix:
## expression SUP_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression SUP_EQ expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression SUP_EQ expression
-- On SUP_EQ reduce production expression -> expression SUP_EQ expression
-- On SUP reduce production expression -> expression SUP_EQ expression
-- On STAR_EQ reduce production expression -> expression SUP_EQ expression
-- On SLASH_EQ reduce production expression -> expression SUP_EQ expression
-- On SEMICOLON reduce production expression -> expression SUP_EQ expression
-- On RPAREN reduce production expression -> expression SUP_EQ expression
-- On RBRACKET reduce production expression -> expression SUP_EQ expression
-- On PLUS_EQ reduce production expression -> expression SUP_EQ expression
-- On PIPE_EQ reduce production expression -> expression SUP_EQ expression
-- On PIPE reduce production expression -> expression SUP_EQ expression
-- On PERCENT_EQ reduce production expression -> expression SUP_EQ expression
-- On MINUS_EQ reduce production expression -> expression SUP_EQ expression
-- On LPAREN reduce production expression -> expression SUP_EQ expression
-- On INF_INF_EQ reduce production expression -> expression SUP_EQ expression
-- On INF_EQ reduce production expression -> expression SUP_EQ expression
-- On INF reduce production expression -> expression SUP_EQ expression
-- On EXCLAM_EQ reduce production expression -> expression SUP_EQ expression
-- On EQ_EQ reduce production expression -> expression SUP_EQ expression
-- On EQ reduce production expression -> expression SUP_EQ expression
-- On COMMA reduce production expression -> expression SUP_EQ expression
-- On CIRC_EQ reduce production expression -> expression SUP_EQ expression
-- On CIRC reduce production expression -> expression SUP_EQ expression
-- On ARG_b reduce production expression -> expression SUP_EQ expression
-- On AND_EQ reduce production expression -> expression SUP_EQ expression
-- On AND reduce production expression -> expression SUP_EQ expression

State 53:
## Known stack suffix:
## expression SLASH
## LR(1) items:
expression -> expression SLASH . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 54
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 54:
## Known stack suffix:
## expression SLASH expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression SLASH expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression SLASH expression
-- On SUP_SUP reduce production expression -> expression SLASH expression
-- On SUP_EQ reduce production expression -> expression SLASH expression
-- On SUP reduce production expression -> expression SLASH expression
-- On STAR_EQ reduce production expression -> expression SLASH expression
-- On STAR reduce production expression -> expression SLASH expression
-- On SLASH_EQ reduce production expression -> expression SLASH expression
-- On SLASH reduce production expression -> expression SLASH expression
-- On SEMICOLON reduce production expression -> expression SLASH expression
-- On RPAREN reduce production expression -> expression SLASH expression
-- On RBRACKET reduce production expression -> expression SLASH expression
-- On PLUS_EQ reduce production expression -> expression SLASH expression
-- On PLUS reduce production expression -> expression SLASH expression
-- On PIPE_EQ reduce production expression -> expression SLASH expression
-- On PIPE reduce production expression -> expression SLASH expression
-- On PERCENT_EQ reduce production expression -> expression SLASH expression
-- On PERCENT reduce production expression -> expression SLASH expression
-- On MINUS_EQ reduce production expression -> expression SLASH expression
-- On MINUS reduce production expression -> expression SLASH expression
-- On LPAREN reduce production expression -> expression SLASH expression
-- On INF_INF_EQ reduce production expression -> expression SLASH expression
-- On INF_INF reduce production expression -> expression SLASH expression
-- On INF_EQ reduce production expression -> expression SLASH expression
-- On INF reduce production expression -> expression SLASH expression
-- On EXCLAM_EQ reduce production expression -> expression SLASH expression
-- On EQ_EQ reduce production expression -> expression SLASH expression
-- On EQ reduce production expression -> expression SLASH expression
-- On COMMA reduce production expression -> expression SLASH expression
-- On CIRC_EQ reduce production expression -> expression SLASH expression
-- On CIRC reduce production expression -> expression SLASH expression
-- On ARG_b reduce production expression -> expression SLASH expression
-- On AND_EQ reduce production expression -> expression SLASH expression
-- On AND reduce production expression -> expression SLASH expression

State 55:
## Known stack suffix:
## constant
## LR(1) items:
expression -> constant . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> constant

State 56:
## Known stack suffix:
## argv
## LR(1) items:
lval -> argv . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 57
## Reductions:
-- On SUP_SUP_EQ reduce production offset ->
-- On SUP_SUP reduce production offset ->
-- On SUP_EQ reduce production offset ->
-- On SUP reduce production offset ->
-- On STAR_EQ reduce production offset ->
-- On STAR reduce production offset ->
-- On SLASH_EQ reduce production offset ->
-- On SLASH reduce production offset ->
-- On SEMICOLON reduce production offset ->
-- On RPAREN reduce production offset ->
-- On RBRACKET reduce production offset ->
-- On PLUS_EQ reduce production offset ->
-- On PLUS reduce production offset ->
-- On PIPE_EQ reduce production offset ->
-- On PIPE reduce production offset ->
-- On PERCENT_EQ reduce production offset ->
-- On PERCENT reduce production offset ->
-- On MINUS_EQ reduce production offset ->
-- On MINUS reduce production offset ->
-- On LPAREN reduce production offset ->
-- On INF_INF_EQ reduce production offset ->
-- On INF_INF reduce production offset ->
-- On INF_EQ reduce production offset ->
-- On INF reduce production offset ->
-- On EXCLAM_EQ reduce production offset ->
-- On EQ_EQ reduce production offset ->
-- On EQ reduce production offset ->
-- On COMMA reduce production offset ->
-- On CIRC_EQ reduce production offset ->
-- On CIRC reduce production offset ->
-- On ARROW reduce production offset ->
-- On ARG_b reduce production offset ->
-- On AND_EQ reduce production offset ->
-- On AND reduce production offset ->

State 57:
## Known stack suffix:
## argv offset
## LR(1) items:
lval -> argv offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lval -> argv offset

State 58:
## Known stack suffix:
## argu
## LR(1) items:
expression -> argu . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 59
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 59:
## Known stack suffix:
## argu expression
## LR(1) items:
expression -> argu expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> argu expression
-- On SUP_SUP reduce production expression -> argu expression
-- On SUP_EQ reduce production expression -> argu expression
-- On SUP reduce production expression -> argu expression
-- On STAR_EQ reduce production expression -> argu expression
-- On STAR reduce production expression -> argu expression
-- On SLASH_EQ reduce production expression -> argu expression
-- On SLASH reduce production expression -> argu expression
-- On SEMICOLON reduce production expression -> argu expression
-- On RPAREN reduce production expression -> argu expression
-- On RBRACKET reduce production expression -> argu expression
-- On PLUS_EQ reduce production expression -> argu expression
-- On PLUS reduce production expression -> argu expression
-- On PIPE_EQ reduce production expression -> argu expression
-- On PIPE reduce production expression -> argu expression
-- On PERCENT_EQ reduce production expression -> argu expression
-- On PERCENT reduce production expression -> argu expression
-- On MINUS_EQ reduce production expression -> argu expression
-- On MINUS reduce production expression -> argu expression
-- On LPAREN reduce production expression -> argu expression
-- On INF_INF_EQ reduce production expression -> argu expression
-- On INF_INF reduce production expression -> argu expression
-- On INF_EQ reduce production expression -> argu expression
-- On INF reduce production expression -> argu expression
-- On EXCLAM_EQ reduce production expression -> argu expression
-- On EQ_EQ reduce production expression -> argu expression
-- On EQ reduce production expression -> argu expression
-- On COMMA reduce production expression -> argu expression
-- On CIRC_EQ reduce production expression -> argu expression
-- On CIRC reduce production expression -> argu expression
-- On ARG_b reduce production expression -> argu expression
-- On AND_EQ reduce production expression -> argu expression
-- On AND reduce production expression -> argu expression

State 60:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 61
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 61:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression PLUS expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PERCENT shift to state 62
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression PLUS expression
-- On SUP_SUP reduce production expression -> expression PLUS expression
-- On SUP_EQ reduce production expression -> expression PLUS expression
-- On SUP reduce production expression -> expression PLUS expression
-- On STAR_EQ reduce production expression -> expression PLUS expression
-- On SLASH_EQ reduce production expression -> expression PLUS expression
-- On SEMICOLON reduce production expression -> expression PLUS expression
-- On RPAREN reduce production expression -> expression PLUS expression
-- On RBRACKET reduce production expression -> expression PLUS expression
-- On PLUS_EQ reduce production expression -> expression PLUS expression
-- On PLUS reduce production expression -> expression PLUS expression
-- On PIPE_EQ reduce production expression -> expression PLUS expression
-- On PIPE reduce production expression -> expression PLUS expression
-- On PERCENT_EQ reduce production expression -> expression PLUS expression
-- On MINUS_EQ reduce production expression -> expression PLUS expression
-- On MINUS reduce production expression -> expression PLUS expression
-- On LPAREN reduce production expression -> expression PLUS expression
-- On INF_INF_EQ reduce production expression -> expression PLUS expression
-- On INF_INF reduce production expression -> expression PLUS expression
-- On INF_EQ reduce production expression -> expression PLUS expression
-- On INF reduce production expression -> expression PLUS expression
-- On EXCLAM_EQ reduce production expression -> expression PLUS expression
-- On EQ_EQ reduce production expression -> expression PLUS expression
-- On EQ reduce production expression -> expression PLUS expression
-- On COMMA reduce production expression -> expression PLUS expression
-- On CIRC_EQ reduce production expression -> expression PLUS expression
-- On CIRC reduce production expression -> expression PLUS expression
-- On ARG_b reduce production expression -> expression PLUS expression
-- On AND_EQ reduce production expression -> expression PLUS expression
-- On AND reduce production expression -> expression PLUS expression

State 62:
## Known stack suffix:
## expression PERCENT
## LR(1) items:
expression -> expression PERCENT . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 63
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 63:
## Known stack suffix:
## expression PERCENT expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression PERCENT expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression PERCENT expression
-- On SUP_SUP reduce production expression -> expression PERCENT expression
-- On SUP_EQ reduce production expression -> expression PERCENT expression
-- On SUP reduce production expression -> expression PERCENT expression
-- On STAR_EQ reduce production expression -> expression PERCENT expression
-- On STAR reduce production expression -> expression PERCENT expression
-- On SLASH_EQ reduce production expression -> expression PERCENT expression
-- On SLASH reduce production expression -> expression PERCENT expression
-- On SEMICOLON reduce production expression -> expression PERCENT expression
-- On RPAREN reduce production expression -> expression PERCENT expression
-- On RBRACKET reduce production expression -> expression PERCENT expression
-- On PLUS_EQ reduce production expression -> expression PERCENT expression
-- On PLUS reduce production expression -> expression PERCENT expression
-- On PIPE_EQ reduce production expression -> expression PERCENT expression
-- On PIPE reduce production expression -> expression PERCENT expression
-- On PERCENT_EQ reduce production expression -> expression PERCENT expression
-- On PERCENT reduce production expression -> expression PERCENT expression
-- On MINUS_EQ reduce production expression -> expression PERCENT expression
-- On MINUS reduce production expression -> expression PERCENT expression
-- On LPAREN reduce production expression -> expression PERCENT expression
-- On INF_INF_EQ reduce production expression -> expression PERCENT expression
-- On INF_INF reduce production expression -> expression PERCENT expression
-- On INF_EQ reduce production expression -> expression PERCENT expression
-- On INF reduce production expression -> expression PERCENT expression
-- On EXCLAM_EQ reduce production expression -> expression PERCENT expression
-- On EQ_EQ reduce production expression -> expression PERCENT expression
-- On EQ reduce production expression -> expression PERCENT expression
-- On COMMA reduce production expression -> expression PERCENT expression
-- On CIRC_EQ reduce production expression -> expression PERCENT expression
-- On CIRC reduce production expression -> expression PERCENT expression
-- On ARG_b reduce production expression -> expression PERCENT expression
-- On AND_EQ reduce production expression -> expression PERCENT expression
-- On AND reduce production expression -> expression PERCENT expression

State 64:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 65
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 65:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression MINUS expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PERCENT shift to state 62
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression MINUS expression
-- On SUP_SUP reduce production expression -> expression MINUS expression
-- On SUP_EQ reduce production expression -> expression MINUS expression
-- On SUP reduce production expression -> expression MINUS expression
-- On STAR_EQ reduce production expression -> expression MINUS expression
-- On SLASH_EQ reduce production expression -> expression MINUS expression
-- On SEMICOLON reduce production expression -> expression MINUS expression
-- On RPAREN reduce production expression -> expression MINUS expression
-- On RBRACKET reduce production expression -> expression MINUS expression
-- On PLUS_EQ reduce production expression -> expression MINUS expression
-- On PLUS reduce production expression -> expression MINUS expression
-- On PIPE_EQ reduce production expression -> expression MINUS expression
-- On PIPE reduce production expression -> expression MINUS expression
-- On PERCENT_EQ reduce production expression -> expression MINUS expression
-- On MINUS_EQ reduce production expression -> expression MINUS expression
-- On MINUS reduce production expression -> expression MINUS expression
-- On LPAREN reduce production expression -> expression MINUS expression
-- On INF_INF_EQ reduce production expression -> expression MINUS expression
-- On INF_INF reduce production expression -> expression MINUS expression
-- On INF_EQ reduce production expression -> expression MINUS expression
-- On INF reduce production expression -> expression MINUS expression
-- On EXCLAM_EQ reduce production expression -> expression MINUS expression
-- On EQ_EQ reduce production expression -> expression MINUS expression
-- On EQ reduce production expression -> expression MINUS expression
-- On COMMA reduce production expression -> expression MINUS expression
-- On CIRC_EQ reduce production expression -> expression MINUS expression
-- On CIRC reduce production expression -> expression MINUS expression
-- On ARG_b reduce production expression -> expression MINUS expression
-- On AND_EQ reduce production expression -> expression MINUS expression
-- On AND reduce production expression -> expression MINUS expression

State 66:
## Known stack suffix:
## expression INF_INF
## LR(1) items:
expression -> expression INF_INF . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 67
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 67:
## Known stack suffix:
## expression INF_INF expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression INF_INF expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression INF_INF expression
-- On SUP_SUP reduce production expression -> expression INF_INF expression
-- On SUP_EQ reduce production expression -> expression INF_INF expression
-- On SUP reduce production expression -> expression INF_INF expression
-- On STAR_EQ reduce production expression -> expression INF_INF expression
-- On SLASH_EQ reduce production expression -> expression INF_INF expression
-- On SEMICOLON reduce production expression -> expression INF_INF expression
-- On RPAREN reduce production expression -> expression INF_INF expression
-- On RBRACKET reduce production expression -> expression INF_INF expression
-- On PLUS_EQ reduce production expression -> expression INF_INF expression
-- On PIPE_EQ reduce production expression -> expression INF_INF expression
-- On PIPE reduce production expression -> expression INF_INF expression
-- On PERCENT_EQ reduce production expression -> expression INF_INF expression
-- On MINUS_EQ reduce production expression -> expression INF_INF expression
-- On LPAREN reduce production expression -> expression INF_INF expression
-- On INF_INF_EQ reduce production expression -> expression INF_INF expression
-- On INF_INF reduce production expression -> expression INF_INF expression
-- On INF_EQ reduce production expression -> expression INF_INF expression
-- On INF reduce production expression -> expression INF_INF expression
-- On EXCLAM_EQ reduce production expression -> expression INF_INF expression
-- On EQ_EQ reduce production expression -> expression INF_INF expression
-- On EQ reduce production expression -> expression INF_INF expression
-- On COMMA reduce production expression -> expression INF_INF expression
-- On CIRC_EQ reduce production expression -> expression INF_INF expression
-- On CIRC reduce production expression -> expression INF_INF expression
-- On ARG_b reduce production expression -> expression INF_INF expression
-- On AND_EQ reduce production expression -> expression INF_INF expression
-- On AND reduce production expression -> expression INF_INF expression

State 68:
## Known stack suffix:
## expression SUP
## LR(1) items:
expression -> expression SUP . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 69
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 69:
## Known stack suffix:
## expression SUP expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression SUP expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression SUP expression
-- On SUP_EQ reduce production expression -> expression SUP expression
-- On SUP reduce production expression -> expression SUP expression
-- On STAR_EQ reduce production expression -> expression SUP expression
-- On SLASH_EQ reduce production expression -> expression SUP expression
-- On SEMICOLON reduce production expression -> expression SUP expression
-- On RPAREN reduce production expression -> expression SUP expression
-- On RBRACKET reduce production expression -> expression SUP expression
-- On PLUS_EQ reduce production expression -> expression SUP expression
-- On PIPE_EQ reduce production expression -> expression SUP expression
-- On PIPE reduce production expression -> expression SUP expression
-- On PERCENT_EQ reduce production expression -> expression SUP expression
-- On MINUS_EQ reduce production expression -> expression SUP expression
-- On LPAREN reduce production expression -> expression SUP expression
-- On INF_INF_EQ reduce production expression -> expression SUP expression
-- On INF_EQ reduce production expression -> expression SUP expression
-- On INF reduce production expression -> expression SUP expression
-- On EXCLAM_EQ reduce production expression -> expression SUP expression
-- On EQ_EQ reduce production expression -> expression SUP expression
-- On EQ reduce production expression -> expression SUP expression
-- On COMMA reduce production expression -> expression SUP expression
-- On CIRC_EQ reduce production expression -> expression SUP expression
-- On CIRC reduce production expression -> expression SUP expression
-- On ARG_b reduce production expression -> expression SUP expression
-- On AND_EQ reduce production expression -> expression SUP expression
-- On AND reduce production expression -> expression SUP expression

State 70:
## Known stack suffix:
## expression PIPE
## LR(1) items:
expression -> expression PIPE . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 71
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 71:
## Known stack suffix:
## expression PIPE expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression PIPE expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression PIPE expression
-- On STAR_EQ reduce production expression -> expression PIPE expression
-- On SLASH_EQ reduce production expression -> expression PIPE expression
-- On SEMICOLON reduce production expression -> expression PIPE expression
-- On RPAREN reduce production expression -> expression PIPE expression
-- On RBRACKET reduce production expression -> expression PIPE expression
-- On PLUS_EQ reduce production expression -> expression PIPE expression
-- On PIPE_EQ reduce production expression -> expression PIPE expression
-- On PIPE reduce production expression -> expression PIPE expression
-- On PERCENT_EQ reduce production expression -> expression PIPE expression
-- On MINUS_EQ reduce production expression -> expression PIPE expression
-- On LPAREN reduce production expression -> expression PIPE expression
-- On INF_INF_EQ reduce production expression -> expression PIPE expression
-- On EQ reduce production expression -> expression PIPE expression
-- On COMMA reduce production expression -> expression PIPE expression
-- On CIRC_EQ reduce production expression -> expression PIPE expression
-- On ARG_b reduce production expression -> expression PIPE expression
-- On AND_EQ reduce production expression -> expression PIPE expression

State 72:
## Known stack suffix:
## expression INF_EQ
## LR(1) items:
expression -> expression INF_EQ . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 73
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 73:
## Known stack suffix:
## expression INF_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression INF_EQ expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression INF_EQ expression
-- On SUP_EQ reduce production expression -> expression INF_EQ expression
-- On SUP reduce production expression -> expression INF_EQ expression
-- On STAR_EQ reduce production expression -> expression INF_EQ expression
-- On SLASH_EQ reduce production expression -> expression INF_EQ expression
-- On SEMICOLON reduce production expression -> expression INF_EQ expression
-- On RPAREN reduce production expression -> expression INF_EQ expression
-- On RBRACKET reduce production expression -> expression INF_EQ expression
-- On PLUS_EQ reduce production expression -> expression INF_EQ expression
-- On PIPE_EQ reduce production expression -> expression INF_EQ expression
-- On PIPE reduce production expression -> expression INF_EQ expression
-- On PERCENT_EQ reduce production expression -> expression INF_EQ expression
-- On MINUS_EQ reduce production expression -> expression INF_EQ expression
-- On LPAREN reduce production expression -> expression INF_EQ expression
-- On INF_INF_EQ reduce production expression -> expression INF_EQ expression
-- On INF_EQ reduce production expression -> expression INF_EQ expression
-- On INF reduce production expression -> expression INF_EQ expression
-- On EXCLAM_EQ reduce production expression -> expression INF_EQ expression
-- On EQ_EQ reduce production expression -> expression INF_EQ expression
-- On EQ reduce production expression -> expression INF_EQ expression
-- On COMMA reduce production expression -> expression INF_EQ expression
-- On CIRC_EQ reduce production expression -> expression INF_EQ expression
-- On CIRC reduce production expression -> expression INF_EQ expression
-- On ARG_b reduce production expression -> expression INF_EQ expression
-- On AND_EQ reduce production expression -> expression INF_EQ expression
-- On AND reduce production expression -> expression INF_EQ expression

State 74:
## Known stack suffix:
## expression INF
## LR(1) items:
expression -> expression INF . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 75
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 75:
## Known stack suffix:
## expression INF expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression INF expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression INF expression
-- On SUP_EQ reduce production expression -> expression INF expression
-- On SUP reduce production expression -> expression INF expression
-- On STAR_EQ reduce production expression -> expression INF expression
-- On SLASH_EQ reduce production expression -> expression INF expression
-- On SEMICOLON reduce production expression -> expression INF expression
-- On RPAREN reduce production expression -> expression INF expression
-- On RBRACKET reduce production expression -> expression INF expression
-- On PLUS_EQ reduce production expression -> expression INF expression
-- On PIPE_EQ reduce production expression -> expression INF expression
-- On PIPE reduce production expression -> expression INF expression
-- On PERCENT_EQ reduce production expression -> expression INF expression
-- On MINUS_EQ reduce production expression -> expression INF expression
-- On LPAREN reduce production expression -> expression INF expression
-- On INF_INF_EQ reduce production expression -> expression INF expression
-- On INF_EQ reduce production expression -> expression INF expression
-- On INF reduce production expression -> expression INF expression
-- On EXCLAM_EQ reduce production expression -> expression INF expression
-- On EQ_EQ reduce production expression -> expression INF expression
-- On EQ reduce production expression -> expression INF expression
-- On COMMA reduce production expression -> expression INF expression
-- On CIRC_EQ reduce production expression -> expression INF expression
-- On CIRC reduce production expression -> expression INF expression
-- On ARG_b reduce production expression -> expression INF expression
-- On AND_EQ reduce production expression -> expression INF expression
-- On AND reduce production expression -> expression INF expression

State 76:
## Known stack suffix:
## expression EXCLAM_EQ
## LR(1) items:
expression -> expression EXCLAM_EQ . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 77
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 77:
## Known stack suffix:
## expression EXCLAM_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression EXCLAM_EQ expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On STAR_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On SLASH_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On SEMICOLON reduce production expression -> expression EXCLAM_EQ expression
-- On RPAREN reduce production expression -> expression EXCLAM_EQ expression
-- On RBRACKET reduce production expression -> expression EXCLAM_EQ expression
-- On PLUS_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On PIPE_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On PIPE reduce production expression -> expression EXCLAM_EQ expression
-- On PERCENT_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On MINUS_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On LPAREN reduce production expression -> expression EXCLAM_EQ expression
-- On INF_INF_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On EXCLAM_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On EQ_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On EQ reduce production expression -> expression EXCLAM_EQ expression
-- On COMMA reduce production expression -> expression EXCLAM_EQ expression
-- On CIRC_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On CIRC reduce production expression -> expression EXCLAM_EQ expression
-- On ARG_b reduce production expression -> expression EXCLAM_EQ expression
-- On AND_EQ reduce production expression -> expression EXCLAM_EQ expression
-- On AND reduce production expression -> expression EXCLAM_EQ expression

State 78:
## Known stack suffix:
## expression EQ_EQ
## LR(1) items:
expression -> expression EQ_EQ . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 79
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 79:
## Known stack suffix:
## expression EQ_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression EQ_EQ expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression EQ_EQ expression
-- On STAR_EQ reduce production expression -> expression EQ_EQ expression
-- On SLASH_EQ reduce production expression -> expression EQ_EQ expression
-- On SEMICOLON reduce production expression -> expression EQ_EQ expression
-- On RPAREN reduce production expression -> expression EQ_EQ expression
-- On RBRACKET reduce production expression -> expression EQ_EQ expression
-- On PLUS_EQ reduce production expression -> expression EQ_EQ expression
-- On PIPE_EQ reduce production expression -> expression EQ_EQ expression
-- On PIPE reduce production expression -> expression EQ_EQ expression
-- On PERCENT_EQ reduce production expression -> expression EQ_EQ expression
-- On MINUS_EQ reduce production expression -> expression EQ_EQ expression
-- On LPAREN reduce production expression -> expression EQ_EQ expression
-- On INF_INF_EQ reduce production expression -> expression EQ_EQ expression
-- On EXCLAM_EQ reduce production expression -> expression EQ_EQ expression
-- On EQ_EQ reduce production expression -> expression EQ_EQ expression
-- On EQ reduce production expression -> expression EQ_EQ expression
-- On COMMA reduce production expression -> expression EQ_EQ expression
-- On CIRC_EQ reduce production expression -> expression EQ_EQ expression
-- On CIRC reduce production expression -> expression EQ_EQ expression
-- On ARG_b reduce production expression -> expression EQ_EQ expression
-- On AND_EQ reduce production expression -> expression EQ_EQ expression
-- On AND reduce production expression -> expression EQ_EQ expression

State 80:
## Known stack suffix:
## expression CIRC
## LR(1) items:
expression -> expression CIRC . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 81
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 81:
## Known stack suffix:
## expression CIRC expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression CIRC expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On ARROW shift to state 42
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression CIRC expression
-- On STAR_EQ reduce production expression -> expression CIRC expression
-- On SLASH_EQ reduce production expression -> expression CIRC expression
-- On SEMICOLON reduce production expression -> expression CIRC expression
-- On RPAREN reduce production expression -> expression CIRC expression
-- On RBRACKET reduce production expression -> expression CIRC expression
-- On PLUS_EQ reduce production expression -> expression CIRC expression
-- On PIPE_EQ reduce production expression -> expression CIRC expression
-- On PIPE reduce production expression -> expression CIRC expression
-- On PERCENT_EQ reduce production expression -> expression CIRC expression
-- On MINUS_EQ reduce production expression -> expression CIRC expression
-- On LPAREN reduce production expression -> expression CIRC expression
-- On INF_INF_EQ reduce production expression -> expression CIRC expression
-- On EQ reduce production expression -> expression CIRC expression
-- On COMMA reduce production expression -> expression CIRC expression
-- On CIRC_EQ reduce production expression -> expression CIRC expression
-- On CIRC reduce production expression -> expression CIRC expression
-- On ARG_b reduce production expression -> expression CIRC expression
-- On AND_EQ reduce production expression -> expression CIRC expression

State 82:
## Known stack suffix:
## expression AND
## LR(1) items:
expression -> expression AND . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 83
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 83:
## Known stack suffix:
## expression AND expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression AND expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> expression AND expression
-- On STAR_EQ reduce production expression -> expression AND expression
-- On SLASH_EQ reduce production expression -> expression AND expression
-- On SEMICOLON reduce production expression -> expression AND expression
-- On RPAREN reduce production expression -> expression AND expression
-- On RBRACKET reduce production expression -> expression AND expression
-- On PLUS_EQ reduce production expression -> expression AND expression
-- On PIPE_EQ reduce production expression -> expression AND expression
-- On PIPE reduce production expression -> expression AND expression
-- On PERCENT_EQ reduce production expression -> expression AND expression
-- On MINUS_EQ reduce production expression -> expression AND expression
-- On LPAREN reduce production expression -> expression AND expression
-- On INF_INF_EQ reduce production expression -> expression AND expression
-- On EQ reduce production expression -> expression AND expression
-- On COMMA reduce production expression -> expression AND expression
-- On CIRC_EQ reduce production expression -> expression AND expression
-- On CIRC reduce production expression -> expression AND expression
-- On ARG_b reduce production expression -> expression AND expression
-- On AND_EQ reduce production expression -> expression AND expression
-- On AND reduce production expression -> expression AND expression

State 84:
## Known stack suffix:
## LBRACKET expression RBRACKET
## LR(1) items:
offset -> LBRACKET expression RBRACKET . offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 85
## Reductions:
-- On SUP_SUP_EQ reduce production offset ->
-- On SUP_SUP reduce production offset ->
-- On SUP_EQ reduce production offset ->
-- On SUP reduce production offset ->
-- On STAR_EQ reduce production offset ->
-- On STAR reduce production offset ->
-- On SLASH_EQ reduce production offset ->
-- On SLASH reduce production offset ->
-- On SEMICOLON reduce production offset ->
-- On RPAREN reduce production offset ->
-- On RBRACKET reduce production offset ->
-- On PLUS_EQ reduce production offset ->
-- On PLUS reduce production offset ->
-- On PIPE_EQ reduce production offset ->
-- On PIPE reduce production offset ->
-- On PERCENT_EQ reduce production offset ->
-- On PERCENT reduce production offset ->
-- On MINUS_EQ reduce production offset ->
-- On MINUS reduce production offset ->
-- On LPAREN reduce production offset ->
-- On INF_INF_EQ reduce production offset ->
-- On INF_INF reduce production offset ->
-- On INF_EQ reduce production offset ->
-- On INF reduce production offset ->
-- On EXCLAM_EQ reduce production offset ->
-- On EQ_EQ reduce production offset ->
-- On EQ reduce production offset ->
-- On COMMA reduce production offset ->
-- On CIRC_EQ reduce production offset ->
-- On CIRC reduce production offset ->
-- On ARROW reduce production offset ->
-- On ARG_b reduce production offset ->
-- On AND_EQ reduce production offset ->
-- On AND reduce production offset ->

State 85:
## Known stack suffix:
## LBRACKET expression RBRACKET offset
## LR(1) items:
offset -> LBRACKET expression RBRACKET offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production offset -> LBRACKET expression RBRACKET offset

State 86:
## Known stack suffix:
## ARG_b
## LR(1) items:
argb -> ARG_b . [ TILDE STAR SIZEOF PLUS MINUS LPAREN IDENT EXCLAM CST_INT ARG_v ARG_u ARG_l ARG_g ARG_e ARG_d AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argb -> ARG_b

State 87:
## Known stack suffix:
## LPAREN STAR expression RPAREN offset
## LR(1) items:
lval -> LPAREN STAR expression RPAREN offset . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production lval -> LPAREN STAR expression RPAREN offset

State 88:
## Known stack suffix:
## SHORT
## LR(1) items:
type_spec -> SHORT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> SHORT

State 89:
## Known stack suffix:
## LONG
## LR(1) items:
type_spec -> LONG . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
type_spec -> LONG . LONG [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On LONG shift to state 90
## Reductions:
-- On VOLATILE reduce production type_spec -> LONG
-- On STAR reduce production type_spec -> LONG
-- On SEMICOLON reduce production type_spec -> LONG
-- On RPAREN reduce production type_spec -> LONG
-- On RESTRICT reduce production type_spec -> LONG
-- On LPAREN reduce production type_spec -> LONG
-- On LBRACKET reduce production type_spec -> LONG
-- On IDENT reduce production type_spec -> LONG
-- On EQ reduce production type_spec -> LONG
-- On CONST reduce production type_spec -> LONG
-- On COMMA reduce production type_spec -> LONG
-- On ATTRIBUTE reduce production type_spec -> LONG
-- On ARG_A reduce production type_spec -> LONG

State 90:
## Known stack suffix:
## LONG LONG
## LR(1) items:
type_spec -> LONG LONG . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> LONG LONG

State 91:
## Known stack suffix:
## INT
## LR(1) items:
type_spec -> INT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> INT

State 92:
## Known stack suffix:
## FLOAT
## LR(1) items:
type_spec -> FLOAT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> FLOAT

State 93:
## Known stack suffix:
## DOUBLE
## LR(1) items:
type_spec -> DOUBLE . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> DOUBLE

State 94:
## Known stack suffix:
## CHAR
## LR(1) items:
type_spec -> CHAR . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> CHAR

State 95:
## Known stack suffix:
## ARG_t
## LR(1) items:
type_spec -> ARG_t . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> ARG_t

State 96:
## Known stack suffix:
## ARG_k
## LR(1) items:
type_spec -> ARG_k . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> ARG_k

State 97:
## Known stack suffix:
## ARG_f
## LR(1) items:
one_formal -> ARG_f . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production one_formal -> ARG_f

State 98:
## Known stack suffix:
## ALIGNOF LPAREN typename
## LR(1) items:
expression -> ALIGNOF LPAREN typename . RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename . RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On RPAREN shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## ALIGNOF LPAREN typename RPAREN
## LR(1) items:
expression -> ALIGNOF LPAREN typename RPAREN . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename RPAREN . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On SIZEOF shift to state 3
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 100
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SUP_SUP reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SUP_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SUP reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On STAR_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On STAR reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SLASH_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SLASH reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On SEMICOLON reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On RPAREN reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On RBRACKET reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PLUS_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PLUS reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PIPE_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PIPE reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PERCENT_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On PERCENT reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On MINUS_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On MINUS reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On INF_INF_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On INF_INF reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On INF_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On INF reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On EXCLAM_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On EQ_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On COMMA reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On CIRC_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On CIRC reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On ARROW reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On ARG_b reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On AND_EQ reduce production expression -> ALIGNOF LPAREN typename RPAREN
-- On AND reduce production expression -> ALIGNOF LPAREN typename RPAREN

State 100:
## Known stack suffix:
## LPAREN typename RPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename RPAREN expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On SUP_SUP reduce production expression -> LPAREN typename RPAREN expression
-- On SUP_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On SUP reduce production expression -> LPAREN typename RPAREN expression
-- On STAR_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On STAR reduce production expression -> LPAREN typename RPAREN expression
-- On SLASH_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On SLASH reduce production expression -> LPAREN typename RPAREN expression
-- On SEMICOLON reduce production expression -> LPAREN typename RPAREN expression
-- On RPAREN reduce production expression -> LPAREN typename RPAREN expression
-- On RBRACKET reduce production expression -> LPAREN typename RPAREN expression
-- On PLUS_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On PLUS reduce production expression -> LPAREN typename RPAREN expression
-- On PIPE_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On PIPE reduce production expression -> LPAREN typename RPAREN expression
-- On PERCENT_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On PERCENT reduce production expression -> LPAREN typename RPAREN expression
-- On MINUS_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On MINUS reduce production expression -> LPAREN typename RPAREN expression
-- On LPAREN reduce production expression -> LPAREN typename RPAREN expression
-- On INF_INF_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On INF_INF reduce production expression -> LPAREN typename RPAREN expression
-- On INF_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On INF reduce production expression -> LPAREN typename RPAREN expression
-- On EXCLAM_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On EQ_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On EQ reduce production expression -> LPAREN typename RPAREN expression
-- On COMMA reduce production expression -> LPAREN typename RPAREN expression
-- On CIRC_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On CIRC reduce production expression -> LPAREN typename RPAREN expression
-- On ARG_b reduce production expression -> LPAREN typename RPAREN expression
-- On AND_EQ reduce production expression -> LPAREN typename RPAREN expression
-- On AND reduce production expression -> LPAREN typename RPAREN expression

State 101:
## Known stack suffix:
## type_spec
## LR(1) items:
one_formal -> type_spec . attributes decl [ RPAREN COMMA ]
## Transitions:
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 125
-- On attribute shift to state 149
## Reductions:
-- On STAR reduce production attributes ->
-- On RPAREN reduce production attributes ->
-- On LPAREN reduce production attributes ->
-- On LBRACKET reduce production attributes ->
-- On IDENT reduce production attributes ->
-- On COMMA reduce production attributes ->

State 102:
## Known stack suffix:
## VOLATILE
## LR(1) items:
attribute -> VOLATILE . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute -> VOLATILE

State 103:
## Known stack suffix:
## RESTRICT
## LR(1) items:
attribute -> RESTRICT . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute -> RESTRICT

State 104:
## Known stack suffix:
## CONST
## LR(1) items:
attribute -> CONST . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute -> CONST

State 105:
## Known stack suffix:
## ATTRIBUTE
## LR(1) items:
attribute -> ATTRIBUTE . LPAREN LPAREN attr RPAREN RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On LPAREN shift to state 106
## Reductions:

State 106:
## Known stack suffix:
## ATTRIBUTE LPAREN
## LR(1) items:
attribute -> ATTRIBUTE LPAREN . LPAREN attr RPAREN RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On LPAREN shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN
## LR(1) items:
attribute -> ATTRIBUTE LPAREN LPAREN . attr RPAREN RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On IDENT shift to state 108
-- On attr shift to state 121
## Reductions:

State 108:
## Known stack suffix:
## IDENT
## LR(1) items:
attr -> IDENT . [ RPAREN ]
attr -> IDENT . LPAREN attr_args_ne RPAREN [ RPAREN ]
## Transitions:
-- On LPAREN shift to state 109
## Reductions:
-- On RPAREN reduce production attr -> IDENT

State 109:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
attr -> IDENT LPAREN . attr_args_ne RPAREN [ RPAREN ]
## Transitions:
-- On IDENT shift to state 110
-- On ARG_p shift to state 112
-- On ARG_P shift to state 113
-- On attr_args_ne shift to state 119
-- On attr_arg shift to state 116
## Reductions:

State 110:
## Known stack suffix:
## IDENT
## LR(1) items:
attr_arg -> IDENT . [ RPAREN COMMA ]
attr_arg -> IDENT . LPAREN attr_args_ne RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 111
## Reductions:
-- On RPAREN reduce production attr_arg -> IDENT
-- On COMMA reduce production attr_arg -> IDENT

State 111:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
attr_arg -> IDENT LPAREN . attr_args_ne RPAREN [ RPAREN COMMA ]
## Transitions:
-- On IDENT shift to state 110
-- On ARG_p shift to state 112
-- On ARG_P shift to state 113
-- On attr_args_ne shift to state 114
-- On attr_arg shift to state 116
## Reductions:

State 112:
## Known stack suffix:
## ARG_p
## LR(1) items:
attr_arg -> ARG_p . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_arg -> ARG_p

State 113:
## Known stack suffix:
## ARG_P
## LR(1) items:
attr_args_ne -> ARG_P . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_args_ne -> ARG_P

State 114:
## Known stack suffix:
## IDENT LPAREN attr_args_ne
## LR(1) items:
attr_arg -> IDENT LPAREN attr_args_ne . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## IDENT LPAREN attr_args_ne RPAREN
## LR(1) items:
attr_arg -> IDENT LPAREN attr_args_ne RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_arg -> IDENT LPAREN attr_args_ne RPAREN

State 116:
## Known stack suffix:
## attr_arg
## LR(1) items:
attr_args_ne -> attr_arg . [ RPAREN ]
attr_args_ne -> attr_arg . COMMA attr_args_ne [ RPAREN ]
## Transitions:
-- On COMMA shift to state 117
## Reductions:
-- On RPAREN reduce production attr_args_ne -> attr_arg

State 117:
## Known stack suffix:
## attr_arg COMMA
## LR(1) items:
attr_args_ne -> attr_arg COMMA . attr_args_ne [ RPAREN ]
## Transitions:
-- On IDENT shift to state 110
-- On ARG_p shift to state 112
-- On ARG_P shift to state 113
-- On attr_args_ne shift to state 118
-- On attr_arg shift to state 116
## Reductions:

State 118:
## Known stack suffix:
## attr_arg COMMA attr_args_ne
## LR(1) items:
attr_args_ne -> attr_arg COMMA attr_args_ne . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr_args_ne -> attr_arg COMMA attr_args_ne

State 119:
## Known stack suffix:
## IDENT LPAREN attr_args_ne
## LR(1) items:
attr -> IDENT LPAREN attr_args_ne . RPAREN [ RPAREN ]
## Transitions:
-- On RPAREN shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## IDENT LPAREN attr_args_ne RPAREN
## LR(1) items:
attr -> IDENT LPAREN attr_args_ne RPAREN . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attr -> IDENT LPAREN attr_args_ne RPAREN

State 121:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN attr
## LR(1) items:
attribute -> ATTRIBUTE LPAREN LPAREN attr . RPAREN RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On RPAREN shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN attr RPAREN
## LR(1) items:
attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN . RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On RPAREN shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN
## LR(1) items:
attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute -> ATTRIBUTE LPAREN LPAREN attr RPAREN RPAREN

State 124:
## Known stack suffix:
## ARG_A
## LR(1) items:
attributes -> ARG_A . [ STAR SEMICOLON RPAREN LPAREN LBRACKET IDENT EQ COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attributes -> ARG_A

State 125:
## Known stack suffix:
## type_spec attributes
## LR(1) items:
one_formal -> type_spec attributes . decl [ RPAREN COMMA ]
## Transitions:
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 152
## Reductions:
-- On RPAREN reduce production direct_decl ->
-- On LBRACKET reduce production direct_decl ->
-- On COMMA reduce production direct_decl ->

State 126:
## Known stack suffix:
## STAR
## LR(1) items:
decl -> STAR . attributes decl [ SEMICOLON RPAREN EQ COMMA ]
## Transitions:
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 127
-- On attribute shift to state 149
## Reductions:
-- On STAR reduce production attributes ->
-- On SEMICOLON reduce production attributes ->
-- On RPAREN reduce production attributes ->
-- On LPAREN reduce production attributes ->
-- On LBRACKET reduce production attributes ->
-- On IDENT reduce production attributes ->
-- On EQ reduce production attributes ->
-- On COMMA reduce production attributes ->

State 127:
## Known stack suffix:
## STAR attributes
## LR(1) items:
decl -> STAR attributes . decl [ SEMICOLON RPAREN EQ COMMA ]
## Transitions:
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 151
## Reductions:
-- On SEMICOLON reduce production direct_decl ->
-- On RPAREN reduce production direct_decl ->
-- On LBRACKET reduce production direct_decl ->
-- On EQ reduce production direct_decl ->
-- On COMMA reduce production direct_decl ->

State 128:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_decl -> LPAREN . attributes decl RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
direct_decl -> LPAREN . attributes decl RPAREN LPAREN parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 129
-- On attribute shift to state 149
## Reductions:
-- On STAR reduce production attributes ->
-- On RPAREN reduce production attributes ->
-- On LPAREN reduce production attributes ->
-- On LBRACKET reduce production attributes ->
-- On IDENT reduce production attributes ->

State 129:
## Known stack suffix:
## LPAREN attributes
## LR(1) items:
direct_decl -> LPAREN attributes . decl RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
direct_decl -> LPAREN attributes . decl RPAREN LPAREN parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 137
## Reductions:
-- On RPAREN reduce production direct_decl ->
-- On LBRACKET reduce production direct_decl ->

State 130:
## Known stack suffix:
## IDENT
## LR(1) items:
direct_decl -> IDENT . [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_decl -> IDENT

State 131:
## Known stack suffix:
## direct_decl
## LR(1) items:
decl -> direct_decl . [ SEMICOLON RPAREN EQ COMMA ]
direct_decl -> direct_decl . LBRACKET exp_opt RBRACKET [ SEMICOLON RPAREN LBRACKET EQ COMMA ]
## Transitions:
-- On LBRACKET shift to state 132
## Reductions:
-- On SEMICOLON reduce production decl -> direct_decl
-- On RPAREN reduce production decl -> direct_decl
-- On EQ reduce production decl -> direct_decl
-- On COMMA reduce production decl -> direct_decl

State 132:
## Known stack suffix:
## direct_decl LBRACKET
## LR(1) items:
direct_decl -> direct_decl LBRACKET . exp_opt RBRACKET [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_eo shift to state 133
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 134
-- On exp_opt shift to state 135
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:
-- On RBRACKET reduce production exp_opt ->

State 133:
## Known stack suffix:
## ARG_eo
## LR(1) items:
exp_opt -> ARG_eo . [ SEMICOLON RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production exp_opt -> ARG_eo

State 134:
## Known stack suffix:
## expression
## LR(1) items:
exp_opt -> expression . [ SEMICOLON RBRACKET ]
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON RBRACKET PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:
-- On SEMICOLON reduce production exp_opt -> expression
-- On RBRACKET reduce production exp_opt -> expression

State 135:
## Known stack suffix:
## direct_decl LBRACKET exp_opt
## LR(1) items:
direct_decl -> direct_decl LBRACKET exp_opt . RBRACKET [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
-- On RBRACKET shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## direct_decl LBRACKET exp_opt RBRACKET
## LR(1) items:
direct_decl -> direct_decl LBRACKET exp_opt RBRACKET . [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_decl -> direct_decl LBRACKET exp_opt RBRACKET

State 137:
## Known stack suffix:
## LPAREN attributes decl
## LR(1) items:
direct_decl -> LPAREN attributes decl . RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
direct_decl -> LPAREN attributes decl . RPAREN LPAREN parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
-- On RPAREN shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## LPAREN attributes decl RPAREN
## LR(1) items:
direct_decl -> LPAREN attributes decl RPAREN . [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
direct_decl -> LPAREN attributes decl RPAREN . LPAREN parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
-- On LPAREN shift to state 139
## Reductions:
-- On SEMICOLON reduce production direct_decl -> LPAREN attributes decl RPAREN
-- On RPAREN reduce production direct_decl -> LPAREN attributes decl RPAREN
-- On LBRACKET reduce production direct_decl -> LPAREN attributes decl RPAREN
-- On EQ reduce production direct_decl -> LPAREN attributes decl RPAREN
-- On COMMA reduce production direct_decl -> LPAREN attributes decl RPAREN

State 139:
## Known stack suffix:
## LPAREN attributes decl RPAREN LPAREN
## LR(1) items:
direct_decl -> LPAREN attributes decl RPAREN LPAREN . parameters RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On STRUCT shift to state 30
-- On SHORT shift to state 88
-- On LONG shift to state 89
-- On INT shift to state 91
-- On FLOAT shift to state 92
-- On ELLIPSIS shift to state 140
-- On DOUBLE shift to state 93
-- On CHAR shift to state 94
-- On ARG_va shift to state 141
-- On ARG_t shift to state 95
-- On ARG_k shift to state 96
-- On ARG_f shift to state 97
-- On ARG_F shift to state 142
-- On type_spec shift to state 101
-- On parameters_ne shift to state 143
-- On parameters shift to state 144
-- On one_formal shift to state 146
## Reductions:
-- On RPAREN reduce production parameters ->

State 140:
## Known stack suffix:
## ELLIPSIS
## LR(1) items:
parameters_ne -> ELLIPSIS . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameters_ne -> ELLIPSIS

State 141:
## Known stack suffix:
## ARG_va
## LR(1) items:
parameters_ne -> ARG_va . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameters_ne -> ARG_va

State 142:
## Known stack suffix:
## ARG_F
## LR(1) items:
parameters_ne -> ARG_F . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameters_ne -> ARG_F

State 143:
## Known stack suffix:
## parameters_ne
## LR(1) items:
parameters -> parameters_ne . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameters -> parameters_ne

State 144:
## Known stack suffix:
## LPAREN attributes decl RPAREN LPAREN parameters
## LR(1) items:
direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters . RPAREN [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
-- On RPAREN shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## LPAREN attributes decl RPAREN LPAREN parameters RPAREN
## LR(1) items:
direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN . [ SEMICOLON RPAREN LBRACKET EQ COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_decl -> LPAREN attributes decl RPAREN LPAREN parameters RPAREN

State 146:
## Known stack suffix:
## one_formal
## LR(1) items:
parameters_ne -> one_formal . [ RPAREN ]
parameters_ne -> one_formal . COMMA parameters_ne [ RPAREN ]
## Transitions:
-- On COMMA shift to state 147
## Reductions:
-- On RPAREN reduce production parameters_ne -> one_formal

State 147:
## Known stack suffix:
## one_formal COMMA
## LR(1) items:
parameters_ne -> one_formal COMMA . parameters_ne [ RPAREN ]
## Transitions:
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On STRUCT shift to state 30
-- On SHORT shift to state 88
-- On LONG shift to state 89
-- On INT shift to state 91
-- On FLOAT shift to state 92
-- On ELLIPSIS shift to state 140
-- On DOUBLE shift to state 93
-- On CHAR shift to state 94
-- On ARG_va shift to state 141
-- On ARG_t shift to state 95
-- On ARG_k shift to state 96
-- On ARG_f shift to state 97
-- On ARG_F shift to state 142
-- On type_spec shift to state 101
-- On parameters_ne shift to state 148
-- On one_formal shift to state 146
## Reductions:

State 148:
## Known stack suffix:
## one_formal COMMA parameters_ne
## LR(1) items:
parameters_ne -> one_formal COMMA parameters_ne . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameters_ne -> one_formal COMMA parameters_ne

State 149:
## Known stack suffix:
## attribute
## LR(1) items:
attributes -> attribute . attributes [ STAR SEMICOLON RPAREN LPAREN LBRACKET IDENT EQ COMMA # ]
## Transitions:
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 150
-- On attribute shift to state 149
## Reductions:
-- On STAR reduce production attributes ->
-- On SEMICOLON reduce production attributes ->
-- On RPAREN reduce production attributes ->
-- On LPAREN reduce production attributes ->
-- On LBRACKET reduce production attributes ->
-- On IDENT reduce production attributes ->
-- On EQ reduce production attributes ->
-- On COMMA reduce production attributes ->

State 150:
## Known stack suffix:
## attribute attributes
## LR(1) items:
attributes -> attribute attributes . [ STAR SEMICOLON RPAREN LPAREN LBRACKET IDENT EQ COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attributes -> attribute attributes

State 151:
## Known stack suffix:
## STAR attributes decl
## LR(1) items:
decl -> STAR attributes decl . [ SEMICOLON RPAREN EQ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> STAR attributes decl

State 152:
## Known stack suffix:
## type_spec attributes decl
## LR(1) items:
one_formal -> type_spec attributes decl . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production one_formal -> type_spec attributes decl

State 153:
## Known stack suffix:
## one_formal
## LR(1) items:
typename -> one_formal . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typename -> one_formal

State 154:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> LPAREN expression . RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RPAREN shift to state 155
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 155:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression -> LPAREN expression RPAREN . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> LPAREN expression RPAREN

State 156:
## Known stack suffix:
## ALIGNOF expression
## LR(1) items:
expression -> ALIGNOF expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> ALIGNOF expression
-- On SUP_SUP reduce production expression -> ALIGNOF expression
-- On SUP_EQ reduce production expression -> ALIGNOF expression
-- On SUP reduce production expression -> ALIGNOF expression
-- On STAR_EQ reduce production expression -> ALIGNOF expression
-- On STAR reduce production expression -> ALIGNOF expression
-- On SLASH_EQ reduce production expression -> ALIGNOF expression
-- On SLASH reduce production expression -> ALIGNOF expression
-- On SEMICOLON reduce production expression -> ALIGNOF expression
-- On RPAREN reduce production expression -> ALIGNOF expression
-- On RBRACKET reduce production expression -> ALIGNOF expression
-- On PLUS_EQ reduce production expression -> ALIGNOF expression
-- On PLUS reduce production expression -> ALIGNOF expression
-- On PIPE_EQ reduce production expression -> ALIGNOF expression
-- On PIPE reduce production expression -> ALIGNOF expression
-- On PERCENT_EQ reduce production expression -> ALIGNOF expression
-- On PERCENT reduce production expression -> ALIGNOF expression
-- On MINUS_EQ reduce production expression -> ALIGNOF expression
-- On MINUS reduce production expression -> ALIGNOF expression
-- On LPAREN reduce production expression -> ALIGNOF expression
-- On INF_INF_EQ reduce production expression -> ALIGNOF expression
-- On INF_INF reduce production expression -> ALIGNOF expression
-- On INF_EQ reduce production expression -> ALIGNOF expression
-- On INF reduce production expression -> ALIGNOF expression
-- On EXCLAM_EQ reduce production expression -> ALIGNOF expression
-- On EQ_EQ reduce production expression -> ALIGNOF expression
-- On EQ reduce production expression -> ALIGNOF expression
-- On COMMA reduce production expression -> ALIGNOF expression
-- On CIRC_EQ reduce production expression -> ALIGNOF expression
-- On CIRC reduce production expression -> ALIGNOF expression
-- On ARG_b reduce production expression -> ALIGNOF expression
-- On AND_EQ reduce production expression -> ALIGNOF expression
-- On AND reduce production expression -> ALIGNOF expression

State 157:
## Known stack suffix:
## AND expression
## LR(1) items:
expression -> AND expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> AND expression
-- On SUP_SUP reduce production expression -> AND expression
-- On SUP_EQ reduce production expression -> AND expression
-- On SUP reduce production expression -> AND expression
-- On STAR_EQ reduce production expression -> AND expression
-- On STAR reduce production expression -> AND expression
-- On SLASH_EQ reduce production expression -> AND expression
-- On SLASH reduce production expression -> AND expression
-- On SEMICOLON reduce production expression -> AND expression
-- On RPAREN reduce production expression -> AND expression
-- On RBRACKET reduce production expression -> AND expression
-- On PLUS_EQ reduce production expression -> AND expression
-- On PLUS reduce production expression -> AND expression
-- On PIPE_EQ reduce production expression -> AND expression
-- On PIPE reduce production expression -> AND expression
-- On PERCENT_EQ reduce production expression -> AND expression
-- On PERCENT reduce production expression -> AND expression
-- On MINUS_EQ reduce production expression -> AND expression
-- On MINUS reduce production expression -> AND expression
-- On LPAREN reduce production expression -> AND expression
-- On INF_INF_EQ reduce production expression -> AND expression
-- On INF_INF reduce production expression -> AND expression
-- On INF_EQ reduce production expression -> AND expression
-- On INF reduce production expression -> AND expression
-- On EXCLAM_EQ reduce production expression -> AND expression
-- On EQ_EQ reduce production expression -> AND expression
-- On EQ reduce production expression -> AND expression
-- On COMMA reduce production expression -> AND expression
-- On CIRC_EQ reduce production expression -> AND expression
-- On CIRC reduce production expression -> AND expression
-- On ARG_b reduce production expression -> AND expression
-- On AND_EQ reduce production expression -> AND expression
-- On AND reduce production expression -> AND expression

State 158:
## Known stack suffix:
## EXCLAM expression
## LR(1) items:
expression -> EXCLAM expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> EXCLAM expression
-- On SUP_SUP reduce production expression -> EXCLAM expression
-- On SUP_EQ reduce production expression -> EXCLAM expression
-- On SUP reduce production expression -> EXCLAM expression
-- On STAR_EQ reduce production expression -> EXCLAM expression
-- On STAR reduce production expression -> EXCLAM expression
-- On SLASH_EQ reduce production expression -> EXCLAM expression
-- On SLASH reduce production expression -> EXCLAM expression
-- On SEMICOLON reduce production expression -> EXCLAM expression
-- On RPAREN reduce production expression -> EXCLAM expression
-- On RBRACKET reduce production expression -> EXCLAM expression
-- On PLUS_EQ reduce production expression -> EXCLAM expression
-- On PLUS reduce production expression -> EXCLAM expression
-- On PIPE_EQ reduce production expression -> EXCLAM expression
-- On PIPE reduce production expression -> EXCLAM expression
-- On PERCENT_EQ reduce production expression -> EXCLAM expression
-- On PERCENT reduce production expression -> EXCLAM expression
-- On MINUS_EQ reduce production expression -> EXCLAM expression
-- On MINUS reduce production expression -> EXCLAM expression
-- On LPAREN reduce production expression -> EXCLAM expression
-- On INF_INF_EQ reduce production expression -> EXCLAM expression
-- On INF_INF reduce production expression -> EXCLAM expression
-- On INF_EQ reduce production expression -> EXCLAM expression
-- On INF reduce production expression -> EXCLAM expression
-- On EXCLAM_EQ reduce production expression -> EXCLAM expression
-- On EQ_EQ reduce production expression -> EXCLAM expression
-- On EQ reduce production expression -> EXCLAM expression
-- On COMMA reduce production expression -> EXCLAM expression
-- On CIRC_EQ reduce production expression -> EXCLAM expression
-- On CIRC reduce production expression -> EXCLAM expression
-- On ARG_b reduce production expression -> EXCLAM expression
-- On AND_EQ reduce production expression -> EXCLAM expression
-- On AND reduce production expression -> EXCLAM expression

State 159:
## Known stack suffix:
## TYPEOF LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
type_spec -> TYPEOF LPAREN expression . RPAREN [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RPAREN shift to state 160
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 160:
## Known stack suffix:
## TYPEOF LPAREN expression RPAREN
## LR(1) items:
type_spec -> TYPEOF LPAREN expression RPAREN . [ VOLATILE STAR SEMICOLON RPAREN RESTRICT LPAREN LBRACKET IDENT EQ CONST COMMA ATTRIBUTE ARG_A # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_spec -> TYPEOF LPAREN expression RPAREN

State 161:
## Known stack suffix:
## LPAREN typename
## LR(1) items:
expression -> LPAREN typename . RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On RPAREN shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## LPAREN typename RPAREN
## LR(1) items:
expression -> LPAREN typename RPAREN . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 100
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 163:
## Known stack suffix:
## MINUS expression
## LR(1) items:
expression -> MINUS expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PERCENT shift to state 62
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> MINUS expression
-- On SUP_SUP reduce production expression -> MINUS expression
-- On SUP_EQ reduce production expression -> MINUS expression
-- On SUP reduce production expression -> MINUS expression
-- On STAR_EQ reduce production expression -> MINUS expression
-- On SLASH_EQ reduce production expression -> MINUS expression
-- On SEMICOLON reduce production expression -> MINUS expression
-- On RPAREN reduce production expression -> MINUS expression
-- On RBRACKET reduce production expression -> MINUS expression
-- On PLUS_EQ reduce production expression -> MINUS expression
-- On PLUS reduce production expression -> MINUS expression
-- On PIPE_EQ reduce production expression -> MINUS expression
-- On PIPE reduce production expression -> MINUS expression
-- On PERCENT_EQ reduce production expression -> MINUS expression
-- On MINUS_EQ reduce production expression -> MINUS expression
-- On MINUS reduce production expression -> MINUS expression
-- On LPAREN reduce production expression -> MINUS expression
-- On INF_INF_EQ reduce production expression -> MINUS expression
-- On INF_INF reduce production expression -> MINUS expression
-- On INF_EQ reduce production expression -> MINUS expression
-- On INF reduce production expression -> MINUS expression
-- On EXCLAM_EQ reduce production expression -> MINUS expression
-- On EQ_EQ reduce production expression -> MINUS expression
-- On EQ reduce production expression -> MINUS expression
-- On COMMA reduce production expression -> MINUS expression
-- On CIRC_EQ reduce production expression -> MINUS expression
-- On CIRC reduce production expression -> MINUS expression
-- On ARG_b reduce production expression -> MINUS expression
-- On AND_EQ reduce production expression -> MINUS expression
-- On AND reduce production expression -> MINUS expression

State 164:
## Known stack suffix:
## PLUS expression
## LR(1) items:
expression -> PLUS expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PERCENT shift to state 62
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> PLUS expression
-- On SUP_SUP reduce production expression -> PLUS expression
-- On SUP_EQ reduce production expression -> PLUS expression
-- On SUP reduce production expression -> PLUS expression
-- On STAR_EQ reduce production expression -> PLUS expression
-- On SLASH_EQ reduce production expression -> PLUS expression
-- On SEMICOLON reduce production expression -> PLUS expression
-- On RPAREN reduce production expression -> PLUS expression
-- On RBRACKET reduce production expression -> PLUS expression
-- On PLUS_EQ reduce production expression -> PLUS expression
-- On PLUS reduce production expression -> PLUS expression
-- On PIPE_EQ reduce production expression -> PLUS expression
-- On PIPE reduce production expression -> PLUS expression
-- On PERCENT_EQ reduce production expression -> PLUS expression
-- On MINUS_EQ reduce production expression -> PLUS expression
-- On MINUS reduce production expression -> PLUS expression
-- On LPAREN reduce production expression -> PLUS expression
-- On INF_INF_EQ reduce production expression -> PLUS expression
-- On INF_INF reduce production expression -> PLUS expression
-- On INF_EQ reduce production expression -> PLUS expression
-- On INF reduce production expression -> PLUS expression
-- On EXCLAM_EQ reduce production expression -> PLUS expression
-- On EQ_EQ reduce production expression -> PLUS expression
-- On EQ reduce production expression -> PLUS expression
-- On COMMA reduce production expression -> PLUS expression
-- On CIRC_EQ reduce production expression -> PLUS expression
-- On CIRC reduce production expression -> PLUS expression
-- On ARG_b reduce production expression -> PLUS expression
-- On AND_EQ reduce production expression -> PLUS expression
-- On AND reduce production expression -> PLUS expression

State 165:
## Known stack suffix:
## SIZEOF LPAREN
## LR(1) items:
expression -> SIZEOF LPAREN . typename RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . expression RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN . typename RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> LPAREN . STAR expression RPAREN offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 32
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On INT shift to state 91
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CHAR shift to state 94
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_g shift to state 24
-- On ARG_f shift to state 97
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On typename shift to state 166
-- On type_spec shift to state 101
-- On one_formal shift to state 153
-- On lval shift to state 33
-- On expression shift to state 154
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 166:
## Known stack suffix:
## SIZEOF LPAREN typename
## LR(1) items:
expression -> SIZEOF LPAREN typename . RPAREN [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename . RPAREN expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On RPAREN shift to state 167
## Reductions:

State 167:
## Known stack suffix:
## SIZEOF LPAREN typename RPAREN
## LR(1) items:
expression -> SIZEOF LPAREN typename RPAREN . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> LPAREN typename RPAREN . expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On TILDE shift to state 1
-- On SIZEOF shift to state 3
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 100
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SUP_SUP reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SUP_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SUP reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On STAR_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On STAR reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SLASH_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SLASH reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On SEMICOLON reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On RPAREN reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On RBRACKET reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PLUS_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PLUS reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PIPE_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PIPE reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PERCENT_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On PERCENT reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On MINUS_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On MINUS reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On INF_INF_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On INF_INF reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On INF_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On INF reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On EXCLAM_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On EQ_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On COMMA reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On CIRC_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On CIRC reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On ARROW reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On ARG_b reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On AND_EQ reduce production expression -> SIZEOF LPAREN typename RPAREN
-- On AND reduce production expression -> SIZEOF LPAREN typename RPAREN

State 168:
## Known stack suffix:
## SIZEOF expression
## LR(1) items:
expression -> SIZEOF expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> SIZEOF expression
-- On SUP_SUP reduce production expression -> SIZEOF expression
-- On SUP_EQ reduce production expression -> SIZEOF expression
-- On SUP reduce production expression -> SIZEOF expression
-- On STAR_EQ reduce production expression -> SIZEOF expression
-- On STAR reduce production expression -> SIZEOF expression
-- On SLASH_EQ reduce production expression -> SIZEOF expression
-- On SLASH reduce production expression -> SIZEOF expression
-- On SEMICOLON reduce production expression -> SIZEOF expression
-- On RPAREN reduce production expression -> SIZEOF expression
-- On RBRACKET reduce production expression -> SIZEOF expression
-- On PLUS_EQ reduce production expression -> SIZEOF expression
-- On PLUS reduce production expression -> SIZEOF expression
-- On PIPE_EQ reduce production expression -> SIZEOF expression
-- On PIPE reduce production expression -> SIZEOF expression
-- On PERCENT_EQ reduce production expression -> SIZEOF expression
-- On PERCENT reduce production expression -> SIZEOF expression
-- On MINUS_EQ reduce production expression -> SIZEOF expression
-- On MINUS reduce production expression -> SIZEOF expression
-- On LPAREN reduce production expression -> SIZEOF expression
-- On INF_INF_EQ reduce production expression -> SIZEOF expression
-- On INF_INF reduce production expression -> SIZEOF expression
-- On INF_EQ reduce production expression -> SIZEOF expression
-- On INF reduce production expression -> SIZEOF expression
-- On EXCLAM_EQ reduce production expression -> SIZEOF expression
-- On EQ_EQ reduce production expression -> SIZEOF expression
-- On EQ reduce production expression -> SIZEOF expression
-- On COMMA reduce production expression -> SIZEOF expression
-- On CIRC_EQ reduce production expression -> SIZEOF expression
-- On CIRC reduce production expression -> SIZEOF expression
-- On ARG_b reduce production expression -> SIZEOF expression
-- On AND_EQ reduce production expression -> SIZEOF expression
-- On AND reduce production expression -> SIZEOF expression

State 169:
## Known stack suffix:
## STAR expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> STAR expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production lval -> STAR expression
-- On SUP_SUP reduce production lval -> STAR expression
-- On SUP_EQ reduce production lval -> STAR expression
-- On SUP reduce production lval -> STAR expression
-- On STAR_EQ reduce production lval -> STAR expression
-- On STAR reduce production lval -> STAR expression
-- On SLASH_EQ reduce production lval -> STAR expression
-- On SLASH reduce production lval -> STAR expression
-- On SEMICOLON reduce production lval -> STAR expression
-- On RPAREN reduce production lval -> STAR expression
-- On RBRACKET reduce production lval -> STAR expression
-- On PLUS_EQ reduce production lval -> STAR expression
-- On PLUS reduce production lval -> STAR expression
-- On PIPE_EQ reduce production lval -> STAR expression
-- On PIPE reduce production lval -> STAR expression
-- On PERCENT_EQ reduce production lval -> STAR expression
-- On PERCENT reduce production lval -> STAR expression
-- On MINUS_EQ reduce production lval -> STAR expression
-- On MINUS reduce production lval -> STAR expression
-- On LPAREN reduce production lval -> STAR expression
-- On INF_INF_EQ reduce production lval -> STAR expression
-- On INF_INF reduce production lval -> STAR expression
-- On INF_EQ reduce production lval -> STAR expression
-- On INF reduce production lval -> STAR expression
-- On EXCLAM_EQ reduce production lval -> STAR expression
-- On EQ_EQ reduce production lval -> STAR expression
-- On EQ reduce production lval -> STAR expression
-- On COMMA reduce production lval -> STAR expression
-- On CIRC_EQ reduce production lval -> STAR expression
-- On CIRC reduce production lval -> STAR expression
-- On ARG_b reduce production lval -> STAR expression
-- On AND_EQ reduce production lval -> STAR expression
-- On AND reduce production lval -> STAR expression

State 170:
## Known stack suffix:
## TILDE expression
## LR(1) items:
expression -> TILDE expression . [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PLUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . MINUS expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . argb expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . STAR expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SLASH expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PERCENT expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . AND expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . PIPE expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . CIRC expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH SEMICOLON RPAREN RBRACKET PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ COMMA CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On ARROW shift to state 42
-- On argb shift to state 49
## Reductions:
-- On SUP_SUP_EQ reduce production expression -> TILDE expression
-- On SUP_SUP reduce production expression -> TILDE expression
-- On SUP_EQ reduce production expression -> TILDE expression
-- On SUP reduce production expression -> TILDE expression
-- On STAR_EQ reduce production expression -> TILDE expression
-- On STAR reduce production expression -> TILDE expression
-- On SLASH_EQ reduce production expression -> TILDE expression
-- On SLASH reduce production expression -> TILDE expression
-- On SEMICOLON reduce production expression -> TILDE expression
-- On RPAREN reduce production expression -> TILDE expression
-- On RBRACKET reduce production expression -> TILDE expression
-- On PLUS_EQ reduce production expression -> TILDE expression
-- On PLUS reduce production expression -> TILDE expression
-- On PIPE_EQ reduce production expression -> TILDE expression
-- On PIPE reduce production expression -> TILDE expression
-- On PERCENT_EQ reduce production expression -> TILDE expression
-- On PERCENT reduce production expression -> TILDE expression
-- On MINUS_EQ reduce production expression -> TILDE expression
-- On MINUS reduce production expression -> TILDE expression
-- On LPAREN reduce production expression -> TILDE expression
-- On INF_INF_EQ reduce production expression -> TILDE expression
-- On INF_INF reduce production expression -> TILDE expression
-- On INF_EQ reduce production expression -> TILDE expression
-- On INF reduce production expression -> TILDE expression
-- On EXCLAM_EQ reduce production expression -> TILDE expression
-- On EQ_EQ reduce production expression -> TILDE expression
-- On EQ reduce production expression -> TILDE expression
-- On COMMA reduce production expression -> TILDE expression
-- On CIRC_EQ reduce production expression -> TILDE expression
-- On CIRC reduce production expression -> TILDE expression
-- On ARG_b reduce production expression -> TILDE expression
-- On AND_EQ reduce production expression -> TILDE expression
-- On AND reduce production expression -> TILDE expression

State 171:
## Known stack suffix:
## expression
## LR(1) items:
expression' -> expression . [ # ]
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 172:
## Known stack suffix:
##
## LR(1) items:
instr' -> . instr [ # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 176
-- On instr shift to state 224
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:

State 173:
## Known stack suffix:
## ARG_lo
## LR(1) items:
arglo -> ARG_lo . [ TILDE STAR SIZEOF PLUS MINUS LPAREN IDENT EXCLAM CST_INT ARG_v ARG_u ARG_l ARG_g ARG_e ARG_d AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arglo -> ARG_lo

State 174:
## Known stack suffix:
## ARG_i
## LR(1) items:
instr -> ARG_i . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SEMICOLON shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## ARG_i SEMICOLON
## LR(1) items:
instr -> ARG_i SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> ARG_i SEMICOLON

State 176:
## Known stack suffix:
## lval
## LR(1) items:
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval . EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . PLUS_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . MINUS_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . STAR_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . SLASH_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . PERCENT_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . AND_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . PIPE_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . CIRC_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . INF_INF_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . SUP_SUP_EQ expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . EQ lval LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval . LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SUP_SUP_EQ shift to state 177
-- On STAR_EQ shift to state 180
-- On SLASH_EQ shift to state 183
-- On PLUS_EQ shift to state 186
-- On PIPE_EQ shift to state 189
-- On PERCENT_EQ shift to state 192
-- On MINUS_EQ shift to state 195
-- On LPAREN shift to state 198
-- On INF_INF_EQ shift to state 207
-- On EQ shift to state 210
-- On CIRC_EQ shift to state 218
-- On AND_EQ shift to state 221
## Reductions:
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND reduce production expression -> lval

State 177:
## Known stack suffix:
## lval SUP_SUP_EQ
## LR(1) items:
instr -> lval SUP_SUP_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 178
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 178:
## Known stack suffix:
## lval SUP_SUP_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval SUP_SUP_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 179
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 179:
## Known stack suffix:
## lval SUP_SUP_EQ expression SEMICOLON
## LR(1) items:
instr -> lval SUP_SUP_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval SUP_SUP_EQ expression SEMICOLON

State 180:
## Known stack suffix:
## lval STAR_EQ
## LR(1) items:
instr -> lval STAR_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 181
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 181:
## Known stack suffix:
## lval STAR_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval STAR_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 182
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 182:
## Known stack suffix:
## lval STAR_EQ expression SEMICOLON
## LR(1) items:
instr -> lval STAR_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval STAR_EQ expression SEMICOLON

State 183:
## Known stack suffix:
## lval SLASH_EQ
## LR(1) items:
instr -> lval SLASH_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 184
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 184:
## Known stack suffix:
## lval SLASH_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval SLASH_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 185
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 185:
## Known stack suffix:
## lval SLASH_EQ expression SEMICOLON
## LR(1) items:
instr -> lval SLASH_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval SLASH_EQ expression SEMICOLON

State 186:
## Known stack suffix:
## lval PLUS_EQ
## LR(1) items:
instr -> lval PLUS_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 187
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 187:
## Known stack suffix:
## lval PLUS_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval PLUS_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 188
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 188:
## Known stack suffix:
## lval PLUS_EQ expression SEMICOLON
## LR(1) items:
instr -> lval PLUS_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval PLUS_EQ expression SEMICOLON

State 189:
## Known stack suffix:
## lval PIPE_EQ
## LR(1) items:
instr -> lval PIPE_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 190
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 190:
## Known stack suffix:
## lval PIPE_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval PIPE_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 191
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 191:
## Known stack suffix:
## lval PIPE_EQ expression SEMICOLON
## LR(1) items:
instr -> lval PIPE_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval PIPE_EQ expression SEMICOLON

State 192:
## Known stack suffix:
## lval PERCENT_EQ
## LR(1) items:
instr -> lval PERCENT_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 193
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 193:
## Known stack suffix:
## lval PERCENT_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval PERCENT_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 194
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 194:
## Known stack suffix:
## lval PERCENT_EQ expression SEMICOLON
## LR(1) items:
instr -> lval PERCENT_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval PERCENT_EQ expression SEMICOLON

State 195:
## Known stack suffix:
## lval MINUS_EQ
## LR(1) items:
instr -> lval MINUS_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 196
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 196:
## Known stack suffix:
## lval MINUS_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval MINUS_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 197
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 197:
## Known stack suffix:
## lval MINUS_EQ expression SEMICOLON
## LR(1) items:
instr -> lval MINUS_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval MINUS_EQ expression SEMICOLON

State 198:
## Known stack suffix:
## lval LPAREN
## LR(1) items:
instr -> lval LPAREN . arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 203
-- On arguments shift to state 204
-- On argu shift to state 58
## Reductions:
-- On RPAREN reduce production arguments ->

State 199:
## Known stack suffix:
## ARG_E
## LR(1) items:
arguments_ne -> ARG_E . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments_ne -> ARG_E

State 200:
## Known stack suffix:
## expression
## LR(1) items:
arguments_ne -> expression . [ RPAREN ]
arguments_ne -> expression . COMMA arguments_ne [ RPAREN ]
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ COMMA CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On COMMA shift to state 201
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:
-- On RPAREN reduce production arguments_ne -> expression

State 201:
## Known stack suffix:
## expression COMMA
## LR(1) items:
arguments_ne -> expression COMMA . arguments_ne [ RPAREN ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 202
-- On argu shift to state 58
## Reductions:

State 202:
## Known stack suffix:
## expression COMMA arguments_ne
## LR(1) items:
arguments_ne -> expression COMMA arguments_ne . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments_ne -> expression COMMA arguments_ne

State 203:
## Known stack suffix:
## arguments_ne
## LR(1) items:
arguments -> arguments_ne . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arguments -> arguments_ne

State 204:
## Known stack suffix:
## lval LPAREN arguments
## LR(1) items:
instr -> lval LPAREN arguments . RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On RPAREN shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## lval LPAREN arguments RPAREN
## LR(1) items:
instr -> lval LPAREN arguments RPAREN . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SEMICOLON shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## lval LPAREN arguments RPAREN SEMICOLON
## LR(1) items:
instr -> lval LPAREN arguments RPAREN SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval LPAREN arguments RPAREN SEMICOLON

State 207:
## Known stack suffix:
## lval INF_INF_EQ
## LR(1) items:
instr -> lval INF_INF_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 208
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 208:
## Known stack suffix:
## lval INF_INF_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval INF_INF_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 209
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 209:
## Known stack suffix:
## lval INF_INF_EQ expression SEMICOLON
## LR(1) items:
instr -> lval INF_INF_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval INF_INF_EQ expression SEMICOLON

State 210:
## Known stack suffix:
## lval EQ
## LR(1) items:
instr -> lval EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr -> lval EQ . lval LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 211
-- On expression shift to state 216
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 211:
## Known stack suffix:
## lval EQ lval
## LR(1) items:
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval EQ lval . LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On LPAREN shift to state 212
## Reductions:
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On SEMICOLON reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND reduce production expression -> lval

State 212:
## Known stack suffix:
## lval EQ lval LPAREN
## LR(1) items:
instr -> lval EQ lval LPAREN . arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 203
-- On arguments shift to state 213
-- On argu shift to state 58
## Reductions:
-- On RPAREN reduce production arguments ->

State 213:
## Known stack suffix:
## lval EQ lval LPAREN arguments
## LR(1) items:
instr -> lval EQ lval LPAREN arguments . RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On RPAREN shift to state 214
## Reductions:

State 214:
## Known stack suffix:
## lval EQ lval LPAREN arguments RPAREN
## LR(1) items:
instr -> lval EQ lval LPAREN arguments RPAREN . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SEMICOLON shift to state 215
## Reductions:

State 215:
## Known stack suffix:
## lval EQ lval LPAREN arguments RPAREN SEMICOLON
## LR(1) items:
instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval EQ lval LPAREN arguments RPAREN SEMICOLON

State 216:
## Known stack suffix:
## lval EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS LPAREN INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 217
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 217:
## Known stack suffix:
## lval EQ expression SEMICOLON
## LR(1) items:
instr -> lval EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval EQ expression SEMICOLON

State 218:
## Known stack suffix:
## lval CIRC_EQ
## LR(1) items:
instr -> lval CIRC_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 219
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 219:
## Known stack suffix:
## lval CIRC_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval CIRC_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 220
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 220:
## Known stack suffix:
## lval CIRC_EQ expression SEMICOLON
## LR(1) items:
instr -> lval CIRC_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval CIRC_EQ expression SEMICOLON

State 221:
## Known stack suffix:
## lval AND_EQ
## LR(1) items:
instr -> lval AND_EQ . expression SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 222
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 222:
## Known stack suffix:
## lval AND_EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> lval AND_EQ expression . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On SEMICOLON shift to state 223
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 223:
## Known stack suffix:
## lval AND_EQ expression SEMICOLON
## LR(1) items:
instr -> lval AND_EQ expression SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> lval AND_EQ expression SEMICOLON

State 224:
## Known stack suffix:
## instr
## LR(1) items:
instr' -> instr . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept instr

State 225:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP_EQ SUP_SUP SUP_EQ SUP STAR_EQ STAR SLASH_EQ SLASH PLUS_EQ PLUS PIPE_EQ PIPE PERCENT_EQ PERCENT MINUS_EQ MINUS LPAREN INF_INF_EQ INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ EQ CIRC_EQ CIRC ARROW ARG_b AND_EQ AND # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 226:
## Known stack suffix:
## arglo
## LR(1) items:
instr -> arglo . lval LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 227
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 227:
## Known stack suffix:
## arglo lval
## LR(1) items:
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
instr -> arglo lval . LPAREN arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On LPAREN shift to state 228
## Reductions:
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND reduce production expression -> lval

State 228:
## Known stack suffix:
## arglo lval LPAREN
## LR(1) items:
instr -> arglo lval LPAREN . arguments RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 203
-- On arguments shift to state 229
-- On argu shift to state 58
## Reductions:
-- On RPAREN reduce production arguments ->

State 229:
## Known stack suffix:
## arglo lval LPAREN arguments
## LR(1) items:
instr -> arglo lval LPAREN arguments . RPAREN SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On RPAREN shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## arglo lval LPAREN arguments RPAREN
## LR(1) items:
instr -> arglo lval LPAREN arguments RPAREN . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SEMICOLON shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## arglo lval LPAREN arguments RPAREN SEMICOLON
## LR(1) items:
instr -> arglo lval LPAREN arguments RPAREN SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr -> arglo lval LPAREN arguments RPAREN SEMICOLON

State 232:
## Known stack suffix:
##
## LR(1) items:
lval' -> . lval [ # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 233
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 233:
## Known stack suffix:
## lval
## LR(1) items:
lval' -> lval . [ # ]
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> lval

State 234:
## Known stack suffix:
##
## LR(1) items:
offset' -> . offset [ # ]
## Transitions:
-- On LBRACKET shift to state 36
-- On DOT shift to state 44
-- On ARG_o shift to state 46
-- On offset shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## offset
## LR(1) items:
offset' -> offset . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept offset

State 236:
## Known stack suffix:
##
## LR(1) items:
stmt' -> . stmt [ # ]
## Transitions:
-- On WHILE shift to state 237
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LBRACE shift to state 244
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On stmt shift to state 279
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:

State 237:
## Known stack suffix:
## WHILE
## LR(1) items:
stmt -> WHILE . LPAREN expression RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On LPAREN shift to state 238
## Reductions:

State 238:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
stmt -> WHILE LPAREN . expression RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 239
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 239:
## Known stack suffix:
## WHILE LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
stmt -> WHILE LPAREN expression . RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RPAREN shift to state 240
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 240:
## Known stack suffix:
## WHILE LPAREN expression RPAREN
## LR(1) items:
stmt -> WHILE LPAREN expression RPAREN . stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On WHILE shift to state 237
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LBRACE shift to state 244
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On stmt shift to state 278
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:

State 241:
## Known stack suffix:
## RETURN
## LR(1) items:
stmt -> RETURN . exp_opt SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_eo shift to state 133
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 134
-- On exp_opt shift to state 242
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:
-- On SEMICOLON reduce production exp_opt ->

State 242:
## Known stack suffix:
## RETURN exp_opt
## LR(1) items:
stmt -> RETURN exp_opt . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SEMICOLON shift to state 243
## Reductions:

State 243:
## Known stack suffix:
## RETURN exp_opt SEMICOLON
## LR(1) items:
stmt -> RETURN exp_opt SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> RETURN exp_opt SEMICOLON

State 244:
## Known stack suffix:
## LBRACE
## LR(1) items:
stmt -> LBRACE . stmt_list RBRACE [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 261
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 262
-- On stmt_list shift to state 276
-- On stmt shift to state 274
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:
-- On RBRACE reduce production stmt_list ->

State 245:
## Known stack suffix:
## IF
## LR(1) items:
stmt -> IF . LPAREN expression RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF . LPAREN expression RPAREN stmt ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On LPAREN shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
stmt -> IF LPAREN . expression RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF LPAREN . expression RPAREN stmt ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 247
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 247:
## Known stack suffix:
## IF LPAREN expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH RPAREN PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
stmt -> IF LPAREN expression . RPAREN stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF LPAREN expression . RPAREN stmt ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On RPAREN shift to state 248
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:

State 248:
## Known stack suffix:
## IF LPAREN expression RPAREN
## LR(1) items:
stmt -> IF LPAREN expression RPAREN . stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF LPAREN expression RPAREN . stmt ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On WHILE shift to state 237
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LBRACE shift to state 244
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On stmt shift to state 255
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:

State 249:
## Known stack suffix:
## CONTINUE
## LR(1) items:
stmt -> CONTINUE . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SEMICOLON shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## CONTINUE SEMICOLON
## LR(1) items:
stmt -> CONTINUE SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> CONTINUE SEMICOLON

State 251:
## Known stack suffix:
## BREAK
## LR(1) items:
stmt -> BREAK . SEMICOLON [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On SEMICOLON shift to state 252
## Reductions:

State 252:
## Known stack suffix:
## BREAK SEMICOLON
## LR(1) items:
stmt -> BREAK SEMICOLON . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> BREAK SEMICOLON

State 253:
## Known stack suffix:
## ARG_s
## LR(1) items:
stmt -> ARG_s . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> ARG_s

State 254:
## Known stack suffix:
## ARG_I
## LR(1) items:
instr_list -> ARG_I . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr_list -> ARG_I

State 255:
## Known stack suffix:
## IF LPAREN expression RPAREN stmt
## LR(1) items:
stmt -> IF LPAREN expression RPAREN stmt . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
stmt -> IF LPAREN expression RPAREN stmt . ELSE stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On ELSE shift to state 256
## Reductions:
-- On WHILE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On VOID reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On UNSIGNED reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On UNION reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On TYPEOF reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On TILDE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On STRUCT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On STAR reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On SIZEOF reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On SHORT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On RETURN reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On RBRACE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On PLUS reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On MINUS reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On LPAREN reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On LONG reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On LBRACE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On INT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On IF reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On IDENT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On FLOAT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On EXCLAM reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On DOUBLE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On CST_INT reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On CONTINUE reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On CHAR reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On BREAK reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_v reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_u reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_t reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_s reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_lo reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_l reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_k reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_i reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_g reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_e reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_d reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_S reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ARG_I reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On AND reduce production stmt -> IF LPAREN expression RPAREN stmt
-- On ALIGNOF reduce production stmt -> IF LPAREN expression RPAREN stmt

State 256:
## Known stack suffix:
## IF LPAREN expression RPAREN stmt ELSE
## LR(1) items:
stmt -> IF LPAREN expression RPAREN stmt ELSE . stmt [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On WHILE shift to state 237
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LBRACE shift to state 244
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On stmt shift to state 257
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:

State 257:
## Known stack suffix:
## IF LPAREN expression RPAREN stmt ELSE stmt
## LR(1) items:
stmt -> IF LPAREN expression RPAREN stmt ELSE stmt . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> IF LPAREN expression RPAREN stmt ELSE stmt

State 258:
## Known stack suffix:
## instr_list
## LR(1) items:
stmt -> instr_list . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> instr_list

State 259:
## Known stack suffix:
## instr
## LR(1) items:
instr_list -> instr . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
instr_list -> instr . instr_list [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 176
-- On instr_list shift to state 260
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:
-- On WHILE reduce production instr_list -> instr
-- On VOID reduce production instr_list -> instr
-- On UNSIGNED reduce production instr_list -> instr
-- On UNION reduce production instr_list -> instr
-- On TYPEOF reduce production instr_list -> instr
-- On STRUCT reduce production instr_list -> instr
-- On SHORT reduce production instr_list -> instr
-- On RETURN reduce production instr_list -> instr
-- On RBRACE reduce production instr_list -> instr
-- On LONG reduce production instr_list -> instr
-- On LBRACE reduce production instr_list -> instr
-- On INT reduce production instr_list -> instr
-- On IF reduce production instr_list -> instr
-- On FLOAT reduce production instr_list -> instr
-- On ELSE reduce production instr_list -> instr
-- On DOUBLE reduce production instr_list -> instr
-- On CONTINUE reduce production instr_list -> instr
-- On CHAR reduce production instr_list -> instr
-- On BREAK reduce production instr_list -> instr
-- On ARG_t reduce production instr_list -> instr
-- On ARG_s reduce production instr_list -> instr
-- On ARG_k reduce production instr_list -> instr
-- On ARG_S reduce production instr_list -> instr

State 260:
## Known stack suffix:
## instr instr_list
## LR(1) items:
instr_list -> instr instr_list . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production instr_list -> instr instr_list

State 261:
## Known stack suffix:
## ARG_S
## LR(1) items:
stmt_list -> ARG_S . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt_list -> ARG_S

State 262:
## Known stack suffix:
## type_spec
## LR(1) items:
stmt_list -> type_spec . attributes decl maybe_init SEMICOLON stmt_list [ RBRACE ]
## Transitions:
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 263
-- On attribute shift to state 149
## Reductions:
-- On STAR reduce production attributes ->
-- On SEMICOLON reduce production attributes ->
-- On LPAREN reduce production attributes ->
-- On LBRACKET reduce production attributes ->
-- On IDENT reduce production attributes ->
-- On EQ reduce production attributes ->

State 263:
## Known stack suffix:
## type_spec attributes
## LR(1) items:
stmt_list -> type_spec attributes . decl maybe_init SEMICOLON stmt_list [ RBRACE ]
## Transitions:
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 264
## Reductions:
-- On SEMICOLON reduce production direct_decl ->
-- On LBRACKET reduce production direct_decl ->
-- On EQ reduce production direct_decl ->

State 264:
## Known stack suffix:
## type_spec attributes decl
## LR(1) items:
stmt_list -> type_spec attributes decl . maybe_init SEMICOLON stmt_list [ RBRACE ]
## Transitions:
-- On EQ shift to state 265
-- On maybe_init shift to state 271
## Reductions:
-- On SEMICOLON reduce production maybe_init ->

State 265:
## Known stack suffix:
## EQ
## LR(1) items:
maybe_init -> EQ . expression [ SEMICOLON ]
maybe_init -> EQ . lval LPAREN arguments RPAREN [ SEMICOLON ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 266
-- On expression shift to state 270
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
## Reductions:

State 266:
## Known stack suffix:
## EQ lval
## LR(1) items:
expression -> lval . [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
maybe_init -> EQ lval . LPAREN arguments RPAREN [ SEMICOLON ]
## Transitions:
-- On LPAREN shift to state 267
## Reductions:
-- On SUP_SUP reduce production expression -> lval
-- On SUP_EQ reduce production expression -> lval
-- On SUP reduce production expression -> lval
-- On STAR reduce production expression -> lval
-- On SLASH reduce production expression -> lval
-- On SEMICOLON reduce production expression -> lval
-- On PLUS reduce production expression -> lval
-- On PIPE reduce production expression -> lval
-- On PERCENT reduce production expression -> lval
-- On MINUS reduce production expression -> lval
-- On INF_INF reduce production expression -> lval
-- On INF_EQ reduce production expression -> lval
-- On INF reduce production expression -> lval
-- On EXCLAM_EQ reduce production expression -> lval
-- On EQ_EQ reduce production expression -> lval
-- On CIRC reduce production expression -> lval
-- On ARROW reduce production expression -> lval
-- On ARG_b reduce production expression -> lval
-- On AND reduce production expression -> lval

State 267:
## Known stack suffix:
## EQ lval LPAREN
## LR(1) items:
maybe_init -> EQ lval LPAREN . arguments RPAREN [ SEMICOLON ]
## Transitions:
-- On TILDE shift to state 1
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On IDENT shift to state 18
-- On EXCLAM shift to state 19
-- On CST_INT shift to state 20
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_l shift to state 23
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_E shift to state 199
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On lval shift to state 33
-- On expression shift to state 200
-- On constant shift to state 55
-- On argv shift to state 56
-- On arguments_ne shift to state 203
-- On arguments shift to state 268
-- On argu shift to state 58
## Reductions:
-- On RPAREN reduce production arguments ->

State 268:
## Known stack suffix:
## EQ lval LPAREN arguments
## LR(1) items:
maybe_init -> EQ lval LPAREN arguments . RPAREN [ SEMICOLON ]
## Transitions:
-- On RPAREN shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## EQ lval LPAREN arguments RPAREN
## LR(1) items:
maybe_init -> EQ lval LPAREN arguments RPAREN . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production maybe_init -> EQ lval LPAREN arguments RPAREN

State 270:
## Known stack suffix:
## EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . MINUS expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . argb expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . STAR expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SLASH expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PERCENT expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . AND expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . PIPE expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . CIRC expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EQ_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . EXCLAM_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . INF_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
expression -> expression . SUP_EQ expression [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
lval -> expression . ARROW IDENT offset [ SUP_SUP SUP_EQ SUP STAR SLASH SEMICOLON PLUS PIPE PERCENT MINUS LPAREN INF_INF INF_EQ INF EXCLAM_EQ EQ_EQ CIRC ARROW ARG_b AND ]
maybe_init -> EQ expression . [ SEMICOLON ]
## Transitions:
-- On SUP_SUP shift to state 38
-- On SUP_EQ shift to state 51
-- On SUP shift to state 68
-- On STAR shift to state 40
-- On SLASH shift to state 53
-- On PLUS shift to state 60
-- On PIPE shift to state 70
-- On PERCENT shift to state 62
-- On MINUS shift to state 64
-- On INF_INF shift to state 66
-- On INF_EQ shift to state 72
-- On INF shift to state 74
-- On EXCLAM_EQ shift to state 76
-- On EQ_EQ shift to state 78
-- On CIRC shift to state 80
-- On ARROW shift to state 42
-- On ARG_b shift to state 86
-- On AND shift to state 82
-- On argb shift to state 49
## Reductions:
-- On SEMICOLON reduce production maybe_init -> EQ expression

State 271:
## Known stack suffix:
## type_spec attributes decl maybe_init
## LR(1) items:
stmt_list -> type_spec attributes decl maybe_init . SEMICOLON stmt_list [ RBRACE ]
## Transitions:
-- On SEMICOLON shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## type_spec attributes decl maybe_init SEMICOLON
## LR(1) items:
stmt_list -> type_spec attributes decl maybe_init SEMICOLON . stmt_list [ RBRACE ]
## Transitions:
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 261
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 262
-- On stmt_list shift to state 273
-- On stmt shift to state 274
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:
-- On RBRACE reduce production stmt_list ->

State 273:
## Known stack suffix:
## type_spec attributes decl maybe_init SEMICOLON stmt_list
## LR(1) items:
stmt_list -> type_spec attributes decl maybe_init SEMICOLON stmt_list . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt_list -> type_spec attributes decl maybe_init SEMICOLON stmt_list

State 274:
## Known stack suffix:
## stmt
## LR(1) items:
stmt_list -> stmt . stmt_list [ RBRACE ]
## Transitions:
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 261
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 262
-- On stmt_list shift to state 275
-- On stmt shift to state 274
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:
-- On RBRACE reduce production stmt_list ->

State 275:
## Known stack suffix:
## stmt stmt_list
## LR(1) items:
stmt_list -> stmt stmt_list . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt_list -> stmt stmt_list

State 276:
## Known stack suffix:
## LBRACE stmt_list
## LR(1) items:
stmt -> LBRACE stmt_list . RBRACE [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
-- On RBRACE shift to state 277
## Reductions:

State 277:
## Known stack suffix:
## LBRACE stmt_list RBRACE
## LR(1) items:
stmt -> LBRACE stmt_list RBRACE . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> LBRACE stmt_list RBRACE

State 278:
## Known stack suffix:
## WHILE LPAREN expression RPAREN stmt
## LR(1) items:
stmt -> WHILE LPAREN expression RPAREN stmt . [ WHILE VOID UNSIGNED UNION TYPEOF TILDE STRUCT STAR SIZEOF SHORT RETURN RBRACE PLUS MINUS LPAREN LONG LBRACE INT IF IDENT FLOAT EXCLAM ELSE DOUBLE CST_INT CONTINUE CHAR BREAK ARG_v ARG_u ARG_t ARG_s ARG_lo ARG_l ARG_k ARG_i ARG_g ARG_e ARG_d ARG_S ARG_I AND ALIGNOF # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production stmt -> WHILE LPAREN expression RPAREN stmt

State 279:
## Known stack suffix:
## stmt
## LR(1) items:
stmt' -> stmt . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept stmt

State 280:
## Known stack suffix:
##
## LR(1) items:
stmt_list' -> . stmt_list [ # ]
## Transitions:
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 281
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 282
-- On stmt_list shift to state 290
-- On stmt shift to state 288
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:

State 281:
## Known stack suffix:
## ARG_S
## LR(1) items:
stmt_list -> ARG_S . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production stmt_list -> ARG_S

State 282:
## Known stack suffix:
## type_spec
## LR(1) items:
stmt_list -> type_spec . attributes decl maybe_init SEMICOLON stmt_list [ # ]
## Transitions:
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 283
-- On attribute shift to state 149
## Reductions:
-- On STAR reduce production attributes ->
-- On SEMICOLON reduce production attributes ->
-- On LPAREN reduce production attributes ->
-- On LBRACKET reduce production attributes ->
-- On IDENT reduce production attributes ->
-- On EQ reduce production attributes ->

State 283:
## Known stack suffix:
## type_spec attributes
## LR(1) items:
stmt_list -> type_spec attributes . decl maybe_init SEMICOLON stmt_list [ # ]
## Transitions:
-- On STAR shift to state 126
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 131
-- On decl shift to state 284
## Reductions:
-- On SEMICOLON reduce production direct_decl ->
-- On LBRACKET reduce production direct_decl ->
-- On EQ reduce production direct_decl ->

State 284:
## Known stack suffix:
## type_spec attributes decl
## LR(1) items:
stmt_list -> type_spec attributes decl . maybe_init SEMICOLON stmt_list [ # ]
## Transitions:
-- On EQ shift to state 265
-- On maybe_init shift to state 285
## Reductions:
-- On SEMICOLON reduce production maybe_init ->

State 285:
## Known stack suffix:
## type_spec attributes decl maybe_init
## LR(1) items:
stmt_list -> type_spec attributes decl maybe_init . SEMICOLON stmt_list [ # ]
## Transitions:
-- On SEMICOLON shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## type_spec attributes decl maybe_init SEMICOLON
## LR(1) items:
stmt_list -> type_spec attributes decl maybe_init SEMICOLON . stmt_list [ # ]
## Transitions:
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 281
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 282
-- On stmt_list shift to state 287
-- On stmt shift to state 288
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:

State 287:
## Known stack suffix:
## type_spec attributes decl maybe_init SEMICOLON stmt_list
## LR(1) items:
stmt_list -> type_spec attributes decl maybe_init SEMICOLON stmt_list . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production stmt_list -> type_spec attributes decl maybe_init SEMICOLON stmt_list

State 288:
## Known stack suffix:
## stmt
## LR(1) items:
stmt_list -> stmt . stmt_list [ # ]
## Transitions:
-- On WHILE shift to state 237
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On TILDE shift to state 1
-- On STRUCT shift to state 30
-- On STAR shift to state 2
-- On SIZEOF shift to state 3
-- On SHORT shift to state 88
-- On RETURN shift to state 241
-- On PLUS shift to state 4
-- On MINUS shift to state 5
-- On LPAREN shift to state 6
-- On LONG shift to state 89
-- On LBRACE shift to state 244
-- On INT shift to state 91
-- On IF shift to state 245
-- On IDENT shift to state 18
-- On FLOAT shift to state 92
-- On EXCLAM shift to state 19
-- On DOUBLE shift to state 93
-- On CST_INT shift to state 20
-- On CONTINUE shift to state 249
-- On CHAR shift to state 94
-- On BREAK shift to state 251
-- On ARG_v shift to state 21
-- On ARG_u shift to state 22
-- On ARG_t shift to state 95
-- On ARG_s shift to state 253
-- On ARG_lo shift to state 173
-- On ARG_l shift to state 23
-- On ARG_k shift to state 96
-- On ARG_i shift to state 174
-- On ARG_g shift to state 24
-- On ARG_e shift to state 25
-- On ARG_d shift to state 26
-- On ARG_S shift to state 281
-- On ARG_I shift to state 254
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On type_spec shift to state 282
-- On stmt_list shift to state 289
-- On stmt shift to state 288
-- On lval shift to state 176
-- On instr_list shift to state 258
-- On instr shift to state 259
-- On expression shift to state 225
-- On constant shift to state 55
-- On argv shift to state 56
-- On argu shift to state 58
-- On arglo shift to state 226
## Reductions:

State 289:
## Known stack suffix:
## stmt stmt_list
## LR(1) items:
stmt_list -> stmt stmt_list . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production stmt_list -> stmt stmt_list

State 290:
## Known stack suffix:
## stmt_list
## LR(1) items:
stmt_list' -> stmt_list . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept stmt_list

State 291:
## Known stack suffix:
##
## LR(1) items:
typename' -> . typename [ # ]
## Transitions:
-- On VOID shift to state 7
-- On UNSIGNED shift to state 8
-- On UNION shift to state 14
-- On TYPEOF shift to state 16
-- On STRUCT shift to state 30
-- On SHORT shift to state 88
-- On LONG shift to state 89
-- On INT shift to state 91
-- On FLOAT shift to state 92
-- On DOUBLE shift to state 93
-- On CHAR shift to state 94
-- On ARG_t shift to state 95
-- On ARG_k shift to state 96
-- On ARG_f shift to state 292
-- On typename shift to state 293
-- On type_spec shift to state 294
-- On one_formal shift to state 301
## Reductions:

State 292:
## Known stack suffix:
## ARG_f
## LR(1) items:
one_formal -> ARG_f . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production one_formal -> ARG_f

State 293:
## Known stack suffix:
## typename
## LR(1) items:
typename' -> typename . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept typename

State 294:
## Known stack suffix:
## type_spec
## LR(1) items:
one_formal -> type_spec . attributes decl [ # ]
## Transitions:
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 295
-- On attribute shift to state 149
## Reductions:
-- On STAR reduce production attributes ->
-- On LPAREN reduce production attributes ->
-- On LBRACKET reduce production attributes ->
-- On IDENT reduce production attributes ->

State 295:
## Known stack suffix:
## type_spec attributes
## LR(1) items:
one_formal -> type_spec attributes . decl [ # ]
## Transitions:
-- On STAR shift to state 296
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 298
-- On decl shift to state 300
## Reductions:
-- On LBRACKET reduce production direct_decl ->

State 296:
## Known stack suffix:
## STAR
## LR(1) items:
decl -> STAR . attributes decl [ # ]
## Transitions:
-- On VOLATILE shift to state 102
-- On RESTRICT shift to state 103
-- On CONST shift to state 104
-- On ATTRIBUTE shift to state 105
-- On ARG_A shift to state 124
-- On attributes shift to state 297
-- On attribute shift to state 149
## Reductions:
-- On STAR reduce production attributes ->
-- On LPAREN reduce production attributes ->
-- On LBRACKET reduce production attributes ->
-- On IDENT reduce production attributes ->

State 297:
## Known stack suffix:
## STAR attributes
## LR(1) items:
decl -> STAR attributes . decl [ # ]
## Transitions:
-- On STAR shift to state 296
-- On LPAREN shift to state 128
-- On IDENT shift to state 130
-- On direct_decl shift to state 298
-- On decl shift to state 299
## Reductions:
-- On LBRACKET reduce production direct_decl ->

State 298:
## Known stack suffix:
## direct_decl
## LR(1) items:
decl -> direct_decl . [ # ]
direct_decl -> direct_decl . LBRACKET exp_opt RBRACKET [ LBRACKET # ]
## Transitions:
-- On LBRACKET shift to state 132
## Reductions:

State 299:
## Known stack suffix:
## STAR attributes decl
## LR(1) items:
decl -> STAR attributes decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production decl -> STAR attributes decl

State 300:
## Known stack suffix:
## type_spec attributes decl
## LR(1) items:
one_formal -> type_spec attributes decl . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production one_formal -> type_spec attributes decl

State 301:
## Known stack suffix:
## one_formal
## LR(1) items:
typename -> one_formal . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production typename -> one_formal

