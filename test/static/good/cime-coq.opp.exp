%{
  open Coq_syntax
  open Gen_terms

  let current_variables = new vars
  let opset = new operators
%}
%start search
%start term_oe
%start theory_oe
%token COLON
%token COMMA
%token END
%token EQUAL
%token ERROR
%token FUNCTION
%token <string> IDENT
%token LEFT_PAR
%token NEWLINE
%token QUIT
%token RIGHTARROW
%token RIGHT_PAR
%token RULE
%token SEARCH
%token SORT
%token TERM
%token THEORY
%type <string> search
%type <string Gen_terms.term> term_oe
%type <string * (string list * int) list * (string * string Gen_terms.term * string Gen_terms.term) list> theory_oe
%%

search:
  _1 = SEARCH _2 = IDENT _3 = comment
    {    ( _2 )}
| _1 = ERROR _2 = comment
    {    ( raise (Client_error _2) )}

theory_oe:
  _1 = THEORY _2 = IDENT _3 = comment _4 = sortp _5 = signature _6 = rule_set _7 = END _8 = comment
    {    ( (_2, _5, _6) )}
| _1 = ERROR _2 = comment
    {    ( raise (Client_error _2) )}

term_oe:
  _1 = TERM _2 = comment _3 = term _4 = NEWLINE _5 = END
    {    ( _3 )}
| _1 = ERROR _2 = comment
    {    ( raise (Client_error _2) )}
| _1 = QUIT _2 = comment
    {    ( raise Quit )}

comment:
  _1 = NEWLINE
    {    ( "" )}
| _1 = IDENT _2 = comment
    {    ( _1^" "^_2 )}
| _1 = punctuation _2 = comment
    {    ( _1^" "^_2 )}

punctuation:
  _1 = RIGHT_PAR
    {    ( ")" )}
| _1 = LEFT_PAR
    {    ( "(" )}
| _1 = COLON
    {    ( ":" )}
| _1 = COMMA
    {    ( "," )}

term:
  _1 = LEFT_PAR _2 = IDENT _3 = term_seq _4 = RIGHT_PAR
    {    ( make_term hash_consing_table _2 _3 )}
| _1 = IDENT
    {    ( if opset#contains _1 then
	make_term hash_consing_table _1 []
      else
	make_var_term hash_consing_table (current_variables#var_of_string _1) )}

term_seq:
  _1 = term
    {    ( [_1] )}
| _1 = term _2 = term_seq
    {    ( _1::_2 )}

sortp:
  _1 = sort
    {    ( [_1] )}
| _1 = sort _2 = sortp
    {    ( _1::_2 )}

sort:
  _1 = SORT _2 = ident_seq _3 = NEWLINE
    {    ( _2 )}

ident_seq:
  _1 = IDENT
    {    ( [_1] )}
| _1 = IDENT _2 = COMMA _3 = ident_seq
    {    ( _1::_3 )}

signature:
  _1 = symbol
    {    ( [_1] )}
| _1 = symbol _2 = signature
    {    ( _1::_2 )}

symbol:
  _1 = FUNCTION _2 = ident_seq _3 = COLON _4 = types _5 = NEWLINE
    {    ( opset#union _2;
      (_2, _4) )}

types:
  _1 = IDENT
    {    ( 0 )}
| _1 = IDENT _2 = RIGHTARROW _3 = types
    {    ( 1+_3 )}

rule_set:
  _1 = rule
    {    ( [_1] )}
| _1 = rule _2 = rule_set
    {    ( _1::_2 )}

rule:
  _1 = RULE _2 = IDENT _3 = term _4 = EQUAL _5 = term _6 = NEWLINE
    {    ( (_2, _3, _5) )}

%%
