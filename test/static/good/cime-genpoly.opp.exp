%{

  open Signatures;;
  open Generic_polynomials;;
  open Genpoly_syntax;;
  open Non_linear_solving;;
  open Finite_domains;;
  open Poly_interp;;

  exception Syntax_error of string

  let gen_var s =
    try
      let n = Listutils.index s !current_poly_vars
      in GenericPolynomials.var n
    with
	Not_found ->
          GenericPolynomials.cte
	    (Fd_polynomials.var (fd_var_id_of_string s))
;;

  let var s =
    try
      let n = Listutils.index s !current_poly_vars
      in IntPolynomials.var n
    with
	Not_found -> raise (Syntax_error ("undefined variable "^s))
;;

%}
%start gen_poly_entry
%start poly_interp_entry
%token COMMA
%token EOF
%token EQUAL
%token EXP
%token <Num.num> INT
%token <User_signatures.symbol_id Marked_dp_criteria.dupl> INTERP
%token MINUS
%token MULT
%token PARDROITE
%token PARGAUCHE
%token PLUS
%token SEMICOLON
%token <string> VAR
%left MINUS PLUS
%left MULT
%nonassoc UMINUS
%right EXP
%type <Generic_polynomials.GenericPolynomials.poly> gen_poly_entry
%type <(User_signatures.symbol_id Marked_dp_criteria.dupl, Poly_interp.IntPolynomials.poly) Signatures.SymbolMap.t > poly_interp_entry
%%

gen_poly_entry:
  _1 = gen_poly _2 = EOF
    {               ( _1 )}

gen_poly:
  _1 = VAR
    {      ( gen_var _1 )}
| _1 = INT
    {      ( GenericPolynomials.cte (Fd_polynomials.cte _1) )}
| _1 = PARGAUCHE _2 = gen_poly _3 = PARDROITE
    {                               ( _2 )}
| _1 = gen_poly _2 = PLUS _3 = gen_poly
    {                           ( GenericPolynomials.add _1 _3 )}
| _1 = gen_poly _2 = MINUS _3 = gen_poly
    {                           ( GenericPolynomials.sub _1 _3 )}
| _1 = MINUS _2 = gen_poly %prec UMINUS
    {                               ( GenericPolynomials.minus _2 )}
| _1 = gen_poly _2 = MULT _3 = gen_poly
    {                           ( GenericPolynomials.mult _1 _3 )}
| _1 = gen_poly _2 = EXP _3 = INT
    {    ( try
	GenericPolynomials.power _1 (Num.int_of_num _3)
      with
	Failure("int_of_big_int") ->
	  failwith "Exponent too large"
    )}

poly_interp_entry:
  _1 = interp _2 = EOF
    {             ( _1 )}

interp:
  
    {                           ( SymbolMap.empty )}
| _1 = symbol_interp _2 = EQUAL _3 = poly _4 = SEMICOLON _5 = interp
    {                           ( SymbolMap.add _1 _3 _5 )}

symbol_interp:
  _1 = INTERP
    {                            ( current_poly_vars := []; _1 )}
| _1 = INTERP _2 = PARGAUCHE _3 = vars
    {                            ( current_poly_vars := _3; _1 )}

vars:
  _1 = VAR _2 = PARDROITE
    {                           ( [_1] )}
| _1 = VAR _2 = COMMA _3 = vars
    {                           ( _1::_3 )}

poly:
  _1 = VAR
    {                           ( var _1 )}
| _1 = INT
    {                           ( IntPolynomials.cte _1 )}
| _1 = PARGAUCHE _2 = poly _3 = PARDROITE
    {                           ( _2 )}
| _1 = poly _2 = PLUS _3 = poly
    {                           ( IntPolynomials.add _1 _3 )}
| _1 = poly _2 = MINUS _3 = poly
    {                           ( IntPolynomials.sub _1 _3 )}
| _1 = MINUS _2 = poly %prec UMINUS
    {                           ( IntPolynomials.minus _2 )}
| _1 = poly _2 = MULT _3 = poly
    {                           ( IntPolynomials.mult _1 _3 )}
| _1 = poly _2 = EXP _3 = INT
    {    ( try
	IntPolynomials.power _1 (Num.int_of_num _3)
      with
	Failure("int_of_big_int") ->
	  failwith "Exponent too large"
    )}

%%
