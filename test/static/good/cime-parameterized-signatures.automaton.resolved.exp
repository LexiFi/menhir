State 0:
## Known stack suffix:
##
## LR(1) items:
cword_eof' -> . cword_eof [ # ]
## Transitions:
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 21
-- On simple_word shift to state 25
-- On letter shift to state 32
-- On factor shift to state 33
-- On cword_eof shift to state 35
-- On cword shift to state 36
## Reductions:
-- On PIPE reduce production word ->
-- On EOF reduce production word ->

State 1:
## Known stack suffix:
## LPAR
## LR(1) items:
factor -> LPAR . simple_word RPAR POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On IDENT shift to state 2
-- On simple_word shift to state 7
-- On letter shift to state 12
## Reductions:

State 2:
## Known stack suffix:
## IDENT
## LR(1) items:
letter -> IDENT . expr_l [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On FORMULA shift to state 3
-- On expr_l shift to state 4
-- On expr shift to state 5
## Reductions:
-- On SEMICOLON reduce production expr_l ->
-- On RPAR reduce production expr_l ->
-- On POWER reduce production expr_l ->
-- On PIPE reduce production expr_l ->
-- On LPAR reduce production expr_l ->
-- On IDENT reduce production expr_l ->
-- On FP reduce production expr_l ->
-- On EOF reduce production expr_l ->
-- On ARROW reduce production expr_l ->

State 3:
## Known stack suffix:
## FORMULA
## LR(1) items:
expr -> FORMULA . [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP FORMULA EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> FORMULA

State 4:
## Known stack suffix:
## IDENT expr_l
## LR(1) items:
letter -> IDENT expr_l . [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production letter -> IDENT expr_l

State 5:
## Known stack suffix:
## expr
## LR(1) items:
expr_l -> expr . expr_l [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On FORMULA shift to state 3
-- On expr_l shift to state 6
-- On expr shift to state 5
## Reductions:
-- On SEMICOLON reduce production expr_l ->
-- On RPAR reduce production expr_l ->
-- On POWER reduce production expr_l ->
-- On PIPE reduce production expr_l ->
-- On LPAR reduce production expr_l ->
-- On IDENT reduce production expr_l ->
-- On FP reduce production expr_l ->
-- On EOF reduce production expr_l ->
-- On ARROW reduce production expr_l ->

State 6:
## Known stack suffix:
## expr expr_l
## LR(1) items:
expr_l -> expr expr_l . [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr_l -> expr expr_l

State 7:
## Known stack suffix:
## LPAR simple_word
## LR(1) items:
factor -> LPAR simple_word . RPAR POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
simple_word -> simple_word . letter [ RPAR IDENT ]
## Transitions:
-- On RPAR shift to state 8
-- On IDENT shift to state 2
-- On letter shift to state 11
## Reductions:

State 8:
## Known stack suffix:
## LPAR simple_word RPAR
## LR(1) items:
factor -> LPAR simple_word RPAR . POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On POWER shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## LPAR simple_word RPAR POWER
## LR(1) items:
factor -> LPAR simple_word RPAR POWER . expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On FORMULA shift to state 3
-- On expr shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## LPAR simple_word RPAR POWER expr
## LR(1) items:
factor -> LPAR simple_word RPAR POWER expr . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production factor -> LPAR simple_word RPAR POWER expr

State 11:
## Known stack suffix:
## simple_word letter
## LR(1) items:
simple_word -> simple_word letter . [ RPAR IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_word -> simple_word letter

State 12:
## Known stack suffix:
## letter
## LR(1) items:
simple_word -> letter . [ RPAR IDENT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_word -> letter

State 13:
## Known stack suffix:
## FP
## LR(1) items:
factor -> FP . FORMULA expr expr LPAR simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
factor -> FP . FORMULA expr expr letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On FORMULA shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## FP FORMULA
## LR(1) items:
factor -> FP FORMULA . expr expr LPAR simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
factor -> FP FORMULA . expr expr letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On FORMULA shift to state 3
-- On expr shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## FP FORMULA expr
## LR(1) items:
factor -> FP FORMULA expr . expr LPAR simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
factor -> FP FORMULA expr . expr letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On FORMULA shift to state 3
-- On expr shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## FP FORMULA expr expr
## LR(1) items:
factor -> FP FORMULA expr expr . LPAR simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
factor -> FP FORMULA expr expr . letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On LPAR shift to state 17
-- On IDENT shift to state 2
-- On letter shift to state 20
## Reductions:

State 17:
## Known stack suffix:
## FP FORMULA expr expr LPAR
## LR(1) items:
factor -> FP FORMULA expr expr LPAR . simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On IDENT shift to state 2
-- On simple_word shift to state 18
-- On letter shift to state 12
## Reductions:

State 18:
## Known stack suffix:
## FP FORMULA expr expr LPAR simple_word
## LR(1) items:
factor -> FP FORMULA expr expr LPAR simple_word . RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
simple_word -> simple_word . letter [ RPAR IDENT ]
## Transitions:
-- On RPAR shift to state 19
-- On IDENT shift to state 2
-- On letter shift to state 11
## Reductions:

State 19:
## Known stack suffix:
## FP FORMULA expr expr LPAR simple_word RPAR
## LR(1) items:
factor -> FP FORMULA expr expr LPAR simple_word RPAR . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production factor -> FP FORMULA expr expr LPAR simple_word RPAR

State 20:
## Known stack suffix:
## FP FORMULA expr expr letter
## LR(1) items:
factor -> FP FORMULA expr expr letter . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production factor -> FP FORMULA expr expr letter

State 21:
## Known stack suffix:
## word
## LR(1) items:
cword -> word . [ EOF ]
cword -> word . PIPE constr [ EOF ]
## Transitions:
-- On PIPE shift to state 22
## Reductions:
-- On EOF reduce production cword -> word

State 22:
## Known stack suffix:
## word PIPE
## LR(1) items:
cword -> word PIPE . constr [ EOF ]
## Transitions:
-- On FORMULA shift to state 23
-- On constr shift to state 24
## Reductions:

State 23:
## Known stack suffix:
## FORMULA
## LR(1) items:
constr -> FORMULA . [ SEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production constr -> FORMULA

State 24:
## Known stack suffix:
## word PIPE constr
## LR(1) items:
cword -> word PIPE constr . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cword -> word PIPE constr

State 25:
## Known stack suffix:
## simple_word
## LR(1) items:
simple_word -> simple_word . letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
word -> simple_word . word_no_simple [ SEMICOLON PIPE EOF ARROW ]
## Transitions:
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word_no_simple shift to state 26
-- On letter shift to state 27
-- On factor shift to state 30
## Reductions:
-- On SEMICOLON reduce production word_no_simple ->
-- On PIPE reduce production word_no_simple ->
-- On EOF reduce production word_no_simple ->
-- On ARROW reduce production word_no_simple ->

State 26:
## Known stack suffix:
## simple_word word_no_simple
## LR(1) items:
word -> simple_word word_no_simple . [ SEMICOLON PIPE EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production word -> simple_word word_no_simple

State 27:
## Known stack suffix:
## simple_word letter
## LR(1) items:
factor -> letter . POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
simple_word -> simple_word letter . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On POWER shift to state 28
## Reductions:
-- On SEMICOLON reduce production simple_word -> simple_word letter
-- On PIPE reduce production simple_word -> simple_word letter
-- On LPAR reduce production simple_word -> simple_word letter
-- On IDENT reduce production simple_word -> simple_word letter
-- On FP reduce production simple_word -> simple_word letter
-- On EOF reduce production simple_word -> simple_word letter
-- On ARROW reduce production simple_word -> simple_word letter

State 28:
## Known stack suffix:
## letter POWER
## LR(1) items:
factor -> letter POWER . expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On FORMULA shift to state 3
-- On expr shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## letter POWER expr
## LR(1) items:
factor -> letter POWER expr . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production factor -> letter POWER expr

State 30:
## Known stack suffix:
## factor
## LR(1) items:
word_no_simple -> factor . word [ SEMICOLON PIPE EOF ARROW ]
## Transitions:
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 31
-- On simple_word shift to state 25
-- On letter shift to state 32
-- On factor shift to state 33
## Reductions:
-- On SEMICOLON reduce production word ->
-- On PIPE reduce production word ->
-- On EOF reduce production word ->
-- On ARROW reduce production word ->

State 31:
## Known stack suffix:
## factor word
## LR(1) items:
word_no_simple -> factor word . [ SEMICOLON PIPE EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production word_no_simple -> factor word

State 32:
## Known stack suffix:
## letter
## LR(1) items:
factor -> letter . POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
simple_word -> letter . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
## Transitions:
-- On POWER shift to state 28
## Reductions:
-- On SEMICOLON reduce production simple_word -> letter
-- On PIPE reduce production simple_word -> letter
-- On LPAR reduce production simple_word -> letter
-- On IDENT reduce production simple_word -> letter
-- On FP reduce production simple_word -> letter
-- On EOF reduce production simple_word -> letter
-- On ARROW reduce production simple_word -> letter

State 33:
## Known stack suffix:
## factor
## LR(1) items:
word -> factor . word [ SEMICOLON PIPE EOF ARROW ]
## Transitions:
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 34
-- On simple_word shift to state 25
-- On letter shift to state 32
-- On factor shift to state 33
## Reductions:
-- On SEMICOLON reduce production word ->
-- On PIPE reduce production word ->
-- On EOF reduce production word ->
-- On ARROW reduce production word ->

State 34:
## Known stack suffix:
## factor word
## LR(1) items:
word -> factor word . [ SEMICOLON PIPE EOF ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production word -> factor word

State 35:
## Known stack suffix:
## cword_eof
## LR(1) items:
cword_eof' -> cword_eof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept cword_eof

State 36:
## Known stack suffix:
## cword
## LR(1) items:
cword_eof -> cword . EOF [ # ]
## Transitions:
-- On EOF shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## cword EOF
## LR(1) items:
cword_eof -> cword EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production cword_eof -> cword EOF

State 38:
## Known stack suffix:
##
## LR(1) items:
rules_eof' -> . rules_eof [ # ]
## Transitions:
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 39
-- On simple_word shift to state 25
-- On rules_eof shift to state 44
-- On rules shift to state 45
-- On rule shift to state 47
-- On letter shift to state 32
-- On factor shift to state 33
## Reductions:
-- On EOF reduce production rules ->
-- On ARROW reduce production word ->

State 39:
## Known stack suffix:
## word
## LR(1) items:
rule -> word . ARROW word PIPE constr [ SEMICOLON EOF ]
rule -> word . ARROW word [ SEMICOLON EOF ]
## Transitions:
-- On ARROW shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## word ARROW
## LR(1) items:
rule -> word ARROW . word PIPE constr [ SEMICOLON EOF ]
rule -> word ARROW . word [ SEMICOLON EOF ]
## Transitions:
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 41
-- On simple_word shift to state 25
-- On letter shift to state 32
-- On factor shift to state 33
## Reductions:
-- On SEMICOLON reduce production word ->
-- On PIPE reduce production word ->
-- On EOF reduce production word ->

State 41:
## Known stack suffix:
## word ARROW word
## LR(1) items:
rule -> word ARROW word . PIPE constr [ SEMICOLON EOF ]
rule -> word ARROW word . [ SEMICOLON EOF ]
## Transitions:
-- On PIPE shift to state 42
## Reductions:
-- On SEMICOLON reduce production rule -> word ARROW word
-- On EOF reduce production rule -> word ARROW word

State 42:
## Known stack suffix:
## word ARROW word PIPE
## LR(1) items:
rule -> word ARROW word PIPE . constr [ SEMICOLON EOF ]
## Transitions:
-- On FORMULA shift to state 23
-- On constr shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## word ARROW word PIPE constr
## LR(1) items:
rule -> word ARROW word PIPE constr . [ SEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule -> word ARROW word PIPE constr

State 44:
## Known stack suffix:
## rules_eof
## LR(1) items:
rules_eof' -> rules_eof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept rules_eof

State 45:
## Known stack suffix:
## rules
## LR(1) items:
rules_eof -> rules . EOF [ # ]
## Transitions:
-- On EOF shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## rules EOF
## LR(1) items:
rules_eof -> rules EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production rules_eof -> rules EOF

State 47:
## Known stack suffix:
## rule
## LR(1) items:
rules -> rule . [ EOF ]
rules -> rule . SEMICOLON rules [ EOF ]
## Transitions:
-- On SEMICOLON shift to state 48
## Reductions:
-- On EOF reduce production rules -> rule

State 48:
## Known stack suffix:
## rule SEMICOLON
## LR(1) items:
rules -> rule SEMICOLON . rules [ EOF ]
## Transitions:
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 39
-- On simple_word shift to state 25
-- On rules shift to state 49
-- On rule shift to state 47
-- On letter shift to state 32
-- On factor shift to state 33
## Reductions:
-- On EOF reduce production rules ->
-- On ARROW reduce production word ->

State 49:
## Known stack suffix:
## rule SEMICOLON rules
## LR(1) items:
rules -> rule SEMICOLON rules . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rules -> rule SEMICOLON rules

State 50:
## Known stack suffix:
##
## LR(1) items:
signature_eof' -> . signature_eof [ # ]
## Transitions:
-- On IDENT shift to state 51
-- On EOF shift to state 55
-- On signature_eof shift to state 56
-- On signature shift to state 57
-- On elt shift to state 59
## Reductions:

State 51:
## Known stack suffix:
## IDENT
## LR(1) items:
elt -> IDENT . expr_l [ SEMICOLON EOF ]
elt -> IDENT . expr_l PIPE constr [ SEMICOLON EOF ]
## Transitions:
-- On FORMULA shift to state 3
-- On expr_l shift to state 52
-- On expr shift to state 5
## Reductions:
-- On SEMICOLON reduce production expr_l ->
-- On PIPE reduce production expr_l ->
-- On EOF reduce production expr_l ->

State 52:
## Known stack suffix:
## IDENT expr_l
## LR(1) items:
elt -> IDENT expr_l . [ SEMICOLON EOF ]
elt -> IDENT expr_l . PIPE constr [ SEMICOLON EOF ]
## Transitions:
-- On PIPE shift to state 53
## Reductions:
-- On SEMICOLON reduce production elt -> IDENT expr_l
-- On EOF reduce production elt -> IDENT expr_l

State 53:
## Known stack suffix:
## IDENT expr_l PIPE
## LR(1) items:
elt -> IDENT expr_l PIPE . constr [ SEMICOLON EOF ]
## Transitions:
-- On FORMULA shift to state 23
-- On constr shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## IDENT expr_l PIPE constr
## LR(1) items:
elt -> IDENT expr_l PIPE constr . [ SEMICOLON EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production elt -> IDENT expr_l PIPE constr

State 55:
## Known stack suffix:
## EOF
## LR(1) items:
signature_eof -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production signature_eof -> EOF

State 56:
## Known stack suffix:
## signature_eof
## LR(1) items:
signature_eof' -> signature_eof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept signature_eof

State 57:
## Known stack suffix:
## signature
## LR(1) items:
signature_eof -> signature . EOF [ # ]
## Transitions:
-- On EOF shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## signature EOF
## LR(1) items:
signature_eof -> signature EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production signature_eof -> signature EOF

State 59:
## Known stack suffix:
## elt
## LR(1) items:
signature -> elt . [ EOF ]
signature -> elt . SEMICOLON [ EOF ]
signature -> elt . SEMICOLON signature [ EOF ]
## Transitions:
-- On SEMICOLON shift to state 60
## Reductions:
-- On EOF reduce production signature -> elt

State 60:
## Known stack suffix:
## elt SEMICOLON
## LR(1) items:
signature -> elt SEMICOLON . [ EOF ]
signature -> elt SEMICOLON . signature [ EOF ]
## Transitions:
-- On IDENT shift to state 51
-- On signature shift to state 61
-- On elt shift to state 59
## Reductions:
-- On EOF reduce production signature -> elt SEMICOLON

State 61:
## Known stack suffix:
## elt SEMICOLON signature
## LR(1) items:
signature -> elt SEMICOLON signature . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production signature -> elt SEMICOLON signature

