State 0:
cword_eof' -> . cword_eof [ # ]
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 21
-- On simple_word shift to state 25
-- On letter shift to state 32
-- On factor shift to state 33
-- On cword_eof shift to state 35
-- On cword shift to state 36
-- On PIPE reduce production word ->
-- On EOF reduce production word ->

State 1:
factor -> LPAR . simple_word RPAR POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On IDENT shift to state 2
-- On simple_word shift to state 7
-- On letter shift to state 12

State 2:
letter -> IDENT . expr_l [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW ]
-- On FORMULA shift to state 3
-- On expr_l shift to state 4
-- On expr shift to state 5
-- On SEMICOLON reduce production expr_l ->
-- On RPAR reduce production expr_l ->
-- On POWER reduce production expr_l ->
-- On PIPE reduce production expr_l ->
-- On LPAR reduce production expr_l ->
-- On IDENT reduce production expr_l ->
-- On FP reduce production expr_l ->
-- On EOF reduce production expr_l ->
-- On ARROW reduce production expr_l ->

State 3:
expr -> FORMULA . [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP FORMULA EOF ARROW ]
-- On SEMICOLON reduce production expr -> FORMULA
-- On RPAR reduce production expr -> FORMULA
-- On POWER reduce production expr -> FORMULA
-- On PIPE reduce production expr -> FORMULA
-- On LPAR reduce production expr -> FORMULA
-- On IDENT reduce production expr -> FORMULA
-- On FP reduce production expr -> FORMULA
-- On FORMULA reduce production expr -> FORMULA
-- On EOF reduce production expr -> FORMULA
-- On ARROW reduce production expr -> FORMULA

State 4:
letter -> IDENT expr_l . [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW ]
-- On SEMICOLON reduce production letter -> IDENT expr_l
-- On RPAR reduce production letter -> IDENT expr_l
-- On POWER reduce production letter -> IDENT expr_l
-- On PIPE reduce production letter -> IDENT expr_l
-- On LPAR reduce production letter -> IDENT expr_l
-- On IDENT reduce production letter -> IDENT expr_l
-- On FP reduce production letter -> IDENT expr_l
-- On EOF reduce production letter -> IDENT expr_l
-- On ARROW reduce production letter -> IDENT expr_l

State 5:
expr_l -> expr . expr_l [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW ]
-- On FORMULA shift to state 3
-- On expr_l shift to state 6
-- On expr shift to state 5
-- On SEMICOLON reduce production expr_l ->
-- On RPAR reduce production expr_l ->
-- On POWER reduce production expr_l ->
-- On PIPE reduce production expr_l ->
-- On LPAR reduce production expr_l ->
-- On IDENT reduce production expr_l ->
-- On FP reduce production expr_l ->
-- On EOF reduce production expr_l ->
-- On ARROW reduce production expr_l ->

State 6:
expr_l -> expr expr_l . [ SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW ]
-- On SEMICOLON reduce production expr_l -> expr expr_l
-- On RPAR reduce production expr_l -> expr expr_l
-- On POWER reduce production expr_l -> expr expr_l
-- On PIPE reduce production expr_l -> expr expr_l
-- On LPAR reduce production expr_l -> expr expr_l
-- On IDENT reduce production expr_l -> expr expr_l
-- On FP reduce production expr_l -> expr expr_l
-- On EOF reduce production expr_l -> expr expr_l
-- On ARROW reduce production expr_l -> expr expr_l

State 7:
factor -> LPAR simple_word . RPAR POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
simple_word -> simple_word . letter [ RPAR IDENT ]
-- On RPAR shift to state 8
-- On IDENT shift to state 2
-- On letter shift to state 11

State 8:
factor -> LPAR simple_word RPAR . POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On POWER shift to state 9

State 9:
factor -> LPAR simple_word RPAR POWER . expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On FORMULA shift to state 3
-- On expr shift to state 10

State 10:
factor -> LPAR simple_word RPAR POWER expr . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On SEMICOLON reduce production factor -> LPAR simple_word RPAR POWER expr
-- On PIPE reduce production factor -> LPAR simple_word RPAR POWER expr
-- On LPAR reduce production factor -> LPAR simple_word RPAR POWER expr
-- On IDENT reduce production factor -> LPAR simple_word RPAR POWER expr
-- On FP reduce production factor -> LPAR simple_word RPAR POWER expr
-- On EOF reduce production factor -> LPAR simple_word RPAR POWER expr
-- On ARROW reduce production factor -> LPAR simple_word RPAR POWER expr

State 11:
simple_word -> simple_word letter . [ RPAR IDENT ]
-- On RPAR reduce production simple_word -> simple_word letter
-- On IDENT reduce production simple_word -> simple_word letter

State 12:
simple_word -> letter . [ RPAR IDENT ]
-- On RPAR reduce production simple_word -> letter
-- On IDENT reduce production simple_word -> letter

State 13:
factor -> FP . FORMULA expr expr LPAR simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
factor -> FP . FORMULA expr expr letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On FORMULA shift to state 14

State 14:
factor -> FP FORMULA . expr expr LPAR simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
factor -> FP FORMULA . expr expr letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On FORMULA shift to state 3
-- On expr shift to state 15

State 15:
factor -> FP FORMULA expr . expr LPAR simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
factor -> FP FORMULA expr . expr letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On FORMULA shift to state 3
-- On expr shift to state 16

State 16:
factor -> FP FORMULA expr expr . LPAR simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
factor -> FP FORMULA expr expr . letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On LPAR shift to state 17
-- On IDENT shift to state 2
-- On letter shift to state 20

State 17:
factor -> FP FORMULA expr expr LPAR . simple_word RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On IDENT shift to state 2
-- On simple_word shift to state 18
-- On letter shift to state 12

State 18:
factor -> FP FORMULA expr expr LPAR simple_word . RPAR [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
simple_word -> simple_word . letter [ RPAR IDENT ]
-- On RPAR shift to state 19
-- On IDENT shift to state 2
-- On letter shift to state 11

State 19:
factor -> FP FORMULA expr expr LPAR simple_word RPAR . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On SEMICOLON reduce production factor -> FP FORMULA expr expr LPAR simple_word RPAR
-- On PIPE reduce production factor -> FP FORMULA expr expr LPAR simple_word RPAR
-- On LPAR reduce production factor -> FP FORMULA expr expr LPAR simple_word RPAR
-- On IDENT reduce production factor -> FP FORMULA expr expr LPAR simple_word RPAR
-- On FP reduce production factor -> FP FORMULA expr expr LPAR simple_word RPAR
-- On EOF reduce production factor -> FP FORMULA expr expr LPAR simple_word RPAR
-- On ARROW reduce production factor -> FP FORMULA expr expr LPAR simple_word RPAR

State 20:
factor -> FP FORMULA expr expr letter . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On SEMICOLON reduce production factor -> FP FORMULA expr expr letter
-- On PIPE reduce production factor -> FP FORMULA expr expr letter
-- On LPAR reduce production factor -> FP FORMULA expr expr letter
-- On IDENT reduce production factor -> FP FORMULA expr expr letter
-- On FP reduce production factor -> FP FORMULA expr expr letter
-- On EOF reduce production factor -> FP FORMULA expr expr letter
-- On ARROW reduce production factor -> FP FORMULA expr expr letter

State 21:
cword -> word . [ EOF ]
cword -> word . PIPE constr [ EOF ]
-- On PIPE shift to state 22
-- On EOF reduce production cword -> word

State 22:
cword -> word PIPE . constr [ EOF ]
-- On FORMULA shift to state 23
-- On constr shift to state 24

State 23:
constr -> FORMULA . [ SEMICOLON EOF ]
-- On SEMICOLON reduce production constr -> FORMULA
-- On EOF reduce production constr -> FORMULA

State 24:
cword -> word PIPE constr . [ EOF ]
-- On EOF reduce production cword -> word PIPE constr

State 25:
simple_word -> simple_word . letter [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
word -> simple_word . word_no_simple [ SEMICOLON PIPE EOF ARROW ]
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word_no_simple shift to state 26
-- On letter shift to state 27
-- On factor shift to state 30
-- On SEMICOLON reduce production word_no_simple ->
-- On PIPE reduce production word_no_simple ->
-- On EOF reduce production word_no_simple ->
-- On ARROW reduce production word_no_simple ->

State 26:
word -> simple_word word_no_simple . [ SEMICOLON PIPE EOF ARROW ]
-- On SEMICOLON reduce production word -> simple_word word_no_simple
-- On PIPE reduce production word -> simple_word word_no_simple
-- On EOF reduce production word -> simple_word word_no_simple
-- On ARROW reduce production word -> simple_word word_no_simple

State 27:
factor -> letter . POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
simple_word -> simple_word letter . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On POWER shift to state 28
-- On SEMICOLON reduce production simple_word -> simple_word letter
-- On PIPE reduce production simple_word -> simple_word letter
-- On LPAR reduce production simple_word -> simple_word letter
-- On IDENT reduce production simple_word -> simple_word letter
-- On FP reduce production simple_word -> simple_word letter
-- On EOF reduce production simple_word -> simple_word letter
-- On ARROW reduce production simple_word -> simple_word letter

State 28:
factor -> letter POWER . expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On FORMULA shift to state 3
-- On expr shift to state 29

State 29:
factor -> letter POWER expr . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On SEMICOLON reduce production factor -> letter POWER expr
-- On PIPE reduce production factor -> letter POWER expr
-- On LPAR reduce production factor -> letter POWER expr
-- On IDENT reduce production factor -> letter POWER expr
-- On FP reduce production factor -> letter POWER expr
-- On EOF reduce production factor -> letter POWER expr
-- On ARROW reduce production factor -> letter POWER expr

State 30:
word_no_simple -> factor . word [ SEMICOLON PIPE EOF ARROW ]
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 31
-- On simple_word shift to state 25
-- On letter shift to state 32
-- On factor shift to state 33
-- On SEMICOLON reduce production word ->
-- On PIPE reduce production word ->
-- On EOF reduce production word ->
-- On ARROW reduce production word ->

State 31:
word_no_simple -> factor word . [ SEMICOLON PIPE EOF ARROW ]
-- On SEMICOLON reduce production word_no_simple -> factor word
-- On PIPE reduce production word_no_simple -> factor word
-- On EOF reduce production word_no_simple -> factor word
-- On ARROW reduce production word_no_simple -> factor word

State 32:
factor -> letter . POWER expr [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
simple_word -> letter . [ SEMICOLON PIPE LPAR IDENT FP EOF ARROW ]
-- On POWER shift to state 28
-- On SEMICOLON reduce production simple_word -> letter
-- On PIPE reduce production simple_word -> letter
-- On LPAR reduce production simple_word -> letter
-- On IDENT reduce production simple_word -> letter
-- On FP reduce production simple_word -> letter
-- On EOF reduce production simple_word -> letter
-- On ARROW reduce production simple_word -> letter

State 33:
word -> factor . word [ SEMICOLON PIPE EOF ARROW ]
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 34
-- On simple_word shift to state 25
-- On letter shift to state 32
-- On factor shift to state 33
-- On SEMICOLON reduce production word ->
-- On PIPE reduce production word ->
-- On EOF reduce production word ->
-- On ARROW reduce production word ->

State 34:
word -> factor word . [ SEMICOLON PIPE EOF ARROW ]
-- On SEMICOLON reduce production word -> factor word
-- On PIPE reduce production word -> factor word
-- On EOF reduce production word -> factor word
-- On ARROW reduce production word -> factor word

State 35:
cword_eof' -> cword_eof . [ # ]
-- On # accept cword_eof

State 36:
cword_eof -> cword . EOF [ # ]
-- On EOF shift to state 37

State 37:
cword_eof -> cword EOF . [ # ]
-- On # reduce production cword_eof -> cword EOF

State 38:
rules_eof' -> . rules_eof [ # ]
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 39
-- On simple_word shift to state 25
-- On rules_eof shift to state 44
-- On rules shift to state 45
-- On rule shift to state 47
-- On letter shift to state 32
-- On factor shift to state 33
-- On EOF reduce production rules ->
-- On ARROW reduce production word ->

State 39:
rule -> word . ARROW word PIPE constr [ SEMICOLON EOF ]
rule -> word . ARROW word [ SEMICOLON EOF ]
-- On ARROW shift to state 40

State 40:
rule -> word ARROW . word PIPE constr [ SEMICOLON EOF ]
rule -> word ARROW . word [ SEMICOLON EOF ]
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 41
-- On simple_word shift to state 25
-- On letter shift to state 32
-- On factor shift to state 33
-- On SEMICOLON reduce production word ->
-- On PIPE reduce production word ->
-- On EOF reduce production word ->

State 41:
rule -> word ARROW word . PIPE constr [ SEMICOLON EOF ]
rule -> word ARROW word . [ SEMICOLON EOF ]
-- On PIPE shift to state 42
-- On SEMICOLON reduce production rule -> word ARROW word
-- On EOF reduce production rule -> word ARROW word

State 42:
rule -> word ARROW word PIPE . constr [ SEMICOLON EOF ]
-- On FORMULA shift to state 23
-- On constr shift to state 43

State 43:
rule -> word ARROW word PIPE constr . [ SEMICOLON EOF ]
-- On SEMICOLON reduce production rule -> word ARROW word PIPE constr
-- On EOF reduce production rule -> word ARROW word PIPE constr

State 44:
rules_eof' -> rules_eof . [ # ]
-- On # accept rules_eof

State 45:
rules_eof -> rules . EOF [ # ]
-- On EOF shift to state 46

State 46:
rules_eof -> rules EOF . [ # ]
-- On # reduce production rules_eof -> rules EOF

State 47:
rules -> rule . [ EOF ]
rules -> rule . SEMICOLON rules [ EOF ]
-- On SEMICOLON shift to state 48
-- On EOF reduce production rules -> rule

State 48:
rules -> rule SEMICOLON . rules [ EOF ]
-- On LPAR shift to state 1
-- On IDENT shift to state 2
-- On FP shift to state 13
-- On word shift to state 39
-- On simple_word shift to state 25
-- On rules shift to state 49
-- On rule shift to state 47
-- On letter shift to state 32
-- On factor shift to state 33
-- On EOF reduce production rules ->
-- On ARROW reduce production word ->

State 49:
rules -> rule SEMICOLON rules . [ EOF ]
-- On EOF reduce production rules -> rule SEMICOLON rules

State 50:
signature_eof' -> . signature_eof [ # ]
-- On IDENT shift to state 51
-- On EOF shift to state 55
-- On signature_eof shift to state 56
-- On signature shift to state 57
-- On elt shift to state 59

State 51:
elt -> IDENT . expr_l [ SEMICOLON EOF ]
elt -> IDENT . expr_l PIPE constr [ SEMICOLON EOF ]
-- On FORMULA shift to state 3
-- On expr_l shift to state 52
-- On expr shift to state 5
-- On SEMICOLON reduce production expr_l ->
-- On PIPE reduce production expr_l ->
-- On EOF reduce production expr_l ->

State 52:
elt -> IDENT expr_l . [ SEMICOLON EOF ]
elt -> IDENT expr_l . PIPE constr [ SEMICOLON EOF ]
-- On PIPE shift to state 53
-- On SEMICOLON reduce production elt -> IDENT expr_l
-- On EOF reduce production elt -> IDENT expr_l

State 53:
elt -> IDENT expr_l PIPE . constr [ SEMICOLON EOF ]
-- On FORMULA shift to state 23
-- On constr shift to state 54

State 54:
elt -> IDENT expr_l PIPE constr . [ SEMICOLON EOF ]
-- On SEMICOLON reduce production elt -> IDENT expr_l PIPE constr
-- On EOF reduce production elt -> IDENT expr_l PIPE constr

State 55:
signature_eof -> EOF . [ # ]
-- On # reduce production signature_eof -> EOF

State 56:
signature_eof' -> signature_eof . [ # ]
-- On # accept signature_eof

State 57:
signature_eof -> signature . EOF [ # ]
-- On EOF shift to state 58

State 58:
signature_eof -> signature EOF . [ # ]
-- On # reduce production signature_eof -> signature EOF

State 59:
signature -> elt . [ EOF ]
signature -> elt . SEMICOLON [ EOF ]
signature -> elt . SEMICOLON signature [ EOF ]
-- On SEMICOLON shift to state 60
-- On EOF reduce production signature -> elt

State 60:
signature -> elt SEMICOLON . [ EOF ]
signature -> elt SEMICOLON . signature [ EOF ]
-- On IDENT shift to state 51
-- On signature shift to state 61
-- On elt shift to state 59
-- On EOF reduce production signature -> elt SEMICOLON

State 61:
signature -> elt SEMICOLON signature . [ EOF ]
-- On EOF reduce production signature -> elt SEMICOLON signature

