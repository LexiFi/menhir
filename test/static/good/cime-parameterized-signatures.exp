Grammar has 16 nonterminal symbols, among which 3 start symbols.
Grammar has 10 terminal symbols.
Grammar has 32 productions.
nullable(word_no_simple) = true
nullable(word) = true
nullable(simple_word) = false
nullable(signature_eof) = false
nullable(signature) = false
nullable(rules_eof) = false
nullable(rules) = true
nullable(rule) = false
nullable(letter) = false
nullable(factor) = false
nullable(expr_l) = true
nullable(expr) = false
nullable(elt) = false
nullable(cword_eof) = false
nullable(cword) = true
nullable(constr) = false
first(word_no_simple) = LPAR IDENT FP
first(word) = LPAR IDENT FP
first(simple_word) = IDENT
first(signature_eof) = IDENT EOF
first(signature) = IDENT
first(rules_eof) = LPAR IDENT FP EOF ARROW
first(rules) = LPAR IDENT FP ARROW
first(rule) = LPAR IDENT FP ARROW
first(letter) = IDENT
first(factor) = LPAR IDENT FP
first(expr_l) = FORMULA
first(expr) = FORMULA
first(elt) = IDENT
first(cword_eof) = PIPE LPAR IDENT FP EOF
first(cword) = PIPE LPAR IDENT FP
first(constr) = FORMULA
minimal(word_no_simple) = (* 0 *)
minimal(word) = (* 0 *)
minimal(simple_word) = (* 1 *) IDENT
minimal(signature_eof) = (* 1 *) EOF
minimal(signature) = (* 1 *) IDENT
minimal(rules_eof) = (* 1 *) EOF
minimal(rules) = (* 0 *)
minimal(rule) = (* 1 *) ARROW
minimal(letter) = (* 1 *) IDENT
minimal(factor) = (* 3 *) IDENT POWER FORMULA
minimal(expr_l) = (* 0 *)
minimal(expr) = (* 1 *) FORMULA
minimal(elt) = (* 1 *) IDENT
minimal(cword_eof) = (* 1 *) EOF
minimal(cword) = (* 0 *)
minimal(constr) = (* 1 *) FORMULA
maximal(word_no_simple) = infinity
maximal(word) = infinity
maximal(simple_word) = infinity
maximal(signature_eof) = infinity
maximal(signature) = infinity
maximal(rules_eof) = infinity
maximal(rules) = infinity
maximal(rule) = infinity
maximal(letter) = infinity
maximal(factor) = infinity
maximal(expr_l) = infinity
maximal(expr) = 1
maximal(elt) = infinity
maximal(cword_eof) = infinity
maximal(cword) = infinity
maximal(constr) = 1
follow(word_no_simple) = SEMICOLON PIPE EOF ARROW
follow(word) = SEMICOLON PIPE EOF ARROW
follow(simple_word) = SEMICOLON RPAR PIPE LPAR IDENT FP EOF ARROW
follow(signature_eof) = #
follow(signature) = EOF
follow(rules_eof) = #
follow(rules) = EOF
follow(rule) = SEMICOLON EOF
follow(letter) = SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW
follow(factor) = SEMICOLON PIPE LPAR IDENT FP EOF ARROW
follow(expr_l) = SEMICOLON RPAR POWER PIPE LPAR IDENT FP EOF ARROW
follow(expr) = SEMICOLON RPAR POWER PIPE LPAR IDENT FP FORMULA EOF ARROW
follow(elt) = SEMICOLON EOF
follow(cword_eof) = #
follow(cword) = EOF
follow(constr) = SEMICOLON EOF
Built an LR(0) automaton with 62 states.
The grammar is not SLR(1) -- 2 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 62 states.
25 out of 62 states have a default reduction.
24 out of 62 states are represented.
0 out of 31 symbols keep track of their start position.
0 out of 31 symbols keep track of their end position.
14 out of 35 productions exploit shiftreduce optimization.
0 out of 62 states can peek at an error.
182 functions before inlining, 29 functions after inlining.
