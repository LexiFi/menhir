%{

  open Parameterized_signatures
  open Parameterized_signatures_syntax

%}
%start cword_eof
%start rules_eof
%start signature_eof
%token ARROW
%token EOF
%token <string> FORMULA
%token FP
%token <string> IDENT
%token LPAR
%token PIPE
%token POWER
%token RPAR
%token SEMICOLON
%type <Parameterized_signatures_syntax.constrained_word> cword_eof
%type <Parameterized_signatures_syntax.rules> rules_eof
%type <Parameterized_signatures_syntax.signature> signature_eof
%%

signature_eof:
  _1 = EOF
    {        ([])}
| _1 = signature _2 = EOF
    {                  (_1)}

signature:
  _1 = elt
    {        ([_1])}
| _1 = elt _2 = SEMICOLON
    {                  ([_1])}
| _1 = elt _2 = SEMICOLON _3 = signature
    {                            (_1::_3)}

elt:
  _1 = IDENT _2 = expr_l
    {      (_1,_2,Abstract_constraint.True)}
| _1 = IDENT _2 = expr_l _3 = PIPE _4 = constr
    {      (_1,_2,_4)}

cword_eof:
  _1 = cword _2 = EOF
    {              (_1)}

cword:
  _1 = word
    {      ( (_1,Abstract_constraint.True) )}
| _1 = word _2 = PIPE _3 = constr
    {      ( (_1,_3) )}

word:
  
    {    ( [] )}
| _1 = factor _2 = word
    {    ( _1::_2 )}
| _1 = simple_word _2 = word_no_simple
    {    ( Simple(_1)::_2 )}

word_no_simple:
  
    {    ( [] )}
| _1 = factor _2 = word
    {    ( _1::_2 )}

factor:
  _1 = letter _2 = POWER _3 = expr
    {      ( Exp([_1],_3) )}
| _1 = LPAR _2 = simple_word _3 = RPAR _4 = POWER _5 = expr
    {      ( Exp(_2,_5) )}
| _1 = FP _2 = FORMULA _3 = expr _4 = expr _5 = LPAR _6 = simple_word _7 = RPAR
    {      ( Product(_2,_3,_4,_6) )}
| _1 = FP _2 = FORMULA _3 = expr _4 = expr _5 = letter
    {      ( Product(_2,_3,_4,[_5]) )}

simple_word:
  _1 = letter
    {      ( [_1] )}
| _1 = simple_word _2 = letter
    {      ( _1@[_2] )}

letter:
  _1 = IDENT _2 = expr_l
    {      ( (_1,_2) )}

rules_eof:
  _1 = rules _2 = EOF
    {      ( _1 )}

rules:
  
    {      ( [] )}
| _1 = rule
    {      ( [_1] )}
| _1 = rule _2 = SEMICOLON _3 = rules
    {      ( _1 :: _3 )}

rule:
  _1 = word _2 = ARROW _3 = word _4 = PIPE _5 = constr
    {      ( (_1,_3,_5) )}
| _1 = word _2 = ARROW _3 = word
    {      ( (_1,_3,Abstract_constraint.True) )}

expr_l:
  
    {      ( [] )}
| _1 = expr _2 = expr_l
    {      ( _1::_2 )}

expr:
  _1 = FORMULA
    {            (Poly_syntax.expr_of_string _1)}

constr:
  _1 = FORMULA
    {            (Poly_syntax.constraint_of_string _1)}

%%
