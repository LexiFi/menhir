File "cime-poly-interp.mly", line 29, characters 7-15:
Warning: the token LEFT_BRA is unused.
File "cime-poly-interp.mly", line 29, characters 16-25:
Warning: the token RIGHT_BRA is unused.
%{

  open Signatures;;
  open Poly_interp;;

  exception Syntax_error of string

  let var s =
    try
      let n = Listutils.index s !current_poly_vars
      in IntPolynomials.var n
    with
	Not_found -> raise (Syntax_error ("undefined variable "^s))
;;

%}
%start poly_interp_entry
%start weight_entry
%token COMMA
%token EOF
%token EQUAL
%token EXP
%token <Numbers.t> INT
%token <User_signatures.symbol_id> INTERP
%token LEFT_BRA
%token LEFT_PAR
%token MINUS
%token MULT
%token PLUS
%token RIGHT_BRA
%token RIGHT_PAR
%token SEMICOLON
%token <string> VAR
%left MINUS PLUS
%left MULT
%nonassoc UMINUS
%right EXP
%type <(User_signatures.symbol_id, Poly_interp.IntPolynomials.poly) Signatures.SymbolMap.t > poly_interp_entry
%type <(User_signatures.symbol_id, int) Signatures.SymbolMap.t > weight_entry
%%

poly_interp_entry:
  _1 = interp _2 = EOF
    {             ( _1 )}

interp:
  
    {                           ( SymbolMap.empty )}
| _1 = symbol_interp _2 = EQUAL _3 = poly _4 = SEMICOLON _5 = interp
    {                           ( SymbolMap.add _1 _3 _5 )}

symbol_interp:
  _1 = INTERP
    {                            ( current_poly_vars := []; _1 )}
| _1 = INTERP _2 = LEFT_PAR _3 = vars
    {                           ( current_poly_vars := _3; _1 )}

vars:
  _1 = VAR _2 = RIGHT_PAR
    {                           ( [_1] )}
| _1 = VAR _2 = COMMA _3 = vars
    {                           ( _1::_3 )}

poly:
  _1 = VAR
    {                           ( var _1 )}
| _1 = INT
    {                           ( IntPolynomials.cte _1 )}
| _1 = LEFT_PAR _2 = poly _3 = RIGHT_PAR
    {                           ( _2 )}
| _1 = poly _2 = PLUS _3 = poly
    {                           ( IntPolynomials.add _1 _3 )}
| _1 = poly _2 = MINUS _3 = poly
    {                           ( IntPolynomials.sub _1 _3 )}
| _1 = MINUS _2 = poly %prec UMINUS
    {                           ( IntPolynomials.minus _2 )}
| _1 = poly _2 = MULT _3 = poly
    {                           ( IntPolynomials.mult _1 _3 )}
| _1 = poly _2 = EXP _3 = INT
    {    ( try
	IntPolynomials.power _1 (Numbers.to_int _3)
      with
	Failure("int_of_big_int") ->
	  failwith "Exponent too large"
    )}

weight_entry:
  _1 = weight _2 = EOF
    {             ( _1 )}

weight:
  
    {                             ( SymbolMap.empty )}
| _1 = INTERP _2 = EQUAL _3 = INT _4 = SEMICOLON _5 = weight
    {                                    ( SymbolMap.add _1 (Numbers.to_int _3) _5 )}

%%
