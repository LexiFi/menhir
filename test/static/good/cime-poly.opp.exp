File "cime-poly.mly", line 19, characters 27-36:
Warning: the token SEMICOLON is unused.
%{

  open Abstract_constraint;;

%}
%start constraint_entry
%start expr
%token AND
%token COMMA
%token <string> COMP
%token DIV
%token EOF
%token EQUIV
%token EXISTS
%token EXP
%token FALSE
%token FORALL
%token <string> IDENT
%token IMPLIES
%token <Numbers.t> INT
%token MINUS
%token MULT
%token NOT
%token OR
%token PARDROITE
%token PARGAUCHE
%token PLUS
%token SEMICOLON
%token TRUE
%token VERTICALBAR
%nonassoc EXISTS FORALL
%right EQUIV IMPLIES
%left OR
%left AND
%nonassoc NOT
%left MINUS PLUS
%left DIV MULT
%nonassoc UMINUS
%right EXP
%type <Abstract_constraint.formula> constraint_entry
%type <Abstract_constraint.expr> expr
%%

constraint_entry:
  _1 = formula _2 = EOF
    {              ( _1 )}

formula:
  _1 = formula _2 = AND _3 = formula
    {    ( conj _1 _3 )}
| _1 = formula _2 = OR _3 = formula
    {    ( disj _1 _3 )}
| _1 = NOT _2 = formula
    {    ( Neg(_2) )}
| _1 = formula _2 = IMPLIES _3 = formula
    {    ( Implies(_1,_3) )}
| _1 = formula _2 = EQUIV _3 = formula
    {    ( Equiv(_1,_3) )}
| _1 = EXISTS _2 = id_list _3 = COMMA _4 = formula
    {    ( Exists(_2,_4) )}
| _1 = FORALL _2 = id_list _3 = COMMA _4 = formula
    {    ( Forall(_2,_4) )}
| _1 = expr _2 = COMP _3 = expr
    {    ( Comp(_1,_2,_3) )}
| _1 = expr _2 = VERTICALBAR _3 = expr
    {    ( Comp(_1,"|",_3) )}
| _1 = expr _2 = COMP _3 = expr _4 = COMP _5 = expr
    {    ( conj (Comp(_1,_2,_3)) (Comp(_3,_4,_5)) )}
| _1 = expr _2 = COMP _3 = expr _4 = COMP _5 = expr _6 = COMP _7 = expr
    {    ( conj (conj (Comp(_1,_2,_3)) (Comp(_3,_4,_5))) (Comp(_5,_6,_7)) )}
| _1 = PARGAUCHE _2 = formula _3 = PARDROITE
    {    ( _2 )}
| _1 = TRUE
    {    ( True )}
| _1 = FALSE
    {    ( False )}

id_list:
  _1 = IDENT
    {    ( [_1] )}
| _1 = IDENT _2 = id_list
    {    ( _1::_2 )}

expr:
  _1 = IDENT
    {    ( Var(_1) )}
| _1 = INT
    {    ( Cte(_1) )}
| _1 = PARGAUCHE _2 = expr _3 = PARDROITE
    {    ( _2 )}
| _1 = expr _2 = PLUS _3 = expr
    {    ( Plus(_1,_3) )}
| _1 = expr _2 = MINUS _3 = expr
    {    ( Sub(_1,_3) )}
| _1 = MINUS _2 = expr %prec UMINUS
    {    ( Minus(_2) )}
| _1 = expr _2 = MULT _3 = expr
    {    ( Mult(_1,_3) )}
| _1 = expr _2 = DIV _3 = expr
    {    ( Quotient(_1,_3) )}
| _1 = expr _2 = EXP _3 = INT
    {    ( try
	power _1 (Numbers.to_int _3)
      with
	Invalid_argument("Numbers.to_int") ->
	  failwith "Exponent too large"
    )}

%%
