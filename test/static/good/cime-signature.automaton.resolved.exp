State 0:
## Known stack suffix:
##
## LR(1) items:
signature' -> . signature [ # ]
## Transitions:
-- On INT shift to state 1
-- On IDENT shift to state 2
-- On EOF shift to state 3
-- On signature shift to state 4
-- On op_list shift to state 5
-- On ident shift to state 18
-- On decl shift to state 21
## Reductions:

State 1:
## Known stack suffix:
## INT
## LR(1) items:
ident -> INT . [ COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> INT

State 2:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> IDENT

State 3:
## Known stack suffix:
## EOF
## LR(1) items:
signature -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production signature -> EOF

State 4:
## Known stack suffix:
## signature
## LR(1) items:
signature' -> signature . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept signature

State 5:
## Known stack suffix:
## op_list
## LR(1) items:
decl -> op_list . COLON fix arity [ SEMICOLON ]
## Transitions:
-- On COLON shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## op_list COLON
## LR(1) items:
decl -> op_list COLON . fix arity [ SEMICOLON ]
## Transitions:
-- On KW_PREFIX shift to state 7
-- On KW_POSTFIX shift to state 8
-- On KW_INFIX shift to state 9
-- On fix shift to state 10
## Reductions:
-- On KW_UNARY reduce production fix ->
-- On KW_CONSTANT reduce production fix ->
-- On KW_C reduce production fix ->
-- On KW_BINARY reduce production fix ->
-- On KW_AC reduce production fix ->
-- On INT reduce production fix ->

State 7:
## Known stack suffix:
## KW_PREFIX
## LR(1) items:
fix -> KW_PREFIX . [ KW_UNARY KW_CONSTANT KW_C KW_BINARY KW_AC INT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fix -> KW_PREFIX

State 8:
## Known stack suffix:
## KW_POSTFIX
## LR(1) items:
fix -> KW_POSTFIX . [ KW_UNARY KW_CONSTANT KW_C KW_BINARY KW_AC INT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fix -> KW_POSTFIX

State 9:
## Known stack suffix:
## KW_INFIX
## LR(1) items:
fix -> KW_INFIX . [ KW_UNARY KW_CONSTANT KW_C KW_BINARY KW_AC INT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production fix -> KW_INFIX

State 10:
## Known stack suffix:
## op_list COLON fix
## LR(1) items:
decl -> op_list COLON fix . arity [ SEMICOLON ]
## Transitions:
-- On KW_UNARY shift to state 11
-- On KW_CONSTANT shift to state 12
-- On KW_C shift to state 13
-- On KW_BINARY shift to state 14
-- On KW_AC shift to state 15
-- On INT shift to state 16
-- On arity shift to state 17
## Reductions:

State 11:
## Known stack suffix:
## KW_UNARY
## LR(1) items:
arity -> KW_UNARY . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arity -> KW_UNARY

State 12:
## Known stack suffix:
## KW_CONSTANT
## LR(1) items:
arity -> KW_CONSTANT . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arity -> KW_CONSTANT

State 13:
## Known stack suffix:
## KW_C
## LR(1) items:
arity -> KW_C . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arity -> KW_C

State 14:
## Known stack suffix:
## KW_BINARY
## LR(1) items:
arity -> KW_BINARY . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arity -> KW_BINARY

State 15:
## Known stack suffix:
## KW_AC
## LR(1) items:
arity -> KW_AC . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arity -> KW_AC

State 16:
## Known stack suffix:
## INT
## LR(1) items:
arity -> INT . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production arity -> INT

State 17:
## Known stack suffix:
## op_list COLON fix arity
## LR(1) items:
decl -> op_list COLON fix arity . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production decl -> op_list COLON fix arity

State 18:
## Known stack suffix:
## ident
## LR(1) items:
op_list -> ident . [ COLON ]
op_list -> ident . COMMA op_list [ COLON ]
## Transitions:
-- On COMMA shift to state 19
## Reductions:
-- On COLON reduce production op_list -> ident

State 19:
## Known stack suffix:
## ident COMMA
## LR(1) items:
op_list -> ident COMMA . op_list [ COLON ]
## Transitions:
-- On INT shift to state 1
-- On IDENT shift to state 2
-- On op_list shift to state 20
-- On ident shift to state 18
## Reductions:

State 20:
## Known stack suffix:
## ident COMMA op_list
## LR(1) items:
op_list -> ident COMMA op_list . [ COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production op_list -> ident COMMA op_list

State 21:
## Known stack suffix:
## decl
## LR(1) items:
signature -> decl . SEMICOLON signature [ # ]
## Transitions:
-- On SEMICOLON shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## decl SEMICOLON
## LR(1) items:
signature -> decl SEMICOLON . signature [ # ]
## Transitions:
-- On INT shift to state 1
-- On IDENT shift to state 2
-- On EOF shift to state 3
-- On signature shift to state 23
-- On op_list shift to state 5
-- On ident shift to state 18
-- On decl shift to state 21
## Reductions:

State 23:
## Known stack suffix:
## decl SEMICOLON signature
## LR(1) items:
signature -> decl SEMICOLON signature . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production signature -> decl SEMICOLON signature

