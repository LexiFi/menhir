%{

  open Symbols
  open C_declare_operator

%}
%start signature
%token COLON
%token COMMA
%token EOF
%token <string> IDENT
%token <string> INT
%token KW_AC
%token KW_BINARY
%token KW_C
%token KW_CONSTANT
%token KW_INFIX
%token KW_POSTFIX
%token KW_PREFIX
%token KW_UNARY
%token SEMICOLON
%type <(string list * int * Symbols.fix_type * C_declare_operator.symbol_type) list> signature
%%

signature:
  _1 = EOF
    {                            ( [] )}
| _1 = decl _2 = SEMICOLON _3 = signature
    {                            ( _1::_3 )}

decl:
  _1 = op_list _2 = COLON _3 = fix _4 = arity
    {  ( let t,a = _4
    in
      if _3=INFIX & a<>2
      then Errors.semantical_error "Infix symbols must be binary"
      else (_1,a,_3,t)
  )}

fix:
  _1 = KW_PREFIX
    {                ( PREFIX )}
| _1 = KW_INFIX
    {                ( INFIX  )}
| _1 = KW_POSTFIX
    {                ( POSTFIX )}
| 
    {                ( DEFAULT )}

arity:
  _1 = KW_C
    {               ( (C,2) )}
| _1 = KW_AC
    {               ( (AC,2) )}
| _1 = KW_CONSTANT
    {               ( (FREE,0) )}
| _1 = KW_UNARY
    {               ( (FREE,1) )}
| _1 = KW_BINARY
    {               ( (FREE,2) )}
| _1 = INT
    {               ( (FREE,int_of_string _1) )}

op_list:
  _1 = ident
    {                       ( [_1] )}
| _1 = ident _2 = COMMA _3 = op_list
    {                       ( _1::_3 )}

ident:
  _1 = IDENT
    {        ( _1 )}
| _1 = INT
    {        ( _1 )}

%%
