State 0:
## Known stack suffix:
##
## LR(1) items:
rule_set_eof' -> . rule_set_eof [ # ]
## Transitions:
-- On PREFIX_IDENT shift to state 1
-- On OPENPAR shift to state 3
-- On term shift to state 17
-- On rule_set_eof shift to state 20
-- On rule_set shift to state 21
-- On rule shift to state 23
## Reductions:

State 1:
## Known stack suffix:
## PREFIX_IDENT
## LR(1) items:
term -> PREFIX_IDENT . [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
term -> PREFIX_IDENT . OPENPAR term_list CLOSEPAR [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
-- On OPENPAR shift to state 2
## Reductions:
-- On SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW
--   reduce production term -> PREFIX_IDENT

State 2:
## Known stack suffix:
## PREFIX_IDENT OPENPAR
## LR(1) items:
term -> PREFIX_IDENT OPENPAR . term_list CLOSEPAR [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
-- On PREFIX_IDENT shift to state 1
-- On OPENPAR shift to state 3
-- On term_list shift to state 15
-- On term shift to state 12
## Reductions:

State 3:
## Known stack suffix:
## OPENPAR
## LR(1) items:
term -> OPENPAR . term CLOSEPAR [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
term -> OPENPAR . term CLOSEPAR POSTFIX_IDENT [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
term -> OPENPAR . term_list CLOSEPAR POSTFIX_IDENT [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
-- On PREFIX_IDENT shift to state 1
-- On OPENPAR shift to state 3
-- On term_list shift to state 4
-- On term shift to state 7
## Reductions:

State 4:
## Known stack suffix:
## OPENPAR term_list
## LR(1) items:
term -> OPENPAR term_list . CLOSEPAR POSTFIX_IDENT [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
-- On CLOSEPAR shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## OPENPAR term_list CLOSEPAR
## LR(1) items:
term -> OPENPAR term_list CLOSEPAR . POSTFIX_IDENT [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
-- On POSTFIX_IDENT shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## OPENPAR term_list CLOSEPAR POSTFIX_IDENT
## LR(1) items:
term -> OPENPAR term_list CLOSEPAR POSTFIX_IDENT . [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> OPENPAR term_list CLOSEPAR POSTFIX_IDENT

State 7:
## Known stack suffix:
## OPENPAR term
## LR(1) items:
term -> OPENPAR term . CLOSEPAR [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
term -> OPENPAR term . CLOSEPAR POSTFIX_IDENT [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
term -> term . INFIX_IDENT term [ INFIX_IDENT COMMA CLOSEPAR ]
term_list -> term . [ CLOSEPAR ]
term_list -> term . COMMA term_list [ CLOSEPAR ]
## Transitions:
-- On INFIX_IDENT shift to state 8
-- On COMMA shift to state 10
-- On CLOSEPAR shift to state 13
## Reductions:

State 8:
## Known stack suffix:
## term INFIX_IDENT
## LR(1) items:
term -> term INFIX_IDENT . term [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
-- On PREFIX_IDENT shift to state 1
-- On OPENPAR shift to state 3
-- On term shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## term INFIX_IDENT term
## LR(1) items:
term -> term . INFIX_IDENT term [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
term -> term INFIX_IDENT term . [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> term INFIX_IDENT term

State 10:
## Known stack suffix:
## term COMMA
## LR(1) items:
term_list -> term COMMA . term_list [ CLOSEPAR ]
## Transitions:
-- On PREFIX_IDENT shift to state 1
-- On OPENPAR shift to state 3
-- On term_list shift to state 11
-- On term shift to state 12
## Reductions:

State 11:
## Known stack suffix:
## term COMMA term_list
## LR(1) items:
term_list -> term COMMA term_list . [ CLOSEPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term_list -> term COMMA term_list

State 12:
## Known stack suffix:
## term
## LR(1) items:
term -> term . INFIX_IDENT term [ INFIX_IDENT COMMA CLOSEPAR ]
term_list -> term . [ CLOSEPAR ]
term_list -> term . COMMA term_list [ CLOSEPAR ]
## Transitions:
-- On INFIX_IDENT shift to state 8
-- On COMMA shift to state 10
## Reductions:
-- On CLOSEPAR
--   reduce production term_list -> term

State 13:
## Known stack suffix:
## OPENPAR term CLOSEPAR
## LR(1) items:
term -> OPENPAR term CLOSEPAR . [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
term -> OPENPAR term CLOSEPAR . POSTFIX_IDENT [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
-- On POSTFIX_IDENT shift to state 14
## Reductions:
-- On SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW
--   reduce production term -> OPENPAR term CLOSEPAR

State 14:
## Known stack suffix:
## OPENPAR term CLOSEPAR POSTFIX_IDENT
## LR(1) items:
term -> OPENPAR term CLOSEPAR POSTFIX_IDENT . [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> OPENPAR term CLOSEPAR POSTFIX_IDENT

State 15:
## Known stack suffix:
## PREFIX_IDENT OPENPAR term_list
## LR(1) items:
term -> PREFIX_IDENT OPENPAR term_list . CLOSEPAR [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
-- On CLOSEPAR shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## PREFIX_IDENT OPENPAR term_list CLOSEPAR
## LR(1) items:
term -> PREFIX_IDENT OPENPAR term_list CLOSEPAR . [ SEMICOLON INFIX_IDENT EOF COMMA CLOSEPAR ARROW ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> PREFIX_IDENT OPENPAR term_list CLOSEPAR

State 17:
## Known stack suffix:
## term
## LR(1) items:
rule -> term . ARROW term [ SEMICOLON EOF ]
term -> term . INFIX_IDENT term [ INFIX_IDENT ARROW ]
## Transitions:
-- On INFIX_IDENT shift to state 8
-- On ARROW shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## term ARROW
## LR(1) items:
rule -> term ARROW . term [ SEMICOLON EOF ]
## Transitions:
-- On PREFIX_IDENT shift to state 1
-- On OPENPAR shift to state 3
-- On term shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## term ARROW term
## LR(1) items:
rule -> term ARROW term . [ SEMICOLON EOF ]
term -> term . INFIX_IDENT term [ SEMICOLON INFIX_IDENT EOF ]
## Transitions:
-- On INFIX_IDENT shift to state 8
## Reductions:
-- On SEMICOLON EOF
--   reduce production rule -> term ARROW term

State 20:
## Known stack suffix:
## rule_set_eof
## LR(1) items:
rule_set_eof' -> rule_set_eof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept rule_set_eof

State 21:
## Known stack suffix:
## rule_set
## LR(1) items:
rule_set_eof -> rule_set . EOF [ # ]
## Transitions:
-- On EOF shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## rule_set EOF
## LR(1) items:
rule_set_eof -> rule_set EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production rule_set_eof -> rule_set EOF

State 23:
## Known stack suffix:
## rule
## LR(1) items:
rule_set -> rule . [ EOF ]
rule_set -> rule . SEMICOLON rule_set [ EOF ]
## Transitions:
-- On SEMICOLON shift to state 24
## Reductions:
-- On EOF
--   reduce production rule_set -> rule

State 24:
## Known stack suffix:
## rule SEMICOLON
## LR(1) items:
rule_set -> rule SEMICOLON . rule_set [ EOF ]
## Transitions:
-- On PREFIX_IDENT shift to state 1
-- On OPENPAR shift to state 3
-- On term shift to state 17
-- On rule_set shift to state 25
-- On rule shift to state 23
## Reductions:

State 25:
## Known stack suffix:
## rule SEMICOLON rule_set
## LR(1) items:
rule_set -> rule SEMICOLON rule_set . [ EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rule_set -> rule SEMICOLON rule_set

State 26:
## Known stack suffix:
##
## LR(1) items:
term_eof' -> . term_eof [ # ]
## Transitions:
-- On PREFIX_IDENT shift to state 1
-- On OPENPAR shift to state 3
-- On term_eof shift to state 27
-- On term shift to state 28
## Reductions:

State 27:
## Known stack suffix:
## term_eof
## LR(1) items:
term_eof' -> term_eof . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept term_eof

State 28:
## Known stack suffix:
## term
## LR(1) items:
term -> term . INFIX_IDENT term [ INFIX_IDENT EOF ]
term_eof -> term . EOF [ # ]
## Transitions:
-- On INFIX_IDENT shift to state 8
-- On EOF shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## term EOF
## LR(1) items:
term_eof -> term EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production term_eof -> term EOF

