%{

  open C_declare_operator
  open Symbols
  open Terms
  open Errors
  open Equations

%}
%start rule_set_eof
%start term_eof
%token ARROW
%token CLOSEPAR
%token COMMA
%token EOF
%token <string> INFIX_IDENT
%token OPENPAR
%token <string> POSTFIX_IDENT
%token <string> PREFIX_IDENT
%token SEMICOLON
%left INFIX_IDENT TERMLIST
%nonassoc CLOSEPAR
%type <Equations.regle list> rule_set_eof
%type <Terms.term> term_eof
%%

term_eof:
  _1 = term _2 = EOF
    {           ( _1 )}

term:
  _1 = PREFIX_IDENT
    {   ( (* printf "forme a\n"; *)
      try
        VAR (var_id_of_string _1)
      with Not_found ->
        let f=(get_symbol_id _1) in
        if (arity f)=0
        then TERM(f,[])
        else semantical_error ("Bad number of arguments for " ^ _1)
     )}
| _1 = OPENPAR _2 = term _3 = CLOSEPAR
    {     ( _2
     )}
| _1 = PREFIX_IDENT _2 = OPENPAR _3 = term_list _4 = CLOSEPAR
    {     ( (* printf "forme f(...)\n"; *)
        let f=(get_symbol_id _1) in
        if (arity f)=(List.length _3)
        then TERM(f,_3)
        else semantical_error ("Bad number of arguments for " ^ _1)
    )}
| _1 = OPENPAR _2 = term _3 = CLOSEPAR _4 = POSTFIX_IDENT
    {    ( (* printf "forme f(...)\n"; *)
      let f=(get_symbol_id _4) in
        if (arity f)=1
          then TERM(f,[_2])
          else semantical_error ("Bad number of arguments for " ^ _4)
    )}
| _1 = OPENPAR _2 = term_list _3 = CLOSEPAR _4 = POSTFIX_IDENT
    {    ( (* printf "forme f(...)\n"; *)
      let f=(get_symbol_id _4) in
        if (arity f)=(List.length _2)
          then TERM(f,_2)
          else semantical_error ("Bad number of arguments for " ^ _4)
    )}
| _1 = term _2 = INFIX_IDENT _3 = term
    {    ( let f = (get_symbol_id _2) in
      TERM(f,[_1;_3])
    )}

term_list:
  _1 = term %prec TERMLIST
    {                      ( [_1] )}
| _1 = term _2 = COMMA _3 = term_list
    {                       ( _1 :: _3 )}

rule_set_eof:
  _1 = rule_set _2 = EOF
    {                 ( _1 )}

rule_set:
  _1 = rule
    {                          ( [_1]   )}
| _1 = rule _2 = SEMICOLON _3 = rule_set
    {                          ( _1::_3 )}

rule:
  _1 = term _2 = ARROW _3 = term
    {                          ( make_basic_rule ((flatten_term _1),
                                             (flatten_term _3)) )}

%%
