%{

  open Signatures
  open Signature_syntax

%}
%start signature
%start sorted_signature
%token ARROW
%token AS
%token COLON
%token COMMA
%token EOF
%token <string> IDENT
%token <string> INT
%token KW_AC
%token KW_BINARY
%token KW_C
%token KW_CONSTANT
%token KW_INFIX
%token KW_POSTFIX
%token KW_PREFIX
%token KW_UNARY
%token SEMICOLON
%type <(string list * int * Signatures.symbol_fix * Signature_syntax.symbol_theory) list> signature
%type <((string list * int * Signatures.symbol_fix * Signature_syntax.symbol_theory) * ((string list * string)list)) list > sorted_signature
%%

signature:
  _1 = EOF
    {                            ( [] )}
| _1 = decl
    {                            ( [_1] )}
| _1 = decl _2 = SEMICOLON _3 = signature
    {                            ( _1::_3 )}

sorted_signature:
  _1 = EOF
    {                                          ( [] )}
| _1 = sorted_decl
    {                                          ( [_1] )}
| _1 = sorted_decl _2 = SEMICOLON _3 = sorted_signature
    {                                          ( _1::_3 )}

decl:
  _1 = op_list _2 = COLON _3 = fix _4 = arity
    {  ( let t,a = _4
    in
      if _3=Infix & a<>2
      then raise (Syntax_error "Infix symbols must be binary")
      else (_1,a,_3,t)
  )}

sorted_decl:
  _1 = op_list _2 = COLON _3 = fix _4 = arity _5 = AS _6 = profile_list
    {    ( let t,a = _4 in
        if _3=Infix & a<>2
          then raise (Syntax_error "Infix symbols must be binary")
          else
	    if (List.exists (fun (x,y) -> (List.length x)<>a) _6)
	    then raise (Syntax_error "Profile must be compatible with arity")
	    else
	      ((_1,a,_3,t),_6)
	    )}

profile_list:
  _1 = profile
    {                               ( [_1]   )}
| _1 = profile _2 = COMMA _3 = profile_list
    {                               ( _1::_3 )}

profile:
  _1 = sort_list _2 = ARROW _3 = sort
    {                         ( (_1,_3) )}

sort_list:
  
    {                        ( [] )}
| _1 = sort _2 = sort_list
    {                        ( _1::_2 )}

sort:
  _1 = IDENT
    {                        ( _1 )}

fix:
  _1 = KW_PREFIX
    {                ( Prefix )}
| _1 = KW_INFIX
    {                ( Infix  )}
| _1 = KW_POSTFIX
    {                ( Postfix )}
| 
    {                ( Default )}

arity:
  _1 = KW_C
    {               ( (Commutative,2) )}
| _1 = KW_AC
    {               ( (Ac,2) )}
| _1 = KW_CONSTANT
    {               ( (Free,0) )}
| _1 = KW_UNARY
    {               ( (Free,1) )}
| _1 = KW_BINARY
    {               ( (Free,2) )}
| _1 = INT
    {               ( (Free,int_of_string _1) )}

op_list:
  _1 = ident
    {                       ( [_1] )}
| _1 = ident _2 = COMMA _3 = op_list
    {                       ( _1::_3 )}

ident:
  _1 = IDENT
    {        ( _1 )}
| _1 = INT
    {        ( _1 )}

%%
