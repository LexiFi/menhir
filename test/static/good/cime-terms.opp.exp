%{

  open Gen_terms
  open Term_syntax
  open User_signatures
  open Finite_orderings

%}
%start equation_eof
%start equation_set_eof
%start order_constraint_eof
%start precedence_eof
%start rule_set_eof
%start status_eof
%start term_eof
%token AND
%token ARROW
%token CLOSEPAR
%token COMMA
%token EOF
%token EQ
%token GE
%token GT
%token <string> INFIX_IDENT
%token LE
%token LR_LEX
%token LT
%token MUL
%token NE
%token NOT
%token OPENPAR
%token OR
%token <string> POSTFIX_IDENT
%token <string> PREFIX_IDENT
%token RL_LEX
%token SEMICOLON
%token <Variables.var_id> VAR_IDENT
%left OR
%left AND
%nonassoc NOT
%nonassoc EQ GE GT LE LT NE
%left INFIX_IDENT
%nonassoc POSTFIX_IDENT
%nonassoc PREFIX_IDENT
%type <(string Gen_terms.term * string Gen_terms.term)> equation_eof
%type <(string Gen_terms.term * string Gen_terms.term) list> equation_set_eof
%type <string Order_constraints.formula> order_constraint_eof
%type <string Finite_orderings.precedence list> precedence_eof
%type <(string Gen_terms.term * string Gen_terms.term) list> rule_set_eof
%type <(string * Rpo.rpo_status) list > status_eof
%type <string Gen_terms.term> term_eof
%%

term_eof:
  _1 = term _2 = EOF
    {           ( _1 )}

term:
  _1 = VAR_IDENT
    {    ( make_var_term _1 )}
| _1 = PREFIX_IDENT
    {    ( !check_make_term _1 [] )}
| _1 = PREFIX_IDENT _2 = term
    {    ( !check_make_term _1 [_2] )}
| _1 = PREFIX_IDENT _2 = OPENPAR _3 = term _4 = COMMA _5 = term_list _6 = CLOSEPAR %prec POSTFIX_IDENT
    {    ( !check_make_term _1 (_3::_5) )}
| _1 = term _2 = POSTFIX_IDENT
    {    ( !check_make_term _2 [_1] )}
| _1 = OPENPAR _2 = term _3 = COMMA _4 = term_list _5 = CLOSEPAR _6 = POSTFIX_IDENT
    {    ( !check_make_term _6 (_2::_4) )}
| _1 = term _2 = INFIX_IDENT _3 = term
    {    ( !check_make_term _2 [_1;_3] )}
| _1 = OPENPAR _2 = term _3 = CLOSEPAR
    {    ( _2 )}

term_list:
  _1 = term
    {                        ( [_1] )}
| _1 = term _2 = COMMA _3 = term_list
    {                        ( _1 :: _3 )}

equation_set_eof:
  _1 = equation_set _2 = EOF
    {                     ( _1 )}

equation_set:
  
    {                        ( []   )}
| _1 = equation
    {                            ( [_1] )}
| _1 = equation _2 = SEMICOLON _3 = equation_set
    {                                  ( _1::_3 )}

equation_eof:
  _1 = equation _2 = EOF
    {                 ( _1 )}

equation:
  _1 = term _2 = EQ _3 = term
    {                       ( (_1,_3) )}

rule_set_eof:
  _1 = rule_set _2 = EOF
    {                 ( _1 )}

rule_set:
  
    {                          ( []   )}
| _1 = rule
    {                          ( [_1] )}
| _1 = rule _2 = SEMICOLON _3 = rule_set
    {                          ( _1::_3 )}

rule:
  _1 = term _2 = ARROW _3 = term
    {                          ( (_1,_3) )}

order_constraint_eof:
  _1 = formula _2 = EOF
    {                                  ( _1 )}

formula:
  _1 = term _2 = comp _3 = term
    {                           ( Order_constraints.Atom(_1,_2,_3) )}
| _1 = formula _2 = AND _3 = formula
    {                           ( Order_constraints.conj _1 _3 )}
| _1 = formula _2 = OR _3 = formula
    {                           ( Order_constraints.disj _1 _3 )}
| _1 = NOT _2 = formula
    {                           ( Order_constraints.Not(_2) )}
| _1 = OPENPAR _2 = formula _3 = CLOSEPAR
    {                           ( _2 )}

comp:
  _1 = EQ
    {     ( Order_constraints.Eq )}
| _1 = GT
    {     ( Order_constraints.Gt )}
| _1 = LT
    {     ( Order_constraints.Lt )}
| _1 = GE
    {     ( Order_constraints.Ge )}
| _1 = LE
    {     ( Order_constraints.Le )}
| _1 = NE
    {     ( Order_constraints.Ne )}

precedence_eof:
  _1 = precedence _2 = EOF
    {  ( _1 )}

precedence:
  
    {                                ( [] )}
| _1 = ordered_list
    {                  ( [_1] )}
| _1 = ordered_list _2 = COMMA _3 = precedence
    {                                ( _1::_3 )}

ordered_list:
  _1 = ident
    {            ( One(_1) )}
| _1 = ident _2 = EQ _3 = ordered_list
    {                         ( Eq(_1,_3) )}
| _1 = ident _2 = GT _3 = ordered_list
    {                         ( Gt(_1,_3) )}
| _1 = ident _2 = LT _3 = ordered_list
    {                         ( Lt(_1,_3) )}

ident:
  _1 = PREFIX_IDENT
    {                ( _1 )}
| _1 = POSTFIX_IDENT
    {                ( _1 )}
| _1 = INFIX_IDENT
    {                ( _1 )}

status_eof:
  _1 = status _2 = EOF
    {                       ( _1 )}

status:
  
    {                                ( [] )}
| _1 = symbol_status
    {                                ( [_1] )}
| _1 = symbol_status _2 = SEMICOLON _3 = status
    {                                    ( _1::_3 )}

symbol_status:
  _1 = ident _2 = MUL
    {               ( (_1,Rpo.Multiset) )}
| _1 = ident _2 = LR_LEX
    {               ( (_1,Rpo.Lr_lexico) )}
| _1 = ident _2 = RL_LEX
    {               ( (_1,Rpo.Rl_lexico) )}

%%
