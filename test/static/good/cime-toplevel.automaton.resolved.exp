State 0:
## Known stack suffix:
##
## LR(1) items:
command' -> . command [ # ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LET shift to state 62
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On EOF shift to state 81
-- On DIRECTIVE shift to state 82
-- On simple_expr shift to state 15
-- On expr shift to state 87
-- On command_aux shift to state 88
-- On command shift to state 90
## Reductions:

State 1:
## Known stack suffix:
## TRUE
## LR(1) items:
simple_expr -> TRUE . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> TRUE

State 2:
## Known stack suffix:
## STRING
## LR(1) items:
simple_expr -> STRING . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> STRING

State 3:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 61
## Reductions:

State 4:
## Known stack suffix:
## MINUS
## LR(1) items:
expr -> MINUS . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 60
## Reductions:

State 5:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
simple_expr -> LEFTPAR . expr RIGHTPAR [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
simple_expr -> LEFTPAR . expr COMMA commalist RIGHTPAR [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 52
## Reductions:

State 6:
## Known stack suffix:
## LEFTBRACE
## LR(1) items:
simple_expr -> LEFTBRACE . RIGHTBRACE [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
simple_expr -> LEFTBRACE . semicolonlist RIGHTBRACE [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On RIGHTBRACE shift to state 7
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On semicolonlist shift to state 47
-- On expr shift to state 49
## Reductions:

State 7:
## Known stack suffix:
## LEFTBRACE RIGHTBRACE
## LR(1) items:
simple_expr -> LEFTBRACE RIGHTBRACE . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LEFTBRACE RIGHTBRACE

State 8:
## Known stack suffix:
## INTEGER
## LR(1) items:
simple_expr -> INTEGER . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> INTEGER

State 9:
## Known stack suffix:
## IF
## LR(1) items:
expr -> IF . expr THEN expr ELSE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 42
## Reductions:

State 10:
## Known stack suffix:
## IDENT
## LR(1) items:
simple_expr -> IDENT . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> IDENT

State 11:
## Known stack suffix:
## FUN
## LR(1) items:
expr -> FUN . IDENT ARROW expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On IDENT shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## FUN IDENT
## LR(1) items:
expr -> FUN IDENT . ARROW expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On ARROW shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## FUN IDENT ARROW
## LR(1) items:
expr -> FUN IDENT ARROW . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 16
## Reductions:

State 14:
## Known stack suffix:
## FALSE
## LR(1) items:
simple_expr -> FALSE . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> FALSE

State 15:
## Known stack suffix:
## simple_expr
## LR(1) items:
expr -> simple_expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> simple_expr

State 16:
## Known stack suffix:
## FUN IDENT ARROW expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> FUN IDENT ARROW expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> FUN IDENT ARROW expr
-- On SEMICOLON reduce production expr -> FUN IDENT ARROW expr
-- On RIGHTPAR reduce production expr -> FUN IDENT ARROW expr
-- On RIGHTBRACE reduce production expr -> FUN IDENT ARROW expr
-- On ELSE reduce production expr -> FUN IDENT ARROW expr
-- On COMMA reduce production expr -> FUN IDENT ARROW expr

State 17:
## Known stack suffix:
## expr STAR
## LR(1) items:
expr -> expr STAR . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## expr STAR expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr STAR expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr STAR expr
-- On STAR reduce production expr -> expr STAR expr
-- On SEMICOLON reduce production expr -> expr STAR expr
-- On RIGHTPAR reduce production expr -> expr STAR expr
-- On RIGHTBRACE reduce production expr -> expr STAR expr
-- On PLUS reduce production expr -> expr STAR expr
-- On OR reduce production expr -> expr STAR expr
-- On NEQ reduce production expr -> expr STAR expr
-- On MINUS reduce production expr -> expr STAR expr
-- On LT reduce production expr -> expr STAR expr
-- On LE reduce production expr -> expr STAR expr
-- On GT reduce production expr -> expr STAR expr
-- On GE reduce production expr -> expr STAR expr
-- On EQUAL reduce production expr -> expr STAR expr
-- On ELSE reduce production expr -> expr STAR expr
-- On COMMA reduce production expr -> expr STAR expr
-- On AND reduce production expr -> expr STAR expr

State 19:
## Known stack suffix:
## expr CONCAT
## LR(1) items:
expr -> expr CONCAT . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 20
## Reductions:

State 20:
## Known stack suffix:
## expr CONCAT expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr CONCAT expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr CONCAT expr
-- On STAR reduce production expr -> expr CONCAT expr
-- On SEMICOLON reduce production expr -> expr CONCAT expr
-- On RIGHTPAR reduce production expr -> expr CONCAT expr
-- On RIGHTBRACE reduce production expr -> expr CONCAT expr
-- On PLUS reduce production expr -> expr CONCAT expr
-- On OR reduce production expr -> expr CONCAT expr
-- On NEQ reduce production expr -> expr CONCAT expr
-- On MINUS reduce production expr -> expr CONCAT expr
-- On LT reduce production expr -> expr CONCAT expr
-- On LE reduce production expr -> expr CONCAT expr
-- On GT reduce production expr -> expr CONCAT expr
-- On GE reduce production expr -> expr CONCAT expr
-- On EQUAL reduce production expr -> expr CONCAT expr
-- On ELSE reduce production expr -> expr CONCAT expr
-- On COMMA reduce production expr -> expr CONCAT expr
-- On AND reduce production expr -> expr CONCAT expr

State 21:
## Known stack suffix:
## expr simple_expr
## LR(1) items:
expr -> expr simple_expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expr -> expr simple_expr

State 22:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr PLUS expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr PLUS expr
-- On SEMICOLON reduce production expr -> expr PLUS expr
-- On RIGHTPAR reduce production expr -> expr PLUS expr
-- On RIGHTBRACE reduce production expr -> expr PLUS expr
-- On PLUS reduce production expr -> expr PLUS expr
-- On OR reduce production expr -> expr PLUS expr
-- On NEQ reduce production expr -> expr PLUS expr
-- On MINUS reduce production expr -> expr PLUS expr
-- On LT reduce production expr -> expr PLUS expr
-- On LE reduce production expr -> expr PLUS expr
-- On GT reduce production expr -> expr PLUS expr
-- On GE reduce production expr -> expr PLUS expr
-- On EQUAL reduce production expr -> expr PLUS expr
-- On ELSE reduce production expr -> expr PLUS expr
-- On COMMA reduce production expr -> expr PLUS expr
-- On AND reduce production expr -> expr PLUS expr

State 24:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr OR expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr OR expr
-- On SEMICOLON reduce production expr -> expr OR expr
-- On RIGHTPAR reduce production expr -> expr OR expr
-- On RIGHTBRACE reduce production expr -> expr OR expr
-- On OR reduce production expr -> expr OR expr
-- On ELSE reduce production expr -> expr OR expr
-- On COMMA reduce production expr -> expr OR expr

State 26:
## Known stack suffix:
## expr NEQ
## LR(1) items:
expr -> expr NEQ . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr NEQ expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr NEQ expr
-- On SEMICOLON reduce production expr -> expr NEQ expr
-- On RIGHTPAR reduce production expr -> expr NEQ expr
-- On RIGHTBRACE reduce production expr -> expr NEQ expr
-- On OR reduce production expr -> expr NEQ expr
-- On NEQ reduce production expr -> expr NEQ expr
-- On LT reduce production expr -> expr NEQ expr
-- On LE reduce production expr -> expr NEQ expr
-- On GT reduce production expr -> expr NEQ expr
-- On GE reduce production expr -> expr NEQ expr
-- On EQUAL reduce production expr -> expr NEQ expr
-- On ELSE reduce production expr -> expr NEQ expr
-- On COMMA reduce production expr -> expr NEQ expr
-- On AND reduce production expr -> expr NEQ expr

State 28:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr MINUS expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr MINUS expr
-- On SEMICOLON reduce production expr -> expr MINUS expr
-- On RIGHTPAR reduce production expr -> expr MINUS expr
-- On RIGHTBRACE reduce production expr -> expr MINUS expr
-- On PLUS reduce production expr -> expr MINUS expr
-- On OR reduce production expr -> expr MINUS expr
-- On NEQ reduce production expr -> expr MINUS expr
-- On MINUS reduce production expr -> expr MINUS expr
-- On LT reduce production expr -> expr MINUS expr
-- On LE reduce production expr -> expr MINUS expr
-- On GT reduce production expr -> expr MINUS expr
-- On GE reduce production expr -> expr MINUS expr
-- On EQUAL reduce production expr -> expr MINUS expr
-- On ELSE reduce production expr -> expr MINUS expr
-- On COMMA reduce production expr -> expr MINUS expr
-- On AND reduce production expr -> expr MINUS expr

State 30:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr LT expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr LT expr
-- On SEMICOLON reduce production expr -> expr LT expr
-- On RIGHTPAR reduce production expr -> expr LT expr
-- On RIGHTBRACE reduce production expr -> expr LT expr
-- On OR reduce production expr -> expr LT expr
-- On NEQ reduce production expr -> expr LT expr
-- On LT reduce production expr -> expr LT expr
-- On LE reduce production expr -> expr LT expr
-- On GT reduce production expr -> expr LT expr
-- On GE reduce production expr -> expr LT expr
-- On EQUAL reduce production expr -> expr LT expr
-- On ELSE reduce production expr -> expr LT expr
-- On COMMA reduce production expr -> expr LT expr
-- On AND reduce production expr -> expr LT expr

State 32:
## Known stack suffix:
## expr LE
## LR(1) items:
expr -> expr LE . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## expr LE expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr LE expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr LE expr
-- On SEMICOLON reduce production expr -> expr LE expr
-- On RIGHTPAR reduce production expr -> expr LE expr
-- On RIGHTBRACE reduce production expr -> expr LE expr
-- On OR reduce production expr -> expr LE expr
-- On NEQ reduce production expr -> expr LE expr
-- On LT reduce production expr -> expr LE expr
-- On LE reduce production expr -> expr LE expr
-- On GT reduce production expr -> expr LE expr
-- On GE reduce production expr -> expr LE expr
-- On EQUAL reduce production expr -> expr LE expr
-- On ELSE reduce production expr -> expr LE expr
-- On COMMA reduce production expr -> expr LE expr
-- On AND reduce production expr -> expr LE expr

State 34:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr GT expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr GT expr
-- On SEMICOLON reduce production expr -> expr GT expr
-- On RIGHTPAR reduce production expr -> expr GT expr
-- On RIGHTBRACE reduce production expr -> expr GT expr
-- On OR reduce production expr -> expr GT expr
-- On NEQ reduce production expr -> expr GT expr
-- On LT reduce production expr -> expr GT expr
-- On LE reduce production expr -> expr GT expr
-- On GT reduce production expr -> expr GT expr
-- On GE reduce production expr -> expr GT expr
-- On EQUAL reduce production expr -> expr GT expr
-- On ELSE reduce production expr -> expr GT expr
-- On COMMA reduce production expr -> expr GT expr
-- On AND reduce production expr -> expr GT expr

State 36:
## Known stack suffix:
## expr GE
## LR(1) items:
expr -> expr GE . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## expr GE expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr GE expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr GE expr
-- On SEMICOLON reduce production expr -> expr GE expr
-- On RIGHTPAR reduce production expr -> expr GE expr
-- On RIGHTBRACE reduce production expr -> expr GE expr
-- On OR reduce production expr -> expr GE expr
-- On NEQ reduce production expr -> expr GE expr
-- On LT reduce production expr -> expr GE expr
-- On LE reduce production expr -> expr GE expr
-- On GT reduce production expr -> expr GE expr
-- On GE reduce production expr -> expr GE expr
-- On EQUAL reduce production expr -> expr GE expr
-- On ELSE reduce production expr -> expr GE expr
-- On COMMA reduce production expr -> expr GE expr
-- On AND reduce production expr -> expr GE expr

State 38:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr EQUAL expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On MINUS shift to state 28
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr EQUAL expr
-- On SEMICOLON reduce production expr -> expr EQUAL expr
-- On RIGHTPAR reduce production expr -> expr EQUAL expr
-- On RIGHTBRACE reduce production expr -> expr EQUAL expr
-- On OR reduce production expr -> expr EQUAL expr
-- On NEQ reduce production expr -> expr EQUAL expr
-- On LT reduce production expr -> expr EQUAL expr
-- On LE reduce production expr -> expr EQUAL expr
-- On GT reduce production expr -> expr EQUAL expr
-- On GE reduce production expr -> expr EQUAL expr
-- On EQUAL reduce production expr -> expr EQUAL expr
-- On ELSE reduce production expr -> expr EQUAL expr
-- On COMMA reduce production expr -> expr EQUAL expr
-- On AND reduce production expr -> expr EQUAL expr

State 40:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr AND expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> expr AND expr
-- On SEMICOLON reduce production expr -> expr AND expr
-- On RIGHTPAR reduce production expr -> expr AND expr
-- On RIGHTBRACE reduce production expr -> expr AND expr
-- On OR reduce production expr -> expr AND expr
-- On ELSE reduce production expr -> expr AND expr
-- On COMMA reduce production expr -> expr AND expr
-- On AND reduce production expr -> expr AND expr

State 42:
## Known stack suffix:
## IF expr
## LR(1) items:
expr -> IF expr . THEN expr ELSE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . simple_expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
## Transitions:
-- On TRUE shift to state 1
-- On THEN shift to state 43
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:

State 43:
## Known stack suffix:
## IF expr THEN
## LR(1) items:
expr -> IF expr THEN . expr ELSE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## IF expr THEN expr
## LR(1) items:
expr -> IF expr THEN expr . ELSE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . simple_expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . PLUS expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . MINUS expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . STAR expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . EQUAL expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . NEQ expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . GE expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . GT expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . LE expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . LT expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . AND expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . OR expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
expr -> expr . CONCAT expr [ TRUE STRING STAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On ELSE shift to state 45
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:

State 45:
## Known stack suffix:
## IF expr THEN expr ELSE
## LR(1) items:
expr -> IF expr THEN expr ELSE . expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## IF expr THEN expr ELSE expr
## LR(1) items:
expr -> IF expr THEN expr ELSE expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> IF expr THEN expr ELSE expr
-- On SEMICOLON reduce production expr -> IF expr THEN expr ELSE expr
-- On RIGHTPAR reduce production expr -> IF expr THEN expr ELSE expr
-- On RIGHTBRACE reduce production expr -> IF expr THEN expr ELSE expr
-- On ELSE reduce production expr -> IF expr THEN expr ELSE expr
-- On COMMA reduce production expr -> IF expr THEN expr ELSE expr

State 47:
## Known stack suffix:
## LEFTBRACE semicolonlist
## LR(1) items:
simple_expr -> LEFTBRACE semicolonlist . RIGHTBRACE [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On RIGHTBRACE shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## LEFTBRACE semicolonlist RIGHTBRACE
## LR(1) items:
simple_expr -> LEFTBRACE semicolonlist RIGHTBRACE . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LEFTBRACE semicolonlist RIGHTBRACE

State 49:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . PLUS expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . MINUS expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . STAR expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . EQUAL expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . NEQ expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GE expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GT expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LE expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LT expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . AND expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . OR expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . CONCAT expr [ TRUE STRING STAR SEMICOLON RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
semicolonlist -> expr . [ RIGHTBRACE ]
semicolonlist -> expr . SEMICOLON [ RIGHTBRACE ]
semicolonlist -> expr . SEMICOLON semicolonlist [ RIGHTBRACE ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On SEMICOLON shift to state 50
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:
-- On RIGHTBRACE reduce production semicolonlist -> expr

State 50:
## Known stack suffix:
## expr SEMICOLON
## LR(1) items:
semicolonlist -> expr SEMICOLON . [ RIGHTBRACE ]
semicolonlist -> expr SEMICOLON . semicolonlist [ RIGHTBRACE ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On semicolonlist shift to state 51
-- On expr shift to state 49
## Reductions:
-- On RIGHTBRACE reduce production semicolonlist -> expr SEMICOLON

State 51:
## Known stack suffix:
## expr SEMICOLON semicolonlist
## LR(1) items:
semicolonlist -> expr SEMICOLON semicolonlist . [ RIGHTBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production semicolonlist -> expr SEMICOLON semicolonlist

State 52:
## Known stack suffix:
## LEFTPAR expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
simple_expr -> LEFTPAR expr . RIGHTPAR [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
simple_expr -> LEFTPAR expr . COMMA commalist RIGHTPAR [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On RIGHTPAR shift to state 53
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On COMMA shift to state 54
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:

State 53:
## Known stack suffix:
## LEFTPAR expr RIGHTPAR
## LR(1) items:
simple_expr -> LEFTPAR expr RIGHTPAR . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LEFTPAR expr RIGHTPAR

State 54:
## Known stack suffix:
## LEFTPAR expr COMMA
## LR(1) items:
simple_expr -> LEFTPAR expr COMMA . commalist RIGHTPAR [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 55
-- On commalist shift to state 58
## Reductions:

State 55:
## Known stack suffix:
## expr
## LR(1) items:
commalist -> expr . [ RIGHTPAR ]
commalist -> expr . COMMA commalist [ RIGHTPAR ]
expr -> expr . simple_expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE STRING STAR RIGHTPAR PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On COMMA shift to state 56
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:
-- On RIGHTPAR reduce production commalist -> expr

State 56:
## Known stack suffix:
## expr COMMA
## LR(1) items:
commalist -> expr COMMA . commalist [ RIGHTPAR ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 55
-- On commalist shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## expr COMMA commalist
## LR(1) items:
commalist -> expr COMMA commalist . [ RIGHTPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production commalist -> expr COMMA commalist

State 58:
## Known stack suffix:
## LEFTPAR expr COMMA commalist
## LR(1) items:
simple_expr -> LEFTPAR expr COMMA commalist . RIGHTPAR [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On RIGHTPAR shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## LEFTPAR expr COMMA commalist RIGHTPAR
## LR(1) items:
simple_expr -> LEFTPAR expr COMMA commalist RIGHTPAR . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production simple_expr -> LEFTPAR expr COMMA commalist RIGHTPAR

State 60:
## Known stack suffix:
## MINUS expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> MINUS expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On FALSE shift to state 14
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> MINUS expr
-- On STAR reduce production expr -> MINUS expr
-- On SEMICOLON reduce production expr -> MINUS expr
-- On RIGHTPAR reduce production expr -> MINUS expr
-- On RIGHTBRACE reduce production expr -> MINUS expr
-- On PLUS reduce production expr -> MINUS expr
-- On OR reduce production expr -> MINUS expr
-- On NEQ reduce production expr -> MINUS expr
-- On MINUS reduce production expr -> MINUS expr
-- On LT reduce production expr -> MINUS expr
-- On LE reduce production expr -> MINUS expr
-- On GT reduce production expr -> MINUS expr
-- On GE reduce production expr -> MINUS expr
-- On EQUAL reduce production expr -> MINUS expr
-- On ELSE reduce production expr -> MINUS expr
-- On COMMA reduce production expr -> MINUS expr
-- On AND reduce production expr -> MINUS expr

State 61:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . simple_expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . PLUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . MINUS expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . STAR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . EQUAL expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . NEQ expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . GT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LE expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . LT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . AND expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . OR expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> expr . CONCAT expr [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
expr -> NOT expr . [ TRUE THEN STRING STAR SEMICOLON RIGHTPAR RIGHTBRACE PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL ELSE CONCAT COMMA AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On simple_expr shift to state 21
## Reductions:
-- On THEN reduce production expr -> NOT expr
-- On SEMICOLON reduce production expr -> NOT expr
-- On RIGHTPAR reduce production expr -> NOT expr
-- On RIGHTBRACE reduce production expr -> NOT expr
-- On OR reduce production expr -> NOT expr
-- On ELSE reduce production expr -> NOT expr
-- On COMMA reduce production expr -> NOT expr
-- On AND reduce production expr -> NOT expr

State 62:
## Known stack suffix:
## LET
## LR(1) items:
command_aux -> LET . IDENT EQUAL expr [ SEMICOLON ]
command_aux -> LET . LEFTPAR identlist RIGHTPAR EQUAL expr [ SEMICOLON ]
command_aux -> LET . FUN IDENT args EQUAL expr [ SEMICOLON ]
## Transitions:
-- On LEFTPAR shift to state 63
-- On IDENT shift to state 71
-- On FUN shift to state 74
## Reductions:

State 63:
## Known stack suffix:
## LET LEFTPAR
## LR(1) items:
command_aux -> LET LEFTPAR . identlist RIGHTPAR EQUAL expr [ SEMICOLON ]
## Transitions:
-- On IDENT shift to state 64
-- On identlist shift to state 67
## Reductions:

State 64:
## Known stack suffix:
## IDENT
## LR(1) items:
identlist -> IDENT . [ RIGHTPAR ]
identlist -> IDENT . COMMA identlist [ RIGHTPAR ]
## Transitions:
-- On COMMA shift to state 65
## Reductions:
-- On RIGHTPAR reduce production identlist -> IDENT

State 65:
## Known stack suffix:
## IDENT COMMA
## LR(1) items:
identlist -> IDENT COMMA . identlist [ RIGHTPAR ]
## Transitions:
-- On IDENT shift to state 64
-- On identlist shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## IDENT COMMA identlist
## LR(1) items:
identlist -> IDENT COMMA identlist . [ RIGHTPAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identlist -> IDENT COMMA identlist

State 67:
## Known stack suffix:
## LET LEFTPAR identlist
## LR(1) items:
command_aux -> LET LEFTPAR identlist . RIGHTPAR EQUAL expr [ SEMICOLON ]
## Transitions:
-- On RIGHTPAR shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## LET LEFTPAR identlist RIGHTPAR
## LR(1) items:
command_aux -> LET LEFTPAR identlist RIGHTPAR . EQUAL expr [ SEMICOLON ]
## Transitions:
-- On EQUAL shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## LET LEFTPAR identlist RIGHTPAR EQUAL
## LR(1) items:
command_aux -> LET LEFTPAR identlist RIGHTPAR EQUAL . expr [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## LET LEFTPAR identlist RIGHTPAR EQUAL expr
## LR(1) items:
command_aux -> LET LEFTPAR identlist RIGHTPAR EQUAL expr . [ SEMICOLON ]
expr -> expr . simple_expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . PLUS expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . MINUS expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . STAR expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . EQUAL expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . NEQ expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GE expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LE expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . AND expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . OR expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . CONCAT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:
-- On SEMICOLON reduce production command_aux -> LET LEFTPAR identlist RIGHTPAR EQUAL expr

State 71:
## Known stack suffix:
## LET IDENT
## LR(1) items:
command_aux -> LET IDENT . EQUAL expr [ SEMICOLON ]
## Transitions:
-- On EQUAL shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## LET IDENT EQUAL
## LR(1) items:
command_aux -> LET IDENT EQUAL . expr [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## LET IDENT EQUAL expr
## LR(1) items:
command_aux -> LET IDENT EQUAL expr . [ SEMICOLON ]
expr -> expr . simple_expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . PLUS expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . MINUS expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . STAR expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . EQUAL expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . NEQ expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GE expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LE expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . AND expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . OR expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . CONCAT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:
-- On SEMICOLON reduce production command_aux -> LET IDENT EQUAL expr

State 74:
## Known stack suffix:
## LET FUN
## LR(1) items:
command_aux -> LET FUN . IDENT args EQUAL expr [ SEMICOLON ]
## Transitions:
-- On IDENT shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## LET FUN IDENT
## LR(1) items:
command_aux -> LET FUN IDENT . args EQUAL expr [ SEMICOLON ]
## Transitions:
-- On IDENT shift to state 76
-- On args shift to state 78
## Reductions:

State 76:
## Known stack suffix:
## IDENT
## LR(1) items:
args -> IDENT . [ EQUAL ]
args -> IDENT . args [ EQUAL ]
## Transitions:
-- On IDENT shift to state 76
-- On args shift to state 77
## Reductions:
-- On EQUAL reduce production args -> IDENT

State 77:
## Known stack suffix:
## IDENT args
## LR(1) items:
args -> IDENT args . [ EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> IDENT args

State 78:
## Known stack suffix:
## LET FUN IDENT args
## LR(1) items:
command_aux -> LET FUN IDENT args . EQUAL expr [ SEMICOLON ]
## Transitions:
-- On EQUAL shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## LET FUN IDENT args EQUAL
## LR(1) items:
command_aux -> LET FUN IDENT args EQUAL . expr [ SEMICOLON ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On NOT shift to state 3
-- On MINUS shift to state 4
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On INTEGER shift to state 8
-- On IF shift to state 9
-- On IDENT shift to state 10
-- On FUN shift to state 11
-- On FALSE shift to state 14
-- On simple_expr shift to state 15
-- On expr shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## LET FUN IDENT args EQUAL expr
## LR(1) items:
command_aux -> LET FUN IDENT args EQUAL expr . [ SEMICOLON ]
expr -> expr . simple_expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . PLUS expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . MINUS expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . STAR expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . EQUAL expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . NEQ expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GE expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LE expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . AND expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . OR expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . CONCAT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:
-- On SEMICOLON reduce production command_aux -> LET FUN IDENT args EQUAL expr

State 81:
## Known stack suffix:
## EOF
## LR(1) items:
command -> EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production command -> EOF

State 82:
## Known stack suffix:
## DIRECTIVE
## LR(1) items:
command_aux -> DIRECTIVE . IDENT [ SEMICOLON ]
command_aux -> DIRECTIVE . IDENT STRING [ SEMICOLON ]
command_aux -> DIRECTIVE . IDENT IDENT [ SEMICOLON ]
command_aux -> DIRECTIVE . IDENT INTEGER [ SEMICOLON ]
## Transitions:
-- On IDENT shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## DIRECTIVE IDENT
## LR(1) items:
command_aux -> DIRECTIVE IDENT . [ SEMICOLON ]
command_aux -> DIRECTIVE IDENT . STRING [ SEMICOLON ]
command_aux -> DIRECTIVE IDENT . IDENT [ SEMICOLON ]
command_aux -> DIRECTIVE IDENT . INTEGER [ SEMICOLON ]
## Transitions:
-- On STRING shift to state 84
-- On INTEGER shift to state 85
-- On IDENT shift to state 86
## Reductions:
-- On SEMICOLON reduce production command_aux -> DIRECTIVE IDENT

State 84:
## Known stack suffix:
## DIRECTIVE IDENT STRING
## LR(1) items:
command_aux -> DIRECTIVE IDENT STRING . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_aux -> DIRECTIVE IDENT STRING

State 85:
## Known stack suffix:
## DIRECTIVE IDENT INTEGER
## LR(1) items:
command_aux -> DIRECTIVE IDENT INTEGER . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_aux -> DIRECTIVE IDENT INTEGER

State 86:
## Known stack suffix:
## DIRECTIVE IDENT IDENT
## LR(1) items:
command_aux -> DIRECTIVE IDENT IDENT . [ SEMICOLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production command_aux -> DIRECTIVE IDENT IDENT

State 87:
## Known stack suffix:
## expr
## LR(1) items:
command_aux -> expr . [ SEMICOLON ]
expr -> expr . simple_expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . PLUS expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . MINUS expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . STAR expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . EQUAL expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . NEQ expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GE expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . GT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LE expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . LT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . AND expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . OR expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
expr -> expr . CONCAT expr [ TRUE STRING STAR SEMICOLON PLUS OR NEQ MINUS LT LEFTPAR LEFTBRACE LE INTEGER IDENT GT GE FALSE EQUAL CONCAT AND ]
## Transitions:
-- On TRUE shift to state 1
-- On STRING shift to state 2
-- On STAR shift to state 17
-- On PLUS shift to state 22
-- On OR shift to state 24
-- On NEQ shift to state 26
-- On MINUS shift to state 28
-- On LT shift to state 30
-- On LEFTPAR shift to state 5
-- On LEFTBRACE shift to state 6
-- On LE shift to state 32
-- On INTEGER shift to state 8
-- On IDENT shift to state 10
-- On GT shift to state 34
-- On GE shift to state 36
-- On FALSE shift to state 14
-- On EQUAL shift to state 38
-- On CONCAT shift to state 19
-- On AND shift to state 40
-- On simple_expr shift to state 21
## Reductions:
-- On SEMICOLON reduce production command_aux -> expr

State 88:
## Known stack suffix:
## command_aux
## LR(1) items:
command -> command_aux . SEMICOLON [ # ]
## Transitions:
-- On SEMICOLON shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## command_aux SEMICOLON
## LR(1) items:
command -> command_aux SEMICOLON . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production command -> command_aux SEMICOLON

State 90:
## Known stack suffix:
## command
## LR(1) items:
command' -> command . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept command

