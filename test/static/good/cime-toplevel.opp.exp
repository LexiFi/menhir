%{

open Abstract_syntax;;

%}
%start command
%token AND
%token ARROW
%token COMMA
%token CONCAT
%token DIRECTIVE
%token ELSE
%token EOF
%token EQUAL
%token FALSE
%token FUN
%token GE
%token GT
%token <string> IDENT
%token IF
%token <Numbers.t> INTEGER
%token LE
%token LEFTBRACE
%token LEFTPAR
%token LET
%token LT
%token MINUS
%token NEQ
%token NOT
%token OR
%token PLUS
%token RIGHTBRACE
%token RIGHTPAR
%token SEMICOLON
%token STAR
%token <string> STRING
%token THEN
%token TRUE
%nonassoc ARROW IF
%left OR
%left AND
%left NOT
%left EQUAL GE GT LE LT NEQ
%left MINUS PLUS
%left STAR
%nonassoc UMINUS
%nonassoc CONCAT FALSE FUN IDENT INTEGER LEFTBRACE LEFTPAR STRING TRUE
%left APPLY
%type <Abstract_syntax.abstract_command> command
%%

command:
  _1 = EOF
    {                        ( raise End_of_file )}
| _1 = command_aux _2 = SEMICOLON
    {                        ( _1 )}

command_aux:
  _1 = LET _2 = IDENT _3 = EQUAL _4 = expr
    {                                ( Def(_2,_4) )}
| _1 = LET _2 = LEFTPAR _3 = identlist _4 = RIGHTPAR _5 = EQUAL _6 = expr
    {                                                     ( Deftuple(_3,_6) )}
| _1 = LET _2 = FUN _3 = IDENT _4 = args _5 = EQUAL _6 = expr
    {                                ( Deffun(_3,_4,_6) )}
| _1 = expr
    {                                ( Eval(_1) )}
| _1 = DIRECTIVE _2 = IDENT
    {                                ( Directive(_2,"") )}
| _1 = DIRECTIVE _2 = IDENT _3 = STRING
    {                                ( Directive(_2,_3) )}
| _1 = DIRECTIVE _2 = IDENT _3 = IDENT
    {                                ( Directive(_2,_3) )}
| _1 = DIRECTIVE _2 = IDENT _3 = INTEGER
    {                                ( Directive(_2,Numbers.to_string _3) )}

identlist:
  _1 = IDENT
    {                                  ( [_1] )}
| _1 = IDENT _2 = COMMA _3 = identlist
    {                                  ( _1::_3 )}

args:
  _1 = IDENT
    {                            ( [_1] )}
| _1 = IDENT _2 = args
    {                            ( _1::_2 )}

expr:
  _1 = IF _2 = expr _3 = THEN _4 = expr _5 = ELSE _6 = expr %prec IF
    {    ( If(_2,_4,_6) )}
| _1 = expr _2 = simple_expr %prec APPLY
    {    ( Apply(_1,_2) )}
| _1 = FUN _2 = IDENT _3 = ARROW _4 = expr
    {    ( Fun(_2,_4) )}
| _1 = expr _2 = PLUS _3 = expr
    {    ( Apply(Apply(Var("+"),_1),_3) )}
| _1 = expr _2 = MINUS _3 = expr
    {    ( Apply(Apply(Var("-"),_1),_3) )}
| _1 = MINUS _2 = expr %prec UMINUS
    {    ( Apply(Var("_minus"),_2) )}
| _1 = expr _2 = STAR _3 = expr
    {    ( Apply(Apply(Var("*"),_1),_3) )}
| _1 = expr _2 = EQUAL _3 = expr
    {    ( Apply(Apply(Var("="),_1),_3) )}
| _1 = expr _2 = NEQ _3 = expr
    {                          ( Apply(Apply(Var("<>"),_1),_3) )}
| _1 = expr _2 = GE _3 = expr
    {                          ( Apply(Apply(Var(">="),_1),_3) )}
| _1 = expr _2 = GT _3 = expr
    {                          ( Apply(Apply(Var(">"),_1),_3) )}
| _1 = expr _2 = LE _3 = expr
    {                          ( Apply(Apply(Var("<="),_1),_3) )}
| _1 = expr _2 = LT _3 = expr
    {                          ( Apply(Apply(Var("<"),_1),_3) )}
| _1 = expr _2 = AND _3 = expr
    {                          ( Apply(Apply(Var("and"),_1),_3) )}
| _1 = expr _2 = OR _3 = expr
    {                          ( Apply(Apply(Var("or"),_1),_3) )}
| _1 = expr _2 = CONCAT _3 = expr
    {                              ( Apply(Apply(Var("^"),_1),_3) )}
| _1 = NOT _2 = expr
    {                          ( Apply(Var("not"),_2) )}
| _1 = simple_expr
    {      ( _1 )}

simple_expr:
  _1 = IDENT
    {    ( Var(_1) )}
| _1 = INTEGER
    {    ( Integer(_1) )}
| _1 = TRUE
    {    ( Bool(true) )}
| _1 = FALSE
    {    ( Bool(false) )}
| _1 = STRING
    {    ( String(_1) )}
| _1 = LEFTPAR _2 = expr _3 = RIGHTPAR
    {    ( _2 )}
| _1 = LEFTPAR _2 = expr _3 = COMMA _4 = commalist _5 = RIGHTPAR
    {      ( Tuple(_2::_4) )}
| _1 = LEFTBRACE _2 = RIGHTBRACE
    {   ( Set([]) )}
| _1 = LEFTBRACE _2 = semicolonlist _3 = RIGHTBRACE
    {   ( Set(_2) )}

commalist:
  _1 = expr
    {    ( [_1] )}
| _1 = expr _2 = COMMA _3 = commalist
    {    ( _1::_3 )}

semicolonlist:
  _1 = expr
    {    ( [_1] )}
| _1 = expr _2 = SEMICOLON
    {    ( [_1] )}
| _1 = expr _2 = SEMICOLON _3 = semicolonlist
    {    ( _1::_3 )}

%%
