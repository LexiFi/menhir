State 0:
## Known stack suffix:
##
## LR(1) items:
precedence_eof' -> . precedence_eof [ # ]
## Transitions:
-- On IDENT shift to state 1
-- On precedence_eof shift to state 8
-- On precedence shift to state 9
-- On ordered_list shift to state 11
## Reductions:
-- On EOF reduce production precedence ->

State 1:
## Known stack suffix:
## IDENT
## LR(1) items:
ordered_list -> IDENT . [ EOF COMMA ]
ordered_list -> IDENT . EQ ordered_list [ EOF COMMA ]
ordered_list -> IDENT . GT ordered_list [ EOF COMMA ]
ordered_list -> IDENT . LT ordered_list [ EOF COMMA ]
## Transitions:
-- On LT shift to state 2
-- On GT shift to state 4
-- On EQ shift to state 6
## Reductions:
-- On EOF reduce production ordered_list -> IDENT
-- On COMMA reduce production ordered_list -> IDENT

State 2:
## Known stack suffix:
## IDENT LT
## LR(1) items:
ordered_list -> IDENT LT . ordered_list [ EOF COMMA ]
## Transitions:
-- On IDENT shift to state 1
-- On ordered_list shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## IDENT LT ordered_list
## LR(1) items:
ordered_list -> IDENT LT ordered_list . [ EOF COMMA ]
## Transitions:
## Reductions:
-- On EOF reduce production ordered_list -> IDENT LT ordered_list
-- On COMMA reduce production ordered_list -> IDENT LT ordered_list

State 4:
## Known stack suffix:
## IDENT GT
## LR(1) items:
ordered_list -> IDENT GT . ordered_list [ EOF COMMA ]
## Transitions:
-- On IDENT shift to state 1
-- On ordered_list shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## IDENT GT ordered_list
## LR(1) items:
ordered_list -> IDENT GT ordered_list . [ EOF COMMA ]
## Transitions:
## Reductions:
-- On EOF reduce production ordered_list -> IDENT GT ordered_list
-- On COMMA reduce production ordered_list -> IDENT GT ordered_list

State 6:
## Known stack suffix:
## IDENT EQ
## LR(1) items:
ordered_list -> IDENT EQ . ordered_list [ EOF COMMA ]
## Transitions:
-- On IDENT shift to state 1
-- On ordered_list shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## IDENT EQ ordered_list
## LR(1) items:
ordered_list -> IDENT EQ ordered_list . [ EOF COMMA ]
## Transitions:
## Reductions:
-- On EOF reduce production ordered_list -> IDENT EQ ordered_list
-- On COMMA reduce production ordered_list -> IDENT EQ ordered_list

State 8:
## Known stack suffix:
## precedence_eof
## LR(1) items:
precedence_eof' -> precedence_eof . [ # ]
## Transitions:
## Reductions:
-- On # accept precedence_eof

State 9:
## Known stack suffix:
## precedence
## LR(1) items:
precedence_eof -> precedence . EOF [ # ]
## Transitions:
-- On EOF shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## precedence EOF
## LR(1) items:
precedence_eof -> precedence EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production precedence_eof -> precedence EOF

State 11:
## Known stack suffix:
## ordered_list
## LR(1) items:
precedence -> ordered_list . [ EOF ]
precedence -> ordered_list . COMMA precedence [ EOF ]
## Transitions:
-- On COMMA shift to state 12
## Reductions:
-- On EOF reduce production precedence -> ordered_list

State 12:
## Known stack suffix:
## ordered_list COMMA
## LR(1) items:
precedence -> ordered_list COMMA . precedence [ EOF ]
## Transitions:
-- On IDENT shift to state 1
-- On precedence shift to state 13
-- On ordered_list shift to state 11
## Reductions:
-- On EOF reduce production precedence ->

State 13:
## Known stack suffix:
## ordered_list COMMA precedence
## LR(1) items:
precedence -> ordered_list COMMA precedence . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production precedence -> ordered_list COMMA precedence

State 14:
## Known stack suffix:
##
## LR(1) items:
rule_set_eof' -> . rule_set_eof [ # ]
## Transitions:
-- On LPAR shift to state 15
-- On IDENT shift to state 16
-- On word shift to state 25
-- On rule_set_eof shift to state 28
-- On rule_set shift to state 29
-- On rule shift to state 31
-- On factor shift to state 19
## Reductions:
-- On EOF reduce production rule_set ->
-- On ARROW reduce production word ->

State 15:
## Known stack suffix:
## LPAR
## LR(1) items:
factor -> LPAR . word RPAR [ SEMICOLON RPAR POWER LPAR IDENT EOF ARROW ]
## Transitions:
-- On LPAR shift to state 15
-- On IDENT shift to state 16
-- On word shift to state 17
-- On factor shift to state 19
## Reductions:
-- On RPAR reduce production word ->

State 16:
## Known stack suffix:
## IDENT
## LR(1) items:
factor -> IDENT . [ SEMICOLON RPAR POWER LPAR IDENT EOF ARROW ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production factor -> IDENT
-- On RPAR reduce production factor -> IDENT
-- On POWER reduce production factor -> IDENT
-- On LPAR reduce production factor -> IDENT
-- On IDENT reduce production factor -> IDENT
-- On EOF reduce production factor -> IDENT
-- On ARROW reduce production factor -> IDENT

State 17:
## Known stack suffix:
## LPAR word
## LR(1) items:
factor -> LPAR word . RPAR [ SEMICOLON RPAR POWER LPAR IDENT EOF ARROW ]
## Transitions:
-- On RPAR shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## LPAR word RPAR
## LR(1) items:
factor -> LPAR word RPAR . [ SEMICOLON RPAR POWER LPAR IDENT EOF ARROW ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production factor -> LPAR word RPAR
-- On RPAR reduce production factor -> LPAR word RPAR
-- On POWER reduce production factor -> LPAR word RPAR
-- On LPAR reduce production factor -> LPAR word RPAR
-- On IDENT reduce production factor -> LPAR word RPAR
-- On EOF reduce production factor -> LPAR word RPAR
-- On ARROW reduce production factor -> LPAR word RPAR

State 19:
## Known stack suffix:
## factor
## LR(1) items:
factor -> factor . POWER expo [ SEMICOLON RPAR POWER LPAR IDENT EOF ARROW ]
word -> factor . word [ SEMICOLON RPAR EOF ARROW ]
## Transitions:
-- On POWER shift to state 20
-- On LPAR shift to state 15
-- On IDENT shift to state 16
-- On word shift to state 24
-- On factor shift to state 19
## Reductions:
-- On SEMICOLON reduce production word ->
-- On RPAR reduce production word ->
-- On EOF reduce production word ->
-- On ARROW reduce production word ->

State 20:
## Known stack suffix:
## factor POWER
## LR(1) items:
factor -> factor POWER . expo [ SEMICOLON RPAR POWER LPAR IDENT EOF ARROW ]
## Transitions:
-- On INT shift to state 21
-- On IDENT shift to state 22
-- On expo shift to state 23
## Reductions:

State 21:
## Known stack suffix:
## INT
## LR(1) items:
expo -> INT . [ SEMICOLON RPAR POWER LPAR IDENT EOF ARROW ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production expo -> INT
-- On RPAR reduce production expo -> INT
-- On POWER reduce production expo -> INT
-- On LPAR reduce production expo -> INT
-- On IDENT reduce production expo -> INT
-- On EOF reduce production expo -> INT
-- On ARROW reduce production expo -> INT

State 22:
## Known stack suffix:
## IDENT
## LR(1) items:
expo -> IDENT . [ SEMICOLON RPAR POWER LPAR IDENT EOF ARROW ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production expo -> IDENT
-- On RPAR reduce production expo -> IDENT
-- On POWER reduce production expo -> IDENT
-- On LPAR reduce production expo -> IDENT
-- On IDENT reduce production expo -> IDENT
-- On EOF reduce production expo -> IDENT
-- On ARROW reduce production expo -> IDENT

State 23:
## Known stack suffix:
## factor POWER expo
## LR(1) items:
factor -> factor POWER expo . [ SEMICOLON RPAR POWER LPAR IDENT EOF ARROW ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production factor -> factor POWER expo
-- On RPAR reduce production factor -> factor POWER expo
-- On POWER reduce production factor -> factor POWER expo
-- On LPAR reduce production factor -> factor POWER expo
-- On IDENT reduce production factor -> factor POWER expo
-- On EOF reduce production factor -> factor POWER expo
-- On ARROW reduce production factor -> factor POWER expo

State 24:
## Known stack suffix:
## factor word
## LR(1) items:
word -> factor word . [ SEMICOLON RPAR EOF ARROW ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production word -> factor word
-- On RPAR reduce production word -> factor word
-- On EOF reduce production word -> factor word
-- On ARROW reduce production word -> factor word

State 25:
## Known stack suffix:
## word
## LR(1) items:
rule -> word . ARROW word [ SEMICOLON EOF ]
## Transitions:
-- On ARROW shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## word ARROW
## LR(1) items:
rule -> word ARROW . word [ SEMICOLON EOF ]
## Transitions:
-- On LPAR shift to state 15
-- On IDENT shift to state 16
-- On word shift to state 27
-- On factor shift to state 19
## Reductions:
-- On SEMICOLON reduce production word ->
-- On EOF reduce production word ->

State 27:
## Known stack suffix:
## word ARROW word
## LR(1) items:
rule -> word ARROW word . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production rule -> word ARROW word
-- On EOF reduce production rule -> word ARROW word

State 28:
## Known stack suffix:
## rule_set_eof
## LR(1) items:
rule_set_eof' -> rule_set_eof . [ # ]
## Transitions:
## Reductions:
-- On # accept rule_set_eof

State 29:
## Known stack suffix:
## rule_set
## LR(1) items:
rule_set_eof -> rule_set . EOF [ # ]
## Transitions:
-- On EOF shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## rule_set EOF
## LR(1) items:
rule_set_eof -> rule_set EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production rule_set_eof -> rule_set EOF

State 31:
## Known stack suffix:
## rule
## LR(1) items:
rule_set -> rule . [ EOF ]
rule_set -> rule . SEMICOLON rule_set [ EOF ]
## Transitions:
-- On SEMICOLON shift to state 32
## Reductions:
-- On EOF reduce production rule_set -> rule

State 32:
## Known stack suffix:
## rule SEMICOLON
## LR(1) items:
rule_set -> rule SEMICOLON . rule_set [ EOF ]
## Transitions:
-- On LPAR shift to state 15
-- On IDENT shift to state 16
-- On word shift to state 25
-- On rule_set shift to state 33
-- On rule shift to state 31
-- On factor shift to state 19
## Reductions:
-- On EOF reduce production rule_set ->
-- On ARROW reduce production word ->

State 33:
## Known stack suffix:
## rule SEMICOLON rule_set
## LR(1) items:
rule_set -> rule SEMICOLON rule_set . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production rule_set -> rule SEMICOLON rule_set

State 34:
## Known stack suffix:
##
## LR(1) items:
word_eof' -> . word_eof [ # ]
## Transitions:
-- On LPAR shift to state 15
-- On IDENT shift to state 16
-- On word_eof shift to state 35
-- On word shift to state 36
-- On factor shift to state 19
## Reductions:
-- On EOF reduce production word ->

State 35:
## Known stack suffix:
## word_eof
## LR(1) items:
word_eof' -> word_eof . [ # ]
## Transitions:
## Reductions:
-- On # accept word_eof

State 36:
## Known stack suffix:
## word
## LR(1) items:
word_eof -> word . EOF [ # ]
## Transitions:
-- On EOF shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## word EOF
## LR(1) items:
word_eof -> word EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production word_eof -> word EOF

