%{

  open Words
  open Word_syntax
  open String_signatures
  open Finite_orderings

  let word_power = Listutils.power

%}
%start precedence_eof
%start rule_set_eof
%start word_eof
%token ARROW
%token COMMA
%token EOF
%token EQ
%token GT
%token <String_signatures.symbol_id> IDENT
%token <int> INT
%token LPAR
%token LT
%token POWER
%token RPAR
%token SEMICOLON
%type <String_signatures.symbol_id Orderings_generalities.ordering> precedence_eof
%type <String_signatures.symbol_id String_rewriting.srs> rule_set_eof
%type <String_signatures.symbol_id Words.word> word_eof
%%

word_eof:
  _1 = word _2 = EOF
    {           ( _1 )}

word:
  
    {    ( [] )}
| _1 = factor _2 = word
    {    ( _1 @ _2 )}

factor:
  _1 = IDENT
    {    ( [_1] )}
| _1 = factor _2 = POWER _3 = expo
    {    ( word_power _1 _3 )}
| _1 = LPAR _2 = word _3 = RPAR
    {    ( _2 )}

expo:
  _1 = INT
    {       ( _1 )}
| _1 = IDENT
    {      (
	try
	  int_of_string(!current_signature#string_of_symbol _1)
	with
	    _ ->
	      raise (Syntax_error "invalid exponent")
      )}

rule_set_eof:
  _1 = rule_set _2 = EOF
    {                           ( _1 )}

rule_set:
  
    {    ( [] )}
| _1 = rule
    {    ( [_1] )}
| _1 = rule _2 = SEMICOLON _3 = rule_set
    {    ( _1::_3 )}

rule:
  _1 = word _2 = ARROW _3 = word
    {                          ( (_1,_3) )}

precedence_eof:
  _1 = precedence _2 = EOF
    {  (
    let order = identity_ordering (Pervasives.compare : symbol_id -> symbol_id -> int)
    in
    let order = List.fold_left add_list order _1
    in compare order
  )}

precedence:
  
    {                                ( [] )}
| _1 = ordered_list
    {                  ( [_1] )}
| _1 = ordered_list _2 = COMMA _3 = precedence
    {                                ( _1::_3 )}

ordered_list:
  _1 = IDENT
    {            ( One(_1) )}
| _1 = IDENT _2 = EQ _3 = ordered_list
    {                         ( Eq(_1,_3) )}
| _1 = IDENT _2 = GT _3 = ordered_list
    {                         ( Gt(_1,_3) )}
| _1 = IDENT _2 = LT _3 = ordered_list
    {                         ( Lt(_1,_3) )}

%%
