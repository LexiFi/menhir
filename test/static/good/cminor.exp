Grammar has 24 nonterminal symbols, among which 1 start symbols.
Grammar has 78 terminal symbols.
Grammar has 116 productions.
nullable(var_declarations) = true
nullable(var_declaration) = false
nullable(type_) = false
nullable(switch_cases) = true
nullable(switch_case) = false
nullable(stmts) = false
nullable(stmt_list) = true
nullable(stmt) = false
nullable(stack_declaration) = true
nullable(prog) = false
nullable(proc_list) = true
nullable(proc) = false
nullable(parameters) = true
nullable(parameter_list) = false
nullable(parameter) = false
nullable(opt_type) = true
nullable(memory_chunk) = false
nullable(global_declarations) = true
nullable(global_declaration) = false
nullable(expr_list_1) = false
nullable(expr_list) = true
nullable(expr) = false
nullable(case_list) = false
nullable(case) = false
first(var_declarations) = VAR
first(var_declaration) = VAR
first(type_) = INT FLOAT
first(switch_cases) = DEFAULT CASE
first(switch_case) = DEFAULT CASE
first(stmts) = TILDE SWITCH STRINGLIT RETURN MINUSF MINUS LPAREN LOOP LBRACE INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT BANG AMPERSAND ABSF
first(stmt_list) = TILDE SWITCH STRINGLIT RETURN MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT BANG AMPERSAND ABSF
first(stmt) = TILDE SWITCH STRINGLIT RETURN MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT BANG AMPERSAND ABSF
first(stack_declaration) = STACK
first(prog) = VAR STRINGLIT EOF
first(proc_list) = STRINGLIT
first(proc) = STRINGLIT
first(parameters) = IDENT
first(parameter_list) = IDENT
first(parameter) = IDENT
first(opt_type) = COLON
first(memory_chunk) = INT8U INT8S INT32 INT16U INT16S INT FLOAT64 FLOAT32 FLOAT
first(global_declarations) = VAR
first(global_declaration) = VAR
first(expr_list_1) = TILDE STRINGLIT MINUSF MINUS LPAREN INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT BANG AMPERSAND ABSF
first(expr_list) = TILDE STRINGLIT MINUSF MINUS LPAREN INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT BANG AMPERSAND ABSF
first(expr) = TILDE STRINGLIT MINUSF MINUS LPAREN INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT BANG AMPERSAND ABSF
first(case_list) = CASE
first(case) = CASE
minimal(var_declarations) = (* 0 *)
minimal(var_declaration) = (* 5 *) VAR IDENT COLON INT SEMICOLON
minimal(type_) = (* 1 *) INT
minimal(switch_cases) = (* 0 *)
minimal(switch_case) = (* 2 *) DEFAULT COLON
minimal(stmts) = (* 2 *) LBRACE RBRACE
minimal(stmt_list) = (* 0 *)
minimal(stmt) = (* 2 *) IDENT SEMICOLON
minimal(stack_declaration) = (* 0 *)
minimal(prog) = (* 1 *) EOF
minimal(proc_list) = (* 0 *)
minimal(proc) = (* 5 *) STRINGLIT LPAREN RPAREN LBRACE RBRACE
minimal(parameters) = (* 0 *)
minimal(parameter_list) = (* 3 *) IDENT COLON INT
minimal(parameter) = (* 3 *) IDENT COLON INT
minimal(opt_type) = (* 0 *)
minimal(memory_chunk) = (* 1 *) INT8S
minimal(global_declarations) = (* 0 *)
minimal(global_declaration) = (* 5 *) VAR STRINGLIT LBRACKET INTLIT RBRACKET
minimal(expr_list_1) = (* 1 *) IDENT
minimal(expr_list) = (* 0 *)
minimal(expr) = (* 1 *) IDENT
minimal(case_list) = (* 3 *) CASE INTLIT COLON
minimal(case) = (* 3 *) CASE INTLIT COLON
follow(var_declarations) = VAR TILDE SWITCH STRINGLIT RETURN RBRACE MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT BANG AMPERSAND ABSF
follow(var_declaration) = VAR TILDE SWITCH STRINGLIT RETURN RBRACE MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT BANG AMPERSAND ABSF
follow(type_) = STARF STAR SLASHU SLASHF SLASH SEMICOLON RPAREN RBRACKET QUESTION PLUSF PLUS PERCENTU PERCENT MINUSF MINUS LPAREN LESSU LESSLESS LESSF LESSEQUALU LESSEQUALF LESSEQUAL LESS LBRACE GREATERU GREATERGREATERU GREATERGREATER GREATERF GREATEREQUALU GREATEREQUALF GREATEREQUAL GREATER EQUALEQUALU EQUALEQUALF EQUALEQUAL COMMA COLON CARET BARBAR BAR BANGEQUALU BANGEQUALF BANGEQUAL AMPERSANDAMPERSAND AMPERSAND
follow(switch_cases) = RBRACE DEFAULT CASE
follow(switch_case) = RBRACE DEFAULT CASE
follow(stmts) = TILDE SWITCH STRINGLIT RETURN RBRACE MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT ELSE DEFAULT CASE BANG AMPERSAND ABSF
follow(stmt_list) = TILDE SWITCH STRINGLIT RETURN RBRACE MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT DEFAULT CASE BANG AMPERSAND ABSF
follow(stmt) = TILDE SWITCH STRINGLIT RETURN RBRACE MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT ELSE DEFAULT CASE BANG AMPERSAND ABSF
follow(stack_declaration) = VAR TILDE SWITCH STRINGLIT RETURN RBRACE MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT BANG AMPERSAND ABSF
follow(prog) = #
follow(proc_list) = STRINGLIT EOF
follow(proc) = STRINGLIT EOF
follow(parameters) = RPAREN
follow(parameter_list) = SEMICOLON RPAREN COMMA
follow(parameter) = SEMICOLON RPAREN COMMA
follow(opt_type) = STARF STAR SLASHU SLASHF SLASH SEMICOLON RPAREN RBRACKET QUESTION PLUSF PLUS PERCENTU PERCENT MINUSF MINUS LPAREN LESSU LESSLESS LESSF LESSEQUALU LESSEQUALF LESSEQUAL LESS LBRACE GREATERU GREATERGREATERU GREATERGREATER GREATERF GREATEREQUALU GREATEREQUALF GREATEREQUAL GREATER EQUALEQUALU EQUALEQUALF EQUALEQUAL COMMA COLON CARET BARBAR BAR BANGEQUALU BANGEQUALF BANGEQUAL AMPERSANDAMPERSAND AMPERSAND
follow(memory_chunk) = LBRACKET
follow(global_declarations) = VAR STRINGLIT EOF
follow(global_declaration) = VAR STRINGLIT EOF
follow(expr_list_1) = RPAREN COMMA
follow(expr_list) = RPAREN
follow(expr) = STARF STAR SLASHU SLASHF SLASH SEMICOLON RPAREN RBRACKET QUESTION PLUSF PLUS PERCENTU PERCENT MINUSF MINUS LPAREN LESSU LESSLESS LESSF LESSEQUALU LESSEQUALF LESSEQUAL LESS LBRACE GREATERU GREATERGREATERU GREATERGREATER GREATERF GREATEREQUALU GREATEREQUALF GREATEREQUAL GREATER EQUALEQUALU EQUALEQUALF EQUALEQUAL COMMA COLON CARET BARBAR BAR BANGEQUALU BANGEQUALF BANGEQUAL AMPERSANDAMPERSAND AMPERSAND
follow(case_list) = TILDE SWITCH STRINGLIT RETURN RBRACE MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT DEFAULT CASE BANG AMPERSAND ABSF
follow(case) = TILDE SWITCH STRINGLIT RETURN RBRACE MINUSF MINUS LPAREN LOOP INTOFFLOAT INTLIT INT8U INT8S INT32 INT16U INT16S INT IF IDENT FLOATOFINTU FLOATOFINT FLOATLIT FLOAT64 FLOAT32 FLOAT EXIT DEFAULT CASE BANG AMPERSAND ABSF
Built an LR(0) automaton with 216 states.
The grammar is not SLR(1) -- 61 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 216 states.
2162 shift/reduce conflicts were silently solved.
Warning: 3 states have shift/reduce conflicts.
Warning: 3 shift/reduce conflicts were arbitrarily resolved.
45 out of 216 states have a default reduction.
82 out of 216 states are represented.
0 out of 105 symbols keep track of their start position.
0 out of 105 symbols keep track of their end position.
35 out of 117 productions exploit shiftreduce optimization.
361 functions before inlining, 100 functions after inlining.
