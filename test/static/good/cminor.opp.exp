%{
open Utils
open Cminor
%}
%start prog
%token ABSF
%token AMPERSAND
%token AMPERSANDAMPERSAND
%token BANG
%token BANGEQUAL
%token BANGEQUALF
%token BANGEQUALU
%token BAR
%token BARBAR
%token CARET
%token CASE
%token COLON
%token COMMA
%token DEFAULT
%token ELSE
%token EOF
%token EQUAL
%token EQUALEQUAL
%token EQUALEQUALF
%token EQUALEQUALU
%token EXIT
%token FLOAT
%token FLOAT32
%token FLOAT64
%token <float> FLOATLIT
%token FLOATOFINT
%token FLOATOFINTU
%token GREATER
%token GREATEREQUAL
%token GREATEREQUALF
%token GREATEREQUALU
%token GREATERF
%token GREATERGREATER
%token GREATERGREATERU
%token GREATERU
%token <string> IDENT
%token IF
%token INT
%token INT16S
%token INT16U
%token INT32
%token INT8S
%token INT8U
%token <int32> INTLIT
%token INTOFFLOAT
%token LBRACE
%token LBRACKET
%token LESS
%token LESSEQUAL
%token LESSEQUALF
%token LESSEQUALU
%token LESSF
%token LESSLESS
%token LESSU
%token LOOP
%token LPAREN
%token MINUS
%token MINUSF
%token PERCENT
%token PERCENTU
%token PLUS
%token PLUSF
%token QUESTION
%token RBRACE
%token RBRACKET
%token RETURN
%token RPAREN
%token SEMICOLON
%token SLASH
%token SLASHF
%token SLASHU
%token STACK
%token STAR
%token STARF
%token <string> STRINGLIT
%token SWITCH
%token TILDE
%token VAR
%left p_sequence
%left COMMA
%right EQUAL
%right COLON QUESTION
%left BARBAR
%left AMPERSANDAMPERSAND
%left BAR
%left CARET
%left AMPERSAND
%left BANGEQUAL BANGEQUALF BANGEQUALU EQUALEQUAL EQUALEQUALF EQUALEQUALU GREATER GREATEREQUAL GREATEREQUALF GREATEREQUALU GREATERF GREATERU LESS LESSEQUAL LESSEQUALF LESSEQUALU LESSF LESSU
%left GREATERGREATER GREATERGREATERU LESSLESS
%left MINUS MINUSF PLUS PLUSF
%left PERCENT PERCENTU SLASH SLASHF SLASHU STAR STARF
%nonassoc ABSF BANG FLOAT32 FLOATOFINT FLOATOFINTU INT16S INT16U INT8S INT8U INTOFFLOAT TILDE p_uminus
%left LPAREN
%type <Cminor.program> prog
%%

prog:
  _1 = global_declarations _2 = proc_list _3 = EOF
    {      ( { prog_procs = List.rev _2;
          prog_main = "main";
          prog_vars = List.rev _1; } )}

global_declarations:
  
    {                                                ( [] )}
| _1 = global_declarations _2 = global_declaration
    {                                                ( _2 :: _1 )}

global_declaration:
  _1 = VAR _2 = STRINGLIT _3 = LBRACKET _4 = INTLIT _5 = RBRACKET
    {                                                ( (_2, Int32.to_int _4, 4) )}

proc_list:
  
    {                                                ( [] )}
| _1 = proc_list _2 = proc
    {                                                ( _2 :: _1 )}

proc:
  _1 = STRINGLIT _2 = LPAREN _3 = parameters _4 = RPAREN _5 = opt_type _6 = LBRACE _7 = stack_declaration _8 = var_declarations _9 = stmt_list _10 = RBRACE
    {      ( { proc_name = _1;
          proc_return = _5;
          proc_params = List.rev _3;
          proc_stackspace = _7;
          proc_vars = List.rev _8;
          proc_body = List.rev _9 } )}

parameters:
  
    {                                                ( [] )}
| _1 = parameter_list
    {                                                ( _1 )}

parameter_list:
  _1 = parameter
    {                                                ( [_1] )}
| _1 = parameter_list _2 = COMMA _3 = parameter
    {                                                ( _3 :: _1 )}

parameter:
  _1 = IDENT _2 = COLON _3 = type_
    {                                                ( (_1, _3) )}

stack_declaration:
  
    {                                                ( 0 )}
| _1 = STACK _2 = INTLIT
    {                                                ( Int32.to_int _2 )}

var_declarations:
  
    {                                                ( [] )}
| _1 = var_declarations _2 = var_declaration
    {                                                ( _2 @ _1 )}

var_declaration:
  _1 = VAR _2 = parameter_list _3 = SEMICOLON
    {                                                ( _2 )}

stmt:
  _1 = expr _2 = SEMICOLON
    {                                                ( Sexpr _1 )}
| _1 = IF _2 = LPAREN _3 = expr _4 = RPAREN _5 = stmts _6 = ELSE _7 = stmts
    {                                                ( Sifthenelse(_3, _5, _7) )}
| _1 = IF _2 = LPAREN _3 = expr _4 = RPAREN _5 = stmts
    {                                                ( Sifthenelse(_3, _5, []) )}
| _1 = SWITCH _2 = expr _3 = LBRACE _4 = switch_cases _5 = RBRACE
    {                                                ( Sswitch(_2, List.rev _4) )}
| _1 = LOOP _2 = stmts
    {                                                ( Sloop(_2) )}
| _1 = INTLIT _2 = COLON _3 = stmts
    {                                                ( Sblock(Int32.to_int _1, _3) )}
| _1 = EXIT _2 = INTLIT _3 = SEMICOLON
    {                                                ( Sexit (Int32.to_int _2) )}
| _1 = RETURN _2 = SEMICOLON
    {                                                ( Sreturn None )}
| _1 = RETURN _2 = expr _3 = SEMICOLON
    {                                                ( Sreturn (Some _2) )}

stmts:
  _1 = LBRACE _2 = stmt_list _3 = RBRACE
    {                                                ( List.rev _2 )}
| _1 = stmt
    {                                                ( [_1] )}

stmt_list:
  
    {                                                ( [] )}
| _1 = stmt_list _2 = stmt
    {                                                ( _2 :: _1 )}

switch_cases:
  
    {                                                ( [] )}
| _1 = switch_cases _2 = switch_case
    {                                                ( _2 :: _1 )}

switch_case:
  _1 = case_list _2 = stmt_list
    {                                                ( (List.rev _1, List.rev _2) )}
| _1 = DEFAULT _2 = COLON _3 = stmt_list
    {                                                ( ([], List.rev _3) )}

case_list:
  _1 = case
    {                                                ( [_1] )}
| _1 = case_list _2 = case
    {                                                ( _2 :: _1 )}

case:
  _1 = CASE _2 = INTLIT _3 = COLON
    {                                                ( _2 )}

expr:
  _1 = LPAREN _2 = expr _3 = RPAREN
    {                                                ( _2 )}
| _1 = IDENT
    {                                                ( Evar _1 )}
| _1 = IDENT _2 = EQUAL _3 = expr
    {                                                ( Eassign(_1, _3) )}
| _1 = INTLIT
    {                                                ( Econstint _1 )}
| _1 = FLOATLIT
    {                                                ( Econstfloat _1 )}
| _1 = STRINGLIT
    {                                                ( Eaddrsymbol _1 )}
| _1 = AMPERSAND _2 = INTLIT
    {                                                ( Eaddrstack _2 )}
| _1 = MINUS _2 = expr %prec p_uminus
    {                                                ( Eunop(OPnegint, _2) )}
| _1 = MINUSF _2 = expr %prec p_uminus
    {                                                ( Eunop(OPnegfloat, _2) )}
| _1 = ABSF _2 = expr
    {                                                ( Eunop(OPabsfloat, _2) )}
| _1 = INTOFFLOAT _2 = expr
    {                                                ( Eunop(OPintoffloat, _2) )}
| _1 = FLOATOFINT _2 = expr
    {                                                ( Eunop(OPfloatofint, _2) )}
| _1 = FLOATOFINTU _2 = expr
    {                                                ( Eunop(OPfloatofintu, _2) )}
| _1 = TILDE _2 = expr
    {                                                ( Eunop(OPnotint, _2) )}
| _1 = BANG _2 = expr
    {                                                ( Eunop(OPnotbool, _2) )}
| _1 = INT8S _2 = expr
    {                                                ( Eunop(OPcast8signed, _2) )}
| _1 = INT8U _2 = expr
    {                                                ( Eunop(OPcast8unsigned, _2) )}
| _1 = INT16S _2 = expr
    {                                                ( Eunop(OPcast16signed, _2) )}
| _1 = INT16U _2 = expr
    {                                                ( Eunop(OPcast16unsigned, _2) )}
| _1 = FLOAT32 _2 = expr
    {                                                ( Eunop(OPsingleoffloat, _2) )}
| _1 = expr _2 = PLUS _3 = expr
    {                                                ( Ebinop(OPaddint, _1, _3) )}
| _1 = expr _2 = MINUS _3 = expr
    {                                                ( Ebinop(OPsubint, _1, _3) )}
| _1 = expr _2 = STAR _3 = expr
    {                                                ( Ebinop(OPmulint, _1, _3) )}
| _1 = expr _2 = SLASH _3 = expr
    {                                                ( Ebinop(OPdivint, _1, _3) )}
| _1 = expr _2 = PERCENT _3 = expr
    {                                                ( Ebinop(OPmodint, _1, _3) )}
| _1 = expr _2 = SLASHU _3 = expr
    {                                                ( Ebinop(OPdivintu, _1, _3) )}
| _1 = expr _2 = PERCENTU _3 = expr
    {                                                ( Ebinop(OPmodintu, _1, _3) )}
| _1 = expr _2 = AMPERSAND _3 = expr
    {                                                ( Ebinop(OPandint, _1, _3) )}
| _1 = expr _2 = BAR _3 = expr
    {                                                ( Ebinop(OPorint, _1, _3) )}
| _1 = expr _2 = CARET _3 = expr
    {                                                ( Ebinop(OPxorint, _1, _3) )}
| _1 = expr _2 = LESSLESS _3 = expr
    {                                                ( Ebinop(OPshiftleftint, _1, _3) )}
| _1 = expr _2 = GREATERGREATER _3 = expr
    {                                                ( Ebinop(OPshiftrightint, _1, _3) )}
| _1 = expr _2 = GREATERGREATERU _3 = expr
    {                                                ( Ebinop(OPshiftrightintu, _1, _3) )}
| _1 = expr _2 = PLUSF _3 = expr
    {                                                ( Ebinop(OPaddfloat, _1, _3) )}
| _1 = expr _2 = MINUSF _3 = expr
    {                                                ( Ebinop(OPsubfloat, _1, _3) )}
| _1 = expr _2 = STARF _3 = expr
    {                                                ( Ebinop(OPmulfloat, _1, _3) )}
| _1 = expr _2 = SLASHF _3 = expr
    {                                                ( Ebinop(OPdivfloat, _1, _3) )}
| _1 = expr _2 = EQUALEQUAL _3 = expr
    {                                                ( Ebinop(OPcmpint Cequal, _1, _3) )}
| _1 = expr _2 = BANGEQUAL _3 = expr
    {                                                ( Ebinop(OPcmpint Cnotequal, _1, _3) )}
| _1 = expr _2 = LESS _3 = expr
    {                                                ( Ebinop(OPcmpint Cless, _1, _3) )}
| _1 = expr _2 = LESSEQUAL _3 = expr
    {                                                ( Ebinop(OPcmpint Clessequal, _1, _3) )}
| _1 = expr _2 = GREATER _3 = expr
    {                                                ( Ebinop(OPcmpint Cgreater, _1, _3) )}
| _1 = expr _2 = GREATEREQUAL _3 = expr
    {                                                ( Ebinop(OPcmpint Cgreaterequal, _1, _3) )}
| _1 = expr _2 = EQUALEQUALU _3 = expr
    {                                                ( Ebinop(OPcmpintu Cequal, _1, _3) )}
| _1 = expr _2 = BANGEQUALU _3 = expr
    {                                                ( Ebinop(OPcmpintu Cnotequal, _1, _3) )}
| _1 = expr _2 = LESSU _3 = expr
    {                                                ( Ebinop(OPcmpintu Cless, _1, _3) )}
| _1 = expr _2 = LESSEQUALU _3 = expr
    {                                                ( Ebinop(OPcmpintu Clessequal, _1, _3) )}
| _1 = expr _2 = GREATERU _3 = expr
    {                                                ( Ebinop(OPcmpintu Cgreater, _1, _3) )}
| _1 = expr _2 = GREATEREQUALU _3 = expr
    {                                                ( Ebinop(OPcmpintu Cgreaterequal, _1, _3) )}
| _1 = expr _2 = EQUALEQUALF _3 = expr
    {                                                ( Ebinop(OPcmpfloat Cequal, _1, _3) )}
| _1 = expr _2 = BANGEQUALF _3 = expr
    {                                                ( Ebinop(OPcmpfloat Cnotequal, _1, _3) )}
| _1 = expr _2 = LESSF _3 = expr
    {                                                ( Ebinop(OPcmpfloat Cless, _1, _3) )}
| _1 = expr _2 = LESSEQUALF _3 = expr
    {                                                ( Ebinop(OPcmpfloat Clessequal, _1, _3) )}
| _1 = expr _2 = GREATERF _3 = expr
    {                                                ( Ebinop(OPcmpfloat Cgreater, _1, _3) )}
| _1 = expr _2 = GREATEREQUALF _3 = expr
    {                                                ( Ebinop(OPcmpfloat Cgreaterequal, _1, _3) )}
| _1 = memory_chunk _2 = LBRACKET _3 = expr _4 = RBRACKET
    {                                                ( Eload(_1, _3) )}
| _1 = memory_chunk _2 = LBRACKET _3 = expr _4 = RBRACKET _5 = EQUAL _6 = expr
    {                                                ( Estore(_1, _3, _6) )}
| _1 = expr _2 = LPAREN _3 = expr_list _4 = RPAREN _5 = opt_type
    {                                                ( Ecall(_1, _3, _5) )}
| _1 = expr _2 = AMPERSANDAMPERSAND _3 = expr
    {                                                ( Eandbool(_1, _3) )}
| _1 = expr _2 = BARBAR _3 = expr
    {                                                ( Eorbool(_1, _3) )}
| _1 = expr _2 = QUESTION _3 = expr _4 = COLON _5 = expr
    {                                                ( Econdition(_1, _3, _5) )}
| _1 = expr _2 = COMMA _3 = expr %prec p_sequence
    {                                                ( Esequence2(_1, _3) )}

expr_list:
  
    {                                                ( [] )}
| _1 = expr_list_1
    {                                                ( List.rev _1 )}

expr_list_1:
  _1 = expr %prec COMMA
    {                                                ( [_1] )}
| _1 = expr_list_1 _2 = COMMA _3 = expr
    {                                                ( _3 :: _1 )}

memory_chunk:
  _1 = INT8S
    {                                                ( Mint8signed )}
| _1 = INT8U
    {                                                ( Mint8unsigned )}
| _1 = INT16S
    {                                                ( Mint16signed )}
| _1 = INT16U
    {                                                ( Mint16unsigned )}
| _1 = INT32
    {                                                ( Mint32 )}
| _1 = INT
    {                                                ( Mint32 )}
| _1 = FLOAT32
    {                                                ( Mfloat32 )}
| _1 = FLOAT64
    {                                                ( Mfloat64 )}
| _1 = FLOAT
    {                                                ( Mfloat64 )}

type_:
  _1 = INT
    {                                                ( Tint )}
| _1 = FLOAT
    {                                                ( Tfloat )}

opt_type:
  
    {                                                ( None )}
| _1 = COLON _2 = type_
    {                                                ( Some(_2) )}

%%
