
** Conflict (shift/reduce) in state 1133.
** Tokens involved: TMetaLocalFunc TMetaId TMetaFunc TIdent
** The following explanations concentrate on token TMetaLocalFunc.
** This state is reached from minus_main after reading:

loption(filespec) defineop ctype

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 1133, looking ahead at TMetaLocalFunc, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                           pure_decl_statement_list 
                           nonempty_list(decl_statement) 
                           decl_statement 
                           decl_var 
                           funproto 
                           ctype func_ident TOPar decl_list(decl) TCPar TPtVirg 
                                 . TMetaLocalFunc 

** In state 1133, looking ahead at TMetaLocalFunc, reducing production
** includes -> defineop ctype
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TMetaLocalFunc
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop ctype . 

** Conflict (reduce/reduce) in state 1132.
** Token involved: TOPar
** This state is reached from minus_main after reading:

loption(filespec) defineop generic_ctype list(TMul)

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 1132, looking ahead at TOPar, reducing production
** ctype -> generic_ctype list(TMul)
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TOPar
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop ctype // lookahead token is inherited
                           generic_ctype list(TMul) . 

** In state 1132, looking ahead at TOPar, reducing production
** fn_ctype -> generic_ctype list(TMul)
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                           pure_decl_statement_list 
                           nonempty_list(decl_statement) 
                           decl_statement 
                           decl_var 
                           fn_ctype TOPar TMul d_ident TCPar TOPar decl_list(name_opt_decl) TCPar TPtVirg // lookahead token appears
                           generic_ctype list(TMul) . 

** Conflict (shift/reduce) in state 1131.
** Token involved: TMul
** This state is reached from minus_main after reading:

loption(filespec) defineop generic_ctype

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 1131, looking ahead at TMul, reducing production
** list(TMul) ->
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TMul
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop ctype // lookahead token is inherited
                           generic_ctype list(TMul) // lookahead token is inherited
                                         . 

** In state 1131, looking ahead at TMul, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop ctype 
                           generic_ctype list(TMul) 
                                         . TMul list(TMul) 

** Conflict (shift/reduce) in state 823.
** Token involved: TEllipsis
** This state is reached from minus_main after reading:

loption(filespec) defineop exp_decl_statement_list dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement) exp_decl_statement_list

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 823, looking ahead at TEllipsis, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                                                   dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement) exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                                                                                                                                                          dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement) exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                                                                                                                                                          . TEllipsis list(whens(pre_post_decl_statement_or_expression,rule_elem_statement)) 

** In state 823, looking ahead at TEllipsis, reducing production
** list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) ->
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TEllipsis
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop statement_dots(TEllipsis) // lookahead token is inherited
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) // lookahead token is inherited
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) // lookahead token is inherited
                                                   dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement) exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) // lookahead token is inherited
                                                                                                                                                          . 

** Conflict (shift/reduce) in state 820.
** Token involved: TEllipsis
** This state is reached from minus_main after reading:

loption(filespec) defineop exp_decl_statement_list

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 820, looking ahead at TEllipsis, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                                                   dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement) exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                                                   . TEllipsis list(whens(pre_post_decl_statement_or_expression,rule_elem_statement)) 

** In state 820, looking ahead at TEllipsis, reducing production
** list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) ->
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TEllipsis
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop statement_dots(TEllipsis) // lookahead token is inherited
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) // lookahead token is inherited
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) // lookahead token is inherited
                                                   . 

** Conflict (shift/reduce) in state 796.
** Tokens involved: Tvolatile Tvoid Tunsigned Tunion Tstruct Tstatic Tsigned Tshort Tregister Tlong Tint Tfloat Textern Tdouble Tconst Tchar Tauto TWhile TTypeId TTilde TSwitch TString TSizeof TRuleName TReturn TPlus TOPar0 TOPar TOEllipsis TOBrace TMul TMinus TMetaType TMetaStmList TMetaStm TMetaLocalFunc TMetaId TMetaFunc TMetaExp TMetaErr TMetaConst TInvalid TInt TInc TIf TIdent TFor TFloat TDo TDeclarerId TDec TContinue TChar TBreak TBang TAnd
** The following explanations concentrate on token Tvolatile.
** This state is reached from minus_main after reading:

loption(filespec) defineop decl_statement

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 796, looking ahead at Tvolatile, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                           pure_decl_statement_list 
                           nonempty_list(decl_statement) 
                           decl_statement nonempty_list(decl_statement) 
                                          decl_statement 
                                          decl_var 
                                          const_vol pure_ident comma_list(d_ident) TPtVirg 
                                          . Tvolatile 

** In state 796, looking ahead at Tvolatile, reducing production
** nonempty_list(decl_statement) -> decl_statement
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with Tvolatile
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop statement_dots(TEllipsis) // lookahead token is inherited
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) // lookahead token is inherited
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) // lookahead token is inherited because list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) can vanish
                           pure_decl_statement_list // lookahead token is inherited
                           nonempty_list(decl_statement) // lookahead token is inherited
                           decl_statement . 

** Conflict (shift/reduce) in state 793.
** Tokens involved: Tvolatile Tvoid Tunsigned Tunion Tstruct Tstatic Tsigned Tshort Tregister Tlong Tint Tfloat Textern Tdouble Tconst Tchar Tauto TWhile TTypeId TTilde TSwitch TString TSizeof TRuleName TReturn TPlus TOPar0 TOPar TOEllipsis TOBrace TNothing TMul TMinus TMetaType TMetaStmList TMetaStm TMetaLocalFunc TMetaId TMetaFunc TMetaExp TMetaErr TMetaConst TInvalid TInt TInc TIf TIdent TFor TFloat TDo TDeclarerId TDec TContinue TChar TBreak TBang TAnd
** The following explanations concentrate on token Tvolatile.
** This state is reached from minus_main after reading:

loption(filespec) defineop expr TOEllipsis statement_dots(TEllipsis) TCEllipsis

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 793, looking ahead at Tvolatile, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                           expr TOEllipsis statement_dots(TEllipsis) TCEllipsis exp_decl_statement_list 
                                                                                pure_decl_statement_list 
                                                                                nonempty_list(decl_statement) 
                                                                                decl_statement 
                                                                                decl_var 
                                                                                const_vol pure_ident comma_list(d_ident) TPtVirg 
                                                                                . Tvolatile 

** In state 793, looking ahead at Tvolatile, reducing production
** exp_decl_statement_list -> expr TOEllipsis statement_dots(TEllipsis) TCEllipsis
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with Tvolatile
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop statement_dots(TEllipsis) // lookahead token is inherited
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) // lookahead token is inherited
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) // lookahead token is inherited because list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) can vanish
                           expr TOEllipsis statement_dots(TEllipsis) TCEllipsis . 

** Conflict (shift/reduce) in state 790.
** Token involved: TOEllipsis
** This state is reached from minus_main after reading:

loption(filespec) defineop expr

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 790, looking ahead at TOEllipsis, reducing production
** exp_decl_statement_list -> expr
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TOEllipsis
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop statement_dots(TEllipsis) // lookahead token is inherited
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) // lookahead token is inherited
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) // lookahead token is inherited because list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) can vanish
                           expr . 

** In state 790, looking ahead at TOEllipsis, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                           expr . TOEllipsis statement_dots(TEllipsis) TCEllipsis exp_decl_statement_list 

** Conflict (shift/reduce) in state 755.
** Tokens involved: TMetaId TIdent
** The following explanations concentrate on token TMetaId.
** This state is reached from minus_main after reading:

loption(filespec) defineop pure_ident

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 755, looking ahead at TMetaId, reducing production
** func_ident -> pure_ident
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TMetaId
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop statement_dots(TEllipsis) // lookahead token is inherited
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) // lookahead token is inherited
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) // lookahead token is inherited because list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) can vanish
                           expr // lookahead token is inherited
                           basic_expr(expr,invalid) // lookahead token is inherited
                           assign_expr(expr,invalid) // lookahead token is inherited
                           cond_expr(expr,invalid) // lookahead token is inherited
                           arith_expr(expr,invalid) // lookahead token is inherited
                           cast_expr(expr,invalid) // lookahead token is inherited
                           unary_expr(expr,invalid) // lookahead token is inherited
                           postfix_expr(expr,invalid) // lookahead token is inherited
                           primary_expr(expr,invalid) // lookahead token is inherited
                           func_ident // lookahead token is inherited
                           pure_ident . 

** In state 755, looking ahead at TMetaId, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                           pure_decl_statement_list 
                           nonempty_list(decl_statement) 
                           decl_statement 
                           decl_var 
                           pure_ident d_ident TEq initialize TPtVirg 
                                      ident list(array_dec) 
                                      . TMetaId 

** Conflict (shift/reduce) in state 459.
** Tokens involved: TPlus TMul TMinus TAnd
** The following explanations concentrate on token TPlus.
** This state is reached from minus_main after reading:

loption(filespec) defineop arith_expr(expr,invalid)

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 459, looking ahead at TPlus, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                           expr 
                           basic_expr(expr,invalid) 
                           assign_expr(expr,invalid) 
                           cond_expr(expr,invalid) 
                           arith_expr(expr,invalid) 
                           arith_expr(expr,invalid) . TPlus arith_expr(expr,invalid) 

** In state 459, looking ahead at TPlus, reducing production
** cond_expr(expr,invalid) -> arith_expr(expr,invalid)
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TPlus
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop statement_dots(TEllipsis) // lookahead token is inherited
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) // lookahead token is inherited
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) // lookahead token is inherited because list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) can vanish
                           expr // lookahead token is inherited
                           basic_expr(expr,invalid) // lookahead token is inherited
                           assign_expr(expr,invalid) // lookahead token is inherited
                           cond_expr(expr,invalid) // lookahead token is inherited
                           arith_expr(expr,invalid) . 

** Conflict (shift/reduce) in state 435.
** Tokens involved: TOPar TInc TDec
** The following explanations concentrate on token TOPar.
** This state is reached from minus_main after reading:

loption(filespec) defineop postfix_expr(expr,invalid)

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 435, looking ahead at TOPar, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                           expr 
                           basic_expr(expr,invalid) 
                           assign_expr(expr,invalid) 
                           unary_expr(expr,invalid) TAssign assign_expr(expr,invalid) 
                           postfix_expr(expr,invalid) 
                           postfix_expr(expr,invalid) . TOPar eexpr_list_option TCPar 

** In state 435, looking ahead at TOPar, reducing production
** unary_expr(expr,invalid) -> postfix_expr(expr,invalid)
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TOPar
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop statement_dots(TEllipsis) // lookahead token is inherited
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) // lookahead token is inherited
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) // lookahead token is inherited because list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) can vanish
                           expr // lookahead token is inherited
                           basic_expr(expr,invalid) // lookahead token is inherited
                           assign_expr(expr,invalid) // lookahead token is inherited
                           cond_expr(expr,invalid) // lookahead token is inherited
                           arith_expr(expr,invalid) // lookahead token is inherited
                           cast_expr(expr,invalid) // lookahead token is inherited
                           unary_expr(expr,invalid) // lookahead token is inherited
                           postfix_expr(expr,invalid) . 

** Conflict (shift/reduce) in state 161.
** Token involved: TMul
** This state is reached from minus_main after reading:

loption(filespec) defineop const_vol generic_ctype

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 161, looking ahead at TMul, reducing production
** list(TMul) ->
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TMul
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop ctype // lookahead token is inherited
                           const_vol generic_ctype list(TMul) // lookahead token is inherited
                                                   . 

** In state 161, looking ahead at TMul, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop ctype 
                           const_vol generic_ctype list(TMul) 
                                                   . TMul list(TMul) 

** Conflict (shift/reduce) in state 151.
** Tokens involved: Tshort Tlong Tint Tchar
** The following explanations concentrate on token Tshort.
** This state is reached from minus_main after reading:

loption(filespec) defineop ctype_qualif

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 151, looking ahead at Tshort, reducing production
** generic_ctype -> ctype_qualif
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with Tshort
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop ctype // lookahead token is inherited
                           generic_ctype list(TMul) // lookahead token is inherited because list(TMul) can vanish
                           ctype_qualif . 

** In state 151, looking ahead at Tshort, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop ctype 
                           generic_ctype list(TMul) 
                           ctype_qualif . Tshort 

** Conflict (shift/reduce) in state 147.
** Token involved: TMul
** This state is reached from minus_main after reading:

loption(filespec) defineop generic_ctype TMul

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 147, looking ahead at TMul, reducing production
** list(TMul) ->
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TMul
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop ctype // lookahead token is inherited
                           generic_ctype list(TMul) // lookahead token is inherited
                                         TMul list(TMul) // lookahead token is inherited
                                              . 

** In state 147, looking ahead at TMul, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop ctype 
                           generic_ctype list(TMul) 
                                         TMul list(TMul) 
                                              . TMul list(TMul) 

** Conflict (shift/reduce) in state 35.
** Token involved: TOBrace
** This state is reached from minus_main after reading:

loption(filespec) defineop struct_or_union ident

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 35, looking ahead at TOBrace, reducing production
** generic_ctype -> struct_or_union ident
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TOBrace
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop ctype // lookahead token is inherited
                           generic_ctype list(TMul) // lookahead token is inherited because list(TMul) can vanish
                           struct_or_union ident . 

** In state 35, looking ahead at TOBrace, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop ctype 
                           generic_ctype list(TMul) 
                           struct_or_union ident . TOBrace struct_decl_list TCBrace 

** Conflict (reduce/reduce) in state 25.
** Token involved: TOPar
** This state is reached from minus_main after reading:

loption(filespec) defineop Tvoid TMul

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 25, looking ahead at TOPar, reducing production
** list(TMul) ->
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop statement_dots(TEllipsis) 
                           no_dot_start_end(exp_decl_statement_list,dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement)) 
                           exp_decl_statement_list list(pair(dots_when(TEllipsis,pre_post_decl_statement_or_expression,rule_elem_statement),exp_decl_statement_list)) 
                           pure_decl_statement_list 
                           nonempty_list(decl_statement) 
                           decl_statement 
                           decl_var 
                           fn_ctype TOPar TMul d_ident TCPar TOPar decl_list(name_opt_decl) TCPar TPtVirg // lookahead token appears
                           Tvoid list(TMul) // lookahead token is inherited
                                 TMul list(TMul) // lookahead token is inherited
                                      . 

** In state 25, looking ahead at TOPar, reducing production
** nonempty_list(TMul) -> TMul
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TOPar
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop ctype // lookahead token is inherited
                           Tvoid nonempty_list(TMul) // lookahead token is inherited
                                 TMul . 

** Conflict (shift/reduce) in state 22.
** Token involved: TOBrace
** This state is reached from minus_main after reading:

loption(filespec) defineop TMetaType

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

minus_main 
minus_body EOF 
(?)

** In state 22, looking ahead at TOBrace, shifting is permitted
** because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) 
                  includes list(includes) 
                  defineop ctype 
                           generic_ctype list(TMul) 
                           TMetaType . TOBrace struct_decl_list TCBrace 

** In state 22, looking ahead at TOBrace, reducing production
** generic_ctype -> TMetaType
** is permitted because of the following sub-derivation:

loption(filespec) list(includes) loption(minus_function_decl_statement_or_expression) loption(error_words) // lookahead token appears because loption(minus_function_decl_statement_or_expression) can begin with TOBrace
                  includes list(includes) // lookahead token is inherited because list(includes) can vanish
                  defineop ctype // lookahead token is inherited
                           generic_ctype list(TMul) // lookahead token is inherited because list(TMul) can vanish
                           TMetaType . 
