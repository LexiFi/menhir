File "coercion-constraint.mly", line 131, characters 6-9:
Warning: the token APP is unused.
File "coercion-constraint.mly", line 121, characters 28-31:
Warning: the token END is unused.
File "coercion-constraint.mly", line 132, characters 10-12:
Warning: the token ID is unused.
File "coercion-constraint.mly", line 130, characters 7-11:
Warning: the token LEFT is unused.
%{

open Sig
open Positions
open AstPositions
open MiniAst

let fold_pair f ts =
  match ts with
    | a :: b :: q -> List.fold_left f (f a b) q
    | _ -> assert false

let tuple2 pos t1 t2 =
  EDCon (pos, "_Tuple", [ t1; t2 ])

let tuple pos =
  fold_pair (tuple2 pos)

let arrow_type pos t1 t2 =
  TypApp (pos, TypVar (pos, "->"), [ t1; t2 ])

let tuple_type2 pos t1 t2 =
  TypApp (pos, TypVar (pos, "*"), [ t1; t2 ])

let tuple_type pos =
  fold_pair (tuple_type2 pos)

let unclosed b e l1 l2 =
  let l1 = lex_join (Parsing.rhs_start_pos l1) (Parsing.rhs_end_pos l1)
  and l2 = lex_join (Parsing.rhs_start_pos l2) (Parsing.rhs_end_pos l2)
  in
    raise (ParsingExceptions.Unclosed (b, e, l1, l2))

let clet envs body =
  fun (tenv, pool) ->
    CLet (envs (tenv, pool), (body (tenv, pool)))

let cexists pos vars c =
  fun (tenv, pool) ->
    let vars = snd (List.split vars) in
    let rqs, fqs, tenv = MiniTypes.intern_let_env pos tenv [] vars in
    CLet ([
      Scheme (pos, rqs, fqs, c (tenv, pool),
	      Misc.StringMap.empty
	     )
	  ], CTrue pos)

let cequation t1 t2 =
  fun (tenv, pool) ->
    let p = tjoin t1 t2
    and it1 = MiniTypes.intern (tposition t1) tenv t1
    and it2 = MiniTypes.intern (tposition t2) tenv t2 in
      CEquation (p, it1, it2)

let cinstance (p1, id) t =
  fun (tenv, _) ->
    let p = join p1 (tposition t) in
    CInstance (p, id, MiniTypes.intern (tposition t) tenv t)

let scheme pos (rvs, fvs) c g =
  fun (tenv, pool) ->
    let rqs, fqs, tenv = MiniTypes.intern_let_env pos tenv rvs fvs in
      Scheme (pos, rqs, fqs, c (tenv, pool),
              List.fold_left
                (fun m (n, ty) ->
                   let t = MiniTypes.intern pos tenv ty in
                     Misc.StringMap.add n (t, pos) m)
                Misc.StringMap.empty
                g
             )

let appl y =
  List.map (fun x -> x y)

let conjunction cs =
  fun p -> CConjunction (appl p cs)

let mkArrow (p1, t1) (p2, t2) =
  let p = join p1 p2 in
  (p, TypApp (p, TypVar (p, "->"), [t1; t2]))

let mkApp (p, t) ts =
  let p' = join p (ljoinf fst ts) in
  let _, ts = List.split ts in
    (p', TypApp (p', t, ts))

let mkRow r =
  assert false

let typeid (p, id) =
    (p, TypVar (p, id))

type row =
    Partial of MiniAst.typ
  | Row of (string * MiniAst.typ)

%}
%start tconstraint
%token <Positions.position> AND
%token <Positions.position> ARROW
%token <Positions.position> BACKSLASH
%token <Positions.position> COLON
%token <Positions.position> COMMA
%token <Positions.position> DOT
%token <Positions.position> DUMP
%token <Positions.position> END
%token <Positions.position> EOF
%token <Positions.position> EQ
%token <Positions.position> EXISTS
%token <Positions.position> FALSE
%token <Positions.position> FORALL
%token <Positions.position> IN
%token <Positions.position> LBRACE
%token <Positions.position> LBRACKET
%token <Positions.position> LESS
%token <Positions.position> LET
%token <Positions.position * string> LID
%token <Positions.position> LPAREN
%token <Positions.position> RBRACE
%token <Positions.position> RBRACKET
%token <Positions.position> RPAREN
%token <Positions.position> SEMI
%token <Positions.position> TIMES
%token <Positions.position> TRUE
%nonassoc EOF
%nonassoc AND
%right LEFT
%left APP
%nonassoc ID
%type <MiniTypingEnvironment.environment * MiniMultiEquation.pool-> MiniConstraint.tconstraint> tconstraint
%%

tconstraint:
  _1 = constraint_exp _2 = EOF
    {                                ( _1 )}

constraint_exp:
  _1 = LET _2 = let_envs _3 = IN _4 = constraint_exp
    {                                        ( clet _2 _4 )}
| _1 = EXISTS _2 = vars _3 = DOT _4 = constraint_exp
    {                                 ( cexists _1 _2 _4 )}
| _1 = constraint_exp1
    {                  ( _1 )}

constraint_exp1:
  _1 = conjunction
    {                ( conjunction _1 )}
| _1 = constraint_exp0
    {                  ( _1 )}

constraint_exp0:
  _1 = TRUE
    {                  ( fun _ -> CTrue _1 )}
| _1 = FALSE
    {                   ( fun _ -> CFalse _1 )}
| _1 = DUMP
    {           ( fun _ -> CDump _1 )}
| _1 = typ _2 = EQ _3 = typ
    {                ( cequation _1 _3 )}
| _1 = LID _2 = LESS _3 = typ
    {                  ( cinstance _1 _3 )}
| _1 = LPAREN _2 = constraint_exp _3 = RPAREN
    {                                ( _2 )}

let_env:
  _1 = opt_env_vars _2 = opt_constraint _3 = opt_env_ids
    {                                          (
    (* FIXME: Fix positions. *)
    scheme undefined_position _1 _2 _3
  )}

let_envs:
  _1 = let_env
    {             ( fun p -> [ _1 p ] )}
| _1 = let_env _2 = AND _3 = let_envs
    {                          ( fun p -> (_1 p) :: (_3 p) )}

opt_env_vars:
  
    {                  ( ([], []) )}
| _1 = FORALL _2 = LBRACE _3 = vars _4 = RBRACE _5 = opt_vars
    {                                       ( (snd (List.split _3),
					     (snd (List.split _5))) )}
| _1 = FORALL _2 = vars
    {                ( ([], (snd (List.split _2))) )}

opt_vars:
  
    {                      ( [] )}
| _1 = vars
    {       ( _1 )}

vars:
  _1 = var
    {              ( [ _1 ] )}
| _1 = var _2 = vars
    {               ( _1 :: _2 )}

var:
  _1 = LID
    {         ( _1 )}
| _1 = ARROW
    {        ( (_1, "->") )}
| _1 = TIMES
    {        ( (_1, "*") )}

opt_constraint:
  
    {  ( fun pool -> CTrue undefined_position )}
| _1 = LBRACKET _2 = constraint_exp _3 = RBRACKET
    {                                         ( _2 )}

opt_env_ids:
  
    {                  ( [] )}
| _1 = LPAREN _2 = env_ids _3 = RPAREN
    {                           ( _2 )}

env_id:
  _1 = LID _2 = COLON _3 = typ
    {                         ( (snd _1, _3) )}

env_ids:
  _1 = env_id
    {  ( [ _1 ] )}
| _1 = env_id _2 = SEMI _3 = env_ids
    {      ( _1 :: _3 )}

conjunction:
  _1 = constraint_exp0 _2 = AND _3 = constraint_exp0
    {                                                 ( [ _1; _3  ] )}
| _1 = constraint_exp0 _2 = AND _3 = conjunction
    {                                  ( _1 :: _3 )}

attributes:
  _1 = typ
    {               ( [], _1 )}
| _1 = attribute _2 = SEMI _3 = attributes
    {                                  ( _1 :: (fst _3), snd _3 )}

attribute:
  _1 = LID _2 = COLON _3 = typ
    {                        ( snd _1, _3 )}

typ:
  _1 = type2
    {                                                    ( _1 )}

type2:
  _1 = type10 _2 = ARROW _3 = type2
    {  ( arrow_type (tjoin _1 _3) _1 _3  )}
| _1 = type10
    {                                                     ( _1 )}

type10:
  _1 = star_types
    {( match _1 with
    | [] -> assert false
    | [ a ] -> a
    | l -> tuple_type (tlposition _1) l
)}

star_types:
  _1 = type1 _2 = TIMES _3 = star_types
    {                                                     ( _1 :: _3 )}
| _1 = type1
    {                 ( [ _1 ] )}

type1:
  _1 = type0
    {        ( _1 )}
| _1 = BACKSLASH _2 = type0
    {                         ( TypRowUniform (_1, _2) )}

type0:
  _1 = type00s
    {  (
    match _1 with
	[] -> assert false
      | [ t ] -> t
      | t :: q ->
	  TypApp (join (tposition t)
		    (tlposition q),
		    t,
		    q)
  )}

type00:
  _1 = LID
    {                                                    ( TypVar (fst _1, snd _1) )}
| _1 = LBRACE _2 = attributes _3 = RBRACE
    {                                 ( TypRowCons
							(join _1 _3,
							 fst _2,
							 snd _2)
						    )}
| _1 = LPAREN _2 = typ _3 = RPAREN
    {                                                    ( _2 )}
| _1 = LPAREN _2 = typ _3 = COMMA _4 = types _5 = RPAREN
    {                                                    ( tuple_type (join _1 _5)
							(_2 :: _4) )}

type00s:
  _1 = type00
    {                      ( [ _1 ] )}
| _1 = type00 _2 = type00s
    {                       ( _1 :: _2 )}

types:
  _1 = typ
    {                                                    ( [ _1 ] )}
| _1 = typ _2 = COMMA _3 = types
    {                                                    ( _1 :: _3 )}

%%
