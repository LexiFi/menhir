State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On program shift to state 1
-- On bindings shift to state 2
## Default reduction:
-- After reading the next token, reduce production bindings ->

State 1:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept program

State 2:
## Known stack suffix:
## bindings
## LR(1) items:
bindings -> bindings . binding [ TYPE LET EOF ]
program -> bindings . EOF [ # ]
## Transitions:
-- On TYPE shift to state 3
-- On LET shift to state 66
-- On EOF shift to state 294
-- On binding shift to state 295
## Reductions:

State 3:
## Known stack suffix:
## TYPE
## LR(1) items:
binding -> TYPE . type_definitions [ TYPE LET IN EOF ]
## Transitions:
-- On LID shift to state 4
-- On type_definitions shift to state 62
-- On type_definition shift to state 65
## Reductions:

State 4:
## Known stack suffix:
## LID
## LR(1) items:
type_definition -> LID . COLON kind EQUAL algebraic_datatype_definitions [ TYPE LET IN EOF AND ]
## Transitions:
-- On COLON shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## LID COLON
## LR(1) items:
type_definition -> LID COLON . kind EQUAL algebraic_datatype_definitions [ TYPE LET IN EOF AND ]
## Transitions:
-- On STAR shift to state 6
-- On kind shift to state 9
## Reductions:

State 6:
## Known stack suffix:
## STAR
## LR(1) items:
kind -> STAR . [ EQUAL ]
kind -> STAR . ARROW kind [ EQUAL ]
## Transitions:
-- On ARROW shift to state 7
## Reductions:
-- On EQUAL
--   reduce production kind -> STAR

State 7:
## Known stack suffix:
## STAR ARROW
## LR(1) items:
kind -> STAR ARROW . kind [ EQUAL ]
## Transitions:
-- On STAR shift to state 6
-- On kind shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## STAR ARROW kind
## LR(1) items:
kind -> STAR ARROW kind . [ EQUAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kind -> STAR ARROW kind

State 9:
## Known stack suffix:
## LID COLON kind
## LR(1) items:
type_definition -> LID COLON kind . EQUAL algebraic_datatype_definitions [ TYPE LET IN EOF AND ]
## Transitions:
-- On EQUAL shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## LID COLON kind EQUAL
## LR(1) items:
type_definition -> LID COLON kind EQUAL . algebraic_datatype_definitions [ TYPE LET IN EOF AND ]
## Transitions:
-- On UID shift to state 11
-- On algebraic_datatype_definitions shift to state 58
-- On algebraic_datatype_definition shift to state 59
## Reductions:

State 11:
## Known stack suffix:
## UID
## LR(1) items:
algebraic_datatype_definition -> UID . COLON scheme [ TYPE LET IN EOF BAR AND ]
## Transitions:
-- On COLON shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## UID COLON
## LR(1) items:
algebraic_datatype_definition -> UID COLON . scheme [ TYPE LET IN EOF BAR AND ]
## Transitions:
-- On FORALL shift to state 13
-- On scheme shift to state 19
-- On forall shift to state 20
## Reductions:
-- On REF LPAREN LID LBRACE BACKSLASH
--   reduce production forall ->

State 13:
## Known stack suffix:
## FORALL
## LR(1) items:
forall -> FORALL . quantifiers DOT [ WILD UID REF LPAREN LID LBRACE INTEGER CHAR BACKSLASH ]
## Transitions:
-- On LID shift to state 14
-- On quantifiers shift to state 15
-- On quantifier shift to state 17
## Reductions:

State 14:
## Known stack suffix:
## LID
## LR(1) items:
quantifier -> LID . [ RBRACKET LID DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifier -> LID

State 15:
## Known stack suffix:
## FORALL quantifiers
## LR(1) items:
forall -> FORALL quantifiers . DOT [ WILD UID REF LPAREN LID LBRACE INTEGER CHAR BACKSLASH ]
## Transitions:
-- On DOT shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## FORALL quantifiers DOT
## LR(1) items:
forall -> FORALL quantifiers DOT . [ WILD UID REF LPAREN LID LBRACE INTEGER CHAR BACKSLASH ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production forall -> FORALL quantifiers DOT

State 17:
## Known stack suffix:
## quantifier
## LR(1) items:
quantifiers -> quantifier . [ RBRACKET DOT ]
quantifiers -> quantifier . quantifiers [ RBRACKET DOT ]
## Transitions:
-- On LID shift to state 14
-- On quantifiers shift to state 18
-- On quantifier shift to state 17
## Reductions:
-- On RBRACKET DOT
--   reduce production quantifiers -> quantifier

State 18:
## Known stack suffix:
## quantifier quantifiers
## LR(1) items:
quantifiers -> quantifier quantifiers . [ RBRACKET DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production quantifiers -> quantifier quantifiers

State 19:
## Known stack suffix:
## UID COLON scheme
## LR(1) items:
algebraic_datatype_definition -> UID COLON scheme . [ TYPE LET IN EOF BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production algebraic_datatype_definition -> UID COLON scheme

State 20:
## Known stack suffix:
## forall
## LR(1) items:
scheme -> forall . typ [ TYPE LET IN EOF BAR AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 57
-- On star_types shift to state 40
## Reductions:

State 21:
## Known stack suffix:
## REF
## LR(1) items:
type0 -> REF . type0 [ TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 56
## Reductions:

State 22:
## Known stack suffix:
## LPAREN
## LR(1) items:
type00 -> LPAREN . typ RPAREN [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
type00 -> LPAREN . typ COMMA types RPAREN [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 48
-- On star_types shift to state 40
## Reductions:

State 23:
## Known stack suffix:
## LID
## LR(1) items:
type00 -> LID . [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type00 -> LID

State 24:
## Known stack suffix:
## LBRACE
## LR(1) items:
type00 -> LBRACE . attributes RBRACE [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 25
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 42
-- On star_types shift to state 40
-- On attributes shift to state 43
-- On attribute shift to state 45
## Reductions:

State 25:
## Known stack suffix:
## LID
## LR(1) items:
attribute -> LID . COLON typ [ SEMI ]
type00 -> LID . [ STAR RBRACE LPAREN LID LBRACE ARROW ]
## Transitions:
-- On COLON shift to state 26
## Reductions:
-- On STAR RBRACE LPAREN LID LBRACE ARROW
--   reduce production type00 -> LID

State 26:
## Known stack suffix:
## LID COLON
## LR(1) items:
attribute -> LID COLON . typ [ SEMI ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 41
-- On star_types shift to state 40
## Reductions:

State 27:
## Known stack suffix:
## BACKSLASH
## LR(1) items:
type1 -> BACKSLASH . type0 [ TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 31
## Reductions:

State 28:
## Known stack suffix:
## type00s
## LR(1) items:
type0 -> type00s . [ TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type0 -> type00s

State 29:
## Known stack suffix:
## type00
## LR(1) items:
type00s -> type00 . [ TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
type00s -> type00 . type00s [ TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On type00s shift to state 30
-- On type00 shift to state 29
## Reductions:
-- On TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND
--   reduce production type00s -> type00

State 30:
## Known stack suffix:
## type00 type00s
## LR(1) items:
type00s -> type00 type00s . [ TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type00s -> type00 type00s

State 31:
## Known stack suffix:
## BACKSLASH type0
## LR(1) items:
type1 -> BACKSLASH type0 . [ TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type1 -> BACKSLASH type0

State 32:
## Known stack suffix:
## type2
## LR(1) items:
typ -> type2 . [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typ -> type2

State 33:
## Known stack suffix:
## type10
## LR(1) items:
type2 -> type10 . ARROW type2 [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR AND ]
type2 -> type10 . [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR AND ]
## Transitions:
-- On ARROW shift to state 34
## Reductions:
-- On TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR AND
--   reduce production type2 -> type10

State 34:
## Known stack suffix:
## type10 ARROW
## LR(1) items:
type2 -> type10 ARROW . type2 [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 35
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On star_types shift to state 40
## Reductions:

State 35:
## Known stack suffix:
## type10 ARROW type2
## LR(1) items:
type2 -> type10 ARROW type2 . [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type2 -> type10 ARROW type2

State 36:
## Known stack suffix:
## type1
## LR(1) items:
star_types -> type1 . STAR star_types [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
star_types -> type1 . [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On STAR shift to state 37
## Reductions:
-- On TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND
--   reduce production star_types -> type1

State 37:
## Known stack suffix:
## type1 STAR
## LR(1) items:
star_types -> type1 STAR . star_types [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On star_types shift to state 39
## Reductions:

State 38:
## Known stack suffix:
## type0
## LR(1) items:
type1 -> type0 . [ TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type1 -> type0

State 39:
## Known stack suffix:
## type1 STAR star_types
## LR(1) items:
star_types -> type1 STAR star_types . [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production star_types -> type1 STAR star_types

State 40:
## Known stack suffix:
## star_types
## LR(1) items:
type10 -> star_types . [ TYPE SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type10 -> star_types

State 41:
## Known stack suffix:
## LID COLON typ
## LR(1) items:
attribute -> LID COLON typ . [ SEMI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute -> LID COLON typ

State 42:
## Known stack suffix:
## typ
## LR(1) items:
attributes -> typ . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attributes -> typ

State 43:
## Known stack suffix:
## LBRACE attributes
## LR(1) items:
type00 -> LBRACE attributes . RBRACE [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On RBRACE shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## LBRACE attributes RBRACE
## LR(1) items:
type00 -> LBRACE attributes RBRACE . [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type00 -> LBRACE attributes RBRACE

State 45:
## Known stack suffix:
## attribute
## LR(1) items:
attributes -> attribute . SEMI attributes [ RBRACE ]
## Transitions:
-- On SEMI shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## attribute SEMI
## LR(1) items:
attributes -> attribute SEMI . attributes [ RBRACE ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 25
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 42
-- On star_types shift to state 40
-- On attributes shift to state 47
-- On attribute shift to state 45
## Reductions:

State 47:
## Known stack suffix:
## attribute SEMI attributes
## LR(1) items:
attributes -> attribute SEMI attributes . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attributes -> attribute SEMI attributes

State 48:
## Known stack suffix:
## LPAREN typ
## LR(1) items:
type00 -> LPAREN typ . RPAREN [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
type00 -> LPAREN typ . COMMA types RPAREN [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On RPAREN shift to state 49
-- On COMMA shift to state 50
## Reductions:

State 49:
## Known stack suffix:
## LPAREN typ RPAREN
## LR(1) items:
type00 -> LPAREN typ RPAREN . [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type00 -> LPAREN typ RPAREN

State 50:
## Known stack suffix:
## LPAREN typ COMMA
## LR(1) items:
type00 -> LPAREN typ COMMA . types RPAREN [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On types shift to state 51
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 53
-- On star_types shift to state 40
## Reductions:

State 51:
## Known stack suffix:
## LPAREN typ COMMA types
## LR(1) items:
type00 -> LPAREN typ COMMA types . RPAREN [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
-- On RPAREN shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## LPAREN typ COMMA types RPAREN
## LR(1) items:
type00 -> LPAREN typ COMMA types RPAREN . [ TYPE STAR SEMI RPAREN RBRACE LPAREN LID LET LBRACE IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type00 -> LPAREN typ COMMA types RPAREN

State 53:
## Known stack suffix:
## typ
## LR(1) items:
types -> typ . [ RPAREN ]
types -> typ . COMMA types [ RPAREN ]
## Transitions:
-- On COMMA shift to state 54
## Reductions:
-- On RPAREN
--   reduce production types -> typ

State 54:
## Known stack suffix:
## typ COMMA
## LR(1) items:
types -> typ COMMA . types [ RPAREN ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On types shift to state 55
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 53
-- On star_types shift to state 40
## Reductions:

State 55:
## Known stack suffix:
## typ COMMA types
## LR(1) items:
types -> typ COMMA types . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production types -> typ COMMA types

State 56:
## Known stack suffix:
## REF type0
## LR(1) items:
type0 -> REF type0 . [ TYPE STAR SEMI RPAREN RBRACE LET IN EQUAL EOF DOT DARROW COMMA COLON COERCE BAR ARROW AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type0 -> REF type0

State 57:
## Known stack suffix:
## forall typ
## LR(1) items:
scheme -> forall typ . [ TYPE LET IN EOF BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production scheme -> forall typ

State 58:
## Known stack suffix:
## LID COLON kind EQUAL algebraic_datatype_definitions
## LR(1) items:
type_definition -> LID COLON kind EQUAL algebraic_datatype_definitions . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_definition -> LID COLON kind EQUAL algebraic_datatype_definitions

State 59:
## Known stack suffix:
## algebraic_datatype_definition
## LR(1) items:
algebraic_datatype_definitions -> algebraic_datatype_definition . [ TYPE LET IN EOF AND ]
algebraic_datatype_definitions -> algebraic_datatype_definition . BAR algebraic_datatype_definitions [ TYPE LET IN EOF AND ]
## Transitions:
-- On BAR shift to state 60
## Reductions:
-- On TYPE LET IN EOF AND
--   reduce production algebraic_datatype_definitions -> algebraic_datatype_definition

State 60:
## Known stack suffix:
## algebraic_datatype_definition BAR
## LR(1) items:
algebraic_datatype_definitions -> algebraic_datatype_definition BAR . algebraic_datatype_definitions [ TYPE LET IN EOF AND ]
## Transitions:
-- On UID shift to state 11
-- On algebraic_datatype_definitions shift to state 61
-- On algebraic_datatype_definition shift to state 59
## Reductions:

State 61:
## Known stack suffix:
## algebraic_datatype_definition BAR algebraic_datatype_definitions
## LR(1) items:
algebraic_datatype_definitions -> algebraic_datatype_definition BAR algebraic_datatype_definitions . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production algebraic_datatype_definitions -> algebraic_datatype_definition BAR algebraic_datatype_definitions

State 62:
## Known stack suffix:
## TYPE type_definitions
## LR(1) items:
binding -> TYPE type_definitions . [ TYPE LET IN EOF ]
type_definitions -> type_definitions . AND type_definition [ TYPE LET IN EOF AND ]
## Transitions:
-- On AND shift to state 63
## Reductions:
-- On TYPE LET IN EOF
--   reduce production binding -> TYPE type_definitions

State 63:
## Known stack suffix:
## type_definitions AND
## LR(1) items:
type_definitions -> type_definitions AND . type_definition [ TYPE LET IN EOF AND ]
## Transitions:
-- On LID shift to state 4
-- On type_definition shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## type_definitions AND type_definition
## LR(1) items:
type_definitions -> type_definitions AND type_definition . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_definitions -> type_definitions AND type_definition

State 65:
## Known stack suffix:
## type_definition
## LR(1) items:
type_definitions -> type_definition . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_definitions -> type_definition

State 66:
## Known stack suffix:
## LET
## LR(1) items:
binding -> LET . value_definitions [ TYPE LET IN EOF ]
binding -> LET . REC value_definitions [ TYPE LET IN EOF ]
## Transitions:
-- On REC shift to state 67
-- On FORALL shift to state 13
-- On value_definitions shift to state 293
-- On value_definition shift to state 292
-- On forall shift to state 71
## Reductions:
-- On WILD UID LPAREN LID INTEGER CHAR
--   reduce production forall ->

State 67:
## Known stack suffix:
## LET REC
## LR(1) items:
binding -> LET REC . value_definitions [ TYPE LET IN EOF ]
## Transitions:
-- On FORALL shift to state 13
-- On value_definitions shift to state 68
-- On value_definition shift to state 292
-- On forall shift to state 71
## Reductions:
-- On WILD UID LPAREN LID INTEGER CHAR
--   reduce production forall ->

State 68:
## Known stack suffix:
## LET REC value_definitions
## LR(1) items:
binding -> LET REC value_definitions . [ TYPE LET IN EOF ]
value_definitions -> value_definitions . AND value_definition [ TYPE LET IN EOF AND ]
## Transitions:
-- On AND shift to state 69
## Reductions:
-- On TYPE LET IN EOF
--   reduce production binding -> LET REC value_definitions

State 69:
## Known stack suffix:
## value_definitions AND
## LR(1) items:
value_definitions -> value_definitions AND . value_definition [ TYPE LET IN EOF AND ]
## Transitions:
-- On FORALL shift to state 13
-- On value_definition shift to state 70
-- On forall shift to state 71
## Reductions:
-- On WILD UID LPAREN LID INTEGER CHAR
--   reduce production forall ->

State 70:
## Known stack suffix:
## value_definitions AND value_definition
## LR(1) items:
value_definitions -> value_definitions AND value_definition . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value_definitions -> value_definitions AND value_definition

State 71:
## Known stack suffix:
## forall
## LR(1) items:
value_definition -> forall . pattern0 equal_expression [ TYPE LET IN EOF AND ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 73
-- On LPAREN shift to state 78
-- On LID shift to state 80
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern0 shift to state 111
## Reductions:

State 72:
## Known stack suffix:
## WILD
## LR(1) items:
pattern0 -> WILD . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> WILD

State 73:
## Known stack suffix:
## UID
## LR(1) items:
pattern0 -> UID . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
pattern0 -> UID . localvars [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
-- On LBRACKET shift to state 74
-- On localvars shift to state 77
## Reductions:
-- On WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC
--   reduce production pattern0 -> UID

State 74:
## Known stack suffix:
## LBRACKET
## LR(1) items:
localvars -> LBRACKET . quantifiers RBRACKET [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
-- On LID shift to state 14
-- On quantifiers shift to state 75
-- On quantifier shift to state 17
## Reductions:

State 75:
## Known stack suffix:
## LBRACKET quantifiers
## LR(1) items:
localvars -> LBRACKET quantifiers . RBRACKET [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
-- On RBRACKET shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## LBRACKET quantifiers RBRACKET
## LR(1) items:
localvars -> LBRACKET quantifiers RBRACKET . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production localvars -> LBRACKET quantifiers RBRACKET

State 77:
## Known stack suffix:
## UID localvars
## LR(1) items:
pattern0 -> UID localvars . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> UID localvars

State 78:
## Known stack suffix:
## LPAREN
## LR(1) items:
pattern0 -> LPAREN . RPAREN [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
pattern0 -> LPAREN . pattern RPAREN [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
pattern0 -> LPAREN . pattern COMMA patterns RPAREN [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On RPAREN shift to state 88
-- On LPAREN shift to state 78
-- On LID shift to state 89
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern3 shift to state 99
-- On pattern2 shift to state 102
-- On pattern10 shift to state 92
-- On pattern1 shift to state 98
-- On pattern0 shift to state 95
-- On pattern shift to state 103
## Reductions:

State 79:
## Known stack suffix:
## UID
## LR(1) items:
pattern0 -> UID . [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
pattern0 -> UID . localvars [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
pattern10 -> UID . pattern1s [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
pattern10 -> UID . localvars pattern1s [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 73
-- On LPAREN shift to state 78
-- On LID shift to state 80
-- On LBRACKET shift to state 74
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern1s shift to state 83
-- On pattern0 shift to state 84
-- On localvars shift to state 86
## Reductions:
-- On RPAREN DOT DARROW COMMA COLON BAR ANDC
--   reduce production pattern0 -> UID

State 80:
## Known stack suffix:
## LID
## LR(1) items:
pattern0 -> LID . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LID

State 81:
## Known stack suffix:
## INTEGER
## LR(1) items:
pattern0 -> INTEGER . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> INTEGER

State 82:
## Known stack suffix:
## CHAR
## LR(1) items:
pattern0 -> CHAR . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> CHAR

State 83:
## Known stack suffix:
## UID pattern1s
## LR(1) items:
pattern10 -> UID pattern1s . [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern10 -> UID pattern1s

State 84:
## Known stack suffix:
## pattern0
## LR(1) items:
pattern1s -> pattern0 . [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
pattern1s -> pattern0 . pattern1s [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 73
-- On LPAREN shift to state 78
-- On LID shift to state 80
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern1s shift to state 85
-- On pattern0 shift to state 84
## Reductions:
-- On RPAREN DOT DARROW COMMA COLON BAR ANDC
--   reduce production pattern1s -> pattern0

State 85:
## Known stack suffix:
## pattern0 pattern1s
## LR(1) items:
pattern1s -> pattern0 pattern1s . [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern1s -> pattern0 pattern1s

State 86:
## Known stack suffix:
## UID localvars
## LR(1) items:
pattern0 -> UID localvars . [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
pattern10 -> UID localvars . pattern1s [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 73
-- On LPAREN shift to state 78
-- On LID shift to state 80
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern1s shift to state 87
-- On pattern0 shift to state 84
## Reductions:
-- On RPAREN DOT DARROW COMMA COLON BAR ANDC
--   reduce production pattern0 -> UID localvars

State 87:
## Known stack suffix:
## UID localvars pattern1s
## LR(1) items:
pattern10 -> UID localvars pattern1s . [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern10 -> UID localvars pattern1s

State 88:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
pattern0 -> LPAREN RPAREN . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LPAREN RPAREN

State 89:
## Known stack suffix:
## LID
## LR(1) items:
pattern0 -> LID . [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
pattern2 -> LID . AS pattern2 [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
-- On AS shift to state 90
## Reductions:
-- On RPAREN DOT DARROW COMMA COLON BAR ANDC
--   reduce production pattern0 -> LID

State 90:
## Known stack suffix:
## LID AS
## LR(1) items:
pattern2 -> LID AS . pattern2 [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 89
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern2 shift to state 91
-- On pattern10 shift to state 92
-- On pattern1 shift to state 98
-- On pattern0 shift to state 95
## Reductions:

State 91:
## Known stack suffix:
## LID AS pattern2
## LR(1) items:
pattern2 -> LID AS pattern2 . [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern2 -> LID AS pattern2

State 92:
## Known stack suffix:
## pattern10
## LR(1) items:
pattern1 -> pattern10 . [ RPAREN DOT DARROW COMMA COLON ]
pattern1 -> pattern10 . BAR pattern1 [ RPAREN DOT DARROW COMMA COLON ]
pattern1 -> pattern10 . ANDC pattern1 [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
-- On BAR shift to state 93
-- On ANDC shift to state 96
## Reductions:
-- On RPAREN DOT DARROW COMMA COLON
--   reduce production pattern1 -> pattern10

State 93:
## Known stack suffix:
## pattern10 BAR
## LR(1) items:
pattern1 -> pattern10 BAR . pattern1 [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 80
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern10 shift to state 92
-- On pattern1 shift to state 94
-- On pattern0 shift to state 95
## Reductions:

State 94:
## Known stack suffix:
## pattern10 BAR pattern1
## LR(1) items:
pattern1 -> pattern10 BAR pattern1 . [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern1 -> pattern10 BAR pattern1

State 95:
## Known stack suffix:
## pattern0
## LR(1) items:
pattern10 -> pattern0 . [ RPAREN DOT DARROW COMMA COLON BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern10 -> pattern0

State 96:
## Known stack suffix:
## pattern10 ANDC
## LR(1) items:
pattern1 -> pattern10 ANDC . pattern1 [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 80
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern10 shift to state 92
-- On pattern1 shift to state 97
-- On pattern0 shift to state 95
## Reductions:

State 97:
## Known stack suffix:
## pattern10 ANDC pattern1
## LR(1) items:
pattern1 -> pattern10 ANDC pattern1 . [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern1 -> pattern10 ANDC pattern1

State 98:
## Known stack suffix:
## pattern1
## LR(1) items:
pattern2 -> pattern1 . [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern2 -> pattern1

State 99:
## Known stack suffix:
## pattern3
## LR(1) items:
pattern -> pattern3 . [ RPAREN DOT DARROW COMMA ]
pattern3 -> pattern3 . COLON typ [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
-- On COLON shift to state 100
## Reductions:
-- On RPAREN DOT DARROW COMMA
--   reduce production pattern -> pattern3

State 100:
## Known stack suffix:
## pattern3 COLON
## LR(1) items:
pattern3 -> pattern3 COLON . typ [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 101
-- On star_types shift to state 40
## Reductions:

State 101:
## Known stack suffix:
## pattern3 COLON typ
## LR(1) items:
pattern3 -> pattern3 COLON typ . [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern3 -> pattern3 COLON typ

State 102:
## Known stack suffix:
## pattern2
## LR(1) items:
pattern3 -> pattern2 . [ RPAREN DOT DARROW COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern3 -> pattern2

State 103:
## Known stack suffix:
## LPAREN pattern
## LR(1) items:
pattern0 -> LPAREN pattern . RPAREN [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
pattern0 -> LPAREN pattern . COMMA patterns RPAREN [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
-- On RPAREN shift to state 104
-- On COMMA shift to state 105
## Reductions:

State 104:
## Known stack suffix:
## LPAREN pattern RPAREN
## LR(1) items:
pattern0 -> LPAREN pattern RPAREN . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LPAREN pattern RPAREN

State 105:
## Known stack suffix:
## LPAREN pattern COMMA
## LR(1) items:
pattern0 -> LPAREN pattern COMMA . patterns RPAREN [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 89
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On patterns shift to state 106
-- On pattern3 shift to state 99
-- On pattern2 shift to state 102
-- On pattern10 shift to state 92
-- On pattern1 shift to state 98
-- On pattern0 shift to state 95
-- On pattern shift to state 108
## Reductions:

State 106:
## Known stack suffix:
## LPAREN pattern COMMA patterns
## LR(1) items:
pattern0 -> LPAREN pattern COMMA patterns . RPAREN [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
-- On RPAREN shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## LPAREN pattern COMMA patterns RPAREN
## LR(1) items:
pattern0 -> LPAREN pattern COMMA patterns RPAREN . [ WILD UID RPAREN LPAREN LID INTEGER EQUAL DOT DARROW COMMA COLON CHAR BAR ANDC ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pattern0 -> LPAREN pattern COMMA patterns RPAREN

State 108:
## Known stack suffix:
## pattern
## LR(1) items:
patterns -> pattern . [ RPAREN ]
patterns -> pattern . COMMA patterns [ RPAREN ]
## Transitions:
-- On COMMA shift to state 109
## Reductions:
-- On RPAREN
--   reduce production patterns -> pattern

State 109:
## Known stack suffix:
## pattern COMMA
## LR(1) items:
patterns -> pattern COMMA . patterns [ RPAREN ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 89
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On patterns shift to state 110
-- On pattern3 shift to state 99
-- On pattern2 shift to state 102
-- On pattern10 shift to state 92
-- On pattern1 shift to state 98
-- On pattern0 shift to state 95
-- On pattern shift to state 108
## Reductions:

State 110:
## Known stack suffix:
## pattern COMMA patterns
## LR(1) items:
patterns -> pattern COMMA patterns . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production patterns -> pattern COMMA patterns

State 111:
## Known stack suffix:
## forall pattern0
## LR(1) items:
value_definition -> forall pattern0 . equal_expression [ TYPE LET IN EOF AND ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 73
-- On LPAREN shift to state 78
-- On LID shift to state 80
-- On INTEGER shift to state 81
-- On EQUAL shift to state 112
-- On COLON shift to state 285
-- On CHAR shift to state 82
-- On pattern0 shift to state 289
-- On equal_expression shift to state 291
## Reductions:

State 112:
## Known stack suffix:
## EQUAL
## LR(1) items:
equal_expression -> EQUAL . expression [ TYPE LET IN EOF AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 178
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On expression shift to state 284
-- On binding shift to state 173
## Reductions:

State 113:
## Known stack suffix:
## UID
## LR(1) items:
expression0 -> UID . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> UID

State 114:
## Known stack suffix:
## REF
## LR(1) items:
expression10 -> REF . expression0 [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
-- On UID shift to state 113
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On ASSERT_FALSE shift to state 137
-- On expression0 shift to state 283
## Reductions:

State 115:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression0 -> LPAREN . RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN . expression RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN . expression error [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN . expression COLON typ COERCE typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN . expression COLON typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN . expression COMMA expressions RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On UID shift to state 116
-- On TYPE shift to state 3
-- On RPAREN shift to state 117
-- On REF shift to state 118
-- On MATCH shift to state 121
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LET shift to state 66
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On FORALL shift to state 205
-- On EXISTS shift to state 208
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On BACKSLASH shift to state 215
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 218
-- On expression400 shift to state 254
-- On expression300 shift to state 232
-- On expression200 shift to state 235
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
-- On expression shift to state 271
-- On binding shift to state 249
## Reductions:

State 116:
## Known stack suffix:
## UID
## LR(1) items:
expression0 -> UID . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> UID

State 117:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
expression0 -> LPAREN RPAREN . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN RPAREN

State 118:
## Known stack suffix:
## REF
## LR(1) items:
expression10 -> REF . expression0 [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
-- On UID shift to state 116
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On ASSERT_FALSE shift to state 213
-- On expression0 shift to state 270
## Reductions:

State 119:
## Known stack suffix:
## LPAREN
## LR(1) items:
expression0 -> LPAREN . RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN . expression RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN . expression error [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN . expression COLON typ COERCE typ RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN . expression COLON typ RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN . expression COMMA expressions RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On UID shift to state 116
-- On TYPE shift to state 3
-- On RPAREN shift to state 120
-- On REF shift to state 118
-- On MATCH shift to state 121
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LET shift to state 66
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On FORALL shift to state 205
-- On EXISTS shift to state 208
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On BACKSLASH shift to state 215
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 218
-- On expression400 shift to state 254
-- On expression300 shift to state 232
-- On expression200 shift to state 235
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
-- On expression shift to state 255
-- On binding shift to state 249
## Reductions:

State 120:
## Known stack suffix:
## LPAREN RPAREN
## LR(1) items:
expression0 -> LPAREN RPAREN . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN RPAREN

State 121:
## Known stack suffix:
## MATCH
## LR(1) items:
expression400 -> MATCH . expression WITH clauses END [ error RPAREN COMMA COLON ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 178
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On expression shift to state 195
-- On binding shift to state 173
## Reductions:

State 122:
## Known stack suffix:
## MATCH
## LR(1) items:
expression400 -> MATCH . expression WITH clauses END [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 178
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On expression shift to state 185
-- On binding shift to state 173
## Reductions:

State 123:
## Known stack suffix:
## LONGID
## LR(1) items:
expression0 -> LONGID . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LONGID

State 124:
## Known stack suffix:
## LID
## LR(1) items:
expression0 -> LID . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LID

State 125:
## Known stack suffix:
## LBRACE
## LR(1) items:
expression0 -> LBRACE . record_bindings RBRACE [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On LID shift to state 126
-- On record_bindings shift to state 180
-- On record_binding shift to state 182
## Reductions:
-- On RBRACE
--   reduce production record_bindings ->

State 126:
## Known stack suffix:
## LID
## LR(1) items:
record_binding -> LID . EQUAL expression [ RBRACE AND ]
## Transitions:
-- On EQUAL shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## LID EQUAL
## LR(1) items:
record_binding -> LID EQUAL . expression [ RBRACE AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 178
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On expression shift to state 179
-- On binding shift to state 173
## Reductions:

State 128:
## Known stack suffix:
## INTEGER
## LR(1) items:
expression0 -> INTEGER . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> INTEGER

State 129:
## Known stack suffix:
## FORALL
## LR(1) items:
expression400 -> FORALL . quantifiers DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On LID shift to state 14
-- On quantifiers shift to state 130
-- On quantifier shift to state 17
## Reductions:

State 130:
## Known stack suffix:
## FORALL quantifiers
## LR(1) items:
expression400 -> FORALL quantifiers . DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On DOT shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## FORALL quantifiers DOT
## LR(1) items:
expression400 -> FORALL quantifiers DOT . expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 177
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On binding shift to state 173
## Reductions:

State 132:
## Known stack suffix:
## EXISTS
## LR(1) items:
expression400 -> EXISTS . quantifiers DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On LID shift to state 14
-- On quantifiers shift to state 133
-- On quantifier shift to state 17
## Reductions:

State 133:
## Known stack suffix:
## EXISTS quantifiers
## LR(1) items:
expression400 -> EXISTS quantifiers . DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On DOT shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## EXISTS quantifiers DOT
## LR(1) items:
expression400 -> EXISTS quantifiers DOT . expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 176
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On binding shift to state 173
## Reductions:

State 135:
## Known stack suffix:
## CHAR
## LR(1) items:
expression0 -> CHAR . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> CHAR

State 136:
## Known stack suffix:
## BANG
## LR(1) items:
expression10 -> BANG . expression0 [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
-- On UID shift to state 113
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On ASSERT_FALSE shift to state 137
-- On expression0 shift to state 138
## Reductions:

State 137:
## Known stack suffix:
## ASSERT_FALSE
## LR(1) items:
expression0 -> ASSERT_FALSE . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> ASSERT_FALSE

State 138:
## Known stack suffix:
## BANG expression0
## LR(1) items:
expression10 -> BANG expression0 . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression10 -> BANG expression0

State 139:
## Known stack suffix:
## BACKSLASH
## LR(1) items:
expression400 -> BACKSLASH . pattern DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 89
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern3 shift to state 99
-- On pattern2 shift to state 102
-- On pattern10 shift to state 92
-- On pattern1 shift to state 98
-- On pattern0 shift to state 95
-- On pattern shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## BACKSLASH pattern
## LR(1) items:
expression400 -> BACKSLASH pattern . DOT expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On DOT shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## BACKSLASH pattern DOT
## LR(1) items:
expression400 -> BACKSLASH pattern DOT . expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 155
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On binding shift to state 173
## Reductions:

State 142:
## Known stack suffix:
## expression50
## LR(1) items:
expression100 -> expression50 . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA CHAR BAR ASSERT_FALSE AND ]
expression300 -> expression50 . DOT LID LEFTARROW expression100 [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
expression50 -> expression50 . DOT LID [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
-- On DOT shift to state 143
## Reductions:
-- On WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA CHAR BAR ASSERT_FALSE AND
--   reduce production expression100 -> expression50

State 143:
## Known stack suffix:
## expression50 DOT
## LR(1) items:
expression300 -> expression50 DOT . LID LEFTARROW expression100 [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
expression50 -> expression50 DOT . LID [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
-- On LID shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## expression50 DOT LID
## LR(1) items:
expression300 -> expression50 DOT LID . LEFTARROW expression100 [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
expression50 -> expression50 DOT LID . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
-- On LEFTARROW shift to state 145
## Reductions:
-- On WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND
--   reduce production expression50 -> expression50 DOT LID

State 145:
## Known stack suffix:
## expression50 DOT LID LEFTARROW
## LR(1) items:
expression300 -> expression50 DOT LID LEFTARROW . expression100 [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On REF shift to state 114
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 146
-- On expression100 shift to state 149
-- On expression10 shift to state 151
-- On expression0 shift to state 152
## Reductions:

State 146:
## Known stack suffix:
## expression50
## LR(1) items:
expression100 -> expression50 . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA CHAR BAR ASSERT_FALSE AND ]
expression50 -> expression50 . DOT LID [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
-- On DOT shift to state 147
## Reductions:
-- On WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA CHAR BAR ASSERT_FALSE AND
--   reduce production expression100 -> expression50

State 147:
## Known stack suffix:
## expression50 DOT
## LR(1) items:
expression50 -> expression50 DOT . LID [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
-- On LID shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## expression50 DOT LID
## LR(1) items:
expression50 -> expression50 DOT LID . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression50 -> expression50 DOT LID

State 149:
## Known stack suffix:
## expression50 DOT LID LEFTARROW expression100
## LR(1) items:
expression100 -> expression100 . expression0 [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER IN EOF END COMMA CHAR BAR ASSERT_FALSE AND ]
expression300 -> expression50 DOT LID LEFTARROW expression100 . [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On ASSERT_FALSE shift to state 137
-- On expression0 shift to state 150
## Reductions:
-- On WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA BAR AND
--   reduce production expression300 -> expression50 DOT LID LEFTARROW expression100

State 150:
## Known stack suffix:
## expression100 expression0
## LR(1) items:
expression100 -> expression100 expression0 . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression100 -> expression100 expression0

State 151:
## Known stack suffix:
## expression10
## LR(1) items:
expression50 -> expression10 . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression50 -> expression10

State 152:
## Known stack suffix:
## expression0
## LR(1) items:
expression10 -> expression0 . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
expression10 -> expression0 . ASSIGN expression0 [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
-- On ASSIGN shift to state 153
## Reductions:
-- On WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND
--   reduce production expression10 -> expression0

State 153:
## Known stack suffix:
## expression0 ASSIGN
## LR(1) items:
expression10 -> expression0 ASSIGN . expression0 [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
-- On UID shift to state 113
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On ASSERT_FALSE shift to state 137
-- On expression0 shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## expression0 ASSIGN expression0
## LR(1) items:
expression10 -> expression0 ASSIGN expression0 . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression10 -> expression0 ASSIGN expression0

State 155:
## Known stack suffix:
## BACKSLASH pattern DOT expression400
## LR(1) items:
expression400 -> BACKSLASH pattern DOT expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> BACKSLASH pattern DOT expression400

State 156:
## Known stack suffix:
## expression300
## LR(1) items:
expression400 -> expression300 . SEMI expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
expression400 -> expression300 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On SEMI shift to state 157
## Reductions:
-- On WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND
--   reduce production expression400 -> expression300

State 157:
## Known stack suffix:
## expression300 SEMI
## LR(1) items:
expression400 -> expression300 SEMI . expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 158
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On binding shift to state 173
## Reductions:

State 158:
## Known stack suffix:
## expression300 SEMI expression400
## LR(1) items:
expression400 -> expression300 SEMI expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> expression300 SEMI expression400

State 159:
## Known stack suffix:
## expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression300 -> expression200 . [ WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 160
-- On INFIXOP3 shift to state 163
-- On INFIXOP2 shift to state 165
-- On INFIXOP1 shift to state 167
-- On INFIXOP0 shift to state 169
-- On EQUAL shift to state 171
## Reductions:
-- On WITH TYPE SEMI RPAREN RBRACE LET IN EOF END COMMA BAR AND
--   reduce production expression300 -> expression200

State 160:
## Known stack suffix:
## expression200 INFIXOP4
## LR(1) items:
expression200 -> expression200 INFIXOP4 . expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On REF shift to state 114
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 146
-- On expression200 shift to state 161
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
## Reductions:

State 161:
## Known stack suffix:
## expression200 INFIXOP4 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 INFIXOP4 expression200 . [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 160
## Reductions:
-- On WITH TYPE SEMI RPAREN RBRACE LET INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND
--   reduce production expression200 -> expression200 INFIXOP4 expression200

State 162:
## Known stack suffix:
## expression100
## LR(1) items:
expression100 -> expression100 . expression0 [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA CHAR BAR ASSERT_FALSE AND ]
expression200 -> expression100 . [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On ASSERT_FALSE shift to state 137
-- On expression0 shift to state 150
## Reductions:
-- On WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND
--   reduce production expression200 -> expression100

State 163:
## Known stack suffix:
## expression200 INFIXOP3
## LR(1) items:
expression200 -> expression200 INFIXOP3 . expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On REF shift to state 114
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 146
-- On expression200 shift to state 164
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
## Reductions:

State 164:
## Known stack suffix:
## expression200 INFIXOP3 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 INFIXOP3 expression200 . [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 160
## Reductions:
-- On WITH TYPE SEMI RPAREN RBRACE LET INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND
--   reduce production expression200 -> expression200 INFIXOP3 expression200

State 165:
## Known stack suffix:
## expression200 INFIXOP2
## LR(1) items:
expression200 -> expression200 INFIXOP2 . expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On REF shift to state 114
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 146
-- On expression200 shift to state 166
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
## Reductions:

State 166:
## Known stack suffix:
## expression200 INFIXOP2 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 INFIXOP2 expression200 . [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 160
-- On INFIXOP3 shift to state 163
## Reductions:
-- On WITH TYPE SEMI RPAREN RBRACE LET INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND
--   reduce production expression200 -> expression200 INFIXOP2 expression200

State 167:
## Known stack suffix:
## expression200 INFIXOP1
## LR(1) items:
expression200 -> expression200 INFIXOP1 . expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On REF shift to state 114
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 146
-- On expression200 shift to state 168
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
## Reductions:

State 168:
## Known stack suffix:
## expression200 INFIXOP1 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 INFIXOP1 expression200 . [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 160
-- On INFIXOP3 shift to state 163
-- On INFIXOP2 shift to state 165
-- On INFIXOP1 shift to state 167
## Reductions:
-- On WITH TYPE SEMI RPAREN RBRACE LET INFIXOP0 IN EQUAL EOF END COMMA BAR AND
--   reduce production expression200 -> expression200 INFIXOP1 expression200

State 169:
## Known stack suffix:
## expression200 INFIXOP0
## LR(1) items:
expression200 -> expression200 INFIXOP0 . expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On REF shift to state 114
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 146
-- On expression200 shift to state 170
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
## Reductions:

State 170:
## Known stack suffix:
## expression200 INFIXOP0 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 INFIXOP0 expression200 . [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 160
-- On INFIXOP3 shift to state 163
-- On INFIXOP2 shift to state 165
-- On INFIXOP1 shift to state 167
## Reductions:
-- On WITH TYPE SEMI RPAREN RBRACE LET INFIXOP0 IN EQUAL EOF END COMMA BAR AND
--   reduce production expression200 -> expression200 INFIXOP0 expression200

State 171:
## Known stack suffix:
## expression200 EQUAL
## LR(1) items:
expression200 -> expression200 EQUAL . expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On REF shift to state 114
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 146
-- On expression200 shift to state 172
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
## Reductions:

State 172:
## Known stack suffix:
## expression200 EQUAL expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP1 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP2 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP3 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . INFIXOP4 expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 . EQUAL expression200 [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
expression200 -> expression200 EQUAL expression200 . [ WITH TYPE SEMI RPAREN RBRACE LET INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END COMMA BAR AND ]
## Transitions:
-- On INFIXOP4 shift to state 160
-- On INFIXOP3 shift to state 163
-- On INFIXOP2 shift to state 165
-- On INFIXOP1 shift to state 167
## Reductions:
-- On WITH TYPE SEMI RPAREN RBRACE LET INFIXOP0 IN EQUAL EOF END COMMA BAR AND
--   reduce production expression200 -> expression200 EQUAL expression200

State 173:
## Known stack suffix:
## binding
## LR(1) items:
expression400 -> binding . IN expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On IN shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## binding IN
## LR(1) items:
expression400 -> binding IN . expression400 [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 175
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On binding shift to state 173
## Reductions:

State 175:
## Known stack suffix:
## binding IN expression400
## LR(1) items:
expression400 -> binding IN expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> binding IN expression400

State 176:
## Known stack suffix:
## EXISTS quantifiers DOT expression400
## LR(1) items:
expression400 -> EXISTS quantifiers DOT expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> EXISTS quantifiers DOT expression400

State 177:
## Known stack suffix:
## FORALL quantifiers DOT expression400
## LR(1) items:
expression400 -> FORALL quantifiers DOT expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> FORALL quantifiers DOT expression400

State 178:
## Known stack suffix:
## expression400
## LR(1) items:
expression -> expression400 . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> expression400

State 179:
## Known stack suffix:
## LID EQUAL expression
## LR(1) items:
record_binding -> LID EQUAL expression . [ RBRACE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_binding -> LID EQUAL expression

State 180:
## Known stack suffix:
## LBRACE record_bindings
## LR(1) items:
expression0 -> LBRACE record_bindings . RBRACE [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On RBRACE shift to state 181
## Reductions:

State 181:
## Known stack suffix:
## LBRACE record_bindings RBRACE
## LR(1) items:
expression0 -> LBRACE record_bindings RBRACE . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LBRACE record_bindings RBRACE

State 182:
## Known stack suffix:
## record_binding
## LR(1) items:
record_bindings -> record_binding . [ RBRACE ]
record_bindings -> record_binding . AND record_bindings [ RBRACE ]
## Transitions:
-- On AND shift to state 183
## Reductions:
-- On RBRACE
--   reduce production record_bindings -> record_binding

State 183:
## Known stack suffix:
## record_binding AND
## LR(1) items:
record_bindings -> record_binding AND . record_bindings [ RBRACE ]
## Transitions:
-- On LID shift to state 126
-- On record_bindings shift to state 184
-- On record_binding shift to state 182
## Reductions:
-- On RBRACE
--   reduce production record_bindings ->

State 184:
## Known stack suffix:
## record_binding AND record_bindings
## LR(1) items:
record_bindings -> record_binding AND record_bindings . [ RBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production record_bindings -> record_binding AND record_bindings

State 185:
## Known stack suffix:
## MATCH expression
## LR(1) items:
expression400 -> MATCH expression . WITH clauses END [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On WITH shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## MATCH expression WITH
## LR(1) items:
expression400 -> MATCH expression WITH . clauses END [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 89
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern3 shift to state 99
-- On pattern2 shift to state 102
-- On pattern10 shift to state 92
-- On pattern1 shift to state 98
-- On pattern0 shift to state 95
-- On pattern shift to state 187
-- On clauses shift to state 190
-- On clause shift to state 194
## Reductions:

State 187:
## Known stack suffix:
## pattern
## LR(1) items:
clause -> pattern . DARROW expression [ END BAR ]
## Transitions:
-- On DARROW shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## pattern DARROW
## LR(1) items:
clause -> pattern DARROW . expression [ END BAR ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 178
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On expression shift to state 189
-- On binding shift to state 173
## Reductions:

State 189:
## Known stack suffix:
## pattern DARROW expression
## LR(1) items:
clause -> pattern DARROW expression . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clause -> pattern DARROW expression

State 190:
## Known stack suffix:
## MATCH expression WITH clauses
## LR(1) items:
clauses -> clauses . BAR clause [ END BAR ]
expression400 -> MATCH expression WITH clauses . END [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
-- On END shift to state 191
-- On BAR shift to state 192
## Reductions:

State 191:
## Known stack suffix:
## MATCH expression WITH clauses END
## LR(1) items:
expression400 -> MATCH expression WITH clauses END . [ WITH TYPE RPAREN RBRACE LET IN EOF END COMMA BAR AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> MATCH expression WITH clauses END

State 192:
## Known stack suffix:
## clauses BAR
## LR(1) items:
clauses -> clauses BAR . clause [ END BAR ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 89
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern3 shift to state 99
-- On pattern2 shift to state 102
-- On pattern10 shift to state 92
-- On pattern1 shift to state 98
-- On pattern0 shift to state 95
-- On pattern shift to state 187
-- On clause shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## clauses BAR clause
## LR(1) items:
clauses -> clauses BAR clause . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clauses -> clauses BAR clause

State 194:
## Known stack suffix:
## clause
## LR(1) items:
clauses -> clause . [ END BAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clauses -> clause

State 195:
## Known stack suffix:
## MATCH expression
## LR(1) items:
expression400 -> MATCH expression . WITH clauses END [ error RPAREN COMMA COLON ]
## Transitions:
-- On WITH shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## MATCH expression WITH
## LR(1) items:
expression400 -> MATCH expression WITH . clauses END [ error RPAREN COMMA COLON ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 89
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern3 shift to state 99
-- On pattern2 shift to state 102
-- On pattern10 shift to state 92
-- On pattern1 shift to state 98
-- On pattern0 shift to state 95
-- On pattern shift to state 187
-- On clauses shift to state 197
-- On clause shift to state 194
## Reductions:

State 197:
## Known stack suffix:
## MATCH expression WITH clauses
## LR(1) items:
clauses -> clauses . BAR clause [ END BAR ]
expression400 -> MATCH expression WITH clauses . END [ error RPAREN COMMA COLON ]
## Transitions:
-- On END shift to state 198
-- On BAR shift to state 192
## Reductions:

State 198:
## Known stack suffix:
## MATCH expression WITH clauses END
## LR(1) items:
expression400 -> MATCH expression WITH clauses END . [ error RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> MATCH expression WITH clauses END

State 199:
## Known stack suffix:
## LONGID
## LR(1) items:
expression0 -> LONGID . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LONGID

State 200:
## Known stack suffix:
## LID
## LR(1) items:
expression0 -> LID . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LID

State 201:
## Known stack suffix:
## LBRACE
## LR(1) items:
expression0 -> LBRACE . record_bindings RBRACE [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On LID shift to state 126
-- On record_bindings shift to state 202
-- On record_binding shift to state 182
## Reductions:
-- On RBRACE
--   reduce production record_bindings ->

State 202:
## Known stack suffix:
## LBRACE record_bindings
## LR(1) items:
expression0 -> LBRACE record_bindings . RBRACE [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On RBRACE shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## LBRACE record_bindings RBRACE
## LR(1) items:
expression0 -> LBRACE record_bindings RBRACE . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LBRACE record_bindings RBRACE

State 204:
## Known stack suffix:
## INTEGER
## LR(1) items:
expression0 -> INTEGER . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> INTEGER

State 205:
## Known stack suffix:
## FORALL
## LR(1) items:
expression400 -> FORALL . quantifiers DOT expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On LID shift to state 14
-- On quantifiers shift to state 206
-- On quantifier shift to state 17
## Reductions:

State 206:
## Known stack suffix:
## FORALL quantifiers
## LR(1) items:
expression400 -> FORALL quantifiers . DOT expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On DOT shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## FORALL quantifiers DOT
## LR(1) items:
expression400 -> FORALL quantifiers DOT . expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On TYPE shift to state 3
-- On REF shift to state 118
-- On MATCH shift to state 121
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LET shift to state 66
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On FORALL shift to state 205
-- On EXISTS shift to state 208
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On BACKSLASH shift to state 215
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 218
-- On expression400 shift to state 253
-- On expression300 shift to state 232
-- On expression200 shift to state 235
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
-- On binding shift to state 249
## Reductions:

State 208:
## Known stack suffix:
## EXISTS
## LR(1) items:
expression400 -> EXISTS . quantifiers DOT expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On LID shift to state 14
-- On quantifiers shift to state 209
-- On quantifier shift to state 17
## Reductions:

State 209:
## Known stack suffix:
## EXISTS quantifiers
## LR(1) items:
expression400 -> EXISTS quantifiers . DOT expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On DOT shift to state 210
## Reductions:

State 210:
## Known stack suffix:
## EXISTS quantifiers DOT
## LR(1) items:
expression400 -> EXISTS quantifiers DOT . expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On TYPE shift to state 3
-- On REF shift to state 118
-- On MATCH shift to state 121
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LET shift to state 66
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On FORALL shift to state 205
-- On EXISTS shift to state 208
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On BACKSLASH shift to state 215
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 218
-- On expression400 shift to state 252
-- On expression300 shift to state 232
-- On expression200 shift to state 235
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
-- On binding shift to state 249
## Reductions:

State 211:
## Known stack suffix:
## CHAR
## LR(1) items:
expression0 -> CHAR . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> CHAR

State 212:
## Known stack suffix:
## BANG
## LR(1) items:
expression10 -> BANG . expression0 [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
-- On UID shift to state 116
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On ASSERT_FALSE shift to state 213
-- On expression0 shift to state 214
## Reductions:

State 213:
## Known stack suffix:
## ASSERT_FALSE
## LR(1) items:
expression0 -> ASSERT_FALSE . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> ASSERT_FALSE

State 214:
## Known stack suffix:
## BANG expression0
## LR(1) items:
expression10 -> BANG expression0 . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression10 -> BANG expression0

State 215:
## Known stack suffix:
## BACKSLASH
## LR(1) items:
expression400 -> BACKSLASH . pattern DOT expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 79
-- On LPAREN shift to state 78
-- On LID shift to state 89
-- On INTEGER shift to state 81
-- On CHAR shift to state 82
-- On pattern3 shift to state 99
-- On pattern2 shift to state 102
-- On pattern10 shift to state 92
-- On pattern1 shift to state 98
-- On pattern0 shift to state 95
-- On pattern shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## BACKSLASH pattern
## LR(1) items:
expression400 -> BACKSLASH pattern . DOT expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On DOT shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## BACKSLASH pattern DOT
## LR(1) items:
expression400 -> BACKSLASH pattern DOT . expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On TYPE shift to state 3
-- On REF shift to state 118
-- On MATCH shift to state 121
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LET shift to state 66
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On FORALL shift to state 205
-- On EXISTS shift to state 208
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On BACKSLASH shift to state 215
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 218
-- On expression400 shift to state 231
-- On expression300 shift to state 232
-- On expression200 shift to state 235
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
-- On binding shift to state 249
## Reductions:

State 218:
## Known stack suffix:
## expression50
## LR(1) items:
expression100 -> expression50 . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON CHAR ASSERT_FALSE ]
expression300 -> expression50 . DOT LID LEFTARROW expression100 [ error SEMI RPAREN COMMA COLON ]
expression50 -> expression50 . DOT LID [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
-- On DOT shift to state 219
## Reductions:
-- On error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON CHAR ASSERT_FALSE
--   reduce production expression100 -> expression50

State 219:
## Known stack suffix:
## expression50 DOT
## LR(1) items:
expression300 -> expression50 DOT . LID LEFTARROW expression100 [ error SEMI RPAREN COMMA COLON ]
expression50 -> expression50 DOT . LID [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
-- On LID shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## expression50 DOT LID
## LR(1) items:
expression300 -> expression50 DOT LID . LEFTARROW expression100 [ error SEMI RPAREN COMMA COLON ]
expression50 -> expression50 DOT LID . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
-- On LEFTARROW shift to state 221
## Reductions:
-- On error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE
--   reduce production expression50 -> expression50 DOT LID

State 221:
## Known stack suffix:
## expression50 DOT LID LEFTARROW
## LR(1) items:
expression300 -> expression50 DOT LID LEFTARROW . expression100 [ error SEMI RPAREN COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On REF shift to state 118
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 222
-- On expression100 shift to state 225
-- On expression10 shift to state 227
-- On expression0 shift to state 228
## Reductions:

State 222:
## Known stack suffix:
## expression50
## LR(1) items:
expression100 -> expression50 . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON CHAR ASSERT_FALSE ]
expression50 -> expression50 . DOT LID [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
-- On DOT shift to state 223
## Reductions:
-- On error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON CHAR ASSERT_FALSE
--   reduce production expression100 -> expression50

State 223:
## Known stack suffix:
## expression50 DOT
## LR(1) items:
expression50 -> expression50 DOT . LID [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
-- On LID shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## expression50 DOT LID
## LR(1) items:
expression50 -> expression50 DOT LID . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression50 -> expression50 DOT LID

State 225:
## Known stack suffix:
## expression50 DOT LID LEFTARROW expression100
## LR(1) items:
expression100 -> expression100 . expression0 [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER COMMA COLON CHAR ASSERT_FALSE ]
expression300 -> expression50 DOT LID LEFTARROW expression100 . [ error SEMI RPAREN COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On ASSERT_FALSE shift to state 213
-- On expression0 shift to state 226
## Reductions:
-- On error SEMI RPAREN COMMA COLON
--   reduce production expression300 -> expression50 DOT LID LEFTARROW expression100

State 226:
## Known stack suffix:
## expression100 expression0
## LR(1) items:
expression100 -> expression100 expression0 . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression100 -> expression100 expression0

State 227:
## Known stack suffix:
## expression10
## LR(1) items:
expression50 -> expression10 . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression50 -> expression10

State 228:
## Known stack suffix:
## expression0
## LR(1) items:
expression10 -> expression0 . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
expression10 -> expression0 . ASSIGN expression0 [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
-- On ASSIGN shift to state 229
## Reductions:
-- On error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE
--   reduce production expression10 -> expression0

State 229:
## Known stack suffix:
## expression0 ASSIGN
## LR(1) items:
expression10 -> expression0 ASSIGN . expression0 [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
-- On UID shift to state 116
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On ASSERT_FALSE shift to state 213
-- On expression0 shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## expression0 ASSIGN expression0
## LR(1) items:
expression10 -> expression0 ASSIGN expression0 . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression10 -> expression0 ASSIGN expression0

State 231:
## Known stack suffix:
## BACKSLASH pattern DOT expression400
## LR(1) items:
expression400 -> BACKSLASH pattern DOT expression400 . [ error RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> BACKSLASH pattern DOT expression400

State 232:
## Known stack suffix:
## expression300
## LR(1) items:
expression400 -> expression300 . SEMI expression400 [ error RPAREN COMMA COLON ]
expression400 -> expression300 . [ error RPAREN COMMA COLON ]
## Transitions:
-- On SEMI shift to state 233
## Reductions:
-- On error RPAREN COMMA COLON
--   reduce production expression400 -> expression300

State 233:
## Known stack suffix:
## expression300 SEMI
## LR(1) items:
expression400 -> expression300 SEMI . expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On TYPE shift to state 3
-- On REF shift to state 118
-- On MATCH shift to state 121
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LET shift to state 66
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On FORALL shift to state 205
-- On EXISTS shift to state 208
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On BACKSLASH shift to state 215
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 218
-- On expression400 shift to state 234
-- On expression300 shift to state 232
-- On expression200 shift to state 235
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
-- On binding shift to state 249
## Reductions:

State 234:
## Known stack suffix:
## expression300 SEMI expression400
## LR(1) items:
expression400 -> expression300 SEMI expression400 . [ error RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> expression300 SEMI expression400

State 235:
## Known stack suffix:
## expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP1 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP2 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP3 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP4 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . EQUAL expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression300 -> expression200 . [ error SEMI RPAREN COMMA COLON ]
## Transitions:
-- On INFIXOP4 shift to state 236
-- On INFIXOP3 shift to state 239
-- On INFIXOP2 shift to state 241
-- On INFIXOP1 shift to state 243
-- On INFIXOP0 shift to state 245
-- On EQUAL shift to state 247
## Reductions:
-- On error SEMI RPAREN COMMA COLON
--   reduce production expression300 -> expression200

State 236:
## Known stack suffix:
## expression200 INFIXOP4
## LR(1) items:
expression200 -> expression200 INFIXOP4 . expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On REF shift to state 118
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 222
-- On expression200 shift to state 237
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
## Reductions:

State 237:
## Known stack suffix:
## expression200 INFIXOP4 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP1 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP2 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP3 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP4 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 INFIXOP4 expression200 . [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . EQUAL expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On INFIXOP4 shift to state 236
## Reductions:
-- On error SEMI RPAREN INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON
--   reduce production expression200 -> expression200 INFIXOP4 expression200

State 238:
## Known stack suffix:
## expression100
## LR(1) items:
expression100 -> expression100 . expression0 [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON CHAR ASSERT_FALSE ]
expression200 -> expression100 . [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On ASSERT_FALSE shift to state 213
-- On expression0 shift to state 226
## Reductions:
-- On error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON
--   reduce production expression200 -> expression100

State 239:
## Known stack suffix:
## expression200 INFIXOP3
## LR(1) items:
expression200 -> expression200 INFIXOP3 . expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On REF shift to state 118
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 222
-- On expression200 shift to state 240
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
## Reductions:

State 240:
## Known stack suffix:
## expression200 INFIXOP3 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP1 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP2 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP3 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 INFIXOP3 expression200 . [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP4 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . EQUAL expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On INFIXOP4 shift to state 236
## Reductions:
-- On error SEMI RPAREN INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON
--   reduce production expression200 -> expression200 INFIXOP3 expression200

State 241:
## Known stack suffix:
## expression200 INFIXOP2
## LR(1) items:
expression200 -> expression200 INFIXOP2 . expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On REF shift to state 118
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 222
-- On expression200 shift to state 242
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
## Reductions:

State 242:
## Known stack suffix:
## expression200 INFIXOP2 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP1 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP2 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 INFIXOP2 expression200 . [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP3 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP4 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . EQUAL expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On INFIXOP4 shift to state 236
-- On INFIXOP3 shift to state 239
## Reductions:
-- On error SEMI RPAREN INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON
--   reduce production expression200 -> expression200 INFIXOP2 expression200

State 243:
## Known stack suffix:
## expression200 INFIXOP1
## LR(1) items:
expression200 -> expression200 INFIXOP1 . expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On REF shift to state 118
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 222
-- On expression200 shift to state 244
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
## Reductions:

State 244:
## Known stack suffix:
## expression200 INFIXOP1 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP1 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 INFIXOP1 expression200 . [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP2 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP3 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP4 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . EQUAL expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On INFIXOP4 shift to state 236
-- On INFIXOP3 shift to state 239
-- On INFIXOP2 shift to state 241
-- On INFIXOP1 shift to state 243
## Reductions:
-- On error SEMI RPAREN INFIXOP0 EQUAL COMMA COLON
--   reduce production expression200 -> expression200 INFIXOP1 expression200

State 245:
## Known stack suffix:
## expression200 INFIXOP0
## LR(1) items:
expression200 -> expression200 INFIXOP0 . expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On REF shift to state 118
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 222
-- On expression200 shift to state 246
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
## Reductions:

State 246:
## Known stack suffix:
## expression200 INFIXOP0 expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 INFIXOP0 expression200 . [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP1 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP2 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP3 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP4 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . EQUAL expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On INFIXOP4 shift to state 236
-- On INFIXOP3 shift to state 239
-- On INFIXOP2 shift to state 241
-- On INFIXOP1 shift to state 243
## Reductions:
-- On error SEMI RPAREN INFIXOP0 EQUAL COMMA COLON
--   reduce production expression200 -> expression200 INFIXOP0 expression200

State 247:
## Known stack suffix:
## expression200 EQUAL
## LR(1) items:
expression200 -> expression200 EQUAL . expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On REF shift to state 118
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 222
-- On expression200 shift to state 248
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
## Reductions:

State 248:
## Known stack suffix:
## expression200 EQUAL expression200
## LR(1) items:
expression200 -> expression200 . INFIXOP0 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP1 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP2 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP3 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . INFIXOP4 expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 . EQUAL expression200 [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
expression200 -> expression200 EQUAL expression200 . [ error SEMI RPAREN INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL COMMA COLON ]
## Transitions:
-- On INFIXOP4 shift to state 236
-- On INFIXOP3 shift to state 239
-- On INFIXOP2 shift to state 241
-- On INFIXOP1 shift to state 243
## Reductions:
-- On error SEMI RPAREN INFIXOP0 EQUAL COMMA COLON
--   reduce production expression200 -> expression200 EQUAL expression200

State 249:
## Known stack suffix:
## binding
## LR(1) items:
expression400 -> binding . IN expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On IN shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## binding IN
## LR(1) items:
expression400 -> binding IN . expression400 [ error RPAREN COMMA COLON ]
## Transitions:
-- On UID shift to state 116
-- On TYPE shift to state 3
-- On REF shift to state 118
-- On MATCH shift to state 121
-- On LPAREN shift to state 119
-- On LONGID shift to state 199
-- On LID shift to state 200
-- On LET shift to state 66
-- On LBRACE shift to state 201
-- On INTEGER shift to state 204
-- On FORALL shift to state 205
-- On EXISTS shift to state 208
-- On CHAR shift to state 211
-- On BANG shift to state 212
-- On BACKSLASH shift to state 215
-- On ASSERT_FALSE shift to state 213
-- On expression50 shift to state 218
-- On expression400 shift to state 251
-- On expression300 shift to state 232
-- On expression200 shift to state 235
-- On expression100 shift to state 238
-- On expression10 shift to state 227
-- On expression0 shift to state 228
-- On binding shift to state 249
## Reductions:

State 251:
## Known stack suffix:
## binding IN expression400
## LR(1) items:
expression400 -> binding IN expression400 . [ error RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> binding IN expression400

State 252:
## Known stack suffix:
## EXISTS quantifiers DOT expression400
## LR(1) items:
expression400 -> EXISTS quantifiers DOT expression400 . [ error RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> EXISTS quantifiers DOT expression400

State 253:
## Known stack suffix:
## FORALL quantifiers DOT expression400
## LR(1) items:
expression400 -> FORALL quantifiers DOT expression400 . [ error RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression400 -> FORALL quantifiers DOT expression400

State 254:
## Known stack suffix:
## expression400
## LR(1) items:
expression -> expression400 . [ error RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> expression400

State 255:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression0 -> LPAREN expression . RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN expression . error [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN expression . COLON typ COERCE typ RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN expression . COLON typ RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN expression . COMMA expressions RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On error shift to state 256
-- On RPAREN shift to state 257
-- On COMMA shift to state 258
-- On COLON shift to state 264
## Reductions:

State 256:
## Known stack suffix:
## LPAREN expression error
## LR(1) items:
expression0 -> LPAREN expression error . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression error

State 257:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression0 -> LPAREN expression RPAREN . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression RPAREN

State 258:
## Known stack suffix:
## LPAREN expression COMMA
## LR(1) items:
expression0 -> LPAREN expression COMMA . expressions RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expressions shift to state 259
-- On expression50 shift to state 142
-- On expression400 shift to state 178
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On expression shift to state 261
-- On binding shift to state 173
## Reductions:

State 259:
## Known stack suffix:
## LPAREN expression COMMA expressions
## LR(1) items:
expression0 -> LPAREN expression COMMA expressions . RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On RPAREN shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## LPAREN expression COMMA expressions RPAREN
## LR(1) items:
expression0 -> LPAREN expression COMMA expressions RPAREN . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression COMMA expressions RPAREN

State 261:
## Known stack suffix:
## expression
## LR(1) items:
expressions -> expression . [ RPAREN ]
expressions -> expression . COMMA expressions [ RPAREN ]
## Transitions:
-- On COMMA shift to state 262
## Reductions:
-- On RPAREN
--   reduce production expressions -> expression

State 262:
## Known stack suffix:
## expression COMMA
## LR(1) items:
expressions -> expression COMMA . expressions [ RPAREN ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expressions shift to state 263
-- On expression50 shift to state 142
-- On expression400 shift to state 178
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On expression shift to state 261
-- On binding shift to state 173
## Reductions:

State 263:
## Known stack suffix:
## expression COMMA expressions
## LR(1) items:
expressions -> expression COMMA expressions . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expressions -> expression COMMA expressions

State 264:
## Known stack suffix:
## LPAREN expression COLON
## LR(1) items:
expression0 -> LPAREN expression COLON . typ COERCE typ RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN expression COLON . typ RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 265
-- On star_types shift to state 40
## Reductions:

State 265:
## Known stack suffix:
## LPAREN expression COLON typ
## LR(1) items:
expression0 -> LPAREN expression COLON typ . COERCE typ RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
expression0 -> LPAREN expression COLON typ . RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On RPAREN shift to state 266
-- On COERCE shift to state 267
## Reductions:

State 266:
## Known stack suffix:
## LPAREN expression COLON typ RPAREN
## LR(1) items:
expression0 -> LPAREN expression COLON typ RPAREN . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression COLON typ RPAREN

State 267:
## Known stack suffix:
## LPAREN expression COLON typ COERCE
## LR(1) items:
expression0 -> LPAREN expression COLON typ COERCE . typ RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 268
-- On star_types shift to state 40
## Reductions:

State 268:
## Known stack suffix:
## LPAREN expression COLON typ COERCE typ
## LR(1) items:
expression0 -> LPAREN expression COLON typ COERCE typ . RPAREN [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
-- On RPAREN shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## LPAREN expression COLON typ COERCE typ RPAREN
## LR(1) items:
expression0 -> LPAREN expression COLON typ COERCE typ RPAREN . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSIGN ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression COLON typ COERCE typ RPAREN

State 270:
## Known stack suffix:
## REF expression0
## LR(1) items:
expression10 -> REF expression0 . [ error UID SEMI RPAREN LPAREN LONGID LID LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 EQUAL DOT COMMA COLON CHAR ASSERT_FALSE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression10 -> REF expression0

State 271:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression0 -> LPAREN expression . RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN expression . error [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN expression . COLON typ COERCE typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN expression . COLON typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN expression . COMMA expressions RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On error shift to state 272
-- On RPAREN shift to state 273
-- On COMMA shift to state 274
-- On COLON shift to state 277
## Reductions:

State 272:
## Known stack suffix:
## LPAREN expression error
## LR(1) items:
expression0 -> LPAREN expression error . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression error

State 273:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expression0 -> LPAREN expression RPAREN . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression RPAREN

State 274:
## Known stack suffix:
## LPAREN expression COMMA
## LR(1) items:
expression0 -> LPAREN expression COMMA . expressions RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expressions shift to state 275
-- On expression50 shift to state 142
-- On expression400 shift to state 178
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On expression shift to state 261
-- On binding shift to state 173
## Reductions:

State 275:
## Known stack suffix:
## LPAREN expression COMMA expressions
## LR(1) items:
expression0 -> LPAREN expression COMMA expressions . RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On RPAREN shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## LPAREN expression COMMA expressions RPAREN
## LR(1) items:
expression0 -> LPAREN expression COMMA expressions RPAREN . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression COMMA expressions RPAREN

State 277:
## Known stack suffix:
## LPAREN expression COLON
## LR(1) items:
expression0 -> LPAREN expression COLON . typ COERCE typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN expression COLON . typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 278
-- On star_types shift to state 40
## Reductions:

State 278:
## Known stack suffix:
## LPAREN expression COLON typ
## LR(1) items:
expression0 -> LPAREN expression COLON typ . COERCE typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
expression0 -> LPAREN expression COLON typ . RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On RPAREN shift to state 279
-- On COERCE shift to state 280
## Reductions:

State 279:
## Known stack suffix:
## LPAREN expression COLON typ RPAREN
## LR(1) items:
expression0 -> LPAREN expression COLON typ RPAREN . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression COLON typ RPAREN

State 280:
## Known stack suffix:
## LPAREN expression COLON typ COERCE
## LR(1) items:
expression0 -> LPAREN expression COLON typ COERCE . typ RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 281
-- On star_types shift to state 40
## Reductions:

State 281:
## Known stack suffix:
## LPAREN expression COLON typ COERCE typ
## LR(1) items:
expression0 -> LPAREN expression COLON typ COERCE typ . RPAREN [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
-- On RPAREN shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## LPAREN expression COLON typ COERCE typ RPAREN
## LR(1) items:
expression0 -> LPAREN expression COLON typ COERCE typ RPAREN . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSIGN ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression0 -> LPAREN expression COLON typ COERCE typ RPAREN

State 283:
## Known stack suffix:
## REF expression0
## LR(1) items:
expression10 -> REF expression0 . [ WITH UID TYPE SEMI RPAREN RBRACE LPAREN LONGID LID LET LBRACE INTEGER INFIXOP4 INFIXOP3 INFIXOP2 INFIXOP1 INFIXOP0 IN EQUAL EOF END DOT COMMA CHAR BAR ASSERT_FALSE AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression10 -> REF expression0

State 284:
## Known stack suffix:
## EQUAL expression
## LR(1) items:
equal_expression -> EQUAL expression . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equal_expression -> EQUAL expression

State 285:
## Known stack suffix:
## COLON
## LR(1) items:
equal_expression -> COLON . typ EQUAL expression [ TYPE LET IN EOF AND ]
## Transitions:
-- On REF shift to state 21
-- On LPAREN shift to state 22
-- On LID shift to state 23
-- On LBRACE shift to state 24
-- On BACKSLASH shift to state 27
-- On type2 shift to state 32
-- On type10 shift to state 33
-- On type1 shift to state 36
-- On type00s shift to state 28
-- On type00 shift to state 29
-- On type0 shift to state 38
-- On typ shift to state 286
-- On star_types shift to state 40
## Reductions:

State 286:
## Known stack suffix:
## COLON typ
## LR(1) items:
equal_expression -> COLON typ . EQUAL expression [ TYPE LET IN EOF AND ]
## Transitions:
-- On EQUAL shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## COLON typ EQUAL
## LR(1) items:
equal_expression -> COLON typ EQUAL . expression [ TYPE LET IN EOF AND ]
## Transitions:
-- On UID shift to state 113
-- On TYPE shift to state 3
-- On REF shift to state 114
-- On MATCH shift to state 122
-- On LPAREN shift to state 115
-- On LONGID shift to state 123
-- On LID shift to state 124
-- On LET shift to state 66
-- On LBRACE shift to state 125
-- On INTEGER shift to state 128
-- On FORALL shift to state 129
-- On EXISTS shift to state 132
-- On CHAR shift to state 135
-- On BANG shift to state 136
-- On BACKSLASH shift to state 139
-- On ASSERT_FALSE shift to state 137
-- On expression50 shift to state 142
-- On expression400 shift to state 178
-- On expression300 shift to state 156
-- On expression200 shift to state 159
-- On expression100 shift to state 162
-- On expression10 shift to state 151
-- On expression0 shift to state 152
-- On expression shift to state 288
-- On binding shift to state 173
## Reductions:

State 288:
## Known stack suffix:
## COLON typ EQUAL expression
## LR(1) items:
equal_expression -> COLON typ EQUAL expression . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equal_expression -> COLON typ EQUAL expression

State 289:
## Known stack suffix:
## pattern0
## LR(1) items:
equal_expression -> pattern0 . equal_expression [ TYPE LET IN EOF AND ]
## Transitions:
-- On WILD shift to state 72
-- On UID shift to state 73
-- On LPAREN shift to state 78
-- On LID shift to state 80
-- On INTEGER shift to state 81
-- On EQUAL shift to state 112
-- On COLON shift to state 285
-- On CHAR shift to state 82
-- On pattern0 shift to state 289
-- On equal_expression shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## pattern0 equal_expression
## LR(1) items:
equal_expression -> pattern0 equal_expression . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equal_expression -> pattern0 equal_expression

State 291:
## Known stack suffix:
## forall pattern0 equal_expression
## LR(1) items:
value_definition -> forall pattern0 equal_expression . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value_definition -> forall pattern0 equal_expression

State 292:
## Known stack suffix:
## value_definition
## LR(1) items:
value_definitions -> value_definition . [ TYPE LET IN EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production value_definitions -> value_definition

State 293:
## Known stack suffix:
## LET value_definitions
## LR(1) items:
binding -> LET value_definitions . [ TYPE LET IN EOF ]
value_definitions -> value_definitions . AND value_definition [ TYPE LET IN EOF AND ]
## Transitions:
-- On AND shift to state 69
## Reductions:
-- On TYPE LET IN EOF
--   reduce production binding -> LET value_definitions

State 294:
## Known stack suffix:
## bindings EOF
## LR(1) items:
program -> bindings EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production program -> bindings EOF

State 295:
## Known stack suffix:
## bindings binding
## LR(1) items:
bindings -> bindings binding . [ TYPE LET EOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production bindings -> bindings binding

