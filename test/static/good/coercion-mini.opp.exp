File "coercion-mini.mly", line 104, characters 28-32:
Warning: the token DATA is unused.
File "coercion-mini.mly", line 86, characters 28-34:
Warning: the token LANGLE is unused.
File "coercion-mini.mly", line 106, characters 28-35:
Warning: the token MUTABLE is unused.
File "coercion-mini.mly", line 87, characters 28-34:
Warning: the token RANGLE is unused.
File "coercion-mini.mly", line 103, characters 28-33:
Warning: the token SLASH is unused.
File "coercion-mini.mly", line 116, characters 28-32:
Warning: the token UNIT is unused.
File "coercion-mini.mly", line 77, characters 28-31:
Warning: the token VAL is unused.
%{

open Sig
open Positions
open AstPositions
open MiniAst

let unclosed b e l1 l2 =
  let l1 = lex_join (Parsing.rhs_start_pos l1) (Parsing.rhs_end_pos l1)
  and l2 = lex_join (Parsing.rhs_start_pos l2) (Parsing.rhs_end_pos l2)
  in
    raise (ParsingExceptions.Unclosed (b, e, l1, l2))


let match_unit pos =
  PData (pos, [], "_Unit", [])

let app e1 e2 =
  EApp (joine e1 e2, e1, e2)

let infix (x,y) e1 e2 =
  app (app (EVar (x,y)) e1) e2

let seq e1 e2 =
  let pos = joine e1 e2 in
    EBinding (pos, BindValue (pos, [ pos, [],
				     match_unit (position e1), e1 ]), e2)

let fold_pair f ts =
  match ts with
    | a :: b :: q -> List.fold_left f (f a b) q
    | _ -> assert false

let tuple2 pos t1 t2 =
  EDCon (pos, "_Tuple", [ t1; t2 ])

let tuple pos =
  fold_pair (tuple2 pos)

let arrow_type pos t1 t2 =
  TypApp (pos, TypVar (pos, "->"), [ t1; t2 ])

let tuple_type2 pos t1 t2 =
  TypApp (pos, TypVar (pos, "*"), [ t1; t2 ])

let tuple_type pos =
  fold_pair (tuple_type2 pos)

let ref_type pos t =
  TypApp (pos, TypVar (pos, "ref"), [ t ])

let tuple_pat2 pos t1 t2 =
  PData (pos, [], "_Tuple", [ t1 ; t2 ])

let tuple_pat pos =
  fold_pair (tuple_pat2 pos)

let assign pos e1 e2 =
  EApp (pos, EApp (pos, EVar (pos, "_assign"), e1), e2)

let deref pos e =
  EApp (pos, EVar (pos, "_deref"), e)

let mkref pos e =
  EApp (pos, EVar (pos, "_ref"), e)

%}
%start program
%token <Positions.position> AND
%token <Positions.position> ANDC
%token <Positions.position> ARROW
%token <Positions.position> AS
%token <Positions.position> ASSERT_FALSE
%token <Positions.position> ASSIGN
%token <Positions.position> BACKSLASH
%token <Positions.position> BANG
%token <Positions.position> BAR
%token <Positions.position * char> CHAR
%token <Positions.position> COERCE
%token <Positions.position> COLON
%token <Positions.position> COMMA
%token <Positions.position> DARROW
%token <Positions.position> DATA
%token <Positions.position> DOT
%token <Positions.position> END
%token <Positions.position> EOF
%token <Positions.position> EQUAL
%token <Positions.position> EXISTS
%token <Positions.position> FORALL
%token <Positions.position> IN
%token <Positions.position * string> INFIXOP0
%token <Positions.position * string> INFIXOP1
%token <Positions.position * string> INFIXOP2
%token <Positions.position * string> INFIXOP3
%token <Positions.position * string> INFIXOP4
%token <Positions.position * int> INTEGER
%token <Positions.position> LANGLE
%token <Positions.position> LBRACE
%token <Positions.position> LBRACKET
%token <Positions.position> LEFTARROW
%token <Positions.position> LET
%token <Positions.position * string> LID
%token <Positions.position * string> LONGID
%token <Positions.position> LPAREN
%token <Positions.position> MATCH
%token <Positions.position> MUTABLE
%token <Positions.position> RANGLE
%token <Positions.position> RBRACE
%token <Positions.position> RBRACKET
%token <Positions.position> REC
%token <Positions.position> REF
%token <Positions.position> RPAREN
%token <Positions.position> SEMI
%token <Positions.position> SLASH
%token <Positions.position> STAR
%token <Positions.position> TYPE
%token <Positions.position * string> UID
%token <Positions.position> UNIT
%token <Positions.position> VAL
%token <Positions.position> WILD
%token <Positions.position> WITH
%left EQUAL INFIXOP0
%right INFIXOP1
%left INFIXOP2
%left INFIXOP3
%right INFIXOP4
%type <MiniAst.binding list> program
%%

program:
  _1 = bindings _2 = EOF
    {                                                    ( List.rev _1 )}

forall:
  
    {                                                    ( [] )}
| _1 = FORALL _2 = quantifiers _3 = DOT
    {                                                    ( _2 )}

quantifiers:
  _1 = quantifier
    {                                                    ( [ _1 ] )}
| _1 = quantifier _2 = quantifiers
    {                                                    ( _1 :: _2 )}

quantifier:
  _1 = LID
    {                                                    ( _1 )}

attributes:
  _1 = typ
    {               ( [], _1 )}
| _1 = attribute _2 = SEMI _3 = attributes
    {                                  ( _1 :: (fst _3), snd _3 )}

attribute:
  _1 = LID _2 = COLON _3 = typ
    {                        ( snd _1, _3 )}

typ:
  _1 = type2
    {                                                    ( _1 )}

type2:
  _1 = type10 _2 = ARROW _3 = type2
    {  ( arrow_type (tjoin _1 _3) _1 _3  )}
| _1 = type10
    {                                                     ( _1 )}

type10:
  _1 = star_types
    {( match _1 with
    | [] -> assert false
    | [ a ] -> a
    | l -> tuple_type (tlposition _1) l
)}

star_types:
  _1 = type1 _2 = STAR _3 = star_types
    {                                                    ( _1 :: _3 )}
| _1 = type1
    {                 ( [ _1 ] )}

type1:
  _1 = type0
    {        ( _1 )}
| _1 = BACKSLASH _2 = type0
    {                         ( TypRowUniform (_1, _2) )}

type0:
  _1 = type00s
    {  (
    match _1 with
	[] -> assert false
      | [ t ] -> t
      | t :: q ->
	  TypApp (join (tposition t)
		    (tlposition q),
		    t,
		    q)
  )}
| _1 = REF _2 = type0
    {            ( ref_type _1 _2 )}

type00:
  _1 = LID
    {                                                    ( TypVar (fst _1, snd _1) )}
| _1 = LBRACE _2 = attributes _3 = RBRACE
    {      ( let pos = join _1 _3 in
	TypApp (pos, TypVar (pos, "pi"), [ TypRowCons
					     (join _1 _3,
					      fst _2,
					      snd _2) ])
      )}
| _1 = LPAREN _2 = typ _3 = RPAREN
    {                                                    ( _2 )}
| _1 = LPAREN _2 = typ _3 = COMMA _4 = types _5 = RPAREN
    {                                                    ( tuple_type (join _1 _5)
							(_2 :: _4) )}

type00s:
  _1 = type00
    {                      ( [ _1 ] )}
| _1 = type00 _2 = type00s
    {                       ( _1 :: _2 )}

types:
  _1 = typ
    {                                                    ( [ _1 ] )}
| _1 = typ _2 = COMMA _3 = types
    {                                                    ( _1 :: _3 )}

expression:
  _1 = expression400
    {                                                    ( _1 )}

expression400:
  _1 = BACKSLASH _2 = pattern _3 = DOT _4 = expression400
    {(
  ELambda (join _1 (position _4), _2, _4)
)}
| _1 = FORALL _2 = quantifiers _3 = DOT _4 = expression400
    {(
  EForall (join _1 (position _4), snd (List.split _2), _4)
)}
| _1 = EXISTS _2 = quantifiers _3 = DOT _4 = expression400
    {(
  EExists (join _1 (position _4), snd (List.split _2), _4)
)}
| _1 = MATCH _2 = expression _3 = WITH _4 = clauses _5 = END
    {(
  EMatch (join _1 _5, _2, List.rev _4)
)}
| _1 = binding _2 = IN _3 = expression400
    {(
  EBinding (join (bposition _1) (position _3), _1, _3)
)}
| _1 = expression300 _2 = SEMI _3 = expression400
    {                                                    ( seq _1 _3 )}
| _1 = expression300
    {                                                    ( _1 )}

clauses:
  _1 = clause
    {                 ( [ _1 ] )}
| _1 = clauses _2 = BAR _3 = clause
    {                            ( _3 :: _1 )}

clause:
  _1 = pattern _2 = DARROW _3 = expression
    {                                  ( (join
							 (pposition _1)
							 (position _3),
						       _1, _3) )}

expression300:
  _1 = expression50 _2 = DOT _3 = LID _4 = LEFTARROW _5 = expression100
    {  (
    ERecordUpdate (joine _1 _5, _1, snd _3, _5)
  )}
| _1 = expression200
    {                                                    ( _1 )}

expression200:
  _1 = expression200 _2 = INFIXOP0 _3 = expression200
    {                                                    ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP1 _3 = expression200
    {                                                    ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP2 _3 = expression200
    {                                                    ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP3 _3 = expression200
    {                                                    ( infix _2 _1 _3 )}
| _1 = expression200 _2 = INFIXOP4 _3 = expression200
    {                                                    ( infix _2 _1 _3 )}
| _1 = expression200 _2 = EQUAL _3 = expression200
    {                                                    ( infix (_2, "=") _1 _3 )}
| _1 = expression100
    {                                                    ( _1 )}

expression100:
  _1 = expression100 _2 = expression0
    {  (
    match _1 with
	EDCon (p, k, args) -> EDCon (p, k, args @ [ _2 ])
      | _ -> EApp (joine _1 _2, _1, _2)
  )}
| _1 = expression50
    {                                                    ( _1 )}

expression50:
  _1 = expression50 _2 = DOT _3 = LID
    {  (
    ERecordAccess (join (position _1) (fst _3), _1, snd _3)
  )}
| _1 = expression10
    {                        ( _1 )}

expression10:
  _1 = expression0
    {                       ( _1 )}
| _1 = expression0 _2 = ASSIGN _3 = expression0
    {                                       ( assign (joine _1 _3)
							 _1 _3
						     )}
| _1 = BANG _2 = expression0
    {                           ( deref
							 (join _1
							    (position _2))
							 _2
						     )}
| _1 = REF _2 = expression0
    {                          ( mkref
							 (join _1
							    (position _2))
							 _2
						     )}

expression0:
  _1 = LID
    {                                                     ( EVar (fst _1, snd _1) )}
| _1 = UID
    {(
  EDCon (fst _1, snd _1, [])
)}
| _1 = LONGID
    {                                                     ( EVar (fst _1, snd _1) )}
| _1 = ASSERT_FALSE
    {                               ( EAssertFalse (_1) )}
| _1 = INTEGER
    {                                                     ( EPrimApp
							 (fst _1,
							  PIntegerConstant
							    (snd _1),
							  []) )}
| _1 = CHAR
    {                                                     ( EPrimApp
							 (fst _1,
							  PCharConstant
							    (snd _1),
							  []) )}
| _1 = LBRACE _2 = record_bindings _3 = RBRACE
    {                                                     ( ERecordExtend (
							 join _1 _3,
							 List.rev _2,
							 ERecordEmpty undefined_position)
						     )}
| _1 = LPAREN _2 = RPAREN
    {                                                     ( EPrimApp (
							 join _1 _2,
							 PUnit,
							 [])
						     )}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {                                                     ( _2 )}
| _1 = LPAREN _2 = expression _3 = error
    {      (
	unclosed "(" ")" 1 3
      )}
| _1 = LPAREN _2 = expression _3 = COLON _4 = typ _5 = COERCE _6 = typ _7 = RPAREN
    {(
  ECoerce (join _1 (tposition _6), _2, _4, _6)
)}
| _1 = LPAREN _2 = expression _3 = COLON _4 = typ _5 = RPAREN
    {    ( ETypeConstraint (join _1 _5,
		       _2, ([], _4)) )}
| _1 = LPAREN _2 = expression _3 = COMMA _4 = expressions _5 = RPAREN
    {                                                     ( tuple (join _1 _5) (_2 :: _4) )}

expressions:
  _1 = expression
    {                                                     ( [ _1 ] )}
| _1 = expression _2 = COMMA _3 = expressions
    {                                                     ( _1 :: _3 )}

record_bindings:
  
    {                ( [] )}
| _1 = record_binding
    {                 ( [ _1 ] )}
| _1 = record_binding _2 = AND _3 = record_bindings
    {                                     ( _1 :: _3 )}

record_binding:
  _1 = LID _2 = EQUAL _3 = expression
    {                       ( (snd _1, _3) )}

bindings:
  
    {                                                     ( [] )}
| _1 = bindings _2 = binding
    {                                                     ( _2 :: _1 )}

binding:
  _1 = LET _2 = value_definitions
    {  (
    BindValue (join _1 (vlposition _2), _2)
  )}
| _1 = LET _2 = REC _3 = value_definitions
    {                                                     ( BindRecValue
							 (join _1 (vlposition _3),
							  _3) )}
| _1 = TYPE _2 = type_definitions
    {                                ( TypeDec (join _1 (tdlposition _2),
								_2) )}

type_definitions:
  _1 = type_definition
    {                         ( [ _1 ] )}
| _1 = type_definitions _2 = AND _3 = type_definition
    {                                             ( _3 :: _1 )}

type_definition:
  _1 = LID _2 = COLON _3 = kind _4 = EQUAL _5 = algebraic_datatype_definitions
    {  ( (fst _1, snd _3, snd _1, DAlgebraic _5) )}

kind:
  _1 = STAR
    {           ( (_1, KStar) )}
| _1 = STAR _2 = ARROW _3 = kind
    {                  ( (join _1 (fst _3), KArrow (KStar, snd _3)) )}

algebraic_datatype_definitions:
  _1 = algebraic_datatype_definition
    {                                       ( [ _1 ] )}
| _1 = algebraic_datatype_definition _2 = BAR _3 = algebraic_datatype_definitions
    {                                                                   ( _1 :: _3 )}

algebraic_datatype_definition:
  _1 = UID _2 = COLON _3 = scheme
    {                            ( (fst _1, snd _1,
							 snd (List.split
								(fst _3)),
							 snd _3) )}

scheme:
  _1 = forall _2 = typ
    {                   ( (_1, _2) )}

value_definitions:
  _1 = value_definition
    {                                                      ( [ _1 ] )}
| _1 = value_definitions _2 = AND _3 = value_definition
    {                                                      ( _3 :: _1 )}

value_definition:
  _1 = forall _2 = pattern0 _3 = equal_expression
    {                                                      ( (position _3,
							 snd (List.split _1),
							 _2, _3) )}

equal_expression:
  _1 = EQUAL _2 = expression
    {                                                      ( _2 )}
| _1 = COLON _2 = typ _3 = EQUAL _4 = expression
    {      ( ETypeConstraint
	  (join _1 (position _4), _4, ([], _2)) )}
| _1 = pattern0 _2 = equal_expression
    {                                                      ( ELambda
							  (join
							     (pposition _1)
							     (position _2), _1, _2) )}

pattern:
  _1 = pattern3
    {                                                       ( _1 )}

pattern3:
  _1 = pattern2
    {                                                       ( _1 )}
| _1 = pattern3 _2 = COLON _3 = typ
    {      ( PTypeConstraint
	  (join
	     (pposition _1)
	     (tposition _3), _1, ([], _3))
      )}

pattern2:
  _1 = pattern1
    {                                                       ( _1 )}
| _1 = LID _2 = AS _3 = pattern2
    {                                                       ( PAlias
							   (join (fst _1) (pposition _3),
							    snd _1, _3) )}

pattern1:
  _1 = pattern10
    {                       ( _1 )}
| _1 = pattern10 _2 = BAR _3 = pattern1
    {                                   ( POr (pjoin _1 _3, [_1 ; _3]) )}
| _1 = pattern10 _2 = ANDC _3 = pattern1
    {                                   ( PAnd (pjoin _1 _3,[_1; _3]) )}

pattern10:
  _1 = pattern0
    {           ( _1 )}
| _1 = UID _2 = pattern1s
    {      ( PData
	  (join (fst _1) (plposition _2),
	   [],
	   snd _1,
	   _2)
      )}
| _1 = UID _2 = localvars _3 = pattern1s
    {      ( PData
	  (join (fst _1) (plposition _3),
	   _2,
	   snd _1,
	   _3)
      )}

pattern0:
  _1 = LID
    {                                                        ( PVar (fst _1, snd _1) )}
| _1 = UID
    {      ( PData (fst _1, [], snd _1, []) )}
| _1 = UID _2 = localvars
    {                ( PData (fst _1, _2, snd _1, []) )}
| _1 = WILD
    {                                                        ( PWildcard _1 )}
| _1 = INTEGER
    {                                                 ( let pos = fst _1
						   and value = snd _1 in
						     PPrimitive
						     (pos,
						      PIntegerConstant value) )}
| _1 = CHAR
    {                                              ( let pos = fst _1
						   and value = snd _1 in
						     PPrimitive
						     (pos,
						      PCharConstant value)
						 )}
| _1 = LPAREN _2 = RPAREN
    {                                                        ( match_unit _1 )}
| _1 = LPAREN _2 = pattern _3 = RPAREN
    {                                                        ( _2 )}
| _1 = LPAREN _2 = pattern _3 = COMMA _4 = patterns _5 = RPAREN
    {( tuple_pat (join _1 _5)
    (_2 :: _4) )}

localvars:
  _1 = LBRACKET _2 = quantifiers _3 = RBRACKET
    {                               ( snd (List.split _2) )}

patterns:
  _1 = pattern
    {                                                        ( [ _1 ] )}
| _1 = pattern _2 = COMMA _3 = patterns
    {                                                        ( _1 :: _3 )}

pattern1s:
  _1 = pattern0
    {                ( [ _1 ] )}
| _1 = pattern0 _2 = pattern1s
    {                         ( _1 :: _2 )}

%%
