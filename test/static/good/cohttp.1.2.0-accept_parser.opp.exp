%{
  open Accept_types

  type param = Q of int | Kv of (string * pv)

  let rec get_q = function
    | (Q q)::_ -> q
    | _::r -> get_q r
    | [] -> 1000

  let get_rest pl = List.fold_right
    (function Kv p -> fun l -> p::l | Q _ -> fun l -> l) pl []
%}
%start charsets
%start encodings
%start languages
%start media_ranges
%token COMMA
%token EOI
%token EQUAL
%token <string> QS
%token SEMI
%token SLASH
%token STAR
%token <string> TOK
%type <Accept_types.charset Accept_types.qlist> charsets
%type <Accept_types.encoding Accept_types.qlist> encodings
%type <Accept_types.language Accept_types.qlist> languages
%type <(Accept_types.media_range * Accept_types.p list) Accept_types.qlist> media_ranges
%%

param:
  _1 = SEMI _2 = TOK _3 = EQUAL _4 = QS
    {                    ( Kv (_2, S _4) )}
| _1 = SEMI _2 = TOK _3 = EQUAL _4 = TOK
    {                     (
  if _2="q" then try Q (truncate (1000.*.(float_of_string _4)))
    with Failure _ -> raise Parsing.Parse_error
  else Kv (_2, T _4)
)}

params:
  _1 = param _2 = params
    {               ( _1::_2 )}
| 
    {  ( [] )}

media_range:
  _1 = STAR _2 = SLASH _3 = STAR _4 = params
    {                         (
  (get_q _4, (AnyMedia, get_rest _4))
)}
| _1 = TOK _2 = SLASH _3 = STAR _4 = params
    {                        (
  (get_q _4, (AnyMediaSubtype (String.lowercase_ascii _1), get_rest _4))
)}
| _1 = TOK _2 = SLASH _3 = TOK _4 = params
    {                       (
  (get_q _4, (MediaType (String.lowercase_ascii _1, String.lowercase_ascii _3), get_rest _4))
)}

media_ranges:
  _1 = media_range _2 = EOI
    {                  ( [_1] )}
| _1 = media_range _2 = COMMA _3 = media_ranges
    {                                 ( _1::_3 )}
| _1 = EOI
    {      ( [] )}

charset:
  _1 = TOK _2 = params
    {             ( (get_q _2, Charset (String.lowercase_ascii _1)) )}
| _1 = STAR _2 = params
    {              ( (get_q _2, AnyCharset) )}

charsets:
  _1 = charset _2 = EOI
    {              ( [_1] )}
| _1 = charset _2 = COMMA _3 = charsets
    {                         ( _1::_3 )}

encoding:
  _1 = TOK _2 = params
    {             (
  (get_q _2, match (String.lowercase_ascii _1) with
    | "gzip" -> Gzip
    | "compress" -> Compress
    | "deflate" -> Deflate
    | "identity" -> Identity
    | enc -> Encoding enc
  )
)}
| _1 = STAR _2 = params
    {              ( (get_q _2, AnyEncoding) )}

encodings:
  _1 = encoding _2 = EOI
    {               ( [_1] )}
| _1 = encoding _2 = COMMA _3 = encodings
    {                           ( _1::_3 )}
| _1 = EOI
    {      ( [] )}

language:
  _1 = TOK _2 = params
    {             (
  (get_q _2, Language (Stringext.split ~on:'-' (String.lowercase_ascii _1)))
)}
| _1 = STAR _2 = params
    {              ( (get_q _2, AnyLanguage) )}

languages:
  _1 = language _2 = EOI
    {               ( [_1] )}
| _1 = language _2 = COMMA _3 = languages
    {                           ( _1::_3 )}

%%


