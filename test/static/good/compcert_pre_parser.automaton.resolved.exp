State 0:
## Known stack suffix:
##
## LR(1) items:
translation_unit_file' -> . translation_unit_file [ # ]
## Transitions:
-- On translation_unit_file shift to state 1
-- On compcert_pre_parser_list(translation_item) shift to state 2
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(translation_item) ->

State 1:
## Known stack suffix:
## translation_unit_file
## LR(1) items:
translation_unit_file' -> translation_unit_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept translation_unit_file

State 2:
## Known stack suffix:
## compcert_pre_parser_list(translation_item)
## LR(1) items:
compcert_pre_parser_list(translation_item) -> compcert_pre_parser_list(translation_item) . translation_item [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
translation_unit_file -> compcert_pre_parser_list(translation_item) . EOF [ # ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TYPEDEF shift to state 8
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On SEMICOLON shift to state 397
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 16
-- On PRAGMA shift to state 398
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On EOF shift to state 399
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 400
-- On type_specifier_no_typedef_name shift to state 404
-- On type_qualifier_noattr shift to state 123
-- On translation_item shift to state 408
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 409
-- On function_specifier shift to state 126
-- On function_definition1 shift to state 424
-- On function_definition shift to state 574
-- On enum_specifier shift to state 85
-- On declaration_specifiers_typedef shift to state 575
-- On declaration_specifiers(declaration(external_declaration)) shift to state 578
-- On declaration(external_declaration) shift to state 601
-- On attribute_specifier shift to state 128
## Reductions:

State 3:
## Known stack suffix:
## VOLATILE
## LR(1) items:
type_qualifier_noattr -> VOLATILE . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK INT INLINE INC FLOAT EXTERN ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qualifier_noattr -> VOLATILE

State 4:
## Known stack suffix:
## VOID
## LR(1) items:
type_specifier_no_typedef_name -> VOID . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> VOID

State 5:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
type_specifier_no_typedef_name -> UNSIGNED . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> UNSIGNED

State 6:
## Known stack suffix:
## UNION
## LR(1) items:
struct_or_union -> UNION . [ PRE_NAME PACKED LBRACE ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_or_union -> UNION

State 7:
## Known stack suffix:
## UNDERSCORE_BOOL
## LR(1) items:
type_specifier_no_typedef_name -> UNDERSCORE_BOOL . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL

State 8:
## Known stack suffix:
## TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> TYPEDEF . compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> TYPEDEF . compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 9
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 9:
## Known stack suffix:
## TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) . typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) . type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 16
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 393
-- On type_specifier_no_typedef_name shift to state 395
-- On type_qualifier_noattr shift to state 111
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On enum_specifier shift to state 85
-- On attribute_specifier shift to state 114
## Reductions:

State 10:
## Known stack suffix:
## STRUCT
## LR(1) items:
struct_or_union -> STRUCT . [ PRE_NAME PACKED LBRACE ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_or_union -> STRUCT

State 11:
## Known stack suffix:
## STATIC
## LR(1) items:
storage_class_specifier_no_typedef -> STATIC . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class_specifier_no_typedef -> STATIC

State 12:
## Known stack suffix:
## SIGNED
## LR(1) items:
type_specifier_no_typedef_name -> SIGNED . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> SIGNED

State 13:
## Known stack suffix:
## SHORT
## LR(1) items:
type_specifier_no_typedef_name -> SHORT . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> SHORT

State 14:
## Known stack suffix:
## RESTRICT
## LR(1) items:
type_qualifier_noattr -> RESTRICT . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK INT INLINE INC FLOAT EXTERN ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qualifier_noattr -> RESTRICT

State 15:
## Known stack suffix:
## REGISTER
## LR(1) items:
storage_class_specifier_no_typedef -> REGISTER . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class_specifier_no_typedef -> REGISTER

State 16:
## Known stack suffix:
## PRE_NAME
## LR(1) items:
typedef_name -> PRE_NAME . TYPEDEF_NAME [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA COLON AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On TYPEDEF_NAME shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## PRE_NAME TYPEDEF_NAME
## LR(1) items:
typedef_name -> PRE_NAME TYPEDEF_NAME . [ XOR_ASSIGN VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF SUB_ASSIGN STRUCT STATIC STAR SLASH SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC HAT GT GEQ FLOAT EXTERN EQEQ EQ ENUM DOUBLE DOT DIV_ASSIGN DEC CONST COMMA COLON CHAR BARBAR BAR AUTO ATTRIBUTE AND_ASSIGN ANDAND AND ALIGNAS ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_name -> PRE_NAME TYPEDEF_NAME

State 18:
## Known stack suffix:
## PACKED
## LR(1) items:
attribute_specifier -> PACKED . LPAREN argument_expression_list RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## PACKED LPAREN
## LR(1) items:
attribute_specifier -> PACKED LPAREN . argument_expression_list RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 241
-- On argument_expression_list shift to state 391
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 20:
## Known stack suffix:
## TILDE
## LR(1) items:
unary_operator -> TILDE . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> TILDE

State 21:
## Known stack suffix:
## STRING_LITERAL
## LR(1) items:
string_literals_list -> STRING_LITERAL . [ XOR_ASSIGN SUB_ASSIGN STRING_LITERAL STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_literals_list -> STRING_LITERAL

State 22:
## Known stack suffix:
## STAR
## LR(1) items:
unary_operator -> STAR . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> STAR

State 23:
## Known stack suffix:
## SIZEOF
## LR(1) items:
unary_expression -> SIZEOF . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> SIZEOF . LPAREN type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 28
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 390
-- On string_literals_list shift to state 166
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
## Reductions:

State 24:
## Known stack suffix:
## PRE_NAME
## LR(1) items:
primary_expression -> PRE_NAME . VAR_NAME [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## PRE_NAME VAR_NAME
## LR(1) items:
primary_expression -> PRE_NAME VAR_NAME . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> PRE_NAME VAR_NAME

State 26:
## Known stack suffix:
## PLUS
## LR(1) items:
unary_operator -> PLUS . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> PLUS

State 27:
## Known stack suffix:
## MINUS
## LR(1) items:
unary_operator -> MINUS . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> MINUS

State 28:
## Known stack suffix:
## SIZEOF LPAREN
## LR(1) items:
postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> SIZEOF LPAREN . type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TILDE shift to state 20
-- On STRUCT shift to state 10
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 29
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INC shift to state 33
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On CHAR shift to state 55
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 56
-- On type_specifier_no_typedef_name shift to state 66
-- On type_qualifier_list shift to state 299
-- On type_name shift to state 388
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On string_literals_list shift to state 166
-- On specifier_qualifier_list(type_name) shift to state 306
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 382
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On enum_specifier shift to state 85
-- On conditional_expression shift to state 231
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 298
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 29:
## Known stack suffix:
## PRE_NAME
## LR(1) items:
primary_expression -> PRE_NAME . VAR_NAME [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
typedef_name -> PRE_NAME . TYPEDEF_NAME [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 25
-- On TYPEDEF_NAME shift to state 17
## Reductions:

State 30:
## Known stack suffix:
## LPAREN
## LR(1) items:
cast_expression -> LPAREN . type_name RPAREN cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TILDE shift to state 20
-- On STRUCT shift to state 10
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 29
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INC shift to state 33
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On CHAR shift to state 55
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 56
-- On type_specifier_no_typedef_name shift to state 66
-- On type_qualifier_list shift to state 299
-- On type_name shift to state 385
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On string_literals_list shift to state 166
-- On specifier_qualifier_list(type_name) shift to state 306
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 382
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On enum_specifier shift to state 85
-- On conditional_expression shift to state 231
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 298
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 31:
## Known stack suffix:
## LONG
## LR(1) items:
type_specifier_no_typedef_name -> LONG . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> LONG

State 32:
## Known stack suffix:
## INT
## LR(1) items:
type_specifier_no_typedef_name -> INT . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> INT

State 33:
## Known stack suffix:
## INC
## LR(1) items:
unary_expression -> INC . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 34
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 384
-- On string_literals_list shift to state 166
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
## Reductions:

State 34:
## Known stack suffix:
## LPAREN
## LR(1) items:
postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TILDE shift to state 20
-- On STRUCT shift to state 10
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 29
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INC shift to state 33
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On CHAR shift to state 55
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 56
-- On type_specifier_no_typedef_name shift to state 66
-- On type_qualifier_list shift to state 299
-- On type_name shift to state 363
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On string_literals_list shift to state 166
-- On specifier_qualifier_list(type_name) shift to state 306
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 382
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On enum_specifier shift to state 85
-- On conditional_expression shift to state 231
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 298
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 35:
## Known stack suffix:
## FLOAT
## LR(1) items:
type_specifier_no_typedef_name -> FLOAT . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> FLOAT

State 36:
## Known stack suffix:
## ENUM
## LR(1) items:
enum_specifier -> ENUM . attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE enumerator_list compcert_pre_parser_option(COMMA) RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
enum_specifier -> ENUM . attribute_specifier_list general_identifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On PACKED shift to state 18
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On attribute_specifier_list shift to state 348
-- On attribute_specifier shift to state 155
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production attribute_specifier_list ->

State 37:
## Known stack suffix:
## ATTRIBUTE
## LR(1) items:
attribute_specifier -> ATTRIBUTE . LPAREN LPAREN gcc_attribute_list RPAREN RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## ATTRIBUTE LPAREN
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN . LPAREN gcc_attribute_list RPAREN RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN LPAREN . gcc_attribute_list RPAREN RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On PACKED shift to state 42
-- On CONST shift to state 43
-- On typedef_name shift to state 44
-- On general_identifier shift to state 45
-- On gcc_attribute_word shift to state 46
-- On gcc_attribute_list shift to state 342
-- On gcc_attribute shift to state 347
## Reductions:
-- On RPAREN COMMA
--   reduce production gcc_attribute ->

State 40:
## Known stack suffix:
## PRE_NAME
## LR(1) items:
general_identifier -> PRE_NAME . VAR_NAME [ XOR_ASSIGN VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF SUB_ASSIGN STRUCT STATIC STAR SLASH SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC HAT GT GEQ FLOAT EXTERN EQEQ EQ ENUM DOUBLE DOT DIV_ASSIGN DEC CONST COMMA COLON CHAR BARBAR BAR AUTO ATTRIBUTE AND_ASSIGN ANDAND AND ALIGNAS ADD_ASSIGN ]
typedef_name -> PRE_NAME . TYPEDEF_NAME [ XOR_ASSIGN VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF SUB_ASSIGN STRUCT STATIC STAR SLASH SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC HAT GT GEQ FLOAT EXTERN EQEQ EQ ENUM DOUBLE DOT DIV_ASSIGN DEC CONST COMMA COLON CHAR BARBAR BAR AUTO ATTRIBUTE AND_ASSIGN ANDAND AND ALIGNAS ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 41
-- On TYPEDEF_NAME shift to state 17
## Reductions:

State 41:
## Known stack suffix:
## PRE_NAME VAR_NAME
## LR(1) items:
general_identifier -> PRE_NAME VAR_NAME . [ XOR_ASSIGN VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF SUB_ASSIGN STRUCT STATIC STAR SLASH SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC HAT GT GEQ FLOAT EXTERN EQEQ EQ ENUM DOUBLE DOT DIV_ASSIGN DEC CONST COMMA COLON CHAR BARBAR BAR AUTO ATTRIBUTE AND_ASSIGN ANDAND AND ALIGNAS ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_identifier -> PRE_NAME VAR_NAME

State 42:
## Known stack suffix:
## PACKED
## LR(1) items:
gcc_attribute_word -> PACKED . [ RPAREN LPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production gcc_attribute_word -> PACKED

State 43:
## Known stack suffix:
## CONST
## LR(1) items:
gcc_attribute_word -> CONST . [ RPAREN LPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production gcc_attribute_word -> CONST

State 44:
## Known stack suffix:
## typedef_name
## LR(1) items:
general_identifier -> typedef_name . [ XOR_ASSIGN VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF SUB_ASSIGN STRUCT STATIC STAR SLASH SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC HAT GT GEQ FLOAT EXTERN EQEQ EQ ENUM DOUBLE DOT DIV_ASSIGN DEC CONST COMMA COLON CHAR BARBAR BAR AUTO ATTRIBUTE AND_ASSIGN ANDAND AND ALIGNAS ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production general_identifier -> typedef_name

State 45:
## Known stack suffix:
## general_identifier
## LR(1) items:
gcc_attribute_word -> general_identifier . [ RPAREN LPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production gcc_attribute_word -> general_identifier

State 46:
## Known stack suffix:
## gcc_attribute_word
## LR(1) items:
gcc_attribute -> gcc_attribute_word . [ RPAREN COMMA ]
gcc_attribute -> gcc_attribute_word . LPAREN compcert_pre_parser_option(argument_expression_list) RPAREN [ RPAREN COMMA ]
gcc_attribute -> gcc_attribute_word . LPAREN typedef_name COMMA argument_expression_list RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 47
## Reductions:
-- On RPAREN COMMA
--   reduce production gcc_attribute -> gcc_attribute_word

State 47:
## Known stack suffix:
## gcc_attribute_word LPAREN
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN . compcert_pre_parser_option(argument_expression_list) RPAREN [ RPAREN COMMA ]
gcc_attribute -> gcc_attribute_word LPAREN . typedef_name COMMA argument_expression_list RPAREN [ RPAREN COMMA ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 29
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 336
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compcert_pre_parser_option(argument_expression_list) shift to state 340
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 241
-- On argument_expression_list shift to state 242
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On RPAREN
--   reduce production compcert_pre_parser_option(argument_expression_list) ->

State 48:
## Known stack suffix:
## DEC
## LR(1) items:
unary_expression -> DEC . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 34
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 335
-- On string_literals_list shift to state 166
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
## Reductions:

State 49:
## Known stack suffix:
## CONSTANT
## LR(1) items:
primary_expression -> CONSTANT . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> CONSTANT

State 50:
## Known stack suffix:
## BUILTIN_VA_ARG
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG . LPAREN assignment_expression COMMA type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On LPAREN shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN . assignment_expression COMMA type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 331
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 52:
## Known stack suffix:
## BUILTIN_OFFSETOF
## LR(1) items:
postfix_expression -> BUILTIN_OFFSETOF . LPAREN type_name COMMA general_identifier RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> BUILTIN_OFFSETOF . LPAREN type_name COMMA general_identifier designator_list RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On LPAREN shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## BUILTIN_OFFSETOF LPAREN
## LR(1) items:
postfix_expression -> BUILTIN_OFFSETOF LPAREN . type_name COMMA general_identifier RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> BUILTIN_OFFSETOF LPAREN . type_name COMMA general_identifier designator_list RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 56
-- On type_specifier_no_typedef_name shift to state 66
-- On type_qualifier_list shift to state 299
-- On type_name shift to state 318
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On specifier_qualifier_list(type_name) shift to state 306
-- On enum_specifier shift to state 85
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 298
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 54:
## Known stack suffix:
## DOUBLE
## LR(1) items:
type_specifier_no_typedef_name -> DOUBLE . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> DOUBLE

State 55:
## Known stack suffix:
## CHAR
## LR(1) items:
type_specifier_no_typedef_name -> CHAR . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> CHAR

State 56:
## Known stack suffix:
## typedef_name
## LR(1) items:
specifier_qualifier_list(type_name) -> typedef_name . compcert_pre_parser_option(type_qualifier_list) [ STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 58
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 57:
## Known stack suffix:
## type_qualifier_list
## LR(1) items:
compcert_pre_parser_option(type_qualifier_list) -> type_qualifier_list . [ VOLATILE TILDE STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN RESTRICT RBRACK PRE_NAME PLUS PACKED MINUS LPAREN LBRACK INC DEC CONSTANT CONST COMMA COLON BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) -> type_qualifier_list

State 58:
## Known stack suffix:
## typedef_name compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
specifier_qualifier_list(type_name) -> typedef_name compcert_pre_parser_option(type_qualifier_list) . [ STAR RPAREN LPAREN LBRACK COMMA ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST COMMA ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On CONST shift to state 59
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 80
-- On attribute_specifier shift to state 81
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production specifier_qualifier_list(type_name) -> typedef_name compcert_pre_parser_option(type_qualifier_list)

State 59:
## Known stack suffix:
## CONST
## LR(1) items:
type_qualifier_noattr -> CONST . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK INT INLINE INC FLOAT EXTERN ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qualifier_noattr -> CONST

State 60:
## Known stack suffix:
## ALIGNAS
## LR(1) items:
attribute_specifier -> ALIGNAS . LPAREN argument_expression_list RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
attribute_specifier -> ALIGNAS . LPAREN type_name RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## ALIGNAS LPAREN
## LR(1) items:
attribute_specifier -> ALIGNAS LPAREN . argument_expression_list RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
attribute_specifier -> ALIGNAS LPAREN . type_name RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TILDE shift to state 20
-- On STRUCT shift to state 10
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 29
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INC shift to state 33
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On CHAR shift to state 55
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 56
-- On type_specifier_no_typedef_name shift to state 66
-- On type_qualifier_list shift to state 299
-- On type_name shift to state 314
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On string_literals_list shift to state 166
-- On specifier_qualifier_list(type_name) shift to state 306
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On enum_specifier shift to state 85
-- On conditional_expression shift to state 231
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 298
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 241
-- On argument_expression_list shift to state 316
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 62:
## Known stack suffix:
## BANG
## LR(1) items:
unary_operator -> BANG . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> BANG

State 63:
## Known stack suffix:
## AND
## LR(1) items:
unary_operator -> AND . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_operator -> AND

State 64:
## Known stack suffix:
## ALIGNOF
## LR(1) items:
unary_expression -> ALIGNOF . LPAREN type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On LPAREN shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## ALIGNOF LPAREN
## LR(1) items:
unary_expression -> ALIGNOF LPAREN . type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 56
-- On type_specifier_no_typedef_name shift to state 66
-- On type_qualifier_list shift to state 299
-- On type_name shift to state 304
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On specifier_qualifier_list(type_name) shift to state 306
-- On enum_specifier shift to state 85
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 298
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 66:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
specifier_qualifier_list(type_name) -> type_specifier_no_typedef_name . compcert_pre_parser_list(specifier_qualifier_no_typedef_name) [ STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On compcert_pre_parser_list(specifier_qualifier_no_typedef_name) shift to state 67
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(specifier_qualifier_no_typedef_name) ->

State 67:
## Known stack suffix:
## type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(specifier_qualifier_no_typedef_name) -> compcert_pre_parser_list(specifier_qualifier_no_typedef_name) . specifier_qualifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STAR SIGNED SHORT RPAREN RESTRICT PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST COMMA CHAR ATTRIBUTE ALIGNAS ]
specifier_qualifier_list(type_name) -> type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name) . [ STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 68
-- On type_qualifier_noattr shift to state 69
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On specifier_qualifier_no_typedef_name shift to state 84
-- On enum_specifier shift to state 85
-- On attribute_specifier shift to state 86
## Reductions:
-- On XOR_ASSIGN WHILE VAR_NAME TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRING_LITERAL STATIC STAR SLASH SIZEOF SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INLINE INC IF HAT GT GOTO GEQ FOR EXTERN EQEQ EQ EOF ELSE ELLIPSIS DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production specifier_qualifier_list(type_name) -> type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name)

State 68:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT PRE_NAME PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST COMMA COLON CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name

State 69:
## Known stack suffix:
## type_qualifier_noattr
## LR(1) items:
specifier_qualifier_no_typedef_name -> type_qualifier_noattr . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT PRE_NAME PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST COMMA COLON CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production specifier_qualifier_no_typedef_name -> type_qualifier_noattr

State 70:
## Known stack suffix:
## struct_or_union_specifier
## LR(1) items:
type_specifier_no_typedef_name -> struct_or_union_specifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> struct_or_union_specifier

State 71:
## Known stack suffix:
## struct_or_union
## LR(1) items:
struct_or_union_specifier -> struct_or_union . attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE struct_declaration_list RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
struct_or_union_specifier -> struct_or_union . attribute_specifier_list general_identifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On PACKED shift to state 18
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On attribute_specifier_list shift to state 72
-- On attribute_specifier shift to state 155
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production attribute_specifier_list ->

State 72:
## Known stack suffix:
## struct_or_union attribute_specifier_list
## LR(1) items:
struct_or_union_specifier -> struct_or_union attribute_specifier_list . compcert_pre_parser_option(other_identifier) LBRACE struct_declaration_list RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
struct_or_union_specifier -> struct_or_union attribute_specifier_list . general_identifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 73
-- On compcert_pre_parser_option(other_identifier) shift to state 74
## Reductions:
-- On LBRACE
--   reduce production compcert_pre_parser_option(other_identifier) ->

State 73:
## Known stack suffix:
## struct_or_union attribute_specifier_list general_identifier
## LR(1) items:
compcert_pre_parser_option(other_identifier) -> general_identifier . [ LBRACE ]
struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On LBRACE
--   reduce production compcert_pre_parser_option(other_identifier) -> general_identifier
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier

State 74:
## Known stack suffix:
## struct_or_union attribute_specifier_list compcert_pre_parser_option(other_identifier)
## LR(1) items:
struct_or_union_specifier -> struct_or_union attribute_specifier_list compcert_pre_parser_option(other_identifier) . LBRACE struct_declaration_list RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LBRACE shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## struct_or_union attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE . struct_declaration_list RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On struct_declaration_list shift to state 76
## Default reduction:
-- After reading the next token, reduce production struct_declaration_list ->

State 76:
## Known stack suffix:
## struct_or_union attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE struct_declaration_list
## LR(1) items:
struct_declaration_list -> struct_declaration_list . struct_declaration [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT RESTRICT RBRACE PRE_NAME PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
struct_or_union_specifier -> struct_or_union attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE struct_declaration_list . RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RBRACE shift to state 77
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 78
-- On type_specifier_no_typedef_name shift to state 82
-- On type_qualifier_list shift to state 87
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On struct_declaration shift to state 92
-- On specifier_qualifier_list(struct_declaration) shift to state 93
-- On enum_specifier shift to state 85
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 298
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 77:
## Known stack suffix:
## struct_or_union attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE struct_declaration_list RBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE struct_declaration_list RBRACE . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE struct_declaration_list RBRACE

State 78:
## Known stack suffix:
## typedef_name
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> typedef_name . compcert_pre_parser_option(type_qualifier_list) [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 79
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 79:
## Known stack suffix:
## typedef_name compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> typedef_name compcert_pre_parser_option(type_qualifier_list) . [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE STAR SEMICOLON RESTRICT PRE_NAME PACKED LPAREN CONST COLON ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE STAR SEMICOLON RESTRICT PRE_NAME PACKED LPAREN CONST COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On CONST shift to state 59
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 80
-- On attribute_specifier shift to state 81
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production specifier_qualifier_list(struct_declaration) -> typedef_name compcert_pre_parser_option(type_qualifier_list)

State 80:
## Known stack suffix:
## compcert_pre_parser_option(type_qualifier_list) type_qualifier_noattr
## LR(1) items:
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) type_qualifier_noattr . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TILDE STRUCT STRING_LITERAL STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT RBRACK PRE_NAME PLUS PACKED MINUS LPAREN LONG LBRACK INT INC FLOAT ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) type_qualifier_noattr

State 81:
## Known stack suffix:
## compcert_pre_parser_option(type_qualifier_list) attribute_specifier
## LR(1) items:
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) attribute_specifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TILDE STRUCT STRING_LITERAL STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT RBRACK PRE_NAME PLUS PACKED MINUS LPAREN LONG LBRACK INT INC FLOAT ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) attribute_specifier

State 82:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> type_specifier_no_typedef_name . compcert_pre_parser_list(specifier_qualifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
## Transitions:
-- On compcert_pre_parser_list(specifier_qualifier_no_typedef_name) shift to state 83
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(specifier_qualifier_no_typedef_name) ->

State 83:
## Known stack suffix:
## type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(specifier_qualifier_no_typedef_name) -> compcert_pre_parser_list(specifier_qualifier_no_typedef_name) . specifier_qualifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STAR SIGNED SHORT SEMICOLON RESTRICT PRE_NAME PACKED LPAREN LONG INT FLOAT ENUM DOUBLE CONST COLON CHAR ATTRIBUTE ALIGNAS ]
specifier_qualifier_list(struct_declaration) -> type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 68
-- On type_qualifier_noattr shift to state 69
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On specifier_qualifier_no_typedef_name shift to state 84
-- On enum_specifier shift to state 85
-- On attribute_specifier shift to state 86
## Reductions:
-- On XOR_ASSIGN WHILE VAR_NAME TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRING_LITERAL STATIC STAR SLASH SIZEOF SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INLINE INC IF HAT GT GOTO GEQ FOR EXTERN EQEQ EQ EOF ELSE ELLIPSIS DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production specifier_qualifier_list(struct_declaration) -> type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name)

State 84:
## Known stack suffix:
## compcert_pre_parser_list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
## LR(1) items:
compcert_pre_parser_list(specifier_qualifier_no_typedef_name) -> compcert_pre_parser_list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT PRE_NAME PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST COMMA COLON CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(specifier_qualifier_no_typedef_name) -> compcert_pre_parser_list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name

State 85:
## Known stack suffix:
## enum_specifier
## LR(1) items:
type_specifier_no_typedef_name -> enum_specifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_specifier_no_typedef_name -> enum_specifier

State 86:
## Known stack suffix:
## attribute_specifier
## LR(1) items:
specifier_qualifier_no_typedef_name -> attribute_specifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT PRE_NAME PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST COMMA COLON CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production specifier_qualifier_no_typedef_name -> attribute_specifier

State 87:
## Known stack suffix:
## type_qualifier_list
## LR(1) items:
compcert_pre_parser_option(type_qualifier_list) -> type_qualifier_list . [ VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS ]
specifier_qualifier_list(struct_declaration) -> type_qualifier_list . typedef_name compcert_pre_parser_option(type_qualifier_list) [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
specifier_qualifier_list(struct_declaration) -> type_qualifier_list . type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 88
-- On type_specifier_no_typedef_name shift to state 90
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On enum_specifier shift to state 85
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) -> type_qualifier_list

State 88:
## Known stack suffix:
## type_qualifier_list typedef_name
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> type_qualifier_list typedef_name . compcert_pre_parser_option(type_qualifier_list) [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 89
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 89:
## Known stack suffix:
## type_qualifier_list typedef_name compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> type_qualifier_list typedef_name compcert_pre_parser_option(type_qualifier_list) . [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE STAR SEMICOLON RESTRICT PRE_NAME PACKED LPAREN CONST COLON ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE STAR SEMICOLON RESTRICT PRE_NAME PACKED LPAREN CONST COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On CONST shift to state 59
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 80
-- On attribute_specifier shift to state 81
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production specifier_qualifier_list(struct_declaration) -> type_qualifier_list typedef_name compcert_pre_parser_option(type_qualifier_list)

State 90:
## Known stack suffix:
## type_qualifier_list type_specifier_no_typedef_name
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> type_qualifier_list type_specifier_no_typedef_name . compcert_pre_parser_list(specifier_qualifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
## Transitions:
-- On compcert_pre_parser_list(specifier_qualifier_no_typedef_name) shift to state 91
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(specifier_qualifier_no_typedef_name) ->

State 91:
## Known stack suffix:
## type_qualifier_list type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(specifier_qualifier_no_typedef_name) -> compcert_pre_parser_list(specifier_qualifier_no_typedef_name) . specifier_qualifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STAR SIGNED SHORT SEMICOLON RESTRICT PRE_NAME PACKED LPAREN LONG INT FLOAT ENUM DOUBLE CONST COLON CHAR ATTRIBUTE ALIGNAS ]
specifier_qualifier_list(struct_declaration) -> type_qualifier_list type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN COLON ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 68
-- On type_qualifier_noattr shift to state 69
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On specifier_qualifier_no_typedef_name shift to state 84
-- On enum_specifier shift to state 85
-- On attribute_specifier shift to state 86
## Reductions:
-- On XOR_ASSIGN WHILE VAR_NAME TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRING_LITERAL STATIC STAR SLASH SIZEOF SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INLINE INC IF HAT GT GOTO GEQ FOR EXTERN EQEQ EQ EOF ELSE ELLIPSIS DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production specifier_qualifier_list(struct_declaration) -> type_qualifier_list type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name)

State 92:
## Known stack suffix:
## struct_declaration_list struct_declaration
## LR(1) items:
struct_declaration_list -> struct_declaration_list struct_declaration . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT RESTRICT RBRACE PRE_NAME PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaration_list -> struct_declaration_list struct_declaration

State 93:
## Known stack suffix:
## specifier_qualifier_list(struct_declaration)
## LR(1) items:
struct_declaration -> specifier_qualifier_list(struct_declaration) . compcert_pre_parser_option(struct_declarator_list) SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT RESTRICT RBRACE PRE_NAME PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On struct_declarator_list shift to state 288
-- On struct_declarator shift to state 295
-- On direct_declarator shift to state 100
-- On declarator_noattrend shift to state 153
-- On declarator_identifier shift to state 157
-- On declarator shift to state 291
-- On compcert_pre_parser_option(struct_declarator_list) shift to state 296
-- On compcert_pre_parser_option(declarator) shift to state 292
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On COLON
--   reduce production compcert_pre_parser_option(declarator) ->
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(struct_declarator_list) ->

State 94:
## Known stack suffix:
## PRE_NAME
## LR(1) items:
declarator_identifier -> PRE_NAME . low_prec TYPEDEF_NAME [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
declarator_identifier -> PRE_NAME . VAR_NAME [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 95
-- On low_prec shift to state 96
## Reductions:
-- On TYPEDEF_NAME
--   reduce production low_prec ->

State 95:
## Known stack suffix:
## PRE_NAME VAR_NAME
## LR(1) items:
declarator_identifier -> PRE_NAME VAR_NAME . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarator_identifier -> PRE_NAME VAR_NAME

State 96:
## Known stack suffix:
## PRE_NAME low_prec
## LR(1) items:
declarator_identifier -> PRE_NAME low_prec . TYPEDEF_NAME [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On TYPEDEF_NAME shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## PRE_NAME low_prec TYPEDEF_NAME
## LR(1) items:
declarator_identifier -> PRE_NAME low_prec TYPEDEF_NAME . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarator_identifier -> PRE_NAME low_prec TYPEDEF_NAME

State 98:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_declarator -> LPAREN . save_context declarator RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On save_context shift to state 99
## Default reduction:
-- After reading the next token, reduce production save_context ->

State 99:
## Known stack suffix:
## LPAREN save_context
## LR(1) items:
direct_declarator -> LPAREN save_context . declarator RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On direct_declarator shift to state 100
-- On declarator_noattrend shift to state 153
-- On declarator_identifier shift to state 157
-- On declarator shift to state 158
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->

State 100:
## Known stack suffix:
## direct_declarator
## LR(1) items:
declarator_noattrend -> direct_declarator . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LBRACK compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK) [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LPAREN context_parameter_type_list RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LPAREN save_context compcert_pre_parser_option(identifier_list) RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 101
-- On LBRACK shift to state 260
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production declarator_noattrend -> direct_declarator

State 101:
## Known stack suffix:
## direct_declarator LPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN . context_parameter_type_list RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator LPAREN . save_context compcert_pre_parser_option(identifier_list) RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On save_context shift to state 102
-- On context_parameter_type_list shift to state 283
## Default reduction:
-- After reading the next token, reduce production save_context ->

State 102:
## Known stack suffix:
## direct_declarator LPAREN save_context
## LR(1) items:
context_parameter_type_list -> save_context . parameter_type_list save_context [ RPAREN ]
direct_declarator -> direct_declarator LPAREN save_context . compcert_pre_parser_option(identifier_list) RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 103
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 109
-- On type_specifier_no_typedef_name shift to state 115
-- On type_qualifier_noattr shift to state 123
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 131
-- On parameter_type_list shift to state 136
-- On parameter_list shift to state 138
-- On parameter_declaration shift to state 146
-- On identifier_list shift to state 277
-- On function_specifier shift to state 126
-- On enum_specifier shift to state 85
-- On declaration_specifiers(parameter_declaration) shift to state 142
-- On compcert_pre_parser_option(identifier_list) shift to state 281
-- On attribute_specifier shift to state 128
## Reductions:
-- On RPAREN
--   reduce production compcert_pre_parser_option(identifier_list) ->

State 103:
## Known stack suffix:
## PRE_NAME
## LR(1) items:
identifier_list -> PRE_NAME . VAR_NAME [ RPAREN COMMA ]
typedef_name -> PRE_NAME . TYPEDEF_NAME [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 104
-- On TYPEDEF_NAME shift to state 17
## Reductions:

State 104:
## Known stack suffix:
## PRE_NAME VAR_NAME
## LR(1) items:
identifier_list -> PRE_NAME VAR_NAME . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier_list -> PRE_NAME VAR_NAME

State 105:
## Known stack suffix:
## NORETURN
## LR(1) items:
function_specifier -> NORETURN . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_specifier -> NORETURN

State 106:
## Known stack suffix:
## INLINE
## LR(1) items:
function_specifier -> INLINE . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_specifier -> INLINE

State 107:
## Known stack suffix:
## EXTERN
## LR(1) items:
storage_class_specifier_no_typedef -> EXTERN . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class_specifier_no_typedef -> EXTERN

State 108:
## Known stack suffix:
## AUTO
## LR(1) items:
storage_class_specifier_no_typedef -> AUTO . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production storage_class_specifier_no_typedef -> AUTO

State 109:
## Known stack suffix:
## typedef_name
## LR(1) items:
declaration_specifiers(parameter_declaration) -> typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 110
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 110:
## Known stack suffix:
## typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(parameter_declaration) -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR RPAREN PRE_NAME LPAREN LBRACK COMMA
--   reduce production declaration_specifiers(parameter_declaration) -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 111:
## Known stack suffix:
## compcert_pre_parser_list(declaration_specifier_no_type) type_qualifier_noattr
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) type_qualifier_noattr . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) type_qualifier_noattr

State 112:
## Known stack suffix:
## compcert_pre_parser_list(declaration_specifier_no_type) storage_class_specifier_no_typedef
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) storage_class_specifier_no_typedef . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) storage_class_specifier_no_typedef

State 113:
## Known stack suffix:
## compcert_pre_parser_list(declaration_specifier_no_type) function_specifier
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) function_specifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) function_specifier

State 114:
## Known stack suffix:
## compcert_pre_parser_list(declaration_specifier_no_type) attribute_specifier
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) attribute_specifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) attribute_specifier

State 115:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(parameter_declaration) -> type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 116
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 116:
## Known stack suffix:
## type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(parameter_declaration) -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR RPAREN PRE_NAME LPAREN LBRACK COMMA
--   reduce production declaration_specifiers(parameter_declaration) -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 117:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name

State 118:
## Known stack suffix:
## type_qualifier_noattr
## LR(1) items:
declaration_specifier_no_typedef_name -> type_qualifier_noattr . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_specifier_no_typedef_name -> type_qualifier_noattr

State 119:
## Known stack suffix:
## storage_class_specifier_no_typedef
## LR(1) items:
declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef

State 120:
## Known stack suffix:
## function_specifier
## LR(1) items:
declaration_specifier_no_typedef_name -> function_specifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_specifier_no_typedef_name -> function_specifier

State 121:
## Known stack suffix:
## compcert_pre_parser_list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name

State 122:
## Known stack suffix:
## attribute_specifier
## LR(1) items:
declaration_specifier_no_typedef_name -> attribute_specifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_specifier_no_typedef_name -> attribute_specifier

State 123:
## Known stack suffix:
## type_qualifier_noattr
## LR(1) items:
rlist(declaration_specifier_no_type) -> type_qualifier_noattr . [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
rlist(declaration_specifier_no_type) -> type_qualifier_noattr . rlist(declaration_specifier_no_type) [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 123
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 130
-- On function_specifier shift to state 126
-- On attribute_specifier shift to state 128
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INC IF HAT GT GOTO GEQ FOR FLOAT EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production rlist(declaration_specifier_no_type) -> type_qualifier_noattr

State 124:
## Known stack suffix:
## storage_class_specifier_no_typedef
## LR(1) items:
rlist(declaration_specifier_no_type) -> storage_class_specifier_no_typedef . [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
rlist(declaration_specifier_no_type) -> storage_class_specifier_no_typedef . rlist(declaration_specifier_no_type) [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 123
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 125
-- On function_specifier shift to state 126
-- On attribute_specifier shift to state 128
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INC IF HAT GT GOTO GEQ FOR FLOAT EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production rlist(declaration_specifier_no_type) -> storage_class_specifier_no_typedef

State 125:
## Known stack suffix:
## storage_class_specifier_no_typedef rlist(declaration_specifier_no_type)
## LR(1) items:
rlist(declaration_specifier_no_type) -> storage_class_specifier_no_typedef rlist(declaration_specifier_no_type) . [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rlist(declaration_specifier_no_type) -> storage_class_specifier_no_typedef rlist(declaration_specifier_no_type)

State 126:
## Known stack suffix:
## function_specifier
## LR(1) items:
rlist(declaration_specifier_no_type) -> function_specifier . [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
rlist(declaration_specifier_no_type) -> function_specifier . rlist(declaration_specifier_no_type) [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 123
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 127
-- On function_specifier shift to state 126
-- On attribute_specifier shift to state 128
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INC IF HAT GT GOTO GEQ FOR FLOAT EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production rlist(declaration_specifier_no_type) -> function_specifier

State 127:
## Known stack suffix:
## function_specifier rlist(declaration_specifier_no_type)
## LR(1) items:
rlist(declaration_specifier_no_type) -> function_specifier rlist(declaration_specifier_no_type) . [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rlist(declaration_specifier_no_type) -> function_specifier rlist(declaration_specifier_no_type)

State 128:
## Known stack suffix:
## attribute_specifier
## LR(1) items:
rlist(declaration_specifier_no_type) -> attribute_specifier . [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
rlist(declaration_specifier_no_type) -> attribute_specifier . rlist(declaration_specifier_no_type) [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 123
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 129
-- On function_specifier shift to state 126
-- On attribute_specifier shift to state 128
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INC IF HAT GT GOTO GEQ FOR FLOAT EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production rlist(declaration_specifier_no_type) -> attribute_specifier

State 129:
## Known stack suffix:
## attribute_specifier rlist(declaration_specifier_no_type)
## LR(1) items:
rlist(declaration_specifier_no_type) -> attribute_specifier rlist(declaration_specifier_no_type) . [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rlist(declaration_specifier_no_type) -> attribute_specifier rlist(declaration_specifier_no_type)

State 130:
## Known stack suffix:
## type_qualifier_noattr rlist(declaration_specifier_no_type)
## LR(1) items:
rlist(declaration_specifier_no_type) -> type_qualifier_noattr rlist(declaration_specifier_no_type) . [ VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production rlist(declaration_specifier_no_type) -> type_qualifier_noattr rlist(declaration_specifier_no_type)

State 131:
## Known stack suffix:
## rlist(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(parameter_declaration) -> rlist(declaration_specifier_no_type) . typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
declaration_specifiers(parameter_declaration) -> rlist(declaration_specifier_no_type) . type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 132
-- On type_specifier_no_typedef_name shift to state 134
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On enum_specifier shift to state 85
## Reductions:

State 132:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name
## LR(1) items:
declaration_specifiers(parameter_declaration) -> rlist(declaration_specifier_no_type) typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 133
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 133:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(parameter_declaration) -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR RPAREN PRE_NAME LPAREN LBRACK COMMA
--   reduce production declaration_specifiers(parameter_declaration) -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 134:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(parameter_declaration) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 135
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 135:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(parameter_declaration) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR RPAREN PRE_NAME LPAREN LBRACK COMMA ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR RPAREN PRE_NAME LPAREN LBRACK COMMA
--   reduce production declaration_specifiers(parameter_declaration) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 136:
## Known stack suffix:
## save_context parameter_type_list
## LR(1) items:
context_parameter_type_list -> save_context parameter_type_list . save_context [ RPAREN ]
## Transitions:
-- On save_context shift to state 137
## Default reduction:
-- After reading the next token, reduce production save_context ->

State 137:
## Known stack suffix:
## save_context parameter_type_list save_context
## LR(1) items:
context_parameter_type_list -> save_context parameter_type_list save_context . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production context_parameter_type_list -> save_context parameter_type_list save_context

State 138:
## Known stack suffix:
## parameter_list
## LR(1) items:
parameter_list -> parameter_list . COMMA parameter_declaration [ RPAREN COMMA ]
parameter_type_list -> parameter_list . [ RPAREN ]
parameter_type_list -> parameter_list . COMMA ELLIPSIS [ RPAREN ]
## Transitions:
-- On COMMA shift to state 139
## Reductions:
-- On RPAREN
--   reduce production parameter_type_list -> parameter_list

State 139:
## Known stack suffix:
## parameter_list COMMA
## LR(1) items:
parameter_list -> parameter_list COMMA . parameter_declaration [ RPAREN COMMA ]
parameter_type_list -> parameter_list COMMA . ELLIPSIS [ RPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 16
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On ELLIPSIS shift to state 140
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 109
-- On type_specifier_no_typedef_name shift to state 115
-- On type_qualifier_noattr shift to state 123
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 131
-- On parameter_declaration shift to state 141
-- On function_specifier shift to state 126
-- On enum_specifier shift to state 85
-- On declaration_specifiers(parameter_declaration) shift to state 142
-- On attribute_specifier shift to state 128
## Reductions:

State 140:
## Known stack suffix:
## parameter_list COMMA ELLIPSIS
## LR(1) items:
parameter_type_list -> parameter_list COMMA ELLIPSIS . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_type_list -> parameter_list COMMA ELLIPSIS

State 141:
## Known stack suffix:
## parameter_list COMMA parameter_declaration
## LR(1) items:
parameter_list -> parameter_list COMMA parameter_declaration . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_list -> parameter_list COMMA parameter_declaration

State 142:
## Known stack suffix:
## declaration_specifiers(parameter_declaration)
## LR(1) items:
parameter_declaration -> declaration_specifiers(parameter_declaration) . declare_varname(declarator) [ RPAREN COMMA ]
parameter_declaration -> declaration_specifiers(parameter_declaration) . compcert_pre_parser_option(abstract_declarator(parameter_declaration)) [ RPAREN COMMA ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 143
-- On direct_declarator shift to state 100
-- On direct_abstract_declarator shift to state 268
-- On declare_varname(declarator) shift to state 269
-- On declarator_noattrend shift to state 153
-- On declarator_identifier shift to state 157
-- On declarator shift to state 270
-- On compcert_pre_parser_option(direct_abstract_declarator) shift to state 160
-- On compcert_pre_parser_option(abstract_declarator(parameter_declaration)) shift to state 271
-- On compcert_pre_parser_list(pointer1) shift to state 272
-- On abstract_declarator(parameter_declaration) shift to state 276
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On RPAREN COMMA
--   reduce production compcert_pre_parser_option(abstract_declarator(parameter_declaration)) ->
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) ->

State 143:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN . save_context abstract_declarator(type_name) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> LPAREN . compcert_pre_parser_option(context_parameter_type_list) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_declarator -> LPAREN . save_context declarator RPAREN [ RPAREN PACKED LPAREN LBRACK COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On save_context shift to state 144
-- On context_parameter_type_list shift to state 150
-- On compcert_pre_parser_option(context_parameter_type_list) shift to state 266
## Reductions:
-- On RPAREN
--   reduce production compcert_pre_parser_option(context_parameter_type_list) ->
-- On VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS
--   reduce production save_context ->

State 144:
## Known stack suffix:
## LPAREN save_context
## LR(1) items:
context_parameter_type_list -> save_context . parameter_type_list save_context [ RPAREN ]
direct_abstract_declarator -> LPAREN save_context . abstract_declarator(type_name) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_declarator -> LPAREN save_context . declarator RPAREN [ RPAREN PACKED LPAREN LBRACK COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 145
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LPAREN shift to state 143
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 109
-- On type_specifier_no_typedef_name shift to state 115
-- On type_qualifier_noattr shift to state 123
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 131
-- On parameter_type_list shift to state 136
-- On parameter_list shift to state 138
-- On parameter_declaration shift to state 146
-- On function_specifier shift to state 126
-- On enum_specifier shift to state 85
-- On direct_declarator shift to state 100
-- On direct_abstract_declarator shift to state 147
-- On declarator_noattrend shift to state 153
-- On declarator_identifier shift to state 157
-- On declarator shift to state 158
-- On declaration_specifiers(parameter_declaration) shift to state 142
-- On compcert_pre_parser_option(direct_abstract_declarator) shift to state 160
-- On compcert_pre_parser_list(pointer1) shift to state 256
-- On attribute_specifier shift to state 128
-- On abstract_declarator(type_name) shift to state 264
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) ->

State 145:
## Known stack suffix:
## PRE_NAME
## LR(1) items:
declarator_identifier -> PRE_NAME . low_prec TYPEDEF_NAME [ RPAREN PACKED LPAREN LBRACK ATTRIBUTE ALIGNAS ]
declarator_identifier -> PRE_NAME . VAR_NAME [ RPAREN PACKED LPAREN LBRACK ATTRIBUTE ALIGNAS ]
typedef_name -> PRE_NAME . TYPEDEF_NAME [ VOLATILE STATIC STAR RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 95
-- On TYPEDEF_NAME shift to state 17
-- On low_prec shift to state 96
## Reductions:

State 146:
## Known stack suffix:
## parameter_declaration
## LR(1) items:
parameter_list -> parameter_declaration . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_list -> parameter_declaration

State 147:
## Known stack suffix:
## direct_abstract_declarator
## LR(1) items:
abstract_declarator(type_name) -> direct_abstract_declarator . [ RPAREN COMMA ]
compcert_pre_parser_option(direct_abstract_declarator) -> direct_abstract_declarator . [ LBRACK ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On LPAREN shift to state 148
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production abstract_declarator(type_name) -> direct_abstract_declarator
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) -> direct_abstract_declarator

State 148:
## Known stack suffix:
## direct_abstract_declarator LPAREN
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN . compcert_pre_parser_option(context_parameter_type_list) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On save_context shift to state 149
-- On context_parameter_type_list shift to state 150
-- On compcert_pre_parser_option(context_parameter_type_list) shift to state 151
## Reductions:
-- On RPAREN
--   reduce production compcert_pre_parser_option(context_parameter_type_list) ->
-- On VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS
--   reduce production save_context ->

State 149:
## Known stack suffix:
## save_context
## LR(1) items:
context_parameter_type_list -> save_context . parameter_type_list save_context [ RPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 16
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 109
-- On type_specifier_no_typedef_name shift to state 115
-- On type_qualifier_noattr shift to state 123
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 131
-- On parameter_type_list shift to state 136
-- On parameter_list shift to state 138
-- On parameter_declaration shift to state 146
-- On function_specifier shift to state 126
-- On enum_specifier shift to state 85
-- On declaration_specifiers(parameter_declaration) shift to state 142
-- On attribute_specifier shift to state 128
## Reductions:

State 150:
## Known stack suffix:
## context_parameter_type_list
## LR(1) items:
compcert_pre_parser_option(context_parameter_type_list) -> context_parameter_type_list . [ RPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(context_parameter_type_list) -> context_parameter_type_list

State 151:
## Known stack suffix:
## direct_abstract_declarator LPAREN compcert_pre_parser_option(context_parameter_type_list)
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN compcert_pre_parser_option(context_parameter_type_list) . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RPAREN shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## direct_abstract_declarator LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_abstract_declarator -> direct_abstract_declarator LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN

State 153:
## Known stack suffix:
## declarator_noattrend
## LR(1) items:
declarator -> declarator_noattrend . attribute_specifier_list [ SEMICOLON RPAREN COMMA COLON ]
## Transitions:
-- On PACKED shift to state 18
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On attribute_specifier_list shift to state 154
-- On attribute_specifier shift to state 155
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production attribute_specifier_list ->

State 154:
## Known stack suffix:
## declarator_noattrend attribute_specifier_list
## LR(1) items:
declarator -> declarator_noattrend attribute_specifier_list . [ SEMICOLON RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declarator -> declarator_noattrend attribute_specifier_list

State 155:
## Known stack suffix:
## attribute_specifier
## LR(1) items:
attribute_specifier_list -> attribute_specifier . attribute_specifier_list [ SEMICOLON RPAREN PRE_NAME LBRACE EQ COMMA COLON ]
## Transitions:
-- On PACKED shift to state 18
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On attribute_specifier_list shift to state 156
-- On attribute_specifier shift to state 155
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production attribute_specifier_list ->

State 156:
## Known stack suffix:
## attribute_specifier attribute_specifier_list
## LR(1) items:
attribute_specifier_list -> attribute_specifier attribute_specifier_list . [ SEMICOLON RPAREN PRE_NAME LBRACE EQ COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute_specifier_list -> attribute_specifier attribute_specifier_list

State 157:
## Known stack suffix:
## declarator_identifier
## LR(1) items:
direct_declarator -> declarator_identifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_declarator -> declarator_identifier

State 158:
## Known stack suffix:
## LPAREN save_context declarator
## LR(1) items:
direct_declarator -> LPAREN save_context declarator . RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## LPAREN save_context declarator RPAREN
## LR(1) items:
direct_declarator -> LPAREN save_context declarator RPAREN . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_declarator -> LPAREN save_context declarator RPAREN

State 160:
## Known stack suffix:
## compcert_pre_parser_option(direct_abstract_declarator)
## LR(1) items:
direct_abstract_declarator -> compcert_pre_parser_option(direct_abstract_declarator) . LBRACK compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK) [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On LBRACK shift to state 161
## Reductions:

State 161:
## Known stack suffix:
## compcert_pre_parser_option(direct_abstract_declarator) LBRACK
## LR(1) items:
direct_abstract_declarator -> compcert_pre_parser_option(direct_abstract_declarator) LBRACK . compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK) [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 162
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 162:
## Known stack suffix:
## compcert_pre_parser_option(direct_abstract_declarator) LBRACK compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
direct_abstract_declarator -> compcert_pre_parser_option(direct_abstract_declarator) LBRACK compcert_pre_parser_option(type_qualifier_list) . optional(assignment_expression,RBRACK) [ RPAREN LPAREN LBRACK COMMA ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE TILDE STRING_LITERAL STAR SIZEOF RESTRICT RBRACK PRE_NAME PLUS PACKED MINUS LPAREN INC DEC CONSTANT CONST BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE TILDE STRING_LITERAL STAR SIZEOF RESTRICT RBRACK PRE_NAME PLUS PACKED MINUS LPAREN INC DEC CONSTANT CONST BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RESTRICT shift to state 14
-- On RBRACK shift to state 163
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On PACKED shift to state 18
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On CONST shift to state 59
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On ATTRIBUTE shift to state 37
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On ALIGNAS shift to state 60
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On type_qualifier_noattr shift to state 80
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On optional(assignment_expression,RBRACK) shift to state 253
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On attribute_specifier shift to state 81
-- On assignment_expression shift to state 254
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 163:
## Known stack suffix:
## RBRACK
## LR(1) items:
optional(assignment_expression,RBRACK) -> RBRACK . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional(assignment_expression,RBRACK) -> RBRACK

State 164:
## Known stack suffix:
## unary_operator
## LR(1) items:
unary_expression -> unary_operator . cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On cast_expression shift to state 252
## Reductions:

State 165:
## Known stack suffix:
## unary_expression
## LR(1) items:
cast_expression -> unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cast_expression -> unary_expression

State 166:
## Known stack suffix:
## string_literals_list
## LR(1) items:
primary_expression -> string_literals_list . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
string_literals_list -> string_literals_list . STRING_LITERAL [ XOR_ASSIGN SUB_ASSIGN STRING_LITERAL STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On STRING_LITERAL shift to state 167
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production primary_expression -> string_literals_list

State 167:
## Known stack suffix:
## string_literals_list STRING_LITERAL
## LR(1) items:
string_literals_list -> string_literals_list STRING_LITERAL . [ XOR_ASSIGN SUB_ASSIGN STRING_LITERAL STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production string_literals_list -> string_literals_list STRING_LITERAL

State 168:
## Known stack suffix:
## primary_expression
## LR(1) items:
postfix_expression -> primary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> primary_expression

State 169:
## Known stack suffix:
## postfix_expression
## LR(1) items:
postfix_expression -> postfix_expression . LBRACK expression RBRACK [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . LPAREN compcert_pre_parser_option(argument_expression_list) RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . DOT general_identifier [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . PTR general_identifier [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . INC [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . DEC [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> postfix_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On PTR shift to state 170
-- On LPAREN shift to state 172
-- On LBRACK shift to state 245
-- On INC shift to state 248
-- On DOT shift to state 249
-- On DEC shift to state 251
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DO DIV_ASSIGN DEFAULT CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production unary_expression -> postfix_expression

State 170:
## Known stack suffix:
## postfix_expression PTR
## LR(1) items:
postfix_expression -> postfix_expression PTR . general_identifier [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## postfix_expression PTR general_identifier
## LR(1) items:
postfix_expression -> postfix_expression PTR general_identifier . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression PTR general_identifier

State 172:
## Known stack suffix:
## postfix_expression LPAREN
## LR(1) items:
postfix_expression -> postfix_expression LPAREN . compcert_pre_parser_option(argument_expression_list) RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compcert_pre_parser_option(argument_expression_list) shift to state 239
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 241
-- On argument_expression_list shift to state 242
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On RPAREN
--   reduce production compcert_pre_parser_option(argument_expression_list) ->

State 173:
## Known stack suffix:
## unary_expression
## LR(1) items:
assignment_expression -> unary_expression . assignment_operator assignment_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
cast_expression -> unary_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On XOR_ASSIGN shift to state 174
-- On SUB_ASSIGN shift to state 175
-- On RIGHT_ASSIGN shift to state 176
-- On OR_ASSIGN shift to state 177
-- On MUL_ASSIGN shift to state 178
-- On MOD_ASSIGN shift to state 179
-- On LEFT_ASSIGN shift to state 180
-- On EQ shift to state 181
-- On DIV_ASSIGN shift to state 182
-- On AND_ASSIGN shift to state 183
-- On ADD_ASSIGN shift to state 184
-- On assignment_operator shift to state 185
## Reductions:
-- On WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED NORETURN NEQ MINUS LT LPAREN LONG LEQ LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM ANDAND AND ALIGNOF ALIGNAS
--   reduce production cast_expression -> unary_expression

State 174:
## Known stack suffix:
## XOR_ASSIGN
## LR(1) items:
assignment_operator -> XOR_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> XOR_ASSIGN

State 175:
## Known stack suffix:
## SUB_ASSIGN
## LR(1) items:
assignment_operator -> SUB_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> SUB_ASSIGN

State 176:
## Known stack suffix:
## RIGHT_ASSIGN
## LR(1) items:
assignment_operator -> RIGHT_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> RIGHT_ASSIGN

State 177:
## Known stack suffix:
## OR_ASSIGN
## LR(1) items:
assignment_operator -> OR_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> OR_ASSIGN

State 178:
## Known stack suffix:
## MUL_ASSIGN
## LR(1) items:
assignment_operator -> MUL_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> MUL_ASSIGN

State 179:
## Known stack suffix:
## MOD_ASSIGN
## LR(1) items:
assignment_operator -> MOD_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> MOD_ASSIGN

State 180:
## Known stack suffix:
## LEFT_ASSIGN
## LR(1) items:
assignment_operator -> LEFT_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> LEFT_ASSIGN

State 181:
## Known stack suffix:
## EQ
## LR(1) items:
assignment_operator -> EQ . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> EQ

State 182:
## Known stack suffix:
## DIV_ASSIGN
## LR(1) items:
assignment_operator -> DIV_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> DIV_ASSIGN

State 183:
## Known stack suffix:
## AND_ASSIGN
## LR(1) items:
assignment_operator -> AND_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> AND_ASSIGN

State 184:
## Known stack suffix:
## ADD_ASSIGN
## LR(1) items:
assignment_operator -> ADD_ASSIGN . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_operator -> ADD_ASSIGN

State 185:
## Known stack suffix:
## unary_expression assignment_operator
## LR(1) items:
assignment_expression -> unary_expression assignment_operator . assignment_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 238
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 186:
## Known stack suffix:
## shift_expression
## LR(1) items:
relational_expression -> shift_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
shift_expression -> shift_expression . shift_operator additive_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On RIGHT shift to state 187
-- On LEFT shift to state 188
-- On shift_operator shift to state 189
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production relational_expression -> shift_expression

State 187:
## Known stack suffix:
## RIGHT
## LR(1) items:
shift_operator -> RIGHT . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production shift_operator -> RIGHT

State 188:
## Known stack suffix:
## LEFT
## LR(1) items:
shift_operator -> LEFT . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production shift_operator -> LEFT

State 189:
## Known stack suffix:
## shift_expression shift_operator
## LR(1) items:
shift_expression -> shift_expression shift_operator . additive_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On cast_expression shift to state 196
-- On additive_expression shift to state 197
## Reductions:

State 190:
## Known stack suffix:
## multiplicative_expression
## LR(1) items:
additive_expression -> multiplicative_expression . [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On STAR shift to state 191
-- On SLASH shift to state 192
-- On PERCENT shift to state 193
-- On multiplicative_operator shift to state 194
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production additive_expression -> multiplicative_expression

State 191:
## Known stack suffix:
## STAR
## LR(1) items:
multiplicative_operator -> STAR . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_operator -> STAR

State 192:
## Known stack suffix:
## SLASH
## LR(1) items:
multiplicative_operator -> SLASH . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_operator -> SLASH

State 193:
## Known stack suffix:
## PERCENT
## LR(1) items:
multiplicative_operator -> PERCENT . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_operator -> PERCENT

State 194:
## Known stack suffix:
## multiplicative_expression multiplicative_operator
## LR(1) items:
multiplicative_expression -> multiplicative_expression multiplicative_operator . cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On cast_expression shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## multiplicative_expression multiplicative_operator cast_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression

State 196:
## Known stack suffix:
## cast_expression
## LR(1) items:
multiplicative_expression -> cast_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production multiplicative_expression -> cast_expression

State 197:
## Known stack suffix:
## shift_expression shift_operator additive_expression
## LR(1) items:
additive_expression -> additive_expression . additive_operator multiplicative_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
shift_expression -> shift_expression shift_operator additive_expression . [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On PLUS shift to state 198
-- On MINUS shift to state 199
-- On additive_operator shift to state 200
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production shift_expression -> shift_expression shift_operator additive_expression

State 198:
## Known stack suffix:
## PLUS
## LR(1) items:
additive_operator -> PLUS . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production additive_operator -> PLUS

State 199:
## Known stack suffix:
## MINUS
## LR(1) items:
additive_operator -> MINUS . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production additive_operator -> MINUS

State 200:
## Known stack suffix:
## additive_expression additive_operator
## LR(1) items:
additive_expression -> additive_expression additive_operator . multiplicative_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 201
-- On cast_expression shift to state 196
## Reductions:

State 201:
## Known stack suffix:
## additive_expression additive_operator multiplicative_expression
## LR(1) items:
additive_expression -> additive_expression additive_operator multiplicative_expression . [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On STAR shift to state 191
-- On SLASH shift to state 192
-- On PERCENT shift to state 193
-- On multiplicative_operator shift to state 194
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production additive_expression -> additive_expression additive_operator multiplicative_expression

State 202:
## Known stack suffix:
## relational_expression
## LR(1) items:
equality_expression -> relational_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
relational_expression -> relational_expression . relational_operator shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On LT shift to state 203
-- On LEQ shift to state 204
-- On GT shift to state 205
-- On GEQ shift to state 206
-- On relational_operator shift to state 207
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LPAREN LONG LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GOTO FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production equality_expression -> relational_expression

State 203:
## Known stack suffix:
## LT
## LR(1) items:
relational_operator -> LT . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relational_operator -> LT

State 204:
## Known stack suffix:
## LEQ
## LR(1) items:
relational_operator -> LEQ . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relational_operator -> LEQ

State 205:
## Known stack suffix:
## GT
## LR(1) items:
relational_operator -> GT . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relational_operator -> GT

State 206:
## Known stack suffix:
## GEQ
## LR(1) items:
relational_operator -> GEQ . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relational_operator -> GEQ

State 207:
## Known stack suffix:
## relational_expression relational_operator
## LR(1) items:
relational_expression -> relational_expression relational_operator . shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 208
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On cast_expression shift to state 196
-- On additive_expression shift to state 209
## Reductions:

State 208:
## Known stack suffix:
## relational_expression relational_operator shift_expression
## LR(1) items:
relational_expression -> relational_expression relational_operator shift_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
shift_expression -> shift_expression . shift_operator additive_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On RIGHT shift to state 187
-- On LEFT shift to state 188
-- On shift_operator shift to state 189
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production relational_expression -> relational_expression relational_operator shift_expression

State 209:
## Known stack suffix:
## additive_expression
## LR(1) items:
additive_expression -> additive_expression . additive_operator multiplicative_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
shift_expression -> additive_expression . [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On PLUS shift to state 198
-- On MINUS shift to state 199
-- On additive_operator shift to state 200
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production shift_expression -> additive_expression

State 210:
## Known stack suffix:
## logical_or_expression
## LR(1) items:
conditional_expression -> logical_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
conditional_expression -> logical_or_expression . QUESTION expression COLON conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
logical_or_expression -> logical_or_expression . BARBAR logical_and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ]
## Transitions:
-- On QUESTION shift to state 211
-- On BARBAR shift to state 236
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production conditional_expression -> logical_or_expression

State 211:
## Known stack suffix:
## logical_or_expression QUESTION
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION . expression COLON conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 229
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 212:
## Known stack suffix:
## logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . ANDAND inclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
logical_or_expression -> logical_and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ]
## Transitions:
-- On ANDAND shift to state 213
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production logical_or_expression -> logical_and_expression

State 213:
## Known stack suffix:
## logical_and_expression ANDAND
## LR(1) items:
logical_and_expression -> logical_and_expression ANDAND . inclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On inclusive_or_expression shift to state 214
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On cast_expression shift to state 196
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 214:
## Known stack suffix:
## logical_and_expression ANDAND inclusive_or_expression
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression . BAR exclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
## Transitions:
-- On BAR shift to state 215
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression

State 215:
## Known stack suffix:
## inclusive_or_expression BAR
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression BAR . exclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On exclusive_or_expression shift to state 216
-- On equality_expression shift to state 218
-- On cast_expression shift to state 196
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 216:
## Known stack suffix:
## inclusive_or_expression BAR exclusive_or_expression
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression . HAT and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On HAT shift to state 217
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression

State 217:
## Known stack suffix:
## exclusive_or_expression HAT
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression HAT . and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On equality_expression shift to state 218
-- On cast_expression shift to state 196
-- On and_expression shift to state 223
-- On additive_expression shift to state 209
## Reductions:

State 218:
## Known stack suffix:
## equality_expression
## LR(1) items:
and_expression -> equality_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
equality_expression -> equality_expression . equality_operator relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On NEQ shift to state 219
-- On EQEQ shift to state 220
-- On equality_operator shift to state 221
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production and_expression -> equality_expression

State 219:
## Known stack suffix:
## NEQ
## LR(1) items:
equality_operator -> NEQ . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equality_operator -> NEQ

State 220:
## Known stack suffix:
## EQEQ
## LR(1) items:
equality_operator -> EQEQ . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production equality_operator -> EQEQ

State 221:
## Known stack suffix:
## equality_expression equality_operator
## LR(1) items:
equality_expression -> equality_expression equality_operator . relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 222
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On cast_expression shift to state 196
-- On additive_expression shift to state 209
## Reductions:

State 222:
## Known stack suffix:
## equality_expression equality_operator relational_expression
## LR(1) items:
equality_expression -> equality_expression equality_operator relational_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
relational_expression -> relational_expression . relational_operator shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On LT shift to state 203
-- On LEQ shift to state 204
-- On GT shift to state 205
-- On GEQ shift to state 206
-- On relational_operator shift to state 207
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LPAREN LONG LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GOTO FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production equality_expression -> equality_expression equality_operator relational_expression

State 223:
## Known stack suffix:
## exclusive_or_expression HAT and_expression
## LR(1) items:
and_expression -> and_expression . AND equality_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
exclusive_or_expression -> exclusive_or_expression HAT and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On AND shift to state 224
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression

State 224:
## Known stack suffix:
## and_expression AND
## LR(1) items:
and_expression -> and_expression AND . equality_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On equality_expression shift to state 225
-- On cast_expression shift to state 196
-- On additive_expression shift to state 209
## Reductions:

State 225:
## Known stack suffix:
## and_expression AND equality_expression
## LR(1) items:
and_expression -> and_expression AND equality_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
equality_expression -> equality_expression . equality_operator relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On NEQ shift to state 219
-- On EQEQ shift to state 220
-- On equality_operator shift to state 221
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production and_expression -> and_expression AND equality_expression

State 226:
## Known stack suffix:
## and_expression
## LR(1) items:
and_expression -> and_expression . AND equality_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
exclusive_or_expression -> and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On AND shift to state 224
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production exclusive_or_expression -> and_expression

State 227:
## Known stack suffix:
## exclusive_or_expression
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression . HAT and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
inclusive_or_expression -> exclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On HAT shift to state 217
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production inclusive_or_expression -> exclusive_or_expression

State 228:
## Known stack suffix:
## inclusive_or_expression
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression . BAR exclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
logical_and_expression -> inclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
## Transitions:
-- On BAR shift to state 215
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production logical_and_expression -> inclusive_or_expression

State 229:
## Known stack suffix:
## logical_or_expression QUESTION expression
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION expression . COLON conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
expression -> expression . COMMA assignment_expression [ COMMA COLON ]
## Transitions:
-- On COMMA shift to state 230
-- On COLON shift to state 233
## Reductions:

State 230:
## Known stack suffix:
## expression COMMA
## LR(1) items:
expression -> expression COMMA . assignment_expression [ SEMICOLON RPAREN RBRACK COMMA COLON ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 232
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 231:
## Known stack suffix:
## conditional_expression
## LR(1) items:
assignment_expression -> conditional_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> conditional_expression

State 232:
## Known stack suffix:
## expression COMMA assignment_expression
## LR(1) items:
expression -> expression COMMA assignment_expression . [ SEMICOLON RPAREN RBRACK COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> expression COMMA assignment_expression

State 233:
## Known stack suffix:
## logical_or_expression QUESTION expression COLON
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION expression COLON . conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 234
-- On cast_expression shift to state 196
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 234:
## Known stack suffix:
## logical_or_expression QUESTION expression COLON conditional_expression
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression

State 235:
## Known stack suffix:
## assignment_expression
## LR(1) items:
expression -> assignment_expression . [ SEMICOLON RPAREN RBRACK COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression -> assignment_expression

State 236:
## Known stack suffix:
## logical_or_expression BARBAR
## LR(1) items:
logical_or_expression -> logical_or_expression BARBAR . logical_and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_and_expression shift to state 237
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On cast_expression shift to state 196
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 237:
## Known stack suffix:
## logical_or_expression BARBAR logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . ANDAND inclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
logical_or_expression -> logical_or_expression BARBAR logical_and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ]
## Transitions:
-- On ANDAND shift to state 213
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production logical_or_expression -> logical_or_expression BARBAR logical_and_expression

State 238:
## Known stack suffix:
## unary_expression assignment_operator assignment_expression
## LR(1) items:
assignment_expression -> unary_expression assignment_operator assignment_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production assignment_expression -> unary_expression assignment_operator assignment_expression

State 239:
## Known stack suffix:
## postfix_expression LPAREN compcert_pre_parser_option(argument_expression_list)
## LR(1) items:
postfix_expression -> postfix_expression LPAREN compcert_pre_parser_option(argument_expression_list) . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## postfix_expression LPAREN compcert_pre_parser_option(argument_expression_list) RPAREN
## LR(1) items:
postfix_expression -> postfix_expression LPAREN compcert_pre_parser_option(argument_expression_list) RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression LPAREN compcert_pre_parser_option(argument_expression_list) RPAREN

State 241:
## Known stack suffix:
## assignment_expression
## LR(1) items:
argument_expression_list -> assignment_expression . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argument_expression_list -> assignment_expression

State 242:
## Known stack suffix:
## argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA assignment_expression [ RPAREN COMMA ]
compcert_pre_parser_option(argument_expression_list) -> argument_expression_list . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 243
## Reductions:
-- On RPAREN
--   reduce production compcert_pre_parser_option(argument_expression_list) -> argument_expression_list

State 243:
## Known stack suffix:
## argument_expression_list COMMA
## LR(1) items:
argument_expression_list -> argument_expression_list COMMA . assignment_expression [ RPAREN COMMA ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 244
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 244:
## Known stack suffix:
## argument_expression_list COMMA assignment_expression
## LR(1) items:
argument_expression_list -> argument_expression_list COMMA assignment_expression . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production argument_expression_list -> argument_expression_list COMMA assignment_expression

State 245:
## Known stack suffix:
## postfix_expression LBRACK
## LR(1) items:
postfix_expression -> postfix_expression LBRACK . expression RBRACK [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 246
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 246:
## Known stack suffix:
## postfix_expression LBRACK expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RBRACK COMMA ]
postfix_expression -> postfix_expression LBRACK expression . RBRACK [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RBRACK shift to state 247
-- On COMMA shift to state 230
## Reductions:

State 247:
## Known stack suffix:
## postfix_expression LBRACK expression RBRACK
## LR(1) items:
postfix_expression -> postfix_expression LBRACK expression RBRACK . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK

State 248:
## Known stack suffix:
## postfix_expression INC
## LR(1) items:
postfix_expression -> postfix_expression INC . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression INC

State 249:
## Known stack suffix:
## postfix_expression DOT
## LR(1) items:
postfix_expression -> postfix_expression DOT . general_identifier [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 250
## Reductions:

State 250:
## Known stack suffix:
## postfix_expression DOT general_identifier
## LR(1) items:
postfix_expression -> postfix_expression DOT general_identifier . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression DOT general_identifier

State 251:
## Known stack suffix:
## postfix_expression DEC
## LR(1) items:
postfix_expression -> postfix_expression DEC . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> postfix_expression DEC

State 252:
## Known stack suffix:
## unary_operator cast_expression
## LR(1) items:
unary_expression -> unary_operator cast_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> unary_operator cast_expression

State 253:
## Known stack suffix:
## compcert_pre_parser_option(direct_abstract_declarator) LBRACK compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK)
## LR(1) items:
direct_abstract_declarator -> compcert_pre_parser_option(direct_abstract_declarator) LBRACK compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK) . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_abstract_declarator -> compcert_pre_parser_option(direct_abstract_declarator) LBRACK compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK)

State 254:
## Known stack suffix:
## assignment_expression
## LR(1) items:
optional(assignment_expression,RBRACK) -> assignment_expression . RBRACK [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RBRACK shift to state 255
## Reductions:

State 255:
## Known stack suffix:
## assignment_expression RBRACK
## LR(1) items:
optional(assignment_expression,RBRACK) -> assignment_expression RBRACK . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK

State 256:
## Known stack suffix:
## compcert_pre_parser_list(pointer1)
## LR(1) items:
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) [ RPAREN ]
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator [ RPAREN ]
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) [ STAR ]
declarator_noattrend -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) direct_declarator [ RPAREN PACKED ATTRIBUTE ALIGNAS ]
## Transitions:
-- On STAR shift to state 257
## Reductions:

State 257:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR
## LR(1) items:
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) [ RPAREN ]
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator [ RPAREN ]
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) [ STAR ]
declarator_noattrend -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) direct_declarator [ RPAREN PACKED ATTRIBUTE ALIGNAS ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 258
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 258:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . [ RPAREN ]
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . direct_abstract_declarator [ RPAREN ]
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . [ STAR ]
declarator_noattrend -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . direct_declarator [ RPAREN PACKED ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE STAR RPAREN RESTRICT PRE_NAME PACKED LPAREN LBRACK CONST ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE STAR RPAREN RESTRICT PRE_NAME PACKED LPAREN LBRACK CONST ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 14
-- On PRE_NAME shift to state 94
-- On PACKED shift to state 18
-- On LPAREN shift to state 143
-- On CONST shift to state 59
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 80
-- On direct_declarator shift to state 259
-- On direct_abstract_declarator shift to state 263
-- On declarator_identifier shift to state 157
-- On compcert_pre_parser_option(direct_abstract_declarator) shift to state 160
-- On attribute_specifier shift to state 81
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) ->

State 259:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) direct_declarator
## LR(1) items:
declarator_noattrend -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) direct_declarator . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LBRACK compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK) [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LPAREN context_parameter_type_list RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LPAREN save_context compcert_pre_parser_option(identifier_list) RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 101
-- On LBRACK shift to state 260
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production declarator_noattrend -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) direct_declarator

State 260:
## Known stack suffix:
## direct_declarator LBRACK
## LR(1) items:
direct_declarator -> direct_declarator LBRACK . compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK) [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 261
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 261:
## Known stack suffix:
## direct_declarator LBRACK compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
direct_declarator -> direct_declarator LBRACK compcert_pre_parser_option(type_qualifier_list) . optional(assignment_expression,RBRACK) [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE TILDE STRING_LITERAL STAR SIZEOF RESTRICT RBRACK PRE_NAME PLUS PACKED MINUS LPAREN INC DEC CONSTANT CONST BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE TILDE STRING_LITERAL STAR SIZEOF RESTRICT RBRACK PRE_NAME PLUS PACKED MINUS LPAREN INC DEC CONSTANT CONST BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RESTRICT shift to state 14
-- On RBRACK shift to state 163
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On PACKED shift to state 18
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On CONST shift to state 59
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On ATTRIBUTE shift to state 37
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On ALIGNAS shift to state 60
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On type_qualifier_noattr shift to state 80
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On optional(assignment_expression,RBRACK) shift to state 262
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On attribute_specifier shift to state 81
-- On assignment_expression shift to state 254
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 262:
## Known stack suffix:
## direct_declarator LBRACK compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK)
## LR(1) items:
direct_declarator -> direct_declarator LBRACK compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK) . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_declarator -> direct_declarator LBRACK compcert_pre_parser_option(type_qualifier_list) optional(assignment_expression,RBRACK)

State 263:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator
## LR(1) items:
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator . [ RPAREN COMMA ]
compcert_pre_parser_option(direct_abstract_declarator) -> direct_abstract_declarator . [ LBRACK ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On LPAREN shift to state 148
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) -> direct_abstract_declarator

State 264:
## Known stack suffix:
## LPAREN save_context abstract_declarator(type_name)
## LR(1) items:
direct_abstract_declarator -> LPAREN save_context abstract_declarator(type_name) . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RPAREN shift to state 265
## Reductions:

State 265:
## Known stack suffix:
## LPAREN save_context abstract_declarator(type_name) RPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN save_context abstract_declarator(type_name) RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_abstract_declarator -> LPAREN save_context abstract_declarator(type_name) RPAREN

State 266:
## Known stack suffix:
## LPAREN compcert_pre_parser_option(context_parameter_type_list)
## LR(1) items:
direct_abstract_declarator -> LPAREN compcert_pre_parser_option(context_parameter_type_list) . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RPAREN shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_abstract_declarator -> LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN

State 268:
## Known stack suffix:
## direct_abstract_declarator
## LR(1) items:
abstract_declarator(parameter_declaration) -> direct_abstract_declarator . [ RPAREN COMMA ]
compcert_pre_parser_option(direct_abstract_declarator) -> direct_abstract_declarator . [ LBRACK ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On LPAREN shift to state 148
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production abstract_declarator(parameter_declaration) -> direct_abstract_declarator
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) -> direct_abstract_declarator

State 269:
## Known stack suffix:
## declaration_specifiers(parameter_declaration) declare_varname(declarator)
## LR(1) items:
parameter_declaration -> declaration_specifiers(parameter_declaration) declare_varname(declarator) . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration -> declaration_specifiers(parameter_declaration) declare_varname(declarator)

State 270:
## Known stack suffix:
## declarator
## LR(1) items:
declare_varname(declarator) -> declarator . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declare_varname(declarator) -> declarator

State 271:
## Known stack suffix:
## declaration_specifiers(parameter_declaration) compcert_pre_parser_option(abstract_declarator(parameter_declaration))
## LR(1) items:
parameter_declaration -> declaration_specifiers(parameter_declaration) compcert_pre_parser_option(abstract_declarator(parameter_declaration)) . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production parameter_declaration -> declaration_specifiers(parameter_declaration) compcert_pre_parser_option(abstract_declarator(parameter_declaration))

State 272:
## Known stack suffix:
## compcert_pre_parser_list(pointer1)
## LR(1) items:
abstract_declarator(parameter_declaration) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) [ RPAREN COMMA ]
abstract_declarator(parameter_declaration) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator [ RPAREN COMMA ]
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) [ STAR ]
declarator_noattrend -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) direct_declarator [ RPAREN PACKED COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On STAR shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR
## LR(1) items:
abstract_declarator(parameter_declaration) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) [ RPAREN COMMA ]
abstract_declarator(parameter_declaration) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator [ RPAREN COMMA ]
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) [ STAR ]
declarator_noattrend -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) direct_declarator [ RPAREN PACKED COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 274
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 274:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
abstract_declarator(parameter_declaration) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . [ RPAREN COMMA ]
abstract_declarator(parameter_declaration) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . direct_abstract_declarator [ RPAREN COMMA ]
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . [ STAR ]
declarator_noattrend -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . direct_declarator [ RPAREN PACKED COMMA ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE STAR RPAREN RESTRICT PRE_NAME PACKED LPAREN LBRACK CONST COMMA ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE STAR RPAREN RESTRICT PRE_NAME PACKED LPAREN LBRACK CONST COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 14
-- On PRE_NAME shift to state 94
-- On PACKED shift to state 18
-- On LPAREN shift to state 143
-- On CONST shift to state 59
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 80
-- On direct_declarator shift to state 259
-- On direct_abstract_declarator shift to state 275
-- On declarator_identifier shift to state 157
-- On compcert_pre_parser_option(direct_abstract_declarator) shift to state 160
-- On attribute_specifier shift to state 81
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production abstract_declarator(parameter_declaration) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) ->

State 275:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator
## LR(1) items:
abstract_declarator(parameter_declaration) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator . [ RPAREN COMMA ]
compcert_pre_parser_option(direct_abstract_declarator) -> direct_abstract_declarator . [ LBRACK ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN compcert_pre_parser_option(context_parameter_type_list) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On LPAREN shift to state 148
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production abstract_declarator(parameter_declaration) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) -> direct_abstract_declarator

State 276:
## Known stack suffix:
## abstract_declarator(parameter_declaration)
## LR(1) items:
compcert_pre_parser_option(abstract_declarator(parameter_declaration)) -> abstract_declarator(parameter_declaration) . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(abstract_declarator(parameter_declaration)) -> abstract_declarator(parameter_declaration)

State 277:
## Known stack suffix:
## identifier_list
## LR(1) items:
compcert_pre_parser_option(identifier_list) -> identifier_list . [ RPAREN ]
identifier_list -> identifier_list . COMMA PRE_NAME VAR_NAME [ RPAREN COMMA ]
## Transitions:
-- On COMMA shift to state 278
## Reductions:
-- On RPAREN
--   reduce production compcert_pre_parser_option(identifier_list) -> identifier_list

State 278:
## Known stack suffix:
## identifier_list COMMA
## LR(1) items:
identifier_list -> identifier_list COMMA . PRE_NAME VAR_NAME [ RPAREN COMMA ]
## Transitions:
-- On PRE_NAME shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## identifier_list COMMA PRE_NAME
## LR(1) items:
identifier_list -> identifier_list COMMA PRE_NAME . VAR_NAME [ RPAREN COMMA ]
## Transitions:
-- On VAR_NAME shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## identifier_list COMMA PRE_NAME VAR_NAME
## LR(1) items:
identifier_list -> identifier_list COMMA PRE_NAME VAR_NAME . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production identifier_list -> identifier_list COMMA PRE_NAME VAR_NAME

State 281:
## Known stack suffix:
## direct_declarator LPAREN save_context compcert_pre_parser_option(identifier_list)
## LR(1) items:
direct_declarator -> direct_declarator LPAREN save_context compcert_pre_parser_option(identifier_list) . RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## direct_declarator LPAREN save_context compcert_pre_parser_option(identifier_list) RPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN save_context compcert_pre_parser_option(identifier_list) RPAREN . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_declarator -> direct_declarator LPAREN save_context compcert_pre_parser_option(identifier_list) RPAREN

State 283:
## Known stack suffix:
## direct_declarator LPAREN context_parameter_type_list
## LR(1) items:
direct_declarator -> direct_declarator LPAREN context_parameter_type_list . RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## direct_declarator LPAREN context_parameter_type_list RPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN context_parameter_type_list RPAREN . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production direct_declarator -> direct_declarator LPAREN context_parameter_type_list RPAREN

State 285:
## Known stack suffix:
## compcert_pre_parser_list(pointer1)
## LR(1) items:
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) [ STAR ]
declarator_noattrend -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) direct_declarator [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On STAR shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR
## LR(1) items:
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) [ STAR ]
declarator_noattrend -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) direct_declarator [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 287
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 287:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . [ STAR ]
declarator_noattrend -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . direct_declarator [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE STAR RESTRICT PRE_NAME PACKED LPAREN CONST ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE STAR RESTRICT PRE_NAME PACKED LPAREN CONST ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 14
-- On PRE_NAME shift to state 94
-- On PACKED shift to state 18
-- On LPAREN shift to state 98
-- On CONST shift to state 59
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 80
-- On direct_declarator shift to state 259
-- On declarator_identifier shift to state 157
-- On attribute_specifier shift to state 81
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)

State 288:
## Known stack suffix:
## struct_declarator_list
## LR(1) items:
compcert_pre_parser_option(struct_declarator_list) -> struct_declarator_list . [ SEMICOLON ]
struct_declarator_list -> struct_declarator_list . COMMA struct_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On COMMA shift to state 289
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(struct_declarator_list) -> struct_declarator_list

State 289:
## Known stack suffix:
## struct_declarator_list COMMA
## LR(1) items:
struct_declarator_list -> struct_declarator_list COMMA . struct_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On struct_declarator shift to state 290
-- On direct_declarator shift to state 100
-- On declarator_noattrend shift to state 153
-- On declarator_identifier shift to state 157
-- On declarator shift to state 291
-- On compcert_pre_parser_option(declarator) shift to state 292
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On COLON
--   reduce production compcert_pre_parser_option(declarator) ->

State 290:
## Known stack suffix:
## struct_declarator_list COMMA struct_declarator
## LR(1) items:
struct_declarator_list -> struct_declarator_list COMMA struct_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declarator_list -> struct_declarator_list COMMA struct_declarator

State 291:
## Known stack suffix:
## declarator
## LR(1) items:
compcert_pre_parser_option(declarator) -> declarator . [ COLON ]
struct_declarator -> declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production compcert_pre_parser_option(declarator) -> declarator
-- On SEMICOLON COMMA
--   reduce production struct_declarator -> declarator

State 292:
## Known stack suffix:
## compcert_pre_parser_option(declarator)
## LR(1) items:
struct_declarator -> compcert_pre_parser_option(declarator) . COLON conditional_expression [ SEMICOLON COMMA ]
## Transitions:
-- On COLON shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## compcert_pre_parser_option(declarator) COLON
## LR(1) items:
struct_declarator -> compcert_pre_parser_option(declarator) COLON . conditional_expression [ SEMICOLON COMMA ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 294
-- On cast_expression shift to state 196
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 294:
## Known stack suffix:
## compcert_pre_parser_option(declarator) COLON conditional_expression
## LR(1) items:
struct_declarator -> compcert_pre_parser_option(declarator) COLON conditional_expression . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declarator -> compcert_pre_parser_option(declarator) COLON conditional_expression

State 295:
## Known stack suffix:
## struct_declarator
## LR(1) items:
struct_declarator_list -> struct_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declarator_list -> struct_declarator

State 296:
## Known stack suffix:
## specifier_qualifier_list(struct_declaration) compcert_pre_parser_option(struct_declarator_list)
## LR(1) items:
struct_declaration -> specifier_qualifier_list(struct_declaration) compcert_pre_parser_option(struct_declarator_list) . SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT RESTRICT RBRACE PRE_NAME PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## specifier_qualifier_list(struct_declaration) compcert_pre_parser_option(struct_declarator_list) SEMICOLON
## LR(1) items:
struct_declaration -> specifier_qualifier_list(struct_declaration) compcert_pre_parser_option(struct_declarator_list) SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT RESTRICT RBRACE PRE_NAME PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) compcert_pre_parser_option(struct_declarator_list) SEMICOLON

State 298:
## Known stack suffix:
## compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT RESTRICT PRE_NAME PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT RESTRICT PRE_NAME PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On CONST shift to state 59
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 80
-- On attribute_specifier shift to state 81
## Reductions:

State 299:
## Known stack suffix:
## type_qualifier_list
## LR(1) items:
compcert_pre_parser_option(type_qualifier_list) -> type_qualifier_list . [ VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS ]
specifier_qualifier_list(type_name) -> type_qualifier_list . typedef_name compcert_pre_parser_option(type_qualifier_list) [ STAR RPAREN LPAREN LBRACK COMMA ]
specifier_qualifier_list(type_name) -> type_qualifier_list . type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name) [ STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 300
-- On type_specifier_no_typedef_name shift to state 302
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On enum_specifier shift to state 85
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) -> type_qualifier_list

State 300:
## Known stack suffix:
## type_qualifier_list typedef_name
## LR(1) items:
specifier_qualifier_list(type_name) -> type_qualifier_list typedef_name . compcert_pre_parser_option(type_qualifier_list) [ STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 301
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 301:
## Known stack suffix:
## type_qualifier_list typedef_name compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
specifier_qualifier_list(type_name) -> type_qualifier_list typedef_name compcert_pre_parser_option(type_qualifier_list) . [ STAR RPAREN LPAREN LBRACK COMMA ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST COMMA ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On CONST shift to state 59
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 80
-- On attribute_specifier shift to state 81
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production specifier_qualifier_list(type_name) -> type_qualifier_list typedef_name compcert_pre_parser_option(type_qualifier_list)

State 302:
## Known stack suffix:
## type_qualifier_list type_specifier_no_typedef_name
## LR(1) items:
specifier_qualifier_list(type_name) -> type_qualifier_list type_specifier_no_typedef_name . compcert_pre_parser_list(specifier_qualifier_no_typedef_name) [ STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On compcert_pre_parser_list(specifier_qualifier_no_typedef_name) shift to state 303
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(specifier_qualifier_no_typedef_name) ->

State 303:
## Known stack suffix:
## type_qualifier_list type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(specifier_qualifier_no_typedef_name) -> compcert_pre_parser_list(specifier_qualifier_no_typedef_name) . specifier_qualifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STAR SIGNED SHORT RPAREN RESTRICT PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST COMMA CHAR ATTRIBUTE ALIGNAS ]
specifier_qualifier_list(type_name) -> type_qualifier_list type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name) . [ STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 68
-- On type_qualifier_noattr shift to state 69
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On specifier_qualifier_no_typedef_name shift to state 84
-- On enum_specifier shift to state 85
-- On attribute_specifier shift to state 86
## Reductions:
-- On XOR_ASSIGN WHILE VAR_NAME TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRING_LITERAL STATIC STAR SLASH SIZEOF SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INLINE INC IF HAT GT GOTO GEQ FOR EXTERN EQEQ EQ EOF ELSE ELLIPSIS DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production specifier_qualifier_list(type_name) -> type_qualifier_list type_specifier_no_typedef_name compcert_pre_parser_list(specifier_qualifier_no_typedef_name)

State 304:
## Known stack suffix:
## ALIGNOF LPAREN type_name
## LR(1) items:
unary_expression -> ALIGNOF LPAREN type_name . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## ALIGNOF LPAREN type_name RPAREN
## LR(1) items:
unary_expression -> ALIGNOF LPAREN type_name RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN

State 306:
## Known stack suffix:
## specifier_qualifier_list(type_name)
## LR(1) items:
type_name -> specifier_qualifier_list(type_name) . compcert_pre_parser_option(abstract_declarator(type_name)) [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 307
-- On direct_abstract_declarator shift to state 147
-- On compcert_pre_parser_option(direct_abstract_declarator) shift to state 160
-- On compcert_pre_parser_option(abstract_declarator(type_name)) shift to state 312
-- On compcert_pre_parser_list(pointer1) shift to state 309
-- On abstract_declarator(type_name) shift to state 313
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On RPAREN COMMA
--   reduce production compcert_pre_parser_option(abstract_declarator(type_name)) ->
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) ->

State 307:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN . save_context abstract_declarator(type_name) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> LPAREN . compcert_pre_parser_option(context_parameter_type_list) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On save_context shift to state 308
-- On context_parameter_type_list shift to state 150
-- On compcert_pre_parser_option(context_parameter_type_list) shift to state 266
## Reductions:
-- On RPAREN
--   reduce production compcert_pre_parser_option(context_parameter_type_list) ->
-- On VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS
--   reduce production save_context ->

State 308:
## Known stack suffix:
## LPAREN save_context
## LR(1) items:
context_parameter_type_list -> save_context . parameter_type_list save_context [ RPAREN ]
direct_abstract_declarator -> LPAREN save_context . abstract_declarator(type_name) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 16
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LPAREN shift to state 307
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 109
-- On type_specifier_no_typedef_name shift to state 115
-- On type_qualifier_noattr shift to state 123
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 131
-- On parameter_type_list shift to state 136
-- On parameter_list shift to state 138
-- On parameter_declaration shift to state 146
-- On function_specifier shift to state 126
-- On enum_specifier shift to state 85
-- On direct_abstract_declarator shift to state 147
-- On declaration_specifiers(parameter_declaration) shift to state 142
-- On compcert_pre_parser_option(direct_abstract_declarator) shift to state 160
-- On compcert_pre_parser_list(pointer1) shift to state 309
-- On attribute_specifier shift to state 128
-- On abstract_declarator(type_name) shift to state 264
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) ->

State 309:
## Known stack suffix:
## compcert_pre_parser_list(pointer1)
## LR(1) items:
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) [ RPAREN COMMA ]
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator [ RPAREN COMMA ]
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) . STAR compcert_pre_parser_option(type_qualifier_list) [ STAR ]
## Transitions:
-- On STAR shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR
## LR(1) items:
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) [ RPAREN COMMA ]
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) direct_abstract_declarator [ RPAREN COMMA ]
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR . compcert_pre_parser_option(type_qualifier_list) [ STAR ]
## Transitions:
-- On type_qualifier_list shift to state 57
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 311
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 311:
## Known stack suffix:
## compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
## LR(1) items:
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . [ RPAREN COMMA ]
abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . direct_abstract_declarator [ RPAREN COMMA ]
compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list) . [ STAR ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . type_qualifier_noattr [ VOLATILE STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST COMMA ATTRIBUTE ALIGNAS ]
type_qualifier_list -> compcert_pre_parser_option(type_qualifier_list) . attribute_specifier [ VOLATILE STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 14
-- On PACKED shift to state 18
-- On LPAREN shift to state 307
-- On CONST shift to state 59
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 80
-- On direct_abstract_declarator shift to state 263
-- On compcert_pre_parser_option(direct_abstract_declarator) shift to state 160
-- On attribute_specifier shift to state 81
## Reductions:
-- On XOR_ASSIGN WHILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production abstract_declarator(type_name) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) -> compcert_pre_parser_list(pointer1) STAR compcert_pre_parser_option(type_qualifier_list)
-- On LBRACK
--   reduce production compcert_pre_parser_option(direct_abstract_declarator) ->

State 312:
## Known stack suffix:
## specifier_qualifier_list(type_name) compcert_pre_parser_option(abstract_declarator(type_name))
## LR(1) items:
type_name -> specifier_qualifier_list(type_name) compcert_pre_parser_option(abstract_declarator(type_name)) . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_name -> specifier_qualifier_list(type_name) compcert_pre_parser_option(abstract_declarator(type_name))

State 313:
## Known stack suffix:
## abstract_declarator(type_name)
## LR(1) items:
compcert_pre_parser_option(abstract_declarator(type_name)) -> abstract_declarator(type_name) . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(abstract_declarator(type_name)) -> abstract_declarator(type_name)

State 314:
## Known stack suffix:
## ALIGNAS LPAREN type_name
## LR(1) items:
attribute_specifier -> ALIGNAS LPAREN type_name . RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## ALIGNAS LPAREN type_name RPAREN
## LR(1) items:
attribute_specifier -> ALIGNAS LPAREN type_name RPAREN . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN

State 316:
## Known stack suffix:
## ALIGNAS LPAREN argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA assignment_expression [ RPAREN COMMA ]
attribute_specifier -> ALIGNAS LPAREN argument_expression_list . RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 317
-- On COMMA shift to state 243
## Reductions:

State 317:
## Known stack suffix:
## ALIGNAS LPAREN argument_expression_list RPAREN
## LR(1) items:
attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN

State 318:
## Known stack suffix:
## BUILTIN_OFFSETOF LPAREN type_name
## LR(1) items:
postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name . COMMA general_identifier RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name . COMMA general_identifier designator_list RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On COMMA shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## BUILTIN_OFFSETOF LPAREN type_name COMMA
## LR(1) items:
postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name COMMA . general_identifier RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name COMMA . general_identifier designator_list RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier
## LR(1) items:
postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier . designator_list RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 321
-- On designator_list shift to state 322
-- On compcert_pre_parser_option(designator_list) shift to state 324
## Reductions:
-- On LBRACK DOT
--   reduce production compcert_pre_parser_option(designator_list) ->

State 321:
## Known stack suffix:
## BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier RPAREN
## LR(1) items:
postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier RPAREN

State 322:
## Known stack suffix:
## BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier designator_list
## LR(1) items:
compcert_pre_parser_option(designator_list) -> designator_list . [ LBRACK DOT ]
postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier designator_list . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 323
## Reductions:
-- On LBRACK DOT
--   reduce production compcert_pre_parser_option(designator_list) -> designator_list

State 323:
## Known stack suffix:
## BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier designator_list RPAREN
## LR(1) items:
postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier designator_list RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> BUILTIN_OFFSETOF LPAREN type_name COMMA general_identifier designator_list RPAREN

State 324:
## Known stack suffix:
## compcert_pre_parser_option(designator_list)
## LR(1) items:
designator_list -> compcert_pre_parser_option(designator_list) . designator [ RPAREN LBRACK EQ DOT ]
## Transitions:
-- On LBRACK shift to state 325
-- On DOT shift to state 328
-- On designator shift to state 330
## Reductions:

State 325:
## Known stack suffix:
## LBRACK
## LR(1) items:
designator -> LBRACK . conditional_expression RBRACK [ RPAREN LBRACK EQ DOT ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 326
-- On cast_expression shift to state 196
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 326:
## Known stack suffix:
## LBRACK conditional_expression
## LR(1) items:
designator -> LBRACK conditional_expression . RBRACK [ RPAREN LBRACK EQ DOT ]
## Transitions:
-- On RBRACK shift to state 327
## Reductions:

State 327:
## Known stack suffix:
## LBRACK conditional_expression RBRACK
## LR(1) items:
designator -> LBRACK conditional_expression RBRACK . [ RPAREN LBRACK EQ DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production designator -> LBRACK conditional_expression RBRACK

State 328:
## Known stack suffix:
## DOT
## LR(1) items:
designator -> DOT . general_identifier [ RPAREN LBRACK EQ DOT ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 329
## Reductions:

State 329:
## Known stack suffix:
## DOT general_identifier
## LR(1) items:
designator -> DOT general_identifier . [ RPAREN LBRACK EQ DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production designator -> DOT general_identifier

State 330:
## Known stack suffix:
## compcert_pre_parser_option(designator_list) designator
## LR(1) items:
designator_list -> compcert_pre_parser_option(designator_list) designator . [ RPAREN LBRACK EQ DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production designator_list -> compcert_pre_parser_option(designator_list) designator

State 331:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN assignment_expression
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression . COMMA type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On COMMA shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN assignment_expression COMMA
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA . type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 56
-- On type_specifier_no_typedef_name shift to state 66
-- On type_qualifier_list shift to state 299
-- On type_name shift to state 333
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On specifier_qualifier_list(type_name) shift to state 306
-- On enum_specifier shift to state 85
-- On compcert_pre_parser_option(type_qualifier_list) shift to state 298
## Reductions:
-- On VOLATILE RESTRICT PACKED CONST ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_option(type_qualifier_list) ->

State 333:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 334
## Reductions:

State 334:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN

State 335:
## Known stack suffix:
## DEC unary_expression
## LR(1) items:
unary_expression -> DEC unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> DEC unary_expression

State 336:
## Known stack suffix:
## gcc_attribute_word LPAREN typedef_name
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN typedef_name . COMMA argument_expression_list RPAREN [ RPAREN COMMA ]
## Transitions:
-- On COMMA shift to state 337
## Reductions:

State 337:
## Known stack suffix:
## gcc_attribute_word LPAREN typedef_name COMMA
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN typedef_name COMMA . argument_expression_list RPAREN [ RPAREN COMMA ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 241
-- On argument_expression_list shift to state 338
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 338:
## Known stack suffix:
## gcc_attribute_word LPAREN typedef_name COMMA argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA assignment_expression [ RPAREN COMMA ]
gcc_attribute -> gcc_attribute_word LPAREN typedef_name COMMA argument_expression_list . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 339
-- On COMMA shift to state 243
## Reductions:

State 339:
## Known stack suffix:
## gcc_attribute_word LPAREN typedef_name COMMA argument_expression_list RPAREN
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN typedef_name COMMA argument_expression_list RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production gcc_attribute -> gcc_attribute_word LPAREN typedef_name COMMA argument_expression_list RPAREN

State 340:
## Known stack suffix:
## gcc_attribute_word LPAREN compcert_pre_parser_option(argument_expression_list)
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN compcert_pre_parser_option(argument_expression_list) . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## gcc_attribute_word LPAREN compcert_pre_parser_option(argument_expression_list) RPAREN
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN compcert_pre_parser_option(argument_expression_list) RPAREN . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production gcc_attribute -> gcc_attribute_word LPAREN compcert_pre_parser_option(argument_expression_list) RPAREN

State 342:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN gcc_attribute_list
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list . RPAREN RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
gcc_attribute_list -> gcc_attribute_list . COMMA gcc_attribute [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 343
-- On COMMA shift to state 345
## Reductions:

State 343:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN . RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 344
## Reductions:

State 344:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN

State 345:
## Known stack suffix:
## gcc_attribute_list COMMA
## LR(1) items:
gcc_attribute_list -> gcc_attribute_list COMMA . gcc_attribute [ RPAREN COMMA ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On PACKED shift to state 42
-- On CONST shift to state 43
-- On typedef_name shift to state 44
-- On general_identifier shift to state 45
-- On gcc_attribute_word shift to state 46
-- On gcc_attribute shift to state 346
## Reductions:
-- On RPAREN COMMA
--   reduce production gcc_attribute ->

State 346:
## Known stack suffix:
## gcc_attribute_list COMMA gcc_attribute
## LR(1) items:
gcc_attribute_list -> gcc_attribute_list COMMA gcc_attribute . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production gcc_attribute_list -> gcc_attribute_list COMMA gcc_attribute

State 347:
## Known stack suffix:
## gcc_attribute
## LR(1) items:
gcc_attribute_list -> gcc_attribute . [ RPAREN COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production gcc_attribute_list -> gcc_attribute

State 348:
## Known stack suffix:
## ENUM attribute_specifier_list
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list . compcert_pre_parser_option(other_identifier) LBRACE enumerator_list compcert_pre_parser_option(COMMA) RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
enum_specifier -> ENUM attribute_specifier_list . general_identifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 349
-- On compcert_pre_parser_option(other_identifier) shift to state 350
## Reductions:
-- On LBRACE
--   reduce production compcert_pre_parser_option(other_identifier) ->

State 349:
## Known stack suffix:
## ENUM attribute_specifier_list general_identifier
## LR(1) items:
compcert_pre_parser_option(other_identifier) -> general_identifier . [ LBRACE ]
enum_specifier -> ENUM attribute_specifier_list general_identifier . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On LBRACE
--   reduce production compcert_pre_parser_option(other_identifier) -> general_identifier
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier

State 350:
## Known stack suffix:
## ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier)
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) . LBRACE enumerator_list compcert_pre_parser_option(COMMA) RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LBRACE shift to state 351
## Reductions:

State 351:
## Known stack suffix:
## ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE . enumerator_list compcert_pre_parser_option(COMMA) RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 352
-- On enumerator_list shift to state 353
-- On enumerator shift to state 355
-- On enumeration_constant shift to state 356
-- On declare_varname(enumerator) shift to state 362
## Reductions:

State 352:
## Known stack suffix:
## general_identifier
## LR(1) items:
enumeration_constant -> general_identifier . [ RBRACE EQ COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enumeration_constant -> general_identifier

State 353:
## Known stack suffix:
## ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE enumerator_list
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE enumerator_list . compcert_pre_parser_option(COMMA) RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
enumerator_list -> enumerator_list . COMMA declare_varname(enumerator) [ RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 354
-- On compcert_pre_parser_option(COMMA) shift to state 360
## Reductions:
-- On RBRACE
--   reduce production compcert_pre_parser_option(COMMA) ->

State 354:
## Known stack suffix:
## enumerator_list COMMA
## LR(1) items:
compcert_pre_parser_option(COMMA) -> COMMA . [ RBRACE ]
enumerator_list -> enumerator_list COMMA . declare_varname(enumerator) [ RBRACE COMMA ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 352
-- On enumerator shift to state 355
-- On enumeration_constant shift to state 356
-- On declare_varname(enumerator) shift to state 359
## Reductions:
-- On RBRACE
--   reduce production compcert_pre_parser_option(COMMA) -> COMMA

State 355:
## Known stack suffix:
## enumerator
## LR(1) items:
declare_varname(enumerator) -> enumerator . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declare_varname(enumerator) -> enumerator

State 356:
## Known stack suffix:
## enumeration_constant
## LR(1) items:
enumerator -> enumeration_constant . [ RBRACE COMMA ]
enumerator -> enumeration_constant . EQ conditional_expression [ RBRACE COMMA ]
## Transitions:
-- On EQ shift to state 357
## Reductions:
-- On RBRACE COMMA
--   reduce production enumerator -> enumeration_constant

State 357:
## Known stack suffix:
## enumeration_constant EQ
## LR(1) items:
enumerator -> enumeration_constant EQ . conditional_expression [ RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 358
-- On cast_expression shift to state 196
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 358:
## Known stack suffix:
## enumeration_constant EQ conditional_expression
## LR(1) items:
enumerator -> enumeration_constant EQ conditional_expression . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enumerator -> enumeration_constant EQ conditional_expression

State 359:
## Known stack suffix:
## enumerator_list COMMA declare_varname(enumerator)
## LR(1) items:
enumerator_list -> enumerator_list COMMA declare_varname(enumerator) . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enumerator_list -> enumerator_list COMMA declare_varname(enumerator)

State 360:
## Known stack suffix:
## ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE enumerator_list compcert_pre_parser_option(COMMA)
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE enumerator_list compcert_pre_parser_option(COMMA) . RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RBRACE shift to state 361
## Reductions:

State 361:
## Known stack suffix:
## ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE enumerator_list compcert_pre_parser_option(COMMA) RBRACE
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE enumerator_list compcert_pre_parser_option(COMMA) RBRACE . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enum_specifier -> ENUM attribute_specifier_list compcert_pre_parser_option(other_identifier) LBRACE enumerator_list compcert_pre_parser_option(COMMA) RBRACE

State 362:
## Known stack suffix:
## declare_varname(enumerator)
## LR(1) items:
enumerator_list -> declare_varname(enumerator) . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enumerator_list -> declare_varname(enumerator)

State 363:
## Known stack suffix:
## LPAREN type_name
## LR(1) items:
postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 364
## Reductions:

State 364:
## Known stack suffix:
## LPAREN type_name RPAREN
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On LBRACE shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## LPAREN type_name RPAREN LBRACE
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN LBRACE . initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On initializer_list shift to state 366
-- On designator_list shift to state 368
-- On designation shift to state 370
-- On compcert_pre_parser_option(designator_list) shift to state 324
-- On compcert_pre_parser_option(designation) shift to state 376
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN LBRACE INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF
--   reduce production compcert_pre_parser_option(designation) ->
-- On LBRACK DOT
--   reduce production compcert_pre_parser_option(designator_list) ->

State 366:
## Known stack suffix:
## LPAREN type_name RPAREN LBRACE initializer_list
## LR(1) items:
initializer_list -> initializer_list . COMMA compcert_pre_parser_option(designation) c_initializer [ RBRACE COMMA ]
postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list . compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On COMMA shift to state 367
-- On compcert_pre_parser_option(COMMA) shift to state 380
## Reductions:
-- On RBRACE
--   reduce production compcert_pre_parser_option(COMMA) ->

State 367:
## Known stack suffix:
## initializer_list COMMA
## LR(1) items:
compcert_pre_parser_option(COMMA) -> COMMA . [ RBRACE ]
initializer_list -> initializer_list COMMA . compcert_pre_parser_option(designation) c_initializer [ RBRACE COMMA ]
## Transitions:
-- On designator_list shift to state 368
-- On designation shift to state 370
-- On compcert_pre_parser_option(designator_list) shift to state 324
-- On compcert_pre_parser_option(designation) shift to state 371
## Reductions:
-- On RBRACE
--   reduce production compcert_pre_parser_option(COMMA) -> COMMA
-- On TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN LBRACE INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF
--   reduce production compcert_pre_parser_option(designation) ->
-- On LBRACK DOT
--   reduce production compcert_pre_parser_option(designator_list) ->

State 368:
## Known stack suffix:
## designator_list
## LR(1) items:
compcert_pre_parser_option(designator_list) -> designator_list . [ LBRACK DOT ]
designation -> designator_list . EQ [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN LBRACE INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
-- On EQ shift to state 369
## Reductions:
-- On LBRACK DOT
--   reduce production compcert_pre_parser_option(designator_list) -> designator_list

State 369:
## Known stack suffix:
## designator_list EQ
## LR(1) items:
designation -> designator_list EQ . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN LBRACE INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production designation -> designator_list EQ

State 370:
## Known stack suffix:
## designation
## LR(1) items:
compcert_pre_parser_option(designation) -> designation . [ TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN LBRACE INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(designation) -> designation

State 371:
## Known stack suffix:
## initializer_list COMMA compcert_pre_parser_option(designation)
## LR(1) items:
initializer_list -> initializer_list COMMA compcert_pre_parser_option(designation) . c_initializer [ RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LBRACE shift to state 372
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On c_initializer shift to state 379
-- On assignment_expression shift to state 378
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 372:
## Known stack suffix:
## LBRACE
## LR(1) items:
c_initializer -> LBRACE . initializer_list compcert_pre_parser_option(COMMA) RBRACE [ SEMICOLON RBRACE COMMA ]
## Transitions:
-- On initializer_list shift to state 373
-- On designator_list shift to state 368
-- On designation shift to state 370
-- On compcert_pre_parser_option(designator_list) shift to state 324
-- On compcert_pre_parser_option(designation) shift to state 376
## Reductions:
-- On TILDE STRING_LITERAL STAR SIZEOF PRE_NAME PLUS MINUS LPAREN LBRACE INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF
--   reduce production compcert_pre_parser_option(designation) ->
-- On LBRACK DOT
--   reduce production compcert_pre_parser_option(designator_list) ->

State 373:
## Known stack suffix:
## LBRACE initializer_list
## LR(1) items:
c_initializer -> LBRACE initializer_list . compcert_pre_parser_option(COMMA) RBRACE [ SEMICOLON RBRACE COMMA ]
initializer_list -> initializer_list . COMMA compcert_pre_parser_option(designation) c_initializer [ RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 367
-- On compcert_pre_parser_option(COMMA) shift to state 374
## Reductions:
-- On RBRACE
--   reduce production compcert_pre_parser_option(COMMA) ->

State 374:
## Known stack suffix:
## LBRACE initializer_list compcert_pre_parser_option(COMMA)
## LR(1) items:
c_initializer -> LBRACE initializer_list compcert_pre_parser_option(COMMA) . RBRACE [ SEMICOLON RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE
## LR(1) items:
c_initializer -> LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production c_initializer -> LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE

State 376:
## Known stack suffix:
## compcert_pre_parser_option(designation)
## LR(1) items:
initializer_list -> compcert_pre_parser_option(designation) . c_initializer [ RBRACE COMMA ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LBRACE shift to state 372
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On c_initializer shift to state 377
-- On assignment_expression shift to state 378
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 377:
## Known stack suffix:
## compcert_pre_parser_option(designation) c_initializer
## LR(1) items:
initializer_list -> compcert_pre_parser_option(designation) c_initializer . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initializer_list -> compcert_pre_parser_option(designation) c_initializer

State 378:
## Known stack suffix:
## assignment_expression
## LR(1) items:
c_initializer -> assignment_expression . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production c_initializer -> assignment_expression

State 379:
## Known stack suffix:
## initializer_list COMMA compcert_pre_parser_option(designation) c_initializer
## LR(1) items:
initializer_list -> initializer_list COMMA compcert_pre_parser_option(designation) c_initializer . [ RBRACE COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production initializer_list -> initializer_list COMMA compcert_pre_parser_option(designation) c_initializer

State 380:
## Known stack suffix:
## LPAREN type_name RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA)
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) . RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RBRACE shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## LPAREN type_name RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE

State 382:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
primary_expression -> LPAREN expression . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 383
-- On COMMA shift to state 230
## Reductions:

State 383:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
primary_expression -> LPAREN expression RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production primary_expression -> LPAREN expression RPAREN

State 384:
## Known stack suffix:
## INC unary_expression
## LR(1) items:
unary_expression -> INC unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> INC unary_expression

State 385:
## Known stack suffix:
## LPAREN type_name
## LR(1) items:
cast_expression -> LPAREN type_name . RPAREN cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 386
## Reductions:

State 386:
## Known stack suffix:
## LPAREN type_name RPAREN
## LR(1) items:
cast_expression -> LPAREN type_name RPAREN . cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LBRACE shift to state 365
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On cast_expression shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## LPAREN type_name RPAREN cast_expression
## LR(1) items:
cast_expression -> LPAREN type_name RPAREN cast_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cast_expression -> LPAREN type_name RPAREN cast_expression

State 388:
## Known stack suffix:
## SIZEOF LPAREN type_name
## LR(1) items:
postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> SIZEOF LPAREN type_name . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 389
## Reductions:

State 389:
## Known stack suffix:
## SIZEOF LPAREN type_name RPAREN
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list compcert_pre_parser_option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> SIZEOF LPAREN type_name RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On LBRACE shift to state 365
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN

State 390:
## Known stack suffix:
## SIZEOF unary_expression
## LR(1) items:
unary_expression -> SIZEOF unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production unary_expression -> SIZEOF unary_expression

State 391:
## Known stack suffix:
## PACKED LPAREN argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA assignment_expression [ RPAREN COMMA ]
attribute_specifier -> PACKED LPAREN argument_expression_list . RPAREN [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 392
-- On COMMA shift to state 243
## Reductions:

State 392:
## Known stack suffix:
## PACKED LPAREN argument_expression_list RPAREN
## LR(1) items:
attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PRE_NAME PLUS PACKED NORETURN MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN

State 393:
## Known stack suffix:
## TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name
## LR(1) items:
declaration_specifiers_typedef -> TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 394
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 394:
## Known stack suffix:
## TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers_typedef -> TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 395:
## Known stack suffix:
## TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers_typedef -> TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 396
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 396:
## Known stack suffix:
## TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers_typedef -> TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 397:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
translation_item -> SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production translation_item -> SEMICOLON

State 398:
## Known stack suffix:
## PRAGMA
## LR(1) items:
translation_item -> PRAGMA . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production translation_item -> PRAGMA

State 399:
## Known stack suffix:
## compcert_pre_parser_list(translation_item) EOF
## LR(1) items:
translation_unit_file -> compcert_pre_parser_list(translation_item) EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production translation_unit_file -> compcert_pre_parser_list(translation_item) EOF

State 400:
## Known stack suffix:
## typedef_name
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 401
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 401:
## Known stack suffix:
## typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(external_declaration)) -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TYPEDEF shift to state 402
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(external_declaration)) -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 402:
## Known stack suffix:
## typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 403
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 403:
## Known stack suffix:
## typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers_typedef -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type)

State 404:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 405
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 405:
## Known stack suffix:
## type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(external_declaration)) -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TYPEDEF shift to state 406
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(external_declaration)) -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 406:
## Known stack suffix:
## type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 407
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 407:
## Known stack suffix:
## type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers_typedef -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 408:
## Known stack suffix:
## compcert_pre_parser_list(translation_item) translation_item
## LR(1) items:
compcert_pre_parser_list(translation_item) -> compcert_pre_parser_list(translation_item) translation_item . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(translation_item) -> compcert_pre_parser_list(translation_item) translation_item

State 409:
## Known stack suffix:
## rlist(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> rlist(declaration_specifier_no_type) . typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers(declaration(external_declaration)) -> rlist(declaration_specifier_no_type) . type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) . typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) . type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TYPEDEF shift to state 410
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 416
-- On type_specifier_no_typedef_name shift to state 420
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On enum_specifier shift to state 85
## Reductions:

State 410:
## Known stack suffix:
## rlist(declaration_specifier_no_type) TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF . compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF . compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 411
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 411:
## Known stack suffix:
## rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) . typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) . type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 16
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 412
-- On type_specifier_no_typedef_name shift to state 414
-- On type_qualifier_noattr shift to state 111
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On enum_specifier shift to state 85
-- On attribute_specifier shift to state 114
## Reductions:

State 412:
## Known stack suffix:
## rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name
## LR(1) items:
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 413
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 413:
## Known stack suffix:
## rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 414:
## Known stack suffix:
## rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 415
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 415:
## Known stack suffix:
## rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 416:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> rlist(declaration_specifier_no_type) typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 417
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 417:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(external_declaration)) -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TYPEDEF shift to state 418
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(external_declaration)) -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 418:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 419
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 419:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type)

State 420:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 421
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 421:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(external_declaration)) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TYPEDEF shift to state 422
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(external_declaration)) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 422:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 423
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 423:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 424:
## Known stack suffix:
## function_definition1
## LR(1) items:
function_definition -> function_definition1 . compound_statement [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On save_context shift to state 425
-- On compound_statement shift to state 573
## Default reduction:
-- After reading the next token, reduce production save_context ->

State 425:
## Known stack suffix:
## save_context
## LR(1) items:
compound_statement -> save_context . LBRACE compcert_pre_parser_option(block_item_list) RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LBRACE shift to state 426
## Reductions:

State 426:
## Known stack suffix:
## save_context LBRACE
## LR(1) items:
compound_statement -> save_context LBRACE . compcert_pre_parser_option(block_item_list) RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On compcert_pre_parser_option(block_item_list) shift to state 427
-- On block_item_list shift to state 572
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(block_item_list) ->

State 427:
## Known stack suffix:
## save_context LBRACE compcert_pre_parser_option(block_item_list)
## LR(1) items:
block_item_list -> compcert_pre_parser_option(block_item_list) . block_item [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
compound_statement -> save_context LBRACE compcert_pre_parser_option(block_item_list) . RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TYPEDEF shift to state 8
-- On TILDE shift to state 20
-- On STRUCT shift to state 10
-- On STRING_LITERAL shift to state 21
-- On STATIC shift to state 11
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RETURN shift to state 428
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On RBRACE shift to state 432
-- On PRE_NAME shift to state 433
-- On PRAGMA shift to state 435
-- On PLUS shift to state 26
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On ALIGNAS shift to state 60
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 568
-- On type_specifier_no_typedef_name shift to state 516
-- On type_qualifier_noattr shift to state 123
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On string_literals_list shift to state 166
-- On storage_class_specifier_no_typedef shift to state 124
-- On statement shift to state 569
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On rlist(declaration_specifier_no_type) shift to state 518
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On function_specifier shift to state 126
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On enum_specifier shift to state 85
-- On declaration_specifiers_typedef shift to state 533
-- On declaration_specifiers(declaration(block_item)) shift to state 542
-- On declaration(block_item) shift to state 570
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On block_item shift to state 571
-- On attribute_specifier shift to state 128
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 428:
## Known stack suffix:
## RETURN
## LR(1) items:
jump_statement -> RETURN . compcert_pre_parser_option(expression) SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compcert_pre_parser_option(expression) shift to state 430
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->

State 429:
## Known stack suffix:
## expression
## LR(1) items:
compcert_pre_parser_option(expression) -> expression . [ SEMICOLON ]
expression -> expression . COMMA assignment_expression [ SEMICOLON COMMA ]
## Transitions:
-- On COMMA shift to state 230
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) -> expression

State 430:
## Known stack suffix:
## RETURN compcert_pre_parser_option(expression)
## LR(1) items:
jump_statement -> RETURN compcert_pre_parser_option(expression) . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 431
## Reductions:

State 431:
## Known stack suffix:
## RETURN compcert_pre_parser_option(expression) SEMICOLON
## LR(1) items:
jump_statement -> RETURN compcert_pre_parser_option(expression) SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jump_statement -> RETURN compcert_pre_parser_option(expression) SEMICOLON

State 432:
## Known stack suffix:
## save_context LBRACE compcert_pre_parser_option(block_item_list) RBRACE
## LR(1) items:
compound_statement -> save_context LBRACE compcert_pre_parser_option(block_item_list) RBRACE . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN EOF ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compound_statement -> save_context LBRACE compcert_pre_parser_option(block_item_list) RBRACE

State 433:
## Known stack suffix:
## PRE_NAME
## LR(1) items:
general_identifier -> PRE_NAME . VAR_NAME [ COLON ]
primary_expression -> PRE_NAME . VAR_NAME [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RIGHT_ASSIGN RIGHT QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
typedef_name -> PRE_NAME . TYPEDEF_NAME [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST COLON AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 434
-- On TYPEDEF_NAME shift to state 17
## Reductions:

State 434:
## Known stack suffix:
## PRE_NAME VAR_NAME
## LR(1) items:
general_identifier -> PRE_NAME VAR_NAME . [ COLON ]
primary_expression -> PRE_NAME VAR_NAME . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RIGHT_ASSIGN RIGHT QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production general_identifier -> PRE_NAME VAR_NAME
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production primary_expression -> PRE_NAME VAR_NAME

State 435:
## Known stack suffix:
## PRAGMA
## LR(1) items:
block_item -> PRAGMA . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_item -> PRAGMA

State 436:
## Known stack suffix:
## GOTO
## LR(1) items:
jump_statement -> GOTO . general_identifier SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 437
## Reductions:

State 437:
## Known stack suffix:
## GOTO general_identifier
## LR(1) items:
jump_statement -> GOTO general_identifier . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 438
## Reductions:

State 438:
## Known stack suffix:
## GOTO general_identifier SEMICOLON
## LR(1) items:
jump_statement -> GOTO general_identifier SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jump_statement -> GOTO general_identifier SEMICOLON

State 439:
## Known stack suffix:
## DEFAULT
## LR(1) items:
labeled_statement -> DEFAULT . COLON statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On COLON shift to state 440
## Reductions:

State 440:
## Known stack suffix:
## DEFAULT COLON
## LR(1) items:
labeled_statement -> DEFAULT COLON . statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RETURN shift to state 428
-- On PRE_NAME shift to state 433
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 44
-- On string_literals_list shift to state 166
-- On statement shift to state 567
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 441:
## Known stack suffix:
## CONTINUE
## LR(1) items:
jump_statement -> CONTINUE . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 442
## Reductions:

State 442:
## Known stack suffix:
## CONTINUE SEMICOLON
## LR(1) items:
jump_statement -> CONTINUE SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jump_statement -> CONTINUE SEMICOLON

State 443:
## Known stack suffix:
## CASE
## LR(1) items:
labeled_statement -> CASE . conditional_expression COLON statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 165
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 444
-- On cast_expression shift to state 196
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 444:
## Known stack suffix:
## CASE conditional_expression
## LR(1) items:
labeled_statement -> CASE conditional_expression . COLON statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On COLON shift to state 445
## Reductions:

State 445:
## Known stack suffix:
## CASE conditional_expression COLON
## LR(1) items:
labeled_statement -> CASE conditional_expression COLON . statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RETURN shift to state 428
-- On PRE_NAME shift to state 433
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 44
-- On string_literals_list shift to state 166
-- On statement shift to state 480
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 446:
## Known stack suffix:
## BREAK
## LR(1) items:
jump_statement -> BREAK . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 447
## Reductions:

State 447:
## Known stack suffix:
## BREAK SEMICOLON
## LR(1) items:
jump_statement -> BREAK SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production jump_statement -> BREAK SEMICOLON

State 448:
## Known stack suffix:
## ASM
## LR(1) items:
asm_statement -> ASM . asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 449
-- On CONST shift to state 450
-- On asm_attributes shift to state 453
## Reductions:
-- On LPAREN
--   reduce production asm_attributes ->

State 449:
## Known stack suffix:
## VOLATILE
## LR(1) items:
asm_attributes -> VOLATILE . asm_attributes [ LPAREN ]
## Transitions:
-- On VOLATILE shift to state 449
-- On CONST shift to state 450
-- On asm_attributes shift to state 452
## Reductions:
-- On LPAREN
--   reduce production asm_attributes ->

State 450:
## Known stack suffix:
## CONST
## LR(1) items:
asm_attributes -> CONST . asm_attributes [ LPAREN ]
## Transitions:
-- On VOLATILE shift to state 449
-- On CONST shift to state 450
-- On asm_attributes shift to state 451
## Reductions:
-- On LPAREN
--   reduce production asm_attributes ->

State 451:
## Known stack suffix:
## CONST asm_attributes
## LR(1) items:
asm_attributes -> CONST asm_attributes . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_attributes -> CONST asm_attributes

State 452:
## Known stack suffix:
## VOLATILE asm_attributes
## LR(1) items:
asm_attributes -> VOLATILE asm_attributes . [ LPAREN ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_attributes -> VOLATILE asm_attributes

State 453:
## Known stack suffix:
## ASM asm_attributes
## LR(1) items:
asm_statement -> ASM asm_attributes . LPAREN string_literals_list asm_arguments RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 454
## Reductions:

State 454:
## Known stack suffix:
## ASM asm_attributes LPAREN
## LR(1) items:
asm_statement -> ASM asm_attributes LPAREN . string_literals_list asm_arguments RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On STRING_LITERAL shift to state 21
-- On string_literals_list shift to state 455
## Reductions:

State 455:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list
## LR(1) items:
asm_statement -> ASM asm_attributes LPAREN string_literals_list . asm_arguments RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
string_literals_list -> string_literals_list . STRING_LITERAL [ STRING_LITERAL RPAREN COLON ]
## Transitions:
-- On STRING_LITERAL shift to state 167
-- On COLON shift to state 456
-- On asm_arguments shift to state 477
## Reductions:
-- On RPAREN
--   reduce production asm_arguments ->

State 456:
## Known stack suffix:
## COLON
## LR(1) items:
asm_arguments -> COLON . asm_operands [ RPAREN ]
asm_arguments -> COLON . asm_operands COLON asm_operands [ RPAREN ]
asm_arguments -> COLON . asm_operands COLON asm_operands COLON asm_flags [ RPAREN ]
## Transitions:
-- On LBRACK shift to state 457
-- On asm_operands_ne shift to state 460
-- On asm_operands shift to state 468
-- On asm_operand shift to state 476
-- On asm_op_name shift to state 463
## Reductions:
-- On STRING_LITERAL
--   reduce production asm_op_name ->
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production asm_operands ->

State 457:
## Known stack suffix:
## LBRACK
## LR(1) items:
asm_op_name -> LBRACK . general_identifier RBRACK [ STRING_LITERAL ]
## Transitions:
-- On PRE_NAME shift to state 40
-- On typedef_name shift to state 44
-- On general_identifier shift to state 458
## Reductions:

State 458:
## Known stack suffix:
## LBRACK general_identifier
## LR(1) items:
asm_op_name -> LBRACK general_identifier . RBRACK [ STRING_LITERAL ]
## Transitions:
-- On RBRACK shift to state 459
## Reductions:

State 459:
## Known stack suffix:
## LBRACK general_identifier RBRACK
## LR(1) items:
asm_op_name -> LBRACK general_identifier RBRACK . [ STRING_LITERAL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_op_name -> LBRACK general_identifier RBRACK

State 460:
## Known stack suffix:
## asm_operands_ne
## LR(1) items:
asm_operands -> asm_operands_ne . [ RPAREN COLON ]
asm_operands_ne -> asm_operands_ne . COMMA asm_operand [ RPAREN COMMA COLON ]
## Transitions:
-- On COMMA shift to state 461
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production asm_operands -> asm_operands_ne

State 461:
## Known stack suffix:
## asm_operands_ne COMMA
## LR(1) items:
asm_operands_ne -> asm_operands_ne COMMA . asm_operand [ RPAREN COMMA COLON ]
## Transitions:
-- On LBRACK shift to state 457
-- On asm_operand shift to state 462
-- On asm_op_name shift to state 463
## Reductions:
-- On STRING_LITERAL
--   reduce production asm_op_name ->

State 462:
## Known stack suffix:
## asm_operands_ne COMMA asm_operand
## LR(1) items:
asm_operands_ne -> asm_operands_ne COMMA asm_operand . [ RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_operands_ne -> asm_operands_ne COMMA asm_operand

State 463:
## Known stack suffix:
## asm_op_name
## LR(1) items:
asm_operand -> asm_op_name . string_literals_list LPAREN expression RPAREN [ RPAREN COMMA COLON ]
## Transitions:
-- On STRING_LITERAL shift to state 21
-- On string_literals_list shift to state 464
## Reductions:

State 464:
## Known stack suffix:
## asm_op_name string_literals_list
## LR(1) items:
asm_operand -> asm_op_name string_literals_list . LPAREN expression RPAREN [ RPAREN COMMA COLON ]
string_literals_list -> string_literals_list . STRING_LITERAL [ STRING_LITERAL LPAREN ]
## Transitions:
-- On STRING_LITERAL shift to state 167
-- On LPAREN shift to state 465
## Reductions:

State 465:
## Known stack suffix:
## asm_op_name string_literals_list LPAREN
## LR(1) items:
asm_operand -> asm_op_name string_literals_list LPAREN . expression RPAREN [ RPAREN COMMA COLON ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 466
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 466:
## Known stack suffix:
## asm_op_name string_literals_list LPAREN expression
## LR(1) items:
asm_operand -> asm_op_name string_literals_list LPAREN expression . RPAREN [ RPAREN COMMA COLON ]
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 467
-- On COMMA shift to state 230
## Reductions:

State 467:
## Known stack suffix:
## asm_op_name string_literals_list LPAREN expression RPAREN
## LR(1) items:
asm_operand -> asm_op_name string_literals_list LPAREN expression RPAREN . [ RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_operand -> asm_op_name string_literals_list LPAREN expression RPAREN

State 468:
## Known stack suffix:
## COLON asm_operands
## LR(1) items:
asm_arguments -> COLON asm_operands . [ RPAREN ]
asm_arguments -> COLON asm_operands . COLON asm_operands [ RPAREN ]
asm_arguments -> COLON asm_operands . COLON asm_operands COLON asm_flags [ RPAREN ]
## Transitions:
-- On COLON shift to state 469
## Reductions:
-- On RPAREN
--   reduce production asm_arguments -> COLON asm_operands

State 469:
## Known stack suffix:
## COLON asm_operands COLON
## LR(1) items:
asm_arguments -> COLON asm_operands COLON . asm_operands [ RPAREN ]
asm_arguments -> COLON asm_operands COLON . asm_operands COLON asm_flags [ RPAREN ]
## Transitions:
-- On LBRACK shift to state 457
-- On asm_operands_ne shift to state 460
-- On asm_operands shift to state 470
-- On asm_operand shift to state 476
-- On asm_op_name shift to state 463
## Reductions:
-- On STRING_LITERAL
--   reduce production asm_op_name ->
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production asm_operands ->

State 470:
## Known stack suffix:
## COLON asm_operands COLON asm_operands
## LR(1) items:
asm_arguments -> COLON asm_operands COLON asm_operands . [ RPAREN ]
asm_arguments -> COLON asm_operands COLON asm_operands . COLON asm_flags [ RPAREN ]
## Transitions:
-- On COLON shift to state 471
## Reductions:
-- On RPAREN
--   reduce production asm_arguments -> COLON asm_operands COLON asm_operands

State 471:
## Known stack suffix:
## COLON asm_operands COLON asm_operands COLON
## LR(1) items:
asm_arguments -> COLON asm_operands COLON asm_operands COLON . asm_flags [ RPAREN ]
## Transitions:
-- On STRING_LITERAL shift to state 21
-- On string_literals_list shift to state 472
-- On asm_flags shift to state 473
## Reductions:

State 472:
## Known stack suffix:
## string_literals_list
## LR(1) items:
asm_flags -> string_literals_list . [ RPAREN COMMA ]
string_literals_list -> string_literals_list . STRING_LITERAL [ STRING_LITERAL RPAREN COMMA ]
## Transitions:
-- On STRING_LITERAL shift to state 167
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production asm_flags -> string_literals_list

State 473:
## Known stack suffix:
## COLON asm_operands COLON asm_operands COLON asm_flags
## LR(1) items:
asm_arguments -> COLON asm_operands COLON asm_operands COLON asm_flags . [ RPAREN ]
asm_flags -> asm_flags . COMMA string_literals_list [ RPAREN COMMA ]
## Transitions:
-- On COMMA shift to state 474
## Reductions:
-- On RPAREN
--   reduce production asm_arguments -> COLON asm_operands COLON asm_operands COLON asm_flags

State 474:
## Known stack suffix:
## asm_flags COMMA
## LR(1) items:
asm_flags -> asm_flags COMMA . string_literals_list [ RPAREN COMMA ]
## Transitions:
-- On STRING_LITERAL shift to state 21
-- On string_literals_list shift to state 475
## Reductions:

State 475:
## Known stack suffix:
## asm_flags COMMA string_literals_list
## LR(1) items:
asm_flags -> asm_flags COMMA string_literals_list . [ RPAREN COMMA ]
string_literals_list -> string_literals_list . STRING_LITERAL [ STRING_LITERAL RPAREN COMMA ]
## Transitions:
-- On STRING_LITERAL shift to state 167
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production asm_flags -> asm_flags COMMA string_literals_list

State 476:
## Known stack suffix:
## asm_operand
## LR(1) items:
asm_operands_ne -> asm_operand . [ RPAREN COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_operands_ne -> asm_operand

State 477:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments
## LR(1) items:
asm_statement -> ASM asm_attributes LPAREN string_literals_list asm_arguments . RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 478
## Reductions:

State 478:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN
## LR(1) items:
asm_statement -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 479
## Reductions:

State 479:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
## LR(1) items:
asm_statement -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production asm_statement -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON

State 480:
## Known stack suffix:
## CASE conditional_expression COLON statement
## LR(1) items:
labeled_statement -> CASE conditional_expression COLON statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_statement -> CASE conditional_expression COLON statement

State 481:
## Known stack suffix:
## selection_statement
## LR(1) items:
statement -> selection_statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> selection_statement

State 482:
## Known stack suffix:
## save_context
## LR(1) items:
compound_statement -> save_context . LBRACE compcert_pre_parser_option(block_item_list) RBRACE [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement -> save_context . WHILE LPAREN expression RPAREN statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement -> save_context . do_statement1 WHILE LPAREN expression RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement -> save_context . FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
selection_statement -> save_context . ifelse_statement1 statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
selection_statement -> save_context . IF LPAREN expression RPAREN save_context statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
selection_statement -> save_context . SWITCH LPAREN expression RPAREN statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 483
-- On SWITCH shift to state 499
-- On LBRACE shift to state 426
-- On IF shift to state 504
-- On FOR shift to state 511
-- On save_context shift to state 556
-- On ifelse_statement1 shift to state 559
-- On do_statement1 shift to state 561
## Reductions:
-- On DO
--   reduce production save_context ->

State 483:
## Known stack suffix:
## save_context WHILE
## LR(1) items:
iteration_statement -> save_context WHILE . LPAREN expression RPAREN statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 484
## Reductions:

State 484:
## Known stack suffix:
## save_context WHILE LPAREN
## LR(1) items:
iteration_statement -> save_context WHILE LPAREN . expression RPAREN statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 485
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 485:
## Known stack suffix:
## save_context WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement -> save_context WHILE LPAREN expression . RPAREN statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 486
-- On COMMA shift to state 230
## Reductions:

State 486:
## Known stack suffix:
## save_context WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement -> save_context WHILE LPAREN expression RPAREN . statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RETURN shift to state 428
-- On PRE_NAME shift to state 433
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 44
-- On string_literals_list shift to state 166
-- On statement shift to state 487
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 487:
## Known stack suffix:
## save_context WHILE LPAREN expression RPAREN statement
## LR(1) items:
iteration_statement -> save_context WHILE LPAREN expression RPAREN statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> save_context WHILE LPAREN expression RPAREN statement

State 488:
## Known stack suffix:
## labeled_statement
## LR(1) items:
statement -> labeled_statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> labeled_statement

State 489:
## Known stack suffix:
## jump_statement
## LR(1) items:
statement -> jump_statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> jump_statement

State 490:
## Known stack suffix:
## iteration_statement
## LR(1) items:
statement -> iteration_statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> iteration_statement

State 491:
## Known stack suffix:
## general_identifier
## LR(1) items:
labeled_statement -> general_identifier . COLON statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On COLON shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## general_identifier COLON
## LR(1) items:
labeled_statement -> general_identifier COLON . statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RETURN shift to state 428
-- On PRE_NAME shift to state 433
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 44
-- On string_literals_list shift to state 166
-- On statement shift to state 493
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 493:
## Known stack suffix:
## general_identifier COLON statement
## LR(1) items:
labeled_statement -> general_identifier COLON statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_statement -> general_identifier COLON statement

State 494:
## Known stack suffix:
## expression_statement
## LR(1) items:
statement -> expression_statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> expression_statement

State 495:
## Known stack suffix:
## compound_statement
## LR(1) items:
statement -> compound_statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> compound_statement

State 496:
## Known stack suffix:
## compcert_pre_parser_option(expression)
## LR(1) items:
expression_statement -> compcert_pre_parser_option(expression) . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 497
## Reductions:

State 497:
## Known stack suffix:
## compcert_pre_parser_option(expression) SEMICOLON
## LR(1) items:
expression_statement -> compcert_pre_parser_option(expression) SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production expression_statement -> compcert_pre_parser_option(expression) SEMICOLON

State 498:
## Known stack suffix:
## asm_statement
## LR(1) items:
statement -> asm_statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production statement -> asm_statement

State 499:
## Known stack suffix:
## save_context SWITCH
## LR(1) items:
selection_statement -> save_context SWITCH . LPAREN expression RPAREN statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 500
## Reductions:

State 500:
## Known stack suffix:
## save_context SWITCH LPAREN
## LR(1) items:
selection_statement -> save_context SWITCH LPAREN . expression RPAREN statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 501
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 501:
## Known stack suffix:
## save_context SWITCH LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
selection_statement -> save_context SWITCH LPAREN expression . RPAREN statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 502
-- On COMMA shift to state 230
## Reductions:

State 502:
## Known stack suffix:
## save_context SWITCH LPAREN expression RPAREN
## LR(1) items:
selection_statement -> save_context SWITCH LPAREN expression RPAREN . statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RETURN shift to state 428
-- On PRE_NAME shift to state 433
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 44
-- On string_literals_list shift to state 166
-- On statement shift to state 503
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 503:
## Known stack suffix:
## save_context SWITCH LPAREN expression RPAREN statement
## LR(1) items:
selection_statement -> save_context SWITCH LPAREN expression RPAREN statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production selection_statement -> save_context SWITCH LPAREN expression RPAREN statement

State 504:
## Known stack suffix:
## save_context IF
## LR(1) items:
ifelse_statement1 -> IF . LPAREN expression RPAREN save_context statement ELSE [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
selection_statement -> save_context IF . LPAREN expression RPAREN save_context statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 505
## Reductions:

State 505:
## Known stack suffix:
## save_context IF LPAREN
## LR(1) items:
ifelse_statement1 -> IF LPAREN . expression RPAREN save_context statement ELSE [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
selection_statement -> save_context IF LPAREN . expression RPAREN save_context statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 506
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 506:
## Known stack suffix:
## save_context IF LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
ifelse_statement1 -> IF LPAREN expression . RPAREN save_context statement ELSE [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
selection_statement -> save_context IF LPAREN expression . RPAREN save_context statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 507
-- On COMMA shift to state 230
## Reductions:

State 507:
## Known stack suffix:
## save_context IF LPAREN expression RPAREN
## LR(1) items:
ifelse_statement1 -> IF LPAREN expression RPAREN . save_context statement ELSE [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
selection_statement -> save_context IF LPAREN expression RPAREN . save_context statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On save_context shift to state 508
## Default reduction:
-- After reading the next token, reduce production save_context ->

State 508:
## Known stack suffix:
## save_context IF LPAREN expression RPAREN save_context
## LR(1) items:
ifelse_statement1 -> IF LPAREN expression RPAREN save_context . statement ELSE [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
selection_statement -> save_context IF LPAREN expression RPAREN save_context . statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RETURN shift to state 428
-- On PRE_NAME shift to state 433
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 44
-- On string_literals_list shift to state 166
-- On statement shift to state 509
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 509:
## Known stack suffix:
## save_context IF LPAREN expression RPAREN save_context statement
## LR(1) items:
ifelse_statement1 -> IF LPAREN expression RPAREN save_context statement . ELSE [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
selection_statement -> save_context IF LPAREN expression RPAREN save_context statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On ELSE shift to state 510
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production selection_statement -> save_context IF LPAREN expression RPAREN save_context statement

State 510:
## Known stack suffix:
## IF LPAREN expression RPAREN save_context statement ELSE
## LR(1) items:
ifelse_statement1 -> IF LPAREN expression RPAREN save_context statement ELSE . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ifelse_statement1 -> IF LPAREN expression RPAREN save_context statement ELSE

State 511:
## Known stack suffix:
## save_context FOR
## LR(1) items:
iteration_statement -> save_context FOR . LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 512
## Reductions:

State 512:
## Known stack suffix:
## save_context FOR LPAREN
## LR(1) items:
iteration_statement -> save_context FOR LPAREN . for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TYPEDEF shift to state 8
-- On TILDE shift to state 20
-- On STRUCT shift to state 10
-- On STRING_LITERAL shift to state 21
-- On STATIC shift to state 11
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On SEMICOLON shift to state 513
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 29
-- On PLUS shift to state 26
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On INC shift to state 33
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On ALIGNAS shift to state 60
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 514
-- On type_specifier_no_typedef_name shift to state 516
-- On type_qualifier_noattr shift to state 123
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On string_literals_list shift to state 166
-- On storage_class_specifier_no_typedef shift to state 124
-- On shift_expression shift to state 186
-- On rlist(declaration_specifier_no_type) shift to state 518
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On optional(expression,SEMICOLON) shift to state 523
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On function_specifier shift to state 126
-- On for_statement_header shift to state 524
-- On expression shift to state 531
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On enum_specifier shift to state 85
-- On declaration_specifiers_typedef shift to state 533
-- On declaration_specifiers(declaration(block_item)) shift to state 542
-- On declaration(block_item) shift to state 555
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On attribute_specifier shift to state 128
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 513:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
optional(expression,SEMICOLON) -> SEMICOLON . [ TILDE STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional(expression,SEMICOLON) -> SEMICOLON

State 514:
## Known stack suffix:
## typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 515
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 515:
## Known stack suffix:
## typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(block_item)) -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TYPEDEF shift to state 402
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(block_item)) -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 516:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 517
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 517:
## Known stack suffix:
## type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(block_item)) -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TYPEDEF shift to state 406
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(block_item)) -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 518:
## Known stack suffix:
## rlist(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) . typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) . type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) . typedef_name compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) . type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TYPEDEF shift to state 410
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 519
-- On type_specifier_no_typedef_name shift to state 521
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On enum_specifier shift to state 85
## Reductions:

State 519:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 520
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 520:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TYPEDEF shift to state 418
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 521:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 522
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 522:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . TYPEDEF compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On TYPEDEF shift to state 422
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 523:
## Known stack suffix:
## optional(expression,SEMICOLON)
## LR(1) items:
for_statement_header -> optional(expression,SEMICOLON) . [ TILDE STRING_LITERAL STAR SIZEOF SEMICOLON PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_statement_header -> optional(expression,SEMICOLON)

State 524:
## Known stack suffix:
## save_context FOR LPAREN for_statement_header
## LR(1) items:
iteration_statement -> save_context FOR LPAREN for_statement_header . optional(expression,SEMICOLON) optional(expression,RPAREN) statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On SEMICOLON shift to state 513
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On optional(expression,SEMICOLON) shift to state 525
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 531
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 525:
## Known stack suffix:
## save_context FOR LPAREN for_statement_header optional(expression,SEMICOLON)
## LR(1) items:
iteration_statement -> save_context FOR LPAREN for_statement_header optional(expression,SEMICOLON) . optional(expression,RPAREN) statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RPAREN shift to state 526
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On optional(expression,RPAREN) shift to state 527
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 529
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 526:
## Known stack suffix:
## RPAREN
## LR(1) items:
optional(expression,RPAREN) -> RPAREN . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional(expression,RPAREN) -> RPAREN

State 527:
## Known stack suffix:
## save_context FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN)
## LR(1) items:
iteration_statement -> save_context FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) . statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RETURN shift to state 428
-- On PRE_NAME shift to state 433
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 44
-- On string_literals_list shift to state 166
-- On statement shift to state 528
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 528:
## Known stack suffix:
## save_context FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement
## LR(1) items:
iteration_statement -> save_context FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> save_context FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement

State 529:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
optional(expression,RPAREN) -> expression . RPAREN [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
## Transitions:
-- On RPAREN shift to state 530
-- On COMMA shift to state 230
## Reductions:

State 530:
## Known stack suffix:
## expression RPAREN
## LR(1) items:
optional(expression,RPAREN) -> expression RPAREN . [ WHILE TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PRE_NAME PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG ASM AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional(expression,RPAREN) -> expression RPAREN

State 531:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ SEMICOLON COMMA ]
optional(expression,SEMICOLON) -> expression . SEMICOLON [ TILDE STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
-- On SEMICOLON shift to state 532
-- On COMMA shift to state 230
## Reductions:

State 532:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
optional(expression,SEMICOLON) -> expression SEMICOLON . [ TILDE STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production optional(expression,SEMICOLON) -> expression SEMICOLON

State 533:
## Known stack suffix:
## declaration_specifiers_typedef
## LR(1) items:
declaration(block_item) -> declaration_specifiers_typedef . compcert_pre_parser_option(typedef_declarator_list) SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On typedef_declarator_list shift to state 534
-- On typedef_declarator shift to state 539
-- On direct_declarator shift to state 100
-- On declare_typename(declarator) shift to state 537
-- On declarator_noattrend shift to state 153
-- On declarator_identifier shift to state 157
-- On declarator shift to state 538
-- On compcert_pre_parser_option(typedef_declarator_list) shift to state 540
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(typedef_declarator_list) ->

State 534:
## Known stack suffix:
## typedef_declarator_list
## LR(1) items:
compcert_pre_parser_option(typedef_declarator_list) -> typedef_declarator_list . [ SEMICOLON ]
typedef_declarator_list -> typedef_declarator_list . COMMA typedef_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On COMMA shift to state 535
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(typedef_declarator_list) -> typedef_declarator_list

State 535:
## Known stack suffix:
## typedef_declarator_list COMMA
## LR(1) items:
typedef_declarator_list -> typedef_declarator_list COMMA . typedef_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On typedef_declarator shift to state 536
-- On direct_declarator shift to state 100
-- On declare_typename(declarator) shift to state 537
-- On declarator_noattrend shift to state 153
-- On declarator_identifier shift to state 157
-- On declarator shift to state 538
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->

State 536:
## Known stack suffix:
## typedef_declarator_list COMMA typedef_declarator
## LR(1) items:
typedef_declarator_list -> typedef_declarator_list COMMA typedef_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_declarator_list -> typedef_declarator_list COMMA typedef_declarator

State 537:
## Known stack suffix:
## declare_typename(declarator)
## LR(1) items:
typedef_declarator -> declare_typename(declarator) . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_declarator -> declare_typename(declarator)

State 538:
## Known stack suffix:
## declarator
## LR(1) items:
declare_typename(declarator) -> declarator . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declare_typename(declarator) -> declarator

State 539:
## Known stack suffix:
## typedef_declarator
## LR(1) items:
typedef_declarator_list -> typedef_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedef_declarator_list -> typedef_declarator

State 540:
## Known stack suffix:
## declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list)
## LR(1) items:
declaration(block_item) -> declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list) . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 541
## Reductions:

State 541:
## Known stack suffix:
## declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list) SEMICOLON
## LR(1) items:
declaration(block_item) -> declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list) SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration(block_item) -> declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list) SEMICOLON

State 542:
## Known stack suffix:
## declaration_specifiers(declaration(block_item))
## LR(1) items:
declaration(block_item) -> declaration_specifiers(declaration(block_item)) . compcert_pre_parser_option(init_declarator_list) SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On init_declarator_list shift to state 543
-- On init_declarator shift to state 552
-- On direct_declarator shift to state 100
-- On declare_varname(declarator_noattrend) shift to state 546
-- On declarator_noattrend shift to state 551
-- On declarator_identifier shift to state 157
-- On compcert_pre_parser_option(init_declarator_list) shift to state 553
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(init_declarator_list) ->

State 543:
## Known stack suffix:
## init_declarator_list
## LR(1) items:
compcert_pre_parser_option(init_declarator_list) -> init_declarator_list . [ SEMICOLON ]
init_declarator_list -> init_declarator_list . COMMA init_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On COMMA shift to state 544
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(init_declarator_list) -> init_declarator_list

State 544:
## Known stack suffix:
## init_declarator_list COMMA
## LR(1) items:
init_declarator_list -> init_declarator_list COMMA . init_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On init_declarator shift to state 545
-- On direct_declarator shift to state 100
-- On declare_varname(declarator_noattrend) shift to state 546
-- On declarator_noattrend shift to state 551
-- On declarator_identifier shift to state 157
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->

State 545:
## Known stack suffix:
## init_declarator_list COMMA init_declarator
## LR(1) items:
init_declarator_list -> init_declarator_list COMMA init_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declarator_list -> init_declarator_list COMMA init_declarator

State 546:
## Known stack suffix:
## declare_varname(declarator_noattrend)
## LR(1) items:
init_declarator -> declare_varname(declarator_noattrend) . save_context attribute_specifier_list [ SEMICOLON COMMA ]
init_declarator -> declare_varname(declarator_noattrend) . save_context attribute_specifier_list EQ c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On save_context shift to state 547
## Default reduction:
-- After reading the next token, reduce production save_context ->

State 547:
## Known stack suffix:
## declare_varname(declarator_noattrend) save_context
## LR(1) items:
init_declarator -> declare_varname(declarator_noattrend) save_context . attribute_specifier_list [ SEMICOLON COMMA ]
init_declarator -> declare_varname(declarator_noattrend) save_context . attribute_specifier_list EQ c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On PACKED shift to state 18
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On attribute_specifier_list shift to state 548
-- On attribute_specifier shift to state 155
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production attribute_specifier_list ->

State 548:
## Known stack suffix:
## declare_varname(declarator_noattrend) save_context attribute_specifier_list
## LR(1) items:
init_declarator -> declare_varname(declarator_noattrend) save_context attribute_specifier_list . [ SEMICOLON COMMA ]
init_declarator -> declare_varname(declarator_noattrend) save_context attribute_specifier_list . EQ c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On EQ shift to state 549
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production init_declarator -> declare_varname(declarator_noattrend) save_context attribute_specifier_list

State 549:
## Known stack suffix:
## declare_varname(declarator_noattrend) save_context attribute_specifier_list EQ
## LR(1) items:
init_declarator -> declare_varname(declarator_noattrend) save_context attribute_specifier_list EQ . c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On LBRACE shift to state 372
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On c_initializer shift to state 550
-- On assignment_expression shift to state 378
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 550:
## Known stack suffix:
## declare_varname(declarator_noattrend) save_context attribute_specifier_list EQ c_initializer
## LR(1) items:
init_declarator -> declare_varname(declarator_noattrend) save_context attribute_specifier_list EQ c_initializer . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declarator -> declare_varname(declarator_noattrend) save_context attribute_specifier_list EQ c_initializer

State 551:
## Known stack suffix:
## declarator_noattrend
## LR(1) items:
declare_varname(declarator_noattrend) -> declarator_noattrend . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN EQ ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declare_varname(declarator_noattrend) -> declarator_noattrend

State 552:
## Known stack suffix:
## init_declarator
## LR(1) items:
init_declarator_list -> init_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production init_declarator_list -> init_declarator

State 553:
## Known stack suffix:
## declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list)
## LR(1) items:
declaration(block_item) -> declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list) . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 554
## Reductions:

State 554:
## Known stack suffix:
## declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list) SEMICOLON
## LR(1) items:
declaration(block_item) -> declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list) SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list) SEMICOLON

State 555:
## Known stack suffix:
## declaration(block_item)
## LR(1) items:
for_statement_header -> declaration(block_item) . [ TILDE STRING_LITERAL STAR SIZEOF SEMICOLON PRE_NAME PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BUILTIN_OFFSETOF BANG AND ALIGNOF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production for_statement_header -> declaration(block_item)

State 556:
## Known stack suffix:
## save_context
## LR(1) items:
do_statement1 -> save_context . DO statement [ WHILE ]
## Transitions:
-- On DO shift to state 557
## Reductions:

State 557:
## Known stack suffix:
## save_context DO
## LR(1) items:
do_statement1 -> save_context DO . statement [ WHILE ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RETURN shift to state 428
-- On PRE_NAME shift to state 433
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 44
-- On string_literals_list shift to state 166
-- On statement shift to state 558
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 558:
## Known stack suffix:
## save_context DO statement
## LR(1) items:
do_statement1 -> save_context DO statement . [ WHILE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production do_statement1 -> save_context DO statement

State 559:
## Known stack suffix:
## save_context ifelse_statement1
## LR(1) items:
selection_statement -> save_context ifelse_statement1 . statement [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On RETURN shift to state 428
-- On PRE_NAME shift to state 433
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On GOTO shift to state 436
-- On DEFAULT shift to state 439
-- On DEC shift to state 48
-- On CONTINUE shift to state 441
-- On CONSTANT shift to state 49
-- On CASE shift to state 443
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BREAK shift to state 446
-- On BANG shift to state 62
-- On ASM shift to state 448
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On typedef_name shift to state 44
-- On string_literals_list shift to state 166
-- On statement shift to state 560
-- On shift_expression shift to state 186
-- On selection_statement shift to state 481
-- On save_context shift to state 482
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On labeled_statement shift to state 488
-- On jump_statement shift to state 489
-- On iteration_statement shift to state 490
-- On inclusive_or_expression shift to state 228
-- On general_identifier shift to state 491
-- On expression_statement shift to state 494
-- On expression shift to state 429
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On compound_statement shift to state 495
-- On compcert_pre_parser_option(expression) shift to state 496
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On asm_statement shift to state 498
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(expression) ->
-- On WHILE SWITCH LBRACE IF FOR DO
--   reduce production save_context ->

State 560:
## Known stack suffix:
## save_context ifelse_statement1 statement
## LR(1) items:
selection_statement -> save_context ifelse_statement1 statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production selection_statement -> save_context ifelse_statement1 statement

State 561:
## Known stack suffix:
## save_context do_statement1
## LR(1) items:
iteration_statement -> save_context do_statement1 . WHILE LPAREN expression RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 562
## Reductions:

State 562:
## Known stack suffix:
## save_context do_statement1 WHILE
## LR(1) items:
iteration_statement -> save_context do_statement1 WHILE . LPAREN expression RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 563
## Reductions:

State 563:
## Known stack suffix:
## save_context do_statement1 WHILE LPAREN
## LR(1) items:
iteration_statement -> save_context do_statement1 WHILE LPAREN . expression RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On TILDE shift to state 20
-- On STRING_LITERAL shift to state 21
-- On STAR shift to state 22
-- On SIZEOF shift to state 23
-- On PRE_NAME shift to state 24
-- On PLUS shift to state 26
-- On MINUS shift to state 27
-- On LPAREN shift to state 30
-- On INC shift to state 33
-- On DEC shift to state 48
-- On CONSTANT shift to state 49
-- On BUILTIN_VA_ARG shift to state 50
-- On BUILTIN_OFFSETOF shift to state 52
-- On BANG shift to state 62
-- On AND shift to state 63
-- On ALIGNOF shift to state 64
-- On unary_operator shift to state 164
-- On unary_expression shift to state 173
-- On string_literals_list shift to state 166
-- On shift_expression shift to state 186
-- On relational_expression shift to state 202
-- On primary_expression shift to state 168
-- On postfix_expression shift to state 169
-- On multiplicative_expression shift to state 190
-- On logical_or_expression shift to state 210
-- On logical_and_expression shift to state 212
-- On inclusive_or_expression shift to state 228
-- On expression shift to state 564
-- On exclusive_or_expression shift to state 227
-- On equality_expression shift to state 218
-- On conditional_expression shift to state 231
-- On cast_expression shift to state 196
-- On assignment_expression shift to state 235
-- On and_expression shift to state 226
-- On additive_expression shift to state 209
## Reductions:

State 564:
## Known stack suffix:
## save_context do_statement1 WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement -> save_context do_statement1 WHILE LPAREN expression . RPAREN SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 565
-- On COMMA shift to state 230
## Reductions:

State 565:
## Known stack suffix:
## save_context do_statement1 WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement -> save_context do_statement1 WHILE LPAREN expression RPAREN . SEMICOLON [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 566
## Reductions:

State 566:
## Known stack suffix:
## save_context do_statement1 WHILE LPAREN expression RPAREN SEMICOLON
## LR(1) items:
iteration_statement -> save_context do_statement1 WHILE LPAREN expression RPAREN SEMICOLON . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production iteration_statement -> save_context do_statement1 WHILE LPAREN expression RPAREN SEMICOLON

State 567:
## Known stack suffix:
## DEFAULT COLON statement
## LR(1) items:
labeled_statement -> DEFAULT COLON statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production labeled_statement -> DEFAULT COLON statement

State 568:
## Known stack suffix:
## typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers_typedef -> typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) TYPEDEF compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
general_identifier -> typedef_name . [ COLON ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 515
## Reductions:
-- On VOLATILE TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS
--   reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->
-- On COLON
--   reduce production general_identifier -> typedef_name

State 569:
## Known stack suffix:
## statement
## LR(1) items:
block_item -> statement . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_item -> statement

State 570:
## Known stack suffix:
## declaration(block_item)
## LR(1) items:
block_item -> declaration(block_item) . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_item -> declaration(block_item)

State 571:
## Known stack suffix:
## compcert_pre_parser_option(block_item_list) block_item
## LR(1) items:
block_item_list -> compcert_pre_parser_option(block_item_list) block_item . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production block_item_list -> compcert_pre_parser_option(block_item_list) block_item

State 572:
## Known stack suffix:
## block_item_list
## LR(1) items:
compcert_pre_parser_option(block_item_list) -> block_item_list . [ WHILE VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRE_NAME PRAGMA PLUS PACKED NORETURN MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_option(block_item_list) -> block_item_list

State 573:
## Known stack suffix:
## function_definition1 compound_statement
## LR(1) items:
function_definition -> function_definition1 compound_statement . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_definition -> function_definition1 compound_statement

State 574:
## Known stack suffix:
## function_definition
## LR(1) items:
translation_item -> function_definition . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production translation_item -> function_definition

State 575:
## Known stack suffix:
## declaration_specifiers_typedef
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers_typedef . compcert_pre_parser_option(typedef_declarator_list) SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On typedef_declarator_list shift to state 534
-- On typedef_declarator shift to state 539
-- On direct_declarator shift to state 100
-- On declare_typename(declarator) shift to state 537
-- On declarator_noattrend shift to state 153
-- On declarator_identifier shift to state 157
-- On declarator shift to state 538
-- On compcert_pre_parser_option(typedef_declarator_list) shift to state 576
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(typedef_declarator_list) ->

State 576:
## Known stack suffix:
## declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list)
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list) . SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 577
## Reductions:

State 577:
## Known stack suffix:
## declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list) SEMICOLON
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list) SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration(external_declaration) -> declaration_specifiers_typedef compcert_pre_parser_option(typedef_declarator_list) SEMICOLON

State 578:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration))
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) . compcert_pre_parser_option(init_declarator_list) SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
function_definition1 -> declaration_specifiers(declaration(external_declaration)) . declare_varname(declarator_noattrend) save_context attribute_specifier_list save_context [ LBRACE ]
function_definition1 -> declaration_specifiers(declaration(external_declaration)) . declare_varname(declarator_noattrend) save_context declaration_list [ LBRACE ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On init_declarator_list shift to state 543
-- On init_declarator shift to state 552
-- On direct_declarator shift to state 100
-- On declare_varname(declarator_noattrend) shift to state 579
-- On declarator_noattrend shift to state 551
-- On declarator_identifier shift to state 157
-- On compcert_pre_parser_option(init_declarator_list) shift to state 599
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(init_declarator_list) ->

State 579:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend)
## LR(1) items:
function_definition1 -> declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) . save_context attribute_specifier_list save_context [ LBRACE ]
function_definition1 -> declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) . save_context declaration_list [ LBRACE ]
init_declarator -> declare_varname(declarator_noattrend) . save_context attribute_specifier_list [ SEMICOLON COMMA ]
init_declarator -> declare_varname(declarator_noattrend) . save_context attribute_specifier_list EQ c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On save_context shift to state 580
## Default reduction:
-- After reading the next token, reduce production save_context ->

State 580:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context
## LR(1) items:
function_definition1 -> declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context . attribute_specifier_list save_context [ LBRACE ]
function_definition1 -> declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context . declaration_list [ LBRACE ]
init_declarator -> declare_varname(declarator_noattrend) save_context . attribute_specifier_list [ SEMICOLON COMMA ]
init_declarator -> declare_varname(declarator_noattrend) save_context . attribute_specifier_list EQ c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 16
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 581
-- On type_specifier_no_typedef_name shift to state 583
-- On type_qualifier_noattr shift to state 123
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 585
-- On kr_param_declaration shift to state 590
-- On function_specifier shift to state 126
-- On enum_specifier shift to state 85
-- On declaration_specifiers(declaration(block_item)) shift to state 591
-- On declaration_list shift to state 594
-- On attribute_specifier_list shift to state 596
-- On attribute_specifier shift to state 598
## Reductions:
-- On XOR_ASSIGN WHILE VAR_NAME TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRING_LITERAL STAR SLASH SIZEOF SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RBRACK RBRACE QUESTION PTR PRAGMA PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INC IF HAT GT GOTO GEQ FOR EQEQ EQ EOF ELSE ELLIPSIS DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT COMMA COLON CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG ASM AND_ASSIGN ANDAND AND ALIGNOF ADD_ASSIGN
--   reduce production attribute_specifier_list ->

State 581:
## Known stack suffix:
## typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 582
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 582:
## Known stack suffix:
## typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(block_item)) -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(block_item)) -> typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 583:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 584
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 584:
## Known stack suffix:
## type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(block_item)) -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(block_item)) -> type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 585:
## Known stack suffix:
## rlist(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) . typedef_name compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) . type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On PRE_NAME shift to state 16
-- On LONG shift to state 31
-- On INT shift to state 32
-- On FLOAT shift to state 35
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CHAR shift to state 55
-- On typedef_name shift to state 586
-- On type_specifier_no_typedef_name shift to state 588
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On enum_specifier shift to state 85
## Reductions:

State 586:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) typedef_name . compcert_pre_parser_list(declaration_specifier_no_type) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_type) shift to state 587
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_type) ->

State 587:
## Known stack suffix:
## rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . storage_class_specifier_no_typedef [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . type_qualifier_noattr [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . function_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
compcert_pre_parser_list(declaration_specifier_no_type) -> compcert_pre_parser_list(declaration_specifier_no_type) . attribute_specifier [ VOLATILE STATIC STAR SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 111
-- On storage_class_specifier_no_typedef shift to state 112
-- On function_specifier shift to state 113
-- On attribute_specifier shift to state 114
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) typedef_name compcert_pre_parser_list(declaration_specifier_no_type)

State 588:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name . compcert_pre_parser_list(declaration_specifier_no_typedef_name) [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On compcert_pre_parser_list(declaration_specifier_no_typedef_name) shift to state 589
## Default reduction:
-- After reading the next token, reduce production compcert_pre_parser_list(declaration_specifier_no_typedef_name) ->

State 589:
## Known stack suffix:
## rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)
## LR(1) items:
compcert_pre_parser_list(declaration_specifier_no_typedef_name) -> compcert_pre_parser_list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PACKED NORETURN LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name) . [ STAR SEMICOLON PRE_NAME LPAREN ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_specifier_no_typedef_name shift to state 117
-- On type_qualifier_noattr shift to state 118
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 119
-- On function_specifier shift to state 120
-- On enum_specifier shift to state 85
-- On declaration_specifier_no_typedef_name shift to state 121
-- On attribute_specifier shift to state 122
## Reductions:
-- On STAR SEMICOLON PRE_NAME LPAREN
--   reduce production declaration_specifiers(declaration(block_item)) -> rlist(declaration_specifier_no_type) type_specifier_no_typedef_name compcert_pre_parser_list(declaration_specifier_no_typedef_name)

State 590:
## Known stack suffix:
## kr_param_declaration
## LR(1) items:
declaration_list -> kr_param_declaration . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_list -> kr_param_declaration

State 591:
## Known stack suffix:
## declaration_specifiers(declaration(block_item))
## LR(1) items:
kr_param_declaration -> declaration_specifiers(declaration(block_item)) . compcert_pre_parser_option(init_declarator_list) SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On PRE_NAME shift to state 94
-- On LPAREN shift to state 98
-- On init_declarator_list shift to state 543
-- On init_declarator shift to state 552
-- On direct_declarator shift to state 100
-- On declare_varname(declarator_noattrend) shift to state 546
-- On declarator_noattrend shift to state 551
-- On declarator_identifier shift to state 157
-- On compcert_pre_parser_option(init_declarator_list) shift to state 592
-- On compcert_pre_parser_list(pointer1) shift to state 285
## Reductions:
-- On STAR
--   reduce production compcert_pre_parser_list(pointer1) ->
-- On SEMICOLON
--   reduce production compcert_pre_parser_option(init_declarator_list) ->

State 592:
## Known stack suffix:
## declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list)
## LR(1) items:
kr_param_declaration -> declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list) . SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 593
## Reductions:

State 593:
## Known stack suffix:
## declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list) SEMICOLON
## LR(1) items:
kr_param_declaration -> declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list) SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production kr_param_declaration -> declaration_specifiers(declaration(block_item)) compcert_pre_parser_option(init_declarator_list) SEMICOLON

State 594:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context declaration_list
## LR(1) items:
declaration_list -> declaration_list . kr_param_declaration [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
function_definition1 -> declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context declaration_list . [ LBRACE ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 4
-- On UNSIGNED shift to state 5
-- On UNION shift to state 6
-- On UNDERSCORE_BOOL shift to state 7
-- On STRUCT shift to state 10
-- On STATIC shift to state 11
-- On SIGNED shift to state 12
-- On SHORT shift to state 13
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PRE_NAME shift to state 16
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On LONG shift to state 31
-- On INT shift to state 32
-- On INLINE shift to state 106
-- On FLOAT shift to state 35
-- On EXTERN shift to state 107
-- On ENUM shift to state 36
-- On DOUBLE shift to state 54
-- On CONST shift to state 59
-- On CHAR shift to state 55
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On typedef_name shift to state 581
-- On type_specifier_no_typedef_name shift to state 583
-- On type_qualifier_noattr shift to state 123
-- On struct_or_union_specifier shift to state 70
-- On struct_or_union shift to state 71
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 585
-- On kr_param_declaration shift to state 595
-- On function_specifier shift to state 126
-- On enum_specifier shift to state 85
-- On declaration_specifiers(declaration(block_item)) shift to state 591
-- On attribute_specifier shift to state 128
## Reductions:
-- On LBRACE
--   reduce production function_definition1 -> declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context declaration_list

State 595:
## Known stack suffix:
## declaration_list kr_param_declaration
## LR(1) items:
declaration_list -> declaration_list kr_param_declaration . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PRE_NAME PACKED NORETURN LONG LBRACE INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration_list -> declaration_list kr_param_declaration

State 596:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context attribute_specifier_list
## LR(1) items:
function_definition1 -> declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context attribute_specifier_list . save_context [ LBRACE ]
init_declarator -> declare_varname(declarator_noattrend) save_context attribute_specifier_list . [ SEMICOLON COMMA ]
init_declarator -> declare_varname(declarator_noattrend) save_context attribute_specifier_list . EQ c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On EQ shift to state 549
-- On save_context shift to state 597
## Reductions:
-- On XOR_ASSIGN WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH SUB_ASSIGN STRUCT STRING_LITERAL STATIC STAR SLASH SIZEOF SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RETURN RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PRE_NAME PRAGMA PLUS PERCENT PACKED OR_ASSIGN NORETURN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK INT INLINE INC IF HAT GT GOTO GEQ FOR FLOAT EXTERN EQEQ EOF ENUM ELSE ELLIPSIS DOUBLE DOT DO DIV_ASSIGN DEFAULT DEC CONTINUE CONSTANT CONST COMMA COLON CHAR CASE BUILTIN_VA_ARG BUILTIN_OFFSETOF BREAK BARBAR BAR BANG AUTO ATTRIBUTE ASM AND_ASSIGN ANDAND AND ALIGNOF ALIGNAS ADD_ASSIGN
--   reduce production init_declarator -> declare_varname(declarator_noattrend) save_context attribute_specifier_list
-- On LBRACE
--   reduce production save_context ->

State 597:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context attribute_specifier_list save_context
## LR(1) items:
function_definition1 -> declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context attribute_specifier_list save_context . [ LBRACE ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production function_definition1 -> declaration_specifiers(declaration(external_declaration)) declare_varname(declarator_noattrend) save_context attribute_specifier_list save_context

State 598:
## Known stack suffix:
## attribute_specifier
## LR(1) items:
attribute_specifier_list -> attribute_specifier . attribute_specifier_list [ SEMICOLON LBRACE EQ COMMA ]
rlist(declaration_specifier_no_type) -> attribute_specifier . [ VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
rlist(declaration_specifier_no_type) -> attribute_specifier . rlist(declaration_specifier_no_type) [ VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 11
-- On RESTRICT shift to state 14
-- On REGISTER shift to state 15
-- On PACKED shift to state 18
-- On NORETURN shift to state 105
-- On INLINE shift to state 106
-- On EXTERN shift to state 107
-- On CONST shift to state 59
-- On AUTO shift to state 108
-- On ATTRIBUTE shift to state 37
-- On ALIGNAS shift to state 60
-- On type_qualifier_noattr shift to state 123
-- On storage_class_specifier_no_typedef shift to state 124
-- On rlist(declaration_specifier_no_type) shift to state 129
-- On function_specifier shift to state 126
-- On attribute_specifier_list shift to state 156
-- On attribute_specifier shift to state 598
## Reductions:
-- On SEMICOLON LBRACE EQ COMMA
--   reduce production attribute_specifier_list ->
-- On VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT SIGNED SHORT PRE_NAME LONG INT FLOAT ENUM DOUBLE CHAR
--   reduce production rlist(declaration_specifier_no_type) -> attribute_specifier

State 599:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) compcert_pre_parser_option(init_declarator_list)
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) compcert_pre_parser_option(init_declarator_list) . SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 600
## Reductions:

State 600:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) compcert_pre_parser_option(init_declarator_list) SEMICOLON
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) compcert_pre_parser_option(init_declarator_list) SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) compcert_pre_parser_option(init_declarator_list) SEMICOLON

State 601:
## Known stack suffix:
## declaration(external_declaration)
## LR(1) items:
translation_item -> declaration(external_declaration) . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRE_NAME PRAGMA PACKED NORETURN LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production translation_item -> declaration(external_declaration)

