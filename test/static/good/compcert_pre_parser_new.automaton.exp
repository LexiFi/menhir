State 0:
## Known stack suffix:
##
## LR(1) items:
translation_unit_file' -> . translation_unit_file [ # ]
## Transitions:
-- On TYPEDEF_NAME shift to state 1
-- On SEMICOLON shift to state 345
-- On PRAGMA shift to state 346
-- On EOF shift to state 347
-- On translation_unit_file shift to state 348
-- On translation_unit shift to state 349
-- On list(declaration_specifier_no_type) shift to state 352
-- On function_definition_begin shift to state 368
-- On function_definition shift to state 648
-- On external_declaration shift to state 676
-- On declaration_specifiers_typedef shift to state 650
-- On declaration_specifiers(declaration(external_declaration)) shift to state 653
-- On declaration(external_declaration) shift to state 675
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 1:
## Known stack suffix:
## TYPEDEF_NAME
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> TYPEDEF_NAME . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> TYPEDEF_NAME . list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 2
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 2:
## Known stack suffix:
## TYPEDEF_NAME list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> TYPEDEF_NAME list(declaration_specifier_no_type) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> TYPEDEF_NAME list(declaration_specifier_no_type) . TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VAR_NAME TYPEDEF_NAME TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PACKED LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TYPEDEF shift to state 4
-- On STATIC shift to state 6
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On INLINE shift to state 236
-- On EXTERN shift to state 237
-- On CONST shift to state 154
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 239
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers(declaration(external_declaration)) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On TYPEDEF_NAME reduce production declaration_specifiers(declaration(external_declaration)) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On STAR reduce production declaration_specifiers(declaration(external_declaration)) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On SEMICOLON reduce production declaration_specifiers(declaration(external_declaration)) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On LPAREN reduce production declaration_specifiers(declaration(external_declaration)) -> TYPEDEF_NAME list(declaration_specifier_no_type)

State 3:
## Known stack suffix:
## VOLATILE
## LR(1) items:
type_qualifier -> VOLATILE . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK INT INLINE INC FLOAT EXTERN ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_qualifier -> VOLATILE
-- On VOID reduce production type_qualifier -> VOLATILE
-- On VAR_NAME reduce production type_qualifier -> VOLATILE
-- On UNSIGNED reduce production type_qualifier -> VOLATILE
-- On UNION reduce production type_qualifier -> VOLATILE
-- On UNDERSCORE_BOOL reduce production type_qualifier -> VOLATILE
-- On TYPEDEF_NAME reduce production type_qualifier -> VOLATILE
-- On TYPEDEF reduce production type_qualifier -> VOLATILE
-- On TILDE reduce production type_qualifier -> VOLATILE
-- On STRUCT reduce production type_qualifier -> VOLATILE
-- On STRING_LITERAL reduce production type_qualifier -> VOLATILE
-- On STATIC reduce production type_qualifier -> VOLATILE
-- On STAR reduce production type_qualifier -> VOLATILE
-- On SIZEOF reduce production type_qualifier -> VOLATILE
-- On SIGNED reduce production type_qualifier -> VOLATILE
-- On SHORT reduce production type_qualifier -> VOLATILE
-- On SEMICOLON reduce production type_qualifier -> VOLATILE
-- On RPAREN reduce production type_qualifier -> VOLATILE
-- On RESTRICT reduce production type_qualifier -> VOLATILE
-- On REGISTER reduce production type_qualifier -> VOLATILE
-- On RBRACK reduce production type_qualifier -> VOLATILE
-- On PLUS reduce production type_qualifier -> VOLATILE
-- On PACKED reduce production type_qualifier -> VOLATILE
-- On MINUS reduce production type_qualifier -> VOLATILE
-- On LPAREN reduce production type_qualifier -> VOLATILE
-- On LONG reduce production type_qualifier -> VOLATILE
-- On LBRACK reduce production type_qualifier -> VOLATILE
-- On INT reduce production type_qualifier -> VOLATILE
-- On INLINE reduce production type_qualifier -> VOLATILE
-- On INC reduce production type_qualifier -> VOLATILE
-- On FLOAT reduce production type_qualifier -> VOLATILE
-- On EXTERN reduce production type_qualifier -> VOLATILE
-- On ENUM reduce production type_qualifier -> VOLATILE
-- On DOUBLE reduce production type_qualifier -> VOLATILE
-- On DEC reduce production type_qualifier -> VOLATILE
-- On CONSTANT reduce production type_qualifier -> VOLATILE
-- On CONST reduce production type_qualifier -> VOLATILE
-- On COMMA reduce production type_qualifier -> VOLATILE
-- On COLON reduce production type_qualifier -> VOLATILE
-- On CHAR reduce production type_qualifier -> VOLATILE
-- On BUILTIN_VA_ARG reduce production type_qualifier -> VOLATILE
-- On BANG reduce production type_qualifier -> VOLATILE
-- On AUTO reduce production type_qualifier -> VOLATILE
-- On ATTRIBUTE reduce production type_qualifier -> VOLATILE
-- On AND reduce production type_qualifier -> VOLATILE
-- On ALIGNOF reduce production type_qualifier -> VOLATILE
-- On ALIGNAS reduce production type_qualifier -> VOLATILE

State 4:
## Known stack suffix:
## TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 5
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 5:
## Known stack suffix:
## TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers_typedef -> TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VAR_NAME TYPEDEF_NAME STATIC STAR SEMICOLON RESTRICT REGISTER PACKED LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 6
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On INLINE shift to state 236
-- On EXTERN shift to state 237
-- On CONST shift to state 154
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 239
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers_typedef -> TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
-- On TYPEDEF_NAME reduce production declaration_specifiers_typedef -> TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
-- On STAR reduce production declaration_specifiers_typedef -> TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
-- On SEMICOLON reduce production declaration_specifiers_typedef -> TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
-- On LPAREN reduce production declaration_specifiers_typedef -> TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)

State 6:
## Known stack suffix:
## STATIC
## LR(1) items:
storage_class_specifier_no_typedef -> STATIC . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production storage_class_specifier_no_typedef -> STATIC
-- On VOID reduce production storage_class_specifier_no_typedef -> STATIC
-- On VAR_NAME reduce production storage_class_specifier_no_typedef -> STATIC
-- On UNSIGNED reduce production storage_class_specifier_no_typedef -> STATIC
-- On UNION reduce production storage_class_specifier_no_typedef -> STATIC
-- On UNDERSCORE_BOOL reduce production storage_class_specifier_no_typedef -> STATIC
-- On TYPEDEF_NAME reduce production storage_class_specifier_no_typedef -> STATIC
-- On TYPEDEF reduce production storage_class_specifier_no_typedef -> STATIC
-- On STRUCT reduce production storage_class_specifier_no_typedef -> STATIC
-- On STATIC reduce production storage_class_specifier_no_typedef -> STATIC
-- On STAR reduce production storage_class_specifier_no_typedef -> STATIC
-- On SIGNED reduce production storage_class_specifier_no_typedef -> STATIC
-- On SHORT reduce production storage_class_specifier_no_typedef -> STATIC
-- On SEMICOLON reduce production storage_class_specifier_no_typedef -> STATIC
-- On RPAREN reduce production storage_class_specifier_no_typedef -> STATIC
-- On RESTRICT reduce production storage_class_specifier_no_typedef -> STATIC
-- On REGISTER reduce production storage_class_specifier_no_typedef -> STATIC
-- On PACKED reduce production storage_class_specifier_no_typedef -> STATIC
-- On LPAREN reduce production storage_class_specifier_no_typedef -> STATIC
-- On LONG reduce production storage_class_specifier_no_typedef -> STATIC
-- On LBRACK reduce production storage_class_specifier_no_typedef -> STATIC
-- On INT reduce production storage_class_specifier_no_typedef -> STATIC
-- On INLINE reduce production storage_class_specifier_no_typedef -> STATIC
-- On FLOAT reduce production storage_class_specifier_no_typedef -> STATIC
-- On EXTERN reduce production storage_class_specifier_no_typedef -> STATIC
-- On ENUM reduce production storage_class_specifier_no_typedef -> STATIC
-- On DOUBLE reduce production storage_class_specifier_no_typedef -> STATIC
-- On CONST reduce production storage_class_specifier_no_typedef -> STATIC
-- On COMMA reduce production storage_class_specifier_no_typedef -> STATIC
-- On CHAR reduce production storage_class_specifier_no_typedef -> STATIC
-- On AUTO reduce production storage_class_specifier_no_typedef -> STATIC
-- On ATTRIBUTE reduce production storage_class_specifier_no_typedef -> STATIC
-- On ALIGNAS reduce production storage_class_specifier_no_typedef -> STATIC

State 7:
## Known stack suffix:
## RESTRICT
## LR(1) items:
type_qualifier -> RESTRICT . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK INT INLINE INC FLOAT EXTERN ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_qualifier -> RESTRICT
-- On VOID reduce production type_qualifier -> RESTRICT
-- On VAR_NAME reduce production type_qualifier -> RESTRICT
-- On UNSIGNED reduce production type_qualifier -> RESTRICT
-- On UNION reduce production type_qualifier -> RESTRICT
-- On UNDERSCORE_BOOL reduce production type_qualifier -> RESTRICT
-- On TYPEDEF_NAME reduce production type_qualifier -> RESTRICT
-- On TYPEDEF reduce production type_qualifier -> RESTRICT
-- On TILDE reduce production type_qualifier -> RESTRICT
-- On STRUCT reduce production type_qualifier -> RESTRICT
-- On STRING_LITERAL reduce production type_qualifier -> RESTRICT
-- On STATIC reduce production type_qualifier -> RESTRICT
-- On STAR reduce production type_qualifier -> RESTRICT
-- On SIZEOF reduce production type_qualifier -> RESTRICT
-- On SIGNED reduce production type_qualifier -> RESTRICT
-- On SHORT reduce production type_qualifier -> RESTRICT
-- On SEMICOLON reduce production type_qualifier -> RESTRICT
-- On RPAREN reduce production type_qualifier -> RESTRICT
-- On RESTRICT reduce production type_qualifier -> RESTRICT
-- On REGISTER reduce production type_qualifier -> RESTRICT
-- On RBRACK reduce production type_qualifier -> RESTRICT
-- On PLUS reduce production type_qualifier -> RESTRICT
-- On PACKED reduce production type_qualifier -> RESTRICT
-- On MINUS reduce production type_qualifier -> RESTRICT
-- On LPAREN reduce production type_qualifier -> RESTRICT
-- On LONG reduce production type_qualifier -> RESTRICT
-- On LBRACK reduce production type_qualifier -> RESTRICT
-- On INT reduce production type_qualifier -> RESTRICT
-- On INLINE reduce production type_qualifier -> RESTRICT
-- On INC reduce production type_qualifier -> RESTRICT
-- On FLOAT reduce production type_qualifier -> RESTRICT
-- On EXTERN reduce production type_qualifier -> RESTRICT
-- On ENUM reduce production type_qualifier -> RESTRICT
-- On DOUBLE reduce production type_qualifier -> RESTRICT
-- On DEC reduce production type_qualifier -> RESTRICT
-- On CONSTANT reduce production type_qualifier -> RESTRICT
-- On CONST reduce production type_qualifier -> RESTRICT
-- On COMMA reduce production type_qualifier -> RESTRICT
-- On COLON reduce production type_qualifier -> RESTRICT
-- On CHAR reduce production type_qualifier -> RESTRICT
-- On BUILTIN_VA_ARG reduce production type_qualifier -> RESTRICT
-- On BANG reduce production type_qualifier -> RESTRICT
-- On AUTO reduce production type_qualifier -> RESTRICT
-- On ATTRIBUTE reduce production type_qualifier -> RESTRICT
-- On AND reduce production type_qualifier -> RESTRICT
-- On ALIGNOF reduce production type_qualifier -> RESTRICT
-- On ALIGNAS reduce production type_qualifier -> RESTRICT

State 8:
## Known stack suffix:
## REGISTER
## LR(1) items:
storage_class_specifier_no_typedef -> REGISTER . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production storage_class_specifier_no_typedef -> REGISTER
-- On VOID reduce production storage_class_specifier_no_typedef -> REGISTER
-- On VAR_NAME reduce production storage_class_specifier_no_typedef -> REGISTER
-- On UNSIGNED reduce production storage_class_specifier_no_typedef -> REGISTER
-- On UNION reduce production storage_class_specifier_no_typedef -> REGISTER
-- On UNDERSCORE_BOOL reduce production storage_class_specifier_no_typedef -> REGISTER
-- On TYPEDEF_NAME reduce production storage_class_specifier_no_typedef -> REGISTER
-- On TYPEDEF reduce production storage_class_specifier_no_typedef -> REGISTER
-- On STRUCT reduce production storage_class_specifier_no_typedef -> REGISTER
-- On STATIC reduce production storage_class_specifier_no_typedef -> REGISTER
-- On STAR reduce production storage_class_specifier_no_typedef -> REGISTER
-- On SIGNED reduce production storage_class_specifier_no_typedef -> REGISTER
-- On SHORT reduce production storage_class_specifier_no_typedef -> REGISTER
-- On SEMICOLON reduce production storage_class_specifier_no_typedef -> REGISTER
-- On RPAREN reduce production storage_class_specifier_no_typedef -> REGISTER
-- On RESTRICT reduce production storage_class_specifier_no_typedef -> REGISTER
-- On REGISTER reduce production storage_class_specifier_no_typedef -> REGISTER
-- On PACKED reduce production storage_class_specifier_no_typedef -> REGISTER
-- On LPAREN reduce production storage_class_specifier_no_typedef -> REGISTER
-- On LONG reduce production storage_class_specifier_no_typedef -> REGISTER
-- On LBRACK reduce production storage_class_specifier_no_typedef -> REGISTER
-- On INT reduce production storage_class_specifier_no_typedef -> REGISTER
-- On INLINE reduce production storage_class_specifier_no_typedef -> REGISTER
-- On FLOAT reduce production storage_class_specifier_no_typedef -> REGISTER
-- On EXTERN reduce production storage_class_specifier_no_typedef -> REGISTER
-- On ENUM reduce production storage_class_specifier_no_typedef -> REGISTER
-- On DOUBLE reduce production storage_class_specifier_no_typedef -> REGISTER
-- On CONST reduce production storage_class_specifier_no_typedef -> REGISTER
-- On COMMA reduce production storage_class_specifier_no_typedef -> REGISTER
-- On CHAR reduce production storage_class_specifier_no_typedef -> REGISTER
-- On AUTO reduce production storage_class_specifier_no_typedef -> REGISTER
-- On ATTRIBUTE reduce production storage_class_specifier_no_typedef -> REGISTER
-- On ALIGNAS reduce production storage_class_specifier_no_typedef -> REGISTER

State 9:
## Known stack suffix:
## PACKED
## LR(1) items:
attribute_specifier -> PACKED . LPAREN argument_expression_list RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## PACKED LPAREN
## LR(1) items:
attribute_specifier -> PACKED LPAREN . argument_expression_list RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 109
-- On argument_expression_list shift to state 343
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 11:
## Known stack suffix:
## VAR_NAME
## LR(1) items:
primary_expression -> VAR_NAME . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production primary_expression -> VAR_NAME
-- On SUB_ASSIGN reduce production primary_expression -> VAR_NAME
-- On STAR reduce production primary_expression -> VAR_NAME
-- On SLASH reduce production primary_expression -> VAR_NAME
-- On SEMICOLON reduce production primary_expression -> VAR_NAME
-- On RPAREN reduce production primary_expression -> VAR_NAME
-- On RIGHT_ASSIGN reduce production primary_expression -> VAR_NAME
-- On RIGHT reduce production primary_expression -> VAR_NAME
-- On RBRACK reduce production primary_expression -> VAR_NAME
-- On RBRACE reduce production primary_expression -> VAR_NAME
-- On QUESTION reduce production primary_expression -> VAR_NAME
-- On PTR reduce production primary_expression -> VAR_NAME
-- On PLUS reduce production primary_expression -> VAR_NAME
-- On PERCENT reduce production primary_expression -> VAR_NAME
-- On OR_ASSIGN reduce production primary_expression -> VAR_NAME
-- On NEQ reduce production primary_expression -> VAR_NAME
-- On MUL_ASSIGN reduce production primary_expression -> VAR_NAME
-- On MOD_ASSIGN reduce production primary_expression -> VAR_NAME
-- On MINUS reduce production primary_expression -> VAR_NAME
-- On LT reduce production primary_expression -> VAR_NAME
-- On LPAREN reduce production primary_expression -> VAR_NAME
-- On LEQ reduce production primary_expression -> VAR_NAME
-- On LEFT_ASSIGN reduce production primary_expression -> VAR_NAME
-- On LEFT reduce production primary_expression -> VAR_NAME
-- On LBRACK reduce production primary_expression -> VAR_NAME
-- On INC reduce production primary_expression -> VAR_NAME
-- On HAT reduce production primary_expression -> VAR_NAME
-- On GT reduce production primary_expression -> VAR_NAME
-- On GEQ reduce production primary_expression -> VAR_NAME
-- On EQEQ reduce production primary_expression -> VAR_NAME
-- On EQ reduce production primary_expression -> VAR_NAME
-- On DOT reduce production primary_expression -> VAR_NAME
-- On DIV_ASSIGN reduce production primary_expression -> VAR_NAME
-- On DEC reduce production primary_expression -> VAR_NAME
-- On COMMA reduce production primary_expression -> VAR_NAME
-- On COLON reduce production primary_expression -> VAR_NAME
-- On BARBAR reduce production primary_expression -> VAR_NAME
-- On BAR reduce production primary_expression -> VAR_NAME
-- On AND_ASSIGN reduce production primary_expression -> VAR_NAME
-- On ANDAND reduce production primary_expression -> VAR_NAME
-- On AND reduce production primary_expression -> VAR_NAME
-- On ADD_ASSIGN reduce production primary_expression -> VAR_NAME

State 12:
## Known stack suffix:
## TILDE
## LR(1) items:
unary_operator -> TILDE . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production unary_operator -> TILDE
-- On TILDE reduce production unary_operator -> TILDE
-- On STRING_LITERAL reduce production unary_operator -> TILDE
-- On STAR reduce production unary_operator -> TILDE
-- On SIZEOF reduce production unary_operator -> TILDE
-- On PLUS reduce production unary_operator -> TILDE
-- On MINUS reduce production unary_operator -> TILDE
-- On LPAREN reduce production unary_operator -> TILDE
-- On INC reduce production unary_operator -> TILDE
-- On DEC reduce production unary_operator -> TILDE
-- On CONSTANT reduce production unary_operator -> TILDE
-- On BUILTIN_VA_ARG reduce production unary_operator -> TILDE
-- On BANG reduce production unary_operator -> TILDE
-- On AND reduce production unary_operator -> TILDE
-- On ALIGNOF reduce production unary_operator -> TILDE

State 13:
## Known stack suffix:
## STRING_LITERAL
## LR(1) items:
string_literals_list -> STRING_LITERAL . [ XOR_ASSIGN SUB_ASSIGN STRING_LITERAL STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production string_literals_list -> STRING_LITERAL
-- On SUB_ASSIGN reduce production string_literals_list -> STRING_LITERAL
-- On STRING_LITERAL reduce production string_literals_list -> STRING_LITERAL
-- On STAR reduce production string_literals_list -> STRING_LITERAL
-- On SLASH reduce production string_literals_list -> STRING_LITERAL
-- On SEMICOLON reduce production string_literals_list -> STRING_LITERAL
-- On RPAREN reduce production string_literals_list -> STRING_LITERAL
-- On RIGHT_ASSIGN reduce production string_literals_list -> STRING_LITERAL
-- On RIGHT reduce production string_literals_list -> STRING_LITERAL
-- On RBRACK reduce production string_literals_list -> STRING_LITERAL
-- On RBRACE reduce production string_literals_list -> STRING_LITERAL
-- On QUESTION reduce production string_literals_list -> STRING_LITERAL
-- On PTR reduce production string_literals_list -> STRING_LITERAL
-- On PLUS reduce production string_literals_list -> STRING_LITERAL
-- On PERCENT reduce production string_literals_list -> STRING_LITERAL
-- On OR_ASSIGN reduce production string_literals_list -> STRING_LITERAL
-- On NEQ reduce production string_literals_list -> STRING_LITERAL
-- On MUL_ASSIGN reduce production string_literals_list -> STRING_LITERAL
-- On MOD_ASSIGN reduce production string_literals_list -> STRING_LITERAL
-- On MINUS reduce production string_literals_list -> STRING_LITERAL
-- On LT reduce production string_literals_list -> STRING_LITERAL
-- On LPAREN reduce production string_literals_list -> STRING_LITERAL
-- On LEQ reduce production string_literals_list -> STRING_LITERAL
-- On LEFT_ASSIGN reduce production string_literals_list -> STRING_LITERAL
-- On LEFT reduce production string_literals_list -> STRING_LITERAL
-- On LBRACK reduce production string_literals_list -> STRING_LITERAL
-- On INC reduce production string_literals_list -> STRING_LITERAL
-- On HAT reduce production string_literals_list -> STRING_LITERAL
-- On GT reduce production string_literals_list -> STRING_LITERAL
-- On GEQ reduce production string_literals_list -> STRING_LITERAL
-- On EQEQ reduce production string_literals_list -> STRING_LITERAL
-- On EQ reduce production string_literals_list -> STRING_LITERAL
-- On DOT reduce production string_literals_list -> STRING_LITERAL
-- On DIV_ASSIGN reduce production string_literals_list -> STRING_LITERAL
-- On DEC reduce production string_literals_list -> STRING_LITERAL
-- On COMMA reduce production string_literals_list -> STRING_LITERAL
-- On COLON reduce production string_literals_list -> STRING_LITERAL
-- On BARBAR reduce production string_literals_list -> STRING_LITERAL
-- On BAR reduce production string_literals_list -> STRING_LITERAL
-- On AND_ASSIGN reduce production string_literals_list -> STRING_LITERAL
-- On ANDAND reduce production string_literals_list -> STRING_LITERAL
-- On AND reduce production string_literals_list -> STRING_LITERAL
-- On ADD_ASSIGN reduce production string_literals_list -> STRING_LITERAL

State 14:
## Known stack suffix:
## STAR
## LR(1) items:
unary_operator -> STAR . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production unary_operator -> STAR
-- On TILDE reduce production unary_operator -> STAR
-- On STRING_LITERAL reduce production unary_operator -> STAR
-- On STAR reduce production unary_operator -> STAR
-- On SIZEOF reduce production unary_operator -> STAR
-- On PLUS reduce production unary_operator -> STAR
-- On MINUS reduce production unary_operator -> STAR
-- On LPAREN reduce production unary_operator -> STAR
-- On INC reduce production unary_operator -> STAR
-- On DEC reduce production unary_operator -> STAR
-- On CONSTANT reduce production unary_operator -> STAR
-- On BUILTIN_VA_ARG reduce production unary_operator -> STAR
-- On BANG reduce production unary_operator -> STAR
-- On AND reduce production unary_operator -> STAR
-- On ALIGNOF reduce production unary_operator -> STAR

State 15:
## Known stack suffix:
## SIZEOF
## LR(1) items:
unary_expression -> SIZEOF . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> SIZEOF . LPAREN type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 18
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 342
-- On string_literals_list shift to state 32
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
## Reductions:

State 16:
## Known stack suffix:
## PLUS
## LR(1) items:
unary_operator -> PLUS . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production unary_operator -> PLUS
-- On TILDE reduce production unary_operator -> PLUS
-- On STRING_LITERAL reduce production unary_operator -> PLUS
-- On STAR reduce production unary_operator -> PLUS
-- On SIZEOF reduce production unary_operator -> PLUS
-- On PLUS reduce production unary_operator -> PLUS
-- On MINUS reduce production unary_operator -> PLUS
-- On LPAREN reduce production unary_operator -> PLUS
-- On INC reduce production unary_operator -> PLUS
-- On DEC reduce production unary_operator -> PLUS
-- On CONSTANT reduce production unary_operator -> PLUS
-- On BUILTIN_VA_ARG reduce production unary_operator -> PLUS
-- On BANG reduce production unary_operator -> PLUS
-- On AND reduce production unary_operator -> PLUS
-- On ALIGNOF reduce production unary_operator -> PLUS

State 17:
## Known stack suffix:
## MINUS
## LR(1) items:
unary_operator -> MINUS . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production unary_operator -> MINUS
-- On TILDE reduce production unary_operator -> MINUS
-- On STRING_LITERAL reduce production unary_operator -> MINUS
-- On STAR reduce production unary_operator -> MINUS
-- On SIZEOF reduce production unary_operator -> MINUS
-- On PLUS reduce production unary_operator -> MINUS
-- On MINUS reduce production unary_operator -> MINUS
-- On LPAREN reduce production unary_operator -> MINUS
-- On INC reduce production unary_operator -> MINUS
-- On DEC reduce production unary_operator -> MINUS
-- On CONSTANT reduce production unary_operator -> MINUS
-- On BUILTIN_VA_ARG reduce production unary_operator -> MINUS
-- On BANG reduce production unary_operator -> MINUS
-- On AND reduce production unary_operator -> MINUS
-- On ALIGNOF reduce production unary_operator -> MINUS

State 18:
## Known stack suffix:
## SIZEOF LPAREN
## LR(1) items:
postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> SIZEOF LPAREN . type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On type_qualifier_list shift to state 121
-- On type_name shift to state 340
-- On string_literals_list shift to state 32
-- On specifier_qualifier_list(type_name) shift to state 148
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(type_qualifier_list) shift to state 179
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 326
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VOID reduce production option(type_qualifier_list) ->
-- On UNSIGNED reduce production option(type_qualifier_list) ->
-- On UNION reduce production option(type_qualifier_list) ->
-- On UNDERSCORE_BOOL reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STRUCT reduce production option(type_qualifier_list) ->
-- On SIGNED reduce production option(type_qualifier_list) ->
-- On SHORT reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LONG reduce production option(type_qualifier_list) ->
-- On INT reduce production option(type_qualifier_list) ->
-- On FLOAT reduce production option(type_qualifier_list) ->
-- On ENUM reduce production option(type_qualifier_list) ->
-- On DOUBLE reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On CHAR reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 19:
## Known stack suffix:
## LPAREN
## LR(1) items:
cast_expression -> LPAREN . type_name RPAREN cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On type_qualifier_list shift to state 121
-- On type_name shift to state 337
-- On string_literals_list shift to state 32
-- On specifier_qualifier_list(type_name) shift to state 148
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(type_qualifier_list) shift to state 179
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 326
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VOID reduce production option(type_qualifier_list) ->
-- On UNSIGNED reduce production option(type_qualifier_list) ->
-- On UNION reduce production option(type_qualifier_list) ->
-- On UNDERSCORE_BOOL reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STRUCT reduce production option(type_qualifier_list) ->
-- On SIGNED reduce production option(type_qualifier_list) ->
-- On SHORT reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LONG reduce production option(type_qualifier_list) ->
-- On INT reduce production option(type_qualifier_list) ->
-- On FLOAT reduce production option(type_qualifier_list) ->
-- On ENUM reduce production option(type_qualifier_list) ->
-- On DOUBLE reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On CHAR reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 20:
## Known stack suffix:
## INC
## LR(1) items:
unary_expression -> INC . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 21
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 336
-- On string_literals_list shift to state 32
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
## Reductions:

State 21:
## Known stack suffix:
## LPAREN
## LR(1) items:
postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On type_qualifier_list shift to state 121
-- On type_name shift to state 334
-- On string_literals_list shift to state 32
-- On specifier_qualifier_list(type_name) shift to state 148
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(type_qualifier_list) shift to state 179
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 326
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VOID reduce production option(type_qualifier_list) ->
-- On UNSIGNED reduce production option(type_qualifier_list) ->
-- On UNION reduce production option(type_qualifier_list) ->
-- On UNDERSCORE_BOOL reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STRUCT reduce production option(type_qualifier_list) ->
-- On SIGNED reduce production option(type_qualifier_list) ->
-- On SHORT reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LONG reduce production option(type_qualifier_list) ->
-- On INT reduce production option(type_qualifier_list) ->
-- On FLOAT reduce production option(type_qualifier_list) ->
-- On ENUM reduce production option(type_qualifier_list) ->
-- On DOUBLE reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On CHAR reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 22:
## Known stack suffix:
## DEC
## LR(1) items:
unary_expression -> DEC . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 21
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 333
-- On string_literals_list shift to state 32
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
## Reductions:

State 23:
## Known stack suffix:
## CONSTANT
## LR(1) items:
primary_expression -> CONSTANT . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production primary_expression -> CONSTANT
-- On SUB_ASSIGN reduce production primary_expression -> CONSTANT
-- On STAR reduce production primary_expression -> CONSTANT
-- On SLASH reduce production primary_expression -> CONSTANT
-- On SEMICOLON reduce production primary_expression -> CONSTANT
-- On RPAREN reduce production primary_expression -> CONSTANT
-- On RIGHT_ASSIGN reduce production primary_expression -> CONSTANT
-- On RIGHT reduce production primary_expression -> CONSTANT
-- On RBRACK reduce production primary_expression -> CONSTANT
-- On RBRACE reduce production primary_expression -> CONSTANT
-- On QUESTION reduce production primary_expression -> CONSTANT
-- On PTR reduce production primary_expression -> CONSTANT
-- On PLUS reduce production primary_expression -> CONSTANT
-- On PERCENT reduce production primary_expression -> CONSTANT
-- On OR_ASSIGN reduce production primary_expression -> CONSTANT
-- On NEQ reduce production primary_expression -> CONSTANT
-- On MUL_ASSIGN reduce production primary_expression -> CONSTANT
-- On MOD_ASSIGN reduce production primary_expression -> CONSTANT
-- On MINUS reduce production primary_expression -> CONSTANT
-- On LT reduce production primary_expression -> CONSTANT
-- On LPAREN reduce production primary_expression -> CONSTANT
-- On LEQ reduce production primary_expression -> CONSTANT
-- On LEFT_ASSIGN reduce production primary_expression -> CONSTANT
-- On LEFT reduce production primary_expression -> CONSTANT
-- On LBRACK reduce production primary_expression -> CONSTANT
-- On INC reduce production primary_expression -> CONSTANT
-- On HAT reduce production primary_expression -> CONSTANT
-- On GT reduce production primary_expression -> CONSTANT
-- On GEQ reduce production primary_expression -> CONSTANT
-- On EQEQ reduce production primary_expression -> CONSTANT
-- On EQ reduce production primary_expression -> CONSTANT
-- On DOT reduce production primary_expression -> CONSTANT
-- On DIV_ASSIGN reduce production primary_expression -> CONSTANT
-- On DEC reduce production primary_expression -> CONSTANT
-- On COMMA reduce production primary_expression -> CONSTANT
-- On COLON reduce production primary_expression -> CONSTANT
-- On BARBAR reduce production primary_expression -> CONSTANT
-- On BAR reduce production primary_expression -> CONSTANT
-- On AND_ASSIGN reduce production primary_expression -> CONSTANT
-- On ANDAND reduce production primary_expression -> CONSTANT
-- On AND reduce production primary_expression -> CONSTANT
-- On ADD_ASSIGN reduce production primary_expression -> CONSTANT

State 24:
## Known stack suffix:
## BUILTIN_VA_ARG
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG . LPAREN assignment_expression COMMA type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On LPAREN shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN . assignment_expression COMMA type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 329
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 26:
## Known stack suffix:
## BANG
## LR(1) items:
unary_operator -> BANG . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production unary_operator -> BANG
-- On TILDE reduce production unary_operator -> BANG
-- On STRING_LITERAL reduce production unary_operator -> BANG
-- On STAR reduce production unary_operator -> BANG
-- On SIZEOF reduce production unary_operator -> BANG
-- On PLUS reduce production unary_operator -> BANG
-- On MINUS reduce production unary_operator -> BANG
-- On LPAREN reduce production unary_operator -> BANG
-- On INC reduce production unary_operator -> BANG
-- On DEC reduce production unary_operator -> BANG
-- On CONSTANT reduce production unary_operator -> BANG
-- On BUILTIN_VA_ARG reduce production unary_operator -> BANG
-- On BANG reduce production unary_operator -> BANG
-- On AND reduce production unary_operator -> BANG
-- On ALIGNOF reduce production unary_operator -> BANG

State 27:
## Known stack suffix:
## AND
## LR(1) items:
unary_operator -> AND . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production unary_operator -> AND
-- On TILDE reduce production unary_operator -> AND
-- On STRING_LITERAL reduce production unary_operator -> AND
-- On STAR reduce production unary_operator -> AND
-- On SIZEOF reduce production unary_operator -> AND
-- On PLUS reduce production unary_operator -> AND
-- On MINUS reduce production unary_operator -> AND
-- On LPAREN reduce production unary_operator -> AND
-- On INC reduce production unary_operator -> AND
-- On DEC reduce production unary_operator -> AND
-- On CONSTANT reduce production unary_operator -> AND
-- On BUILTIN_VA_ARG reduce production unary_operator -> AND
-- On BANG reduce production unary_operator -> AND
-- On AND reduce production unary_operator -> AND
-- On ALIGNOF reduce production unary_operator -> AND

State 28:
## Known stack suffix:
## ALIGNOF
## LR(1) items:
unary_expression -> ALIGNOF . unary_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> ALIGNOF . LPAREN type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 29
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 328
-- On string_literals_list shift to state 32
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
## Reductions:

State 29:
## Known stack suffix:
## ALIGNOF LPAREN
## LR(1) items:
postfix_expression -> LPAREN . type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
primary_expression -> LPAREN . expression RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> ALIGNOF LPAREN . type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On type_qualifier_list shift to state 121
-- On type_name shift to state 122
-- On string_literals_list shift to state 32
-- On specifier_qualifier_list(type_name) shift to state 148
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(type_qualifier_list) shift to state 179
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 326
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VOID reduce production option(type_qualifier_list) ->
-- On UNSIGNED reduce production option(type_qualifier_list) ->
-- On UNION reduce production option(type_qualifier_list) ->
-- On UNDERSCORE_BOOL reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STRUCT reduce production option(type_qualifier_list) ->
-- On SIGNED reduce production option(type_qualifier_list) ->
-- On SHORT reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LONG reduce production option(type_qualifier_list) ->
-- On INT reduce production option(type_qualifier_list) ->
-- On FLOAT reduce production option(type_qualifier_list) ->
-- On ENUM reduce production option(type_qualifier_list) ->
-- On DOUBLE reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On CHAR reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 30:
## Known stack suffix:
## unary_operator
## LR(1) items:
unary_expression -> unary_operator . cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On cast_expression shift to state 120
## Reductions:

State 31:
## Known stack suffix:
## unary_expression
## LR(1) items:
cast_expression -> unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production cast_expression -> unary_expression
-- On SUB_ASSIGN reduce production cast_expression -> unary_expression
-- On STAR reduce production cast_expression -> unary_expression
-- On SLASH reduce production cast_expression -> unary_expression
-- On SEMICOLON reduce production cast_expression -> unary_expression
-- On RPAREN reduce production cast_expression -> unary_expression
-- On RIGHT_ASSIGN reduce production cast_expression -> unary_expression
-- On RIGHT reduce production cast_expression -> unary_expression
-- On RBRACK reduce production cast_expression -> unary_expression
-- On RBRACE reduce production cast_expression -> unary_expression
-- On QUESTION reduce production cast_expression -> unary_expression
-- On PLUS reduce production cast_expression -> unary_expression
-- On PERCENT reduce production cast_expression -> unary_expression
-- On OR_ASSIGN reduce production cast_expression -> unary_expression
-- On NEQ reduce production cast_expression -> unary_expression
-- On MUL_ASSIGN reduce production cast_expression -> unary_expression
-- On MOD_ASSIGN reduce production cast_expression -> unary_expression
-- On MINUS reduce production cast_expression -> unary_expression
-- On LT reduce production cast_expression -> unary_expression
-- On LEQ reduce production cast_expression -> unary_expression
-- On LEFT_ASSIGN reduce production cast_expression -> unary_expression
-- On LEFT reduce production cast_expression -> unary_expression
-- On HAT reduce production cast_expression -> unary_expression
-- On GT reduce production cast_expression -> unary_expression
-- On GEQ reduce production cast_expression -> unary_expression
-- On EQEQ reduce production cast_expression -> unary_expression
-- On EQ reduce production cast_expression -> unary_expression
-- On DIV_ASSIGN reduce production cast_expression -> unary_expression
-- On COMMA reduce production cast_expression -> unary_expression
-- On COLON reduce production cast_expression -> unary_expression
-- On BARBAR reduce production cast_expression -> unary_expression
-- On BAR reduce production cast_expression -> unary_expression
-- On AND_ASSIGN reduce production cast_expression -> unary_expression
-- On ANDAND reduce production cast_expression -> unary_expression
-- On AND reduce production cast_expression -> unary_expression
-- On ADD_ASSIGN reduce production cast_expression -> unary_expression

State 32:
## Known stack suffix:
## string_literals_list
## LR(1) items:
primary_expression -> string_literals_list . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
string_literals_list -> string_literals_list . STRING_LITERAL [ XOR_ASSIGN SUB_ASSIGN STRING_LITERAL STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On STRING_LITERAL shift to state 33
## Reductions:
-- On XOR_ASSIGN reduce production primary_expression -> string_literals_list
-- On SUB_ASSIGN reduce production primary_expression -> string_literals_list
-- On STAR reduce production primary_expression -> string_literals_list
-- On SLASH reduce production primary_expression -> string_literals_list
-- On SEMICOLON reduce production primary_expression -> string_literals_list
-- On RPAREN reduce production primary_expression -> string_literals_list
-- On RIGHT_ASSIGN reduce production primary_expression -> string_literals_list
-- On RIGHT reduce production primary_expression -> string_literals_list
-- On RBRACK reduce production primary_expression -> string_literals_list
-- On RBRACE reduce production primary_expression -> string_literals_list
-- On QUESTION reduce production primary_expression -> string_literals_list
-- On PTR reduce production primary_expression -> string_literals_list
-- On PLUS reduce production primary_expression -> string_literals_list
-- On PERCENT reduce production primary_expression -> string_literals_list
-- On OR_ASSIGN reduce production primary_expression -> string_literals_list
-- On NEQ reduce production primary_expression -> string_literals_list
-- On MUL_ASSIGN reduce production primary_expression -> string_literals_list
-- On MOD_ASSIGN reduce production primary_expression -> string_literals_list
-- On MINUS reduce production primary_expression -> string_literals_list
-- On LT reduce production primary_expression -> string_literals_list
-- On LPAREN reduce production primary_expression -> string_literals_list
-- On LEQ reduce production primary_expression -> string_literals_list
-- On LEFT_ASSIGN reduce production primary_expression -> string_literals_list
-- On LEFT reduce production primary_expression -> string_literals_list
-- On LBRACK reduce production primary_expression -> string_literals_list
-- On INC reduce production primary_expression -> string_literals_list
-- On HAT reduce production primary_expression -> string_literals_list
-- On GT reduce production primary_expression -> string_literals_list
-- On GEQ reduce production primary_expression -> string_literals_list
-- On EQEQ reduce production primary_expression -> string_literals_list
-- On EQ reduce production primary_expression -> string_literals_list
-- On DOT reduce production primary_expression -> string_literals_list
-- On DIV_ASSIGN reduce production primary_expression -> string_literals_list
-- On DEC reduce production primary_expression -> string_literals_list
-- On COMMA reduce production primary_expression -> string_literals_list
-- On COLON reduce production primary_expression -> string_literals_list
-- On BARBAR reduce production primary_expression -> string_literals_list
-- On BAR reduce production primary_expression -> string_literals_list
-- On AND_ASSIGN reduce production primary_expression -> string_literals_list
-- On ANDAND reduce production primary_expression -> string_literals_list
-- On AND reduce production primary_expression -> string_literals_list
-- On ADD_ASSIGN reduce production primary_expression -> string_literals_list

State 33:
## Known stack suffix:
## string_literals_list STRING_LITERAL
## LR(1) items:
string_literals_list -> string_literals_list STRING_LITERAL . [ XOR_ASSIGN SUB_ASSIGN STRING_LITERAL STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On SUB_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On STRING_LITERAL reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On STAR reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On SLASH reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On SEMICOLON reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On RPAREN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On RIGHT_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On RIGHT reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On RBRACK reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On RBRACE reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On QUESTION reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On PTR reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On PLUS reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On PERCENT reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On OR_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On NEQ reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On MUL_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On MOD_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On MINUS reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On LT reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On LPAREN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On LEQ reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On LEFT_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On LEFT reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On LBRACK reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On INC reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On HAT reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On GT reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On GEQ reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On EQEQ reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On EQ reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On DOT reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On DIV_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On DEC reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On COMMA reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On COLON reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On BARBAR reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On BAR reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On AND_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On ANDAND reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On AND reduce production string_literals_list -> string_literals_list STRING_LITERAL
-- On ADD_ASSIGN reduce production string_literals_list -> string_literals_list STRING_LITERAL

State 34:
## Known stack suffix:
## primary_expression
## LR(1) items:
postfix_expression -> primary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production postfix_expression -> primary_expression
-- On SUB_ASSIGN reduce production postfix_expression -> primary_expression
-- On STAR reduce production postfix_expression -> primary_expression
-- On SLASH reduce production postfix_expression -> primary_expression
-- On SEMICOLON reduce production postfix_expression -> primary_expression
-- On RPAREN reduce production postfix_expression -> primary_expression
-- On RIGHT_ASSIGN reduce production postfix_expression -> primary_expression
-- On RIGHT reduce production postfix_expression -> primary_expression
-- On RBRACK reduce production postfix_expression -> primary_expression
-- On RBRACE reduce production postfix_expression -> primary_expression
-- On QUESTION reduce production postfix_expression -> primary_expression
-- On PTR reduce production postfix_expression -> primary_expression
-- On PLUS reduce production postfix_expression -> primary_expression
-- On PERCENT reduce production postfix_expression -> primary_expression
-- On OR_ASSIGN reduce production postfix_expression -> primary_expression
-- On NEQ reduce production postfix_expression -> primary_expression
-- On MUL_ASSIGN reduce production postfix_expression -> primary_expression
-- On MOD_ASSIGN reduce production postfix_expression -> primary_expression
-- On MINUS reduce production postfix_expression -> primary_expression
-- On LT reduce production postfix_expression -> primary_expression
-- On LPAREN reduce production postfix_expression -> primary_expression
-- On LEQ reduce production postfix_expression -> primary_expression
-- On LEFT_ASSIGN reduce production postfix_expression -> primary_expression
-- On LEFT reduce production postfix_expression -> primary_expression
-- On LBRACK reduce production postfix_expression -> primary_expression
-- On INC reduce production postfix_expression -> primary_expression
-- On HAT reduce production postfix_expression -> primary_expression
-- On GT reduce production postfix_expression -> primary_expression
-- On GEQ reduce production postfix_expression -> primary_expression
-- On EQEQ reduce production postfix_expression -> primary_expression
-- On EQ reduce production postfix_expression -> primary_expression
-- On DOT reduce production postfix_expression -> primary_expression
-- On DIV_ASSIGN reduce production postfix_expression -> primary_expression
-- On DEC reduce production postfix_expression -> primary_expression
-- On COMMA reduce production postfix_expression -> primary_expression
-- On COLON reduce production postfix_expression -> primary_expression
-- On BARBAR reduce production postfix_expression -> primary_expression
-- On BAR reduce production postfix_expression -> primary_expression
-- On AND_ASSIGN reduce production postfix_expression -> primary_expression
-- On ANDAND reduce production postfix_expression -> primary_expression
-- On AND reduce production postfix_expression -> primary_expression
-- On ADD_ASSIGN reduce production postfix_expression -> primary_expression

State 35:
## Known stack suffix:
## postfix_expression
## LR(1) items:
postfix_expression -> postfix_expression . LBRACK expression RBRACK [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . LPAREN option(argument_expression_list) RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . DOT general_identifier [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . PTR general_identifier [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . INC [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> postfix_expression . DEC [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> postfix_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On PTR shift to state 36
-- On LPAREN shift to state 40
-- On LBRACK shift to state 113
-- On INC shift to state 116
-- On DOT shift to state 117
-- On DEC shift to state 119
## Reductions:
-- On XOR_ASSIGN reduce production unary_expression -> postfix_expression
-- On SUB_ASSIGN reduce production unary_expression -> postfix_expression
-- On STAR reduce production unary_expression -> postfix_expression
-- On SLASH reduce production unary_expression -> postfix_expression
-- On SEMICOLON reduce production unary_expression -> postfix_expression
-- On RPAREN reduce production unary_expression -> postfix_expression
-- On RIGHT_ASSIGN reduce production unary_expression -> postfix_expression
-- On RIGHT reduce production unary_expression -> postfix_expression
-- On RBRACK reduce production unary_expression -> postfix_expression
-- On RBRACE reduce production unary_expression -> postfix_expression
-- On QUESTION reduce production unary_expression -> postfix_expression
-- On PLUS reduce production unary_expression -> postfix_expression
-- On PERCENT reduce production unary_expression -> postfix_expression
-- On OR_ASSIGN reduce production unary_expression -> postfix_expression
-- On NEQ reduce production unary_expression -> postfix_expression
-- On MUL_ASSIGN reduce production unary_expression -> postfix_expression
-- On MOD_ASSIGN reduce production unary_expression -> postfix_expression
-- On MINUS reduce production unary_expression -> postfix_expression
-- On LT reduce production unary_expression -> postfix_expression
-- On LEQ reduce production unary_expression -> postfix_expression
-- On LEFT_ASSIGN reduce production unary_expression -> postfix_expression
-- On LEFT reduce production unary_expression -> postfix_expression
-- On HAT reduce production unary_expression -> postfix_expression
-- On GT reduce production unary_expression -> postfix_expression
-- On GEQ reduce production unary_expression -> postfix_expression
-- On EQEQ reduce production unary_expression -> postfix_expression
-- On EQ reduce production unary_expression -> postfix_expression
-- On DIV_ASSIGN reduce production unary_expression -> postfix_expression
-- On COMMA reduce production unary_expression -> postfix_expression
-- On COLON reduce production unary_expression -> postfix_expression
-- On BARBAR reduce production unary_expression -> postfix_expression
-- On BAR reduce production unary_expression -> postfix_expression
-- On AND_ASSIGN reduce production unary_expression -> postfix_expression
-- On ANDAND reduce production unary_expression -> postfix_expression
-- On AND reduce production unary_expression -> postfix_expression
-- On ADD_ASSIGN reduce production unary_expression -> postfix_expression

State 36:
## Known stack suffix:
## postfix_expression PTR
## LR(1) items:
postfix_expression -> postfix_expression PTR . general_identifier [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On general_identifier shift to state 39
## Reductions:

State 37:
## Known stack suffix:
## VAR_NAME
## LR(1) items:
general_identifier -> VAR_NAME . [ XOR_ASSIGN VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF SUB_ASSIGN STRUCT STATIC STAR SLASH SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PLUS PERCENT PACKED OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC HAT GT GEQ FLOAT EXTERN EQEQ EQ ENUM DOUBLE DOT DIV_ASSIGN DEC CONST COMMA COLON CHAR BARBAR BAR AUTO ATTRIBUTE AND_ASSIGN ANDAND AND ALIGNAS ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production general_identifier -> VAR_NAME
-- On VOLATILE reduce production general_identifier -> VAR_NAME
-- On VOID reduce production general_identifier -> VAR_NAME
-- On VAR_NAME reduce production general_identifier -> VAR_NAME
-- On UNSIGNED reduce production general_identifier -> VAR_NAME
-- On UNION reduce production general_identifier -> VAR_NAME
-- On UNDERSCORE_BOOL reduce production general_identifier -> VAR_NAME
-- On TYPEDEF_NAME reduce production general_identifier -> VAR_NAME
-- On TYPEDEF reduce production general_identifier -> VAR_NAME
-- On SUB_ASSIGN reduce production general_identifier -> VAR_NAME
-- On STRUCT reduce production general_identifier -> VAR_NAME
-- On STATIC reduce production general_identifier -> VAR_NAME
-- On STAR reduce production general_identifier -> VAR_NAME
-- On SLASH reduce production general_identifier -> VAR_NAME
-- On SIGNED reduce production general_identifier -> VAR_NAME
-- On SHORT reduce production general_identifier -> VAR_NAME
-- On SEMICOLON reduce production general_identifier -> VAR_NAME
-- On RPAREN reduce production general_identifier -> VAR_NAME
-- On RIGHT_ASSIGN reduce production general_identifier -> VAR_NAME
-- On RIGHT reduce production general_identifier -> VAR_NAME
-- On RESTRICT reduce production general_identifier -> VAR_NAME
-- On REGISTER reduce production general_identifier -> VAR_NAME
-- On RBRACK reduce production general_identifier -> VAR_NAME
-- On RBRACE reduce production general_identifier -> VAR_NAME
-- On QUESTION reduce production general_identifier -> VAR_NAME
-- On PTR reduce production general_identifier -> VAR_NAME
-- On PLUS reduce production general_identifier -> VAR_NAME
-- On PERCENT reduce production general_identifier -> VAR_NAME
-- On PACKED reduce production general_identifier -> VAR_NAME
-- On OR_ASSIGN reduce production general_identifier -> VAR_NAME
-- On NEQ reduce production general_identifier -> VAR_NAME
-- On MUL_ASSIGN reduce production general_identifier -> VAR_NAME
-- On MOD_ASSIGN reduce production general_identifier -> VAR_NAME
-- On MINUS reduce production general_identifier -> VAR_NAME
-- On LT reduce production general_identifier -> VAR_NAME
-- On LPAREN reduce production general_identifier -> VAR_NAME
-- On LONG reduce production general_identifier -> VAR_NAME
-- On LEQ reduce production general_identifier -> VAR_NAME
-- On LEFT_ASSIGN reduce production general_identifier -> VAR_NAME
-- On LEFT reduce production general_identifier -> VAR_NAME
-- On LBRACK reduce production general_identifier -> VAR_NAME
-- On LBRACE reduce production general_identifier -> VAR_NAME
-- On INT reduce production general_identifier -> VAR_NAME
-- On INLINE reduce production general_identifier -> VAR_NAME
-- On INC reduce production general_identifier -> VAR_NAME
-- On HAT reduce production general_identifier -> VAR_NAME
-- On GT reduce production general_identifier -> VAR_NAME
-- On GEQ reduce production general_identifier -> VAR_NAME
-- On FLOAT reduce production general_identifier -> VAR_NAME
-- On EXTERN reduce production general_identifier -> VAR_NAME
-- On EQEQ reduce production general_identifier -> VAR_NAME
-- On EQ reduce production general_identifier -> VAR_NAME
-- On ENUM reduce production general_identifier -> VAR_NAME
-- On DOUBLE reduce production general_identifier -> VAR_NAME
-- On DOT reduce production general_identifier -> VAR_NAME
-- On DIV_ASSIGN reduce production general_identifier -> VAR_NAME
-- On DEC reduce production general_identifier -> VAR_NAME
-- On CONST reduce production general_identifier -> VAR_NAME
-- On COMMA reduce production general_identifier -> VAR_NAME
-- On COLON reduce production general_identifier -> VAR_NAME
-- On CHAR reduce production general_identifier -> VAR_NAME
-- On BARBAR reduce production general_identifier -> VAR_NAME
-- On BAR reduce production general_identifier -> VAR_NAME
-- On AUTO reduce production general_identifier -> VAR_NAME
-- On ATTRIBUTE reduce production general_identifier -> VAR_NAME
-- On AND_ASSIGN reduce production general_identifier -> VAR_NAME
-- On ANDAND reduce production general_identifier -> VAR_NAME
-- On AND reduce production general_identifier -> VAR_NAME
-- On ALIGNAS reduce production general_identifier -> VAR_NAME
-- On ADD_ASSIGN reduce production general_identifier -> VAR_NAME

State 38:
## Known stack suffix:
## TYPEDEF_NAME
## LR(1) items:
general_identifier -> TYPEDEF_NAME . [ XOR_ASSIGN VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF SUB_ASSIGN STRUCT STATIC STAR SLASH SIGNED SHORT SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RESTRICT REGISTER RBRACK RBRACE QUESTION PTR PLUS PERCENT PACKED OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LONG LEQ LEFT_ASSIGN LEFT LBRACK LBRACE INT INLINE INC HAT GT GEQ FLOAT EXTERN EQEQ EQ ENUM DOUBLE DOT DIV_ASSIGN DEC CONST COMMA COLON CHAR BARBAR BAR AUTO ATTRIBUTE AND_ASSIGN ANDAND AND ALIGNAS ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production general_identifier -> TYPEDEF_NAME
-- On VOLATILE reduce production general_identifier -> TYPEDEF_NAME
-- On VOID reduce production general_identifier -> TYPEDEF_NAME
-- On VAR_NAME reduce production general_identifier -> TYPEDEF_NAME
-- On UNSIGNED reduce production general_identifier -> TYPEDEF_NAME
-- On UNION reduce production general_identifier -> TYPEDEF_NAME
-- On UNDERSCORE_BOOL reduce production general_identifier -> TYPEDEF_NAME
-- On TYPEDEF_NAME reduce production general_identifier -> TYPEDEF_NAME
-- On TYPEDEF reduce production general_identifier -> TYPEDEF_NAME
-- On SUB_ASSIGN reduce production general_identifier -> TYPEDEF_NAME
-- On STRUCT reduce production general_identifier -> TYPEDEF_NAME
-- On STATIC reduce production general_identifier -> TYPEDEF_NAME
-- On STAR reduce production general_identifier -> TYPEDEF_NAME
-- On SLASH reduce production general_identifier -> TYPEDEF_NAME
-- On SIGNED reduce production general_identifier -> TYPEDEF_NAME
-- On SHORT reduce production general_identifier -> TYPEDEF_NAME
-- On SEMICOLON reduce production general_identifier -> TYPEDEF_NAME
-- On RPAREN reduce production general_identifier -> TYPEDEF_NAME
-- On RIGHT_ASSIGN reduce production general_identifier -> TYPEDEF_NAME
-- On RIGHT reduce production general_identifier -> TYPEDEF_NAME
-- On RESTRICT reduce production general_identifier -> TYPEDEF_NAME
-- On REGISTER reduce production general_identifier -> TYPEDEF_NAME
-- On RBRACK reduce production general_identifier -> TYPEDEF_NAME
-- On RBRACE reduce production general_identifier -> TYPEDEF_NAME
-- On QUESTION reduce production general_identifier -> TYPEDEF_NAME
-- On PTR reduce production general_identifier -> TYPEDEF_NAME
-- On PLUS reduce production general_identifier -> TYPEDEF_NAME
-- On PERCENT reduce production general_identifier -> TYPEDEF_NAME
-- On PACKED reduce production general_identifier -> TYPEDEF_NAME
-- On OR_ASSIGN reduce production general_identifier -> TYPEDEF_NAME
-- On NEQ reduce production general_identifier -> TYPEDEF_NAME
-- On MUL_ASSIGN reduce production general_identifier -> TYPEDEF_NAME
-- On MOD_ASSIGN reduce production general_identifier -> TYPEDEF_NAME
-- On MINUS reduce production general_identifier -> TYPEDEF_NAME
-- On LT reduce production general_identifier -> TYPEDEF_NAME
-- On LPAREN reduce production general_identifier -> TYPEDEF_NAME
-- On LONG reduce production general_identifier -> TYPEDEF_NAME
-- On LEQ reduce production general_identifier -> TYPEDEF_NAME
-- On LEFT_ASSIGN reduce production general_identifier -> TYPEDEF_NAME
-- On LEFT reduce production general_identifier -> TYPEDEF_NAME
-- On LBRACK reduce production general_identifier -> TYPEDEF_NAME
-- On LBRACE reduce production general_identifier -> TYPEDEF_NAME
-- On INT reduce production general_identifier -> TYPEDEF_NAME
-- On INLINE reduce production general_identifier -> TYPEDEF_NAME
-- On INC reduce production general_identifier -> TYPEDEF_NAME
-- On HAT reduce production general_identifier -> TYPEDEF_NAME
-- On GT reduce production general_identifier -> TYPEDEF_NAME
-- On GEQ reduce production general_identifier -> TYPEDEF_NAME
-- On FLOAT reduce production general_identifier -> TYPEDEF_NAME
-- On EXTERN reduce production general_identifier -> TYPEDEF_NAME
-- On EQEQ reduce production general_identifier -> TYPEDEF_NAME
-- On EQ reduce production general_identifier -> TYPEDEF_NAME
-- On ENUM reduce production general_identifier -> TYPEDEF_NAME
-- On DOUBLE reduce production general_identifier -> TYPEDEF_NAME
-- On DOT reduce production general_identifier -> TYPEDEF_NAME
-- On DIV_ASSIGN reduce production general_identifier -> TYPEDEF_NAME
-- On DEC reduce production general_identifier -> TYPEDEF_NAME
-- On CONST reduce production general_identifier -> TYPEDEF_NAME
-- On COMMA reduce production general_identifier -> TYPEDEF_NAME
-- On COLON reduce production general_identifier -> TYPEDEF_NAME
-- On CHAR reduce production general_identifier -> TYPEDEF_NAME
-- On BARBAR reduce production general_identifier -> TYPEDEF_NAME
-- On BAR reduce production general_identifier -> TYPEDEF_NAME
-- On AUTO reduce production general_identifier -> TYPEDEF_NAME
-- On ATTRIBUTE reduce production general_identifier -> TYPEDEF_NAME
-- On AND_ASSIGN reduce production general_identifier -> TYPEDEF_NAME
-- On ANDAND reduce production general_identifier -> TYPEDEF_NAME
-- On AND reduce production general_identifier -> TYPEDEF_NAME
-- On ALIGNAS reduce production general_identifier -> TYPEDEF_NAME
-- On ADD_ASSIGN reduce production general_identifier -> TYPEDEF_NAME

State 39:
## Known stack suffix:
## postfix_expression PTR general_identifier
## LR(1) items:
postfix_expression -> postfix_expression PTR general_identifier . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On SUB_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On STAR reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On SLASH reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On SEMICOLON reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On RPAREN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On RIGHT_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On RIGHT reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On RBRACK reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On RBRACE reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On QUESTION reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On PTR reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On PLUS reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On PERCENT reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On OR_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On NEQ reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On MUL_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On MOD_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On MINUS reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On LT reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On LPAREN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On LEQ reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On LEFT_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On LEFT reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On LBRACK reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On INC reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On HAT reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On GT reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On GEQ reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On EQEQ reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On EQ reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On DOT reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On DIV_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On DEC reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On COMMA reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On COLON reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On BARBAR reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On BAR reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On AND_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On ANDAND reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On AND reduce production postfix_expression -> postfix_expression PTR general_identifier
-- On ADD_ASSIGN reduce production postfix_expression -> postfix_expression PTR general_identifier

State 40:
## Known stack suffix:
## postfix_expression LPAREN
## LR(1) items:
postfix_expression -> postfix_expression LPAREN . option(argument_expression_list) RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(argument_expression_list) shift to state 107
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 109
-- On argument_expression_list shift to state 110
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On RPAREN reduce production option(argument_expression_list) ->

State 41:
## Known stack suffix:
## unary_expression
## LR(1) items:
assignment_expression -> unary_expression . assignment_operator assignment_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
cast_expression -> unary_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On XOR_ASSIGN shift to state 42
-- On SUB_ASSIGN shift to state 43
-- On RIGHT_ASSIGN shift to state 44
-- On OR_ASSIGN shift to state 45
-- On MUL_ASSIGN shift to state 46
-- On MOD_ASSIGN shift to state 47
-- On LEFT_ASSIGN shift to state 48
-- On EQ shift to state 49
-- On DIV_ASSIGN shift to state 50
-- On AND_ASSIGN shift to state 51
-- On ADD_ASSIGN shift to state 52
-- On assignment_operator shift to state 53
## Reductions:
-- On STAR reduce production cast_expression -> unary_expression
-- On SLASH reduce production cast_expression -> unary_expression
-- On SEMICOLON reduce production cast_expression -> unary_expression
-- On RPAREN reduce production cast_expression -> unary_expression
-- On RIGHT reduce production cast_expression -> unary_expression
-- On RBRACK reduce production cast_expression -> unary_expression
-- On RBRACE reduce production cast_expression -> unary_expression
-- On QUESTION reduce production cast_expression -> unary_expression
-- On PLUS reduce production cast_expression -> unary_expression
-- On PERCENT reduce production cast_expression -> unary_expression
-- On NEQ reduce production cast_expression -> unary_expression
-- On MINUS reduce production cast_expression -> unary_expression
-- On LT reduce production cast_expression -> unary_expression
-- On LEQ reduce production cast_expression -> unary_expression
-- On LEFT reduce production cast_expression -> unary_expression
-- On HAT reduce production cast_expression -> unary_expression
-- On GT reduce production cast_expression -> unary_expression
-- On GEQ reduce production cast_expression -> unary_expression
-- On EQEQ reduce production cast_expression -> unary_expression
-- On COMMA reduce production cast_expression -> unary_expression
-- On COLON reduce production cast_expression -> unary_expression
-- On BARBAR reduce production cast_expression -> unary_expression
-- On BAR reduce production cast_expression -> unary_expression
-- On ANDAND reduce production cast_expression -> unary_expression
-- On AND reduce production cast_expression -> unary_expression

State 42:
## Known stack suffix:
## XOR_ASSIGN
## LR(1) items:
assignment_operator -> XOR_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> XOR_ASSIGN
-- On TILDE reduce production assignment_operator -> XOR_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> XOR_ASSIGN
-- On STAR reduce production assignment_operator -> XOR_ASSIGN
-- On SIZEOF reduce production assignment_operator -> XOR_ASSIGN
-- On PLUS reduce production assignment_operator -> XOR_ASSIGN
-- On MINUS reduce production assignment_operator -> XOR_ASSIGN
-- On LPAREN reduce production assignment_operator -> XOR_ASSIGN
-- On INC reduce production assignment_operator -> XOR_ASSIGN
-- On DEC reduce production assignment_operator -> XOR_ASSIGN
-- On CONSTANT reduce production assignment_operator -> XOR_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> XOR_ASSIGN
-- On BANG reduce production assignment_operator -> XOR_ASSIGN
-- On AND reduce production assignment_operator -> XOR_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> XOR_ASSIGN

State 43:
## Known stack suffix:
## SUB_ASSIGN
## LR(1) items:
assignment_operator -> SUB_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> SUB_ASSIGN
-- On TILDE reduce production assignment_operator -> SUB_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> SUB_ASSIGN
-- On STAR reduce production assignment_operator -> SUB_ASSIGN
-- On SIZEOF reduce production assignment_operator -> SUB_ASSIGN
-- On PLUS reduce production assignment_operator -> SUB_ASSIGN
-- On MINUS reduce production assignment_operator -> SUB_ASSIGN
-- On LPAREN reduce production assignment_operator -> SUB_ASSIGN
-- On INC reduce production assignment_operator -> SUB_ASSIGN
-- On DEC reduce production assignment_operator -> SUB_ASSIGN
-- On CONSTANT reduce production assignment_operator -> SUB_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> SUB_ASSIGN
-- On BANG reduce production assignment_operator -> SUB_ASSIGN
-- On AND reduce production assignment_operator -> SUB_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> SUB_ASSIGN

State 44:
## Known stack suffix:
## RIGHT_ASSIGN
## LR(1) items:
assignment_operator -> RIGHT_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> RIGHT_ASSIGN
-- On TILDE reduce production assignment_operator -> RIGHT_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> RIGHT_ASSIGN
-- On STAR reduce production assignment_operator -> RIGHT_ASSIGN
-- On SIZEOF reduce production assignment_operator -> RIGHT_ASSIGN
-- On PLUS reduce production assignment_operator -> RIGHT_ASSIGN
-- On MINUS reduce production assignment_operator -> RIGHT_ASSIGN
-- On LPAREN reduce production assignment_operator -> RIGHT_ASSIGN
-- On INC reduce production assignment_operator -> RIGHT_ASSIGN
-- On DEC reduce production assignment_operator -> RIGHT_ASSIGN
-- On CONSTANT reduce production assignment_operator -> RIGHT_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> RIGHT_ASSIGN
-- On BANG reduce production assignment_operator -> RIGHT_ASSIGN
-- On AND reduce production assignment_operator -> RIGHT_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> RIGHT_ASSIGN

State 45:
## Known stack suffix:
## OR_ASSIGN
## LR(1) items:
assignment_operator -> OR_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> OR_ASSIGN
-- On TILDE reduce production assignment_operator -> OR_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> OR_ASSIGN
-- On STAR reduce production assignment_operator -> OR_ASSIGN
-- On SIZEOF reduce production assignment_operator -> OR_ASSIGN
-- On PLUS reduce production assignment_operator -> OR_ASSIGN
-- On MINUS reduce production assignment_operator -> OR_ASSIGN
-- On LPAREN reduce production assignment_operator -> OR_ASSIGN
-- On INC reduce production assignment_operator -> OR_ASSIGN
-- On DEC reduce production assignment_operator -> OR_ASSIGN
-- On CONSTANT reduce production assignment_operator -> OR_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> OR_ASSIGN
-- On BANG reduce production assignment_operator -> OR_ASSIGN
-- On AND reduce production assignment_operator -> OR_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> OR_ASSIGN

State 46:
## Known stack suffix:
## MUL_ASSIGN
## LR(1) items:
assignment_operator -> MUL_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> MUL_ASSIGN
-- On TILDE reduce production assignment_operator -> MUL_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> MUL_ASSIGN
-- On STAR reduce production assignment_operator -> MUL_ASSIGN
-- On SIZEOF reduce production assignment_operator -> MUL_ASSIGN
-- On PLUS reduce production assignment_operator -> MUL_ASSIGN
-- On MINUS reduce production assignment_operator -> MUL_ASSIGN
-- On LPAREN reduce production assignment_operator -> MUL_ASSIGN
-- On INC reduce production assignment_operator -> MUL_ASSIGN
-- On DEC reduce production assignment_operator -> MUL_ASSIGN
-- On CONSTANT reduce production assignment_operator -> MUL_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> MUL_ASSIGN
-- On BANG reduce production assignment_operator -> MUL_ASSIGN
-- On AND reduce production assignment_operator -> MUL_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> MUL_ASSIGN

State 47:
## Known stack suffix:
## MOD_ASSIGN
## LR(1) items:
assignment_operator -> MOD_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> MOD_ASSIGN
-- On TILDE reduce production assignment_operator -> MOD_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> MOD_ASSIGN
-- On STAR reduce production assignment_operator -> MOD_ASSIGN
-- On SIZEOF reduce production assignment_operator -> MOD_ASSIGN
-- On PLUS reduce production assignment_operator -> MOD_ASSIGN
-- On MINUS reduce production assignment_operator -> MOD_ASSIGN
-- On LPAREN reduce production assignment_operator -> MOD_ASSIGN
-- On INC reduce production assignment_operator -> MOD_ASSIGN
-- On DEC reduce production assignment_operator -> MOD_ASSIGN
-- On CONSTANT reduce production assignment_operator -> MOD_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> MOD_ASSIGN
-- On BANG reduce production assignment_operator -> MOD_ASSIGN
-- On AND reduce production assignment_operator -> MOD_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> MOD_ASSIGN

State 48:
## Known stack suffix:
## LEFT_ASSIGN
## LR(1) items:
assignment_operator -> LEFT_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> LEFT_ASSIGN
-- On TILDE reduce production assignment_operator -> LEFT_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> LEFT_ASSIGN
-- On STAR reduce production assignment_operator -> LEFT_ASSIGN
-- On SIZEOF reduce production assignment_operator -> LEFT_ASSIGN
-- On PLUS reduce production assignment_operator -> LEFT_ASSIGN
-- On MINUS reduce production assignment_operator -> LEFT_ASSIGN
-- On LPAREN reduce production assignment_operator -> LEFT_ASSIGN
-- On INC reduce production assignment_operator -> LEFT_ASSIGN
-- On DEC reduce production assignment_operator -> LEFT_ASSIGN
-- On CONSTANT reduce production assignment_operator -> LEFT_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> LEFT_ASSIGN
-- On BANG reduce production assignment_operator -> LEFT_ASSIGN
-- On AND reduce production assignment_operator -> LEFT_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> LEFT_ASSIGN

State 49:
## Known stack suffix:
## EQ
## LR(1) items:
assignment_operator -> EQ . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> EQ
-- On TILDE reduce production assignment_operator -> EQ
-- On STRING_LITERAL reduce production assignment_operator -> EQ
-- On STAR reduce production assignment_operator -> EQ
-- On SIZEOF reduce production assignment_operator -> EQ
-- On PLUS reduce production assignment_operator -> EQ
-- On MINUS reduce production assignment_operator -> EQ
-- On LPAREN reduce production assignment_operator -> EQ
-- On INC reduce production assignment_operator -> EQ
-- On DEC reduce production assignment_operator -> EQ
-- On CONSTANT reduce production assignment_operator -> EQ
-- On BUILTIN_VA_ARG reduce production assignment_operator -> EQ
-- On BANG reduce production assignment_operator -> EQ
-- On AND reduce production assignment_operator -> EQ
-- On ALIGNOF reduce production assignment_operator -> EQ

State 50:
## Known stack suffix:
## DIV_ASSIGN
## LR(1) items:
assignment_operator -> DIV_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> DIV_ASSIGN
-- On TILDE reduce production assignment_operator -> DIV_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> DIV_ASSIGN
-- On STAR reduce production assignment_operator -> DIV_ASSIGN
-- On SIZEOF reduce production assignment_operator -> DIV_ASSIGN
-- On PLUS reduce production assignment_operator -> DIV_ASSIGN
-- On MINUS reduce production assignment_operator -> DIV_ASSIGN
-- On LPAREN reduce production assignment_operator -> DIV_ASSIGN
-- On INC reduce production assignment_operator -> DIV_ASSIGN
-- On DEC reduce production assignment_operator -> DIV_ASSIGN
-- On CONSTANT reduce production assignment_operator -> DIV_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> DIV_ASSIGN
-- On BANG reduce production assignment_operator -> DIV_ASSIGN
-- On AND reduce production assignment_operator -> DIV_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> DIV_ASSIGN

State 51:
## Known stack suffix:
## AND_ASSIGN
## LR(1) items:
assignment_operator -> AND_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> AND_ASSIGN
-- On TILDE reduce production assignment_operator -> AND_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> AND_ASSIGN
-- On STAR reduce production assignment_operator -> AND_ASSIGN
-- On SIZEOF reduce production assignment_operator -> AND_ASSIGN
-- On PLUS reduce production assignment_operator -> AND_ASSIGN
-- On MINUS reduce production assignment_operator -> AND_ASSIGN
-- On LPAREN reduce production assignment_operator -> AND_ASSIGN
-- On INC reduce production assignment_operator -> AND_ASSIGN
-- On DEC reduce production assignment_operator -> AND_ASSIGN
-- On CONSTANT reduce production assignment_operator -> AND_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> AND_ASSIGN
-- On BANG reduce production assignment_operator -> AND_ASSIGN
-- On AND reduce production assignment_operator -> AND_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> AND_ASSIGN

State 52:
## Known stack suffix:
## ADD_ASSIGN
## LR(1) items:
assignment_operator -> ADD_ASSIGN . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production assignment_operator -> ADD_ASSIGN
-- On TILDE reduce production assignment_operator -> ADD_ASSIGN
-- On STRING_LITERAL reduce production assignment_operator -> ADD_ASSIGN
-- On STAR reduce production assignment_operator -> ADD_ASSIGN
-- On SIZEOF reduce production assignment_operator -> ADD_ASSIGN
-- On PLUS reduce production assignment_operator -> ADD_ASSIGN
-- On MINUS reduce production assignment_operator -> ADD_ASSIGN
-- On LPAREN reduce production assignment_operator -> ADD_ASSIGN
-- On INC reduce production assignment_operator -> ADD_ASSIGN
-- On DEC reduce production assignment_operator -> ADD_ASSIGN
-- On CONSTANT reduce production assignment_operator -> ADD_ASSIGN
-- On BUILTIN_VA_ARG reduce production assignment_operator -> ADD_ASSIGN
-- On BANG reduce production assignment_operator -> ADD_ASSIGN
-- On AND reduce production assignment_operator -> ADD_ASSIGN
-- On ALIGNOF reduce production assignment_operator -> ADD_ASSIGN

State 53:
## Known stack suffix:
## unary_expression assignment_operator
## LR(1) items:
assignment_expression -> unary_expression assignment_operator . assignment_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 106
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 54:
## Known stack suffix:
## shift_expression
## LR(1) items:
relational_expression -> shift_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
shift_expression -> shift_expression . shift_operator additive_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On RIGHT shift to state 55
-- On LEFT shift to state 56
-- On shift_operator shift to state 57
## Reductions:
-- On SEMICOLON reduce production relational_expression -> shift_expression
-- On RPAREN reduce production relational_expression -> shift_expression
-- On RBRACK reduce production relational_expression -> shift_expression
-- On RBRACE reduce production relational_expression -> shift_expression
-- On QUESTION reduce production relational_expression -> shift_expression
-- On NEQ reduce production relational_expression -> shift_expression
-- On LT reduce production relational_expression -> shift_expression
-- On LEQ reduce production relational_expression -> shift_expression
-- On HAT reduce production relational_expression -> shift_expression
-- On GT reduce production relational_expression -> shift_expression
-- On GEQ reduce production relational_expression -> shift_expression
-- On EQEQ reduce production relational_expression -> shift_expression
-- On COMMA reduce production relational_expression -> shift_expression
-- On COLON reduce production relational_expression -> shift_expression
-- On BARBAR reduce production relational_expression -> shift_expression
-- On BAR reduce production relational_expression -> shift_expression
-- On ANDAND reduce production relational_expression -> shift_expression
-- On AND reduce production relational_expression -> shift_expression

State 55:
## Known stack suffix:
## RIGHT
## LR(1) items:
shift_operator -> RIGHT . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production shift_operator -> RIGHT
-- On TILDE reduce production shift_operator -> RIGHT
-- On STRING_LITERAL reduce production shift_operator -> RIGHT
-- On STAR reduce production shift_operator -> RIGHT
-- On SIZEOF reduce production shift_operator -> RIGHT
-- On PLUS reduce production shift_operator -> RIGHT
-- On MINUS reduce production shift_operator -> RIGHT
-- On LPAREN reduce production shift_operator -> RIGHT
-- On INC reduce production shift_operator -> RIGHT
-- On DEC reduce production shift_operator -> RIGHT
-- On CONSTANT reduce production shift_operator -> RIGHT
-- On BUILTIN_VA_ARG reduce production shift_operator -> RIGHT
-- On BANG reduce production shift_operator -> RIGHT
-- On AND reduce production shift_operator -> RIGHT
-- On ALIGNOF reduce production shift_operator -> RIGHT

State 56:
## Known stack suffix:
## LEFT
## LR(1) items:
shift_operator -> LEFT . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production shift_operator -> LEFT
-- On TILDE reduce production shift_operator -> LEFT
-- On STRING_LITERAL reduce production shift_operator -> LEFT
-- On STAR reduce production shift_operator -> LEFT
-- On SIZEOF reduce production shift_operator -> LEFT
-- On PLUS reduce production shift_operator -> LEFT
-- On MINUS reduce production shift_operator -> LEFT
-- On LPAREN reduce production shift_operator -> LEFT
-- On INC reduce production shift_operator -> LEFT
-- On DEC reduce production shift_operator -> LEFT
-- On CONSTANT reduce production shift_operator -> LEFT
-- On BUILTIN_VA_ARG reduce production shift_operator -> LEFT
-- On BANG reduce production shift_operator -> LEFT
-- On AND reduce production shift_operator -> LEFT
-- On ALIGNOF reduce production shift_operator -> LEFT

State 57:
## Known stack suffix:
## shift_expression shift_operator
## LR(1) items:
shift_expression -> shift_expression shift_operator . additive_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On cast_expression shift to state 64
-- On additive_expression shift to state 65
## Reductions:

State 58:
## Known stack suffix:
## multiplicative_expression
## LR(1) items:
additive_expression -> multiplicative_expression . [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On STAR shift to state 59
-- On SLASH shift to state 60
-- On PERCENT shift to state 61
-- On multiplicative_operator shift to state 62
## Reductions:
-- On SEMICOLON reduce production additive_expression -> multiplicative_expression
-- On RPAREN reduce production additive_expression -> multiplicative_expression
-- On RIGHT reduce production additive_expression -> multiplicative_expression
-- On RBRACK reduce production additive_expression -> multiplicative_expression
-- On RBRACE reduce production additive_expression -> multiplicative_expression
-- On QUESTION reduce production additive_expression -> multiplicative_expression
-- On PLUS reduce production additive_expression -> multiplicative_expression
-- On NEQ reduce production additive_expression -> multiplicative_expression
-- On MINUS reduce production additive_expression -> multiplicative_expression
-- On LT reduce production additive_expression -> multiplicative_expression
-- On LEQ reduce production additive_expression -> multiplicative_expression
-- On LEFT reduce production additive_expression -> multiplicative_expression
-- On HAT reduce production additive_expression -> multiplicative_expression
-- On GT reduce production additive_expression -> multiplicative_expression
-- On GEQ reduce production additive_expression -> multiplicative_expression
-- On EQEQ reduce production additive_expression -> multiplicative_expression
-- On COMMA reduce production additive_expression -> multiplicative_expression
-- On COLON reduce production additive_expression -> multiplicative_expression
-- On BARBAR reduce production additive_expression -> multiplicative_expression
-- On BAR reduce production additive_expression -> multiplicative_expression
-- On ANDAND reduce production additive_expression -> multiplicative_expression
-- On AND reduce production additive_expression -> multiplicative_expression

State 59:
## Known stack suffix:
## STAR
## LR(1) items:
multiplicative_operator -> STAR . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production multiplicative_operator -> STAR
-- On TILDE reduce production multiplicative_operator -> STAR
-- On STRING_LITERAL reduce production multiplicative_operator -> STAR
-- On STAR reduce production multiplicative_operator -> STAR
-- On SIZEOF reduce production multiplicative_operator -> STAR
-- On PLUS reduce production multiplicative_operator -> STAR
-- On MINUS reduce production multiplicative_operator -> STAR
-- On LPAREN reduce production multiplicative_operator -> STAR
-- On INC reduce production multiplicative_operator -> STAR
-- On DEC reduce production multiplicative_operator -> STAR
-- On CONSTANT reduce production multiplicative_operator -> STAR
-- On BUILTIN_VA_ARG reduce production multiplicative_operator -> STAR
-- On BANG reduce production multiplicative_operator -> STAR
-- On AND reduce production multiplicative_operator -> STAR
-- On ALIGNOF reduce production multiplicative_operator -> STAR

State 60:
## Known stack suffix:
## SLASH
## LR(1) items:
multiplicative_operator -> SLASH . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production multiplicative_operator -> SLASH
-- On TILDE reduce production multiplicative_operator -> SLASH
-- On STRING_LITERAL reduce production multiplicative_operator -> SLASH
-- On STAR reduce production multiplicative_operator -> SLASH
-- On SIZEOF reduce production multiplicative_operator -> SLASH
-- On PLUS reduce production multiplicative_operator -> SLASH
-- On MINUS reduce production multiplicative_operator -> SLASH
-- On LPAREN reduce production multiplicative_operator -> SLASH
-- On INC reduce production multiplicative_operator -> SLASH
-- On DEC reduce production multiplicative_operator -> SLASH
-- On CONSTANT reduce production multiplicative_operator -> SLASH
-- On BUILTIN_VA_ARG reduce production multiplicative_operator -> SLASH
-- On BANG reduce production multiplicative_operator -> SLASH
-- On AND reduce production multiplicative_operator -> SLASH
-- On ALIGNOF reduce production multiplicative_operator -> SLASH

State 61:
## Known stack suffix:
## PERCENT
## LR(1) items:
multiplicative_operator -> PERCENT . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production multiplicative_operator -> PERCENT
-- On TILDE reduce production multiplicative_operator -> PERCENT
-- On STRING_LITERAL reduce production multiplicative_operator -> PERCENT
-- On STAR reduce production multiplicative_operator -> PERCENT
-- On SIZEOF reduce production multiplicative_operator -> PERCENT
-- On PLUS reduce production multiplicative_operator -> PERCENT
-- On MINUS reduce production multiplicative_operator -> PERCENT
-- On LPAREN reduce production multiplicative_operator -> PERCENT
-- On INC reduce production multiplicative_operator -> PERCENT
-- On DEC reduce production multiplicative_operator -> PERCENT
-- On CONSTANT reduce production multiplicative_operator -> PERCENT
-- On BUILTIN_VA_ARG reduce production multiplicative_operator -> PERCENT
-- On BANG reduce production multiplicative_operator -> PERCENT
-- On AND reduce production multiplicative_operator -> PERCENT
-- On ALIGNOF reduce production multiplicative_operator -> PERCENT

State 62:
## Known stack suffix:
## multiplicative_expression multiplicative_operator
## LR(1) items:
multiplicative_expression -> multiplicative_expression multiplicative_operator . cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On cast_expression shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## multiplicative_expression multiplicative_operator cast_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
## Reductions:
-- On STAR reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On SLASH reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On SEMICOLON reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On RPAREN reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On RIGHT reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On RBRACK reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On RBRACE reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On QUESTION reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On PLUS reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On PERCENT reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On NEQ reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On MINUS reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On LT reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On LEQ reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On LEFT reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On HAT reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On GT reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On GEQ reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On EQEQ reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On COMMA reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On COLON reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On BARBAR reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On BAR reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On ANDAND reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression
-- On AND reduce production multiplicative_expression -> multiplicative_expression multiplicative_operator cast_expression

State 64:
## Known stack suffix:
## cast_expression
## LR(1) items:
multiplicative_expression -> cast_expression . [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
## Reductions:
-- On STAR reduce production multiplicative_expression -> cast_expression
-- On SLASH reduce production multiplicative_expression -> cast_expression
-- On SEMICOLON reduce production multiplicative_expression -> cast_expression
-- On RPAREN reduce production multiplicative_expression -> cast_expression
-- On RIGHT reduce production multiplicative_expression -> cast_expression
-- On RBRACK reduce production multiplicative_expression -> cast_expression
-- On RBRACE reduce production multiplicative_expression -> cast_expression
-- On QUESTION reduce production multiplicative_expression -> cast_expression
-- On PLUS reduce production multiplicative_expression -> cast_expression
-- On PERCENT reduce production multiplicative_expression -> cast_expression
-- On NEQ reduce production multiplicative_expression -> cast_expression
-- On MINUS reduce production multiplicative_expression -> cast_expression
-- On LT reduce production multiplicative_expression -> cast_expression
-- On LEQ reduce production multiplicative_expression -> cast_expression
-- On LEFT reduce production multiplicative_expression -> cast_expression
-- On HAT reduce production multiplicative_expression -> cast_expression
-- On GT reduce production multiplicative_expression -> cast_expression
-- On GEQ reduce production multiplicative_expression -> cast_expression
-- On EQEQ reduce production multiplicative_expression -> cast_expression
-- On COMMA reduce production multiplicative_expression -> cast_expression
-- On COLON reduce production multiplicative_expression -> cast_expression
-- On BARBAR reduce production multiplicative_expression -> cast_expression
-- On BAR reduce production multiplicative_expression -> cast_expression
-- On ANDAND reduce production multiplicative_expression -> cast_expression
-- On AND reduce production multiplicative_expression -> cast_expression

State 65:
## Known stack suffix:
## shift_expression shift_operator additive_expression
## LR(1) items:
additive_expression -> additive_expression . additive_operator multiplicative_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
shift_expression -> shift_expression shift_operator additive_expression . [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On additive_operator shift to state 68
## Reductions:
-- On SEMICOLON reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On RPAREN reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On RIGHT reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On RBRACK reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On RBRACE reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On QUESTION reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On NEQ reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On LT reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On LEQ reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On LEFT reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On HAT reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On GT reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On GEQ reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On EQEQ reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On COMMA reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On COLON reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On BARBAR reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On BAR reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On ANDAND reduce production shift_expression -> shift_expression shift_operator additive_expression
-- On AND reduce production shift_expression -> shift_expression shift_operator additive_expression

State 66:
## Known stack suffix:
## PLUS
## LR(1) items:
additive_operator -> PLUS . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production additive_operator -> PLUS
-- On TILDE reduce production additive_operator -> PLUS
-- On STRING_LITERAL reduce production additive_operator -> PLUS
-- On STAR reduce production additive_operator -> PLUS
-- On SIZEOF reduce production additive_operator -> PLUS
-- On PLUS reduce production additive_operator -> PLUS
-- On MINUS reduce production additive_operator -> PLUS
-- On LPAREN reduce production additive_operator -> PLUS
-- On INC reduce production additive_operator -> PLUS
-- On DEC reduce production additive_operator -> PLUS
-- On CONSTANT reduce production additive_operator -> PLUS
-- On BUILTIN_VA_ARG reduce production additive_operator -> PLUS
-- On BANG reduce production additive_operator -> PLUS
-- On AND reduce production additive_operator -> PLUS
-- On ALIGNOF reduce production additive_operator -> PLUS

State 67:
## Known stack suffix:
## MINUS
## LR(1) items:
additive_operator -> MINUS . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production additive_operator -> MINUS
-- On TILDE reduce production additive_operator -> MINUS
-- On STRING_LITERAL reduce production additive_operator -> MINUS
-- On STAR reduce production additive_operator -> MINUS
-- On SIZEOF reduce production additive_operator -> MINUS
-- On PLUS reduce production additive_operator -> MINUS
-- On MINUS reduce production additive_operator -> MINUS
-- On LPAREN reduce production additive_operator -> MINUS
-- On INC reduce production additive_operator -> MINUS
-- On DEC reduce production additive_operator -> MINUS
-- On CONSTANT reduce production additive_operator -> MINUS
-- On BUILTIN_VA_ARG reduce production additive_operator -> MINUS
-- On BANG reduce production additive_operator -> MINUS
-- On AND reduce production additive_operator -> MINUS
-- On ALIGNOF reduce production additive_operator -> MINUS

State 68:
## Known stack suffix:
## additive_expression additive_operator
## LR(1) items:
additive_expression -> additive_expression additive_operator . multiplicative_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 69
-- On cast_expression shift to state 64
## Reductions:

State 69:
## Known stack suffix:
## additive_expression additive_operator multiplicative_expression
## LR(1) items:
additive_expression -> additive_expression additive_operator multiplicative_expression . [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
multiplicative_expression -> multiplicative_expression . multiplicative_operator cast_expression [ STAR SLASH SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On STAR shift to state 59
-- On SLASH shift to state 60
-- On PERCENT shift to state 61
-- On multiplicative_operator shift to state 62
## Reductions:
-- On SEMICOLON reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On RPAREN reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On RIGHT reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On RBRACK reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On RBRACE reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On QUESTION reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On PLUS reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On NEQ reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On MINUS reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On LT reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On LEQ reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On LEFT reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On HAT reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On GT reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On GEQ reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On EQEQ reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On COMMA reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On COLON reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On BARBAR reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On BAR reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On ANDAND reduce production additive_expression -> additive_expression additive_operator multiplicative_expression
-- On AND reduce production additive_expression -> additive_expression additive_operator multiplicative_expression

State 70:
## Known stack suffix:
## relational_expression
## LR(1) items:
equality_expression -> relational_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
relational_expression -> relational_expression . relational_operator shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On LT shift to state 71
-- On LEQ shift to state 72
-- On GT shift to state 73
-- On GEQ shift to state 74
-- On relational_operator shift to state 75
## Reductions:
-- On SEMICOLON reduce production equality_expression -> relational_expression
-- On RPAREN reduce production equality_expression -> relational_expression
-- On RBRACK reduce production equality_expression -> relational_expression
-- On RBRACE reduce production equality_expression -> relational_expression
-- On QUESTION reduce production equality_expression -> relational_expression
-- On NEQ reduce production equality_expression -> relational_expression
-- On HAT reduce production equality_expression -> relational_expression
-- On EQEQ reduce production equality_expression -> relational_expression
-- On COMMA reduce production equality_expression -> relational_expression
-- On COLON reduce production equality_expression -> relational_expression
-- On BARBAR reduce production equality_expression -> relational_expression
-- On BAR reduce production equality_expression -> relational_expression
-- On ANDAND reduce production equality_expression -> relational_expression
-- On AND reduce production equality_expression -> relational_expression

State 71:
## Known stack suffix:
## LT
## LR(1) items:
relational_operator -> LT . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production relational_operator -> LT
-- On TILDE reduce production relational_operator -> LT
-- On STRING_LITERAL reduce production relational_operator -> LT
-- On STAR reduce production relational_operator -> LT
-- On SIZEOF reduce production relational_operator -> LT
-- On PLUS reduce production relational_operator -> LT
-- On MINUS reduce production relational_operator -> LT
-- On LPAREN reduce production relational_operator -> LT
-- On INC reduce production relational_operator -> LT
-- On DEC reduce production relational_operator -> LT
-- On CONSTANT reduce production relational_operator -> LT
-- On BUILTIN_VA_ARG reduce production relational_operator -> LT
-- On BANG reduce production relational_operator -> LT
-- On AND reduce production relational_operator -> LT
-- On ALIGNOF reduce production relational_operator -> LT

State 72:
## Known stack suffix:
## LEQ
## LR(1) items:
relational_operator -> LEQ . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production relational_operator -> LEQ
-- On TILDE reduce production relational_operator -> LEQ
-- On STRING_LITERAL reduce production relational_operator -> LEQ
-- On STAR reduce production relational_operator -> LEQ
-- On SIZEOF reduce production relational_operator -> LEQ
-- On PLUS reduce production relational_operator -> LEQ
-- On MINUS reduce production relational_operator -> LEQ
-- On LPAREN reduce production relational_operator -> LEQ
-- On INC reduce production relational_operator -> LEQ
-- On DEC reduce production relational_operator -> LEQ
-- On CONSTANT reduce production relational_operator -> LEQ
-- On BUILTIN_VA_ARG reduce production relational_operator -> LEQ
-- On BANG reduce production relational_operator -> LEQ
-- On AND reduce production relational_operator -> LEQ
-- On ALIGNOF reduce production relational_operator -> LEQ

State 73:
## Known stack suffix:
## GT
## LR(1) items:
relational_operator -> GT . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production relational_operator -> GT
-- On TILDE reduce production relational_operator -> GT
-- On STRING_LITERAL reduce production relational_operator -> GT
-- On STAR reduce production relational_operator -> GT
-- On SIZEOF reduce production relational_operator -> GT
-- On PLUS reduce production relational_operator -> GT
-- On MINUS reduce production relational_operator -> GT
-- On LPAREN reduce production relational_operator -> GT
-- On INC reduce production relational_operator -> GT
-- On DEC reduce production relational_operator -> GT
-- On CONSTANT reduce production relational_operator -> GT
-- On BUILTIN_VA_ARG reduce production relational_operator -> GT
-- On BANG reduce production relational_operator -> GT
-- On AND reduce production relational_operator -> GT
-- On ALIGNOF reduce production relational_operator -> GT

State 74:
## Known stack suffix:
## GEQ
## LR(1) items:
relational_operator -> GEQ . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production relational_operator -> GEQ
-- On TILDE reduce production relational_operator -> GEQ
-- On STRING_LITERAL reduce production relational_operator -> GEQ
-- On STAR reduce production relational_operator -> GEQ
-- On SIZEOF reduce production relational_operator -> GEQ
-- On PLUS reduce production relational_operator -> GEQ
-- On MINUS reduce production relational_operator -> GEQ
-- On LPAREN reduce production relational_operator -> GEQ
-- On INC reduce production relational_operator -> GEQ
-- On DEC reduce production relational_operator -> GEQ
-- On CONSTANT reduce production relational_operator -> GEQ
-- On BUILTIN_VA_ARG reduce production relational_operator -> GEQ
-- On BANG reduce production relational_operator -> GEQ
-- On AND reduce production relational_operator -> GEQ
-- On ALIGNOF reduce production relational_operator -> GEQ

State 75:
## Known stack suffix:
## relational_expression relational_operator
## LR(1) items:
relational_expression -> relational_expression relational_operator . shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 76
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On cast_expression shift to state 64
-- On additive_expression shift to state 77
## Reductions:

State 76:
## Known stack suffix:
## relational_expression relational_operator shift_expression
## LR(1) items:
relational_expression -> relational_expression relational_operator shift_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
shift_expression -> shift_expression . shift_operator additive_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On RIGHT shift to state 55
-- On LEFT shift to state 56
-- On shift_operator shift to state 57
## Reductions:
-- On SEMICOLON reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On RPAREN reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On RBRACK reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On RBRACE reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On QUESTION reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On NEQ reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On LT reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On LEQ reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On HAT reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On GT reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On GEQ reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On EQEQ reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On COMMA reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On COLON reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On BARBAR reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On BAR reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On ANDAND reduce production relational_expression -> relational_expression relational_operator shift_expression
-- On AND reduce production relational_expression -> relational_expression relational_operator shift_expression

State 77:
## Known stack suffix:
## additive_expression
## LR(1) items:
additive_expression -> additive_expression . additive_operator multiplicative_expression [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION PLUS NEQ MINUS LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
shift_expression -> additive_expression . [ SEMICOLON RPAREN RIGHT RBRACK RBRACE QUESTION NEQ LT LEQ LEFT HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On PLUS shift to state 66
-- On MINUS shift to state 67
-- On additive_operator shift to state 68
## Reductions:
-- On SEMICOLON reduce production shift_expression -> additive_expression
-- On RPAREN reduce production shift_expression -> additive_expression
-- On RIGHT reduce production shift_expression -> additive_expression
-- On RBRACK reduce production shift_expression -> additive_expression
-- On RBRACE reduce production shift_expression -> additive_expression
-- On QUESTION reduce production shift_expression -> additive_expression
-- On NEQ reduce production shift_expression -> additive_expression
-- On LT reduce production shift_expression -> additive_expression
-- On LEQ reduce production shift_expression -> additive_expression
-- On LEFT reduce production shift_expression -> additive_expression
-- On HAT reduce production shift_expression -> additive_expression
-- On GT reduce production shift_expression -> additive_expression
-- On GEQ reduce production shift_expression -> additive_expression
-- On EQEQ reduce production shift_expression -> additive_expression
-- On COMMA reduce production shift_expression -> additive_expression
-- On COLON reduce production shift_expression -> additive_expression
-- On BARBAR reduce production shift_expression -> additive_expression
-- On BAR reduce production shift_expression -> additive_expression
-- On ANDAND reduce production shift_expression -> additive_expression
-- On AND reduce production shift_expression -> additive_expression

State 78:
## Known stack suffix:
## logical_or_expression
## LR(1) items:
conditional_expression -> logical_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
conditional_expression -> logical_or_expression . QUESTION expression COLON conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
logical_or_expression -> logical_or_expression . BARBAR logical_and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ]
## Transitions:
-- On QUESTION shift to state 79
-- On BARBAR shift to state 104
## Reductions:
-- On SEMICOLON reduce production conditional_expression -> logical_or_expression
-- On RPAREN reduce production conditional_expression -> logical_or_expression
-- On RBRACK reduce production conditional_expression -> logical_or_expression
-- On RBRACE reduce production conditional_expression -> logical_or_expression
-- On COMMA reduce production conditional_expression -> logical_or_expression
-- On COLON reduce production conditional_expression -> logical_or_expression

State 79:
## Known stack suffix:
## logical_or_expression QUESTION
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION . expression COLON conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 97
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 80:
## Known stack suffix:
## logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . ANDAND inclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
logical_or_expression -> logical_and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ]
## Transitions:
-- On ANDAND shift to state 81
## Reductions:
-- On SEMICOLON reduce production logical_or_expression -> logical_and_expression
-- On RPAREN reduce production logical_or_expression -> logical_and_expression
-- On RBRACK reduce production logical_or_expression -> logical_and_expression
-- On RBRACE reduce production logical_or_expression -> logical_and_expression
-- On QUESTION reduce production logical_or_expression -> logical_and_expression
-- On COMMA reduce production logical_or_expression -> logical_and_expression
-- On COLON reduce production logical_or_expression -> logical_and_expression
-- On BARBAR reduce production logical_or_expression -> logical_and_expression

State 81:
## Known stack suffix:
## logical_and_expression ANDAND
## LR(1) items:
logical_and_expression -> logical_and_expression ANDAND . inclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On inclusive_or_expression shift to state 82
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 82:
## Known stack suffix:
## logical_and_expression ANDAND inclusive_or_expression
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression . BAR exclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
## Transitions:
-- On BAR shift to state 83
## Reductions:
-- On SEMICOLON reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression
-- On RPAREN reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression
-- On RBRACK reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression
-- On RBRACE reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression
-- On QUESTION reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression
-- On COMMA reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression
-- On COLON reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression
-- On BARBAR reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression
-- On ANDAND reduce production logical_and_expression -> logical_and_expression ANDAND inclusive_or_expression

State 83:
## Known stack suffix:
## inclusive_or_expression BAR
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression BAR . exclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On exclusive_or_expression shift to state 84
-- On equality_expression shift to state 86
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 84:
## Known stack suffix:
## inclusive_or_expression BAR exclusive_or_expression
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression . HAT and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On HAT shift to state 85
## Reductions:
-- On SEMICOLON reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression
-- On RPAREN reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression
-- On RBRACK reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression
-- On RBRACE reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression
-- On QUESTION reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression
-- On COMMA reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression
-- On COLON reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression
-- On BARBAR reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression
-- On BAR reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression
-- On ANDAND reduce production inclusive_or_expression -> inclusive_or_expression BAR exclusive_or_expression

State 85:
## Known stack suffix:
## exclusive_or_expression HAT
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression HAT . and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On equality_expression shift to state 86
-- On cast_expression shift to state 64
-- On and_expression shift to state 91
-- On additive_expression shift to state 77
## Reductions:

State 86:
## Known stack suffix:
## equality_expression
## LR(1) items:
and_expression -> equality_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
equality_expression -> equality_expression . equality_operator relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On NEQ shift to state 87
-- On EQEQ shift to state 88
-- On equality_operator shift to state 89
## Reductions:
-- On SEMICOLON reduce production and_expression -> equality_expression
-- On RPAREN reduce production and_expression -> equality_expression
-- On RBRACK reduce production and_expression -> equality_expression
-- On RBRACE reduce production and_expression -> equality_expression
-- On QUESTION reduce production and_expression -> equality_expression
-- On HAT reduce production and_expression -> equality_expression
-- On COMMA reduce production and_expression -> equality_expression
-- On COLON reduce production and_expression -> equality_expression
-- On BARBAR reduce production and_expression -> equality_expression
-- On BAR reduce production and_expression -> equality_expression
-- On ANDAND reduce production and_expression -> equality_expression
-- On AND reduce production and_expression -> equality_expression

State 87:
## Known stack suffix:
## NEQ
## LR(1) items:
equality_operator -> NEQ . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production equality_operator -> NEQ
-- On TILDE reduce production equality_operator -> NEQ
-- On STRING_LITERAL reduce production equality_operator -> NEQ
-- On STAR reduce production equality_operator -> NEQ
-- On SIZEOF reduce production equality_operator -> NEQ
-- On PLUS reduce production equality_operator -> NEQ
-- On MINUS reduce production equality_operator -> NEQ
-- On LPAREN reduce production equality_operator -> NEQ
-- On INC reduce production equality_operator -> NEQ
-- On DEC reduce production equality_operator -> NEQ
-- On CONSTANT reduce production equality_operator -> NEQ
-- On BUILTIN_VA_ARG reduce production equality_operator -> NEQ
-- On BANG reduce production equality_operator -> NEQ
-- On AND reduce production equality_operator -> NEQ
-- On ALIGNOF reduce production equality_operator -> NEQ

State 88:
## Known stack suffix:
## EQEQ
## LR(1) items:
equality_operator -> EQEQ . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production equality_operator -> EQEQ
-- On TILDE reduce production equality_operator -> EQEQ
-- On STRING_LITERAL reduce production equality_operator -> EQEQ
-- On STAR reduce production equality_operator -> EQEQ
-- On SIZEOF reduce production equality_operator -> EQEQ
-- On PLUS reduce production equality_operator -> EQEQ
-- On MINUS reduce production equality_operator -> EQEQ
-- On LPAREN reduce production equality_operator -> EQEQ
-- On INC reduce production equality_operator -> EQEQ
-- On DEC reduce production equality_operator -> EQEQ
-- On CONSTANT reduce production equality_operator -> EQEQ
-- On BUILTIN_VA_ARG reduce production equality_operator -> EQEQ
-- On BANG reduce production equality_operator -> EQEQ
-- On AND reduce production equality_operator -> EQEQ
-- On ALIGNOF reduce production equality_operator -> EQEQ

State 89:
## Known stack suffix:
## equality_expression equality_operator
## LR(1) items:
equality_expression -> equality_expression equality_operator . relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 90
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On cast_expression shift to state 64
-- On additive_expression shift to state 77
## Reductions:

State 90:
## Known stack suffix:
## equality_expression equality_operator relational_expression
## LR(1) items:
equality_expression -> equality_expression equality_operator relational_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
relational_expression -> relational_expression . relational_operator shift_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ LT LEQ HAT GT GEQ EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On LT shift to state 71
-- On LEQ shift to state 72
-- On GT shift to state 73
-- On GEQ shift to state 74
-- On relational_operator shift to state 75
## Reductions:
-- On SEMICOLON reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On RPAREN reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On RBRACK reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On RBRACE reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On QUESTION reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On NEQ reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On HAT reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On EQEQ reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On COMMA reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On COLON reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On BARBAR reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On BAR reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On ANDAND reduce production equality_expression -> equality_expression equality_operator relational_expression
-- On AND reduce production equality_expression -> equality_expression equality_operator relational_expression

State 91:
## Known stack suffix:
## exclusive_or_expression HAT and_expression
## LR(1) items:
and_expression -> and_expression . AND equality_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
exclusive_or_expression -> exclusive_or_expression HAT and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On AND shift to state 92
## Reductions:
-- On SEMICOLON reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On RPAREN reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On RBRACK reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On RBRACE reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On QUESTION reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On HAT reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On COMMA reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On COLON reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On BARBAR reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On BAR reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression
-- On ANDAND reduce production exclusive_or_expression -> exclusive_or_expression HAT and_expression

State 92:
## Known stack suffix:
## and_expression AND
## LR(1) items:
and_expression -> and_expression AND . equality_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On equality_expression shift to state 93
-- On cast_expression shift to state 64
-- On additive_expression shift to state 77
## Reductions:

State 93:
## Known stack suffix:
## and_expression AND equality_expression
## LR(1) items:
and_expression -> and_expression AND equality_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
equality_expression -> equality_expression . equality_operator relational_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION NEQ HAT EQEQ COMMA COLON BARBAR BAR ANDAND AND ]
## Transitions:
-- On NEQ shift to state 87
-- On EQEQ shift to state 88
-- On equality_operator shift to state 89
## Reductions:
-- On SEMICOLON reduce production and_expression -> and_expression AND equality_expression
-- On RPAREN reduce production and_expression -> and_expression AND equality_expression
-- On RBRACK reduce production and_expression -> and_expression AND equality_expression
-- On RBRACE reduce production and_expression -> and_expression AND equality_expression
-- On QUESTION reduce production and_expression -> and_expression AND equality_expression
-- On HAT reduce production and_expression -> and_expression AND equality_expression
-- On COMMA reduce production and_expression -> and_expression AND equality_expression
-- On COLON reduce production and_expression -> and_expression AND equality_expression
-- On BARBAR reduce production and_expression -> and_expression AND equality_expression
-- On BAR reduce production and_expression -> and_expression AND equality_expression
-- On ANDAND reduce production and_expression -> and_expression AND equality_expression
-- On AND reduce production and_expression -> and_expression AND equality_expression

State 94:
## Known stack suffix:
## and_expression
## LR(1) items:
and_expression -> and_expression . AND equality_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND AND ]
exclusive_or_expression -> and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On AND shift to state 92
## Reductions:
-- On SEMICOLON reduce production exclusive_or_expression -> and_expression
-- On RPAREN reduce production exclusive_or_expression -> and_expression
-- On RBRACK reduce production exclusive_or_expression -> and_expression
-- On RBRACE reduce production exclusive_or_expression -> and_expression
-- On QUESTION reduce production exclusive_or_expression -> and_expression
-- On HAT reduce production exclusive_or_expression -> and_expression
-- On COMMA reduce production exclusive_or_expression -> and_expression
-- On COLON reduce production exclusive_or_expression -> and_expression
-- On BARBAR reduce production exclusive_or_expression -> and_expression
-- On BAR reduce production exclusive_or_expression -> and_expression
-- On ANDAND reduce production exclusive_or_expression -> and_expression

State 95:
## Known stack suffix:
## exclusive_or_expression
## LR(1) items:
exclusive_or_expression -> exclusive_or_expression . HAT and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION HAT COMMA COLON BARBAR BAR ANDAND ]
inclusive_or_expression -> exclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
## Transitions:
-- On HAT shift to state 85
## Reductions:
-- On SEMICOLON reduce production inclusive_or_expression -> exclusive_or_expression
-- On RPAREN reduce production inclusive_or_expression -> exclusive_or_expression
-- On RBRACK reduce production inclusive_or_expression -> exclusive_or_expression
-- On RBRACE reduce production inclusive_or_expression -> exclusive_or_expression
-- On QUESTION reduce production inclusive_or_expression -> exclusive_or_expression
-- On COMMA reduce production inclusive_or_expression -> exclusive_or_expression
-- On COLON reduce production inclusive_or_expression -> exclusive_or_expression
-- On BARBAR reduce production inclusive_or_expression -> exclusive_or_expression
-- On BAR reduce production inclusive_or_expression -> exclusive_or_expression
-- On ANDAND reduce production inclusive_or_expression -> exclusive_or_expression

State 96:
## Known stack suffix:
## inclusive_or_expression
## LR(1) items:
inclusive_or_expression -> inclusive_or_expression . BAR exclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR BAR ANDAND ]
logical_and_expression -> inclusive_or_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
## Transitions:
-- On BAR shift to state 83
## Reductions:
-- On SEMICOLON reduce production logical_and_expression -> inclusive_or_expression
-- On RPAREN reduce production logical_and_expression -> inclusive_or_expression
-- On RBRACK reduce production logical_and_expression -> inclusive_or_expression
-- On RBRACE reduce production logical_and_expression -> inclusive_or_expression
-- On QUESTION reduce production logical_and_expression -> inclusive_or_expression
-- On COMMA reduce production logical_and_expression -> inclusive_or_expression
-- On COLON reduce production logical_and_expression -> inclusive_or_expression
-- On BARBAR reduce production logical_and_expression -> inclusive_or_expression
-- On ANDAND reduce production logical_and_expression -> inclusive_or_expression

State 97:
## Known stack suffix:
## logical_or_expression QUESTION expression
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION expression . COLON conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
expression -> expression . COMMA assignment_expression [ COMMA COLON ]
## Transitions:
-- On COMMA shift to state 98
-- On COLON shift to state 101
## Reductions:

State 98:
## Known stack suffix:
## expression COMMA
## LR(1) items:
expression -> expression COMMA . assignment_expression [ SEMICOLON RPAREN RBRACK COMMA COLON ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 100
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 99:
## Known stack suffix:
## conditional_expression
## LR(1) items:
assignment_expression -> conditional_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production assignment_expression -> conditional_expression
-- On RPAREN reduce production assignment_expression -> conditional_expression
-- On RBRACK reduce production assignment_expression -> conditional_expression
-- On RBRACE reduce production assignment_expression -> conditional_expression
-- On COMMA reduce production assignment_expression -> conditional_expression
-- On COLON reduce production assignment_expression -> conditional_expression

State 100:
## Known stack suffix:
## expression COMMA assignment_expression
## LR(1) items:
expression -> expression COMMA assignment_expression . [ SEMICOLON RPAREN RBRACK COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production expression -> expression COMMA assignment_expression
-- On RPAREN reduce production expression -> expression COMMA assignment_expression
-- On RBRACK reduce production expression -> expression COMMA assignment_expression
-- On COMMA reduce production expression -> expression COMMA assignment_expression
-- On COLON reduce production expression -> expression COMMA assignment_expression

State 101:
## Known stack suffix:
## logical_or_expression QUESTION expression COLON
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION expression COLON . conditional_expression [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 102
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 102:
## Known stack suffix:
## logical_or_expression QUESTION expression COLON conditional_expression
## LR(1) items:
conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
-- On RPAREN reduce production conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
-- On RBRACK reduce production conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
-- On RBRACE reduce production conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
-- On COMMA reduce production conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression
-- On COLON reduce production conditional_expression -> logical_or_expression QUESTION expression COLON conditional_expression

State 103:
## Known stack suffix:
## assignment_expression
## LR(1) items:
expression -> assignment_expression . [ SEMICOLON RPAREN RBRACK COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production expression -> assignment_expression
-- On RPAREN reduce production expression -> assignment_expression
-- On RBRACK reduce production expression -> assignment_expression
-- On COMMA reduce production expression -> assignment_expression
-- On COLON reduce production expression -> assignment_expression

State 104:
## Known stack suffix:
## logical_or_expression BARBAR
## LR(1) items:
logical_or_expression -> logical_or_expression BARBAR . logical_and_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_and_expression shift to state 105
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 105:
## Known stack suffix:
## logical_or_expression BARBAR logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . ANDAND inclusive_or_expression [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ANDAND ]
logical_or_expression -> logical_or_expression BARBAR logical_and_expression . [ SEMICOLON RPAREN RBRACK RBRACE QUESTION COMMA COLON BARBAR ]
## Transitions:
-- On ANDAND shift to state 81
## Reductions:
-- On SEMICOLON reduce production logical_or_expression -> logical_or_expression BARBAR logical_and_expression
-- On RPAREN reduce production logical_or_expression -> logical_or_expression BARBAR logical_and_expression
-- On RBRACK reduce production logical_or_expression -> logical_or_expression BARBAR logical_and_expression
-- On RBRACE reduce production logical_or_expression -> logical_or_expression BARBAR logical_and_expression
-- On QUESTION reduce production logical_or_expression -> logical_or_expression BARBAR logical_and_expression
-- On COMMA reduce production logical_or_expression -> logical_or_expression BARBAR logical_and_expression
-- On COLON reduce production logical_or_expression -> logical_or_expression BARBAR logical_and_expression
-- On BARBAR reduce production logical_or_expression -> logical_or_expression BARBAR logical_and_expression

State 106:
## Known stack suffix:
## unary_expression assignment_operator assignment_expression
## LR(1) items:
assignment_expression -> unary_expression assignment_operator assignment_expression . [ SEMICOLON RPAREN RBRACK RBRACE COMMA COLON ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production assignment_expression -> unary_expression assignment_operator assignment_expression
-- On RPAREN reduce production assignment_expression -> unary_expression assignment_operator assignment_expression
-- On RBRACK reduce production assignment_expression -> unary_expression assignment_operator assignment_expression
-- On RBRACE reduce production assignment_expression -> unary_expression assignment_operator assignment_expression
-- On COMMA reduce production assignment_expression -> unary_expression assignment_operator assignment_expression
-- On COLON reduce production assignment_expression -> unary_expression assignment_operator assignment_expression

State 107:
## Known stack suffix:
## postfix_expression LPAREN option(argument_expression_list)
## LR(1) items:
postfix_expression -> postfix_expression LPAREN option(argument_expression_list) . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## postfix_expression LPAREN option(argument_expression_list) RPAREN
## LR(1) items:
postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On SUB_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On STAR reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On SLASH reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On SEMICOLON reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On RPAREN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On RIGHT_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On RIGHT reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On RBRACK reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On RBRACE reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On QUESTION reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On PTR reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On PLUS reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On PERCENT reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On OR_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On NEQ reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On MUL_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On MOD_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On MINUS reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On LT reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On LPAREN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On LEQ reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On LEFT_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On LEFT reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On LBRACK reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On INC reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On HAT reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On GT reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On GEQ reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On EQEQ reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On EQ reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On DOT reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On DIV_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On DEC reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On COMMA reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On COLON reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On BARBAR reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On BAR reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On AND_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On ANDAND reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On AND reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN
-- On ADD_ASSIGN reduce production postfix_expression -> postfix_expression LPAREN option(argument_expression_list) RPAREN

State 109:
## Known stack suffix:
## assignment_expression
## LR(1) items:
argument_expression_list -> assignment_expression . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production argument_expression_list -> assignment_expression
-- On COMMA reduce production argument_expression_list -> assignment_expression

State 110:
## Known stack suffix:
## argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA assignment_expression [ RPAREN COMMA ]
option(argument_expression_list) -> argument_expression_list . [ RPAREN ]
## Transitions:
-- On COMMA shift to state 111
## Reductions:
-- On RPAREN reduce production option(argument_expression_list) -> argument_expression_list

State 111:
## Known stack suffix:
## argument_expression_list COMMA
## LR(1) items:
argument_expression_list -> argument_expression_list COMMA . assignment_expression [ RPAREN COMMA ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 112
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 112:
## Known stack suffix:
## argument_expression_list COMMA assignment_expression
## LR(1) items:
argument_expression_list -> argument_expression_list COMMA assignment_expression . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production argument_expression_list -> argument_expression_list COMMA assignment_expression
-- On COMMA reduce production argument_expression_list -> argument_expression_list COMMA assignment_expression

State 113:
## Known stack suffix:
## postfix_expression LBRACK
## LR(1) items:
postfix_expression -> postfix_expression LBRACK . expression RBRACK [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 114
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 114:
## Known stack suffix:
## postfix_expression LBRACK expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RBRACK COMMA ]
postfix_expression -> postfix_expression LBRACK expression . RBRACK [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RBRACK shift to state 115
-- On COMMA shift to state 98
## Reductions:

State 115:
## Known stack suffix:
## postfix_expression LBRACK expression RBRACK
## LR(1) items:
postfix_expression -> postfix_expression LBRACK expression RBRACK . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On SUB_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On STAR reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On SLASH reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On SEMICOLON reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On RPAREN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On RIGHT_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On RIGHT reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On RBRACK reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On RBRACE reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On QUESTION reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On PTR reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On PLUS reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On PERCENT reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On OR_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On NEQ reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On MUL_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On MOD_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On MINUS reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On LT reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On LPAREN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On LEQ reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On LEFT_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On LEFT reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On LBRACK reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On INC reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On HAT reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On GT reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On GEQ reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On EQEQ reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On EQ reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On DOT reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On DIV_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On DEC reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On COMMA reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On COLON reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On BARBAR reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On BAR reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On AND_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On ANDAND reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On AND reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK
-- On ADD_ASSIGN reduce production postfix_expression -> postfix_expression LBRACK expression RBRACK

State 116:
## Known stack suffix:
## postfix_expression INC
## LR(1) items:
postfix_expression -> postfix_expression INC . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production postfix_expression -> postfix_expression INC
-- On SUB_ASSIGN reduce production postfix_expression -> postfix_expression INC
-- On STAR reduce production postfix_expression -> postfix_expression INC
-- On SLASH reduce production postfix_expression -> postfix_expression INC
-- On SEMICOLON reduce production postfix_expression -> postfix_expression INC
-- On RPAREN reduce production postfix_expression -> postfix_expression INC
-- On RIGHT_ASSIGN reduce production postfix_expression -> postfix_expression INC
-- On RIGHT reduce production postfix_expression -> postfix_expression INC
-- On RBRACK reduce production postfix_expression -> postfix_expression INC
-- On RBRACE reduce production postfix_expression -> postfix_expression INC
-- On QUESTION reduce production postfix_expression -> postfix_expression INC
-- On PTR reduce production postfix_expression -> postfix_expression INC
-- On PLUS reduce production postfix_expression -> postfix_expression INC
-- On PERCENT reduce production postfix_expression -> postfix_expression INC
-- On OR_ASSIGN reduce production postfix_expression -> postfix_expression INC
-- On NEQ reduce production postfix_expression -> postfix_expression INC
-- On MUL_ASSIGN reduce production postfix_expression -> postfix_expression INC
-- On MOD_ASSIGN reduce production postfix_expression -> postfix_expression INC
-- On MINUS reduce production postfix_expression -> postfix_expression INC
-- On LT reduce production postfix_expression -> postfix_expression INC
-- On LPAREN reduce production postfix_expression -> postfix_expression INC
-- On LEQ reduce production postfix_expression -> postfix_expression INC
-- On LEFT_ASSIGN reduce production postfix_expression -> postfix_expression INC
-- On LEFT reduce production postfix_expression -> postfix_expression INC
-- On LBRACK reduce production postfix_expression -> postfix_expression INC
-- On INC reduce production postfix_expression -> postfix_expression INC
-- On HAT reduce production postfix_expression -> postfix_expression INC
-- On GT reduce production postfix_expression -> postfix_expression INC
-- On GEQ reduce production postfix_expression -> postfix_expression INC
-- On EQEQ reduce production postfix_expression -> postfix_expression INC
-- On EQ reduce production postfix_expression -> postfix_expression INC
-- On DOT reduce production postfix_expression -> postfix_expression INC
-- On DIV_ASSIGN reduce production postfix_expression -> postfix_expression INC
-- On DEC reduce production postfix_expression -> postfix_expression INC
-- On COMMA reduce production postfix_expression -> postfix_expression INC
-- On COLON reduce production postfix_expression -> postfix_expression INC
-- On BARBAR reduce production postfix_expression -> postfix_expression INC
-- On BAR reduce production postfix_expression -> postfix_expression INC
-- On AND_ASSIGN reduce production postfix_expression -> postfix_expression INC
-- On ANDAND reduce production postfix_expression -> postfix_expression INC
-- On AND reduce production postfix_expression -> postfix_expression INC
-- On ADD_ASSIGN reduce production postfix_expression -> postfix_expression INC

State 117:
## Known stack suffix:
## postfix_expression DOT
## LR(1) items:
postfix_expression -> postfix_expression DOT . general_identifier [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On general_identifier shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## postfix_expression DOT general_identifier
## LR(1) items:
postfix_expression -> postfix_expression DOT general_identifier . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On SUB_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On STAR reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On SLASH reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On SEMICOLON reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On RPAREN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On RIGHT_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On RIGHT reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On RBRACK reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On RBRACE reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On QUESTION reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On PTR reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On PLUS reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On PERCENT reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On OR_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On NEQ reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On MUL_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On MOD_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On MINUS reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On LT reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On LPAREN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On LEQ reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On LEFT_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On LEFT reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On LBRACK reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On INC reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On HAT reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On GT reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On GEQ reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On EQEQ reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On EQ reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On DOT reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On DIV_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On DEC reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On COMMA reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On COLON reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On BARBAR reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On BAR reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On AND_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On ANDAND reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On AND reduce production postfix_expression -> postfix_expression DOT general_identifier
-- On ADD_ASSIGN reduce production postfix_expression -> postfix_expression DOT general_identifier

State 119:
## Known stack suffix:
## postfix_expression DEC
## LR(1) items:
postfix_expression -> postfix_expression DEC . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production postfix_expression -> postfix_expression DEC
-- On SUB_ASSIGN reduce production postfix_expression -> postfix_expression DEC
-- On STAR reduce production postfix_expression -> postfix_expression DEC
-- On SLASH reduce production postfix_expression -> postfix_expression DEC
-- On SEMICOLON reduce production postfix_expression -> postfix_expression DEC
-- On RPAREN reduce production postfix_expression -> postfix_expression DEC
-- On RIGHT_ASSIGN reduce production postfix_expression -> postfix_expression DEC
-- On RIGHT reduce production postfix_expression -> postfix_expression DEC
-- On RBRACK reduce production postfix_expression -> postfix_expression DEC
-- On RBRACE reduce production postfix_expression -> postfix_expression DEC
-- On QUESTION reduce production postfix_expression -> postfix_expression DEC
-- On PTR reduce production postfix_expression -> postfix_expression DEC
-- On PLUS reduce production postfix_expression -> postfix_expression DEC
-- On PERCENT reduce production postfix_expression -> postfix_expression DEC
-- On OR_ASSIGN reduce production postfix_expression -> postfix_expression DEC
-- On NEQ reduce production postfix_expression -> postfix_expression DEC
-- On MUL_ASSIGN reduce production postfix_expression -> postfix_expression DEC
-- On MOD_ASSIGN reduce production postfix_expression -> postfix_expression DEC
-- On MINUS reduce production postfix_expression -> postfix_expression DEC
-- On LT reduce production postfix_expression -> postfix_expression DEC
-- On LPAREN reduce production postfix_expression -> postfix_expression DEC
-- On LEQ reduce production postfix_expression -> postfix_expression DEC
-- On LEFT_ASSIGN reduce production postfix_expression -> postfix_expression DEC
-- On LEFT reduce production postfix_expression -> postfix_expression DEC
-- On LBRACK reduce production postfix_expression -> postfix_expression DEC
-- On INC reduce production postfix_expression -> postfix_expression DEC
-- On HAT reduce production postfix_expression -> postfix_expression DEC
-- On GT reduce production postfix_expression -> postfix_expression DEC
-- On GEQ reduce production postfix_expression -> postfix_expression DEC
-- On EQEQ reduce production postfix_expression -> postfix_expression DEC
-- On EQ reduce production postfix_expression -> postfix_expression DEC
-- On DOT reduce production postfix_expression -> postfix_expression DEC
-- On DIV_ASSIGN reduce production postfix_expression -> postfix_expression DEC
-- On DEC reduce production postfix_expression -> postfix_expression DEC
-- On COMMA reduce production postfix_expression -> postfix_expression DEC
-- On COLON reduce production postfix_expression -> postfix_expression DEC
-- On BARBAR reduce production postfix_expression -> postfix_expression DEC
-- On BAR reduce production postfix_expression -> postfix_expression DEC
-- On AND_ASSIGN reduce production postfix_expression -> postfix_expression DEC
-- On ANDAND reduce production postfix_expression -> postfix_expression DEC
-- On AND reduce production postfix_expression -> postfix_expression DEC
-- On ADD_ASSIGN reduce production postfix_expression -> postfix_expression DEC

State 120:
## Known stack suffix:
## unary_operator cast_expression
## LR(1) items:
unary_expression -> unary_operator cast_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production unary_expression -> unary_operator cast_expression
-- On SUB_ASSIGN reduce production unary_expression -> unary_operator cast_expression
-- On STAR reduce production unary_expression -> unary_operator cast_expression
-- On SLASH reduce production unary_expression -> unary_operator cast_expression
-- On SEMICOLON reduce production unary_expression -> unary_operator cast_expression
-- On RPAREN reduce production unary_expression -> unary_operator cast_expression
-- On RIGHT_ASSIGN reduce production unary_expression -> unary_operator cast_expression
-- On RIGHT reduce production unary_expression -> unary_operator cast_expression
-- On RBRACK reduce production unary_expression -> unary_operator cast_expression
-- On RBRACE reduce production unary_expression -> unary_operator cast_expression
-- On QUESTION reduce production unary_expression -> unary_operator cast_expression
-- On PLUS reduce production unary_expression -> unary_operator cast_expression
-- On PERCENT reduce production unary_expression -> unary_operator cast_expression
-- On OR_ASSIGN reduce production unary_expression -> unary_operator cast_expression
-- On NEQ reduce production unary_expression -> unary_operator cast_expression
-- On MUL_ASSIGN reduce production unary_expression -> unary_operator cast_expression
-- On MOD_ASSIGN reduce production unary_expression -> unary_operator cast_expression
-- On MINUS reduce production unary_expression -> unary_operator cast_expression
-- On LT reduce production unary_expression -> unary_operator cast_expression
-- On LEQ reduce production unary_expression -> unary_operator cast_expression
-- On LEFT_ASSIGN reduce production unary_expression -> unary_operator cast_expression
-- On LEFT reduce production unary_expression -> unary_operator cast_expression
-- On HAT reduce production unary_expression -> unary_operator cast_expression
-- On GT reduce production unary_expression -> unary_operator cast_expression
-- On GEQ reduce production unary_expression -> unary_operator cast_expression
-- On EQEQ reduce production unary_expression -> unary_operator cast_expression
-- On EQ reduce production unary_expression -> unary_operator cast_expression
-- On DIV_ASSIGN reduce production unary_expression -> unary_operator cast_expression
-- On COMMA reduce production unary_expression -> unary_operator cast_expression
-- On COLON reduce production unary_expression -> unary_operator cast_expression
-- On BARBAR reduce production unary_expression -> unary_operator cast_expression
-- On BAR reduce production unary_expression -> unary_operator cast_expression
-- On AND_ASSIGN reduce production unary_expression -> unary_operator cast_expression
-- On ANDAND reduce production unary_expression -> unary_operator cast_expression
-- On AND reduce production unary_expression -> unary_operator cast_expression
-- On ADD_ASSIGN reduce production unary_expression -> unary_operator cast_expression

State 121:
## Known stack suffix:
## type_qualifier_list
## LR(1) items:
option(type_qualifier_list) -> type_qualifier_list . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TILDE STRUCT STRING_LITERAL STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK INT INC FLOAT ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) -> type_qualifier_list
-- On VOID reduce production option(type_qualifier_list) -> type_qualifier_list
-- On VAR_NAME reduce production option(type_qualifier_list) -> type_qualifier_list
-- On UNSIGNED reduce production option(type_qualifier_list) -> type_qualifier_list
-- On UNION reduce production option(type_qualifier_list) -> type_qualifier_list
-- On UNDERSCORE_BOOL reduce production option(type_qualifier_list) -> type_qualifier_list
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) -> type_qualifier_list
-- On TILDE reduce production option(type_qualifier_list) -> type_qualifier_list
-- On STRUCT reduce production option(type_qualifier_list) -> type_qualifier_list
-- On STRING_LITERAL reduce production option(type_qualifier_list) -> type_qualifier_list
-- On STAR reduce production option(type_qualifier_list) -> type_qualifier_list
-- On SIZEOF reduce production option(type_qualifier_list) -> type_qualifier_list
-- On SIGNED reduce production option(type_qualifier_list) -> type_qualifier_list
-- On SHORT reduce production option(type_qualifier_list) -> type_qualifier_list
-- On SEMICOLON reduce production option(type_qualifier_list) -> type_qualifier_list
-- On RPAREN reduce production option(type_qualifier_list) -> type_qualifier_list
-- On RESTRICT reduce production option(type_qualifier_list) -> type_qualifier_list
-- On RBRACK reduce production option(type_qualifier_list) -> type_qualifier_list
-- On PLUS reduce production option(type_qualifier_list) -> type_qualifier_list
-- On PACKED reduce production option(type_qualifier_list) -> type_qualifier_list
-- On MINUS reduce production option(type_qualifier_list) -> type_qualifier_list
-- On LPAREN reduce production option(type_qualifier_list) -> type_qualifier_list
-- On LONG reduce production option(type_qualifier_list) -> type_qualifier_list
-- On LBRACK reduce production option(type_qualifier_list) -> type_qualifier_list
-- On INT reduce production option(type_qualifier_list) -> type_qualifier_list
-- On INC reduce production option(type_qualifier_list) -> type_qualifier_list
-- On FLOAT reduce production option(type_qualifier_list) -> type_qualifier_list
-- On ENUM reduce production option(type_qualifier_list) -> type_qualifier_list
-- On DOUBLE reduce production option(type_qualifier_list) -> type_qualifier_list
-- On DEC reduce production option(type_qualifier_list) -> type_qualifier_list
-- On CONSTANT reduce production option(type_qualifier_list) -> type_qualifier_list
-- On CONST reduce production option(type_qualifier_list) -> type_qualifier_list
-- On COMMA reduce production option(type_qualifier_list) -> type_qualifier_list
-- On COLON reduce production option(type_qualifier_list) -> type_qualifier_list
-- On CHAR reduce production option(type_qualifier_list) -> type_qualifier_list
-- On BUILTIN_VA_ARG reduce production option(type_qualifier_list) -> type_qualifier_list
-- On BANG reduce production option(type_qualifier_list) -> type_qualifier_list
-- On ATTRIBUTE reduce production option(type_qualifier_list) -> type_qualifier_list
-- On AND reduce production option(type_qualifier_list) -> type_qualifier_list
-- On ALIGNOF reduce production option(type_qualifier_list) -> type_qualifier_list
-- On ALIGNAS reduce production option(type_qualifier_list) -> type_qualifier_list

State 122:
## Known stack suffix:
## ALIGNOF LPAREN type_name
## LR(1) items:
postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> ALIGNOF LPAREN type_name . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## ALIGNOF LPAREN type_name RPAREN
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> ALIGNOF LPAREN type_name RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On LBRACE shift to state 124
## Reductions:
-- On XOR_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On SUB_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On STAR reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On SLASH reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On SEMICOLON reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On RPAREN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On RIGHT_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On RIGHT reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On RBRACK reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On RBRACE reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On QUESTION reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On PLUS reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On PERCENT reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On OR_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On NEQ reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On MUL_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On MOD_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On MINUS reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On LT reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On LEQ reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On LEFT_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On LEFT reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On HAT reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On GT reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On GEQ reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On EQEQ reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On EQ reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On DIV_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On COMMA reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On COLON reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On BARBAR reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On BAR reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On AND_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On ANDAND reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On AND reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN
-- On ADD_ASSIGN reduce production unary_expression -> ALIGNOF LPAREN type_name RPAREN

State 124:
## Known stack suffix:
## LPAREN type_name RPAREN LBRACE
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN LBRACE . initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On option(designator_list) shift to state 125
-- On option(designation) shift to state 132
-- On initializer_list shift to state 145
-- On designator_list shift to state 139
-- On designation shift to state 141
## Reductions:
-- On VAR_NAME reduce production option(designation) ->
-- On TILDE reduce production option(designation) ->
-- On STRING_LITERAL reduce production option(designation) ->
-- On STAR reduce production option(designation) ->
-- On SIZEOF reduce production option(designation) ->
-- On PLUS reduce production option(designation) ->
-- On MINUS reduce production option(designation) ->
-- On LPAREN reduce production option(designation) ->
-- On LBRACK reduce production option(designator_list) ->
-- On LBRACE reduce production option(designation) ->
-- On INC reduce production option(designation) ->
-- On DOT reduce production option(designator_list) ->
-- On DEC reduce production option(designation) ->
-- On CONSTANT reduce production option(designation) ->
-- On BUILTIN_VA_ARG reduce production option(designation) ->
-- On BANG reduce production option(designation) ->
-- On AND reduce production option(designation) ->
-- On ALIGNOF reduce production option(designation) ->

State 125:
## Known stack suffix:
## option(designator_list)
## LR(1) items:
designator_list -> option(designator_list) . designator [ LBRACK EQ DOT ]
## Transitions:
-- On LBRACK shift to state 126
-- On DOT shift to state 129
-- On designator shift to state 131
## Reductions:

State 126:
## Known stack suffix:
## LBRACK
## LR(1) items:
designator -> LBRACK . conditional_expression RBRACK [ LBRACK EQ DOT ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 127
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 127:
## Known stack suffix:
## LBRACK conditional_expression
## LR(1) items:
designator -> LBRACK conditional_expression . RBRACK [ LBRACK EQ DOT ]
## Transitions:
-- On RBRACK shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## LBRACK conditional_expression RBRACK
## LR(1) items:
designator -> LBRACK conditional_expression RBRACK . [ LBRACK EQ DOT ]
## Transitions:
## Reductions:
-- On LBRACK reduce production designator -> LBRACK conditional_expression RBRACK
-- On EQ reduce production designator -> LBRACK conditional_expression RBRACK
-- On DOT reduce production designator -> LBRACK conditional_expression RBRACK

State 129:
## Known stack suffix:
## DOT
## LR(1) items:
designator -> DOT . general_identifier [ LBRACK EQ DOT ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On general_identifier shift to state 130
## Reductions:

State 130:
## Known stack suffix:
## DOT general_identifier
## LR(1) items:
designator -> DOT general_identifier . [ LBRACK EQ DOT ]
## Transitions:
## Reductions:
-- On LBRACK reduce production designator -> DOT general_identifier
-- On EQ reduce production designator -> DOT general_identifier
-- On DOT reduce production designator -> DOT general_identifier

State 131:
## Known stack suffix:
## option(designator_list) designator
## LR(1) items:
designator_list -> option(designator_list) designator . [ LBRACK EQ DOT ]
## Transitions:
## Reductions:
-- On LBRACK reduce production designator_list -> option(designator_list) designator
-- On EQ reduce production designator_list -> option(designator_list) designator
-- On DOT reduce production designator_list -> option(designator_list) designator

State 132:
## Known stack suffix:
## option(designation)
## LR(1) items:
initializer_list -> option(designation) . c_initializer [ RBRACE COMMA ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 133
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On c_initializer shift to state 144
-- On assignment_expression shift to state 138
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 133:
## Known stack suffix:
## LBRACE
## LR(1) items:
c_initializer -> LBRACE . initializer_list option(COMMA) RBRACE [ SEMICOLON RBRACE COMMA ]
## Transitions:
-- On option(designator_list) shift to state 125
-- On option(designation) shift to state 132
-- On initializer_list shift to state 134
-- On designator_list shift to state 139
-- On designation shift to state 141
## Reductions:
-- On VAR_NAME reduce production option(designation) ->
-- On TILDE reduce production option(designation) ->
-- On STRING_LITERAL reduce production option(designation) ->
-- On STAR reduce production option(designation) ->
-- On SIZEOF reduce production option(designation) ->
-- On PLUS reduce production option(designation) ->
-- On MINUS reduce production option(designation) ->
-- On LPAREN reduce production option(designation) ->
-- On LBRACK reduce production option(designator_list) ->
-- On LBRACE reduce production option(designation) ->
-- On INC reduce production option(designation) ->
-- On DOT reduce production option(designator_list) ->
-- On DEC reduce production option(designation) ->
-- On CONSTANT reduce production option(designation) ->
-- On BUILTIN_VA_ARG reduce production option(designation) ->
-- On BANG reduce production option(designation) ->
-- On AND reduce production option(designation) ->
-- On ALIGNOF reduce production option(designation) ->

State 134:
## Known stack suffix:
## LBRACE initializer_list
## LR(1) items:
c_initializer -> LBRACE initializer_list . option(COMMA) RBRACE [ SEMICOLON RBRACE COMMA ]
initializer_list -> initializer_list . COMMA option(designation) c_initializer [ RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 135
-- On option(COMMA) shift to state 142
## Reductions:
-- On RBRACE reduce production option(COMMA) ->

State 135:
## Known stack suffix:
## initializer_list COMMA
## LR(1) items:
initializer_list -> initializer_list COMMA . option(designation) c_initializer [ RBRACE COMMA ]
option(COMMA) -> COMMA . [ RBRACE ]
## Transitions:
-- On option(designator_list) shift to state 125
-- On option(designation) shift to state 136
-- On designator_list shift to state 139
-- On designation shift to state 141
## Reductions:
-- On VAR_NAME reduce production option(designation) ->
-- On TILDE reduce production option(designation) ->
-- On STRING_LITERAL reduce production option(designation) ->
-- On STAR reduce production option(designation) ->
-- On SIZEOF reduce production option(designation) ->
-- On RBRACE reduce production option(COMMA) -> COMMA
-- On PLUS reduce production option(designation) ->
-- On MINUS reduce production option(designation) ->
-- On LPAREN reduce production option(designation) ->
-- On LBRACK reduce production option(designator_list) ->
-- On LBRACE reduce production option(designation) ->
-- On INC reduce production option(designation) ->
-- On DOT reduce production option(designator_list) ->
-- On DEC reduce production option(designation) ->
-- On CONSTANT reduce production option(designation) ->
-- On BUILTIN_VA_ARG reduce production option(designation) ->
-- On BANG reduce production option(designation) ->
-- On AND reduce production option(designation) ->
-- On ALIGNOF reduce production option(designation) ->

State 136:
## Known stack suffix:
## initializer_list COMMA option(designation)
## LR(1) items:
initializer_list -> initializer_list COMMA option(designation) . c_initializer [ RBRACE COMMA ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 133
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On c_initializer shift to state 137
-- On assignment_expression shift to state 138
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 137:
## Known stack suffix:
## initializer_list COMMA option(designation) c_initializer
## LR(1) items:
initializer_list -> initializer_list COMMA option(designation) c_initializer . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production initializer_list -> initializer_list COMMA option(designation) c_initializer
-- On COMMA reduce production initializer_list -> initializer_list COMMA option(designation) c_initializer

State 138:
## Known stack suffix:
## assignment_expression
## LR(1) items:
c_initializer -> assignment_expression . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production c_initializer -> assignment_expression
-- On RBRACE reduce production c_initializer -> assignment_expression
-- On COMMA reduce production c_initializer -> assignment_expression

State 139:
## Known stack suffix:
## designator_list
## LR(1) items:
designation -> designator_list . EQ [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN LBRACE INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
option(designator_list) -> designator_list . [ LBRACK DOT ]
## Transitions:
-- On EQ shift to state 140
## Reductions:
-- On LBRACK reduce production option(designator_list) -> designator_list
-- On DOT reduce production option(designator_list) -> designator_list

State 140:
## Known stack suffix:
## designator_list EQ
## LR(1) items:
designation -> designator_list EQ . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN LBRACE INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production designation -> designator_list EQ
-- On TILDE reduce production designation -> designator_list EQ
-- On STRING_LITERAL reduce production designation -> designator_list EQ
-- On STAR reduce production designation -> designator_list EQ
-- On SIZEOF reduce production designation -> designator_list EQ
-- On PLUS reduce production designation -> designator_list EQ
-- On MINUS reduce production designation -> designator_list EQ
-- On LPAREN reduce production designation -> designator_list EQ
-- On LBRACE reduce production designation -> designator_list EQ
-- On INC reduce production designation -> designator_list EQ
-- On DEC reduce production designation -> designator_list EQ
-- On CONSTANT reduce production designation -> designator_list EQ
-- On BUILTIN_VA_ARG reduce production designation -> designator_list EQ
-- On BANG reduce production designation -> designator_list EQ
-- On AND reduce production designation -> designator_list EQ
-- On ALIGNOF reduce production designation -> designator_list EQ

State 141:
## Known stack suffix:
## designation
## LR(1) items:
option(designation) -> designation . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF PLUS MINUS LPAREN LBRACE INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production option(designation) -> designation
-- On TILDE reduce production option(designation) -> designation
-- On STRING_LITERAL reduce production option(designation) -> designation
-- On STAR reduce production option(designation) -> designation
-- On SIZEOF reduce production option(designation) -> designation
-- On PLUS reduce production option(designation) -> designation
-- On MINUS reduce production option(designation) -> designation
-- On LPAREN reduce production option(designation) -> designation
-- On LBRACE reduce production option(designation) -> designation
-- On INC reduce production option(designation) -> designation
-- On DEC reduce production option(designation) -> designation
-- On CONSTANT reduce production option(designation) -> designation
-- On BUILTIN_VA_ARG reduce production option(designation) -> designation
-- On BANG reduce production option(designation) -> designation
-- On AND reduce production option(designation) -> designation
-- On ALIGNOF reduce production option(designation) -> designation

State 142:
## Known stack suffix:
## LBRACE initializer_list option(COMMA)
## LR(1) items:
c_initializer -> LBRACE initializer_list option(COMMA) . RBRACE [ SEMICOLON RBRACE COMMA ]
## Transitions:
-- On RBRACE shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## LBRACE initializer_list option(COMMA) RBRACE
## LR(1) items:
c_initializer -> LBRACE initializer_list option(COMMA) RBRACE . [ SEMICOLON RBRACE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production c_initializer -> LBRACE initializer_list option(COMMA) RBRACE
-- On RBRACE reduce production c_initializer -> LBRACE initializer_list option(COMMA) RBRACE
-- On COMMA reduce production c_initializer -> LBRACE initializer_list option(COMMA) RBRACE

State 144:
## Known stack suffix:
## option(designation) c_initializer
## LR(1) items:
initializer_list -> option(designation) c_initializer . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production initializer_list -> option(designation) c_initializer
-- On COMMA reduce production initializer_list -> option(designation) c_initializer

State 145:
## Known stack suffix:
## LPAREN type_name RPAREN LBRACE initializer_list
## LR(1) items:
initializer_list -> initializer_list . COMMA option(designation) c_initializer [ RBRACE COMMA ]
postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list . option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On COMMA shift to state 135
-- On option(COMMA) shift to state 146
## Reductions:
-- On RBRACE reduce production option(COMMA) ->

State 146:
## Known stack suffix:
## LPAREN type_name RPAREN LBRACE initializer_list option(COMMA)
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) . RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RBRACE shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On SUB_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On STAR reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On SLASH reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On SEMICOLON reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On RPAREN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On RIGHT_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On RIGHT reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On RBRACK reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On RBRACE reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On QUESTION reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On PTR reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On PLUS reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On PERCENT reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On OR_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On NEQ reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On MUL_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On MOD_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On MINUS reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On LT reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On LPAREN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On LEQ reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On LEFT_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On LEFT reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On LBRACK reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On INC reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On HAT reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On GT reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On GEQ reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On EQEQ reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On EQ reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On DOT reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On DIV_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On DEC reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On COMMA reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On COLON reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On BARBAR reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On BAR reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On AND_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On ANDAND reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On AND reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE
-- On ADD_ASSIGN reduce production postfix_expression -> LPAREN type_name RPAREN LBRACE initializer_list option(COMMA) RBRACE

State 148:
## Known stack suffix:
## specifier_qualifier_list(type_name)
## LR(1) items:
type_name -> specifier_qualifier_list(type_name) . option(abstract_declarator(type_name)) [ RPAREN ]
## Transitions:
-- On LPAREN shift to state 149
-- On option(direct_abstract_declarator) shift to state 150
-- On option(abstract_declarator(type_name)) shift to state 324
-- On list(pointer1) shift to state 321
-- On direct_abstract_declarator shift to state 282
-- On abstract_declarator(type_name) shift to state 325
## Reductions:
-- On STAR reduce production list(pointer1) ->
-- On RPAREN reduce production option(abstract_declarator(type_name)) ->
-- On LBRACK reduce production option(direct_abstract_declarator) ->

State 149:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN . abstract_declarator(type_name) RPAREN [ RPAREN LPAREN LBRACK ]
direct_abstract_declarator -> LPAREN . in_context(option(parameter_type_list)) RPAREN [ RPAREN LPAREN LBRACK ]
## Transitions:
-- On LPAREN shift to state 149
-- On option(direct_abstract_declarator) shift to state 150
-- On open_context shift to state 262
-- On list(pointer1) shift to state 321
-- On in_context(option(parameter_type_list)) shift to state 273
-- On direct_abstract_declarator shift to state 282
-- On abstract_declarator(type_name) shift to state 285
## Reductions:
-- On VOLATILE reduce production open_context ->
-- On VOID reduce production open_context ->
-- On UNSIGNED reduce production open_context ->
-- On UNION reduce production open_context ->
-- On UNDERSCORE_BOOL reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On STRUCT reduce production open_context ->
-- On STATIC reduce production open_context ->
-- On STAR reduce production list(pointer1) ->
-- On SIGNED reduce production open_context ->
-- On SHORT reduce production open_context ->
-- On RPAREN reduce production open_context ->
-- On RESTRICT reduce production open_context ->
-- On REGISTER reduce production open_context ->
-- On PACKED reduce production open_context ->
-- On LONG reduce production open_context ->
-- On LBRACK reduce production option(direct_abstract_declarator) ->
-- On INT reduce production open_context ->
-- On INLINE reduce production open_context ->
-- On FLOAT reduce production open_context ->
-- On EXTERN reduce production open_context ->
-- On ENUM reduce production open_context ->
-- On DOUBLE reduce production open_context ->
-- On CONST reduce production open_context ->
-- On CHAR reduce production open_context ->
-- On AUTO reduce production open_context ->
-- On ATTRIBUTE reduce production open_context ->
-- On ALIGNAS reduce production open_context ->

State 150:
## Known stack suffix:
## option(direct_abstract_declarator)
## LR(1) items:
direct_abstract_declarator -> option(direct_abstract_declarator) . LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK) [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On LBRACK shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## option(direct_abstract_declarator) LBRACK
## LR(1) items:
direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK . option(type_qualifier_list) optional(assignment_expression,RBRACK) [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On option(type_qualifier_list) shift to state 152
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VAR_NAME reduce production option(type_qualifier_list) ->
-- On TILDE reduce production option(type_qualifier_list) ->
-- On STRING_LITERAL reduce production option(type_qualifier_list) ->
-- On STAR reduce production option(type_qualifier_list) ->
-- On SIZEOF reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On RBRACK reduce production option(type_qualifier_list) ->
-- On PLUS reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On MINUS reduce production option(type_qualifier_list) ->
-- On LPAREN reduce production option(type_qualifier_list) ->
-- On INC reduce production option(type_qualifier_list) ->
-- On DEC reduce production option(type_qualifier_list) ->
-- On CONSTANT reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On BUILTIN_VA_ARG reduce production option(type_qualifier_list) ->
-- On BANG reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On AND reduce production option(type_qualifier_list) ->
-- On ALIGNOF reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 152:
## Known stack suffix:
## option(direct_abstract_declarator) LBRACK option(type_qualifier_list)
## LR(1) items:
direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK option(type_qualifier_list) . optional(assignment_expression,RBRACK) [ RPAREN LPAREN LBRACK COMMA ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE VAR_NAME TILDE STRING_LITERAL STAR SIZEOF RESTRICT RBRACK PLUS PACKED MINUS LPAREN INC DEC CONSTANT CONST BUILTIN_VA_ARG BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RESTRICT shift to state 7
-- On RBRACK shift to state 153
-- On PLUS shift to state 16
-- On PACKED shift to state 9
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On CONST shift to state 154
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On ATTRIBUTE shift to state 155
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On ALIGNAS shift to state 175
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On type_qualifier shift to state 186
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(assignment_expression,RBRACK) shift to state 320
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On attribute_specifier shift to state 187
-- On assignment_expression shift to state 279
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 153:
## Known stack suffix:
## RBRACK
## LR(1) items:
optional(assignment_expression,RBRACK) -> RBRACK . [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On RPAREN reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On PACKED reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On LPAREN reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On LBRACK reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On LBRACE reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On EQ reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On COMMA reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On COLON reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On ATTRIBUTE reduce production optional(assignment_expression,RBRACK) -> RBRACK
-- On ALIGNAS reduce production optional(assignment_expression,RBRACK) -> RBRACK

State 154:
## Known stack suffix:
## CONST
## LR(1) items:
type_qualifier -> CONST . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK INT INLINE INC FLOAT EXTERN ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_qualifier -> CONST
-- On VOID reduce production type_qualifier -> CONST
-- On VAR_NAME reduce production type_qualifier -> CONST
-- On UNSIGNED reduce production type_qualifier -> CONST
-- On UNION reduce production type_qualifier -> CONST
-- On UNDERSCORE_BOOL reduce production type_qualifier -> CONST
-- On TYPEDEF_NAME reduce production type_qualifier -> CONST
-- On TYPEDEF reduce production type_qualifier -> CONST
-- On TILDE reduce production type_qualifier -> CONST
-- On STRUCT reduce production type_qualifier -> CONST
-- On STRING_LITERAL reduce production type_qualifier -> CONST
-- On STATIC reduce production type_qualifier -> CONST
-- On STAR reduce production type_qualifier -> CONST
-- On SIZEOF reduce production type_qualifier -> CONST
-- On SIGNED reduce production type_qualifier -> CONST
-- On SHORT reduce production type_qualifier -> CONST
-- On SEMICOLON reduce production type_qualifier -> CONST
-- On RPAREN reduce production type_qualifier -> CONST
-- On RESTRICT reduce production type_qualifier -> CONST
-- On REGISTER reduce production type_qualifier -> CONST
-- On RBRACK reduce production type_qualifier -> CONST
-- On PLUS reduce production type_qualifier -> CONST
-- On PACKED reduce production type_qualifier -> CONST
-- On MINUS reduce production type_qualifier -> CONST
-- On LPAREN reduce production type_qualifier -> CONST
-- On LONG reduce production type_qualifier -> CONST
-- On LBRACK reduce production type_qualifier -> CONST
-- On INT reduce production type_qualifier -> CONST
-- On INLINE reduce production type_qualifier -> CONST
-- On INC reduce production type_qualifier -> CONST
-- On FLOAT reduce production type_qualifier -> CONST
-- On EXTERN reduce production type_qualifier -> CONST
-- On ENUM reduce production type_qualifier -> CONST
-- On DOUBLE reduce production type_qualifier -> CONST
-- On DEC reduce production type_qualifier -> CONST
-- On CONSTANT reduce production type_qualifier -> CONST
-- On CONST reduce production type_qualifier -> CONST
-- On COMMA reduce production type_qualifier -> CONST
-- On COLON reduce production type_qualifier -> CONST
-- On CHAR reduce production type_qualifier -> CONST
-- On BUILTIN_VA_ARG reduce production type_qualifier -> CONST
-- On BANG reduce production type_qualifier -> CONST
-- On AUTO reduce production type_qualifier -> CONST
-- On ATTRIBUTE reduce production type_qualifier -> CONST
-- On AND reduce production type_qualifier -> CONST
-- On ALIGNOF reduce production type_qualifier -> CONST
-- On ALIGNAS reduce production type_qualifier -> CONST

State 155:
## Known stack suffix:
## ATTRIBUTE
## LR(1) items:
attribute_specifier -> ATTRIBUTE . LPAREN LPAREN gcc_attribute_list RPAREN RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## ATTRIBUTE LPAREN
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN . LPAREN gcc_attribute_list RPAREN RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN LPAREN . gcc_attribute_list RPAREN RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On PACKED shift to state 158
-- On CONST shift to state 159
-- On general_identifier shift to state 160
-- On gcc_attribute_word shift to state 161
-- On gcc_attribute_list shift to state 169
-- On gcc_attribute shift to state 174
## Reductions:
-- On RPAREN reduce production gcc_attribute ->
-- On COMMA reduce production gcc_attribute ->

State 158:
## Known stack suffix:
## PACKED
## LR(1) items:
gcc_attribute_word -> PACKED . [ RPAREN LPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production gcc_attribute_word -> PACKED
-- On LPAREN reduce production gcc_attribute_word -> PACKED
-- On COMMA reduce production gcc_attribute_word -> PACKED

State 159:
## Known stack suffix:
## CONST
## LR(1) items:
gcc_attribute_word -> CONST . [ RPAREN LPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production gcc_attribute_word -> CONST
-- On LPAREN reduce production gcc_attribute_word -> CONST
-- On COMMA reduce production gcc_attribute_word -> CONST

State 160:
## Known stack suffix:
## general_identifier
## LR(1) items:
gcc_attribute_word -> general_identifier . [ RPAREN LPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production gcc_attribute_word -> general_identifier
-- On LPAREN reduce production gcc_attribute_word -> general_identifier
-- On COMMA reduce production gcc_attribute_word -> general_identifier

State 161:
## Known stack suffix:
## gcc_attribute_word
## LR(1) items:
gcc_attribute -> gcc_attribute_word . [ RPAREN COMMA ]
gcc_attribute -> gcc_attribute_word . LPAREN option(argument_expression_list) RPAREN [ RPAREN COMMA ]
gcc_attribute -> gcc_attribute_word . LPAREN TYPEDEF_NAME COMMA argument_expression_list RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 162
## Reductions:
-- On RPAREN reduce production gcc_attribute -> gcc_attribute_word
-- On COMMA reduce production gcc_attribute -> gcc_attribute_word

State 162:
## Known stack suffix:
## gcc_attribute_word LPAREN
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN . option(argument_expression_list) RPAREN [ RPAREN COMMA ]
gcc_attribute -> gcc_attribute_word LPAREN . TYPEDEF_NAME COMMA argument_expression_list RPAREN [ RPAREN COMMA ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TYPEDEF_NAME shift to state 163
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(argument_expression_list) shift to state 167
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 109
-- On argument_expression_list shift to state 110
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On RPAREN reduce production option(argument_expression_list) ->

State 163:
## Known stack suffix:
## gcc_attribute_word LPAREN TYPEDEF_NAME
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN TYPEDEF_NAME . COMMA argument_expression_list RPAREN [ RPAREN COMMA ]
## Transitions:
-- On COMMA shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## gcc_attribute_word LPAREN TYPEDEF_NAME COMMA
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN TYPEDEF_NAME COMMA . argument_expression_list RPAREN [ RPAREN COMMA ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 109
-- On argument_expression_list shift to state 165
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 165:
## Known stack suffix:
## gcc_attribute_word LPAREN TYPEDEF_NAME COMMA argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA assignment_expression [ RPAREN COMMA ]
gcc_attribute -> gcc_attribute_word LPAREN TYPEDEF_NAME COMMA argument_expression_list . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 166
-- On COMMA shift to state 111
## Reductions:

State 166:
## Known stack suffix:
## gcc_attribute_word LPAREN TYPEDEF_NAME COMMA argument_expression_list RPAREN
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN TYPEDEF_NAME COMMA argument_expression_list RPAREN . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production gcc_attribute -> gcc_attribute_word LPAREN TYPEDEF_NAME COMMA argument_expression_list RPAREN
-- On COMMA reduce production gcc_attribute -> gcc_attribute_word LPAREN TYPEDEF_NAME COMMA argument_expression_list RPAREN

State 167:
## Known stack suffix:
## gcc_attribute_word LPAREN option(argument_expression_list)
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN option(argument_expression_list) . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## gcc_attribute_word LPAREN option(argument_expression_list) RPAREN
## LR(1) items:
gcc_attribute -> gcc_attribute_word LPAREN option(argument_expression_list) RPAREN . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production gcc_attribute -> gcc_attribute_word LPAREN option(argument_expression_list) RPAREN
-- On COMMA reduce production gcc_attribute -> gcc_attribute_word LPAREN option(argument_expression_list) RPAREN

State 169:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN gcc_attribute_list
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list . RPAREN RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
gcc_attribute_list -> gcc_attribute_list . COMMA gcc_attribute [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 170
-- On COMMA shift to state 172
## Reductions:

State 170:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN . RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
## LR(1) items:
attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On VOID reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On VAR_NAME reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On UNSIGNED reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On UNION reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On UNDERSCORE_BOOL reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On TYPEDEF_NAME reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On TYPEDEF reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On TILDE reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On STRUCT reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On STRING_LITERAL reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On STATIC reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On STAR reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On SIZEOF reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On SIGNED reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On SHORT reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On SEMICOLON reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On RPAREN reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On RESTRICT reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On REGISTER reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On RBRACK reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On PLUS reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On PACKED reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On MINUS reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On LPAREN reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On LONG reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On LBRACK reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On LBRACE reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On INT reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On INLINE reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On INC reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On FLOAT reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On EXTERN reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On EQ reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On ENUM reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On DOUBLE reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On DEC reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On CONSTANT reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On CONST reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On COMMA reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On COLON reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On CHAR reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On BUILTIN_VA_ARG reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On BANG reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On AUTO reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On ATTRIBUTE reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On AND reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On ALIGNOF reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN
-- On ALIGNAS reduce production attribute_specifier -> ATTRIBUTE LPAREN LPAREN gcc_attribute_list RPAREN RPAREN

State 172:
## Known stack suffix:
## gcc_attribute_list COMMA
## LR(1) items:
gcc_attribute_list -> gcc_attribute_list COMMA . gcc_attribute [ RPAREN COMMA ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On PACKED shift to state 158
-- On CONST shift to state 159
-- On general_identifier shift to state 160
-- On gcc_attribute_word shift to state 161
-- On gcc_attribute shift to state 173
## Reductions:
-- On RPAREN reduce production gcc_attribute ->
-- On COMMA reduce production gcc_attribute ->

State 173:
## Known stack suffix:
## gcc_attribute_list COMMA gcc_attribute
## LR(1) items:
gcc_attribute_list -> gcc_attribute_list COMMA gcc_attribute . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production gcc_attribute_list -> gcc_attribute_list COMMA gcc_attribute
-- On COMMA reduce production gcc_attribute_list -> gcc_attribute_list COMMA gcc_attribute

State 174:
## Known stack suffix:
## gcc_attribute
## LR(1) items:
gcc_attribute_list -> gcc_attribute . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production gcc_attribute_list -> gcc_attribute
-- On COMMA reduce production gcc_attribute_list -> gcc_attribute

State 175:
## Known stack suffix:
## ALIGNAS
## LR(1) items:
attribute_specifier -> ALIGNAS . LPAREN argument_expression_list RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
attribute_specifier -> ALIGNAS . LPAREN type_name RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## ALIGNAS LPAREN
## LR(1) items:
attribute_specifier -> ALIGNAS LPAREN . argument_expression_list RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
attribute_specifier -> ALIGNAS LPAREN . type_name RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On type_qualifier_list shift to state 121
-- On type_name shift to state 177
-- On string_literals_list shift to state 32
-- On specifier_qualifier_list(type_name) shift to state 148
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(type_qualifier_list) shift to state 179
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 109
-- On argument_expression_list shift to state 318
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VOID reduce production option(type_qualifier_list) ->
-- On UNSIGNED reduce production option(type_qualifier_list) ->
-- On UNION reduce production option(type_qualifier_list) ->
-- On UNDERSCORE_BOOL reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STRUCT reduce production option(type_qualifier_list) ->
-- On SIGNED reduce production option(type_qualifier_list) ->
-- On SHORT reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LONG reduce production option(type_qualifier_list) ->
-- On INT reduce production option(type_qualifier_list) ->
-- On FLOAT reduce production option(type_qualifier_list) ->
-- On ENUM reduce production option(type_qualifier_list) ->
-- On DOUBLE reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On CHAR reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 177:
## Known stack suffix:
## ALIGNAS LPAREN type_name
## LR(1) items:
attribute_specifier -> ALIGNAS LPAREN type_name . RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## ALIGNAS LPAREN type_name RPAREN
## LR(1) items:
attribute_specifier -> ALIGNAS LPAREN type_name RPAREN . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On VOID reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On VAR_NAME reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On UNSIGNED reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On UNION reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On UNDERSCORE_BOOL reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On TYPEDEF_NAME reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On TYPEDEF reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On TILDE reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On STRUCT reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On STRING_LITERAL reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On STATIC reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On STAR reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On SIZEOF reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On SIGNED reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On SHORT reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On SEMICOLON reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On RPAREN reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On RESTRICT reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On REGISTER reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On RBRACK reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On PLUS reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On PACKED reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On MINUS reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On LPAREN reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On LONG reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On LBRACK reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On LBRACE reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On INT reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On INLINE reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On INC reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On FLOAT reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On EXTERN reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On EQ reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On ENUM reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On DOUBLE reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On DEC reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On CONSTANT reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On CONST reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On COMMA reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On COLON reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On CHAR reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On BUILTIN_VA_ARG reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On BANG reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On AUTO reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On ATTRIBUTE reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On AND reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On ALIGNOF reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN
-- On ALIGNAS reduce production attribute_specifier -> ALIGNAS LPAREN type_name RPAREN

State 179:
## Known stack suffix:
## option(type_qualifier_list)
## LR(1) items:
specifier_qualifier_list(type_name) -> option(type_qualifier_list) . TYPEDEF_NAME option(type_qualifier_list) [ STAR RPAREN LPAREN LBRACK ]
specifier_qualifier_list(type_name) -> option(type_qualifier_list) . type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name) [ STAR RPAREN LPAREN LBRACK ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT SIGNED SHORT RESTRICT PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On TYPEDEF_NAME shift to state 184
-- On STRUCT shift to state 188
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On FLOAT shift to state 193
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 213
-- On type_qualifier shift to state 186
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On enum_specifier shift to state 255
-- On attribute_specifier shift to state 187
## Reductions:

State 180:
## Known stack suffix:
## VOID
## LR(1) items:
type_specifier_no_typedef_name -> VOID . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> VOID
-- On VOID reduce production type_specifier_no_typedef_name -> VOID
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> VOID
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> VOID
-- On UNION reduce production type_specifier_no_typedef_name -> VOID
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> VOID
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> VOID
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> VOID
-- On STRUCT reduce production type_specifier_no_typedef_name -> VOID
-- On STATIC reduce production type_specifier_no_typedef_name -> VOID
-- On STAR reduce production type_specifier_no_typedef_name -> VOID
-- On SIGNED reduce production type_specifier_no_typedef_name -> VOID
-- On SHORT reduce production type_specifier_no_typedef_name -> VOID
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> VOID
-- On RPAREN reduce production type_specifier_no_typedef_name -> VOID
-- On RESTRICT reduce production type_specifier_no_typedef_name -> VOID
-- On REGISTER reduce production type_specifier_no_typedef_name -> VOID
-- On PACKED reduce production type_specifier_no_typedef_name -> VOID
-- On LPAREN reduce production type_specifier_no_typedef_name -> VOID
-- On LONG reduce production type_specifier_no_typedef_name -> VOID
-- On LBRACK reduce production type_specifier_no_typedef_name -> VOID
-- On INT reduce production type_specifier_no_typedef_name -> VOID
-- On INLINE reduce production type_specifier_no_typedef_name -> VOID
-- On FLOAT reduce production type_specifier_no_typedef_name -> VOID
-- On EXTERN reduce production type_specifier_no_typedef_name -> VOID
-- On ENUM reduce production type_specifier_no_typedef_name -> VOID
-- On DOUBLE reduce production type_specifier_no_typedef_name -> VOID
-- On CONST reduce production type_specifier_no_typedef_name -> VOID
-- On COMMA reduce production type_specifier_no_typedef_name -> VOID
-- On COLON reduce production type_specifier_no_typedef_name -> VOID
-- On CHAR reduce production type_specifier_no_typedef_name -> VOID
-- On AUTO reduce production type_specifier_no_typedef_name -> VOID
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> VOID
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> VOID

State 181:
## Known stack suffix:
## UNSIGNED
## LR(1) items:
type_specifier_no_typedef_name -> UNSIGNED . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On VOID reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On UNION reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On STRUCT reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On STATIC reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On STAR reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On SIGNED reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On SHORT reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On RPAREN reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On RESTRICT reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On REGISTER reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On PACKED reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On LPAREN reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On LONG reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On LBRACK reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On INT reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On INLINE reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On FLOAT reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On EXTERN reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On ENUM reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On DOUBLE reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On CONST reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On COMMA reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On COLON reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On CHAR reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On AUTO reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> UNSIGNED
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> UNSIGNED

State 182:
## Known stack suffix:
## UNION
## LR(1) items:
struct_or_union -> UNION . [ VAR_NAME TYPEDEF_NAME PACKED LBRACE ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production struct_or_union -> UNION
-- On TYPEDEF_NAME reduce production struct_or_union -> UNION
-- On PACKED reduce production struct_or_union -> UNION
-- On LBRACE reduce production struct_or_union -> UNION
-- On ATTRIBUTE reduce production struct_or_union -> UNION
-- On ALIGNAS reduce production struct_or_union -> UNION

State 183:
## Known stack suffix:
## UNDERSCORE_BOOL
## LR(1) items:
type_specifier_no_typedef_name -> UNDERSCORE_BOOL . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On VOID reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On UNION reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On STRUCT reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On STATIC reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On STAR reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On SIGNED reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On SHORT reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On RPAREN reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On RESTRICT reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On REGISTER reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On PACKED reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On LPAREN reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On LONG reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On LBRACK reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On INT reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On INLINE reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On FLOAT reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On EXTERN reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On ENUM reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On DOUBLE reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On CONST reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On COMMA reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On COLON reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On CHAR reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On AUTO reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> UNDERSCORE_BOOL

State 184:
## Known stack suffix:
## option(type_qualifier_list) TYPEDEF_NAME
## LR(1) items:
specifier_qualifier_list(type_name) -> option(type_qualifier_list) TYPEDEF_NAME . option(type_qualifier_list) [ STAR RPAREN LPAREN LBRACK ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On option(type_qualifier_list) shift to state 185
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On STAR reduce production option(type_qualifier_list) ->
-- On RPAREN reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LPAREN reduce production option(type_qualifier_list) ->
-- On LBRACK reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 185:
## Known stack suffix:
## option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
## LR(1) items:
specifier_qualifier_list(type_name) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list) . [ STAR RPAREN LPAREN LBRACK ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On CONST shift to state 154
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 186
-- On attribute_specifier shift to state 187
## Reductions:
-- On STAR reduce production specifier_qualifier_list(type_name) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
-- On RPAREN reduce production specifier_qualifier_list(type_name) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
-- On LPAREN reduce production specifier_qualifier_list(type_name) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
-- On LBRACK reduce production specifier_qualifier_list(type_name) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)

State 186:
## Known stack suffix:
## option(type_qualifier_list) type_qualifier
## LR(1) items:
type_qualifier_list -> option(type_qualifier_list) type_qualifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TILDE STRUCT STRING_LITERAL STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK INT INC FLOAT ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On VOID reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On VAR_NAME reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On UNSIGNED reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On UNION reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On UNDERSCORE_BOOL reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On TYPEDEF_NAME reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On TILDE reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On STRUCT reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On STRING_LITERAL reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On STAR reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On SIZEOF reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On SIGNED reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On SHORT reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On SEMICOLON reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On RPAREN reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On RESTRICT reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On RBRACK reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On PLUS reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On PACKED reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On MINUS reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On LPAREN reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On LONG reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On LBRACK reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On INT reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On INC reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On FLOAT reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On ENUM reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On DOUBLE reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On DEC reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On CONSTANT reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On CONST reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On COMMA reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On COLON reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On CHAR reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On BUILTIN_VA_ARG reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On BANG reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On ATTRIBUTE reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On AND reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On ALIGNOF reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier
-- On ALIGNAS reduce production type_qualifier_list -> option(type_qualifier_list) type_qualifier

State 187:
## Known stack suffix:
## attribute_specifier
## LR(1) items:
type_qualifier -> attribute_specifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK INT INLINE INC FLOAT EXTERN ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_qualifier -> attribute_specifier
-- On VOID reduce production type_qualifier -> attribute_specifier
-- On VAR_NAME reduce production type_qualifier -> attribute_specifier
-- On UNSIGNED reduce production type_qualifier -> attribute_specifier
-- On UNION reduce production type_qualifier -> attribute_specifier
-- On UNDERSCORE_BOOL reduce production type_qualifier -> attribute_specifier
-- On TYPEDEF_NAME reduce production type_qualifier -> attribute_specifier
-- On TYPEDEF reduce production type_qualifier -> attribute_specifier
-- On TILDE reduce production type_qualifier -> attribute_specifier
-- On STRUCT reduce production type_qualifier -> attribute_specifier
-- On STRING_LITERAL reduce production type_qualifier -> attribute_specifier
-- On STATIC reduce production type_qualifier -> attribute_specifier
-- On STAR reduce production type_qualifier -> attribute_specifier
-- On SIZEOF reduce production type_qualifier -> attribute_specifier
-- On SIGNED reduce production type_qualifier -> attribute_specifier
-- On SHORT reduce production type_qualifier -> attribute_specifier
-- On SEMICOLON reduce production type_qualifier -> attribute_specifier
-- On RPAREN reduce production type_qualifier -> attribute_specifier
-- On RESTRICT reduce production type_qualifier -> attribute_specifier
-- On REGISTER reduce production type_qualifier -> attribute_specifier
-- On RBRACK reduce production type_qualifier -> attribute_specifier
-- On PLUS reduce production type_qualifier -> attribute_specifier
-- On PACKED reduce production type_qualifier -> attribute_specifier
-- On MINUS reduce production type_qualifier -> attribute_specifier
-- On LPAREN reduce production type_qualifier -> attribute_specifier
-- On LONG reduce production type_qualifier -> attribute_specifier
-- On LBRACK reduce production type_qualifier -> attribute_specifier
-- On INT reduce production type_qualifier -> attribute_specifier
-- On INLINE reduce production type_qualifier -> attribute_specifier
-- On INC reduce production type_qualifier -> attribute_specifier
-- On FLOAT reduce production type_qualifier -> attribute_specifier
-- On EXTERN reduce production type_qualifier -> attribute_specifier
-- On ENUM reduce production type_qualifier -> attribute_specifier
-- On DOUBLE reduce production type_qualifier -> attribute_specifier
-- On DEC reduce production type_qualifier -> attribute_specifier
-- On CONSTANT reduce production type_qualifier -> attribute_specifier
-- On CONST reduce production type_qualifier -> attribute_specifier
-- On COMMA reduce production type_qualifier -> attribute_specifier
-- On COLON reduce production type_qualifier -> attribute_specifier
-- On CHAR reduce production type_qualifier -> attribute_specifier
-- On BUILTIN_VA_ARG reduce production type_qualifier -> attribute_specifier
-- On BANG reduce production type_qualifier -> attribute_specifier
-- On AUTO reduce production type_qualifier -> attribute_specifier
-- On ATTRIBUTE reduce production type_qualifier -> attribute_specifier
-- On AND reduce production type_qualifier -> attribute_specifier
-- On ALIGNOF reduce production type_qualifier -> attribute_specifier
-- On ALIGNAS reduce production type_qualifier -> attribute_specifier

State 188:
## Known stack suffix:
## STRUCT
## LR(1) items:
struct_or_union -> STRUCT . [ VAR_NAME TYPEDEF_NAME PACKED LBRACE ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production struct_or_union -> STRUCT
-- On TYPEDEF_NAME reduce production struct_or_union -> STRUCT
-- On PACKED reduce production struct_or_union -> STRUCT
-- On LBRACE reduce production struct_or_union -> STRUCT
-- On ATTRIBUTE reduce production struct_or_union -> STRUCT
-- On ALIGNAS reduce production struct_or_union -> STRUCT

State 189:
## Known stack suffix:
## SIGNED
## LR(1) items:
type_specifier_no_typedef_name -> SIGNED . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> SIGNED
-- On VOID reduce production type_specifier_no_typedef_name -> SIGNED
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> SIGNED
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> SIGNED
-- On UNION reduce production type_specifier_no_typedef_name -> SIGNED
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> SIGNED
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> SIGNED
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> SIGNED
-- On STRUCT reduce production type_specifier_no_typedef_name -> SIGNED
-- On STATIC reduce production type_specifier_no_typedef_name -> SIGNED
-- On STAR reduce production type_specifier_no_typedef_name -> SIGNED
-- On SIGNED reduce production type_specifier_no_typedef_name -> SIGNED
-- On SHORT reduce production type_specifier_no_typedef_name -> SIGNED
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> SIGNED
-- On RPAREN reduce production type_specifier_no_typedef_name -> SIGNED
-- On RESTRICT reduce production type_specifier_no_typedef_name -> SIGNED
-- On REGISTER reduce production type_specifier_no_typedef_name -> SIGNED
-- On PACKED reduce production type_specifier_no_typedef_name -> SIGNED
-- On LPAREN reduce production type_specifier_no_typedef_name -> SIGNED
-- On LONG reduce production type_specifier_no_typedef_name -> SIGNED
-- On LBRACK reduce production type_specifier_no_typedef_name -> SIGNED
-- On INT reduce production type_specifier_no_typedef_name -> SIGNED
-- On INLINE reduce production type_specifier_no_typedef_name -> SIGNED
-- On FLOAT reduce production type_specifier_no_typedef_name -> SIGNED
-- On EXTERN reduce production type_specifier_no_typedef_name -> SIGNED
-- On ENUM reduce production type_specifier_no_typedef_name -> SIGNED
-- On DOUBLE reduce production type_specifier_no_typedef_name -> SIGNED
-- On CONST reduce production type_specifier_no_typedef_name -> SIGNED
-- On COMMA reduce production type_specifier_no_typedef_name -> SIGNED
-- On COLON reduce production type_specifier_no_typedef_name -> SIGNED
-- On CHAR reduce production type_specifier_no_typedef_name -> SIGNED
-- On AUTO reduce production type_specifier_no_typedef_name -> SIGNED
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> SIGNED
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> SIGNED

State 190:
## Known stack suffix:
## SHORT
## LR(1) items:
type_specifier_no_typedef_name -> SHORT . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> SHORT
-- On VOID reduce production type_specifier_no_typedef_name -> SHORT
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> SHORT
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> SHORT
-- On UNION reduce production type_specifier_no_typedef_name -> SHORT
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> SHORT
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> SHORT
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> SHORT
-- On STRUCT reduce production type_specifier_no_typedef_name -> SHORT
-- On STATIC reduce production type_specifier_no_typedef_name -> SHORT
-- On STAR reduce production type_specifier_no_typedef_name -> SHORT
-- On SIGNED reduce production type_specifier_no_typedef_name -> SHORT
-- On SHORT reduce production type_specifier_no_typedef_name -> SHORT
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> SHORT
-- On RPAREN reduce production type_specifier_no_typedef_name -> SHORT
-- On RESTRICT reduce production type_specifier_no_typedef_name -> SHORT
-- On REGISTER reduce production type_specifier_no_typedef_name -> SHORT
-- On PACKED reduce production type_specifier_no_typedef_name -> SHORT
-- On LPAREN reduce production type_specifier_no_typedef_name -> SHORT
-- On LONG reduce production type_specifier_no_typedef_name -> SHORT
-- On LBRACK reduce production type_specifier_no_typedef_name -> SHORT
-- On INT reduce production type_specifier_no_typedef_name -> SHORT
-- On INLINE reduce production type_specifier_no_typedef_name -> SHORT
-- On FLOAT reduce production type_specifier_no_typedef_name -> SHORT
-- On EXTERN reduce production type_specifier_no_typedef_name -> SHORT
-- On ENUM reduce production type_specifier_no_typedef_name -> SHORT
-- On DOUBLE reduce production type_specifier_no_typedef_name -> SHORT
-- On CONST reduce production type_specifier_no_typedef_name -> SHORT
-- On COMMA reduce production type_specifier_no_typedef_name -> SHORT
-- On COLON reduce production type_specifier_no_typedef_name -> SHORT
-- On CHAR reduce production type_specifier_no_typedef_name -> SHORT
-- On AUTO reduce production type_specifier_no_typedef_name -> SHORT
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> SHORT
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> SHORT

State 191:
## Known stack suffix:
## LONG
## LR(1) items:
type_specifier_no_typedef_name -> LONG . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> LONG
-- On VOID reduce production type_specifier_no_typedef_name -> LONG
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> LONG
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> LONG
-- On UNION reduce production type_specifier_no_typedef_name -> LONG
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> LONG
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> LONG
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> LONG
-- On STRUCT reduce production type_specifier_no_typedef_name -> LONG
-- On STATIC reduce production type_specifier_no_typedef_name -> LONG
-- On STAR reduce production type_specifier_no_typedef_name -> LONG
-- On SIGNED reduce production type_specifier_no_typedef_name -> LONG
-- On SHORT reduce production type_specifier_no_typedef_name -> LONG
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> LONG
-- On RPAREN reduce production type_specifier_no_typedef_name -> LONG
-- On RESTRICT reduce production type_specifier_no_typedef_name -> LONG
-- On REGISTER reduce production type_specifier_no_typedef_name -> LONG
-- On PACKED reduce production type_specifier_no_typedef_name -> LONG
-- On LPAREN reduce production type_specifier_no_typedef_name -> LONG
-- On LONG reduce production type_specifier_no_typedef_name -> LONG
-- On LBRACK reduce production type_specifier_no_typedef_name -> LONG
-- On INT reduce production type_specifier_no_typedef_name -> LONG
-- On INLINE reduce production type_specifier_no_typedef_name -> LONG
-- On FLOAT reduce production type_specifier_no_typedef_name -> LONG
-- On EXTERN reduce production type_specifier_no_typedef_name -> LONG
-- On ENUM reduce production type_specifier_no_typedef_name -> LONG
-- On DOUBLE reduce production type_specifier_no_typedef_name -> LONG
-- On CONST reduce production type_specifier_no_typedef_name -> LONG
-- On COMMA reduce production type_specifier_no_typedef_name -> LONG
-- On COLON reduce production type_specifier_no_typedef_name -> LONG
-- On CHAR reduce production type_specifier_no_typedef_name -> LONG
-- On AUTO reduce production type_specifier_no_typedef_name -> LONG
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> LONG
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> LONG

State 192:
## Known stack suffix:
## INT
## LR(1) items:
type_specifier_no_typedef_name -> INT . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> INT
-- On VOID reduce production type_specifier_no_typedef_name -> INT
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> INT
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> INT
-- On UNION reduce production type_specifier_no_typedef_name -> INT
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> INT
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> INT
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> INT
-- On STRUCT reduce production type_specifier_no_typedef_name -> INT
-- On STATIC reduce production type_specifier_no_typedef_name -> INT
-- On STAR reduce production type_specifier_no_typedef_name -> INT
-- On SIGNED reduce production type_specifier_no_typedef_name -> INT
-- On SHORT reduce production type_specifier_no_typedef_name -> INT
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> INT
-- On RPAREN reduce production type_specifier_no_typedef_name -> INT
-- On RESTRICT reduce production type_specifier_no_typedef_name -> INT
-- On REGISTER reduce production type_specifier_no_typedef_name -> INT
-- On PACKED reduce production type_specifier_no_typedef_name -> INT
-- On LPAREN reduce production type_specifier_no_typedef_name -> INT
-- On LONG reduce production type_specifier_no_typedef_name -> INT
-- On LBRACK reduce production type_specifier_no_typedef_name -> INT
-- On INT reduce production type_specifier_no_typedef_name -> INT
-- On INLINE reduce production type_specifier_no_typedef_name -> INT
-- On FLOAT reduce production type_specifier_no_typedef_name -> INT
-- On EXTERN reduce production type_specifier_no_typedef_name -> INT
-- On ENUM reduce production type_specifier_no_typedef_name -> INT
-- On DOUBLE reduce production type_specifier_no_typedef_name -> INT
-- On CONST reduce production type_specifier_no_typedef_name -> INT
-- On COMMA reduce production type_specifier_no_typedef_name -> INT
-- On COLON reduce production type_specifier_no_typedef_name -> INT
-- On CHAR reduce production type_specifier_no_typedef_name -> INT
-- On AUTO reduce production type_specifier_no_typedef_name -> INT
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> INT
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> INT

State 193:
## Known stack suffix:
## FLOAT
## LR(1) items:
type_specifier_no_typedef_name -> FLOAT . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> FLOAT
-- On VOID reduce production type_specifier_no_typedef_name -> FLOAT
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> FLOAT
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> FLOAT
-- On UNION reduce production type_specifier_no_typedef_name -> FLOAT
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> FLOAT
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> FLOAT
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> FLOAT
-- On STRUCT reduce production type_specifier_no_typedef_name -> FLOAT
-- On STATIC reduce production type_specifier_no_typedef_name -> FLOAT
-- On STAR reduce production type_specifier_no_typedef_name -> FLOAT
-- On SIGNED reduce production type_specifier_no_typedef_name -> FLOAT
-- On SHORT reduce production type_specifier_no_typedef_name -> FLOAT
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> FLOAT
-- On RPAREN reduce production type_specifier_no_typedef_name -> FLOAT
-- On RESTRICT reduce production type_specifier_no_typedef_name -> FLOAT
-- On REGISTER reduce production type_specifier_no_typedef_name -> FLOAT
-- On PACKED reduce production type_specifier_no_typedef_name -> FLOAT
-- On LPAREN reduce production type_specifier_no_typedef_name -> FLOAT
-- On LONG reduce production type_specifier_no_typedef_name -> FLOAT
-- On LBRACK reduce production type_specifier_no_typedef_name -> FLOAT
-- On INT reduce production type_specifier_no_typedef_name -> FLOAT
-- On INLINE reduce production type_specifier_no_typedef_name -> FLOAT
-- On FLOAT reduce production type_specifier_no_typedef_name -> FLOAT
-- On EXTERN reduce production type_specifier_no_typedef_name -> FLOAT
-- On ENUM reduce production type_specifier_no_typedef_name -> FLOAT
-- On DOUBLE reduce production type_specifier_no_typedef_name -> FLOAT
-- On CONST reduce production type_specifier_no_typedef_name -> FLOAT
-- On COMMA reduce production type_specifier_no_typedef_name -> FLOAT
-- On COLON reduce production type_specifier_no_typedef_name -> FLOAT
-- On CHAR reduce production type_specifier_no_typedef_name -> FLOAT
-- On AUTO reduce production type_specifier_no_typedef_name -> FLOAT
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> FLOAT
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> FLOAT

State 194:
## Known stack suffix:
## ENUM
## LR(1) items:
enum_specifier -> ENUM . attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
enum_specifier -> ENUM . attribute_specifier_list general_identifier [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On attribute_specifier_list shift to state 195
## Reductions:
-- On VAR_NAME reduce production attribute_specifier_list ->
-- On TYPEDEF_NAME reduce production attribute_specifier_list ->
-- On PACKED reduce production attribute_specifier_list ->
-- On LBRACE reduce production attribute_specifier_list ->
-- On ATTRIBUTE reduce production attribute_specifier_list ->
-- On ALIGNAS reduce production attribute_specifier_list ->

State 195:
## Known stack suffix:
## ENUM attribute_specifier_list
## LR(1) items:
attribute_specifier_list -> attribute_specifier_list . attribute_specifier [ VAR_NAME TYPEDEF_NAME PACKED LBRACE ATTRIBUTE ALIGNAS ]
enum_specifier -> ENUM attribute_specifier_list . option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
enum_specifier -> ENUM attribute_specifier_list . general_identifier [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On PACKED shift to state 9
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On option(other_identifier) shift to state 196
-- On general_identifier shift to state 209
-- On attribute_specifier shift to state 210
## Reductions:
-- On LBRACE reduce production option(other_identifier) ->

State 196:
## Known stack suffix:
## ENUM attribute_specifier_list option(other_identifier)
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list option(other_identifier) . LBRACE enumerator_list option(COMMA) RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LBRACE shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## ENUM attribute_specifier_list option(other_identifier) LBRACE
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE . enumerator_list option(COMMA) RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On general_identifier shift to state 198
-- On enumerator_list shift to state 199
-- On enumerator shift to state 201
-- On enumeration_constant shift to state 202
-- On declare_varname(enumerator) shift to state 208
## Reductions:

State 198:
## Known stack suffix:
## general_identifier
## LR(1) items:
enumeration_constant -> general_identifier . [ RBRACE EQ COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production enumeration_constant -> general_identifier
-- On EQ reduce production enumeration_constant -> general_identifier
-- On COMMA reduce production enumeration_constant -> general_identifier

State 199:
## Known stack suffix:
## ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list . option(COMMA) RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
enumerator_list -> enumerator_list . COMMA declare_varname(enumerator) [ RBRACE COMMA ]
## Transitions:
-- On COMMA shift to state 200
-- On option(COMMA) shift to state 206
## Reductions:
-- On RBRACE reduce production option(COMMA) ->

State 200:
## Known stack suffix:
## enumerator_list COMMA
## LR(1) items:
enumerator_list -> enumerator_list COMMA . declare_varname(enumerator) [ RBRACE COMMA ]
option(COMMA) -> COMMA . [ RBRACE ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On general_identifier shift to state 198
-- On enumerator shift to state 201
-- On enumeration_constant shift to state 202
-- On declare_varname(enumerator) shift to state 205
## Reductions:
-- On RBRACE reduce production option(COMMA) -> COMMA

State 201:
## Known stack suffix:
## enumerator
## LR(1) items:
declare_varname(enumerator) -> enumerator . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production declare_varname(enumerator) -> enumerator
-- On COMMA reduce production declare_varname(enumerator) -> enumerator

State 202:
## Known stack suffix:
## enumeration_constant
## LR(1) items:
enumerator -> enumeration_constant . [ RBRACE COMMA ]
enumerator -> enumeration_constant . EQ conditional_expression [ RBRACE COMMA ]
## Transitions:
-- On EQ shift to state 203
## Reductions:
-- On RBRACE reduce production enumerator -> enumeration_constant
-- On COMMA reduce production enumerator -> enumeration_constant

State 203:
## Known stack suffix:
## enumeration_constant EQ
## LR(1) items:
enumerator -> enumeration_constant EQ . conditional_expression [ RBRACE COMMA ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 204
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 204:
## Known stack suffix:
## enumeration_constant EQ conditional_expression
## LR(1) items:
enumerator -> enumeration_constant EQ conditional_expression . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production enumerator -> enumeration_constant EQ conditional_expression
-- On COMMA reduce production enumerator -> enumeration_constant EQ conditional_expression

State 205:
## Known stack suffix:
## enumerator_list COMMA declare_varname(enumerator)
## LR(1) items:
enumerator_list -> enumerator_list COMMA declare_varname(enumerator) . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production enumerator_list -> enumerator_list COMMA declare_varname(enumerator)
-- On COMMA reduce production enumerator_list -> enumerator_list COMMA declare_varname(enumerator)

State 206:
## Known stack suffix:
## ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA)
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) . RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RBRACE shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On VOID reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On VAR_NAME reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On UNSIGNED reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On UNION reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On UNDERSCORE_BOOL reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On TYPEDEF_NAME reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On TYPEDEF reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On STRUCT reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On STATIC reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On STAR reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On SIGNED reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On SHORT reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On SEMICOLON reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On RPAREN reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On RESTRICT reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On REGISTER reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On PACKED reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On LPAREN reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On LONG reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On LBRACK reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On INT reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On INLINE reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On FLOAT reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On EXTERN reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On ENUM reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On DOUBLE reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On CONST reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On COMMA reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On COLON reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On CHAR reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On AUTO reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On ATTRIBUTE reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE
-- On ALIGNAS reduce production enum_specifier -> ENUM attribute_specifier_list option(other_identifier) LBRACE enumerator_list option(COMMA) RBRACE

State 208:
## Known stack suffix:
## declare_varname(enumerator)
## LR(1) items:
enumerator_list -> declare_varname(enumerator) . [ RBRACE COMMA ]
## Transitions:
## Reductions:
-- On RBRACE reduce production enumerator_list -> declare_varname(enumerator)
-- On COMMA reduce production enumerator_list -> declare_varname(enumerator)

State 209:
## Known stack suffix:
## ENUM attribute_specifier_list general_identifier
## LR(1) items:
enum_specifier -> ENUM attribute_specifier_list general_identifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
option(other_identifier) -> general_identifier . [ LBRACE ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On VOID reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On VAR_NAME reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On UNSIGNED reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On UNION reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On UNDERSCORE_BOOL reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On TYPEDEF_NAME reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On TYPEDEF reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On STRUCT reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On STATIC reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On STAR reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On SIGNED reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On SHORT reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On SEMICOLON reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On RPAREN reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On RESTRICT reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On REGISTER reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On PACKED reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On LPAREN reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On LONG reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On LBRACK reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On LBRACE reduce production option(other_identifier) -> general_identifier
-- On INT reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On INLINE reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On FLOAT reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On EXTERN reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On ENUM reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On DOUBLE reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On CONST reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On COMMA reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On COLON reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On CHAR reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On AUTO reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On ATTRIBUTE reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier
-- On ALIGNAS reduce production enum_specifier -> ENUM attribute_specifier_list general_identifier

State 210:
## Known stack suffix:
## attribute_specifier_list attribute_specifier
## LR(1) items:
attribute_specifier_list -> attribute_specifier_list attribute_specifier . [ VAR_NAME TYPEDEF_NAME SEMICOLON RPAREN PACKED LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On TYPEDEF_NAME reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On SEMICOLON reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On RPAREN reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On PACKED reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On LBRACE reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On EQ reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On COMMA reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On COLON reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On ATTRIBUTE reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier
-- On ALIGNAS reduce production attribute_specifier_list -> attribute_specifier_list attribute_specifier

State 211:
## Known stack suffix:
## DOUBLE
## LR(1) items:
type_specifier_no_typedef_name -> DOUBLE . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> DOUBLE
-- On VOID reduce production type_specifier_no_typedef_name -> DOUBLE
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> DOUBLE
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> DOUBLE
-- On UNION reduce production type_specifier_no_typedef_name -> DOUBLE
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> DOUBLE
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> DOUBLE
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> DOUBLE
-- On STRUCT reduce production type_specifier_no_typedef_name -> DOUBLE
-- On STATIC reduce production type_specifier_no_typedef_name -> DOUBLE
-- On STAR reduce production type_specifier_no_typedef_name -> DOUBLE
-- On SIGNED reduce production type_specifier_no_typedef_name -> DOUBLE
-- On SHORT reduce production type_specifier_no_typedef_name -> DOUBLE
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> DOUBLE
-- On RPAREN reduce production type_specifier_no_typedef_name -> DOUBLE
-- On RESTRICT reduce production type_specifier_no_typedef_name -> DOUBLE
-- On REGISTER reduce production type_specifier_no_typedef_name -> DOUBLE
-- On PACKED reduce production type_specifier_no_typedef_name -> DOUBLE
-- On LPAREN reduce production type_specifier_no_typedef_name -> DOUBLE
-- On LONG reduce production type_specifier_no_typedef_name -> DOUBLE
-- On LBRACK reduce production type_specifier_no_typedef_name -> DOUBLE
-- On INT reduce production type_specifier_no_typedef_name -> DOUBLE
-- On INLINE reduce production type_specifier_no_typedef_name -> DOUBLE
-- On FLOAT reduce production type_specifier_no_typedef_name -> DOUBLE
-- On EXTERN reduce production type_specifier_no_typedef_name -> DOUBLE
-- On ENUM reduce production type_specifier_no_typedef_name -> DOUBLE
-- On DOUBLE reduce production type_specifier_no_typedef_name -> DOUBLE
-- On CONST reduce production type_specifier_no_typedef_name -> DOUBLE
-- On COMMA reduce production type_specifier_no_typedef_name -> DOUBLE
-- On COLON reduce production type_specifier_no_typedef_name -> DOUBLE
-- On CHAR reduce production type_specifier_no_typedef_name -> DOUBLE
-- On AUTO reduce production type_specifier_no_typedef_name -> DOUBLE
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> DOUBLE
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> DOUBLE

State 212:
## Known stack suffix:
## CHAR
## LR(1) items:
type_specifier_no_typedef_name -> CHAR . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> CHAR
-- On VOID reduce production type_specifier_no_typedef_name -> CHAR
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> CHAR
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> CHAR
-- On UNION reduce production type_specifier_no_typedef_name -> CHAR
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> CHAR
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> CHAR
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> CHAR
-- On STRUCT reduce production type_specifier_no_typedef_name -> CHAR
-- On STATIC reduce production type_specifier_no_typedef_name -> CHAR
-- On STAR reduce production type_specifier_no_typedef_name -> CHAR
-- On SIGNED reduce production type_specifier_no_typedef_name -> CHAR
-- On SHORT reduce production type_specifier_no_typedef_name -> CHAR
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> CHAR
-- On RPAREN reduce production type_specifier_no_typedef_name -> CHAR
-- On RESTRICT reduce production type_specifier_no_typedef_name -> CHAR
-- On REGISTER reduce production type_specifier_no_typedef_name -> CHAR
-- On PACKED reduce production type_specifier_no_typedef_name -> CHAR
-- On LPAREN reduce production type_specifier_no_typedef_name -> CHAR
-- On LONG reduce production type_specifier_no_typedef_name -> CHAR
-- On LBRACK reduce production type_specifier_no_typedef_name -> CHAR
-- On INT reduce production type_specifier_no_typedef_name -> CHAR
-- On INLINE reduce production type_specifier_no_typedef_name -> CHAR
-- On FLOAT reduce production type_specifier_no_typedef_name -> CHAR
-- On EXTERN reduce production type_specifier_no_typedef_name -> CHAR
-- On ENUM reduce production type_specifier_no_typedef_name -> CHAR
-- On DOUBLE reduce production type_specifier_no_typedef_name -> CHAR
-- On CONST reduce production type_specifier_no_typedef_name -> CHAR
-- On COMMA reduce production type_specifier_no_typedef_name -> CHAR
-- On COLON reduce production type_specifier_no_typedef_name -> CHAR
-- On CHAR reduce production type_specifier_no_typedef_name -> CHAR
-- On AUTO reduce production type_specifier_no_typedef_name -> CHAR
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> CHAR
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> CHAR

State 213:
## Known stack suffix:
## option(type_qualifier_list) type_specifier_no_typedef_name
## LR(1) items:
specifier_qualifier_list(type_name) -> option(type_qualifier_list) type_specifier_no_typedef_name . list(specifier_qualifier_no_typedef_name) [ STAR RPAREN LPAREN LBRACK ]
## Transitions:
-- On list(specifier_qualifier_no_typedef_name) shift to state 214
## Reductions:
-- On VOLATILE reduce production list(specifier_qualifier_no_typedef_name) ->
-- On VOID reduce production list(specifier_qualifier_no_typedef_name) ->
-- On UNSIGNED reduce production list(specifier_qualifier_no_typedef_name) ->
-- On UNION reduce production list(specifier_qualifier_no_typedef_name) ->
-- On UNDERSCORE_BOOL reduce production list(specifier_qualifier_no_typedef_name) ->
-- On STRUCT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On STAR reduce production list(specifier_qualifier_no_typedef_name) ->
-- On SIGNED reduce production list(specifier_qualifier_no_typedef_name) ->
-- On SHORT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On RPAREN reduce production list(specifier_qualifier_no_typedef_name) ->
-- On RESTRICT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On PACKED reduce production list(specifier_qualifier_no_typedef_name) ->
-- On LPAREN reduce production list(specifier_qualifier_no_typedef_name) ->
-- On LONG reduce production list(specifier_qualifier_no_typedef_name) ->
-- On LBRACK reduce production list(specifier_qualifier_no_typedef_name) ->
-- On INT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On FLOAT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On ENUM reduce production list(specifier_qualifier_no_typedef_name) ->
-- On DOUBLE reduce production list(specifier_qualifier_no_typedef_name) ->
-- On CONST reduce production list(specifier_qualifier_no_typedef_name) ->
-- On CHAR reduce production list(specifier_qualifier_no_typedef_name) ->
-- On ATTRIBUTE reduce production list(specifier_qualifier_no_typedef_name) ->
-- On ALIGNAS reduce production list(specifier_qualifier_no_typedef_name) ->

State 214:
## Known stack suffix:
## option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
## LR(1) items:
list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) . specifier_qualifier_no_typedef_name [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STAR SIGNED SHORT RPAREN RESTRICT PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
specifier_qualifier_list(type_name) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name) . [ STAR RPAREN LPAREN LBRACK ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On STRUCT shift to state 188
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On FLOAT shift to state 193
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 215
-- On type_qualifier shift to state 216
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On specifier_qualifier_no_typedef_name shift to state 316
-- On enum_specifier shift to state 255
-- On attribute_specifier shift to state 187
## Reductions:
-- On STAR reduce production specifier_qualifier_list(type_name) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
-- On RPAREN reduce production specifier_qualifier_list(type_name) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
-- On LPAREN reduce production specifier_qualifier_list(type_name) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
-- On LBRACK reduce production specifier_qualifier_list(type_name) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)

State 215:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST COLON CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On VOID reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On VAR_NAME reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On UNSIGNED reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On UNION reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On UNDERSCORE_BOOL reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On TYPEDEF_NAME reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On STRUCT reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On STAR reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On SIGNED reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On SHORT reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On SEMICOLON reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On RPAREN reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On RESTRICT reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On PACKED reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On LPAREN reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On LONG reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On LBRACK reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On INT reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On FLOAT reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On ENUM reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On DOUBLE reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On CONST reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On COLON reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On CHAR reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On ATTRIBUTE reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name
-- On ALIGNAS reduce production specifier_qualifier_no_typedef_name -> type_specifier_no_typedef_name

State 216:
## Known stack suffix:
## type_qualifier
## LR(1) items:
specifier_qualifier_no_typedef_name -> type_qualifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST COLON CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On VOID reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On VAR_NAME reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On UNSIGNED reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On UNION reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On UNDERSCORE_BOOL reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On TYPEDEF_NAME reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On STRUCT reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On STAR reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On SIGNED reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On SHORT reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On SEMICOLON reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On RPAREN reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On RESTRICT reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On PACKED reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On LPAREN reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On LONG reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On LBRACK reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On INT reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On FLOAT reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On ENUM reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On DOUBLE reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On CONST reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On COLON reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On CHAR reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On ATTRIBUTE reduce production specifier_qualifier_no_typedef_name -> type_qualifier
-- On ALIGNAS reduce production specifier_qualifier_no_typedef_name -> type_qualifier

State 217:
## Known stack suffix:
## struct_or_union_specifier
## LR(1) items:
type_specifier_no_typedef_name -> struct_or_union_specifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On VOID reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On UNION reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On STRUCT reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On STATIC reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On STAR reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On SIGNED reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On SHORT reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On RPAREN reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On RESTRICT reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On REGISTER reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On PACKED reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On LPAREN reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On LONG reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On LBRACK reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On INT reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On INLINE reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On FLOAT reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On EXTERN reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On ENUM reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On DOUBLE reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On CONST reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On COMMA reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On COLON reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On CHAR reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On AUTO reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> struct_or_union_specifier
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> struct_or_union_specifier

State 218:
## Known stack suffix:
## struct_or_union
## LR(1) items:
struct_or_union_specifier -> struct_or_union . attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
struct_or_union_specifier -> struct_or_union . attribute_specifier_list general_identifier [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On attribute_specifier_list shift to state 219
## Reductions:
-- On VAR_NAME reduce production attribute_specifier_list ->
-- On TYPEDEF_NAME reduce production attribute_specifier_list ->
-- On PACKED reduce production attribute_specifier_list ->
-- On LBRACE reduce production attribute_specifier_list ->
-- On ATTRIBUTE reduce production attribute_specifier_list ->
-- On ALIGNAS reduce production attribute_specifier_list ->

State 219:
## Known stack suffix:
## struct_or_union attribute_specifier_list
## LR(1) items:
attribute_specifier_list -> attribute_specifier_list . attribute_specifier [ VAR_NAME TYPEDEF_NAME PACKED LBRACE ATTRIBUTE ALIGNAS ]
struct_or_union_specifier -> struct_or_union attribute_specifier_list . option(other_identifier) LBRACE struct_declaration_list RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
struct_or_union_specifier -> struct_or_union attribute_specifier_list . general_identifier [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On PACKED shift to state 9
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On option(other_identifier) shift to state 220
-- On general_identifier shift to state 317
-- On attribute_specifier shift to state 210
## Reductions:
-- On LBRACE reduce production option(other_identifier) ->

State 220:
## Known stack suffix:
## struct_or_union attribute_specifier_list option(other_identifier)
## LR(1) items:
struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) . LBRACE struct_declaration_list RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LBRACE shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## struct_or_union attribute_specifier_list option(other_identifier) LBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE . struct_declaration_list RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On struct_declaration_list shift to state 222
## Reductions:
-- On VOLATILE reduce production struct_declaration_list ->
-- On VOID reduce production struct_declaration_list ->
-- On UNSIGNED reduce production struct_declaration_list ->
-- On UNION reduce production struct_declaration_list ->
-- On UNDERSCORE_BOOL reduce production struct_declaration_list ->
-- On TYPEDEF_NAME reduce production struct_declaration_list ->
-- On STRUCT reduce production struct_declaration_list ->
-- On SIGNED reduce production struct_declaration_list ->
-- On SHORT reduce production struct_declaration_list ->
-- On RESTRICT reduce production struct_declaration_list ->
-- On RBRACE reduce production struct_declaration_list ->
-- On PACKED reduce production struct_declaration_list ->
-- On LONG reduce production struct_declaration_list ->
-- On INT reduce production struct_declaration_list ->
-- On FLOAT reduce production struct_declaration_list ->
-- On ENUM reduce production struct_declaration_list ->
-- On DOUBLE reduce production struct_declaration_list ->
-- On CONST reduce production struct_declaration_list ->
-- On CHAR reduce production struct_declaration_list ->
-- On ATTRIBUTE reduce production struct_declaration_list ->
-- On ALIGNAS reduce production struct_declaration_list ->

State 222:
## Known stack suffix:
## struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list
## LR(1) items:
struct_declaration_list -> struct_declaration_list . struct_declaration [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT SIGNED SHORT RESTRICT RBRACE PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list . RBRACE [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RBRACE shift to state 223
-- On type_qualifier_list shift to state 121
-- On struct_declaration shift to state 224
-- On specifier_qualifier_list(struct_declaration) shift to state 225
-- On option(type_qualifier_list) shift to state 311
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VOID reduce production option(type_qualifier_list) ->
-- On UNSIGNED reduce production option(type_qualifier_list) ->
-- On UNION reduce production option(type_qualifier_list) ->
-- On UNDERSCORE_BOOL reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STRUCT reduce production option(type_qualifier_list) ->
-- On SIGNED reduce production option(type_qualifier_list) ->
-- On SHORT reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LONG reduce production option(type_qualifier_list) ->
-- On INT reduce production option(type_qualifier_list) ->
-- On FLOAT reduce production option(type_qualifier_list) ->
-- On ENUM reduce production option(type_qualifier_list) ->
-- On DOUBLE reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On CHAR reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 223:
## Known stack suffix:
## struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
## LR(1) items:
struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On VOID reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On VAR_NAME reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On UNSIGNED reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On UNION reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On UNDERSCORE_BOOL reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On TYPEDEF_NAME reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On TYPEDEF reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On STRUCT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On STATIC reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On STAR reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On SIGNED reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On SHORT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On SEMICOLON reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On RPAREN reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On RESTRICT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On REGISTER reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On PACKED reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On LPAREN reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On LONG reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On LBRACK reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On INT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On INLINE reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On FLOAT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On EXTERN reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On ENUM reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On DOUBLE reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On CONST reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On COMMA reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On COLON reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On CHAR reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On AUTO reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On ATTRIBUTE reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE
-- On ALIGNAS reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list option(other_identifier) LBRACE struct_declaration_list RBRACE

State 224:
## Known stack suffix:
## struct_declaration_list struct_declaration
## LR(1) items:
struct_declaration_list -> struct_declaration_list struct_declaration . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT SIGNED SHORT RESTRICT RBRACE PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On VOID reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On UNSIGNED reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On UNION reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On UNDERSCORE_BOOL reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On TYPEDEF_NAME reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On STRUCT reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On SIGNED reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On SHORT reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On RESTRICT reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On RBRACE reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On PACKED reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On LONG reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On INT reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On FLOAT reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On ENUM reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On DOUBLE reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On CONST reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On CHAR reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On ATTRIBUTE reduce production struct_declaration_list -> struct_declaration_list struct_declaration
-- On ALIGNAS reduce production struct_declaration_list -> struct_declaration_list struct_declaration

State 225:
## Known stack suffix:
## specifier_qualifier_list(struct_declaration)
## LR(1) items:
struct_declaration -> specifier_qualifier_list(struct_declaration) . option(struct_declarator_list) SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT SIGNED SHORT RESTRICT RBRACE PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 226
-- On struct_declarator_list shift to state 301
-- On struct_declarator shift to state 308
-- On option(struct_declarator_list) shift to state 309
-- On option(declarator) shift to state 304
-- On list(pointer1) shift to state 227
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On declarator shift to state 307
## Reductions:
-- On STAR reduce production list(pointer1) ->
-- On SEMICOLON reduce production option(struct_declarator_list) ->
-- On COLON reduce production option(declarator) ->

State 226:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_declarator -> LPAREN . declarator RPAREN [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 226
-- On list(pointer1) shift to state 227
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On declarator shift to state 283
## Reductions:
-- On STAR reduce production list(pointer1) ->

State 227:
## Known stack suffix:
## list(pointer1)
## LR(1) items:
declarator -> list(pointer1) . STAR option(type_qualifier_list) direct_declarator attribute_specifier_list [ SEMICOLON RPAREN EQ COMMA COLON ]
list(pointer1) -> list(pointer1) . STAR option(type_qualifier_list) [ STAR ]
## Transitions:
-- On STAR shift to state 228
## Reductions:

State 228:
## Known stack suffix:
## list(pointer1) STAR
## LR(1) items:
declarator -> list(pointer1) STAR . option(type_qualifier_list) direct_declarator attribute_specifier_list [ SEMICOLON RPAREN EQ COMMA COLON ]
list(pointer1) -> list(pointer1) STAR . option(type_qualifier_list) [ STAR ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On option(type_qualifier_list) shift to state 229
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VAR_NAME reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STAR reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LPAREN reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 229:
## Known stack suffix:
## list(pointer1) STAR option(type_qualifier_list)
## LR(1) items:
declarator -> list(pointer1) STAR option(type_qualifier_list) . direct_declarator attribute_specifier_list [ SEMICOLON RPAREN EQ COMMA COLON ]
list(pointer1) -> list(pointer1) STAR option(type_qualifier_list) . [ STAR ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE VAR_NAME TYPEDEF_NAME STAR RESTRICT PACKED LPAREN CONST ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On LPAREN shift to state 226
-- On CONST shift to state 154
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 186
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 231
-- On attribute_specifier shift to state 187
## Reductions:
-- On STAR reduce production list(pointer1) -> list(pointer1) STAR option(type_qualifier_list)

State 230:
## Known stack suffix:
## general_identifier
## LR(1) items:
direct_declarator -> general_identifier . [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production direct_declarator -> general_identifier
-- On RPAREN reduce production direct_declarator -> general_identifier
-- On PACKED reduce production direct_declarator -> general_identifier
-- On LPAREN reduce production direct_declarator -> general_identifier
-- On LBRACK reduce production direct_declarator -> general_identifier
-- On LBRACE reduce production direct_declarator -> general_identifier
-- On EQ reduce production direct_declarator -> general_identifier
-- On COMMA reduce production direct_declarator -> general_identifier
-- On COLON reduce production direct_declarator -> general_identifier
-- On ATTRIBUTE reduce production direct_declarator -> general_identifier
-- On ALIGNAS reduce production direct_declarator -> general_identifier

State 231:
## Known stack suffix:
## list(pointer1) STAR option(type_qualifier_list) direct_declarator
## LR(1) items:
declarator -> list(pointer1) STAR option(type_qualifier_list) direct_declarator . attribute_specifier_list [ SEMICOLON RPAREN EQ COMMA COLON ]
direct_declarator -> direct_declarator . LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK) [ SEMICOLON RPAREN PACKED LPAREN LBRACK EQ COMMA COLON ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN [ SEMICOLON RPAREN PACKED LPAREN LBRACK EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 232
-- On LBRACK shift to state 276
-- On attribute_specifier_list shift to state 300
## Reductions:
-- On SEMICOLON reduce production attribute_specifier_list ->
-- On RPAREN reduce production attribute_specifier_list ->
-- On PACKED reduce production attribute_specifier_list ->
-- On EQ reduce production attribute_specifier_list ->
-- On COMMA reduce production attribute_specifier_list ->
-- On COLON reduce production attribute_specifier_list ->
-- On ATTRIBUTE reduce production attribute_specifier_list ->
-- On ALIGNAS reduce production attribute_specifier_list ->

State 232:
## Known stack suffix:
## direct_declarator LPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN . open_context option(parameter_type_list) save_contexts_stk close_context RPAREN [ SEMICOLON RPAREN PACKED LPAREN LBRACK EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On open_context shift to state 233
## Reductions:
-- On VOLATILE reduce production open_context ->
-- On VOID reduce production open_context ->
-- On UNSIGNED reduce production open_context ->
-- On UNION reduce production open_context ->
-- On UNDERSCORE_BOOL reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On STRUCT reduce production open_context ->
-- On STATIC reduce production open_context ->
-- On SIGNED reduce production open_context ->
-- On SHORT reduce production open_context ->
-- On RPAREN reduce production open_context ->
-- On RESTRICT reduce production open_context ->
-- On REGISTER reduce production open_context ->
-- On PACKED reduce production open_context ->
-- On LONG reduce production open_context ->
-- On INT reduce production open_context ->
-- On INLINE reduce production open_context ->
-- On FLOAT reduce production open_context ->
-- On EXTERN reduce production open_context ->
-- On ENUM reduce production open_context ->
-- On DOUBLE reduce production open_context ->
-- On CONST reduce production open_context ->
-- On CHAR reduce production open_context ->
-- On AUTO reduce production open_context ->
-- On ATTRIBUTE reduce production open_context ->
-- On ALIGNAS reduce production open_context ->

State 233:
## Known stack suffix:
## direct_declarator LPAREN open_context
## LR(1) items:
direct_declarator -> direct_declarator LPAREN open_context . option(parameter_type_list) save_contexts_stk close_context RPAREN [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On TYPEDEF_NAME shift to state 234
-- On parameter_type_list shift to state 243
-- On parameter_list shift to state 244
-- On parameter_declaration shift to state 263
-- On option(parameter_type_list) shift to state 296
-- On list(declaration_specifier_no_type) shift to state 248
-- On declaration_specifiers(parameter_declaration) shift to state 260
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RPAREN reduce production option(parameter_type_list) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 234:
## Known stack suffix:
## TYPEDEF_NAME
## LR(1) items:
declaration_specifiers(parameter_declaration) -> TYPEDEF_NAME . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 235
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On RPAREN reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On LBRACK reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On COMMA reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 235:
## Known stack suffix:
## TYPEDEF_NAME list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(parameter_declaration) -> TYPEDEF_NAME list(declaration_specifier_no_type) . [ VAR_NAME TYPEDEF_NAME STAR RPAREN LPAREN LBRACK COMMA ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VAR_NAME TYPEDEF_NAME STATIC STAR RPAREN RESTRICT REGISTER PACKED LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 6
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On INLINE shift to state 236
-- On EXTERN shift to state 237
-- On CONST shift to state 154
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 239
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers(parameter_declaration) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On TYPEDEF_NAME reduce production declaration_specifiers(parameter_declaration) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On STAR reduce production declaration_specifiers(parameter_declaration) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On RPAREN reduce production declaration_specifiers(parameter_declaration) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On LPAREN reduce production declaration_specifiers(parameter_declaration) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On LBRACK reduce production declaration_specifiers(parameter_declaration) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On COMMA reduce production declaration_specifiers(parameter_declaration) -> TYPEDEF_NAME list(declaration_specifier_no_type)

State 236:
## Known stack suffix:
## INLINE
## LR(1) items:
function_specifier -> INLINE . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production function_specifier -> INLINE
-- On VOID reduce production function_specifier -> INLINE
-- On VAR_NAME reduce production function_specifier -> INLINE
-- On UNSIGNED reduce production function_specifier -> INLINE
-- On UNION reduce production function_specifier -> INLINE
-- On UNDERSCORE_BOOL reduce production function_specifier -> INLINE
-- On TYPEDEF_NAME reduce production function_specifier -> INLINE
-- On TYPEDEF reduce production function_specifier -> INLINE
-- On STRUCT reduce production function_specifier -> INLINE
-- On STATIC reduce production function_specifier -> INLINE
-- On STAR reduce production function_specifier -> INLINE
-- On SIGNED reduce production function_specifier -> INLINE
-- On SHORT reduce production function_specifier -> INLINE
-- On SEMICOLON reduce production function_specifier -> INLINE
-- On RPAREN reduce production function_specifier -> INLINE
-- On RESTRICT reduce production function_specifier -> INLINE
-- On REGISTER reduce production function_specifier -> INLINE
-- On PACKED reduce production function_specifier -> INLINE
-- On LPAREN reduce production function_specifier -> INLINE
-- On LONG reduce production function_specifier -> INLINE
-- On LBRACK reduce production function_specifier -> INLINE
-- On INT reduce production function_specifier -> INLINE
-- On INLINE reduce production function_specifier -> INLINE
-- On FLOAT reduce production function_specifier -> INLINE
-- On EXTERN reduce production function_specifier -> INLINE
-- On ENUM reduce production function_specifier -> INLINE
-- On DOUBLE reduce production function_specifier -> INLINE
-- On CONST reduce production function_specifier -> INLINE
-- On COMMA reduce production function_specifier -> INLINE
-- On CHAR reduce production function_specifier -> INLINE
-- On AUTO reduce production function_specifier -> INLINE
-- On ATTRIBUTE reduce production function_specifier -> INLINE
-- On ALIGNAS reduce production function_specifier -> INLINE

State 237:
## Known stack suffix:
## EXTERN
## LR(1) items:
storage_class_specifier_no_typedef -> EXTERN . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production storage_class_specifier_no_typedef -> EXTERN
-- On VOID reduce production storage_class_specifier_no_typedef -> EXTERN
-- On VAR_NAME reduce production storage_class_specifier_no_typedef -> EXTERN
-- On UNSIGNED reduce production storage_class_specifier_no_typedef -> EXTERN
-- On UNION reduce production storage_class_specifier_no_typedef -> EXTERN
-- On UNDERSCORE_BOOL reduce production storage_class_specifier_no_typedef -> EXTERN
-- On TYPEDEF_NAME reduce production storage_class_specifier_no_typedef -> EXTERN
-- On TYPEDEF reduce production storage_class_specifier_no_typedef -> EXTERN
-- On STRUCT reduce production storage_class_specifier_no_typedef -> EXTERN
-- On STATIC reduce production storage_class_specifier_no_typedef -> EXTERN
-- On STAR reduce production storage_class_specifier_no_typedef -> EXTERN
-- On SIGNED reduce production storage_class_specifier_no_typedef -> EXTERN
-- On SHORT reduce production storage_class_specifier_no_typedef -> EXTERN
-- On SEMICOLON reduce production storage_class_specifier_no_typedef -> EXTERN
-- On RPAREN reduce production storage_class_specifier_no_typedef -> EXTERN
-- On RESTRICT reduce production storage_class_specifier_no_typedef -> EXTERN
-- On REGISTER reduce production storage_class_specifier_no_typedef -> EXTERN
-- On PACKED reduce production storage_class_specifier_no_typedef -> EXTERN
-- On LPAREN reduce production storage_class_specifier_no_typedef -> EXTERN
-- On LONG reduce production storage_class_specifier_no_typedef -> EXTERN
-- On LBRACK reduce production storage_class_specifier_no_typedef -> EXTERN
-- On INT reduce production storage_class_specifier_no_typedef -> EXTERN
-- On INLINE reduce production storage_class_specifier_no_typedef -> EXTERN
-- On FLOAT reduce production storage_class_specifier_no_typedef -> EXTERN
-- On EXTERN reduce production storage_class_specifier_no_typedef -> EXTERN
-- On ENUM reduce production storage_class_specifier_no_typedef -> EXTERN
-- On DOUBLE reduce production storage_class_specifier_no_typedef -> EXTERN
-- On CONST reduce production storage_class_specifier_no_typedef -> EXTERN
-- On COMMA reduce production storage_class_specifier_no_typedef -> EXTERN
-- On CHAR reduce production storage_class_specifier_no_typedef -> EXTERN
-- On AUTO reduce production storage_class_specifier_no_typedef -> EXTERN
-- On ATTRIBUTE reduce production storage_class_specifier_no_typedef -> EXTERN
-- On ALIGNAS reduce production storage_class_specifier_no_typedef -> EXTERN

State 238:
## Known stack suffix:
## AUTO
## LR(1) items:
storage_class_specifier_no_typedef -> AUTO . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production storage_class_specifier_no_typedef -> AUTO
-- On VOID reduce production storage_class_specifier_no_typedef -> AUTO
-- On VAR_NAME reduce production storage_class_specifier_no_typedef -> AUTO
-- On UNSIGNED reduce production storage_class_specifier_no_typedef -> AUTO
-- On UNION reduce production storage_class_specifier_no_typedef -> AUTO
-- On UNDERSCORE_BOOL reduce production storage_class_specifier_no_typedef -> AUTO
-- On TYPEDEF_NAME reduce production storage_class_specifier_no_typedef -> AUTO
-- On TYPEDEF reduce production storage_class_specifier_no_typedef -> AUTO
-- On STRUCT reduce production storage_class_specifier_no_typedef -> AUTO
-- On STATIC reduce production storage_class_specifier_no_typedef -> AUTO
-- On STAR reduce production storage_class_specifier_no_typedef -> AUTO
-- On SIGNED reduce production storage_class_specifier_no_typedef -> AUTO
-- On SHORT reduce production storage_class_specifier_no_typedef -> AUTO
-- On SEMICOLON reduce production storage_class_specifier_no_typedef -> AUTO
-- On RPAREN reduce production storage_class_specifier_no_typedef -> AUTO
-- On RESTRICT reduce production storage_class_specifier_no_typedef -> AUTO
-- On REGISTER reduce production storage_class_specifier_no_typedef -> AUTO
-- On PACKED reduce production storage_class_specifier_no_typedef -> AUTO
-- On LPAREN reduce production storage_class_specifier_no_typedef -> AUTO
-- On LONG reduce production storage_class_specifier_no_typedef -> AUTO
-- On LBRACK reduce production storage_class_specifier_no_typedef -> AUTO
-- On INT reduce production storage_class_specifier_no_typedef -> AUTO
-- On INLINE reduce production storage_class_specifier_no_typedef -> AUTO
-- On FLOAT reduce production storage_class_specifier_no_typedef -> AUTO
-- On EXTERN reduce production storage_class_specifier_no_typedef -> AUTO
-- On ENUM reduce production storage_class_specifier_no_typedef -> AUTO
-- On DOUBLE reduce production storage_class_specifier_no_typedef -> AUTO
-- On CONST reduce production storage_class_specifier_no_typedef -> AUTO
-- On COMMA reduce production storage_class_specifier_no_typedef -> AUTO
-- On CHAR reduce production storage_class_specifier_no_typedef -> AUTO
-- On AUTO reduce production storage_class_specifier_no_typedef -> AUTO
-- On ATTRIBUTE reduce production storage_class_specifier_no_typedef -> AUTO
-- On ALIGNAS reduce production storage_class_specifier_no_typedef -> AUTO

State 239:
## Known stack suffix:
## type_qualifier
## LR(1) items:
declaration_specifier_no_type -> type_qualifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration_specifier_no_type -> type_qualifier
-- On VOID reduce production declaration_specifier_no_type -> type_qualifier
-- On VAR_NAME reduce production declaration_specifier_no_type -> type_qualifier
-- On UNSIGNED reduce production declaration_specifier_no_type -> type_qualifier
-- On UNION reduce production declaration_specifier_no_type -> type_qualifier
-- On UNDERSCORE_BOOL reduce production declaration_specifier_no_type -> type_qualifier
-- On TYPEDEF_NAME reduce production declaration_specifier_no_type -> type_qualifier
-- On TYPEDEF reduce production declaration_specifier_no_type -> type_qualifier
-- On STRUCT reduce production declaration_specifier_no_type -> type_qualifier
-- On STATIC reduce production declaration_specifier_no_type -> type_qualifier
-- On STAR reduce production declaration_specifier_no_type -> type_qualifier
-- On SIGNED reduce production declaration_specifier_no_type -> type_qualifier
-- On SHORT reduce production declaration_specifier_no_type -> type_qualifier
-- On SEMICOLON reduce production declaration_specifier_no_type -> type_qualifier
-- On RPAREN reduce production declaration_specifier_no_type -> type_qualifier
-- On RESTRICT reduce production declaration_specifier_no_type -> type_qualifier
-- On REGISTER reduce production declaration_specifier_no_type -> type_qualifier
-- On PACKED reduce production declaration_specifier_no_type -> type_qualifier
-- On LPAREN reduce production declaration_specifier_no_type -> type_qualifier
-- On LONG reduce production declaration_specifier_no_type -> type_qualifier
-- On LBRACK reduce production declaration_specifier_no_type -> type_qualifier
-- On INT reduce production declaration_specifier_no_type -> type_qualifier
-- On INLINE reduce production declaration_specifier_no_type -> type_qualifier
-- On FLOAT reduce production declaration_specifier_no_type -> type_qualifier
-- On EXTERN reduce production declaration_specifier_no_type -> type_qualifier
-- On ENUM reduce production declaration_specifier_no_type -> type_qualifier
-- On DOUBLE reduce production declaration_specifier_no_type -> type_qualifier
-- On CONST reduce production declaration_specifier_no_type -> type_qualifier
-- On COMMA reduce production declaration_specifier_no_type -> type_qualifier
-- On CHAR reduce production declaration_specifier_no_type -> type_qualifier
-- On AUTO reduce production declaration_specifier_no_type -> type_qualifier
-- On ATTRIBUTE reduce production declaration_specifier_no_type -> type_qualifier
-- On ALIGNAS reduce production declaration_specifier_no_type -> type_qualifier

State 240:
## Known stack suffix:
## storage_class_specifier_no_typedef
## LR(1) items:
declaration_specifier_no_type -> storage_class_specifier_no_typedef . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On VOID reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On VAR_NAME reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On UNSIGNED reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On UNION reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On UNDERSCORE_BOOL reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On TYPEDEF_NAME reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On TYPEDEF reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On STRUCT reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On STATIC reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On STAR reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On SIGNED reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On SHORT reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On SEMICOLON reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On RPAREN reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On RESTRICT reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On REGISTER reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On PACKED reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On LPAREN reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On LONG reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On LBRACK reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On INT reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On INLINE reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On FLOAT reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On EXTERN reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On ENUM reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On DOUBLE reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On CONST reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On COMMA reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On CHAR reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On AUTO reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On ATTRIBUTE reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef
-- On ALIGNAS reduce production declaration_specifier_no_type -> storage_class_specifier_no_typedef

State 241:
## Known stack suffix:
## function_specifier
## LR(1) items:
declaration_specifier_no_type -> function_specifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration_specifier_no_type -> function_specifier
-- On VOID reduce production declaration_specifier_no_type -> function_specifier
-- On VAR_NAME reduce production declaration_specifier_no_type -> function_specifier
-- On UNSIGNED reduce production declaration_specifier_no_type -> function_specifier
-- On UNION reduce production declaration_specifier_no_type -> function_specifier
-- On UNDERSCORE_BOOL reduce production declaration_specifier_no_type -> function_specifier
-- On TYPEDEF_NAME reduce production declaration_specifier_no_type -> function_specifier
-- On TYPEDEF reduce production declaration_specifier_no_type -> function_specifier
-- On STRUCT reduce production declaration_specifier_no_type -> function_specifier
-- On STATIC reduce production declaration_specifier_no_type -> function_specifier
-- On STAR reduce production declaration_specifier_no_type -> function_specifier
-- On SIGNED reduce production declaration_specifier_no_type -> function_specifier
-- On SHORT reduce production declaration_specifier_no_type -> function_specifier
-- On SEMICOLON reduce production declaration_specifier_no_type -> function_specifier
-- On RPAREN reduce production declaration_specifier_no_type -> function_specifier
-- On RESTRICT reduce production declaration_specifier_no_type -> function_specifier
-- On REGISTER reduce production declaration_specifier_no_type -> function_specifier
-- On PACKED reduce production declaration_specifier_no_type -> function_specifier
-- On LPAREN reduce production declaration_specifier_no_type -> function_specifier
-- On LONG reduce production declaration_specifier_no_type -> function_specifier
-- On LBRACK reduce production declaration_specifier_no_type -> function_specifier
-- On INT reduce production declaration_specifier_no_type -> function_specifier
-- On INLINE reduce production declaration_specifier_no_type -> function_specifier
-- On FLOAT reduce production declaration_specifier_no_type -> function_specifier
-- On EXTERN reduce production declaration_specifier_no_type -> function_specifier
-- On ENUM reduce production declaration_specifier_no_type -> function_specifier
-- On DOUBLE reduce production declaration_specifier_no_type -> function_specifier
-- On CONST reduce production declaration_specifier_no_type -> function_specifier
-- On COMMA reduce production declaration_specifier_no_type -> function_specifier
-- On CHAR reduce production declaration_specifier_no_type -> function_specifier
-- On AUTO reduce production declaration_specifier_no_type -> function_specifier
-- On ATTRIBUTE reduce production declaration_specifier_no_type -> function_specifier
-- On ALIGNAS reduce production declaration_specifier_no_type -> function_specifier

State 242:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type
## LR(1) items:
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On VOID reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On VAR_NAME reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNSIGNED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNION reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On TYPEDEF reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On STRUCT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On STATIC reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On STAR reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On SIGNED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On SHORT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On SEMICOLON reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On RPAREN reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On RESTRICT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On REGISTER reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On PACKED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On LPAREN reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On LONG reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On LBRACK reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On INT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On INLINE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On FLOAT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On EXTERN reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ENUM reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On DOUBLE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On CONST reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On COMMA reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On CHAR reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On AUTO reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ALIGNAS reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type

State 243:
## Known stack suffix:
## parameter_type_list
## LR(1) items:
option(parameter_type_list) -> parameter_type_list . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production option(parameter_type_list) -> parameter_type_list

State 244:
## Known stack suffix:
## parameter_list
## LR(1) items:
parameter_list -> parameter_list . COMMA parameter_declaration [ RPAREN COMMA ]
parameter_type_list -> parameter_list . [ RPAREN ]
parameter_type_list -> parameter_list . COMMA ELLIPSIS [ RPAREN ]
## Transitions:
-- On COMMA shift to state 245
## Reductions:
-- On RPAREN reduce production parameter_type_list -> parameter_list

State 245:
## Known stack suffix:
## parameter_list COMMA
## LR(1) items:
parameter_list -> parameter_list COMMA . parameter_declaration [ RPAREN COMMA ]
parameter_type_list -> parameter_list COMMA . ELLIPSIS [ RPAREN ]
## Transitions:
-- On TYPEDEF_NAME shift to state 234
-- On ELLIPSIS shift to state 246
-- On parameter_declaration shift to state 247
-- On list(declaration_specifier_no_type) shift to state 248
-- On declaration_specifiers(parameter_declaration) shift to state 260
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 246:
## Known stack suffix:
## parameter_list COMMA ELLIPSIS
## LR(1) items:
parameter_type_list -> parameter_list COMMA ELLIPSIS . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production parameter_type_list -> parameter_list COMMA ELLIPSIS

State 247:
## Known stack suffix:
## parameter_list COMMA parameter_declaration
## LR(1) items:
parameter_list -> parameter_list COMMA parameter_declaration . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production parameter_list -> parameter_list COMMA parameter_declaration
-- On COMMA reduce production parameter_list -> parameter_list COMMA parameter_declaration

State 248:
## Known stack suffix:
## list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) . declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR RPAREN LPAREN LBRACK COMMA ]
declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) . type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR RPAREN LPAREN LBRACK COMMA ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On STRUCT shift to state 188
-- On STATIC shift to state 6
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On INLINE shift to state 236
-- On FLOAT shift to state 193
-- On EXTERN shift to state 237
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 249
-- On type_qualifier shift to state 239
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On enum_specifier shift to state 255
-- On declaration_specifier_no_type shift to state 257
-- On attribute_specifier shift to state 187
## Reductions:

State 249:
## Known stack suffix:
## list(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name . list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On list(declaration_specifier_no_typedef_name) shift to state 250
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_typedef_name) ->
-- On VOID reduce production list(declaration_specifier_no_typedef_name) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNION reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_typedef_name) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On STRUCT reduce production list(declaration_specifier_no_typedef_name) ->
-- On STATIC reduce production list(declaration_specifier_no_typedef_name) ->
-- On STAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On SIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On SHORT reduce production list(declaration_specifier_no_typedef_name) ->
-- On RPAREN reduce production list(declaration_specifier_no_typedef_name) ->
-- On RESTRICT reduce production list(declaration_specifier_no_typedef_name) ->
-- On REGISTER reduce production list(declaration_specifier_no_typedef_name) ->
-- On PACKED reduce production list(declaration_specifier_no_typedef_name) ->
-- On LPAREN reduce production list(declaration_specifier_no_typedef_name) ->
-- On LONG reduce production list(declaration_specifier_no_typedef_name) ->
-- On LBRACK reduce production list(declaration_specifier_no_typedef_name) ->
-- On INT reduce production list(declaration_specifier_no_typedef_name) ->
-- On INLINE reduce production list(declaration_specifier_no_typedef_name) ->
-- On FLOAT reduce production list(declaration_specifier_no_typedef_name) ->
-- On EXTERN reduce production list(declaration_specifier_no_typedef_name) ->
-- On ENUM reduce production list(declaration_specifier_no_typedef_name) ->
-- On DOUBLE reduce production list(declaration_specifier_no_typedef_name) ->
-- On CONST reduce production list(declaration_specifier_no_typedef_name) ->
-- On COMMA reduce production list(declaration_specifier_no_typedef_name) ->
-- On CHAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On AUTO reduce production list(declaration_specifier_no_typedef_name) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_typedef_name) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_typedef_name) ->

State 250:
## Known stack suffix:
## list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
## LR(1) items:
declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) . [ VAR_NAME TYPEDEF_NAME STAR RPAREN LPAREN LBRACK COMMA ]
list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On STRUCT shift to state 188
-- On STATIC shift to state 6
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On INLINE shift to state 236
-- On FLOAT shift to state 193
-- On EXTERN shift to state 237
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 251
-- On type_qualifier shift to state 252
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On storage_class_specifier_no_typedef shift to state 253
-- On function_specifier shift to state 254
-- On enum_specifier shift to state 255
-- On declaration_specifier_no_typedef_name shift to state 256
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On TYPEDEF_NAME reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On STAR reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On RPAREN reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On LPAREN reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On LBRACK reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On COMMA reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)

State 251:
## Known stack suffix:
## type_specifier_no_typedef_name
## LR(1) items:
declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On VOID reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On VAR_NAME reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On UNSIGNED reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On UNION reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On UNDERSCORE_BOOL reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On TYPEDEF_NAME reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On TYPEDEF reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On STRUCT reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On STATIC reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On STAR reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On SIGNED reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On SHORT reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On SEMICOLON reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On RPAREN reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On RESTRICT reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On REGISTER reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On PACKED reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On LPAREN reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On LONG reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On LBRACK reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On INT reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On INLINE reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On FLOAT reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On EXTERN reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On ENUM reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On DOUBLE reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On CONST reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On COMMA reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On CHAR reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On AUTO reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On ATTRIBUTE reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name
-- On ALIGNAS reduce production declaration_specifier_no_typedef_name -> type_specifier_no_typedef_name

State 252:
## Known stack suffix:
## type_qualifier
## LR(1) items:
declaration_specifier_no_typedef_name -> type_qualifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On VOID reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On VAR_NAME reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On UNSIGNED reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On UNION reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On UNDERSCORE_BOOL reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On TYPEDEF_NAME reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On TYPEDEF reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On STRUCT reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On STATIC reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On STAR reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On SIGNED reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On SHORT reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On SEMICOLON reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On RPAREN reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On RESTRICT reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On REGISTER reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On PACKED reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On LPAREN reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On LONG reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On LBRACK reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On INT reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On INLINE reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On FLOAT reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On EXTERN reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On ENUM reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On DOUBLE reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On CONST reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On COMMA reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On CHAR reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On AUTO reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On ATTRIBUTE reduce production declaration_specifier_no_typedef_name -> type_qualifier
-- On ALIGNAS reduce production declaration_specifier_no_typedef_name -> type_qualifier

State 253:
## Known stack suffix:
## storage_class_specifier_no_typedef
## LR(1) items:
declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On VOID reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On VAR_NAME reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On UNSIGNED reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On UNION reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On UNDERSCORE_BOOL reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On TYPEDEF_NAME reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On TYPEDEF reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On STRUCT reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On STATIC reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On STAR reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On SIGNED reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On SHORT reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On SEMICOLON reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On RPAREN reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On RESTRICT reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On REGISTER reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On PACKED reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On LPAREN reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On LONG reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On LBRACK reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On INT reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On INLINE reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On FLOAT reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On EXTERN reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On ENUM reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On DOUBLE reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On CONST reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On COMMA reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On CHAR reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On AUTO reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On ATTRIBUTE reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef
-- On ALIGNAS reduce production declaration_specifier_no_typedef_name -> storage_class_specifier_no_typedef

State 254:
## Known stack suffix:
## function_specifier
## LR(1) items:
declaration_specifier_no_typedef_name -> function_specifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On VOID reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On VAR_NAME reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On UNSIGNED reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On UNION reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On UNDERSCORE_BOOL reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On TYPEDEF_NAME reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On TYPEDEF reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On STRUCT reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On STATIC reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On STAR reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On SIGNED reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On SHORT reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On SEMICOLON reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On RPAREN reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On RESTRICT reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On REGISTER reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On PACKED reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On LPAREN reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On LONG reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On LBRACK reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On INT reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On INLINE reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On FLOAT reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On EXTERN reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On ENUM reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On DOUBLE reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On CONST reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On COMMA reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On CHAR reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On AUTO reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On ATTRIBUTE reduce production declaration_specifier_no_typedef_name -> function_specifier
-- On ALIGNAS reduce production declaration_specifier_no_typedef_name -> function_specifier

State 255:
## Known stack suffix:
## enum_specifier
## LR(1) items:
type_specifier_no_typedef_name -> enum_specifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production type_specifier_no_typedef_name -> enum_specifier
-- On VOID reduce production type_specifier_no_typedef_name -> enum_specifier
-- On VAR_NAME reduce production type_specifier_no_typedef_name -> enum_specifier
-- On UNSIGNED reduce production type_specifier_no_typedef_name -> enum_specifier
-- On UNION reduce production type_specifier_no_typedef_name -> enum_specifier
-- On UNDERSCORE_BOOL reduce production type_specifier_no_typedef_name -> enum_specifier
-- On TYPEDEF_NAME reduce production type_specifier_no_typedef_name -> enum_specifier
-- On TYPEDEF reduce production type_specifier_no_typedef_name -> enum_specifier
-- On STRUCT reduce production type_specifier_no_typedef_name -> enum_specifier
-- On STATIC reduce production type_specifier_no_typedef_name -> enum_specifier
-- On STAR reduce production type_specifier_no_typedef_name -> enum_specifier
-- On SIGNED reduce production type_specifier_no_typedef_name -> enum_specifier
-- On SHORT reduce production type_specifier_no_typedef_name -> enum_specifier
-- On SEMICOLON reduce production type_specifier_no_typedef_name -> enum_specifier
-- On RPAREN reduce production type_specifier_no_typedef_name -> enum_specifier
-- On RESTRICT reduce production type_specifier_no_typedef_name -> enum_specifier
-- On REGISTER reduce production type_specifier_no_typedef_name -> enum_specifier
-- On PACKED reduce production type_specifier_no_typedef_name -> enum_specifier
-- On LPAREN reduce production type_specifier_no_typedef_name -> enum_specifier
-- On LONG reduce production type_specifier_no_typedef_name -> enum_specifier
-- On LBRACK reduce production type_specifier_no_typedef_name -> enum_specifier
-- On INT reduce production type_specifier_no_typedef_name -> enum_specifier
-- On INLINE reduce production type_specifier_no_typedef_name -> enum_specifier
-- On FLOAT reduce production type_specifier_no_typedef_name -> enum_specifier
-- On EXTERN reduce production type_specifier_no_typedef_name -> enum_specifier
-- On ENUM reduce production type_specifier_no_typedef_name -> enum_specifier
-- On DOUBLE reduce production type_specifier_no_typedef_name -> enum_specifier
-- On CONST reduce production type_specifier_no_typedef_name -> enum_specifier
-- On COMMA reduce production type_specifier_no_typedef_name -> enum_specifier
-- On COLON reduce production type_specifier_no_typedef_name -> enum_specifier
-- On CHAR reduce production type_specifier_no_typedef_name -> enum_specifier
-- On AUTO reduce production type_specifier_no_typedef_name -> enum_specifier
-- On ATTRIBUTE reduce production type_specifier_no_typedef_name -> enum_specifier
-- On ALIGNAS reduce production type_specifier_no_typedef_name -> enum_specifier

State 256:
## Known stack suffix:
## list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
## LR(1) items:
list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On VOID reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On VAR_NAME reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On UNSIGNED reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On UNION reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On TYPEDEF reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On STRUCT reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On STATIC reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On STAR reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On SIGNED reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On SHORT reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On SEMICOLON reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On RPAREN reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On RESTRICT reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On REGISTER reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On PACKED reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On LPAREN reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On LONG reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On LBRACK reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On INT reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On INLINE reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On FLOAT reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On EXTERN reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On ENUM reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On DOUBLE reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On CONST reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On COMMA reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On CHAR reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On AUTO reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On ATTRIBUTE reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name
-- On ALIGNAS reduce production list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) declaration_specifier_no_typedef_name

State 257:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type
## LR(1) items:
declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type . TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR RPAREN LPAREN LBRACK COMMA ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On TYPEDEF_NAME shift to state 258
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On VOID reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNSIGNED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNION reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On STRUCT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On STATIC reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On SIGNED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On SHORT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On RESTRICT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On REGISTER reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On PACKED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On LONG reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On INT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On INLINE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On FLOAT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On EXTERN reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ENUM reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On DOUBLE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On CONST reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On CHAR reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On AUTO reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ALIGNAS reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type

State 258:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME
## LR(1) items:
declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 259
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On RPAREN reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On LBRACK reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On COMMA reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 259:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) . [ VAR_NAME TYPEDEF_NAME STAR RPAREN LPAREN LBRACK COMMA ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VAR_NAME TYPEDEF_NAME STATIC STAR RPAREN RESTRICT REGISTER PACKED LPAREN LBRACK INLINE EXTERN CONST COMMA AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 6
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On INLINE shift to state 236
-- On EXTERN shift to state 237
-- On CONST shift to state 154
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 239
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On TYPEDEF_NAME reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On STAR reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On RPAREN reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On LPAREN reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On LBRACK reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On COMMA reduce production declaration_specifiers(parameter_declaration) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)

State 260:
## Known stack suffix:
## declaration_specifiers(parameter_declaration)
## LR(1) items:
parameter_declaration -> declaration_specifiers(parameter_declaration) . declare_varname(fst(declarator)) [ RPAREN COMMA ]
parameter_declaration -> declaration_specifiers(parameter_declaration) . option(abstract_declarator(parameter_declaration)) [ RPAREN COMMA ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 261
-- On option(direct_abstract_declarator) shift to state 150
-- On option(abstract_declarator(parameter_declaration)) shift to state 287
-- On list(pointer1) shift to state 288
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On direct_abstract_declarator shift to state 292
-- On declare_varname(fst(declarator)) shift to state 293
-- On declarator shift to state 294
-- On abstract_declarator(parameter_declaration) shift to state 295
## Reductions:
-- On STAR reduce production list(pointer1) ->
-- On RPAREN reduce production option(abstract_declarator(parameter_declaration)) ->
-- On LBRACK reduce production option(direct_abstract_declarator) ->
-- On COMMA reduce production option(abstract_declarator(parameter_declaration)) ->

State 261:
## Known stack suffix:
## LPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN . abstract_declarator(type_name) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_abstract_declarator -> LPAREN . in_context(option(parameter_type_list)) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
direct_declarator -> LPAREN . declarator RPAREN [ RPAREN PACKED LPAREN LBRACK COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On LPAREN shift to state 261
-- On option(direct_abstract_declarator) shift to state 150
-- On open_context shift to state 262
-- On list(pointer1) shift to state 266
-- On in_context(option(parameter_type_list)) shift to state 273
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On direct_abstract_declarator shift to state 282
-- On declarator shift to state 283
-- On abstract_declarator(type_name) shift to state 285
## Reductions:
-- On VOLATILE reduce production open_context ->
-- On VOID reduce production open_context ->
-- On UNSIGNED reduce production open_context ->
-- On UNION reduce production open_context ->
-- On UNDERSCORE_BOOL reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On STRUCT reduce production open_context ->
-- On STATIC reduce production open_context ->
-- On STAR reduce production list(pointer1) ->
-- On SIGNED reduce production open_context ->
-- On SHORT reduce production open_context ->
-- On RPAREN reduce production open_context ->
-- On RESTRICT reduce production open_context ->
-- On REGISTER reduce production open_context ->
-- On PACKED reduce production open_context ->
-- On LONG reduce production open_context ->
-- On LBRACK reduce production option(direct_abstract_declarator) ->
-- On INT reduce production open_context ->
-- On INLINE reduce production open_context ->
-- On FLOAT reduce production open_context ->
-- On EXTERN reduce production open_context ->
-- On ENUM reduce production open_context ->
-- On DOUBLE reduce production open_context ->
-- On CONST reduce production open_context ->
-- On CHAR reduce production open_context ->
-- On AUTO reduce production open_context ->
-- On ATTRIBUTE reduce production open_context ->
-- On ALIGNAS reduce production open_context ->

State 262:
## Known stack suffix:
## open_context
## LR(1) items:
in_context(option(parameter_type_list)) -> open_context . option(parameter_type_list) close_context [ RPAREN ]
## Transitions:
-- On TYPEDEF_NAME shift to state 234
-- On parameter_type_list shift to state 243
-- On parameter_list shift to state 244
-- On parameter_declaration shift to state 263
-- On option(parameter_type_list) shift to state 264
-- On list(declaration_specifier_no_type) shift to state 248
-- On declaration_specifiers(parameter_declaration) shift to state 260
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RPAREN reduce production option(parameter_type_list) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 263:
## Known stack suffix:
## parameter_declaration
## LR(1) items:
parameter_list -> parameter_declaration . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production parameter_list -> parameter_declaration
-- On COMMA reduce production parameter_list -> parameter_declaration

State 264:
## Known stack suffix:
## open_context option(parameter_type_list)
## LR(1) items:
in_context(option(parameter_type_list)) -> open_context option(parameter_type_list) . close_context [ RPAREN ]
## Transitions:
-- On close_context shift to state 265
## Reductions:
-- On RPAREN reduce production close_context ->

State 265:
## Known stack suffix:
## open_context option(parameter_type_list) close_context
## LR(1) items:
in_context(option(parameter_type_list)) -> open_context option(parameter_type_list) close_context . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production in_context(option(parameter_type_list)) -> open_context option(parameter_type_list) close_context

State 266:
## Known stack suffix:
## list(pointer1)
## LR(1) items:
abstract_declarator(type_name) -> list(pointer1) . STAR option(type_qualifier_list) [ RPAREN ]
abstract_declarator(type_name) -> list(pointer1) . STAR option(type_qualifier_list) direct_abstract_declarator [ RPAREN ]
declarator -> list(pointer1) . STAR option(type_qualifier_list) direct_declarator attribute_specifier_list [ RPAREN ]
list(pointer1) -> list(pointer1) . STAR option(type_qualifier_list) [ STAR ]
## Transitions:
-- On STAR shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## list(pointer1) STAR
## LR(1) items:
abstract_declarator(type_name) -> list(pointer1) STAR . option(type_qualifier_list) [ RPAREN ]
abstract_declarator(type_name) -> list(pointer1) STAR . option(type_qualifier_list) direct_abstract_declarator [ RPAREN ]
declarator -> list(pointer1) STAR . option(type_qualifier_list) direct_declarator attribute_specifier_list [ RPAREN ]
list(pointer1) -> list(pointer1) STAR . option(type_qualifier_list) [ STAR ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On option(type_qualifier_list) shift to state 268
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VAR_NAME reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STAR reduce production option(type_qualifier_list) ->
-- On RPAREN reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LPAREN reduce production option(type_qualifier_list) ->
-- On LBRACK reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 268:
## Known stack suffix:
## list(pointer1) STAR option(type_qualifier_list)
## LR(1) items:
abstract_declarator(type_name) -> list(pointer1) STAR option(type_qualifier_list) . [ RPAREN ]
abstract_declarator(type_name) -> list(pointer1) STAR option(type_qualifier_list) . direct_abstract_declarator [ RPAREN ]
declarator -> list(pointer1) STAR option(type_qualifier_list) . direct_declarator attribute_specifier_list [ RPAREN ]
list(pointer1) -> list(pointer1) STAR option(type_qualifier_list) . [ STAR ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE VAR_NAME TYPEDEF_NAME STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On LPAREN shift to state 261
-- On CONST shift to state 154
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 186
-- On option(direct_abstract_declarator) shift to state 150
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 231
-- On direct_abstract_declarator shift to state 269
-- On attribute_specifier shift to state 187
## Reductions:
-- On STAR reduce production list(pointer1) -> list(pointer1) STAR option(type_qualifier_list)
-- On RPAREN reduce production abstract_declarator(type_name) -> list(pointer1) STAR option(type_qualifier_list)
-- On LBRACK reduce production option(direct_abstract_declarator) ->

State 269:
## Known stack suffix:
## list(pointer1) STAR option(type_qualifier_list) direct_abstract_declarator
## LR(1) items:
abstract_declarator(type_name) -> list(pointer1) STAR option(type_qualifier_list) direct_abstract_declarator . [ RPAREN ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN in_context(option(parameter_type_list)) RPAREN [ RPAREN LPAREN LBRACK ]
option(direct_abstract_declarator) -> direct_abstract_declarator . [ LBRACK ]
## Transitions:
-- On LPAREN shift to state 270
## Reductions:
-- On RPAREN reduce production abstract_declarator(type_name) -> list(pointer1) STAR option(type_qualifier_list) direct_abstract_declarator
-- On LBRACK reduce production option(direct_abstract_declarator) -> direct_abstract_declarator

State 270:
## Known stack suffix:
## direct_abstract_declarator LPAREN
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN . in_context(option(parameter_type_list)) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On open_context shift to state 262
-- On in_context(option(parameter_type_list)) shift to state 271
## Reductions:
-- On VOLATILE reduce production open_context ->
-- On VOID reduce production open_context ->
-- On UNSIGNED reduce production open_context ->
-- On UNION reduce production open_context ->
-- On UNDERSCORE_BOOL reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On STRUCT reduce production open_context ->
-- On STATIC reduce production open_context ->
-- On SIGNED reduce production open_context ->
-- On SHORT reduce production open_context ->
-- On RPAREN reduce production open_context ->
-- On RESTRICT reduce production open_context ->
-- On REGISTER reduce production open_context ->
-- On PACKED reduce production open_context ->
-- On LONG reduce production open_context ->
-- On INT reduce production open_context ->
-- On INLINE reduce production open_context ->
-- On FLOAT reduce production open_context ->
-- On EXTERN reduce production open_context ->
-- On ENUM reduce production open_context ->
-- On DOUBLE reduce production open_context ->
-- On CONST reduce production open_context ->
-- On CHAR reduce production open_context ->
-- On AUTO reduce production open_context ->
-- On ATTRIBUTE reduce production open_context ->
-- On ALIGNAS reduce production open_context ->

State 271:
## Known stack suffix:
## direct_abstract_declarator LPAREN in_context(option(parameter_type_list))
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN in_context(option(parameter_type_list)) . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RPAREN shift to state 272
## Reductions:

State 272:
## Known stack suffix:
## direct_abstract_declarator LPAREN in_context(option(parameter_type_list)) RPAREN
## LR(1) items:
direct_abstract_declarator -> direct_abstract_declarator LPAREN in_context(option(parameter_type_list)) RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production direct_abstract_declarator -> direct_abstract_declarator LPAREN in_context(option(parameter_type_list)) RPAREN
-- On LPAREN reduce production direct_abstract_declarator -> direct_abstract_declarator LPAREN in_context(option(parameter_type_list)) RPAREN
-- On LBRACK reduce production direct_abstract_declarator -> direct_abstract_declarator LPAREN in_context(option(parameter_type_list)) RPAREN
-- On COMMA reduce production direct_abstract_declarator -> direct_abstract_declarator LPAREN in_context(option(parameter_type_list)) RPAREN

State 273:
## Known stack suffix:
## LPAREN in_context(option(parameter_type_list))
## LR(1) items:
direct_abstract_declarator -> LPAREN in_context(option(parameter_type_list)) . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RPAREN shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## LPAREN in_context(option(parameter_type_list)) RPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN in_context(option(parameter_type_list)) RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production direct_abstract_declarator -> LPAREN in_context(option(parameter_type_list)) RPAREN
-- On LPAREN reduce production direct_abstract_declarator -> LPAREN in_context(option(parameter_type_list)) RPAREN
-- On LBRACK reduce production direct_abstract_declarator -> LPAREN in_context(option(parameter_type_list)) RPAREN
-- On COMMA reduce production direct_abstract_declarator -> LPAREN in_context(option(parameter_type_list)) RPAREN

State 275:
## Known stack suffix:
## direct_declarator
## LR(1) items:
declarator -> direct_declarator . attribute_specifier_list [ SEMICOLON RPAREN EQ COMMA COLON ]
direct_declarator -> direct_declarator . LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK) [ SEMICOLON RPAREN PACKED LPAREN LBRACK EQ COMMA COLON ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN [ SEMICOLON RPAREN PACKED LPAREN LBRACK EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 232
-- On LBRACK shift to state 276
-- On attribute_specifier_list shift to state 281
## Reductions:
-- On SEMICOLON reduce production attribute_specifier_list ->
-- On RPAREN reduce production attribute_specifier_list ->
-- On PACKED reduce production attribute_specifier_list ->
-- On EQ reduce production attribute_specifier_list ->
-- On COMMA reduce production attribute_specifier_list ->
-- On COLON reduce production attribute_specifier_list ->
-- On ATTRIBUTE reduce production attribute_specifier_list ->
-- On ALIGNAS reduce production attribute_specifier_list ->

State 276:
## Known stack suffix:
## direct_declarator LBRACK
## LR(1) items:
direct_declarator -> direct_declarator LBRACK . option(type_qualifier_list) optional(assignment_expression,RBRACK) [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On option(type_qualifier_list) shift to state 277
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VAR_NAME reduce production option(type_qualifier_list) ->
-- On TILDE reduce production option(type_qualifier_list) ->
-- On STRING_LITERAL reduce production option(type_qualifier_list) ->
-- On STAR reduce production option(type_qualifier_list) ->
-- On SIZEOF reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On RBRACK reduce production option(type_qualifier_list) ->
-- On PLUS reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On MINUS reduce production option(type_qualifier_list) ->
-- On LPAREN reduce production option(type_qualifier_list) ->
-- On INC reduce production option(type_qualifier_list) ->
-- On DEC reduce production option(type_qualifier_list) ->
-- On CONSTANT reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On BUILTIN_VA_ARG reduce production option(type_qualifier_list) ->
-- On BANG reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On AND reduce production option(type_qualifier_list) ->
-- On ALIGNOF reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 277:
## Known stack suffix:
## direct_declarator LBRACK option(type_qualifier_list)
## LR(1) items:
direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) . optional(assignment_expression,RBRACK) [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE VAR_NAME TILDE STRING_LITERAL STAR SIZEOF RESTRICT RBRACK PLUS PACKED MINUS LPAREN INC DEC CONSTANT CONST BUILTIN_VA_ARG BANG ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RESTRICT shift to state 7
-- On RBRACK shift to state 153
-- On PLUS shift to state 16
-- On PACKED shift to state 9
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On CONST shift to state 154
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On ATTRIBUTE shift to state 155
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On ALIGNAS shift to state 175
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On type_qualifier shift to state 186
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(assignment_expression,RBRACK) shift to state 278
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On attribute_specifier shift to state 187
-- On assignment_expression shift to state 279
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 278:
## Known stack suffix:
## direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
## LR(1) items:
direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK) . [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On RPAREN reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On PACKED reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On LPAREN reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On LBRACK reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On LBRACE reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On EQ reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On COMMA reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On COLON reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On ATTRIBUTE reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On ALIGNAS reduce production direct_declarator -> direct_declarator LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)

State 279:
## Known stack suffix:
## assignment_expression
## LR(1) items:
optional(assignment_expression,RBRACK) -> assignment_expression . RBRACK [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RBRACK shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## assignment_expression RBRACK
## LR(1) items:
optional(assignment_expression,RBRACK) -> assignment_expression RBRACK . [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On RPAREN reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On PACKED reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On LPAREN reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On LBRACK reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On LBRACE reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On EQ reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On COMMA reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On COLON reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On ATTRIBUTE reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK
-- On ALIGNAS reduce production optional(assignment_expression,RBRACK) -> assignment_expression RBRACK

State 281:
## Known stack suffix:
## direct_declarator attribute_specifier_list
## LR(1) items:
attribute_specifier_list -> attribute_specifier_list . attribute_specifier [ SEMICOLON RPAREN PACKED EQ COMMA COLON ATTRIBUTE ALIGNAS ]
declarator -> direct_declarator attribute_specifier_list . [ SEMICOLON RPAREN EQ COMMA COLON ]
## Transitions:
-- On PACKED shift to state 9
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On attribute_specifier shift to state 210
## Reductions:
-- On SEMICOLON reduce production declarator -> direct_declarator attribute_specifier_list
-- On RPAREN reduce production declarator -> direct_declarator attribute_specifier_list
-- On EQ reduce production declarator -> direct_declarator attribute_specifier_list
-- On COMMA reduce production declarator -> direct_declarator attribute_specifier_list
-- On COLON reduce production declarator -> direct_declarator attribute_specifier_list

State 282:
## Known stack suffix:
## direct_abstract_declarator
## LR(1) items:
abstract_declarator(type_name) -> direct_abstract_declarator . [ RPAREN ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN in_context(option(parameter_type_list)) RPAREN [ RPAREN LPAREN LBRACK ]
option(direct_abstract_declarator) -> direct_abstract_declarator . [ LBRACK ]
## Transitions:
-- On LPAREN shift to state 270
## Reductions:
-- On RPAREN reduce production abstract_declarator(type_name) -> direct_abstract_declarator
-- On LBRACK reduce production option(direct_abstract_declarator) -> direct_abstract_declarator

State 283:
## Known stack suffix:
## LPAREN declarator
## LR(1) items:
direct_declarator -> LPAREN declarator . RPAREN [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## LPAREN declarator RPAREN
## LR(1) items:
direct_declarator -> LPAREN declarator RPAREN . [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production direct_declarator -> LPAREN declarator RPAREN
-- On RPAREN reduce production direct_declarator -> LPAREN declarator RPAREN
-- On PACKED reduce production direct_declarator -> LPAREN declarator RPAREN
-- On LPAREN reduce production direct_declarator -> LPAREN declarator RPAREN
-- On LBRACK reduce production direct_declarator -> LPAREN declarator RPAREN
-- On LBRACE reduce production direct_declarator -> LPAREN declarator RPAREN
-- On EQ reduce production direct_declarator -> LPAREN declarator RPAREN
-- On COMMA reduce production direct_declarator -> LPAREN declarator RPAREN
-- On COLON reduce production direct_declarator -> LPAREN declarator RPAREN
-- On ATTRIBUTE reduce production direct_declarator -> LPAREN declarator RPAREN
-- On ALIGNAS reduce production direct_declarator -> LPAREN declarator RPAREN

State 285:
## Known stack suffix:
## LPAREN abstract_declarator(type_name)
## LR(1) items:
direct_abstract_declarator -> LPAREN abstract_declarator(type_name) . RPAREN [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
-- On RPAREN shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## LPAREN abstract_declarator(type_name) RPAREN
## LR(1) items:
direct_abstract_declarator -> LPAREN abstract_declarator(type_name) RPAREN . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production direct_abstract_declarator -> LPAREN abstract_declarator(type_name) RPAREN
-- On LPAREN reduce production direct_abstract_declarator -> LPAREN abstract_declarator(type_name) RPAREN
-- On LBRACK reduce production direct_abstract_declarator -> LPAREN abstract_declarator(type_name) RPAREN
-- On COMMA reduce production direct_abstract_declarator -> LPAREN abstract_declarator(type_name) RPAREN

State 287:
## Known stack suffix:
## declaration_specifiers(parameter_declaration) option(abstract_declarator(parameter_declaration))
## LR(1) items:
parameter_declaration -> declaration_specifiers(parameter_declaration) option(abstract_declarator(parameter_declaration)) . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production parameter_declaration -> declaration_specifiers(parameter_declaration) option(abstract_declarator(parameter_declaration))
-- On COMMA reduce production parameter_declaration -> declaration_specifiers(parameter_declaration) option(abstract_declarator(parameter_declaration))

State 288:
## Known stack suffix:
## list(pointer1)
## LR(1) items:
abstract_declarator(parameter_declaration) -> list(pointer1) . STAR option(type_qualifier_list) [ RPAREN COMMA ]
abstract_declarator(parameter_declaration) -> list(pointer1) . STAR option(type_qualifier_list) direct_abstract_declarator [ RPAREN COMMA ]
declarator -> list(pointer1) . STAR option(type_qualifier_list) direct_declarator attribute_specifier_list [ RPAREN COMMA ]
list(pointer1) -> list(pointer1) . STAR option(type_qualifier_list) [ STAR ]
## Transitions:
-- On STAR shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## list(pointer1) STAR
## LR(1) items:
abstract_declarator(parameter_declaration) -> list(pointer1) STAR . option(type_qualifier_list) [ RPAREN COMMA ]
abstract_declarator(parameter_declaration) -> list(pointer1) STAR . option(type_qualifier_list) direct_abstract_declarator [ RPAREN COMMA ]
declarator -> list(pointer1) STAR . option(type_qualifier_list) direct_declarator attribute_specifier_list [ RPAREN COMMA ]
list(pointer1) -> list(pointer1) STAR . option(type_qualifier_list) [ STAR ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On option(type_qualifier_list) shift to state 290
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VAR_NAME reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STAR reduce production option(type_qualifier_list) ->
-- On RPAREN reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LPAREN reduce production option(type_qualifier_list) ->
-- On LBRACK reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On COMMA reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 290:
## Known stack suffix:
## list(pointer1) STAR option(type_qualifier_list)
## LR(1) items:
abstract_declarator(parameter_declaration) -> list(pointer1) STAR option(type_qualifier_list) . [ RPAREN COMMA ]
abstract_declarator(parameter_declaration) -> list(pointer1) STAR option(type_qualifier_list) . direct_abstract_declarator [ RPAREN COMMA ]
declarator -> list(pointer1) STAR option(type_qualifier_list) . direct_declarator attribute_specifier_list [ RPAREN COMMA ]
list(pointer1) -> list(pointer1) STAR option(type_qualifier_list) . [ STAR ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE VAR_NAME TYPEDEF_NAME STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST COMMA ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On LPAREN shift to state 261
-- On CONST shift to state 154
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 186
-- On option(direct_abstract_declarator) shift to state 150
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 231
-- On direct_abstract_declarator shift to state 291
-- On attribute_specifier shift to state 187
## Reductions:
-- On STAR reduce production list(pointer1) -> list(pointer1) STAR option(type_qualifier_list)
-- On RPAREN reduce production abstract_declarator(parameter_declaration) -> list(pointer1) STAR option(type_qualifier_list)
-- On LBRACK reduce production option(direct_abstract_declarator) ->
-- On COMMA reduce production abstract_declarator(parameter_declaration) -> list(pointer1) STAR option(type_qualifier_list)

State 291:
## Known stack suffix:
## list(pointer1) STAR option(type_qualifier_list) direct_abstract_declarator
## LR(1) items:
abstract_declarator(parameter_declaration) -> list(pointer1) STAR option(type_qualifier_list) direct_abstract_declarator . [ RPAREN COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN in_context(option(parameter_type_list)) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
option(direct_abstract_declarator) -> direct_abstract_declarator . [ LBRACK ]
## Transitions:
-- On LPAREN shift to state 270
## Reductions:
-- On RPAREN reduce production abstract_declarator(parameter_declaration) -> list(pointer1) STAR option(type_qualifier_list) direct_abstract_declarator
-- On LBRACK reduce production option(direct_abstract_declarator) -> direct_abstract_declarator
-- On COMMA reduce production abstract_declarator(parameter_declaration) -> list(pointer1) STAR option(type_qualifier_list) direct_abstract_declarator

State 292:
## Known stack suffix:
## direct_abstract_declarator
## LR(1) items:
abstract_declarator(parameter_declaration) -> direct_abstract_declarator . [ RPAREN COMMA ]
direct_abstract_declarator -> direct_abstract_declarator . LPAREN in_context(option(parameter_type_list)) RPAREN [ RPAREN LPAREN LBRACK COMMA ]
option(direct_abstract_declarator) -> direct_abstract_declarator . [ LBRACK ]
## Transitions:
-- On LPAREN shift to state 270
## Reductions:
-- On RPAREN reduce production abstract_declarator(parameter_declaration) -> direct_abstract_declarator
-- On LBRACK reduce production option(direct_abstract_declarator) -> direct_abstract_declarator
-- On COMMA reduce production abstract_declarator(parameter_declaration) -> direct_abstract_declarator

State 293:
## Known stack suffix:
## declaration_specifiers(parameter_declaration) declare_varname(fst(declarator))
## LR(1) items:
parameter_declaration -> declaration_specifiers(parameter_declaration) declare_varname(fst(declarator)) . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production parameter_declaration -> declaration_specifiers(parameter_declaration) declare_varname(fst(declarator))
-- On COMMA reduce production parameter_declaration -> declaration_specifiers(parameter_declaration) declare_varname(fst(declarator))

State 294:
## Known stack suffix:
## declarator
## LR(1) items:
declare_varname(fst(declarator)) -> declarator . [ SEMICOLON RPAREN EQ COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production declare_varname(fst(declarator)) -> declarator
-- On RPAREN reduce production declare_varname(fst(declarator)) -> declarator
-- On EQ reduce production declare_varname(fst(declarator)) -> declarator
-- On COMMA reduce production declare_varname(fst(declarator)) -> declarator

State 295:
## Known stack suffix:
## abstract_declarator(parameter_declaration)
## LR(1) items:
option(abstract_declarator(parameter_declaration)) -> abstract_declarator(parameter_declaration) . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production option(abstract_declarator(parameter_declaration)) -> abstract_declarator(parameter_declaration)
-- On COMMA reduce production option(abstract_declarator(parameter_declaration)) -> abstract_declarator(parameter_declaration)

State 296:
## Known stack suffix:
## direct_declarator LPAREN open_context option(parameter_type_list)
## LR(1) items:
direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) . save_contexts_stk close_context RPAREN [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On save_contexts_stk shift to state 297
## Reductions:
-- On RPAREN reduce production save_contexts_stk ->

State 297:
## Known stack suffix:
## direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk
## LR(1) items:
direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk . close_context RPAREN [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On close_context shift to state 298
## Reductions:
-- On RPAREN reduce production close_context ->

State 298:
## Known stack suffix:
## direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context
## LR(1) items:
direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context . RPAREN [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 299
## Reductions:

State 299:
## Known stack suffix:
## direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN . [ SEMICOLON RPAREN PACKED LPAREN LBRACK LBRACE EQ COMMA COLON ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On RPAREN reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On PACKED reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On LPAREN reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On LBRACK reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On LBRACE reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On EQ reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On COMMA reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On COLON reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On ATTRIBUTE reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN
-- On ALIGNAS reduce production direct_declarator -> direct_declarator LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN

State 300:
## Known stack suffix:
## list(pointer1) STAR option(type_qualifier_list) direct_declarator attribute_specifier_list
## LR(1) items:
attribute_specifier_list -> attribute_specifier_list . attribute_specifier [ SEMICOLON RPAREN PACKED EQ COMMA COLON ATTRIBUTE ALIGNAS ]
declarator -> list(pointer1) STAR option(type_qualifier_list) direct_declarator attribute_specifier_list . [ SEMICOLON RPAREN EQ COMMA COLON ]
## Transitions:
-- On PACKED shift to state 9
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On attribute_specifier shift to state 210
## Reductions:
-- On SEMICOLON reduce production declarator -> list(pointer1) STAR option(type_qualifier_list) direct_declarator attribute_specifier_list
-- On RPAREN reduce production declarator -> list(pointer1) STAR option(type_qualifier_list) direct_declarator attribute_specifier_list
-- On EQ reduce production declarator -> list(pointer1) STAR option(type_qualifier_list) direct_declarator attribute_specifier_list
-- On COMMA reduce production declarator -> list(pointer1) STAR option(type_qualifier_list) direct_declarator attribute_specifier_list
-- On COLON reduce production declarator -> list(pointer1) STAR option(type_qualifier_list) direct_declarator attribute_specifier_list

State 301:
## Known stack suffix:
## struct_declarator_list
## LR(1) items:
option(struct_declarator_list) -> struct_declarator_list . [ SEMICOLON ]
struct_declarator_list -> struct_declarator_list . COMMA struct_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On COMMA shift to state 302
## Reductions:
-- On SEMICOLON reduce production option(struct_declarator_list) -> struct_declarator_list

State 302:
## Known stack suffix:
## struct_declarator_list COMMA
## LR(1) items:
struct_declarator_list -> struct_declarator_list COMMA . struct_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 226
-- On struct_declarator shift to state 303
-- On option(declarator) shift to state 304
-- On list(pointer1) shift to state 227
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On declarator shift to state 307
## Reductions:
-- On STAR reduce production list(pointer1) ->
-- On COLON reduce production option(declarator) ->

State 303:
## Known stack suffix:
## struct_declarator_list COMMA struct_declarator
## LR(1) items:
struct_declarator_list -> struct_declarator_list COMMA struct_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production struct_declarator_list -> struct_declarator_list COMMA struct_declarator
-- On COMMA reduce production struct_declarator_list -> struct_declarator_list COMMA struct_declarator

State 304:
## Known stack suffix:
## option(declarator)
## LR(1) items:
struct_declarator -> option(declarator) . COLON conditional_expression [ SEMICOLON COMMA ]
## Transitions:
-- On COLON shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## option(declarator) COLON
## LR(1) items:
struct_declarator -> option(declarator) COLON . conditional_expression [ SEMICOLON COMMA ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 306
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 306:
## Known stack suffix:
## option(declarator) COLON conditional_expression
## LR(1) items:
struct_declarator -> option(declarator) COLON conditional_expression . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production struct_declarator -> option(declarator) COLON conditional_expression
-- On COMMA reduce production struct_declarator -> option(declarator) COLON conditional_expression

State 307:
## Known stack suffix:
## declarator
## LR(1) items:
option(declarator) -> declarator . [ COLON ]
struct_declarator -> declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production struct_declarator -> declarator
-- On COMMA reduce production struct_declarator -> declarator
-- On COLON reduce production option(declarator) -> declarator

State 308:
## Known stack suffix:
## struct_declarator
## LR(1) items:
struct_declarator_list -> struct_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production struct_declarator_list -> struct_declarator
-- On COMMA reduce production struct_declarator_list -> struct_declarator

State 309:
## Known stack suffix:
## specifier_qualifier_list(struct_declaration) option(struct_declarator_list)
## LR(1) items:
struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) . SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT SIGNED SHORT RESTRICT RBRACE PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
## LR(1) items:
struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT SIGNED SHORT RESTRICT RBRACE PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On VOID reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On UNSIGNED reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On UNION reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On UNDERSCORE_BOOL reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On TYPEDEF_NAME reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On STRUCT reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On SIGNED reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On SHORT reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On RESTRICT reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On RBRACE reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On PACKED reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On LONG reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On INT reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On FLOAT reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On ENUM reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On DOUBLE reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On CONST reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On CHAR reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On ATTRIBUTE reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON
-- On ALIGNAS reduce production struct_declaration -> specifier_qualifier_list(struct_declaration) option(struct_declarator_list) SEMICOLON

State 311:
## Known stack suffix:
## option(type_qualifier_list)
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) . TYPEDEF_NAME option(type_qualifier_list) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN COLON ]
specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) . type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN COLON ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT SIGNED SHORT RESTRICT PACKED LONG INT FLOAT ENUM DOUBLE CONST CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On TYPEDEF_NAME shift to state 312
-- On STRUCT shift to state 188
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On FLOAT shift to state 193
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 314
-- On type_qualifier shift to state 186
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On enum_specifier shift to state 255
-- On attribute_specifier shift to state 187
## Reductions:

State 312:
## Known stack suffix:
## option(type_qualifier_list) TYPEDEF_NAME
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) TYPEDEF_NAME . option(type_qualifier_list) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN COLON ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On option(type_qualifier_list) shift to state 313
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VAR_NAME reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STAR reduce production option(type_qualifier_list) ->
-- On SEMICOLON reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LPAREN reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On COLON reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 313:
## Known stack suffix:
## option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN COLON ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE VAR_NAME TYPEDEF_NAME STAR SEMICOLON RESTRICT PACKED LPAREN CONST COLON ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On CONST shift to state 154
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 186
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
-- On TYPEDEF_NAME reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
-- On STAR reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
-- On SEMICOLON reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
-- On LPAREN reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)
-- On COLON reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) TYPEDEF_NAME option(type_qualifier_list)

State 314:
## Known stack suffix:
## option(type_qualifier_list) type_specifier_no_typedef_name
## LR(1) items:
specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) type_specifier_no_typedef_name . list(specifier_qualifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN COLON ]
## Transitions:
-- On list(specifier_qualifier_no_typedef_name) shift to state 315
## Reductions:
-- On VOLATILE reduce production list(specifier_qualifier_no_typedef_name) ->
-- On VOID reduce production list(specifier_qualifier_no_typedef_name) ->
-- On VAR_NAME reduce production list(specifier_qualifier_no_typedef_name) ->
-- On UNSIGNED reduce production list(specifier_qualifier_no_typedef_name) ->
-- On UNION reduce production list(specifier_qualifier_no_typedef_name) ->
-- On UNDERSCORE_BOOL reduce production list(specifier_qualifier_no_typedef_name) ->
-- On TYPEDEF_NAME reduce production list(specifier_qualifier_no_typedef_name) ->
-- On STRUCT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On STAR reduce production list(specifier_qualifier_no_typedef_name) ->
-- On SIGNED reduce production list(specifier_qualifier_no_typedef_name) ->
-- On SHORT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On SEMICOLON reduce production list(specifier_qualifier_no_typedef_name) ->
-- On RESTRICT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On PACKED reduce production list(specifier_qualifier_no_typedef_name) ->
-- On LPAREN reduce production list(specifier_qualifier_no_typedef_name) ->
-- On LONG reduce production list(specifier_qualifier_no_typedef_name) ->
-- On INT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On FLOAT reduce production list(specifier_qualifier_no_typedef_name) ->
-- On ENUM reduce production list(specifier_qualifier_no_typedef_name) ->
-- On DOUBLE reduce production list(specifier_qualifier_no_typedef_name) ->
-- On CONST reduce production list(specifier_qualifier_no_typedef_name) ->
-- On COLON reduce production list(specifier_qualifier_no_typedef_name) ->
-- On CHAR reduce production list(specifier_qualifier_no_typedef_name) ->
-- On ATTRIBUTE reduce production list(specifier_qualifier_no_typedef_name) ->
-- On ALIGNAS reduce production list(specifier_qualifier_no_typedef_name) ->

State 315:
## Known stack suffix:
## option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
## LR(1) items:
list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) . specifier_qualifier_no_typedef_name [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT STAR SIGNED SHORT SEMICOLON RESTRICT PACKED LPAREN LONG INT FLOAT ENUM DOUBLE CONST COLON CHAR ATTRIBUTE ALIGNAS ]
specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN COLON ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On STRUCT shift to state 188
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On FLOAT shift to state 193
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 215
-- On type_qualifier shift to state 216
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On specifier_qualifier_no_typedef_name shift to state 316
-- On enum_specifier shift to state 255
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
-- On TYPEDEF_NAME reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
-- On STAR reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
-- On SEMICOLON reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
-- On LPAREN reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)
-- On COLON reduce production specifier_qualifier_list(struct_declaration) -> option(type_qualifier_list) type_specifier_no_typedef_name list(specifier_qualifier_no_typedef_name)

State 316:
## Known stack suffix:
## list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
## LR(1) items:
list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT PACKED LPAREN LONG LBRACK INT FLOAT ENUM DOUBLE CONST COLON CHAR ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On VOID reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On VAR_NAME reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On UNSIGNED reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On UNION reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On UNDERSCORE_BOOL reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On TYPEDEF_NAME reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On STRUCT reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On STAR reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On SIGNED reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On SHORT reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On SEMICOLON reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On RPAREN reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On RESTRICT reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On PACKED reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On LPAREN reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On LONG reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On LBRACK reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On INT reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On FLOAT reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On ENUM reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On DOUBLE reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On CONST reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On COLON reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On CHAR reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On ATTRIBUTE reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name
-- On ALIGNAS reduce production list(specifier_qualifier_no_typedef_name) -> list(specifier_qualifier_no_typedef_name) specifier_qualifier_no_typedef_name

State 317:
## Known stack suffix:
## struct_or_union attribute_specifier_list general_identifier
## LR(1) items:
option(other_identifier) -> general_identifier . [ LBRACE ]
struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER PACKED LPAREN LONG LBRACK INT INLINE FLOAT EXTERN ENUM DOUBLE CONST COMMA COLON CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On VOID reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On VAR_NAME reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On UNSIGNED reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On UNION reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On UNDERSCORE_BOOL reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On TYPEDEF_NAME reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On TYPEDEF reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On STRUCT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On STATIC reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On STAR reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On SIGNED reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On SHORT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On SEMICOLON reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On RPAREN reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On RESTRICT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On REGISTER reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On PACKED reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On LPAREN reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On LONG reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On LBRACK reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On LBRACE reduce production option(other_identifier) -> general_identifier
-- On INT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On INLINE reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On FLOAT reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On EXTERN reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On ENUM reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On DOUBLE reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On CONST reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On COMMA reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On COLON reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On CHAR reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On AUTO reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On ATTRIBUTE reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier
-- On ALIGNAS reduce production struct_or_union_specifier -> struct_or_union attribute_specifier_list general_identifier

State 318:
## Known stack suffix:
## ALIGNAS LPAREN argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA assignment_expression [ RPAREN COMMA ]
attribute_specifier -> ALIGNAS LPAREN argument_expression_list . RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 319
-- On COMMA shift to state 111
## Reductions:

State 319:
## Known stack suffix:
## ALIGNAS LPAREN argument_expression_list RPAREN
## LR(1) items:
attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On VOID reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On VAR_NAME reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On UNSIGNED reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On UNION reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On UNDERSCORE_BOOL reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On TYPEDEF_NAME reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On TYPEDEF reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On TILDE reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On STRUCT reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On STRING_LITERAL reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On STATIC reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On STAR reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On SIZEOF reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On SIGNED reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On SHORT reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On SEMICOLON reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On RPAREN reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On RESTRICT reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On REGISTER reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On RBRACK reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On PLUS reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On PACKED reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On MINUS reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On LPAREN reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On LONG reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On LBRACK reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On LBRACE reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On INT reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On INLINE reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On INC reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On FLOAT reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On EXTERN reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On EQ reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On ENUM reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On DOUBLE reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On DEC reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On CONSTANT reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On CONST reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On COMMA reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On COLON reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On CHAR reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On BUILTIN_VA_ARG reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On BANG reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On AUTO reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On ATTRIBUTE reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On AND reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On ALIGNOF reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN
-- On ALIGNAS reduce production attribute_specifier -> ALIGNAS LPAREN argument_expression_list RPAREN

State 320:
## Known stack suffix:
## option(direct_abstract_declarator) LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
## LR(1) items:
direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK) . [ RPAREN LPAREN LBRACK COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On LPAREN reduce production direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On LBRACK reduce production direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)
-- On COMMA reduce production direct_abstract_declarator -> option(direct_abstract_declarator) LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK)

State 321:
## Known stack suffix:
## list(pointer1)
## LR(1) items:
abstract_declarator(type_name) -> list(pointer1) . STAR option(type_qualifier_list) [ RPAREN ]
abstract_declarator(type_name) -> list(pointer1) . STAR option(type_qualifier_list) direct_abstract_declarator [ RPAREN ]
list(pointer1) -> list(pointer1) . STAR option(type_qualifier_list) [ STAR ]
## Transitions:
-- On STAR shift to state 322
## Reductions:

State 322:
## Known stack suffix:
## list(pointer1) STAR
## LR(1) items:
abstract_declarator(type_name) -> list(pointer1) STAR . option(type_qualifier_list) [ RPAREN ]
abstract_declarator(type_name) -> list(pointer1) STAR . option(type_qualifier_list) direct_abstract_declarator [ RPAREN ]
list(pointer1) -> list(pointer1) STAR . option(type_qualifier_list) [ STAR ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On option(type_qualifier_list) shift to state 323
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On STAR reduce production option(type_qualifier_list) ->
-- On RPAREN reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LPAREN reduce production option(type_qualifier_list) ->
-- On LBRACK reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 323:
## Known stack suffix:
## list(pointer1) STAR option(type_qualifier_list)
## LR(1) items:
abstract_declarator(type_name) -> list(pointer1) STAR option(type_qualifier_list) . [ RPAREN ]
abstract_declarator(type_name) -> list(pointer1) STAR option(type_qualifier_list) . direct_abstract_declarator [ RPAREN ]
list(pointer1) -> list(pointer1) STAR option(type_qualifier_list) . [ STAR ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE STAR RPAREN RESTRICT PACKED LPAREN LBRACK CONST ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On LPAREN shift to state 149
-- On CONST shift to state 154
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 186
-- On option(direct_abstract_declarator) shift to state 150
-- On direct_abstract_declarator shift to state 269
-- On attribute_specifier shift to state 187
## Reductions:
-- On STAR reduce production list(pointer1) -> list(pointer1) STAR option(type_qualifier_list)
-- On RPAREN reduce production abstract_declarator(type_name) -> list(pointer1) STAR option(type_qualifier_list)
-- On LBRACK reduce production option(direct_abstract_declarator) ->

State 324:
## Known stack suffix:
## specifier_qualifier_list(type_name) option(abstract_declarator(type_name))
## LR(1) items:
type_name -> specifier_qualifier_list(type_name) option(abstract_declarator(type_name)) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production type_name -> specifier_qualifier_list(type_name) option(abstract_declarator(type_name))

State 325:
## Known stack suffix:
## abstract_declarator(type_name)
## LR(1) items:
option(abstract_declarator(type_name)) -> abstract_declarator(type_name) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production option(abstract_declarator(type_name)) -> abstract_declarator(type_name)

State 326:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
primary_expression -> LPAREN expression . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 327
-- On COMMA shift to state 98
## Reductions:

State 327:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
primary_expression -> LPAREN expression RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN
-- On SUB_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN
-- On STAR reduce production primary_expression -> LPAREN expression RPAREN
-- On SLASH reduce production primary_expression -> LPAREN expression RPAREN
-- On SEMICOLON reduce production primary_expression -> LPAREN expression RPAREN
-- On RPAREN reduce production primary_expression -> LPAREN expression RPAREN
-- On RIGHT_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN
-- On RIGHT reduce production primary_expression -> LPAREN expression RPAREN
-- On RBRACK reduce production primary_expression -> LPAREN expression RPAREN
-- On RBRACE reduce production primary_expression -> LPAREN expression RPAREN
-- On QUESTION reduce production primary_expression -> LPAREN expression RPAREN
-- On PTR reduce production primary_expression -> LPAREN expression RPAREN
-- On PLUS reduce production primary_expression -> LPAREN expression RPAREN
-- On PERCENT reduce production primary_expression -> LPAREN expression RPAREN
-- On OR_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN
-- On NEQ reduce production primary_expression -> LPAREN expression RPAREN
-- On MUL_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN
-- On MOD_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN
-- On MINUS reduce production primary_expression -> LPAREN expression RPAREN
-- On LT reduce production primary_expression -> LPAREN expression RPAREN
-- On LPAREN reduce production primary_expression -> LPAREN expression RPAREN
-- On LEQ reduce production primary_expression -> LPAREN expression RPAREN
-- On LEFT_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN
-- On LEFT reduce production primary_expression -> LPAREN expression RPAREN
-- On LBRACK reduce production primary_expression -> LPAREN expression RPAREN
-- On INC reduce production primary_expression -> LPAREN expression RPAREN
-- On HAT reduce production primary_expression -> LPAREN expression RPAREN
-- On GT reduce production primary_expression -> LPAREN expression RPAREN
-- On GEQ reduce production primary_expression -> LPAREN expression RPAREN
-- On EQEQ reduce production primary_expression -> LPAREN expression RPAREN
-- On EQ reduce production primary_expression -> LPAREN expression RPAREN
-- On DOT reduce production primary_expression -> LPAREN expression RPAREN
-- On DIV_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN
-- On DEC reduce production primary_expression -> LPAREN expression RPAREN
-- On COMMA reduce production primary_expression -> LPAREN expression RPAREN
-- On COLON reduce production primary_expression -> LPAREN expression RPAREN
-- On BARBAR reduce production primary_expression -> LPAREN expression RPAREN
-- On BAR reduce production primary_expression -> LPAREN expression RPAREN
-- On AND_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN
-- On ANDAND reduce production primary_expression -> LPAREN expression RPAREN
-- On AND reduce production primary_expression -> LPAREN expression RPAREN
-- On ADD_ASSIGN reduce production primary_expression -> LPAREN expression RPAREN

State 328:
## Known stack suffix:
## ALIGNOF unary_expression
## LR(1) items:
unary_expression -> ALIGNOF unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression
-- On SUB_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression
-- On STAR reduce production unary_expression -> ALIGNOF unary_expression
-- On SLASH reduce production unary_expression -> ALIGNOF unary_expression
-- On SEMICOLON reduce production unary_expression -> ALIGNOF unary_expression
-- On RPAREN reduce production unary_expression -> ALIGNOF unary_expression
-- On RIGHT_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression
-- On RIGHT reduce production unary_expression -> ALIGNOF unary_expression
-- On RBRACK reduce production unary_expression -> ALIGNOF unary_expression
-- On RBRACE reduce production unary_expression -> ALIGNOF unary_expression
-- On QUESTION reduce production unary_expression -> ALIGNOF unary_expression
-- On PLUS reduce production unary_expression -> ALIGNOF unary_expression
-- On PERCENT reduce production unary_expression -> ALIGNOF unary_expression
-- On OR_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression
-- On NEQ reduce production unary_expression -> ALIGNOF unary_expression
-- On MUL_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression
-- On MOD_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression
-- On MINUS reduce production unary_expression -> ALIGNOF unary_expression
-- On LT reduce production unary_expression -> ALIGNOF unary_expression
-- On LEQ reduce production unary_expression -> ALIGNOF unary_expression
-- On LEFT_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression
-- On LEFT reduce production unary_expression -> ALIGNOF unary_expression
-- On HAT reduce production unary_expression -> ALIGNOF unary_expression
-- On GT reduce production unary_expression -> ALIGNOF unary_expression
-- On GEQ reduce production unary_expression -> ALIGNOF unary_expression
-- On EQEQ reduce production unary_expression -> ALIGNOF unary_expression
-- On EQ reduce production unary_expression -> ALIGNOF unary_expression
-- On DIV_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression
-- On COMMA reduce production unary_expression -> ALIGNOF unary_expression
-- On COLON reduce production unary_expression -> ALIGNOF unary_expression
-- On BARBAR reduce production unary_expression -> ALIGNOF unary_expression
-- On BAR reduce production unary_expression -> ALIGNOF unary_expression
-- On AND_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression
-- On ANDAND reduce production unary_expression -> ALIGNOF unary_expression
-- On AND reduce production unary_expression -> ALIGNOF unary_expression
-- On ADD_ASSIGN reduce production unary_expression -> ALIGNOF unary_expression

State 329:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN assignment_expression
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression . COMMA type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On COMMA shift to state 330
## Reductions:

State 330:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN assignment_expression COMMA
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA . type_name RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On type_name shift to state 331
-- On specifier_qualifier_list(type_name) shift to state 148
-- On option(type_qualifier_list) shift to state 179
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VOID reduce production option(type_qualifier_list) ->
-- On UNSIGNED reduce production option(type_qualifier_list) ->
-- On UNION reduce production option(type_qualifier_list) ->
-- On UNDERSCORE_BOOL reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STRUCT reduce production option(type_qualifier_list) ->
-- On SIGNED reduce production option(type_qualifier_list) ->
-- On SHORT reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LONG reduce production option(type_qualifier_list) ->
-- On INT reduce production option(type_qualifier_list) ->
-- On FLOAT reduce production option(type_qualifier_list) ->
-- On ENUM reduce production option(type_qualifier_list) ->
-- On DOUBLE reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On CHAR reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 331:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
## LR(1) items:
postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On SUB_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On STAR reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On SLASH reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On SEMICOLON reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On RPAREN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On RIGHT_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On RIGHT reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On RBRACK reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On RBRACE reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On QUESTION reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On PTR reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On PLUS reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On PERCENT reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On OR_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On NEQ reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On MUL_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On MOD_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On MINUS reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On LT reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On LPAREN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On LEQ reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On LEFT_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On LEFT reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On LBRACK reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On INC reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On HAT reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On GT reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On GEQ reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On EQEQ reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On EQ reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On DOT reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On DIV_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On DEC reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On COMMA reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On COLON reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On BARBAR reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On BAR reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On AND_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On ANDAND reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On AND reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN
-- On ADD_ASSIGN reduce production postfix_expression -> BUILTIN_VA_ARG LPAREN assignment_expression COMMA type_name RPAREN

State 333:
## Known stack suffix:
## DEC unary_expression
## LR(1) items:
unary_expression -> DEC unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production unary_expression -> DEC unary_expression
-- On SUB_ASSIGN reduce production unary_expression -> DEC unary_expression
-- On STAR reduce production unary_expression -> DEC unary_expression
-- On SLASH reduce production unary_expression -> DEC unary_expression
-- On SEMICOLON reduce production unary_expression -> DEC unary_expression
-- On RPAREN reduce production unary_expression -> DEC unary_expression
-- On RIGHT_ASSIGN reduce production unary_expression -> DEC unary_expression
-- On RIGHT reduce production unary_expression -> DEC unary_expression
-- On RBRACK reduce production unary_expression -> DEC unary_expression
-- On RBRACE reduce production unary_expression -> DEC unary_expression
-- On QUESTION reduce production unary_expression -> DEC unary_expression
-- On PLUS reduce production unary_expression -> DEC unary_expression
-- On PERCENT reduce production unary_expression -> DEC unary_expression
-- On OR_ASSIGN reduce production unary_expression -> DEC unary_expression
-- On NEQ reduce production unary_expression -> DEC unary_expression
-- On MUL_ASSIGN reduce production unary_expression -> DEC unary_expression
-- On MOD_ASSIGN reduce production unary_expression -> DEC unary_expression
-- On MINUS reduce production unary_expression -> DEC unary_expression
-- On LT reduce production unary_expression -> DEC unary_expression
-- On LEQ reduce production unary_expression -> DEC unary_expression
-- On LEFT_ASSIGN reduce production unary_expression -> DEC unary_expression
-- On LEFT reduce production unary_expression -> DEC unary_expression
-- On HAT reduce production unary_expression -> DEC unary_expression
-- On GT reduce production unary_expression -> DEC unary_expression
-- On GEQ reduce production unary_expression -> DEC unary_expression
-- On EQEQ reduce production unary_expression -> DEC unary_expression
-- On EQ reduce production unary_expression -> DEC unary_expression
-- On DIV_ASSIGN reduce production unary_expression -> DEC unary_expression
-- On COMMA reduce production unary_expression -> DEC unary_expression
-- On COLON reduce production unary_expression -> DEC unary_expression
-- On BARBAR reduce production unary_expression -> DEC unary_expression
-- On BAR reduce production unary_expression -> DEC unary_expression
-- On AND_ASSIGN reduce production unary_expression -> DEC unary_expression
-- On ANDAND reduce production unary_expression -> DEC unary_expression
-- On AND reduce production unary_expression -> DEC unary_expression
-- On ADD_ASSIGN reduce production unary_expression -> DEC unary_expression

State 334:
## Known stack suffix:
## LPAREN type_name
## LR(1) items:
postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 335
## Reductions:

State 335:
## Known stack suffix:
## LPAREN type_name RPAREN
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On LBRACE shift to state 124
## Reductions:

State 336:
## Known stack suffix:
## INC unary_expression
## LR(1) items:
unary_expression -> INC unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production unary_expression -> INC unary_expression
-- On SUB_ASSIGN reduce production unary_expression -> INC unary_expression
-- On STAR reduce production unary_expression -> INC unary_expression
-- On SLASH reduce production unary_expression -> INC unary_expression
-- On SEMICOLON reduce production unary_expression -> INC unary_expression
-- On RPAREN reduce production unary_expression -> INC unary_expression
-- On RIGHT_ASSIGN reduce production unary_expression -> INC unary_expression
-- On RIGHT reduce production unary_expression -> INC unary_expression
-- On RBRACK reduce production unary_expression -> INC unary_expression
-- On RBRACE reduce production unary_expression -> INC unary_expression
-- On QUESTION reduce production unary_expression -> INC unary_expression
-- On PLUS reduce production unary_expression -> INC unary_expression
-- On PERCENT reduce production unary_expression -> INC unary_expression
-- On OR_ASSIGN reduce production unary_expression -> INC unary_expression
-- On NEQ reduce production unary_expression -> INC unary_expression
-- On MUL_ASSIGN reduce production unary_expression -> INC unary_expression
-- On MOD_ASSIGN reduce production unary_expression -> INC unary_expression
-- On MINUS reduce production unary_expression -> INC unary_expression
-- On LT reduce production unary_expression -> INC unary_expression
-- On LEQ reduce production unary_expression -> INC unary_expression
-- On LEFT_ASSIGN reduce production unary_expression -> INC unary_expression
-- On LEFT reduce production unary_expression -> INC unary_expression
-- On HAT reduce production unary_expression -> INC unary_expression
-- On GT reduce production unary_expression -> INC unary_expression
-- On GEQ reduce production unary_expression -> INC unary_expression
-- On EQEQ reduce production unary_expression -> INC unary_expression
-- On EQ reduce production unary_expression -> INC unary_expression
-- On DIV_ASSIGN reduce production unary_expression -> INC unary_expression
-- On COMMA reduce production unary_expression -> INC unary_expression
-- On COLON reduce production unary_expression -> INC unary_expression
-- On BARBAR reduce production unary_expression -> INC unary_expression
-- On BAR reduce production unary_expression -> INC unary_expression
-- On AND_ASSIGN reduce production unary_expression -> INC unary_expression
-- On ANDAND reduce production unary_expression -> INC unary_expression
-- On AND reduce production unary_expression -> INC unary_expression
-- On ADD_ASSIGN reduce production unary_expression -> INC unary_expression

State 337:
## Known stack suffix:
## LPAREN type_name
## LR(1) items:
cast_expression -> LPAREN type_name . RPAREN cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 338
## Reductions:

State 338:
## Known stack suffix:
## LPAREN type_name RPAREN
## LR(1) items:
cast_expression -> LPAREN type_name RPAREN . cast_expression [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 124
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On cast_expression shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## LPAREN type_name RPAREN cast_expression
## LR(1) items:
cast_expression -> LPAREN type_name RPAREN cast_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On SUB_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On STAR reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On SLASH reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On SEMICOLON reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On RPAREN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On RIGHT_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On RIGHT reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On RBRACK reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On RBRACE reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On QUESTION reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On PLUS reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On PERCENT reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On OR_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On NEQ reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On MUL_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On MOD_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On MINUS reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On LT reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On LEQ reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On LEFT_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On LEFT reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On HAT reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On GT reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On GEQ reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On EQEQ reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On EQ reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On DIV_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On COMMA reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On COLON reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On BARBAR reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On BAR reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On AND_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On ANDAND reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On AND reduce production cast_expression -> LPAREN type_name RPAREN cast_expression
-- On ADD_ASSIGN reduce production cast_expression -> LPAREN type_name RPAREN cast_expression

State 340:
## Known stack suffix:
## SIZEOF LPAREN type_name
## LR(1) items:
postfix_expression -> LPAREN type_name . RPAREN LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> SIZEOF LPAREN type_name . RPAREN [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On RPAREN shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## SIZEOF LPAREN type_name RPAREN
## LR(1) items:
postfix_expression -> LPAREN type_name RPAREN . LBRACE initializer_list option(COMMA) RBRACE [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
unary_expression -> SIZEOF LPAREN type_name RPAREN . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
-- On LBRACE shift to state 124
## Reductions:
-- On XOR_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On SUB_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On STAR reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On SLASH reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On SEMICOLON reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On RPAREN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On RIGHT_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On RIGHT reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On RBRACK reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On RBRACE reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On QUESTION reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On PLUS reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On PERCENT reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On OR_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On NEQ reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On MUL_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On MOD_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On MINUS reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On LT reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On LEQ reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On LEFT_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On LEFT reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On HAT reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On GT reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On GEQ reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On EQEQ reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On EQ reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On DIV_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On COMMA reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On COLON reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On BARBAR reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On BAR reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On AND_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On ANDAND reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On AND reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN
-- On ADD_ASSIGN reduce production unary_expression -> SIZEOF LPAREN type_name RPAREN

State 342:
## Known stack suffix:
## SIZEOF unary_expression
## LR(1) items:
unary_expression -> SIZEOF unary_expression . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RPAREN RIGHT_ASSIGN RIGHT RBRACK RBRACE QUESTION PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LEQ LEFT_ASSIGN LEFT HAT GT GEQ EQEQ EQ DIV_ASSIGN COMMA COLON BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production unary_expression -> SIZEOF unary_expression
-- On SUB_ASSIGN reduce production unary_expression -> SIZEOF unary_expression
-- On STAR reduce production unary_expression -> SIZEOF unary_expression
-- On SLASH reduce production unary_expression -> SIZEOF unary_expression
-- On SEMICOLON reduce production unary_expression -> SIZEOF unary_expression
-- On RPAREN reduce production unary_expression -> SIZEOF unary_expression
-- On RIGHT_ASSIGN reduce production unary_expression -> SIZEOF unary_expression
-- On RIGHT reduce production unary_expression -> SIZEOF unary_expression
-- On RBRACK reduce production unary_expression -> SIZEOF unary_expression
-- On RBRACE reduce production unary_expression -> SIZEOF unary_expression
-- On QUESTION reduce production unary_expression -> SIZEOF unary_expression
-- On PLUS reduce production unary_expression -> SIZEOF unary_expression
-- On PERCENT reduce production unary_expression -> SIZEOF unary_expression
-- On OR_ASSIGN reduce production unary_expression -> SIZEOF unary_expression
-- On NEQ reduce production unary_expression -> SIZEOF unary_expression
-- On MUL_ASSIGN reduce production unary_expression -> SIZEOF unary_expression
-- On MOD_ASSIGN reduce production unary_expression -> SIZEOF unary_expression
-- On MINUS reduce production unary_expression -> SIZEOF unary_expression
-- On LT reduce production unary_expression -> SIZEOF unary_expression
-- On LEQ reduce production unary_expression -> SIZEOF unary_expression
-- On LEFT_ASSIGN reduce production unary_expression -> SIZEOF unary_expression
-- On LEFT reduce production unary_expression -> SIZEOF unary_expression
-- On HAT reduce production unary_expression -> SIZEOF unary_expression
-- On GT reduce production unary_expression -> SIZEOF unary_expression
-- On GEQ reduce production unary_expression -> SIZEOF unary_expression
-- On EQEQ reduce production unary_expression -> SIZEOF unary_expression
-- On EQ reduce production unary_expression -> SIZEOF unary_expression
-- On DIV_ASSIGN reduce production unary_expression -> SIZEOF unary_expression
-- On COMMA reduce production unary_expression -> SIZEOF unary_expression
-- On COLON reduce production unary_expression -> SIZEOF unary_expression
-- On BARBAR reduce production unary_expression -> SIZEOF unary_expression
-- On BAR reduce production unary_expression -> SIZEOF unary_expression
-- On AND_ASSIGN reduce production unary_expression -> SIZEOF unary_expression
-- On ANDAND reduce production unary_expression -> SIZEOF unary_expression
-- On AND reduce production unary_expression -> SIZEOF unary_expression
-- On ADD_ASSIGN reduce production unary_expression -> SIZEOF unary_expression

State 343:
## Known stack suffix:
## PACKED LPAREN argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA assignment_expression [ RPAREN COMMA ]
attribute_specifier -> PACKED LPAREN argument_expression_list . RPAREN [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 344
-- On COMMA shift to state 111
## Reductions:

State 344:
## Known stack suffix:
## PACKED LPAREN argument_expression_list RPAREN
## LR(1) items:
attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN . [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RPAREN RESTRICT REGISTER RBRACK PLUS PACKED MINUS LPAREN LONG LBRACK LBRACE INT INLINE INC FLOAT EXTERN EQ ENUM DOUBLE DEC CONSTANT CONST COMMA COLON CHAR BUILTIN_VA_ARG BANG AUTO ATTRIBUTE AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On VOID reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On VAR_NAME reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On UNSIGNED reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On UNION reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On UNDERSCORE_BOOL reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On TYPEDEF_NAME reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On TYPEDEF reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On TILDE reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On STRUCT reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On STRING_LITERAL reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On STATIC reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On STAR reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On SIZEOF reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On SIGNED reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On SHORT reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On SEMICOLON reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On RPAREN reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On RESTRICT reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On REGISTER reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On RBRACK reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On PLUS reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On PACKED reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On MINUS reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On LPAREN reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On LONG reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On LBRACK reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On LBRACE reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On INT reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On INLINE reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On INC reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On FLOAT reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On EXTERN reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On EQ reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On ENUM reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On DOUBLE reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On DEC reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On CONSTANT reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On CONST reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On COMMA reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On COLON reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On CHAR reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On BUILTIN_VA_ARG reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On BANG reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On AUTO reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On ATTRIBUTE reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On AND reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On ALIGNOF reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN
-- On ALIGNAS reduce production attribute_specifier -> PACKED LPAREN argument_expression_list RPAREN

State 345:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
translation_unit -> SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production translation_unit -> SEMICOLON
-- On VOID reduce production translation_unit -> SEMICOLON
-- On UNSIGNED reduce production translation_unit -> SEMICOLON
-- On UNION reduce production translation_unit -> SEMICOLON
-- On UNDERSCORE_BOOL reduce production translation_unit -> SEMICOLON
-- On TYPEDEF_NAME reduce production translation_unit -> SEMICOLON
-- On TYPEDEF reduce production translation_unit -> SEMICOLON
-- On STRUCT reduce production translation_unit -> SEMICOLON
-- On STATIC reduce production translation_unit -> SEMICOLON
-- On SIGNED reduce production translation_unit -> SEMICOLON
-- On SHORT reduce production translation_unit -> SEMICOLON
-- On SEMICOLON reduce production translation_unit -> SEMICOLON
-- On RESTRICT reduce production translation_unit -> SEMICOLON
-- On REGISTER reduce production translation_unit -> SEMICOLON
-- On PRAGMA reduce production translation_unit -> SEMICOLON
-- On PACKED reduce production translation_unit -> SEMICOLON
-- On LONG reduce production translation_unit -> SEMICOLON
-- On INT reduce production translation_unit -> SEMICOLON
-- On INLINE reduce production translation_unit -> SEMICOLON
-- On FLOAT reduce production translation_unit -> SEMICOLON
-- On EXTERN reduce production translation_unit -> SEMICOLON
-- On EOF reduce production translation_unit -> SEMICOLON
-- On ENUM reduce production translation_unit -> SEMICOLON
-- On DOUBLE reduce production translation_unit -> SEMICOLON
-- On CONST reduce production translation_unit -> SEMICOLON
-- On CHAR reduce production translation_unit -> SEMICOLON
-- On AUTO reduce production translation_unit -> SEMICOLON
-- On ATTRIBUTE reduce production translation_unit -> SEMICOLON
-- On ALIGNAS reduce production translation_unit -> SEMICOLON

State 346:
## Known stack suffix:
## PRAGMA
## LR(1) items:
external_declaration -> PRAGMA . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production external_declaration -> PRAGMA
-- On VOID reduce production external_declaration -> PRAGMA
-- On UNSIGNED reduce production external_declaration -> PRAGMA
-- On UNION reduce production external_declaration -> PRAGMA
-- On UNDERSCORE_BOOL reduce production external_declaration -> PRAGMA
-- On TYPEDEF_NAME reduce production external_declaration -> PRAGMA
-- On TYPEDEF reduce production external_declaration -> PRAGMA
-- On STRUCT reduce production external_declaration -> PRAGMA
-- On STATIC reduce production external_declaration -> PRAGMA
-- On SIGNED reduce production external_declaration -> PRAGMA
-- On SHORT reduce production external_declaration -> PRAGMA
-- On SEMICOLON reduce production external_declaration -> PRAGMA
-- On RESTRICT reduce production external_declaration -> PRAGMA
-- On REGISTER reduce production external_declaration -> PRAGMA
-- On PRAGMA reduce production external_declaration -> PRAGMA
-- On PACKED reduce production external_declaration -> PRAGMA
-- On LONG reduce production external_declaration -> PRAGMA
-- On INT reduce production external_declaration -> PRAGMA
-- On INLINE reduce production external_declaration -> PRAGMA
-- On FLOAT reduce production external_declaration -> PRAGMA
-- On EXTERN reduce production external_declaration -> PRAGMA
-- On EOF reduce production external_declaration -> PRAGMA
-- On ENUM reduce production external_declaration -> PRAGMA
-- On DOUBLE reduce production external_declaration -> PRAGMA
-- On CONST reduce production external_declaration -> PRAGMA
-- On CHAR reduce production external_declaration -> PRAGMA
-- On AUTO reduce production external_declaration -> PRAGMA
-- On ATTRIBUTE reduce production external_declaration -> PRAGMA
-- On ALIGNAS reduce production external_declaration -> PRAGMA

State 347:
## Known stack suffix:
## EOF
## LR(1) items:
translation_unit_file -> EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production translation_unit_file -> EOF

State 348:
## Known stack suffix:
## translation_unit_file
## LR(1) items:
translation_unit_file' -> translation_unit_file . [ # ]
## Transitions:
## Reductions:
-- On # accept translation_unit_file

State 349:
## Known stack suffix:
## translation_unit
## LR(1) items:
translation_unit -> translation_unit . external_declaration [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
translation_unit -> translation_unit . SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
translation_unit_file -> translation_unit . EOF [ # ]
## Transitions:
-- On TYPEDEF_NAME shift to state 1
-- On SEMICOLON shift to state 350
-- On PRAGMA shift to state 346
-- On EOF shift to state 351
-- On list(declaration_specifier_no_type) shift to state 352
-- On function_definition_begin shift to state 368
-- On function_definition shift to state 648
-- On external_declaration shift to state 649
-- On declaration_specifiers_typedef shift to state 650
-- On declaration_specifiers(declaration(external_declaration)) shift to state 653
-- On declaration(external_declaration) shift to state 675
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 350:
## Known stack suffix:
## translation_unit SEMICOLON
## LR(1) items:
translation_unit -> translation_unit SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production translation_unit -> translation_unit SEMICOLON
-- On VOID reduce production translation_unit -> translation_unit SEMICOLON
-- On UNSIGNED reduce production translation_unit -> translation_unit SEMICOLON
-- On UNION reduce production translation_unit -> translation_unit SEMICOLON
-- On UNDERSCORE_BOOL reduce production translation_unit -> translation_unit SEMICOLON
-- On TYPEDEF_NAME reduce production translation_unit -> translation_unit SEMICOLON
-- On TYPEDEF reduce production translation_unit -> translation_unit SEMICOLON
-- On STRUCT reduce production translation_unit -> translation_unit SEMICOLON
-- On STATIC reduce production translation_unit -> translation_unit SEMICOLON
-- On SIGNED reduce production translation_unit -> translation_unit SEMICOLON
-- On SHORT reduce production translation_unit -> translation_unit SEMICOLON
-- On SEMICOLON reduce production translation_unit -> translation_unit SEMICOLON
-- On RESTRICT reduce production translation_unit -> translation_unit SEMICOLON
-- On REGISTER reduce production translation_unit -> translation_unit SEMICOLON
-- On PRAGMA reduce production translation_unit -> translation_unit SEMICOLON
-- On PACKED reduce production translation_unit -> translation_unit SEMICOLON
-- On LONG reduce production translation_unit -> translation_unit SEMICOLON
-- On INT reduce production translation_unit -> translation_unit SEMICOLON
-- On INLINE reduce production translation_unit -> translation_unit SEMICOLON
-- On FLOAT reduce production translation_unit -> translation_unit SEMICOLON
-- On EXTERN reduce production translation_unit -> translation_unit SEMICOLON
-- On EOF reduce production translation_unit -> translation_unit SEMICOLON
-- On ENUM reduce production translation_unit -> translation_unit SEMICOLON
-- On DOUBLE reduce production translation_unit -> translation_unit SEMICOLON
-- On CONST reduce production translation_unit -> translation_unit SEMICOLON
-- On CHAR reduce production translation_unit -> translation_unit SEMICOLON
-- On AUTO reduce production translation_unit -> translation_unit SEMICOLON
-- On ATTRIBUTE reduce production translation_unit -> translation_unit SEMICOLON
-- On ALIGNAS reduce production translation_unit -> translation_unit SEMICOLON

State 351:
## Known stack suffix:
## translation_unit EOF
## LR(1) items:
translation_unit_file -> translation_unit EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production translation_unit_file -> translation_unit EOF

State 352:
## Known stack suffix:
## list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) . declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) . type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) . TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) . declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) . TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) . type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On TYPEDEF shift to state 353
-- On STRUCT shift to state 188
-- On STATIC shift to state 6
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On INLINE shift to state 236
-- On FLOAT shift to state 193
-- On EXTERN shift to state 237
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 359
-- On type_qualifier shift to state 239
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On enum_specifier shift to state 255
-- On declaration_specifier_no_type shift to state 363
-- On attribute_specifier shift to state 187
## Reductions:

State 353:
## Known stack suffix:
## list(declaration_specifier_no_type) TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF . list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF . list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 354
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 354:
## Known stack suffix:
## list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) . TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) . type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On TYPEDEF_NAME shift to state 355
-- On STRUCT shift to state 188
-- On STATIC shift to state 6
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On INLINE shift to state 236
-- On FLOAT shift to state 193
-- On EXTERN shift to state 237
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 357
-- On type_qualifier shift to state 239
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On enum_specifier shift to state 255
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:

State 355:
## Known stack suffix:
## list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 356
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 356:
## Known stack suffix:
## list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VAR_NAME TYPEDEF_NAME STATIC STAR SEMICOLON RESTRICT REGISTER PACKED LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 6
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On INLINE shift to state 236
-- On EXTERN shift to state 237
-- On CONST shift to state 154
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 239
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type)
-- On TYPEDEF_NAME reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type)
-- On STAR reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type)
-- On SEMICOLON reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type)
-- On LPAREN reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type)

State 357:
## Known stack suffix:
## list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name . list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_typedef_name) shift to state 358
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_typedef_name) ->
-- On VOID reduce production list(declaration_specifier_no_typedef_name) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNION reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_typedef_name) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On STRUCT reduce production list(declaration_specifier_no_typedef_name) ->
-- On STATIC reduce production list(declaration_specifier_no_typedef_name) ->
-- On STAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On SIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On SHORT reduce production list(declaration_specifier_no_typedef_name) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_typedef_name) ->
-- On RESTRICT reduce production list(declaration_specifier_no_typedef_name) ->
-- On REGISTER reduce production list(declaration_specifier_no_typedef_name) ->
-- On PACKED reduce production list(declaration_specifier_no_typedef_name) ->
-- On LPAREN reduce production list(declaration_specifier_no_typedef_name) ->
-- On LONG reduce production list(declaration_specifier_no_typedef_name) ->
-- On INT reduce production list(declaration_specifier_no_typedef_name) ->
-- On INLINE reduce production list(declaration_specifier_no_typedef_name) ->
-- On FLOAT reduce production list(declaration_specifier_no_typedef_name) ->
-- On EXTERN reduce production list(declaration_specifier_no_typedef_name) ->
-- On ENUM reduce production list(declaration_specifier_no_typedef_name) ->
-- On DOUBLE reduce production list(declaration_specifier_no_typedef_name) ->
-- On CONST reduce production list(declaration_specifier_no_typedef_name) ->
-- On CHAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On AUTO reduce production list(declaration_specifier_no_typedef_name) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_typedef_name) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_typedef_name) ->

State 358:
## Known stack suffix:
## list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PACKED LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On STRUCT shift to state 188
-- On STATIC shift to state 6
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On INLINE shift to state 236
-- On FLOAT shift to state 193
-- On EXTERN shift to state 237
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 251
-- On type_qualifier shift to state 252
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On storage_class_specifier_no_typedef shift to state 253
-- On function_specifier shift to state 254
-- On enum_specifier shift to state 255
-- On declaration_specifier_no_typedef_name shift to state 256
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On TYPEDEF_NAME reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On STAR reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On SEMICOLON reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On LPAREN reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)

State 359:
## Known stack suffix:
## list(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name . list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name . list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_typedef_name) shift to state 360
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_typedef_name) ->
-- On VOID reduce production list(declaration_specifier_no_typedef_name) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNION reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_typedef_name) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_typedef_name) ->
-- On STRUCT reduce production list(declaration_specifier_no_typedef_name) ->
-- On STATIC reduce production list(declaration_specifier_no_typedef_name) ->
-- On STAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On SIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On SHORT reduce production list(declaration_specifier_no_typedef_name) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_typedef_name) ->
-- On RESTRICT reduce production list(declaration_specifier_no_typedef_name) ->
-- On REGISTER reduce production list(declaration_specifier_no_typedef_name) ->
-- On PACKED reduce production list(declaration_specifier_no_typedef_name) ->
-- On LPAREN reduce production list(declaration_specifier_no_typedef_name) ->
-- On LONG reduce production list(declaration_specifier_no_typedef_name) ->
-- On INT reduce production list(declaration_specifier_no_typedef_name) ->
-- On INLINE reduce production list(declaration_specifier_no_typedef_name) ->
-- On FLOAT reduce production list(declaration_specifier_no_typedef_name) ->
-- On EXTERN reduce production list(declaration_specifier_no_typedef_name) ->
-- On ENUM reduce production list(declaration_specifier_no_typedef_name) ->
-- On DOUBLE reduce production list(declaration_specifier_no_typedef_name) ->
-- On CONST reduce production list(declaration_specifier_no_typedef_name) ->
-- On CHAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On AUTO reduce production list(declaration_specifier_no_typedef_name) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_typedef_name) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_typedef_name) ->

State 360:
## Known stack suffix:
## list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) . TYPEDEF list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PACKED LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On TYPEDEF shift to state 361
-- On STRUCT shift to state 188
-- On STATIC shift to state 6
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On INLINE shift to state 236
-- On FLOAT shift to state 193
-- On EXTERN shift to state 237
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 251
-- On type_qualifier shift to state 252
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On storage_class_specifier_no_typedef shift to state 253
-- On function_specifier shift to state 254
-- On enum_specifier shift to state 255
-- On declaration_specifier_no_typedef_name shift to state 256
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On TYPEDEF_NAME reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On STAR reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On SEMICOLON reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On LPAREN reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)

State 361:
## Known stack suffix:
## list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF . list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_typedef_name) shift to state 362
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_typedef_name) ->
-- On VOID reduce production list(declaration_specifier_no_typedef_name) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNION reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_typedef_name) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On STRUCT reduce production list(declaration_specifier_no_typedef_name) ->
-- On STATIC reduce production list(declaration_specifier_no_typedef_name) ->
-- On STAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On SIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On SHORT reduce production list(declaration_specifier_no_typedef_name) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_typedef_name) ->
-- On RESTRICT reduce production list(declaration_specifier_no_typedef_name) ->
-- On REGISTER reduce production list(declaration_specifier_no_typedef_name) ->
-- On PACKED reduce production list(declaration_specifier_no_typedef_name) ->
-- On LPAREN reduce production list(declaration_specifier_no_typedef_name) ->
-- On LONG reduce production list(declaration_specifier_no_typedef_name) ->
-- On INT reduce production list(declaration_specifier_no_typedef_name) ->
-- On INLINE reduce production list(declaration_specifier_no_typedef_name) ->
-- On FLOAT reduce production list(declaration_specifier_no_typedef_name) ->
-- On EXTERN reduce production list(declaration_specifier_no_typedef_name) ->
-- On ENUM reduce production list(declaration_specifier_no_typedef_name) ->
-- On DOUBLE reduce production list(declaration_specifier_no_typedef_name) ->
-- On CONST reduce production list(declaration_specifier_no_typedef_name) ->
-- On CHAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On AUTO reduce production list(declaration_specifier_no_typedef_name) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_typedef_name) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_typedef_name) ->

State 362:
## Known stack suffix:
## list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name)
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PACKED LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On STRUCT shift to state 188
-- On STATIC shift to state 6
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On INLINE shift to state 236
-- On FLOAT shift to state 193
-- On EXTERN shift to state 237
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 251
-- On type_qualifier shift to state 252
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On storage_class_specifier_no_typedef shift to state 253
-- On function_specifier shift to state 254
-- On enum_specifier shift to state 255
-- On declaration_specifier_no_typedef_name shift to state 256
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name)
-- On TYPEDEF_NAME reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name)
-- On STAR reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name)
-- On SEMICOLON reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name)
-- On LPAREN reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name)

State 363:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) declaration_specifier_no_type . TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type . TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On TYPEDEF_NAME shift to state 364
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On VOID reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNSIGNED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNION reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On TYPEDEF reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On STRUCT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On STATIC reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On SIGNED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On SHORT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On RESTRICT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On REGISTER reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On PACKED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On LONG reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On INT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On INLINE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On FLOAT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On EXTERN reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ENUM reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On DOUBLE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On CONST reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On CHAR reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On AUTO reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ALIGNAS reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type

State 364:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME . list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 365
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 365:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) . TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VAR_NAME TYPEDEF_NAME TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PACKED LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TYPEDEF shift to state 366
-- On STATIC shift to state 6
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On INLINE shift to state 236
-- On EXTERN shift to state 237
-- On CONST shift to state 154
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 239
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On TYPEDEF_NAME reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On STAR reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On SEMICOLON reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On LPAREN reduce production declaration_specifiers(declaration(external_declaration)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)

State 366:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 367
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 367:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VAR_NAME TYPEDEF_NAME STATIC STAR SEMICOLON RESTRICT REGISTER PACKED LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On STATIC shift to state 6
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On INLINE shift to state 236
-- On EXTERN shift to state 237
-- On CONST shift to state 154
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 239
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
-- On TYPEDEF_NAME reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
-- On STAR reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
-- On SEMICOLON reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)
-- On LPAREN reduce production declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type)

State 368:
## Known stack suffix:
## function_definition_begin
## LR(1) items:
function_definition -> function_definition_begin . LBRACE option(block_item_list) close_context RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On LBRACE shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## function_definition_begin LBRACE
## LR(1) items:
function_definition -> function_definition_begin LBRACE . option(block_item_list) close_context RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On option(block_item_list) shift to state 370
-- On block_item_list shift to state 642
## Reductions:
-- On WHILE reduce production option(block_item_list) ->
-- On VOLATILE reduce production option(block_item_list) ->
-- On VOID reduce production option(block_item_list) ->
-- On VAR_NAME reduce production option(block_item_list) ->
-- On UNSIGNED reduce production option(block_item_list) ->
-- On UNION reduce production option(block_item_list) ->
-- On UNDERSCORE_BOOL reduce production option(block_item_list) ->
-- On TYPEDEF_NAME reduce production option(block_item_list) ->
-- On TYPEDEF reduce production option(block_item_list) ->
-- On TILDE reduce production option(block_item_list) ->
-- On SWITCH reduce production option(block_item_list) ->
-- On STRUCT reduce production option(block_item_list) ->
-- On STRING_LITERAL reduce production option(block_item_list) ->
-- On STATIC reduce production option(block_item_list) ->
-- On STAR reduce production option(block_item_list) ->
-- On SIZEOF reduce production option(block_item_list) ->
-- On SIGNED reduce production option(block_item_list) ->
-- On SHORT reduce production option(block_item_list) ->
-- On SEMICOLON reduce production option(block_item_list) ->
-- On RETURN reduce production option(block_item_list) ->
-- On RESTRICT reduce production option(block_item_list) ->
-- On REGISTER reduce production option(block_item_list) ->
-- On RBRACE reduce production option(block_item_list) ->
-- On PRAGMA reduce production option(block_item_list) ->
-- On PLUS reduce production option(block_item_list) ->
-- On PACKED reduce production option(block_item_list) ->
-- On MINUS reduce production option(block_item_list) ->
-- On LPAREN reduce production option(block_item_list) ->
-- On LONG reduce production option(block_item_list) ->
-- On LBRACE reduce production option(block_item_list) ->
-- On INT reduce production option(block_item_list) ->
-- On INLINE reduce production option(block_item_list) ->
-- On INC reduce production option(block_item_list) ->
-- On IF reduce production option(block_item_list) ->
-- On GOTO reduce production option(block_item_list) ->
-- On FOR reduce production option(block_item_list) ->
-- On FLOAT reduce production option(block_item_list) ->
-- On EXTERN reduce production option(block_item_list) ->
-- On ENUM reduce production option(block_item_list) ->
-- On DOUBLE reduce production option(block_item_list) ->
-- On DO reduce production option(block_item_list) ->
-- On DEFAULT reduce production option(block_item_list) ->
-- On DEC reduce production option(block_item_list) ->
-- On CONTINUE reduce production option(block_item_list) ->
-- On CONSTANT reduce production option(block_item_list) ->
-- On CONST reduce production option(block_item_list) ->
-- On CHAR reduce production option(block_item_list) ->
-- On CASE reduce production option(block_item_list) ->
-- On BUILTIN_VA_ARG reduce production option(block_item_list) ->
-- On BREAK reduce production option(block_item_list) ->
-- On BANG reduce production option(block_item_list) ->
-- On AUTO reduce production option(block_item_list) ->
-- On ATTRIBUTE reduce production option(block_item_list) ->
-- On ASM reduce production option(block_item_list) ->
-- On AND reduce production option(block_item_list) ->
-- On ALIGNOF reduce production option(block_item_list) ->
-- On ALIGNAS reduce production option(block_item_list) ->

State 370:
## Known stack suffix:
## function_definition_begin LBRACE option(block_item_list)
## LR(1) items:
block_item_list -> option(block_item_list) . block_item [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
function_definition -> function_definition_begin LBRACE option(block_item_list) . close_context RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On WHILE shift to state 371
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 392
-- On TILDE shift to state 12
-- On SWITCH shift to state 394
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 569
-- On PRAGMA shift to state 572
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 573
-- On INC shift to state 20
-- On IF shift to state 576
-- On GOTO shift to state 584
-- On FOR shift to state 587
-- On DO shift to state 594
-- On DEFAULT shift to state 604
-- On DEC shift to state 22
-- On CONTINUE shift to state 606
-- On CONSTANT shift to state 23
-- On CASE shift to state 608
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 611
-- On BANG shift to state 26
-- On ASM shift to state 613
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_noclose shift to state 637
-- On shift_expression shift to state 54
-- On selection_statement_finish(open_context) shift to state 621
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 622
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On list(declaration_specifier_no_type) shift to state 421
-- On labeled_statement(statement_finish_noclose) shift to state 624
-- On jump_statement(nop) shift to state 625
-- On iteration_statement(open_context,statement_finish_close) shift to state 626
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(open_context) shift to state 627
-- On general_identifier shift to state 630
-- On expression_statement(nop) shift to state 633
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On declaration_specifiers_typedef shift to state 514
-- On declaration_specifiers(declaration(block_item)) shift to state 523
-- On declaration(block_item) shift to state 638
-- On conditional_expression shift to state 99
-- On compound_statement(open_context) shift to state 634
-- On close_context shift to state 646
-- On cast_expression shift to state 64
-- On block_item shift to state 641
-- On assignment_expression shift to state 103
-- On asm_statement(nop) shift to state 635
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production option(expression) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On RBRACE reduce production close_context ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 371:
## Known stack suffix:
## WHILE
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> WHILE . open_context LPAREN expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On open_context shift to state 372
## Reductions:
-- On LPAREN reduce production open_context ->

State 372:
## Known stack suffix:
## WHILE open_context
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> WHILE open_context . LPAREN expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 373
## Reductions:

State 373:
## Known stack suffix:
## WHILE open_context LPAREN
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN . expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 374
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 374:
## Known stack suffix:
## WHILE open_context LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression . RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 375
-- On COMMA shift to state 98
## Reductions:

State 375:
## Known stack suffix:
## WHILE open_context LPAREN expression RPAREN
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 645
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 376:
## Known stack suffix:
## WHILE
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> WHILE . LPAREN expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> WHILE LPAREN . expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 378
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 378:
## Known stack suffix:
## WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression . RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 379
-- On COMMA shift to state 98
## Reductions:

State 379:
## Known stack suffix:
## WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 565
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 380:
## Known stack suffix:
## VAR_NAME
## LR(1) items:
general_identifier -> VAR_NAME . [ COLON ]
primary_expression -> VAR_NAME . [ XOR_ASSIGN SUB_ASSIGN STAR SLASH SEMICOLON RIGHT_ASSIGN RIGHT QUESTION PTR PLUS PERCENT OR_ASSIGN NEQ MUL_ASSIGN MOD_ASSIGN MINUS LT LPAREN LEQ LEFT_ASSIGN LEFT LBRACK INC HAT GT GEQ EQEQ EQ DOT DIV_ASSIGN DEC COMMA BARBAR BAR AND_ASSIGN ANDAND AND ADD_ASSIGN ]
## Transitions:
## Reductions:
-- On XOR_ASSIGN reduce production primary_expression -> VAR_NAME
-- On SUB_ASSIGN reduce production primary_expression -> VAR_NAME
-- On STAR reduce production primary_expression -> VAR_NAME
-- On SLASH reduce production primary_expression -> VAR_NAME
-- On SEMICOLON reduce production primary_expression -> VAR_NAME
-- On RIGHT_ASSIGN reduce production primary_expression -> VAR_NAME
-- On RIGHT reduce production primary_expression -> VAR_NAME
-- On QUESTION reduce production primary_expression -> VAR_NAME
-- On PTR reduce production primary_expression -> VAR_NAME
-- On PLUS reduce production primary_expression -> VAR_NAME
-- On PERCENT reduce production primary_expression -> VAR_NAME
-- On OR_ASSIGN reduce production primary_expression -> VAR_NAME
-- On NEQ reduce production primary_expression -> VAR_NAME
-- On MUL_ASSIGN reduce production primary_expression -> VAR_NAME
-- On MOD_ASSIGN reduce production primary_expression -> VAR_NAME
-- On MINUS reduce production primary_expression -> VAR_NAME
-- On LT reduce production primary_expression -> VAR_NAME
-- On LPAREN reduce production primary_expression -> VAR_NAME
-- On LEQ reduce production primary_expression -> VAR_NAME
-- On LEFT_ASSIGN reduce production primary_expression -> VAR_NAME
-- On LEFT reduce production primary_expression -> VAR_NAME
-- On LBRACK reduce production primary_expression -> VAR_NAME
-- On INC reduce production primary_expression -> VAR_NAME
-- On HAT reduce production primary_expression -> VAR_NAME
-- On GT reduce production primary_expression -> VAR_NAME
-- On GEQ reduce production primary_expression -> VAR_NAME
-- On EQEQ reduce production primary_expression -> VAR_NAME
-- On EQ reduce production primary_expression -> VAR_NAME
-- On DOT reduce production primary_expression -> VAR_NAME
-- On DIV_ASSIGN reduce production primary_expression -> VAR_NAME
-- On DEC reduce production primary_expression -> VAR_NAME
-- On COMMA reduce production primary_expression -> VAR_NAME
-- On COLON reduce production general_identifier -> VAR_NAME
-- On BARBAR reduce production primary_expression -> VAR_NAME
-- On BAR reduce production primary_expression -> VAR_NAME
-- On AND_ASSIGN reduce production primary_expression -> VAR_NAME
-- On ANDAND reduce production primary_expression -> VAR_NAME
-- On AND reduce production primary_expression -> VAR_NAME
-- On ADD_ASSIGN reduce production primary_expression -> VAR_NAME

State 381:
## Known stack suffix:
## SWITCH
## LR(1) items:
selection_statement_finish(nop) -> SWITCH . LPAREN expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## SWITCH LPAREN
## LR(1) items:
selection_statement_finish(nop) -> SWITCH LPAREN . expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 383
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 383:
## Known stack suffix:
## SWITCH LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
selection_statement_finish(nop) -> SWITCH LPAREN expression . RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 384
-- On COMMA shift to state 98
## Reductions:

State 384:
## Known stack suffix:
## SWITCH LPAREN expression RPAREN
## LR(1) items:
selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 563
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 385:
## Known stack suffix:
## RETURN
## LR(1) items:
jump_statement(close_context) -> RETURN . option(expression) close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 386
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 386:
## Known stack suffix:
## RETURN option(expression)
## LR(1) items:
jump_statement(close_context) -> RETURN option(expression) . close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On close_context shift to state 387
## Reductions:
-- On SEMICOLON reduce production close_context ->

State 387:
## Known stack suffix:
## RETURN option(expression) close_context
## LR(1) items:
jump_statement(close_context) -> RETURN option(expression) close_context . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## RETURN option(expression) close_context SEMICOLON
## LR(1) items:
jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On VOLATILE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On VOID reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On VAR_NAME reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On UNSIGNED reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On UNION reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On UNDERSCORE_BOOL reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On TYPEDEF_NAME reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On TYPEDEF reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On TILDE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On SWITCH reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On STRUCT reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On STRING_LITERAL reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On STATIC reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On STAR reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On SIZEOF reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On SIGNED reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On SHORT reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On SEMICOLON reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On RETURN reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On RESTRICT reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On REGISTER reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On RBRACE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On PRAGMA reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On PLUS reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On PACKED reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On MINUS reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On LPAREN reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On LONG reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On LBRACE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On INT reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On INLINE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On INC reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On IF reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On GOTO reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On FOR reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On FLOAT reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On EXTERN reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On ENUM reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On ELSE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On DOUBLE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On DO reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On DEFAULT reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On DEC reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On CONTINUE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On CONSTANT reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On CONST reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On CHAR reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On CASE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On BUILTIN_VA_ARG reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On BREAK reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On BANG reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On AUTO reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On ATTRIBUTE reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On ASM reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On AND reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On ALIGNOF reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON
-- On ALIGNAS reduce production jump_statement(close_context) -> RETURN option(expression) close_context SEMICOLON

State 389:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ SEMICOLON COMMA ]
option(expression) -> expression . [ SEMICOLON ]
## Transitions:
-- On COMMA shift to state 98
## Reductions:
-- On SEMICOLON reduce production option(expression) -> expression

State 390:
## Known stack suffix:
## LBRACE
## LR(1) items:
compound_statement(nop) -> LBRACE . option(block_item_list) close_context RBRACE [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On option(block_item_list) shift to state 391
-- On block_item_list shift to state 642
## Reductions:
-- On WHILE reduce production option(block_item_list) ->
-- On VOLATILE reduce production option(block_item_list) ->
-- On VOID reduce production option(block_item_list) ->
-- On VAR_NAME reduce production option(block_item_list) ->
-- On UNSIGNED reduce production option(block_item_list) ->
-- On UNION reduce production option(block_item_list) ->
-- On UNDERSCORE_BOOL reduce production option(block_item_list) ->
-- On TYPEDEF_NAME reduce production option(block_item_list) ->
-- On TYPEDEF reduce production option(block_item_list) ->
-- On TILDE reduce production option(block_item_list) ->
-- On SWITCH reduce production option(block_item_list) ->
-- On STRUCT reduce production option(block_item_list) ->
-- On STRING_LITERAL reduce production option(block_item_list) ->
-- On STATIC reduce production option(block_item_list) ->
-- On STAR reduce production option(block_item_list) ->
-- On SIZEOF reduce production option(block_item_list) ->
-- On SIGNED reduce production option(block_item_list) ->
-- On SHORT reduce production option(block_item_list) ->
-- On SEMICOLON reduce production option(block_item_list) ->
-- On RETURN reduce production option(block_item_list) ->
-- On RESTRICT reduce production option(block_item_list) ->
-- On REGISTER reduce production option(block_item_list) ->
-- On RBRACE reduce production option(block_item_list) ->
-- On PRAGMA reduce production option(block_item_list) ->
-- On PLUS reduce production option(block_item_list) ->
-- On PACKED reduce production option(block_item_list) ->
-- On MINUS reduce production option(block_item_list) ->
-- On LPAREN reduce production option(block_item_list) ->
-- On LONG reduce production option(block_item_list) ->
-- On LBRACE reduce production option(block_item_list) ->
-- On INT reduce production option(block_item_list) ->
-- On INLINE reduce production option(block_item_list) ->
-- On INC reduce production option(block_item_list) ->
-- On IF reduce production option(block_item_list) ->
-- On GOTO reduce production option(block_item_list) ->
-- On FOR reduce production option(block_item_list) ->
-- On FLOAT reduce production option(block_item_list) ->
-- On EXTERN reduce production option(block_item_list) ->
-- On ENUM reduce production option(block_item_list) ->
-- On DOUBLE reduce production option(block_item_list) ->
-- On DO reduce production option(block_item_list) ->
-- On DEFAULT reduce production option(block_item_list) ->
-- On DEC reduce production option(block_item_list) ->
-- On CONTINUE reduce production option(block_item_list) ->
-- On CONSTANT reduce production option(block_item_list) ->
-- On CONST reduce production option(block_item_list) ->
-- On CHAR reduce production option(block_item_list) ->
-- On CASE reduce production option(block_item_list) ->
-- On BUILTIN_VA_ARG reduce production option(block_item_list) ->
-- On BREAK reduce production option(block_item_list) ->
-- On BANG reduce production option(block_item_list) ->
-- On AUTO reduce production option(block_item_list) ->
-- On ATTRIBUTE reduce production option(block_item_list) ->
-- On ASM reduce production option(block_item_list) ->
-- On AND reduce production option(block_item_list) ->
-- On ALIGNOF reduce production option(block_item_list) ->
-- On ALIGNAS reduce production option(block_item_list) ->

State 391:
## Known stack suffix:
## LBRACE option(block_item_list)
## LR(1) items:
block_item_list -> option(block_item_list) . block_item [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
compound_statement(nop) -> LBRACE option(block_item_list) . close_context RBRACE [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 371
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 392
-- On TILDE shift to state 12
-- On SWITCH shift to state 394
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 569
-- On PRAGMA shift to state 572
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 573
-- On INC shift to state 20
-- On IF shift to state 576
-- On GOTO shift to state 584
-- On FOR shift to state 587
-- On DO shift to state 594
-- On DEFAULT shift to state 604
-- On DEC shift to state 22
-- On CONTINUE shift to state 606
-- On CONSTANT shift to state 23
-- On CASE shift to state 608
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 611
-- On BANG shift to state 26
-- On ASM shift to state 613
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_noclose shift to state 637
-- On shift_expression shift to state 54
-- On selection_statement_finish(open_context) shift to state 621
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 622
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On list(declaration_specifier_no_type) shift to state 421
-- On labeled_statement(statement_finish_noclose) shift to state 624
-- On jump_statement(nop) shift to state 625
-- On iteration_statement(open_context,statement_finish_close) shift to state 626
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(open_context) shift to state 627
-- On general_identifier shift to state 630
-- On expression_statement(nop) shift to state 633
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On declaration_specifiers_typedef shift to state 514
-- On declaration_specifiers(declaration(block_item)) shift to state 523
-- On declaration(block_item) shift to state 638
-- On conditional_expression shift to state 99
-- On compound_statement(open_context) shift to state 634
-- On close_context shift to state 643
-- On cast_expression shift to state 64
-- On block_item shift to state 641
-- On assignment_expression shift to state 103
-- On asm_statement(nop) shift to state 635
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production option(expression) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On RBRACE reduce production close_context ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 392:
## Known stack suffix:
## TYPEDEF_NAME
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> TYPEDEF_NAME . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> TYPEDEF_NAME . list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
general_identifier -> TYPEDEF_NAME . [ COLON ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 393
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On COLON reduce production general_identifier -> TYPEDEF_NAME
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 393:
## Known stack suffix:
## TYPEDEF_NAME list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> TYPEDEF_NAME list(declaration_specifier_no_type) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> TYPEDEF_NAME list(declaration_specifier_no_type) . TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VAR_NAME TYPEDEF_NAME TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PACKED LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TYPEDEF shift to state 4
-- On STATIC shift to state 6
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On INLINE shift to state 236
-- On EXTERN shift to state 237
-- On CONST shift to state 154
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 239
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers(declaration(block_item)) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On TYPEDEF_NAME reduce production declaration_specifiers(declaration(block_item)) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On STAR reduce production declaration_specifiers(declaration(block_item)) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On SEMICOLON reduce production declaration_specifiers(declaration(block_item)) -> TYPEDEF_NAME list(declaration_specifier_no_type)
-- On LPAREN reduce production declaration_specifiers(declaration(block_item)) -> TYPEDEF_NAME list(declaration_specifier_no_type)

State 394:
## Known stack suffix:
## SWITCH
## LR(1) items:
selection_statement_finish(open_context) -> SWITCH . open_context LPAREN expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On open_context shift to state 395
## Reductions:
-- On LPAREN reduce production open_context ->

State 395:
## Known stack suffix:
## SWITCH open_context
## LR(1) items:
selection_statement_finish(open_context) -> SWITCH open_context . LPAREN expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 396
## Reductions:

State 396:
## Known stack suffix:
## SWITCH open_context LPAREN
## LR(1) items:
selection_statement_finish(open_context) -> SWITCH open_context LPAREN . expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 397
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 397:
## Known stack suffix:
## SWITCH open_context LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression . RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 398
-- On COMMA shift to state 98
## Reductions:

State 398:
## Known stack suffix:
## SWITCH open_context LPAREN expression RPAREN
## LR(1) items:
selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 568
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 399:
## Known stack suffix:
## IF
## LR(1) items:
if_else_statement_begin(nop) -> IF . LPAREN expression RPAREN save_contexts_stk statement_intern_close [ ELSE ]
selection_statement_finish(nop) -> IF . LPAREN expression RPAREN save_contexts_stk statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
if_else_statement_begin(nop) -> IF LPAREN . expression RPAREN save_contexts_stk statement_intern_close [ ELSE ]
selection_statement_finish(nop) -> IF LPAREN . expression RPAREN save_contexts_stk statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 401
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 401:
## Known stack suffix:
## IF LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
if_else_statement_begin(nop) -> IF LPAREN expression . RPAREN save_contexts_stk statement_intern_close [ ELSE ]
selection_statement_finish(nop) -> IF LPAREN expression . RPAREN save_contexts_stk statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 402
-- On COMMA shift to state 98
## Reductions:

State 402:
## Known stack suffix:
## IF LPAREN expression RPAREN
## LR(1) items:
if_else_statement_begin(nop) -> IF LPAREN expression RPAREN . save_contexts_stk statement_intern_close [ ELSE ]
selection_statement_finish(nop) -> IF LPAREN expression RPAREN . save_contexts_stk statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On save_contexts_stk shift to state 403
## Reductions:
-- On WHILE reduce production save_contexts_stk ->
-- On VAR_NAME reduce production save_contexts_stk ->
-- On TYPEDEF_NAME reduce production save_contexts_stk ->
-- On TILDE reduce production save_contexts_stk ->
-- On SWITCH reduce production save_contexts_stk ->
-- On STRING_LITERAL reduce production save_contexts_stk ->
-- On STAR reduce production save_contexts_stk ->
-- On SIZEOF reduce production save_contexts_stk ->
-- On SEMICOLON reduce production save_contexts_stk ->
-- On RETURN reduce production save_contexts_stk ->
-- On PLUS reduce production save_contexts_stk ->
-- On MINUS reduce production save_contexts_stk ->
-- On LPAREN reduce production save_contexts_stk ->
-- On LBRACE reduce production save_contexts_stk ->
-- On INC reduce production save_contexts_stk ->
-- On IF reduce production save_contexts_stk ->
-- On GOTO reduce production save_contexts_stk ->
-- On FOR reduce production save_contexts_stk ->
-- On DO reduce production save_contexts_stk ->
-- On DEFAULT reduce production save_contexts_stk ->
-- On DEC reduce production save_contexts_stk ->
-- On CONTINUE reduce production save_contexts_stk ->
-- On CONSTANT reduce production save_contexts_stk ->
-- On CASE reduce production save_contexts_stk ->
-- On BUILTIN_VA_ARG reduce production save_contexts_stk ->
-- On BREAK reduce production save_contexts_stk ->
-- On BANG reduce production save_contexts_stk ->
-- On ASM reduce production save_contexts_stk ->
-- On AND reduce production save_contexts_stk ->
-- On ALIGNOF reduce production save_contexts_stk ->

State 403:
## Known stack suffix:
## IF LPAREN expression RPAREN save_contexts_stk
## LR(1) items:
if_else_statement_begin(nop) -> IF LPAREN expression RPAREN save_contexts_stk . statement_intern_close [ ELSE ]
selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 404
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 408
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 416
-- On DO shift to state 431
-- On DEFAULT shift to state 541
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 543
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_intern_close shift to state 566
-- On statement_finish_close shift to state 567
-- On shift_expression shift to state 54
-- On selection_statement_intern_close shift to state 547
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_intern_close) shift to state 548
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 549
-- On iteration_statement(nop,statement_intern_close) shift to state 550
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 551
-- On general_identifier shift to state 554
-- On expression_statement(close_context) shift to state 557
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 558
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 559
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 404:
## Known stack suffix:
## WHILE
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> WHILE . LPAREN expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> WHILE . LPAREN expression RPAREN statement_intern_close [ ELSE ]
## Transitions:
-- On LPAREN shift to state 405
## Reductions:

State 405:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> WHILE LPAREN . expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> WHILE LPAREN . expression RPAREN statement_intern_close [ ELSE ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 406
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 406:
## Known stack suffix:
## WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression . RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> WHILE LPAREN expression . RPAREN statement_intern_close [ ELSE ]
## Transitions:
-- On RPAREN shift to state 407
-- On COMMA shift to state 98
## Reductions:

State 407:
## Known stack suffix:
## WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> WHILE LPAREN expression RPAREN . statement_intern_close [ ELSE ]
## Transitions:
-- On WHILE shift to state 404
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 408
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 416
-- On DO shift to state 431
-- On DEFAULT shift to state 541
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 543
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_intern_close shift to state 564
-- On statement_finish_close shift to state 565
-- On shift_expression shift to state 54
-- On selection_statement_intern_close shift to state 547
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_intern_close) shift to state 548
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 549
-- On iteration_statement(nop,statement_intern_close) shift to state 550
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 551
-- On general_identifier shift to state 554
-- On expression_statement(close_context) shift to state 557
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 558
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 559
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 408:
## Known stack suffix:
## SWITCH
## LR(1) items:
selection_statement_finish(nop) -> SWITCH . LPAREN expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
selection_statement_intern_close -> SWITCH . LPAREN expression RPAREN statement_intern_close [ ELSE ]
## Transitions:
-- On LPAREN shift to state 409
## Reductions:

State 409:
## Known stack suffix:
## SWITCH LPAREN
## LR(1) items:
selection_statement_finish(nop) -> SWITCH LPAREN . expression RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
selection_statement_intern_close -> SWITCH LPAREN . expression RPAREN statement_intern_close [ ELSE ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 410
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 410:
## Known stack suffix:
## SWITCH LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
selection_statement_finish(nop) -> SWITCH LPAREN expression . RPAREN statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
selection_statement_intern_close -> SWITCH LPAREN expression . RPAREN statement_intern_close [ ELSE ]
## Transitions:
-- On RPAREN shift to state 411
-- On COMMA shift to state 98
## Reductions:

State 411:
## Known stack suffix:
## SWITCH LPAREN expression RPAREN
## LR(1) items:
selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
selection_statement_intern_close -> SWITCH LPAREN expression RPAREN . statement_intern_close [ ELSE ]
## Transitions:
-- On WHILE shift to state 404
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 408
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 416
-- On DO shift to state 431
-- On DEFAULT shift to state 541
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 543
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_intern_close shift to state 562
-- On statement_finish_close shift to state 563
-- On shift_expression shift to state 54
-- On selection_statement_intern_close shift to state 547
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_intern_close) shift to state 548
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 549
-- On iteration_statement(nop,statement_intern_close) shift to state 550
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 551
-- On general_identifier shift to state 554
-- On expression_statement(close_context) shift to state 557
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 558
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 559
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 412:
## Known stack suffix:
## GOTO
## LR(1) items:
jump_statement(close_context) -> GOTO . general_identifier close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On general_identifier shift to state 413
## Reductions:

State 413:
## Known stack suffix:
## GOTO general_identifier
## LR(1) items:
jump_statement(close_context) -> GOTO general_identifier . close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On close_context shift to state 414
## Reductions:
-- On SEMICOLON reduce production close_context ->

State 414:
## Known stack suffix:
## GOTO general_identifier close_context
## LR(1) items:
jump_statement(close_context) -> GOTO general_identifier close_context . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 415
## Reductions:

State 415:
## Known stack suffix:
## GOTO general_identifier close_context SEMICOLON
## LR(1) items:
jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On VOLATILE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On VOID reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On VAR_NAME reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On UNSIGNED reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On UNION reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On UNDERSCORE_BOOL reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On TYPEDEF_NAME reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On TYPEDEF reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On TILDE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On SWITCH reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On STRUCT reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On STRING_LITERAL reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On STATIC reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On STAR reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On SIZEOF reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On SIGNED reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On SHORT reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On SEMICOLON reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On RETURN reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On RESTRICT reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On REGISTER reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On RBRACE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On PRAGMA reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On PLUS reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On PACKED reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On MINUS reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On LPAREN reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On LONG reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On LBRACE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On INT reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On INLINE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On INC reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On IF reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On GOTO reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On FOR reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On FLOAT reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On EXTERN reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On ENUM reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On ELSE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On DOUBLE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On DO reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On DEFAULT reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On DEC reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On CONTINUE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On CONSTANT reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On CONST reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On CHAR reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On CASE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On BUILTIN_VA_ARG reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On BREAK reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On BANG reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On AUTO reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On ATTRIBUTE reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On ASM reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On AND reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On ALIGNOF reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON
-- On ALIGNAS reduce production jump_statement(close_context) -> GOTO general_identifier close_context SEMICOLON

State 416:
## Known stack suffix:
## FOR
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR . LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> FOR . LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_intern_close [ ELSE ]
## Transitions:
-- On LPAREN shift to state 417
## Reductions:

State 417:
## Known stack suffix:
## FOR LPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR LPAREN . for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> FOR LPAREN . for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_intern_close [ ELSE ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TYPEDEF_NAME shift to state 418
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On SEMICOLON shift to state 419
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(expression,SEMICOLON) shift to state 420
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On list(declaration_specifier_no_type) shift to state 421
-- On inclusive_or_expression shift to state 96
-- On for_statement_header shift to state 427
-- On expression shift to state 512
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On declaration_specifiers_typedef shift to state 514
-- On declaration_specifiers(declaration(block_item)) shift to state 523
-- On declaration(block_item) shift to state 533
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 418:
## Known stack suffix:
## TYPEDEF_NAME
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> TYPEDEF_NAME . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> TYPEDEF_NAME . list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 393
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 419:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
optional(expression,SEMICOLON) -> SEMICOLON . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On TILDE reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On STRING_LITERAL reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On STAR reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On SIZEOF reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On SEMICOLON reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On RPAREN reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On PLUS reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On MINUS reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On LPAREN reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On INC reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On DEC reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On CONSTANT reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On BUILTIN_VA_ARG reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On BANG reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On AND reduce production optional(expression,SEMICOLON) -> SEMICOLON
-- On ALIGNOF reduce production optional(expression,SEMICOLON) -> SEMICOLON

State 420:
## Known stack suffix:
## optional(expression,SEMICOLON)
## LR(1) items:
for_statement_header -> optional(expression,SEMICOLON) . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF SEMICOLON PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On TILDE reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On STRING_LITERAL reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On STAR reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On SIZEOF reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On SEMICOLON reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On PLUS reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On MINUS reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On LPAREN reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On INC reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On DEC reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On CONSTANT reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On BUILTIN_VA_ARG reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On BANG reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On AND reduce production for_statement_header -> optional(expression,SEMICOLON)
-- On ALIGNOF reduce production for_statement_header -> optional(expression,SEMICOLON)

State 421:
## Known stack suffix:
## list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) . declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) . type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) . TYPEDEF list(declaration_specifier_no_type) TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) . declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) . TYPEDEF list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) . type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On TYPEDEF shift to state 353
-- On STRUCT shift to state 188
-- On STATIC shift to state 6
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On INLINE shift to state 236
-- On FLOAT shift to state 193
-- On EXTERN shift to state 237
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 422
-- On type_qualifier shift to state 239
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On enum_specifier shift to state 255
-- On declaration_specifier_no_type shift to state 424
-- On attribute_specifier shift to state 187
## Reductions:

State 422:
## Known stack suffix:
## list(declaration_specifier_no_type) type_specifier_no_typedef_name
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name . list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name . list(declaration_specifier_no_typedef_name) TYPEDEF list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_typedef_name) shift to state 423
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_typedef_name) ->
-- On VOID reduce production list(declaration_specifier_no_typedef_name) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNION reduce production list(declaration_specifier_no_typedef_name) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_typedef_name) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_typedef_name) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_typedef_name) ->
-- On STRUCT reduce production list(declaration_specifier_no_typedef_name) ->
-- On STATIC reduce production list(declaration_specifier_no_typedef_name) ->
-- On STAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On SIGNED reduce production list(declaration_specifier_no_typedef_name) ->
-- On SHORT reduce production list(declaration_specifier_no_typedef_name) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_typedef_name) ->
-- On RESTRICT reduce production list(declaration_specifier_no_typedef_name) ->
-- On REGISTER reduce production list(declaration_specifier_no_typedef_name) ->
-- On PACKED reduce production list(declaration_specifier_no_typedef_name) ->
-- On LPAREN reduce production list(declaration_specifier_no_typedef_name) ->
-- On LONG reduce production list(declaration_specifier_no_typedef_name) ->
-- On INT reduce production list(declaration_specifier_no_typedef_name) ->
-- On INLINE reduce production list(declaration_specifier_no_typedef_name) ->
-- On FLOAT reduce production list(declaration_specifier_no_typedef_name) ->
-- On EXTERN reduce production list(declaration_specifier_no_typedef_name) ->
-- On ENUM reduce production list(declaration_specifier_no_typedef_name) ->
-- On DOUBLE reduce production list(declaration_specifier_no_typedef_name) ->
-- On CONST reduce production list(declaration_specifier_no_typedef_name) ->
-- On CHAR reduce production list(declaration_specifier_no_typedef_name) ->
-- On AUTO reduce production list(declaration_specifier_no_typedef_name) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_typedef_name) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_typedef_name) ->

State 423:
## Known stack suffix:
## list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name) . TYPEDEF list(declaration_specifier_no_typedef_name) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_typedef_name) -> list(declaration_specifier_no_typedef_name) . declaration_specifier_no_typedef_name [ VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC STAR SIGNED SHORT SEMICOLON RESTRICT REGISTER PACKED LPAREN LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VOID shift to state 180
-- On UNSIGNED shift to state 181
-- On UNION shift to state 182
-- On UNDERSCORE_BOOL shift to state 183
-- On TYPEDEF shift to state 361
-- On STRUCT shift to state 188
-- On STATIC shift to state 6
-- On SIGNED shift to state 189
-- On SHORT shift to state 190
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On LONG shift to state 191
-- On INT shift to state 192
-- On INLINE shift to state 236
-- On FLOAT shift to state 193
-- On EXTERN shift to state 237
-- On ENUM shift to state 194
-- On DOUBLE shift to state 211
-- On CONST shift to state 154
-- On CHAR shift to state 212
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_specifier_no_typedef_name shift to state 251
-- On type_qualifier shift to state 252
-- On struct_or_union_specifier shift to state 217
-- On struct_or_union shift to state 218
-- On storage_class_specifier_no_typedef shift to state 253
-- On function_specifier shift to state 254
-- On enum_specifier shift to state 255
-- On declaration_specifier_no_typedef_name shift to state 256
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On TYPEDEF_NAME reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On STAR reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On SEMICOLON reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)
-- On LPAREN reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) type_specifier_no_typedef_name list(declaration_specifier_no_typedef_name)

State 424:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) declaration_specifier_no_type . TYPEDEF_NAME list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type . TYPEDEF_NAME list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On TYPEDEF_NAME shift to state 425
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On VOID reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNSIGNED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNION reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On TYPEDEF reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On STRUCT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On STATIC reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On SIGNED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On SHORT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On RESTRICT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On REGISTER reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On PACKED reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On LONG reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On INT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On INLINE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On FLOAT reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On EXTERN reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ENUM reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On DOUBLE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On CONST reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On CHAR reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On AUTO reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type
-- On ALIGNAS reduce production list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) declaration_specifier_no_type

State 425:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME . list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME . list(declaration_specifier_no_type) TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
## Transitions:
-- On list(declaration_specifier_no_type) shift to state 426
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VAR_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF_NAME reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On STAR reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LPAREN reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 426:
## Known stack suffix:
## list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
## LR(1) items:
declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) . [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
declaration_specifiers_typedef -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type) . TYPEDEF list(declaration_specifier_no_type) [ VAR_NAME TYPEDEF_NAME STAR SEMICOLON LPAREN ]
list(declaration_specifier_no_type) -> list(declaration_specifier_no_type) . declaration_specifier_no_type [ VOLATILE VAR_NAME TYPEDEF_NAME TYPEDEF STATIC STAR SEMICOLON RESTRICT REGISTER PACKED LPAREN INLINE EXTERN CONST AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On TYPEDEF shift to state 366
-- On STATIC shift to state 6
-- On RESTRICT shift to state 7
-- On REGISTER shift to state 8
-- On PACKED shift to state 9
-- On INLINE shift to state 236
-- On EXTERN shift to state 237
-- On CONST shift to state 154
-- On AUTO shift to state 238
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 239
-- On storage_class_specifier_no_typedef shift to state 240
-- On function_specifier shift to state 241
-- On declaration_specifier_no_type shift to state 242
-- On attribute_specifier shift to state 187
## Reductions:
-- On VAR_NAME reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On TYPEDEF_NAME reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On STAR reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On SEMICOLON reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)
-- On LPAREN reduce production declaration_specifiers(declaration(block_item)) -> list(declaration_specifier_no_type) declaration_specifier_no_type TYPEDEF_NAME list(declaration_specifier_no_type)

State 427:
## Known stack suffix:
## FOR LPAREN for_statement_header
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header . optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> FOR LPAREN for_statement_header . optional(expression,SEMICOLON) optional(expression,RPAREN) statement_intern_close [ ELSE ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On SEMICOLON shift to state 419
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(expression,SEMICOLON) shift to state 428
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 512
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 428:
## Known stack suffix:
## FOR LPAREN for_statement_header optional(expression,SEMICOLON)
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) . optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) . optional(expression,RPAREN) statement_intern_close [ ELSE ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RPAREN shift to state 429
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(expression,RPAREN) shift to state 430
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 510
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 429:
## Known stack suffix:
## RPAREN
## LR(1) items:
optional(expression,RPAREN) -> RPAREN . [ WHILE VAR_NAME TYPEDEF_NAME TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BREAK BANG ASM AND ALIGNOF ]
## Transitions:
## Reductions:
-- On WHILE reduce production optional(expression,RPAREN) -> RPAREN
-- On VAR_NAME reduce production optional(expression,RPAREN) -> RPAREN
-- On TYPEDEF_NAME reduce production optional(expression,RPAREN) -> RPAREN
-- On TILDE reduce production optional(expression,RPAREN) -> RPAREN
-- On SWITCH reduce production optional(expression,RPAREN) -> RPAREN
-- On STRING_LITERAL reduce production optional(expression,RPAREN) -> RPAREN
-- On STAR reduce production optional(expression,RPAREN) -> RPAREN
-- On SIZEOF reduce production optional(expression,RPAREN) -> RPAREN
-- On SEMICOLON reduce production optional(expression,RPAREN) -> RPAREN
-- On RETURN reduce production optional(expression,RPAREN) -> RPAREN
-- On PLUS reduce production optional(expression,RPAREN) -> RPAREN
-- On MINUS reduce production optional(expression,RPAREN) -> RPAREN
-- On LPAREN reduce production optional(expression,RPAREN) -> RPAREN
-- On LBRACE reduce production optional(expression,RPAREN) -> RPAREN
-- On INC reduce production optional(expression,RPAREN) -> RPAREN
-- On IF reduce production optional(expression,RPAREN) -> RPAREN
-- On GOTO reduce production optional(expression,RPAREN) -> RPAREN
-- On FOR reduce production optional(expression,RPAREN) -> RPAREN
-- On DO reduce production optional(expression,RPAREN) -> RPAREN
-- On DEFAULT reduce production optional(expression,RPAREN) -> RPAREN
-- On DEC reduce production optional(expression,RPAREN) -> RPAREN
-- On CONTINUE reduce production optional(expression,RPAREN) -> RPAREN
-- On CONSTANT reduce production optional(expression,RPAREN) -> RPAREN
-- On CASE reduce production optional(expression,RPAREN) -> RPAREN
-- On BUILTIN_VA_ARG reduce production optional(expression,RPAREN) -> RPAREN
-- On BREAK reduce production optional(expression,RPAREN) -> RPAREN
-- On BANG reduce production optional(expression,RPAREN) -> RPAREN
-- On ASM reduce production optional(expression,RPAREN) -> RPAREN
-- On AND reduce production optional(expression,RPAREN) -> RPAREN
-- On ALIGNOF reduce production optional(expression,RPAREN) -> RPAREN

State 430:
## Known stack suffix:
## FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN)
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) . statement_intern_close [ ELSE ]
## Transitions:
-- On WHILE shift to state 404
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 408
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 416
-- On DO shift to state 431
-- On DEFAULT shift to state 541
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 543
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_intern_close shift to state 561
-- On statement_finish_close shift to state 509
-- On shift_expression shift to state 54
-- On selection_statement_intern_close shift to state 547
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_intern_close) shift to state 548
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 549
-- On iteration_statement(nop,statement_intern_close) shift to state 550
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 551
-- On general_identifier shift to state 554
-- On expression_statement(close_context) shift to state 557
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 558
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 559
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 431:
## Known stack suffix:
## DO
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO . open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> DO . open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON [ ELSE ]
## Transitions:
-- On open_context shift to state 432
## Reductions:
-- On WHILE reduce production open_context ->
-- On VAR_NAME reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On TILDE reduce production open_context ->
-- On SWITCH reduce production open_context ->
-- On STRING_LITERAL reduce production open_context ->
-- On STAR reduce production open_context ->
-- On SIZEOF reduce production open_context ->
-- On SEMICOLON reduce production open_context ->
-- On RETURN reduce production open_context ->
-- On PLUS reduce production open_context ->
-- On MINUS reduce production open_context ->
-- On LPAREN reduce production open_context ->
-- On LBRACE reduce production open_context ->
-- On INC reduce production open_context ->
-- On IF reduce production open_context ->
-- On GOTO reduce production open_context ->
-- On FOR reduce production open_context ->
-- On DO reduce production open_context ->
-- On DEFAULT reduce production open_context ->
-- On DEC reduce production open_context ->
-- On CONTINUE reduce production open_context ->
-- On CONSTANT reduce production open_context ->
-- On CASE reduce production open_context ->
-- On BUILTIN_VA_ARG reduce production open_context ->
-- On BREAK reduce production open_context ->
-- On BANG reduce production open_context ->
-- On ASM reduce production open_context ->
-- On AND reduce production open_context ->
-- On ALIGNOF reduce production open_context ->

State 432:
## Known stack suffix:
## DO open_context
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context . statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> DO open_context . statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON [ ELSE ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 534
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 433:
## Known stack suffix:
## FOR
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR . LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 434
## Reductions:

State 434:
## Known stack suffix:
## FOR LPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR LPAREN . for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TYPEDEF_NAME shift to state 418
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On SEMICOLON shift to state 419
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(expression,SEMICOLON) shift to state 420
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On list(declaration_specifier_no_type) shift to state 421
-- On inclusive_or_expression shift to state 96
-- On for_statement_header shift to state 435
-- On expression shift to state 512
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On declaration_specifiers_typedef shift to state 514
-- On declaration_specifiers(declaration(block_item)) shift to state 523
-- On declaration(block_item) shift to state 533
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 435:
## Known stack suffix:
## FOR LPAREN for_statement_header
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header . optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On SEMICOLON shift to state 419
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(expression,SEMICOLON) shift to state 436
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 512
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 436:
## Known stack suffix:
## FOR LPAREN for_statement_header optional(expression,SEMICOLON)
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) . optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RPAREN shift to state 429
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(expression,RPAREN) shift to state 437
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 510
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 437:
## Known stack suffix:
## FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN)
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 509
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 438:
## Known stack suffix:
## DO
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO . open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On open_context shift to state 439
## Reductions:
-- On WHILE reduce production open_context ->
-- On VAR_NAME reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On TILDE reduce production open_context ->
-- On SWITCH reduce production open_context ->
-- On STRING_LITERAL reduce production open_context ->
-- On STAR reduce production open_context ->
-- On SIZEOF reduce production open_context ->
-- On SEMICOLON reduce production open_context ->
-- On RETURN reduce production open_context ->
-- On PLUS reduce production open_context ->
-- On MINUS reduce production open_context ->
-- On LPAREN reduce production open_context ->
-- On LBRACE reduce production open_context ->
-- On INC reduce production open_context ->
-- On IF reduce production open_context ->
-- On GOTO reduce production open_context ->
-- On FOR reduce production open_context ->
-- On DO reduce production open_context ->
-- On DEFAULT reduce production open_context ->
-- On DEC reduce production open_context ->
-- On CONTINUE reduce production open_context ->
-- On CONSTANT reduce production open_context ->
-- On CASE reduce production open_context ->
-- On BUILTIN_VA_ARG reduce production open_context ->
-- On BREAK reduce production open_context ->
-- On BANG reduce production open_context ->
-- On ASM reduce production open_context ->
-- On AND reduce production open_context ->
-- On ALIGNOF reduce production open_context ->

State 439:
## Known stack suffix:
## DO open_context
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context . statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 502
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 440:
## Known stack suffix:
## DEFAULT
## LR(1) items:
labeled_statement(statement_finish_close) -> DEFAULT . COLON statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On COLON shift to state 441
## Reductions:

State 441:
## Known stack suffix:
## DEFAULT COLON
## LR(1) items:
labeled_statement(statement_finish_close) -> DEFAULT COLON . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 501
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 442:
## Known stack suffix:
## CONTINUE
## LR(1) items:
jump_statement(close_context) -> CONTINUE . close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On close_context shift to state 443
## Reductions:
-- On SEMICOLON reduce production close_context ->

State 443:
## Known stack suffix:
## CONTINUE close_context
## LR(1) items:
jump_statement(close_context) -> CONTINUE close_context . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 444
## Reductions:

State 444:
## Known stack suffix:
## CONTINUE close_context SEMICOLON
## LR(1) items:
jump_statement(close_context) -> CONTINUE close_context SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On VOLATILE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On VOID reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On VAR_NAME reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On UNSIGNED reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On UNION reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On UNDERSCORE_BOOL reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On TYPEDEF_NAME reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On TYPEDEF reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On TILDE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On SWITCH reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On STRUCT reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On STRING_LITERAL reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On STATIC reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On STAR reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On SIZEOF reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On SIGNED reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On SHORT reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On SEMICOLON reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On RETURN reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On RESTRICT reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On REGISTER reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On RBRACE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On PRAGMA reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On PLUS reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On PACKED reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On MINUS reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On LPAREN reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On LONG reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On LBRACE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On INT reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On INLINE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On INC reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On IF reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On GOTO reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On FOR reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On FLOAT reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On EXTERN reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On ENUM reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On ELSE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On DOUBLE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On DO reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On DEFAULT reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On DEC reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On CONTINUE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On CONSTANT reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On CONST reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On CHAR reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On CASE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On BUILTIN_VA_ARG reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On BREAK reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On BANG reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On AUTO reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On ATTRIBUTE reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On ASM reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On AND reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On ALIGNOF reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON
-- On ALIGNAS reduce production jump_statement(close_context) -> CONTINUE close_context SEMICOLON

State 445:
## Known stack suffix:
## CASE
## LR(1) items:
labeled_statement(statement_finish_close) -> CASE . conditional_expression COLON statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 446
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 446:
## Known stack suffix:
## CASE conditional_expression
## LR(1) items:
labeled_statement(statement_finish_close) -> CASE conditional_expression . COLON statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On COLON shift to state 447
## Reductions:

State 447:
## Known stack suffix:
## CASE conditional_expression COLON
## LR(1) items:
labeled_statement(statement_finish_close) -> CASE conditional_expression COLON . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 484
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 448:
## Known stack suffix:
## BREAK
## LR(1) items:
jump_statement(close_context) -> BREAK . close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On close_context shift to state 449
## Reductions:
-- On SEMICOLON reduce production close_context ->

State 449:
## Known stack suffix:
## BREAK close_context
## LR(1) items:
jump_statement(close_context) -> BREAK close_context . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 450
## Reductions:

State 450:
## Known stack suffix:
## BREAK close_context SEMICOLON
## LR(1) items:
jump_statement(close_context) -> BREAK close_context SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On VOLATILE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On VOID reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On VAR_NAME reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On UNSIGNED reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On UNION reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On UNDERSCORE_BOOL reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On TYPEDEF_NAME reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On TYPEDEF reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On TILDE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On SWITCH reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On STRUCT reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On STRING_LITERAL reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On STATIC reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On STAR reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On SIZEOF reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On SIGNED reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On SHORT reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On SEMICOLON reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On RETURN reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On RESTRICT reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On REGISTER reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On RBRACE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On PRAGMA reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On PLUS reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On PACKED reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On MINUS reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On LPAREN reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On LONG reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On LBRACE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On INT reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On INLINE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On INC reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On IF reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On GOTO reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On FOR reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On FLOAT reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On EXTERN reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On ENUM reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On ELSE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On DOUBLE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On DO reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On DEFAULT reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On DEC reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On CONTINUE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On CONSTANT reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On CONST reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On CHAR reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On CASE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On BUILTIN_VA_ARG reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On BREAK reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On BANG reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On AUTO reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On ATTRIBUTE reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On ASM reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On AND reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On ALIGNOF reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON
-- On ALIGNAS reduce production jump_statement(close_context) -> BREAK close_context SEMICOLON

State 451:
## Known stack suffix:
## ASM
## LR(1) items:
asm_statement(close_context) -> ASM . asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 452
-- On CONST shift to state 453
-- On asm_attributes shift to state 456
## Reductions:
-- On LPAREN reduce production asm_attributes ->

State 452:
## Known stack suffix:
## VOLATILE
## LR(1) items:
asm_attributes -> VOLATILE . asm_attributes [ LPAREN ]
## Transitions:
-- On VOLATILE shift to state 452
-- On CONST shift to state 453
-- On asm_attributes shift to state 455
## Reductions:
-- On LPAREN reduce production asm_attributes ->

State 453:
## Known stack suffix:
## CONST
## LR(1) items:
asm_attributes -> CONST . asm_attributes [ LPAREN ]
## Transitions:
-- On VOLATILE shift to state 452
-- On CONST shift to state 453
-- On asm_attributes shift to state 454
## Reductions:
-- On LPAREN reduce production asm_attributes ->

State 454:
## Known stack suffix:
## CONST asm_attributes
## LR(1) items:
asm_attributes -> CONST asm_attributes . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production asm_attributes -> CONST asm_attributes

State 455:
## Known stack suffix:
## VOLATILE asm_attributes
## LR(1) items:
asm_attributes -> VOLATILE asm_attributes . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production asm_attributes -> VOLATILE asm_attributes

State 456:
## Known stack suffix:
## ASM asm_attributes
## LR(1) items:
asm_statement(close_context) -> ASM asm_attributes . LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 457
## Reductions:

State 457:
## Known stack suffix:
## ASM asm_attributes LPAREN
## LR(1) items:
asm_statement(close_context) -> ASM asm_attributes LPAREN . string_literals_list asm_arguments RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On STRING_LITERAL shift to state 13
-- On string_literals_list shift to state 458
## Reductions:

State 458:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list
## LR(1) items:
asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list . asm_arguments RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
string_literals_list -> string_literals_list . STRING_LITERAL [ STRING_LITERAL RPAREN COLON ]
## Transitions:
-- On STRING_LITERAL shift to state 33
-- On COLON shift to state 459
-- On asm_arguments shift to state 480
## Reductions:
-- On RPAREN reduce production asm_arguments ->

State 459:
## Known stack suffix:
## COLON
## LR(1) items:
asm_arguments -> COLON . asm_operands [ RPAREN ]
asm_arguments -> COLON . asm_operands COLON asm_operands [ RPAREN ]
asm_arguments -> COLON . asm_operands COLON asm_operands COLON asm_flags [ RPAREN ]
## Transitions:
-- On LBRACK shift to state 460
-- On asm_operands_ne shift to state 463
-- On asm_operands shift to state 471
-- On asm_operand shift to state 479
-- On asm_op_name shift to state 466
## Reductions:
-- On STRING_LITERAL reduce production asm_op_name ->
-- On RPAREN reduce production asm_operands ->
-- On COLON reduce production asm_operands ->

State 460:
## Known stack suffix:
## LBRACK
## LR(1) items:
asm_op_name -> LBRACK . general_identifier RBRACK [ STRING_LITERAL ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On general_identifier shift to state 461
## Reductions:

State 461:
## Known stack suffix:
## LBRACK general_identifier
## LR(1) items:
asm_op_name -> LBRACK general_identifier . RBRACK [ STRING_LITERAL ]
## Transitions:
-- On RBRACK shift to state 462
## Reductions:

State 462:
## Known stack suffix:
## LBRACK general_identifier RBRACK
## LR(1) items:
asm_op_name -> LBRACK general_identifier RBRACK . [ STRING_LITERAL ]
## Transitions:
## Reductions:
-- On STRING_LITERAL reduce production asm_op_name -> LBRACK general_identifier RBRACK

State 463:
## Known stack suffix:
## asm_operands_ne
## LR(1) items:
asm_operands -> asm_operands_ne . [ RPAREN COLON ]
asm_operands_ne -> asm_operands_ne . COMMA asm_operand [ RPAREN COMMA COLON ]
## Transitions:
-- On COMMA shift to state 464
## Reductions:
-- On RPAREN reduce production asm_operands -> asm_operands_ne
-- On COLON reduce production asm_operands -> asm_operands_ne

State 464:
## Known stack suffix:
## asm_operands_ne COMMA
## LR(1) items:
asm_operands_ne -> asm_operands_ne COMMA . asm_operand [ RPAREN COMMA COLON ]
## Transitions:
-- On LBRACK shift to state 460
-- On asm_operand shift to state 465
-- On asm_op_name shift to state 466
## Reductions:
-- On STRING_LITERAL reduce production asm_op_name ->

State 465:
## Known stack suffix:
## asm_operands_ne COMMA asm_operand
## LR(1) items:
asm_operands_ne -> asm_operands_ne COMMA asm_operand . [ RPAREN COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN reduce production asm_operands_ne -> asm_operands_ne COMMA asm_operand
-- On COMMA reduce production asm_operands_ne -> asm_operands_ne COMMA asm_operand
-- On COLON reduce production asm_operands_ne -> asm_operands_ne COMMA asm_operand

State 466:
## Known stack suffix:
## asm_op_name
## LR(1) items:
asm_operand -> asm_op_name . string_literals_list LPAREN expression RPAREN [ RPAREN COMMA COLON ]
## Transitions:
-- On STRING_LITERAL shift to state 13
-- On string_literals_list shift to state 467
## Reductions:

State 467:
## Known stack suffix:
## asm_op_name string_literals_list
## LR(1) items:
asm_operand -> asm_op_name string_literals_list . LPAREN expression RPAREN [ RPAREN COMMA COLON ]
string_literals_list -> string_literals_list . STRING_LITERAL [ STRING_LITERAL LPAREN ]
## Transitions:
-- On STRING_LITERAL shift to state 33
-- On LPAREN shift to state 468
## Reductions:

State 468:
## Known stack suffix:
## asm_op_name string_literals_list LPAREN
## LR(1) items:
asm_operand -> asm_op_name string_literals_list LPAREN . expression RPAREN [ RPAREN COMMA COLON ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 469
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 469:
## Known stack suffix:
## asm_op_name string_literals_list LPAREN expression
## LR(1) items:
asm_operand -> asm_op_name string_literals_list LPAREN expression . RPAREN [ RPAREN COMMA COLON ]
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 470
-- On COMMA shift to state 98
## Reductions:

State 470:
## Known stack suffix:
## asm_op_name string_literals_list LPAREN expression RPAREN
## LR(1) items:
asm_operand -> asm_op_name string_literals_list LPAREN expression RPAREN . [ RPAREN COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN reduce production asm_operand -> asm_op_name string_literals_list LPAREN expression RPAREN
-- On COMMA reduce production asm_operand -> asm_op_name string_literals_list LPAREN expression RPAREN
-- On COLON reduce production asm_operand -> asm_op_name string_literals_list LPAREN expression RPAREN

State 471:
## Known stack suffix:
## COLON asm_operands
## LR(1) items:
asm_arguments -> COLON asm_operands . [ RPAREN ]
asm_arguments -> COLON asm_operands . COLON asm_operands [ RPAREN ]
asm_arguments -> COLON asm_operands . COLON asm_operands COLON asm_flags [ RPAREN ]
## Transitions:
-- On COLON shift to state 472
## Reductions:
-- On RPAREN reduce production asm_arguments -> COLON asm_operands

State 472:
## Known stack suffix:
## COLON asm_operands COLON
## LR(1) items:
asm_arguments -> COLON asm_operands COLON . asm_operands [ RPAREN ]
asm_arguments -> COLON asm_operands COLON . asm_operands COLON asm_flags [ RPAREN ]
## Transitions:
-- On LBRACK shift to state 460
-- On asm_operands_ne shift to state 463
-- On asm_operands shift to state 473
-- On asm_operand shift to state 479
-- On asm_op_name shift to state 466
## Reductions:
-- On STRING_LITERAL reduce production asm_op_name ->
-- On RPAREN reduce production asm_operands ->
-- On COLON reduce production asm_operands ->

State 473:
## Known stack suffix:
## COLON asm_operands COLON asm_operands
## LR(1) items:
asm_arguments -> COLON asm_operands COLON asm_operands . [ RPAREN ]
asm_arguments -> COLON asm_operands COLON asm_operands . COLON asm_flags [ RPAREN ]
## Transitions:
-- On COLON shift to state 474
## Reductions:
-- On RPAREN reduce production asm_arguments -> COLON asm_operands COLON asm_operands

State 474:
## Known stack suffix:
## COLON asm_operands COLON asm_operands COLON
## LR(1) items:
asm_arguments -> COLON asm_operands COLON asm_operands COLON . asm_flags [ RPAREN ]
## Transitions:
-- On STRING_LITERAL shift to state 13
-- On string_literals_list shift to state 475
-- On asm_flags shift to state 476
## Reductions:

State 475:
## Known stack suffix:
## string_literals_list
## LR(1) items:
asm_flags -> string_literals_list . [ RPAREN COMMA ]
string_literals_list -> string_literals_list . STRING_LITERAL [ STRING_LITERAL RPAREN COMMA ]
## Transitions:
-- On STRING_LITERAL shift to state 33
## Reductions:
-- On RPAREN reduce production asm_flags -> string_literals_list
-- On COMMA reduce production asm_flags -> string_literals_list

State 476:
## Known stack suffix:
## COLON asm_operands COLON asm_operands COLON asm_flags
## LR(1) items:
asm_arguments -> COLON asm_operands COLON asm_operands COLON asm_flags . [ RPAREN ]
asm_flags -> asm_flags . COMMA string_literals_list [ RPAREN COMMA ]
## Transitions:
-- On COMMA shift to state 477
## Reductions:
-- On RPAREN reduce production asm_arguments -> COLON asm_operands COLON asm_operands COLON asm_flags

State 477:
## Known stack suffix:
## asm_flags COMMA
## LR(1) items:
asm_flags -> asm_flags COMMA . string_literals_list [ RPAREN COMMA ]
## Transitions:
-- On STRING_LITERAL shift to state 13
-- On string_literals_list shift to state 478
## Reductions:

State 478:
## Known stack suffix:
## asm_flags COMMA string_literals_list
## LR(1) items:
asm_flags -> asm_flags COMMA string_literals_list . [ RPAREN COMMA ]
string_literals_list -> string_literals_list . STRING_LITERAL [ STRING_LITERAL RPAREN COMMA ]
## Transitions:
-- On STRING_LITERAL shift to state 33
## Reductions:
-- On RPAREN reduce production asm_flags -> asm_flags COMMA string_literals_list
-- On COMMA reduce production asm_flags -> asm_flags COMMA string_literals_list

State 479:
## Known stack suffix:
## asm_operand
## LR(1) items:
asm_operands_ne -> asm_operand . [ RPAREN COMMA COLON ]
## Transitions:
## Reductions:
-- On RPAREN reduce production asm_operands_ne -> asm_operand
-- On COMMA reduce production asm_operands_ne -> asm_operand
-- On COLON reduce production asm_operands_ne -> asm_operand

State 480:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments
## LR(1) items:
asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments . RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 481
## Reductions:

State 481:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN
## LR(1) items:
asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN . close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On close_context shift to state 482
## Reductions:
-- On SEMICOLON reduce production close_context ->

State 482:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context
## LR(1) items:
asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
## LR(1) items:
asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On VOLATILE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On VOID reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On VAR_NAME reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On UNSIGNED reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On UNION reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On UNDERSCORE_BOOL reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On TYPEDEF_NAME reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On TYPEDEF reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On TILDE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On SWITCH reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On STRUCT reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On STRING_LITERAL reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On STATIC reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On STAR reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On SIZEOF reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On SIGNED reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On SHORT reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On SEMICOLON reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On RETURN reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On RESTRICT reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On REGISTER reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On RBRACE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On PRAGMA reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On PLUS reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On PACKED reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On MINUS reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On LPAREN reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On LONG reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On LBRACE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On INT reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On INLINE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On INC reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On IF reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On GOTO reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On FOR reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On FLOAT reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On EXTERN reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On ENUM reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On ELSE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On DOUBLE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On DO reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On DEFAULT reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On DEC reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On CONTINUE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On CONSTANT reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On CONST reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On CHAR reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On CASE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On BUILTIN_VA_ARG reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On BREAK reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On BANG reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On AUTO reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On ATTRIBUTE reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On ASM reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On AND reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On ALIGNOF reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON
-- On ALIGNAS reduce production asm_statement(close_context) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN close_context SEMICOLON

State 484:
## Known stack suffix:
## CASE conditional_expression COLON statement_finish_close
## LR(1) items:
labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On VOLATILE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On VOID reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On VAR_NAME reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On UNSIGNED reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On UNION reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On UNDERSCORE_BOOL reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On TYPEDEF_NAME reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On TYPEDEF reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On TILDE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On SWITCH reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On STRUCT reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On STRING_LITERAL reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On STATIC reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On STAR reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On SIZEOF reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On SIGNED reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On SHORT reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On SEMICOLON reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On RETURN reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On RESTRICT reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On REGISTER reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On RBRACE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On PRAGMA reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On PLUS reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On PACKED reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On MINUS reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On LPAREN reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On LONG reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On LBRACE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On INT reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On INLINE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On INC reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On IF reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On GOTO reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On FOR reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On FLOAT reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On EXTERN reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On ENUM reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On DOUBLE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On DO reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On DEFAULT reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On DEC reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On CONTINUE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On CONSTANT reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On CONST reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On CHAR reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On CASE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On BUILTIN_VA_ARG reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On BREAK reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On BANG reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On AUTO reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On ATTRIBUTE reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On ASM reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On AND reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On ALIGNOF reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close
-- On ALIGNAS reduce production labeled_statement(statement_finish_close) -> CASE conditional_expression COLON statement_finish_close

State 485:
## Known stack suffix:
## selection_statement_finish(nop)
## LR(1) items:
statement_finish_close -> selection_statement_finish(nop) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On VOLATILE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On VOID reduce production statement_finish_close -> selection_statement_finish(nop)
-- On VAR_NAME reduce production statement_finish_close -> selection_statement_finish(nop)
-- On UNSIGNED reduce production statement_finish_close -> selection_statement_finish(nop)
-- On UNION reduce production statement_finish_close -> selection_statement_finish(nop)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> selection_statement_finish(nop)
-- On TYPEDEF_NAME reduce production statement_finish_close -> selection_statement_finish(nop)
-- On TYPEDEF reduce production statement_finish_close -> selection_statement_finish(nop)
-- On TILDE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On SWITCH reduce production statement_finish_close -> selection_statement_finish(nop)
-- On STRUCT reduce production statement_finish_close -> selection_statement_finish(nop)
-- On STRING_LITERAL reduce production statement_finish_close -> selection_statement_finish(nop)
-- On STATIC reduce production statement_finish_close -> selection_statement_finish(nop)
-- On STAR reduce production statement_finish_close -> selection_statement_finish(nop)
-- On SIZEOF reduce production statement_finish_close -> selection_statement_finish(nop)
-- On SIGNED reduce production statement_finish_close -> selection_statement_finish(nop)
-- On SHORT reduce production statement_finish_close -> selection_statement_finish(nop)
-- On SEMICOLON reduce production statement_finish_close -> selection_statement_finish(nop)
-- On RETURN reduce production statement_finish_close -> selection_statement_finish(nop)
-- On RESTRICT reduce production statement_finish_close -> selection_statement_finish(nop)
-- On REGISTER reduce production statement_finish_close -> selection_statement_finish(nop)
-- On RBRACE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On PRAGMA reduce production statement_finish_close -> selection_statement_finish(nop)
-- On PLUS reduce production statement_finish_close -> selection_statement_finish(nop)
-- On PACKED reduce production statement_finish_close -> selection_statement_finish(nop)
-- On MINUS reduce production statement_finish_close -> selection_statement_finish(nop)
-- On LPAREN reduce production statement_finish_close -> selection_statement_finish(nop)
-- On LONG reduce production statement_finish_close -> selection_statement_finish(nop)
-- On LBRACE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On INT reduce production statement_finish_close -> selection_statement_finish(nop)
-- On INLINE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On INC reduce production statement_finish_close -> selection_statement_finish(nop)
-- On IF reduce production statement_finish_close -> selection_statement_finish(nop)
-- On GOTO reduce production statement_finish_close -> selection_statement_finish(nop)
-- On FOR reduce production statement_finish_close -> selection_statement_finish(nop)
-- On FLOAT reduce production statement_finish_close -> selection_statement_finish(nop)
-- On EXTERN reduce production statement_finish_close -> selection_statement_finish(nop)
-- On ENUM reduce production statement_finish_close -> selection_statement_finish(nop)
-- On DOUBLE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On DO reduce production statement_finish_close -> selection_statement_finish(nop)
-- On DEFAULT reduce production statement_finish_close -> selection_statement_finish(nop)
-- On DEC reduce production statement_finish_close -> selection_statement_finish(nop)
-- On CONTINUE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On CONSTANT reduce production statement_finish_close -> selection_statement_finish(nop)
-- On CONST reduce production statement_finish_close -> selection_statement_finish(nop)
-- On CHAR reduce production statement_finish_close -> selection_statement_finish(nop)
-- On CASE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> selection_statement_finish(nop)
-- On BREAK reduce production statement_finish_close -> selection_statement_finish(nop)
-- On BANG reduce production statement_finish_close -> selection_statement_finish(nop)
-- On AUTO reduce production statement_finish_close -> selection_statement_finish(nop)
-- On ATTRIBUTE reduce production statement_finish_close -> selection_statement_finish(nop)
-- On ASM reduce production statement_finish_close -> selection_statement_finish(nop)
-- On AND reduce production statement_finish_close -> selection_statement_finish(nop)
-- On ALIGNOF reduce production statement_finish_close -> selection_statement_finish(nop)
-- On ALIGNAS reduce production statement_finish_close -> selection_statement_finish(nop)

State 486:
## Known stack suffix:
## option(expression)
## LR(1) items:
expression_statement(close_context) -> option(expression) . close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On close_context shift to state 487
## Reductions:
-- On SEMICOLON reduce production close_context ->

State 487:
## Known stack suffix:
## option(expression) close_context
## LR(1) items:
expression_statement(close_context) -> option(expression) close_context . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 488
## Reductions:

State 488:
## Known stack suffix:
## option(expression) close_context SEMICOLON
## LR(1) items:
expression_statement(close_context) -> option(expression) close_context SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On VOLATILE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On VOID reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On VAR_NAME reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On UNSIGNED reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On UNION reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On UNDERSCORE_BOOL reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On TYPEDEF_NAME reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On TYPEDEF reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On TILDE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On SWITCH reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On STRUCT reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On STRING_LITERAL reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On STATIC reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On STAR reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On SIZEOF reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On SIGNED reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On SHORT reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On SEMICOLON reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On RETURN reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On RESTRICT reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On REGISTER reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On RBRACE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On PRAGMA reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On PLUS reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On PACKED reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On MINUS reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On LPAREN reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On LONG reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On LBRACE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On INT reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On INLINE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On INC reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On IF reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On GOTO reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On FOR reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On FLOAT reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On EXTERN reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On ENUM reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On ELSE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On DOUBLE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On DO reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On DEFAULT reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On DEC reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On CONTINUE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On CONSTANT reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On CONST reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On CHAR reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On CASE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On BUILTIN_VA_ARG reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On BREAK reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On BANG reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On AUTO reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On ATTRIBUTE reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On ASM reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On AND reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On ALIGNOF reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON
-- On ALIGNAS reduce production expression_statement(close_context) -> option(expression) close_context SEMICOLON

State 489:
## Known stack suffix:
## labeled_statement(statement_finish_close)
## LR(1) items:
statement_finish_close -> labeled_statement(statement_finish_close) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On VOLATILE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On VOID reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On VAR_NAME reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On UNSIGNED reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On UNION reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On TYPEDEF_NAME reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On TYPEDEF reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On TILDE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On SWITCH reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On STRUCT reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On STRING_LITERAL reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On STATIC reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On STAR reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On SIZEOF reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On SIGNED reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On SHORT reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On SEMICOLON reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On RETURN reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On RESTRICT reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On REGISTER reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On RBRACE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On PRAGMA reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On PLUS reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On PACKED reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On MINUS reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On LPAREN reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On LONG reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On LBRACE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On INT reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On INLINE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On INC reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On IF reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On GOTO reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On FOR reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On FLOAT reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On EXTERN reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On ENUM reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On DOUBLE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On DO reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On DEFAULT reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On DEC reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On CONTINUE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On CONSTANT reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On CONST reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On CHAR reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On CASE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On BREAK reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On BANG reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On AUTO reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On ATTRIBUTE reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On ASM reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On AND reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On ALIGNOF reduce production statement_finish_close -> labeled_statement(statement_finish_close)
-- On ALIGNAS reduce production statement_finish_close -> labeled_statement(statement_finish_close)

State 490:
## Known stack suffix:
## jump_statement(close_context)
## LR(1) items:
statement_finish_close -> jump_statement(close_context) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> jump_statement(close_context)
-- On VOLATILE reduce production statement_finish_close -> jump_statement(close_context)
-- On VOID reduce production statement_finish_close -> jump_statement(close_context)
-- On VAR_NAME reduce production statement_finish_close -> jump_statement(close_context)
-- On UNSIGNED reduce production statement_finish_close -> jump_statement(close_context)
-- On UNION reduce production statement_finish_close -> jump_statement(close_context)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> jump_statement(close_context)
-- On TYPEDEF_NAME reduce production statement_finish_close -> jump_statement(close_context)
-- On TYPEDEF reduce production statement_finish_close -> jump_statement(close_context)
-- On TILDE reduce production statement_finish_close -> jump_statement(close_context)
-- On SWITCH reduce production statement_finish_close -> jump_statement(close_context)
-- On STRUCT reduce production statement_finish_close -> jump_statement(close_context)
-- On STRING_LITERAL reduce production statement_finish_close -> jump_statement(close_context)
-- On STATIC reduce production statement_finish_close -> jump_statement(close_context)
-- On STAR reduce production statement_finish_close -> jump_statement(close_context)
-- On SIZEOF reduce production statement_finish_close -> jump_statement(close_context)
-- On SIGNED reduce production statement_finish_close -> jump_statement(close_context)
-- On SHORT reduce production statement_finish_close -> jump_statement(close_context)
-- On SEMICOLON reduce production statement_finish_close -> jump_statement(close_context)
-- On RETURN reduce production statement_finish_close -> jump_statement(close_context)
-- On RESTRICT reduce production statement_finish_close -> jump_statement(close_context)
-- On REGISTER reduce production statement_finish_close -> jump_statement(close_context)
-- On RBRACE reduce production statement_finish_close -> jump_statement(close_context)
-- On PRAGMA reduce production statement_finish_close -> jump_statement(close_context)
-- On PLUS reduce production statement_finish_close -> jump_statement(close_context)
-- On PACKED reduce production statement_finish_close -> jump_statement(close_context)
-- On MINUS reduce production statement_finish_close -> jump_statement(close_context)
-- On LPAREN reduce production statement_finish_close -> jump_statement(close_context)
-- On LONG reduce production statement_finish_close -> jump_statement(close_context)
-- On LBRACE reduce production statement_finish_close -> jump_statement(close_context)
-- On INT reduce production statement_finish_close -> jump_statement(close_context)
-- On INLINE reduce production statement_finish_close -> jump_statement(close_context)
-- On INC reduce production statement_finish_close -> jump_statement(close_context)
-- On IF reduce production statement_finish_close -> jump_statement(close_context)
-- On GOTO reduce production statement_finish_close -> jump_statement(close_context)
-- On FOR reduce production statement_finish_close -> jump_statement(close_context)
-- On FLOAT reduce production statement_finish_close -> jump_statement(close_context)
-- On EXTERN reduce production statement_finish_close -> jump_statement(close_context)
-- On ENUM reduce production statement_finish_close -> jump_statement(close_context)
-- On DOUBLE reduce production statement_finish_close -> jump_statement(close_context)
-- On DO reduce production statement_finish_close -> jump_statement(close_context)
-- On DEFAULT reduce production statement_finish_close -> jump_statement(close_context)
-- On DEC reduce production statement_finish_close -> jump_statement(close_context)
-- On CONTINUE reduce production statement_finish_close -> jump_statement(close_context)
-- On CONSTANT reduce production statement_finish_close -> jump_statement(close_context)
-- On CONST reduce production statement_finish_close -> jump_statement(close_context)
-- On CHAR reduce production statement_finish_close -> jump_statement(close_context)
-- On CASE reduce production statement_finish_close -> jump_statement(close_context)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> jump_statement(close_context)
-- On BREAK reduce production statement_finish_close -> jump_statement(close_context)
-- On BANG reduce production statement_finish_close -> jump_statement(close_context)
-- On AUTO reduce production statement_finish_close -> jump_statement(close_context)
-- On ATTRIBUTE reduce production statement_finish_close -> jump_statement(close_context)
-- On ASM reduce production statement_finish_close -> jump_statement(close_context)
-- On AND reduce production statement_finish_close -> jump_statement(close_context)
-- On ALIGNOF reduce production statement_finish_close -> jump_statement(close_context)
-- On ALIGNAS reduce production statement_finish_close -> jump_statement(close_context)

State 491:
## Known stack suffix:
## iteration_statement(nop,statement_finish_close)
## LR(1) items:
statement_finish_close -> iteration_statement(nop,statement_finish_close) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On VOLATILE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On VOID reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On VAR_NAME reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On UNSIGNED reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On UNION reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On TYPEDEF_NAME reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On TYPEDEF reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On TILDE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On SWITCH reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On STRUCT reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On STRING_LITERAL reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On STATIC reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On STAR reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On SIZEOF reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On SIGNED reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On SHORT reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On SEMICOLON reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On RETURN reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On RESTRICT reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On REGISTER reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On RBRACE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On PRAGMA reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On PLUS reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On PACKED reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On MINUS reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On LPAREN reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On LONG reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On LBRACE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On INT reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On INLINE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On INC reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On IF reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On GOTO reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On FOR reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On FLOAT reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On EXTERN reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On ENUM reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On DOUBLE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On DO reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On DEFAULT reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On DEC reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On CONTINUE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On CONSTANT reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On CONST reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On CHAR reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On CASE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On BREAK reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On BANG reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On AUTO reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On ATTRIBUTE reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On ASM reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On AND reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On ALIGNOF reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)
-- On ALIGNAS reduce production statement_finish_close -> iteration_statement(nop,statement_finish_close)

State 492:
## Known stack suffix:
## if_else_statement_begin(nop)
## LR(1) items:
selection_statement_finish(nop) -> if_else_statement_begin(nop) . ELSE statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On ELSE shift to state 493
## Reductions:

State 493:
## Known stack suffix:
## if_else_statement_begin(nop) ELSE
## LR(1) items:
selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 494
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 494:
## Known stack suffix:
## if_else_statement_begin(nop) ELSE statement_finish_close
## LR(1) items:
selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On VOLATILE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On VOID reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On VAR_NAME reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On UNSIGNED reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On UNION reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On UNDERSCORE_BOOL reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On TYPEDEF_NAME reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On TYPEDEF reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On TILDE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On SWITCH reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On STRUCT reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On STRING_LITERAL reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On STATIC reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On STAR reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On SIZEOF reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On SIGNED reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On SHORT reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On SEMICOLON reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On RETURN reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On RESTRICT reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On REGISTER reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On RBRACE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On PRAGMA reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On PLUS reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On PACKED reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On MINUS reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On LPAREN reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On LONG reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On LBRACE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On INT reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On INLINE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On INC reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On IF reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On GOTO reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On FOR reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On FLOAT reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On EXTERN reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On ENUM reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On DOUBLE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On DO reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On DEFAULT reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On DEC reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On CONTINUE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On CONSTANT reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On CONST reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On CHAR reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On CASE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On BUILTIN_VA_ARG reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On BREAK reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On BANG reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On AUTO reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On ATTRIBUTE reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On ASM reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On AND reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On ALIGNOF reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close
-- On ALIGNAS reduce production selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE statement_finish_close

State 495:
## Known stack suffix:
## general_identifier
## LR(1) items:
labeled_statement(statement_finish_close) -> general_identifier . COLON statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On COLON shift to state 496
## Reductions:

State 496:
## Known stack suffix:
## general_identifier COLON
## LR(1) items:
labeled_statement(statement_finish_close) -> general_identifier COLON . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 497
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 497:
## Known stack suffix:
## general_identifier COLON statement_finish_close
## LR(1) items:
labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On VOLATILE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On VOID reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On VAR_NAME reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On UNSIGNED reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On UNION reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On UNDERSCORE_BOOL reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On TYPEDEF_NAME reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On TYPEDEF reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On TILDE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On SWITCH reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On STRUCT reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On STRING_LITERAL reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On STATIC reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On STAR reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On SIZEOF reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On SIGNED reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On SHORT reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On SEMICOLON reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On RETURN reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On RESTRICT reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On REGISTER reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On RBRACE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On PRAGMA reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On PLUS reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On PACKED reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On MINUS reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On LPAREN reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On LONG reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On LBRACE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On INT reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On INLINE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On INC reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On IF reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On GOTO reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On FOR reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On FLOAT reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On EXTERN reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On ENUM reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On DOUBLE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On DO reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On DEFAULT reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On DEC reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On CONTINUE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On CONSTANT reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On CONST reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On CHAR reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On CASE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On BUILTIN_VA_ARG reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On BREAK reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On BANG reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On AUTO reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On ATTRIBUTE reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On ASM reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On AND reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On ALIGNOF reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close
-- On ALIGNAS reduce production labeled_statement(statement_finish_close) -> general_identifier COLON statement_finish_close

State 498:
## Known stack suffix:
## expression_statement(close_context)
## LR(1) items:
statement_finish_close -> expression_statement(close_context) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> expression_statement(close_context)
-- On VOLATILE reduce production statement_finish_close -> expression_statement(close_context)
-- On VOID reduce production statement_finish_close -> expression_statement(close_context)
-- On VAR_NAME reduce production statement_finish_close -> expression_statement(close_context)
-- On UNSIGNED reduce production statement_finish_close -> expression_statement(close_context)
-- On UNION reduce production statement_finish_close -> expression_statement(close_context)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> expression_statement(close_context)
-- On TYPEDEF_NAME reduce production statement_finish_close -> expression_statement(close_context)
-- On TYPEDEF reduce production statement_finish_close -> expression_statement(close_context)
-- On TILDE reduce production statement_finish_close -> expression_statement(close_context)
-- On SWITCH reduce production statement_finish_close -> expression_statement(close_context)
-- On STRUCT reduce production statement_finish_close -> expression_statement(close_context)
-- On STRING_LITERAL reduce production statement_finish_close -> expression_statement(close_context)
-- On STATIC reduce production statement_finish_close -> expression_statement(close_context)
-- On STAR reduce production statement_finish_close -> expression_statement(close_context)
-- On SIZEOF reduce production statement_finish_close -> expression_statement(close_context)
-- On SIGNED reduce production statement_finish_close -> expression_statement(close_context)
-- On SHORT reduce production statement_finish_close -> expression_statement(close_context)
-- On SEMICOLON reduce production statement_finish_close -> expression_statement(close_context)
-- On RETURN reduce production statement_finish_close -> expression_statement(close_context)
-- On RESTRICT reduce production statement_finish_close -> expression_statement(close_context)
-- On REGISTER reduce production statement_finish_close -> expression_statement(close_context)
-- On RBRACE reduce production statement_finish_close -> expression_statement(close_context)
-- On PRAGMA reduce production statement_finish_close -> expression_statement(close_context)
-- On PLUS reduce production statement_finish_close -> expression_statement(close_context)
-- On PACKED reduce production statement_finish_close -> expression_statement(close_context)
-- On MINUS reduce production statement_finish_close -> expression_statement(close_context)
-- On LPAREN reduce production statement_finish_close -> expression_statement(close_context)
-- On LONG reduce production statement_finish_close -> expression_statement(close_context)
-- On LBRACE reduce production statement_finish_close -> expression_statement(close_context)
-- On INT reduce production statement_finish_close -> expression_statement(close_context)
-- On INLINE reduce production statement_finish_close -> expression_statement(close_context)
-- On INC reduce production statement_finish_close -> expression_statement(close_context)
-- On IF reduce production statement_finish_close -> expression_statement(close_context)
-- On GOTO reduce production statement_finish_close -> expression_statement(close_context)
-- On FOR reduce production statement_finish_close -> expression_statement(close_context)
-- On FLOAT reduce production statement_finish_close -> expression_statement(close_context)
-- On EXTERN reduce production statement_finish_close -> expression_statement(close_context)
-- On ENUM reduce production statement_finish_close -> expression_statement(close_context)
-- On DOUBLE reduce production statement_finish_close -> expression_statement(close_context)
-- On DO reduce production statement_finish_close -> expression_statement(close_context)
-- On DEFAULT reduce production statement_finish_close -> expression_statement(close_context)
-- On DEC reduce production statement_finish_close -> expression_statement(close_context)
-- On CONTINUE reduce production statement_finish_close -> expression_statement(close_context)
-- On CONSTANT reduce production statement_finish_close -> expression_statement(close_context)
-- On CONST reduce production statement_finish_close -> expression_statement(close_context)
-- On CHAR reduce production statement_finish_close -> expression_statement(close_context)
-- On CASE reduce production statement_finish_close -> expression_statement(close_context)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> expression_statement(close_context)
-- On BREAK reduce production statement_finish_close -> expression_statement(close_context)
-- On BANG reduce production statement_finish_close -> expression_statement(close_context)
-- On AUTO reduce production statement_finish_close -> expression_statement(close_context)
-- On ATTRIBUTE reduce production statement_finish_close -> expression_statement(close_context)
-- On ASM reduce production statement_finish_close -> expression_statement(close_context)
-- On AND reduce production statement_finish_close -> expression_statement(close_context)
-- On ALIGNOF reduce production statement_finish_close -> expression_statement(close_context)
-- On ALIGNAS reduce production statement_finish_close -> expression_statement(close_context)

State 499:
## Known stack suffix:
## compound_statement(nop)
## LR(1) items:
statement_finish_close -> compound_statement(nop) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> compound_statement(nop)
-- On VOLATILE reduce production statement_finish_close -> compound_statement(nop)
-- On VOID reduce production statement_finish_close -> compound_statement(nop)
-- On VAR_NAME reduce production statement_finish_close -> compound_statement(nop)
-- On UNSIGNED reduce production statement_finish_close -> compound_statement(nop)
-- On UNION reduce production statement_finish_close -> compound_statement(nop)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> compound_statement(nop)
-- On TYPEDEF_NAME reduce production statement_finish_close -> compound_statement(nop)
-- On TYPEDEF reduce production statement_finish_close -> compound_statement(nop)
-- On TILDE reduce production statement_finish_close -> compound_statement(nop)
-- On SWITCH reduce production statement_finish_close -> compound_statement(nop)
-- On STRUCT reduce production statement_finish_close -> compound_statement(nop)
-- On STRING_LITERAL reduce production statement_finish_close -> compound_statement(nop)
-- On STATIC reduce production statement_finish_close -> compound_statement(nop)
-- On STAR reduce production statement_finish_close -> compound_statement(nop)
-- On SIZEOF reduce production statement_finish_close -> compound_statement(nop)
-- On SIGNED reduce production statement_finish_close -> compound_statement(nop)
-- On SHORT reduce production statement_finish_close -> compound_statement(nop)
-- On SEMICOLON reduce production statement_finish_close -> compound_statement(nop)
-- On RETURN reduce production statement_finish_close -> compound_statement(nop)
-- On RESTRICT reduce production statement_finish_close -> compound_statement(nop)
-- On REGISTER reduce production statement_finish_close -> compound_statement(nop)
-- On RBRACE reduce production statement_finish_close -> compound_statement(nop)
-- On PRAGMA reduce production statement_finish_close -> compound_statement(nop)
-- On PLUS reduce production statement_finish_close -> compound_statement(nop)
-- On PACKED reduce production statement_finish_close -> compound_statement(nop)
-- On MINUS reduce production statement_finish_close -> compound_statement(nop)
-- On LPAREN reduce production statement_finish_close -> compound_statement(nop)
-- On LONG reduce production statement_finish_close -> compound_statement(nop)
-- On LBRACE reduce production statement_finish_close -> compound_statement(nop)
-- On INT reduce production statement_finish_close -> compound_statement(nop)
-- On INLINE reduce production statement_finish_close -> compound_statement(nop)
-- On INC reduce production statement_finish_close -> compound_statement(nop)
-- On IF reduce production statement_finish_close -> compound_statement(nop)
-- On GOTO reduce production statement_finish_close -> compound_statement(nop)
-- On FOR reduce production statement_finish_close -> compound_statement(nop)
-- On FLOAT reduce production statement_finish_close -> compound_statement(nop)
-- On EXTERN reduce production statement_finish_close -> compound_statement(nop)
-- On ENUM reduce production statement_finish_close -> compound_statement(nop)
-- On DOUBLE reduce production statement_finish_close -> compound_statement(nop)
-- On DO reduce production statement_finish_close -> compound_statement(nop)
-- On DEFAULT reduce production statement_finish_close -> compound_statement(nop)
-- On DEC reduce production statement_finish_close -> compound_statement(nop)
-- On CONTINUE reduce production statement_finish_close -> compound_statement(nop)
-- On CONSTANT reduce production statement_finish_close -> compound_statement(nop)
-- On CONST reduce production statement_finish_close -> compound_statement(nop)
-- On CHAR reduce production statement_finish_close -> compound_statement(nop)
-- On CASE reduce production statement_finish_close -> compound_statement(nop)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> compound_statement(nop)
-- On BREAK reduce production statement_finish_close -> compound_statement(nop)
-- On BANG reduce production statement_finish_close -> compound_statement(nop)
-- On AUTO reduce production statement_finish_close -> compound_statement(nop)
-- On ATTRIBUTE reduce production statement_finish_close -> compound_statement(nop)
-- On ASM reduce production statement_finish_close -> compound_statement(nop)
-- On AND reduce production statement_finish_close -> compound_statement(nop)
-- On ALIGNOF reduce production statement_finish_close -> compound_statement(nop)
-- On ALIGNAS reduce production statement_finish_close -> compound_statement(nop)

State 500:
## Known stack suffix:
## asm_statement(close_context)
## LR(1) items:
statement_finish_close -> asm_statement(close_context) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> asm_statement(close_context)
-- On VOLATILE reduce production statement_finish_close -> asm_statement(close_context)
-- On VOID reduce production statement_finish_close -> asm_statement(close_context)
-- On VAR_NAME reduce production statement_finish_close -> asm_statement(close_context)
-- On UNSIGNED reduce production statement_finish_close -> asm_statement(close_context)
-- On UNION reduce production statement_finish_close -> asm_statement(close_context)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> asm_statement(close_context)
-- On TYPEDEF_NAME reduce production statement_finish_close -> asm_statement(close_context)
-- On TYPEDEF reduce production statement_finish_close -> asm_statement(close_context)
-- On TILDE reduce production statement_finish_close -> asm_statement(close_context)
-- On SWITCH reduce production statement_finish_close -> asm_statement(close_context)
-- On STRUCT reduce production statement_finish_close -> asm_statement(close_context)
-- On STRING_LITERAL reduce production statement_finish_close -> asm_statement(close_context)
-- On STATIC reduce production statement_finish_close -> asm_statement(close_context)
-- On STAR reduce production statement_finish_close -> asm_statement(close_context)
-- On SIZEOF reduce production statement_finish_close -> asm_statement(close_context)
-- On SIGNED reduce production statement_finish_close -> asm_statement(close_context)
-- On SHORT reduce production statement_finish_close -> asm_statement(close_context)
-- On SEMICOLON reduce production statement_finish_close -> asm_statement(close_context)
-- On RETURN reduce production statement_finish_close -> asm_statement(close_context)
-- On RESTRICT reduce production statement_finish_close -> asm_statement(close_context)
-- On REGISTER reduce production statement_finish_close -> asm_statement(close_context)
-- On RBRACE reduce production statement_finish_close -> asm_statement(close_context)
-- On PRAGMA reduce production statement_finish_close -> asm_statement(close_context)
-- On PLUS reduce production statement_finish_close -> asm_statement(close_context)
-- On PACKED reduce production statement_finish_close -> asm_statement(close_context)
-- On MINUS reduce production statement_finish_close -> asm_statement(close_context)
-- On LPAREN reduce production statement_finish_close -> asm_statement(close_context)
-- On LONG reduce production statement_finish_close -> asm_statement(close_context)
-- On LBRACE reduce production statement_finish_close -> asm_statement(close_context)
-- On INT reduce production statement_finish_close -> asm_statement(close_context)
-- On INLINE reduce production statement_finish_close -> asm_statement(close_context)
-- On INC reduce production statement_finish_close -> asm_statement(close_context)
-- On IF reduce production statement_finish_close -> asm_statement(close_context)
-- On GOTO reduce production statement_finish_close -> asm_statement(close_context)
-- On FOR reduce production statement_finish_close -> asm_statement(close_context)
-- On FLOAT reduce production statement_finish_close -> asm_statement(close_context)
-- On EXTERN reduce production statement_finish_close -> asm_statement(close_context)
-- On ENUM reduce production statement_finish_close -> asm_statement(close_context)
-- On DOUBLE reduce production statement_finish_close -> asm_statement(close_context)
-- On DO reduce production statement_finish_close -> asm_statement(close_context)
-- On DEFAULT reduce production statement_finish_close -> asm_statement(close_context)
-- On DEC reduce production statement_finish_close -> asm_statement(close_context)
-- On CONTINUE reduce production statement_finish_close -> asm_statement(close_context)
-- On CONSTANT reduce production statement_finish_close -> asm_statement(close_context)
-- On CONST reduce production statement_finish_close -> asm_statement(close_context)
-- On CHAR reduce production statement_finish_close -> asm_statement(close_context)
-- On CASE reduce production statement_finish_close -> asm_statement(close_context)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> asm_statement(close_context)
-- On BREAK reduce production statement_finish_close -> asm_statement(close_context)
-- On BANG reduce production statement_finish_close -> asm_statement(close_context)
-- On AUTO reduce production statement_finish_close -> asm_statement(close_context)
-- On ATTRIBUTE reduce production statement_finish_close -> asm_statement(close_context)
-- On ASM reduce production statement_finish_close -> asm_statement(close_context)
-- On AND reduce production statement_finish_close -> asm_statement(close_context)
-- On ALIGNOF reduce production statement_finish_close -> asm_statement(close_context)
-- On ALIGNAS reduce production statement_finish_close -> asm_statement(close_context)

State 501:
## Known stack suffix:
## DEFAULT COLON statement_finish_close
## LR(1) items:
labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On VOLATILE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On VOID reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On VAR_NAME reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On UNSIGNED reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On UNION reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On UNDERSCORE_BOOL reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On TYPEDEF_NAME reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On TYPEDEF reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On TILDE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On SWITCH reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On STRUCT reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On STRING_LITERAL reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On STATIC reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On STAR reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On SIZEOF reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On SIGNED reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On SHORT reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On SEMICOLON reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On RETURN reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On RESTRICT reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On REGISTER reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On RBRACE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On PRAGMA reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On PLUS reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On PACKED reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On MINUS reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On LPAREN reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On LONG reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On LBRACE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On INT reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On INLINE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On INC reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On IF reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On GOTO reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On FOR reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On FLOAT reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On EXTERN reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On ENUM reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On DOUBLE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On DO reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On DEFAULT reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On DEC reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On CONTINUE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On CONSTANT reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On CONST reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On CHAR reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On CASE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On BUILTIN_VA_ARG reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On BREAK reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On BANG reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On AUTO reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On ATTRIBUTE reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On ASM reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On AND reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On ALIGNOF reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close
-- On ALIGNAS reduce production labeled_statement(statement_finish_close) -> DEFAULT COLON statement_finish_close

State 502:
## Known stack suffix:
## DO open_context statement_finish_close
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close . WHILE LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 503
## Reductions:

State 503:
## Known stack suffix:
## DO open_context statement_finish_close WHILE
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE . LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 504
## Reductions:

State 504:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN . expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 505
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 505:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression . RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 506
-- On COMMA shift to state 98
## Reductions:

State 506:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN . close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On close_context shift to state 507
## Reductions:
-- On SEMICOLON reduce production close_context ->

State 507:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 508
## Reductions:

State 508:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On VOLATILE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On VOID reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On VAR_NAME reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On UNSIGNED reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On UNION reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On UNDERSCORE_BOOL reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On TYPEDEF_NAME reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On TYPEDEF reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On TILDE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SWITCH reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On STRUCT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On STRING_LITERAL reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On STATIC reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On STAR reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SIZEOF reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SIGNED reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SHORT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SEMICOLON reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On RETURN reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On RESTRICT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On REGISTER reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On RBRACE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On PRAGMA reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On PLUS reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On PACKED reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On MINUS reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On LPAREN reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On LONG reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On LBRACE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On INT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On INLINE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On INC reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On IF reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On GOTO reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On FOR reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On FLOAT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On EXTERN reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ENUM reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On DOUBLE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On DO reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On DEFAULT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On DEC reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CONTINUE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CONSTANT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CONST reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CHAR reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CASE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On BUILTIN_VA_ARG reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On BREAK reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On BANG reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On AUTO reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ATTRIBUTE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ASM reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On AND reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ALIGNOF reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ALIGNAS reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON

State 509:
## Known stack suffix:
## FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On VOLATILE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On VOID reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On VAR_NAME reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On UNSIGNED reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On UNION reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On UNDERSCORE_BOOL reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On TYPEDEF_NAME reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On TYPEDEF reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On TILDE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SWITCH reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On STRUCT reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On STRING_LITERAL reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On STATIC reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On STAR reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SIZEOF reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SIGNED reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SHORT reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SEMICOLON reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On RETURN reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On RESTRICT reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On REGISTER reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On RBRACE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On PRAGMA reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On PLUS reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On PACKED reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On MINUS reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On LPAREN reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On LONG reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On LBRACE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On INT reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On INLINE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On INC reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On IF reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On GOTO reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On FOR reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On FLOAT reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On EXTERN reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ENUM reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On DOUBLE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On DO reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On DEFAULT reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On DEC reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CONTINUE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CONSTANT reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CONST reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CHAR reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CASE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On BUILTIN_VA_ARG reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On BREAK reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On BANG reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On AUTO reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ATTRIBUTE reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ASM reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On AND reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ALIGNOF reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ALIGNAS reduce production iteration_statement(nop,statement_finish_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close

State 510:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
optional(expression,RPAREN) -> expression . RPAREN [ WHILE VAR_NAME TYPEDEF_NAME TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BREAK BANG ASM AND ALIGNOF ]
## Transitions:
-- On RPAREN shift to state 511
-- On COMMA shift to state 98
## Reductions:

State 511:
## Known stack suffix:
## expression RPAREN
## LR(1) items:
optional(expression,RPAREN) -> expression RPAREN . [ WHILE VAR_NAME TYPEDEF_NAME TILDE SWITCH STRING_LITERAL STAR SIZEOF SEMICOLON RETURN PLUS MINUS LPAREN LBRACE INC IF GOTO FOR DO DEFAULT DEC CONTINUE CONSTANT CASE BUILTIN_VA_ARG BREAK BANG ASM AND ALIGNOF ]
## Transitions:
## Reductions:
-- On WHILE reduce production optional(expression,RPAREN) -> expression RPAREN
-- On VAR_NAME reduce production optional(expression,RPAREN) -> expression RPAREN
-- On TYPEDEF_NAME reduce production optional(expression,RPAREN) -> expression RPAREN
-- On TILDE reduce production optional(expression,RPAREN) -> expression RPAREN
-- On SWITCH reduce production optional(expression,RPAREN) -> expression RPAREN
-- On STRING_LITERAL reduce production optional(expression,RPAREN) -> expression RPAREN
-- On STAR reduce production optional(expression,RPAREN) -> expression RPAREN
-- On SIZEOF reduce production optional(expression,RPAREN) -> expression RPAREN
-- On SEMICOLON reduce production optional(expression,RPAREN) -> expression RPAREN
-- On RETURN reduce production optional(expression,RPAREN) -> expression RPAREN
-- On PLUS reduce production optional(expression,RPAREN) -> expression RPAREN
-- On MINUS reduce production optional(expression,RPAREN) -> expression RPAREN
-- On LPAREN reduce production optional(expression,RPAREN) -> expression RPAREN
-- On LBRACE reduce production optional(expression,RPAREN) -> expression RPAREN
-- On INC reduce production optional(expression,RPAREN) -> expression RPAREN
-- On IF reduce production optional(expression,RPAREN) -> expression RPAREN
-- On GOTO reduce production optional(expression,RPAREN) -> expression RPAREN
-- On FOR reduce production optional(expression,RPAREN) -> expression RPAREN
-- On DO reduce production optional(expression,RPAREN) -> expression RPAREN
-- On DEFAULT reduce production optional(expression,RPAREN) -> expression RPAREN
-- On DEC reduce production optional(expression,RPAREN) -> expression RPAREN
-- On CONTINUE reduce production optional(expression,RPAREN) -> expression RPAREN
-- On CONSTANT reduce production optional(expression,RPAREN) -> expression RPAREN
-- On CASE reduce production optional(expression,RPAREN) -> expression RPAREN
-- On BUILTIN_VA_ARG reduce production optional(expression,RPAREN) -> expression RPAREN
-- On BREAK reduce production optional(expression,RPAREN) -> expression RPAREN
-- On BANG reduce production optional(expression,RPAREN) -> expression RPAREN
-- On ASM reduce production optional(expression,RPAREN) -> expression RPAREN
-- On AND reduce production optional(expression,RPAREN) -> expression RPAREN
-- On ALIGNOF reduce production optional(expression,RPAREN) -> expression RPAREN

State 512:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ SEMICOLON COMMA ]
optional(expression,SEMICOLON) -> expression . SEMICOLON [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
-- On SEMICOLON shift to state 513
-- On COMMA shift to state 98
## Reductions:

State 513:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
optional(expression,SEMICOLON) -> expression SEMICOLON . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF SEMICOLON RPAREN PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On TILDE reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On STRING_LITERAL reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On STAR reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On SIZEOF reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On SEMICOLON reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On RPAREN reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On PLUS reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On MINUS reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On LPAREN reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On INC reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On DEC reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On CONSTANT reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On BUILTIN_VA_ARG reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On BANG reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On AND reduce production optional(expression,SEMICOLON) -> expression SEMICOLON
-- On ALIGNOF reduce production optional(expression,SEMICOLON) -> expression SEMICOLON

State 514:
## Known stack suffix:
## declaration_specifiers_typedef
## LR(1) items:
declaration(block_item) -> declaration_specifiers_typedef . option(typedef_declarator_list) SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 226
-- On typedef_declarator_list shift to state 515
-- On typedef_declarator shift to state 520
-- On option(typedef_declarator_list) shift to state 521
-- On list(pointer1) shift to state 227
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On declare_typename(fst(declarator)) shift to state 518
-- On declarator shift to state 519
## Reductions:
-- On STAR reduce production list(pointer1) ->
-- On SEMICOLON reduce production option(typedef_declarator_list) ->

State 515:
## Known stack suffix:
## typedef_declarator_list
## LR(1) items:
option(typedef_declarator_list) -> typedef_declarator_list . [ SEMICOLON ]
typedef_declarator_list -> typedef_declarator_list . COMMA typedef_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On COMMA shift to state 516
## Reductions:
-- On SEMICOLON reduce production option(typedef_declarator_list) -> typedef_declarator_list

State 516:
## Known stack suffix:
## typedef_declarator_list COMMA
## LR(1) items:
typedef_declarator_list -> typedef_declarator_list COMMA . typedef_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 226
-- On typedef_declarator shift to state 517
-- On list(pointer1) shift to state 227
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On declare_typename(fst(declarator)) shift to state 518
-- On declarator shift to state 519
## Reductions:
-- On STAR reduce production list(pointer1) ->

State 517:
## Known stack suffix:
## typedef_declarator_list COMMA typedef_declarator
## LR(1) items:
typedef_declarator_list -> typedef_declarator_list COMMA typedef_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production typedef_declarator_list -> typedef_declarator_list COMMA typedef_declarator
-- On COMMA reduce production typedef_declarator_list -> typedef_declarator_list COMMA typedef_declarator

State 518:
## Known stack suffix:
## declare_typename(fst(declarator))
## LR(1) items:
typedef_declarator -> declare_typename(fst(declarator)) . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production typedef_declarator -> declare_typename(fst(declarator))
-- On COMMA reduce production typedef_declarator -> declare_typename(fst(declarator))

State 519:
## Known stack suffix:
## declarator
## LR(1) items:
declare_typename(fst(declarator)) -> declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production declare_typename(fst(declarator)) -> declarator
-- On COMMA reduce production declare_typename(fst(declarator)) -> declarator

State 520:
## Known stack suffix:
## typedef_declarator
## LR(1) items:
typedef_declarator_list -> typedef_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production typedef_declarator_list -> typedef_declarator
-- On COMMA reduce production typedef_declarator_list -> typedef_declarator

State 521:
## Known stack suffix:
## declaration_specifiers_typedef option(typedef_declarator_list)
## LR(1) items:
declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 522
## Reductions:

State 522:
## Known stack suffix:
## declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
## LR(1) items:
declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On VOLATILE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On VOID reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On VAR_NAME reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On UNSIGNED reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On UNION reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On UNDERSCORE_BOOL reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On TYPEDEF_NAME reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On TYPEDEF reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On TILDE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On SWITCH reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On STRUCT reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On STRING_LITERAL reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On STATIC reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On STAR reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On SIZEOF reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On SIGNED reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On SHORT reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On SEMICOLON reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On RETURN reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On RESTRICT reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On REGISTER reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On RBRACE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On PRAGMA reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On PLUS reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On PACKED reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On MINUS reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On LPAREN reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On LONG reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On LBRACE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On INT reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On INLINE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On INC reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On IF reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On GOTO reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On FOR reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On FLOAT reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On EXTERN reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On ENUM reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On DOUBLE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On DO reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On DEFAULT reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On DEC reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On CONTINUE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On CONSTANT reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On CONST reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On CHAR reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On CASE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On BUILTIN_VA_ARG reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On BREAK reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On BANG reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On AUTO reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On ATTRIBUTE reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On ASM reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On AND reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On ALIGNOF reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On ALIGNAS reduce production declaration(block_item) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON

State 523:
## Known stack suffix:
## declaration_specifiers(declaration(block_item))
## LR(1) items:
declaration(block_item) -> declaration_specifiers(declaration(block_item)) . option(init_declarator_list) SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 226
-- On option(init_declarator_list) shift to state 524
-- On list(pointer1) shift to state 227
-- On init_declarator_list shift to state 526
-- On init_declarator shift to state 532
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On declare_varname(fst(declarator)) shift to state 529
-- On declarator shift to state 294
## Reductions:
-- On STAR reduce production list(pointer1) ->
-- On SEMICOLON reduce production option(init_declarator_list) ->

State 524:
## Known stack suffix:
## declaration_specifiers(declaration(block_item)) option(init_declarator_list)
## LR(1) items:
declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 525
## Reductions:

State 525:
## Known stack suffix:
## declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
## LR(1) items:
declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On VOLATILE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On VOID reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On VAR_NAME reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On UNSIGNED reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On UNION reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On UNDERSCORE_BOOL reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On TYPEDEF_NAME reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On TYPEDEF reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On TILDE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On SWITCH reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On STRUCT reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On STRING_LITERAL reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On STATIC reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On STAR reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On SIZEOF reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On SIGNED reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On SHORT reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On SEMICOLON reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On RETURN reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On RESTRICT reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On REGISTER reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On RBRACE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On PRAGMA reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On PLUS reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On PACKED reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On MINUS reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On LPAREN reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On LONG reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On LBRACE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On INT reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On INLINE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On INC reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On IF reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On GOTO reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On FOR reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On FLOAT reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On EXTERN reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On ENUM reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On DOUBLE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On DO reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On DEFAULT reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On DEC reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On CONTINUE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On CONSTANT reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On CONST reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On CHAR reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On CASE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On BUILTIN_VA_ARG reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On BREAK reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On BANG reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On AUTO reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On ATTRIBUTE reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On ASM reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On AND reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On ALIGNOF reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON
-- On ALIGNAS reduce production declaration(block_item) -> declaration_specifiers(declaration(block_item)) option(init_declarator_list) SEMICOLON

State 526:
## Known stack suffix:
## init_declarator_list
## LR(1) items:
init_declarator_list -> init_declarator_list . COMMA init_declarator [ SEMICOLON COMMA ]
option(init_declarator_list) -> init_declarator_list . [ SEMICOLON ]
## Transitions:
-- On COMMA shift to state 527
## Reductions:
-- On SEMICOLON reduce production option(init_declarator_list) -> init_declarator_list

State 527:
## Known stack suffix:
## init_declarator_list COMMA
## LR(1) items:
init_declarator_list -> init_declarator_list COMMA . init_declarator [ SEMICOLON COMMA ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 226
-- On list(pointer1) shift to state 227
-- On init_declarator shift to state 528
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On declare_varname(fst(declarator)) shift to state 529
-- On declarator shift to state 294
## Reductions:
-- On STAR reduce production list(pointer1) ->

State 528:
## Known stack suffix:
## init_declarator_list COMMA init_declarator
## LR(1) items:
init_declarator_list -> init_declarator_list COMMA init_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production init_declarator_list -> init_declarator_list COMMA init_declarator
-- On COMMA reduce production init_declarator_list -> init_declarator_list COMMA init_declarator

State 529:
## Known stack suffix:
## declare_varname(fst(declarator))
## LR(1) items:
init_declarator -> declare_varname(fst(declarator)) . [ SEMICOLON COMMA ]
init_declarator -> declare_varname(fst(declarator)) . EQ c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On EQ shift to state 530
## Reductions:
-- On SEMICOLON reduce production init_declarator -> declare_varname(fst(declarator))
-- On COMMA reduce production init_declarator -> declare_varname(fst(declarator))

State 530:
## Known stack suffix:
## declare_varname(fst(declarator)) EQ
## LR(1) items:
init_declarator -> declare_varname(fst(declarator)) EQ . c_initializer [ SEMICOLON COMMA ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 133
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On c_initializer shift to state 531
-- On assignment_expression shift to state 138
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 531:
## Known stack suffix:
## declare_varname(fst(declarator)) EQ c_initializer
## LR(1) items:
init_declarator -> declare_varname(fst(declarator)) EQ c_initializer . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production init_declarator -> declare_varname(fst(declarator)) EQ c_initializer
-- On COMMA reduce production init_declarator -> declare_varname(fst(declarator)) EQ c_initializer

State 532:
## Known stack suffix:
## init_declarator
## LR(1) items:
init_declarator_list -> init_declarator . [ SEMICOLON COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production init_declarator_list -> init_declarator
-- On COMMA reduce production init_declarator_list -> init_declarator

State 533:
## Known stack suffix:
## declaration(block_item)
## LR(1) items:
for_statement_header -> declaration(block_item) . [ VAR_NAME TILDE STRING_LITERAL STAR SIZEOF SEMICOLON PLUS MINUS LPAREN INC DEC CONSTANT BUILTIN_VA_ARG BANG AND ALIGNOF ]
## Transitions:
## Reductions:
-- On VAR_NAME reduce production for_statement_header -> declaration(block_item)
-- On TILDE reduce production for_statement_header -> declaration(block_item)
-- On STRING_LITERAL reduce production for_statement_header -> declaration(block_item)
-- On STAR reduce production for_statement_header -> declaration(block_item)
-- On SIZEOF reduce production for_statement_header -> declaration(block_item)
-- On SEMICOLON reduce production for_statement_header -> declaration(block_item)
-- On PLUS reduce production for_statement_header -> declaration(block_item)
-- On MINUS reduce production for_statement_header -> declaration(block_item)
-- On LPAREN reduce production for_statement_header -> declaration(block_item)
-- On INC reduce production for_statement_header -> declaration(block_item)
-- On DEC reduce production for_statement_header -> declaration(block_item)
-- On CONSTANT reduce production for_statement_header -> declaration(block_item)
-- On BUILTIN_VA_ARG reduce production for_statement_header -> declaration(block_item)
-- On BANG reduce production for_statement_header -> declaration(block_item)
-- On AND reduce production for_statement_header -> declaration(block_item)
-- On ALIGNOF reduce production for_statement_header -> declaration(block_item)

State 534:
## Known stack suffix:
## DO open_context statement_finish_close
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close . WHILE LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> DO open_context statement_finish_close . WHILE LPAREN expression RPAREN close_context SEMICOLON [ ELSE ]
## Transitions:
-- On WHILE shift to state 535
## Reductions:

State 535:
## Known stack suffix:
## DO open_context statement_finish_close WHILE
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE . LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> DO open_context statement_finish_close WHILE . LPAREN expression RPAREN close_context SEMICOLON [ ELSE ]
## Transitions:
-- On LPAREN shift to state 536
## Reductions:

State 536:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN . expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> DO open_context statement_finish_close WHILE LPAREN . expression RPAREN close_context SEMICOLON [ ELSE ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 537
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 537:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression . RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> DO open_context statement_finish_close WHILE LPAREN expression . RPAREN close_context SEMICOLON [ ELSE ]
## Transitions:
-- On RPAREN shift to state 538
-- On COMMA shift to state 98
## Reductions:

State 538:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN expression RPAREN
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN . close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN . close_context SEMICOLON [ ELSE ]
## Transitions:
-- On close_context shift to state 539
## Reductions:
-- On SEMICOLON reduce production close_context ->

State 539:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context . SEMICOLON [ ELSE ]
## Transitions:
-- On SEMICOLON shift to state 540
## Reductions:

State 540:
## Known stack suffix:
## DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
iteration_statement(nop,statement_intern_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON . [ ELSE ]
## Transitions:
## Reductions:
-- On WHILE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On VOLATILE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On VOID reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On VAR_NAME reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On UNSIGNED reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On UNION reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On UNDERSCORE_BOOL reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On TYPEDEF_NAME reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On TYPEDEF reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On TILDE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SWITCH reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On STRUCT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On STRING_LITERAL reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On STATIC reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On STAR reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SIZEOF reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SIGNED reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SHORT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On SEMICOLON reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On RETURN reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On RESTRICT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On REGISTER reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On RBRACE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On PRAGMA reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On PLUS reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On PACKED reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On MINUS reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On LPAREN reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On LONG reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On LBRACE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On INT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On INLINE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On INC reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On IF reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On GOTO reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On FOR reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On FLOAT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On EXTERN reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ENUM reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ELSE reduce production iteration_statement(nop,statement_intern_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On DOUBLE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On DO reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On DEFAULT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On DEC reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CONTINUE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CONSTANT reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CONST reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CHAR reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On CASE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On BUILTIN_VA_ARG reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On BREAK reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On BANG reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On AUTO reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ATTRIBUTE reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ASM reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On AND reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ALIGNOF reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON
-- On ALIGNAS reduce production iteration_statement(nop,statement_finish_close) -> DO open_context statement_finish_close WHILE LPAREN expression RPAREN close_context SEMICOLON

State 541:
## Known stack suffix:
## DEFAULT
## LR(1) items:
labeled_statement(statement_finish_close) -> DEFAULT . COLON statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
labeled_statement(statement_intern_close) -> DEFAULT . COLON statement_intern_close [ ELSE ]
## Transitions:
-- On COLON shift to state 542
## Reductions:

State 542:
## Known stack suffix:
## DEFAULT COLON
## LR(1) items:
labeled_statement(statement_finish_close) -> DEFAULT COLON . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
labeled_statement(statement_intern_close) -> DEFAULT COLON . statement_intern_close [ ELSE ]
## Transitions:
-- On WHILE shift to state 404
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 408
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 416
-- On DO shift to state 431
-- On DEFAULT shift to state 541
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 543
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_intern_close shift to state 560
-- On statement_finish_close shift to state 501
-- On shift_expression shift to state 54
-- On selection_statement_intern_close shift to state 547
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_intern_close) shift to state 548
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 549
-- On iteration_statement(nop,statement_intern_close) shift to state 550
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 551
-- On general_identifier shift to state 554
-- On expression_statement(close_context) shift to state 557
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 558
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 559
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 543:
## Known stack suffix:
## CASE
## LR(1) items:
labeled_statement(statement_finish_close) -> CASE . conditional_expression COLON statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
labeled_statement(statement_intern_close) -> CASE . conditional_expression COLON statement_intern_close [ ELSE ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 544
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 544:
## Known stack suffix:
## CASE conditional_expression
## LR(1) items:
labeled_statement(statement_finish_close) -> CASE conditional_expression . COLON statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
labeled_statement(statement_intern_close) -> CASE conditional_expression . COLON statement_intern_close [ ELSE ]
## Transitions:
-- On COLON shift to state 545
## Reductions:

State 545:
## Known stack suffix:
## CASE conditional_expression COLON
## LR(1) items:
labeled_statement(statement_finish_close) -> CASE conditional_expression COLON . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
labeled_statement(statement_intern_close) -> CASE conditional_expression COLON . statement_intern_close [ ELSE ]
## Transitions:
-- On WHILE shift to state 404
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 408
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 416
-- On DO shift to state 431
-- On DEFAULT shift to state 541
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 543
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_intern_close shift to state 546
-- On statement_finish_close shift to state 484
-- On shift_expression shift to state 54
-- On selection_statement_intern_close shift to state 547
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_intern_close) shift to state 548
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 549
-- On iteration_statement(nop,statement_intern_close) shift to state 550
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 551
-- On general_identifier shift to state 554
-- On expression_statement(close_context) shift to state 557
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 558
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 559
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 546:
## Known stack suffix:
## CASE conditional_expression COLON statement_intern_close
## LR(1) items:
labeled_statement(statement_intern_close) -> CASE conditional_expression COLON statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production labeled_statement(statement_intern_close) -> CASE conditional_expression COLON statement_intern_close

State 547:
## Known stack suffix:
## selection_statement_intern_close
## LR(1) items:
statement_intern_close -> selection_statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production statement_intern_close -> selection_statement_intern_close

State 548:
## Known stack suffix:
## labeled_statement(statement_intern_close)
## LR(1) items:
statement_intern_close -> labeled_statement(statement_intern_close) . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production statement_intern_close -> labeled_statement(statement_intern_close)

State 549:
## Known stack suffix:
## jump_statement(close_context)
## LR(1) items:
statement_finish_close -> jump_statement(close_context) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
statement_intern_close -> jump_statement(close_context) . [ ELSE ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> jump_statement(close_context)
-- On VOLATILE reduce production statement_finish_close -> jump_statement(close_context)
-- On VOID reduce production statement_finish_close -> jump_statement(close_context)
-- On VAR_NAME reduce production statement_finish_close -> jump_statement(close_context)
-- On UNSIGNED reduce production statement_finish_close -> jump_statement(close_context)
-- On UNION reduce production statement_finish_close -> jump_statement(close_context)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> jump_statement(close_context)
-- On TYPEDEF_NAME reduce production statement_finish_close -> jump_statement(close_context)
-- On TYPEDEF reduce production statement_finish_close -> jump_statement(close_context)
-- On TILDE reduce production statement_finish_close -> jump_statement(close_context)
-- On SWITCH reduce production statement_finish_close -> jump_statement(close_context)
-- On STRUCT reduce production statement_finish_close -> jump_statement(close_context)
-- On STRING_LITERAL reduce production statement_finish_close -> jump_statement(close_context)
-- On STATIC reduce production statement_finish_close -> jump_statement(close_context)
-- On STAR reduce production statement_finish_close -> jump_statement(close_context)
-- On SIZEOF reduce production statement_finish_close -> jump_statement(close_context)
-- On SIGNED reduce production statement_finish_close -> jump_statement(close_context)
-- On SHORT reduce production statement_finish_close -> jump_statement(close_context)
-- On SEMICOLON reduce production statement_finish_close -> jump_statement(close_context)
-- On RETURN reduce production statement_finish_close -> jump_statement(close_context)
-- On RESTRICT reduce production statement_finish_close -> jump_statement(close_context)
-- On REGISTER reduce production statement_finish_close -> jump_statement(close_context)
-- On RBRACE reduce production statement_finish_close -> jump_statement(close_context)
-- On PRAGMA reduce production statement_finish_close -> jump_statement(close_context)
-- On PLUS reduce production statement_finish_close -> jump_statement(close_context)
-- On PACKED reduce production statement_finish_close -> jump_statement(close_context)
-- On MINUS reduce production statement_finish_close -> jump_statement(close_context)
-- On LPAREN reduce production statement_finish_close -> jump_statement(close_context)
-- On LONG reduce production statement_finish_close -> jump_statement(close_context)
-- On LBRACE reduce production statement_finish_close -> jump_statement(close_context)
-- On INT reduce production statement_finish_close -> jump_statement(close_context)
-- On INLINE reduce production statement_finish_close -> jump_statement(close_context)
-- On INC reduce production statement_finish_close -> jump_statement(close_context)
-- On IF reduce production statement_finish_close -> jump_statement(close_context)
-- On GOTO reduce production statement_finish_close -> jump_statement(close_context)
-- On FOR reduce production statement_finish_close -> jump_statement(close_context)
-- On FLOAT reduce production statement_finish_close -> jump_statement(close_context)
-- On EXTERN reduce production statement_finish_close -> jump_statement(close_context)
-- On ENUM reduce production statement_finish_close -> jump_statement(close_context)
-- On ELSE reduce production statement_intern_close -> jump_statement(close_context)
-- On DOUBLE reduce production statement_finish_close -> jump_statement(close_context)
-- On DO reduce production statement_finish_close -> jump_statement(close_context)
-- On DEFAULT reduce production statement_finish_close -> jump_statement(close_context)
-- On DEC reduce production statement_finish_close -> jump_statement(close_context)
-- On CONTINUE reduce production statement_finish_close -> jump_statement(close_context)
-- On CONSTANT reduce production statement_finish_close -> jump_statement(close_context)
-- On CONST reduce production statement_finish_close -> jump_statement(close_context)
-- On CHAR reduce production statement_finish_close -> jump_statement(close_context)
-- On CASE reduce production statement_finish_close -> jump_statement(close_context)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> jump_statement(close_context)
-- On BREAK reduce production statement_finish_close -> jump_statement(close_context)
-- On BANG reduce production statement_finish_close -> jump_statement(close_context)
-- On AUTO reduce production statement_finish_close -> jump_statement(close_context)
-- On ATTRIBUTE reduce production statement_finish_close -> jump_statement(close_context)
-- On ASM reduce production statement_finish_close -> jump_statement(close_context)
-- On AND reduce production statement_finish_close -> jump_statement(close_context)
-- On ALIGNOF reduce production statement_finish_close -> jump_statement(close_context)
-- On ALIGNAS reduce production statement_finish_close -> jump_statement(close_context)

State 550:
## Known stack suffix:
## iteration_statement(nop,statement_intern_close)
## LR(1) items:
statement_intern_close -> iteration_statement(nop,statement_intern_close) . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production statement_intern_close -> iteration_statement(nop,statement_intern_close)

State 551:
## Known stack suffix:
## if_else_statement_begin(nop)
## LR(1) items:
selection_statement_finish(nop) -> if_else_statement_begin(nop) . ELSE statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
selection_statement_intern_close -> if_else_statement_begin(nop) . ELSE statement_intern_close [ ELSE ]
## Transitions:
-- On ELSE shift to state 552
## Reductions:

State 552:
## Known stack suffix:
## if_else_statement_begin(nop) ELSE
## LR(1) items:
selection_statement_finish(nop) -> if_else_statement_begin(nop) ELSE . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
selection_statement_intern_close -> if_else_statement_begin(nop) ELSE . statement_intern_close [ ELSE ]
## Transitions:
-- On WHILE shift to state 404
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 408
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 416
-- On DO shift to state 431
-- On DEFAULT shift to state 541
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 543
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_intern_close shift to state 553
-- On statement_finish_close shift to state 494
-- On shift_expression shift to state 54
-- On selection_statement_intern_close shift to state 547
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_intern_close) shift to state 548
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 549
-- On iteration_statement(nop,statement_intern_close) shift to state 550
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 551
-- On general_identifier shift to state 554
-- On expression_statement(close_context) shift to state 557
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 558
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 559
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 553:
## Known stack suffix:
## if_else_statement_begin(nop) ELSE statement_intern_close
## LR(1) items:
selection_statement_intern_close -> if_else_statement_begin(nop) ELSE statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production selection_statement_intern_close -> if_else_statement_begin(nop) ELSE statement_intern_close

State 554:
## Known stack suffix:
## general_identifier
## LR(1) items:
labeled_statement(statement_finish_close) -> general_identifier . COLON statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
labeled_statement(statement_intern_close) -> general_identifier . COLON statement_intern_close [ ELSE ]
## Transitions:
-- On COLON shift to state 555
## Reductions:

State 555:
## Known stack suffix:
## general_identifier COLON
## LR(1) items:
labeled_statement(statement_finish_close) -> general_identifier COLON . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
labeled_statement(statement_intern_close) -> general_identifier COLON . statement_intern_close [ ELSE ]
## Transitions:
-- On WHILE shift to state 404
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 408
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 416
-- On DO shift to state 431
-- On DEFAULT shift to state 541
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 543
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_intern_close shift to state 556
-- On statement_finish_close shift to state 497
-- On shift_expression shift to state 54
-- On selection_statement_intern_close shift to state 547
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_intern_close) shift to state 548
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 549
-- On iteration_statement(nop,statement_intern_close) shift to state 550
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 551
-- On general_identifier shift to state 554
-- On expression_statement(close_context) shift to state 557
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 558
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 559
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 556:
## Known stack suffix:
## general_identifier COLON statement_intern_close
## LR(1) items:
labeled_statement(statement_intern_close) -> general_identifier COLON statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production labeled_statement(statement_intern_close) -> general_identifier COLON statement_intern_close

State 557:
## Known stack suffix:
## expression_statement(close_context)
## LR(1) items:
statement_finish_close -> expression_statement(close_context) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
statement_intern_close -> expression_statement(close_context) . [ ELSE ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> expression_statement(close_context)
-- On VOLATILE reduce production statement_finish_close -> expression_statement(close_context)
-- On VOID reduce production statement_finish_close -> expression_statement(close_context)
-- On VAR_NAME reduce production statement_finish_close -> expression_statement(close_context)
-- On UNSIGNED reduce production statement_finish_close -> expression_statement(close_context)
-- On UNION reduce production statement_finish_close -> expression_statement(close_context)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> expression_statement(close_context)
-- On TYPEDEF_NAME reduce production statement_finish_close -> expression_statement(close_context)
-- On TYPEDEF reduce production statement_finish_close -> expression_statement(close_context)
-- On TILDE reduce production statement_finish_close -> expression_statement(close_context)
-- On SWITCH reduce production statement_finish_close -> expression_statement(close_context)
-- On STRUCT reduce production statement_finish_close -> expression_statement(close_context)
-- On STRING_LITERAL reduce production statement_finish_close -> expression_statement(close_context)
-- On STATIC reduce production statement_finish_close -> expression_statement(close_context)
-- On STAR reduce production statement_finish_close -> expression_statement(close_context)
-- On SIZEOF reduce production statement_finish_close -> expression_statement(close_context)
-- On SIGNED reduce production statement_finish_close -> expression_statement(close_context)
-- On SHORT reduce production statement_finish_close -> expression_statement(close_context)
-- On SEMICOLON reduce production statement_finish_close -> expression_statement(close_context)
-- On RETURN reduce production statement_finish_close -> expression_statement(close_context)
-- On RESTRICT reduce production statement_finish_close -> expression_statement(close_context)
-- On REGISTER reduce production statement_finish_close -> expression_statement(close_context)
-- On RBRACE reduce production statement_finish_close -> expression_statement(close_context)
-- On PRAGMA reduce production statement_finish_close -> expression_statement(close_context)
-- On PLUS reduce production statement_finish_close -> expression_statement(close_context)
-- On PACKED reduce production statement_finish_close -> expression_statement(close_context)
-- On MINUS reduce production statement_finish_close -> expression_statement(close_context)
-- On LPAREN reduce production statement_finish_close -> expression_statement(close_context)
-- On LONG reduce production statement_finish_close -> expression_statement(close_context)
-- On LBRACE reduce production statement_finish_close -> expression_statement(close_context)
-- On INT reduce production statement_finish_close -> expression_statement(close_context)
-- On INLINE reduce production statement_finish_close -> expression_statement(close_context)
-- On INC reduce production statement_finish_close -> expression_statement(close_context)
-- On IF reduce production statement_finish_close -> expression_statement(close_context)
-- On GOTO reduce production statement_finish_close -> expression_statement(close_context)
-- On FOR reduce production statement_finish_close -> expression_statement(close_context)
-- On FLOAT reduce production statement_finish_close -> expression_statement(close_context)
-- On EXTERN reduce production statement_finish_close -> expression_statement(close_context)
-- On ENUM reduce production statement_finish_close -> expression_statement(close_context)
-- On ELSE reduce production statement_intern_close -> expression_statement(close_context)
-- On DOUBLE reduce production statement_finish_close -> expression_statement(close_context)
-- On DO reduce production statement_finish_close -> expression_statement(close_context)
-- On DEFAULT reduce production statement_finish_close -> expression_statement(close_context)
-- On DEC reduce production statement_finish_close -> expression_statement(close_context)
-- On CONTINUE reduce production statement_finish_close -> expression_statement(close_context)
-- On CONSTANT reduce production statement_finish_close -> expression_statement(close_context)
-- On CONST reduce production statement_finish_close -> expression_statement(close_context)
-- On CHAR reduce production statement_finish_close -> expression_statement(close_context)
-- On CASE reduce production statement_finish_close -> expression_statement(close_context)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> expression_statement(close_context)
-- On BREAK reduce production statement_finish_close -> expression_statement(close_context)
-- On BANG reduce production statement_finish_close -> expression_statement(close_context)
-- On AUTO reduce production statement_finish_close -> expression_statement(close_context)
-- On ATTRIBUTE reduce production statement_finish_close -> expression_statement(close_context)
-- On ASM reduce production statement_finish_close -> expression_statement(close_context)
-- On AND reduce production statement_finish_close -> expression_statement(close_context)
-- On ALIGNOF reduce production statement_finish_close -> expression_statement(close_context)
-- On ALIGNAS reduce production statement_finish_close -> expression_statement(close_context)

State 558:
## Known stack suffix:
## compound_statement(nop)
## LR(1) items:
statement_finish_close -> compound_statement(nop) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
statement_intern_close -> compound_statement(nop) . [ ELSE ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> compound_statement(nop)
-- On VOLATILE reduce production statement_finish_close -> compound_statement(nop)
-- On VOID reduce production statement_finish_close -> compound_statement(nop)
-- On VAR_NAME reduce production statement_finish_close -> compound_statement(nop)
-- On UNSIGNED reduce production statement_finish_close -> compound_statement(nop)
-- On UNION reduce production statement_finish_close -> compound_statement(nop)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> compound_statement(nop)
-- On TYPEDEF_NAME reduce production statement_finish_close -> compound_statement(nop)
-- On TYPEDEF reduce production statement_finish_close -> compound_statement(nop)
-- On TILDE reduce production statement_finish_close -> compound_statement(nop)
-- On SWITCH reduce production statement_finish_close -> compound_statement(nop)
-- On STRUCT reduce production statement_finish_close -> compound_statement(nop)
-- On STRING_LITERAL reduce production statement_finish_close -> compound_statement(nop)
-- On STATIC reduce production statement_finish_close -> compound_statement(nop)
-- On STAR reduce production statement_finish_close -> compound_statement(nop)
-- On SIZEOF reduce production statement_finish_close -> compound_statement(nop)
-- On SIGNED reduce production statement_finish_close -> compound_statement(nop)
-- On SHORT reduce production statement_finish_close -> compound_statement(nop)
-- On SEMICOLON reduce production statement_finish_close -> compound_statement(nop)
-- On RETURN reduce production statement_finish_close -> compound_statement(nop)
-- On RESTRICT reduce production statement_finish_close -> compound_statement(nop)
-- On REGISTER reduce production statement_finish_close -> compound_statement(nop)
-- On RBRACE reduce production statement_finish_close -> compound_statement(nop)
-- On PRAGMA reduce production statement_finish_close -> compound_statement(nop)
-- On PLUS reduce production statement_finish_close -> compound_statement(nop)
-- On PACKED reduce production statement_finish_close -> compound_statement(nop)
-- On MINUS reduce production statement_finish_close -> compound_statement(nop)
-- On LPAREN reduce production statement_finish_close -> compound_statement(nop)
-- On LONG reduce production statement_finish_close -> compound_statement(nop)
-- On LBRACE reduce production statement_finish_close -> compound_statement(nop)
-- On INT reduce production statement_finish_close -> compound_statement(nop)
-- On INLINE reduce production statement_finish_close -> compound_statement(nop)
-- On INC reduce production statement_finish_close -> compound_statement(nop)
-- On IF reduce production statement_finish_close -> compound_statement(nop)
-- On GOTO reduce production statement_finish_close -> compound_statement(nop)
-- On FOR reduce production statement_finish_close -> compound_statement(nop)
-- On FLOAT reduce production statement_finish_close -> compound_statement(nop)
-- On EXTERN reduce production statement_finish_close -> compound_statement(nop)
-- On ENUM reduce production statement_finish_close -> compound_statement(nop)
-- On ELSE reduce production statement_intern_close -> compound_statement(nop)
-- On DOUBLE reduce production statement_finish_close -> compound_statement(nop)
-- On DO reduce production statement_finish_close -> compound_statement(nop)
-- On DEFAULT reduce production statement_finish_close -> compound_statement(nop)
-- On DEC reduce production statement_finish_close -> compound_statement(nop)
-- On CONTINUE reduce production statement_finish_close -> compound_statement(nop)
-- On CONSTANT reduce production statement_finish_close -> compound_statement(nop)
-- On CONST reduce production statement_finish_close -> compound_statement(nop)
-- On CHAR reduce production statement_finish_close -> compound_statement(nop)
-- On CASE reduce production statement_finish_close -> compound_statement(nop)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> compound_statement(nop)
-- On BREAK reduce production statement_finish_close -> compound_statement(nop)
-- On BANG reduce production statement_finish_close -> compound_statement(nop)
-- On AUTO reduce production statement_finish_close -> compound_statement(nop)
-- On ATTRIBUTE reduce production statement_finish_close -> compound_statement(nop)
-- On ASM reduce production statement_finish_close -> compound_statement(nop)
-- On AND reduce production statement_finish_close -> compound_statement(nop)
-- On ALIGNOF reduce production statement_finish_close -> compound_statement(nop)
-- On ALIGNAS reduce production statement_finish_close -> compound_statement(nop)

State 559:
## Known stack suffix:
## asm_statement(close_context)
## LR(1) items:
statement_finish_close -> asm_statement(close_context) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
statement_intern_close -> asm_statement(close_context) . [ ELSE ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_close -> asm_statement(close_context)
-- On VOLATILE reduce production statement_finish_close -> asm_statement(close_context)
-- On VOID reduce production statement_finish_close -> asm_statement(close_context)
-- On VAR_NAME reduce production statement_finish_close -> asm_statement(close_context)
-- On UNSIGNED reduce production statement_finish_close -> asm_statement(close_context)
-- On UNION reduce production statement_finish_close -> asm_statement(close_context)
-- On UNDERSCORE_BOOL reduce production statement_finish_close -> asm_statement(close_context)
-- On TYPEDEF_NAME reduce production statement_finish_close -> asm_statement(close_context)
-- On TYPEDEF reduce production statement_finish_close -> asm_statement(close_context)
-- On TILDE reduce production statement_finish_close -> asm_statement(close_context)
-- On SWITCH reduce production statement_finish_close -> asm_statement(close_context)
-- On STRUCT reduce production statement_finish_close -> asm_statement(close_context)
-- On STRING_LITERAL reduce production statement_finish_close -> asm_statement(close_context)
-- On STATIC reduce production statement_finish_close -> asm_statement(close_context)
-- On STAR reduce production statement_finish_close -> asm_statement(close_context)
-- On SIZEOF reduce production statement_finish_close -> asm_statement(close_context)
-- On SIGNED reduce production statement_finish_close -> asm_statement(close_context)
-- On SHORT reduce production statement_finish_close -> asm_statement(close_context)
-- On SEMICOLON reduce production statement_finish_close -> asm_statement(close_context)
-- On RETURN reduce production statement_finish_close -> asm_statement(close_context)
-- On RESTRICT reduce production statement_finish_close -> asm_statement(close_context)
-- On REGISTER reduce production statement_finish_close -> asm_statement(close_context)
-- On RBRACE reduce production statement_finish_close -> asm_statement(close_context)
-- On PRAGMA reduce production statement_finish_close -> asm_statement(close_context)
-- On PLUS reduce production statement_finish_close -> asm_statement(close_context)
-- On PACKED reduce production statement_finish_close -> asm_statement(close_context)
-- On MINUS reduce production statement_finish_close -> asm_statement(close_context)
-- On LPAREN reduce production statement_finish_close -> asm_statement(close_context)
-- On LONG reduce production statement_finish_close -> asm_statement(close_context)
-- On LBRACE reduce production statement_finish_close -> asm_statement(close_context)
-- On INT reduce production statement_finish_close -> asm_statement(close_context)
-- On INLINE reduce production statement_finish_close -> asm_statement(close_context)
-- On INC reduce production statement_finish_close -> asm_statement(close_context)
-- On IF reduce production statement_finish_close -> asm_statement(close_context)
-- On GOTO reduce production statement_finish_close -> asm_statement(close_context)
-- On FOR reduce production statement_finish_close -> asm_statement(close_context)
-- On FLOAT reduce production statement_finish_close -> asm_statement(close_context)
-- On EXTERN reduce production statement_finish_close -> asm_statement(close_context)
-- On ENUM reduce production statement_finish_close -> asm_statement(close_context)
-- On ELSE reduce production statement_intern_close -> asm_statement(close_context)
-- On DOUBLE reduce production statement_finish_close -> asm_statement(close_context)
-- On DO reduce production statement_finish_close -> asm_statement(close_context)
-- On DEFAULT reduce production statement_finish_close -> asm_statement(close_context)
-- On DEC reduce production statement_finish_close -> asm_statement(close_context)
-- On CONTINUE reduce production statement_finish_close -> asm_statement(close_context)
-- On CONSTANT reduce production statement_finish_close -> asm_statement(close_context)
-- On CONST reduce production statement_finish_close -> asm_statement(close_context)
-- On CHAR reduce production statement_finish_close -> asm_statement(close_context)
-- On CASE reduce production statement_finish_close -> asm_statement(close_context)
-- On BUILTIN_VA_ARG reduce production statement_finish_close -> asm_statement(close_context)
-- On BREAK reduce production statement_finish_close -> asm_statement(close_context)
-- On BANG reduce production statement_finish_close -> asm_statement(close_context)
-- On AUTO reduce production statement_finish_close -> asm_statement(close_context)
-- On ATTRIBUTE reduce production statement_finish_close -> asm_statement(close_context)
-- On ASM reduce production statement_finish_close -> asm_statement(close_context)
-- On AND reduce production statement_finish_close -> asm_statement(close_context)
-- On ALIGNOF reduce production statement_finish_close -> asm_statement(close_context)
-- On ALIGNAS reduce production statement_finish_close -> asm_statement(close_context)

State 560:
## Known stack suffix:
## DEFAULT COLON statement_intern_close
## LR(1) items:
labeled_statement(statement_intern_close) -> DEFAULT COLON statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production labeled_statement(statement_intern_close) -> DEFAULT COLON statement_intern_close

State 561:
## Known stack suffix:
## FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_intern_close
## LR(1) items:
iteration_statement(nop,statement_intern_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production iteration_statement(nop,statement_intern_close) -> FOR LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_intern_close

State 562:
## Known stack suffix:
## SWITCH LPAREN expression RPAREN statement_intern_close
## LR(1) items:
selection_statement_intern_close -> SWITCH LPAREN expression RPAREN statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production selection_statement_intern_close -> SWITCH LPAREN expression RPAREN statement_intern_close

State 563:
## Known stack suffix:
## SWITCH LPAREN expression RPAREN statement_finish_close
## LR(1) items:
selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On VOLATILE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On VOID reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On VAR_NAME reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On UNSIGNED reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On UNION reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On UNDERSCORE_BOOL reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On TYPEDEF_NAME reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On TYPEDEF reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On TILDE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On SWITCH reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On STRUCT reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On STRING_LITERAL reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On STATIC reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On STAR reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On SIZEOF reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On SIGNED reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On SHORT reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On SEMICOLON reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On RETURN reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On RESTRICT reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On REGISTER reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On RBRACE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On PRAGMA reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On PLUS reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On PACKED reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On MINUS reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On LPAREN reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On LONG reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On LBRACE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On INT reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On INLINE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On INC reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On IF reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On GOTO reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On FOR reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On FLOAT reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On EXTERN reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On ENUM reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On DOUBLE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On DO reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On DEFAULT reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On DEC reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On CONTINUE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On CONSTANT reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On CONST reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On CHAR reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On CASE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On BUILTIN_VA_ARG reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On BREAK reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On BANG reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On AUTO reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On ATTRIBUTE reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On ASM reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On AND reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On ALIGNOF reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close
-- On ALIGNAS reduce production selection_statement_finish(nop) -> SWITCH LPAREN expression RPAREN statement_finish_close

State 564:
## Known stack suffix:
## WHILE LPAREN expression RPAREN statement_intern_close
## LR(1) items:
iteration_statement(nop,statement_intern_close) -> WHILE LPAREN expression RPAREN statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production iteration_statement(nop,statement_intern_close) -> WHILE LPAREN expression RPAREN statement_intern_close

State 565:
## Known stack suffix:
## WHILE LPAREN expression RPAREN statement_finish_close
## LR(1) items:
iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On VOLATILE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On VOID reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On VAR_NAME reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On UNSIGNED reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On UNION reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On UNDERSCORE_BOOL reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On TYPEDEF_NAME reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On TYPEDEF reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On TILDE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On SWITCH reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On STRUCT reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On STRING_LITERAL reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On STATIC reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On STAR reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On SIZEOF reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On SIGNED reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On SHORT reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On SEMICOLON reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On RETURN reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On RESTRICT reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On REGISTER reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On RBRACE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On PRAGMA reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On PLUS reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On PACKED reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On MINUS reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On LPAREN reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On LONG reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On LBRACE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On INT reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On INLINE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On INC reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On IF reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On GOTO reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On FOR reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On FLOAT reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On EXTERN reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On ENUM reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On DOUBLE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On DO reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On DEFAULT reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On DEC reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On CONTINUE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On CONSTANT reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On CONST reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On CHAR reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On CASE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On BUILTIN_VA_ARG reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On BREAK reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On BANG reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On AUTO reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On ATTRIBUTE reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On ASM reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On AND reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On ALIGNOF reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close
-- On ALIGNAS reduce production iteration_statement(nop,statement_finish_close) -> WHILE LPAREN expression RPAREN statement_finish_close

State 566:
## Known stack suffix:
## IF LPAREN expression RPAREN save_contexts_stk statement_intern_close
## LR(1) items:
if_else_statement_begin(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production if_else_statement_begin(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_intern_close

State 567:
## Known stack suffix:
## IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
## LR(1) items:
selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On VOLATILE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On VOID reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On VAR_NAME reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On UNSIGNED reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On UNION reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On UNDERSCORE_BOOL reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On TYPEDEF_NAME reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On TYPEDEF reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On TILDE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SWITCH reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On STRUCT reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On STRING_LITERAL reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On STATIC reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On STAR reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SIZEOF reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SIGNED reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SHORT reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SEMICOLON reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On RETURN reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On RESTRICT reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On REGISTER reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On RBRACE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On PRAGMA reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On PLUS reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On PACKED reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On MINUS reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On LPAREN reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On LONG reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On LBRACE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On INT reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On INLINE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On INC reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On IF reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On GOTO reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On FOR reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On FLOAT reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On EXTERN reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ENUM reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On DOUBLE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On DO reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On DEFAULT reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On DEC reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CONTINUE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CONSTANT reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CONST reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CHAR reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CASE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On BUILTIN_VA_ARG reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On BREAK reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On BANG reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On AUTO reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ATTRIBUTE reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ASM reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On AND reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ALIGNOF reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ALIGNAS reduce production selection_statement_finish(nop) -> IF LPAREN expression RPAREN save_contexts_stk statement_finish_close

State 568:
## Known stack suffix:
## SWITCH open_context LPAREN expression RPAREN statement_finish_close
## LR(1) items:
selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On VOLATILE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On VOID reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On VAR_NAME reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On UNSIGNED reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On UNION reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On UNDERSCORE_BOOL reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On TYPEDEF_NAME reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On TYPEDEF reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On TILDE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On SWITCH reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On STRUCT reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On STRING_LITERAL reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On STATIC reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On STAR reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On SIZEOF reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On SIGNED reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On SHORT reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On SEMICOLON reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On RETURN reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On RESTRICT reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On REGISTER reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On RBRACE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On PRAGMA reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On PLUS reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On PACKED reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On MINUS reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On LPAREN reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On LONG reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On LBRACE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On INT reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On INLINE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On INC reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On IF reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On GOTO reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On FOR reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On FLOAT reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On EXTERN reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On ENUM reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On DOUBLE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On DO reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On DEFAULT reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On DEC reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On CONTINUE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On CONSTANT reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On CONST reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On CHAR reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On CASE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On BUILTIN_VA_ARG reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On BREAK reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On BANG reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On AUTO reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On ATTRIBUTE reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On ASM reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On AND reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On ALIGNOF reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close
-- On ALIGNAS reduce production selection_statement_finish(open_context) -> SWITCH open_context LPAREN expression RPAREN statement_finish_close

State 569:
## Known stack suffix:
## RETURN
## LR(1) items:
jump_statement(nop) -> RETURN . option(expression) SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 570
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 570:
## Known stack suffix:
## RETURN option(expression)
## LR(1) items:
jump_statement(nop) -> RETURN option(expression) . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 571
## Reductions:

State 571:
## Known stack suffix:
## RETURN option(expression) SEMICOLON
## LR(1) items:
jump_statement(nop) -> RETURN option(expression) SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On VOLATILE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On VOID reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On VAR_NAME reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On UNSIGNED reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On UNION reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On UNDERSCORE_BOOL reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On TYPEDEF_NAME reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On TYPEDEF reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On TILDE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On SWITCH reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On STRUCT reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On STRING_LITERAL reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On STATIC reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On STAR reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On SIZEOF reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On SIGNED reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On SHORT reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On SEMICOLON reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On RETURN reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On RESTRICT reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On REGISTER reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On RBRACE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On PRAGMA reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On PLUS reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On PACKED reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On MINUS reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On LPAREN reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On LONG reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On LBRACE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On INT reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On INLINE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On INC reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On IF reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On GOTO reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On FOR reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On FLOAT reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On EXTERN reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On ENUM reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On DOUBLE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On DO reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On DEFAULT reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On DEC reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On CONTINUE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On CONSTANT reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On CONST reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On CHAR reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On CASE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On BUILTIN_VA_ARG reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On BREAK reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On BANG reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On AUTO reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On ATTRIBUTE reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On ASM reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On AND reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On ALIGNOF reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON
-- On ALIGNAS reduce production jump_statement(nop) -> RETURN option(expression) SEMICOLON

State 572:
## Known stack suffix:
## PRAGMA
## LR(1) items:
block_item -> PRAGMA . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production block_item -> PRAGMA
-- On VOLATILE reduce production block_item -> PRAGMA
-- On VOID reduce production block_item -> PRAGMA
-- On VAR_NAME reduce production block_item -> PRAGMA
-- On UNSIGNED reduce production block_item -> PRAGMA
-- On UNION reduce production block_item -> PRAGMA
-- On UNDERSCORE_BOOL reduce production block_item -> PRAGMA
-- On TYPEDEF_NAME reduce production block_item -> PRAGMA
-- On TYPEDEF reduce production block_item -> PRAGMA
-- On TILDE reduce production block_item -> PRAGMA
-- On SWITCH reduce production block_item -> PRAGMA
-- On STRUCT reduce production block_item -> PRAGMA
-- On STRING_LITERAL reduce production block_item -> PRAGMA
-- On STATIC reduce production block_item -> PRAGMA
-- On STAR reduce production block_item -> PRAGMA
-- On SIZEOF reduce production block_item -> PRAGMA
-- On SIGNED reduce production block_item -> PRAGMA
-- On SHORT reduce production block_item -> PRAGMA
-- On SEMICOLON reduce production block_item -> PRAGMA
-- On RETURN reduce production block_item -> PRAGMA
-- On RESTRICT reduce production block_item -> PRAGMA
-- On REGISTER reduce production block_item -> PRAGMA
-- On RBRACE reduce production block_item -> PRAGMA
-- On PRAGMA reduce production block_item -> PRAGMA
-- On PLUS reduce production block_item -> PRAGMA
-- On PACKED reduce production block_item -> PRAGMA
-- On MINUS reduce production block_item -> PRAGMA
-- On LPAREN reduce production block_item -> PRAGMA
-- On LONG reduce production block_item -> PRAGMA
-- On LBRACE reduce production block_item -> PRAGMA
-- On INT reduce production block_item -> PRAGMA
-- On INLINE reduce production block_item -> PRAGMA
-- On INC reduce production block_item -> PRAGMA
-- On IF reduce production block_item -> PRAGMA
-- On GOTO reduce production block_item -> PRAGMA
-- On FOR reduce production block_item -> PRAGMA
-- On FLOAT reduce production block_item -> PRAGMA
-- On EXTERN reduce production block_item -> PRAGMA
-- On ENUM reduce production block_item -> PRAGMA
-- On DOUBLE reduce production block_item -> PRAGMA
-- On DO reduce production block_item -> PRAGMA
-- On DEFAULT reduce production block_item -> PRAGMA
-- On DEC reduce production block_item -> PRAGMA
-- On CONTINUE reduce production block_item -> PRAGMA
-- On CONSTANT reduce production block_item -> PRAGMA
-- On CONST reduce production block_item -> PRAGMA
-- On CHAR reduce production block_item -> PRAGMA
-- On CASE reduce production block_item -> PRAGMA
-- On BUILTIN_VA_ARG reduce production block_item -> PRAGMA
-- On BREAK reduce production block_item -> PRAGMA
-- On BANG reduce production block_item -> PRAGMA
-- On AUTO reduce production block_item -> PRAGMA
-- On ATTRIBUTE reduce production block_item -> PRAGMA
-- On ASM reduce production block_item -> PRAGMA
-- On AND reduce production block_item -> PRAGMA
-- On ALIGNOF reduce production block_item -> PRAGMA
-- On ALIGNAS reduce production block_item -> PRAGMA

State 573:
## Known stack suffix:
## LBRACE
## LR(1) items:
compound_statement(open_context) -> LBRACE . open_context option(block_item_list) close_context RBRACE [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On open_context shift to state 574
## Reductions:
-- On WHILE reduce production open_context ->
-- On VOLATILE reduce production open_context ->
-- On VOID reduce production open_context ->
-- On VAR_NAME reduce production open_context ->
-- On UNSIGNED reduce production open_context ->
-- On UNION reduce production open_context ->
-- On UNDERSCORE_BOOL reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On TYPEDEF reduce production open_context ->
-- On TILDE reduce production open_context ->
-- On SWITCH reduce production open_context ->
-- On STRUCT reduce production open_context ->
-- On STRING_LITERAL reduce production open_context ->
-- On STATIC reduce production open_context ->
-- On STAR reduce production open_context ->
-- On SIZEOF reduce production open_context ->
-- On SIGNED reduce production open_context ->
-- On SHORT reduce production open_context ->
-- On SEMICOLON reduce production open_context ->
-- On RETURN reduce production open_context ->
-- On RESTRICT reduce production open_context ->
-- On REGISTER reduce production open_context ->
-- On RBRACE reduce production open_context ->
-- On PRAGMA reduce production open_context ->
-- On PLUS reduce production open_context ->
-- On PACKED reduce production open_context ->
-- On MINUS reduce production open_context ->
-- On LPAREN reduce production open_context ->
-- On LONG reduce production open_context ->
-- On LBRACE reduce production open_context ->
-- On INT reduce production open_context ->
-- On INLINE reduce production open_context ->
-- On INC reduce production open_context ->
-- On IF reduce production open_context ->
-- On GOTO reduce production open_context ->
-- On FOR reduce production open_context ->
-- On FLOAT reduce production open_context ->
-- On EXTERN reduce production open_context ->
-- On ENUM reduce production open_context ->
-- On DOUBLE reduce production open_context ->
-- On DO reduce production open_context ->
-- On DEFAULT reduce production open_context ->
-- On DEC reduce production open_context ->
-- On CONTINUE reduce production open_context ->
-- On CONSTANT reduce production open_context ->
-- On CONST reduce production open_context ->
-- On CHAR reduce production open_context ->
-- On CASE reduce production open_context ->
-- On BUILTIN_VA_ARG reduce production open_context ->
-- On BREAK reduce production open_context ->
-- On BANG reduce production open_context ->
-- On AUTO reduce production open_context ->
-- On ATTRIBUTE reduce production open_context ->
-- On ASM reduce production open_context ->
-- On AND reduce production open_context ->
-- On ALIGNOF reduce production open_context ->
-- On ALIGNAS reduce production open_context ->

State 574:
## Known stack suffix:
## LBRACE open_context
## LR(1) items:
compound_statement(open_context) -> LBRACE open_context . option(block_item_list) close_context RBRACE [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On option(block_item_list) shift to state 575
-- On block_item_list shift to state 642
## Reductions:
-- On WHILE reduce production option(block_item_list) ->
-- On VOLATILE reduce production option(block_item_list) ->
-- On VOID reduce production option(block_item_list) ->
-- On VAR_NAME reduce production option(block_item_list) ->
-- On UNSIGNED reduce production option(block_item_list) ->
-- On UNION reduce production option(block_item_list) ->
-- On UNDERSCORE_BOOL reduce production option(block_item_list) ->
-- On TYPEDEF_NAME reduce production option(block_item_list) ->
-- On TYPEDEF reduce production option(block_item_list) ->
-- On TILDE reduce production option(block_item_list) ->
-- On SWITCH reduce production option(block_item_list) ->
-- On STRUCT reduce production option(block_item_list) ->
-- On STRING_LITERAL reduce production option(block_item_list) ->
-- On STATIC reduce production option(block_item_list) ->
-- On STAR reduce production option(block_item_list) ->
-- On SIZEOF reduce production option(block_item_list) ->
-- On SIGNED reduce production option(block_item_list) ->
-- On SHORT reduce production option(block_item_list) ->
-- On SEMICOLON reduce production option(block_item_list) ->
-- On RETURN reduce production option(block_item_list) ->
-- On RESTRICT reduce production option(block_item_list) ->
-- On REGISTER reduce production option(block_item_list) ->
-- On RBRACE reduce production option(block_item_list) ->
-- On PRAGMA reduce production option(block_item_list) ->
-- On PLUS reduce production option(block_item_list) ->
-- On PACKED reduce production option(block_item_list) ->
-- On MINUS reduce production option(block_item_list) ->
-- On LPAREN reduce production option(block_item_list) ->
-- On LONG reduce production option(block_item_list) ->
-- On LBRACE reduce production option(block_item_list) ->
-- On INT reduce production option(block_item_list) ->
-- On INLINE reduce production option(block_item_list) ->
-- On INC reduce production option(block_item_list) ->
-- On IF reduce production option(block_item_list) ->
-- On GOTO reduce production option(block_item_list) ->
-- On FOR reduce production option(block_item_list) ->
-- On FLOAT reduce production option(block_item_list) ->
-- On EXTERN reduce production option(block_item_list) ->
-- On ENUM reduce production option(block_item_list) ->
-- On DOUBLE reduce production option(block_item_list) ->
-- On DO reduce production option(block_item_list) ->
-- On DEFAULT reduce production option(block_item_list) ->
-- On DEC reduce production option(block_item_list) ->
-- On CONTINUE reduce production option(block_item_list) ->
-- On CONSTANT reduce production option(block_item_list) ->
-- On CONST reduce production option(block_item_list) ->
-- On CHAR reduce production option(block_item_list) ->
-- On CASE reduce production option(block_item_list) ->
-- On BUILTIN_VA_ARG reduce production option(block_item_list) ->
-- On BREAK reduce production option(block_item_list) ->
-- On BANG reduce production option(block_item_list) ->
-- On AUTO reduce production option(block_item_list) ->
-- On ATTRIBUTE reduce production option(block_item_list) ->
-- On ASM reduce production option(block_item_list) ->
-- On AND reduce production option(block_item_list) ->
-- On ALIGNOF reduce production option(block_item_list) ->
-- On ALIGNAS reduce production option(block_item_list) ->

State 575:
## Known stack suffix:
## LBRACE open_context option(block_item_list)
## LR(1) items:
block_item_list -> option(block_item_list) . block_item [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
compound_statement(open_context) -> LBRACE open_context option(block_item_list) . close_context RBRACE [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 371
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 392
-- On TILDE shift to state 12
-- On SWITCH shift to state 394
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 569
-- On PRAGMA shift to state 572
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 573
-- On INC shift to state 20
-- On IF shift to state 576
-- On GOTO shift to state 584
-- On FOR shift to state 587
-- On DO shift to state 594
-- On DEFAULT shift to state 604
-- On DEC shift to state 22
-- On CONTINUE shift to state 606
-- On CONSTANT shift to state 23
-- On CASE shift to state 608
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 611
-- On BANG shift to state 26
-- On ASM shift to state 613
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_noclose shift to state 637
-- On shift_expression shift to state 54
-- On selection_statement_finish(open_context) shift to state 621
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 622
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On list(declaration_specifier_no_type) shift to state 421
-- On labeled_statement(statement_finish_noclose) shift to state 624
-- On jump_statement(nop) shift to state 625
-- On iteration_statement(open_context,statement_finish_close) shift to state 626
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(open_context) shift to state 627
-- On general_identifier shift to state 630
-- On expression_statement(nop) shift to state 633
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On declaration_specifiers_typedef shift to state 514
-- On declaration_specifiers(declaration(block_item)) shift to state 523
-- On declaration(block_item) shift to state 638
-- On conditional_expression shift to state 99
-- On compound_statement(open_context) shift to state 634
-- On close_context shift to state 639
-- On cast_expression shift to state 64
-- On block_item shift to state 641
-- On assignment_expression shift to state 103
-- On asm_statement(nop) shift to state 635
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On SEMICOLON reduce production option(expression) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On RBRACE reduce production close_context ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 576:
## Known stack suffix:
## IF
## LR(1) items:
if_else_statement_begin(open_context) -> IF . open_context LPAREN expression RPAREN save_contexts_stk statement_intern_close [ ELSE ]
selection_statement_finish(open_context) -> IF . open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On open_context shift to state 577
## Reductions:
-- On LPAREN reduce production open_context ->

State 577:
## Known stack suffix:
## IF open_context
## LR(1) items:
if_else_statement_begin(open_context) -> IF open_context . LPAREN expression RPAREN save_contexts_stk statement_intern_close [ ELSE ]
selection_statement_finish(open_context) -> IF open_context . LPAREN expression RPAREN save_contexts_stk statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 578
## Reductions:

State 578:
## Known stack suffix:
## IF open_context LPAREN
## LR(1) items:
if_else_statement_begin(open_context) -> IF open_context LPAREN . expression RPAREN save_contexts_stk statement_intern_close [ ELSE ]
selection_statement_finish(open_context) -> IF open_context LPAREN . expression RPAREN save_contexts_stk statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 579
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 579:
## Known stack suffix:
## IF open_context LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
if_else_statement_begin(open_context) -> IF open_context LPAREN expression . RPAREN save_contexts_stk statement_intern_close [ ELSE ]
selection_statement_finish(open_context) -> IF open_context LPAREN expression . RPAREN save_contexts_stk statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 580
-- On COMMA shift to state 98
## Reductions:

State 580:
## Known stack suffix:
## IF open_context LPAREN expression RPAREN
## LR(1) items:
if_else_statement_begin(open_context) -> IF open_context LPAREN expression RPAREN . save_contexts_stk statement_intern_close [ ELSE ]
selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN . save_contexts_stk statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On save_contexts_stk shift to state 581
## Reductions:
-- On WHILE reduce production save_contexts_stk ->
-- On VAR_NAME reduce production save_contexts_stk ->
-- On TYPEDEF_NAME reduce production save_contexts_stk ->
-- On TILDE reduce production save_contexts_stk ->
-- On SWITCH reduce production save_contexts_stk ->
-- On STRING_LITERAL reduce production save_contexts_stk ->
-- On STAR reduce production save_contexts_stk ->
-- On SIZEOF reduce production save_contexts_stk ->
-- On SEMICOLON reduce production save_contexts_stk ->
-- On RETURN reduce production save_contexts_stk ->
-- On PLUS reduce production save_contexts_stk ->
-- On MINUS reduce production save_contexts_stk ->
-- On LPAREN reduce production save_contexts_stk ->
-- On LBRACE reduce production save_contexts_stk ->
-- On INC reduce production save_contexts_stk ->
-- On IF reduce production save_contexts_stk ->
-- On GOTO reduce production save_contexts_stk ->
-- On FOR reduce production save_contexts_stk ->
-- On DO reduce production save_contexts_stk ->
-- On DEFAULT reduce production save_contexts_stk ->
-- On DEC reduce production save_contexts_stk ->
-- On CONTINUE reduce production save_contexts_stk ->
-- On CONSTANT reduce production save_contexts_stk ->
-- On CASE reduce production save_contexts_stk ->
-- On BUILTIN_VA_ARG reduce production save_contexts_stk ->
-- On BREAK reduce production save_contexts_stk ->
-- On BANG reduce production save_contexts_stk ->
-- On ASM reduce production save_contexts_stk ->
-- On AND reduce production save_contexts_stk ->
-- On ALIGNOF reduce production save_contexts_stk ->

State 581:
## Known stack suffix:
## IF open_context LPAREN expression RPAREN save_contexts_stk
## LR(1) items:
if_else_statement_begin(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk . statement_intern_close [ ELSE ]
selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 404
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 408
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 416
-- On DO shift to state 431
-- On DEFAULT shift to state 541
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 543
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_intern_close shift to state 582
-- On statement_finish_close shift to state 583
-- On shift_expression shift to state 54
-- On selection_statement_intern_close shift to state 547
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_intern_close) shift to state 548
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 549
-- On iteration_statement(nop,statement_intern_close) shift to state 550
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 551
-- On general_identifier shift to state 554
-- On expression_statement(close_context) shift to state 557
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 558
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 559
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 582:
## Known stack suffix:
## IF open_context LPAREN expression RPAREN save_contexts_stk statement_intern_close
## LR(1) items:
if_else_statement_begin(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_intern_close . [ ELSE ]
## Transitions:
## Reductions:
-- On ELSE reduce production if_else_statement_begin(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_intern_close

State 583:
## Known stack suffix:
## IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
## LR(1) items:
selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On VOLATILE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On VOID reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On VAR_NAME reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On UNSIGNED reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On UNION reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On UNDERSCORE_BOOL reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On TYPEDEF_NAME reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On TYPEDEF reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On TILDE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SWITCH reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On STRUCT reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On STRING_LITERAL reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On STATIC reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On STAR reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SIZEOF reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SIGNED reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SHORT reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On SEMICOLON reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On RETURN reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On RESTRICT reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On REGISTER reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On RBRACE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On PRAGMA reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On PLUS reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On PACKED reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On MINUS reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On LPAREN reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On LONG reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On LBRACE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On INT reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On INLINE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On INC reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On IF reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On GOTO reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On FOR reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On FLOAT reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On EXTERN reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ENUM reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On DOUBLE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On DO reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On DEFAULT reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On DEC reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CONTINUE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CONSTANT reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CONST reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CHAR reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On CASE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On BUILTIN_VA_ARG reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On BREAK reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On BANG reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On AUTO reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ATTRIBUTE reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ASM reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On AND reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ALIGNOF reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close
-- On ALIGNAS reduce production selection_statement_finish(open_context) -> IF open_context LPAREN expression RPAREN save_contexts_stk statement_finish_close

State 584:
## Known stack suffix:
## GOTO
## LR(1) items:
jump_statement(nop) -> GOTO . general_identifier SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On general_identifier shift to state 585
## Reductions:

State 585:
## Known stack suffix:
## GOTO general_identifier
## LR(1) items:
jump_statement(nop) -> GOTO general_identifier . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 586
## Reductions:

State 586:
## Known stack suffix:
## GOTO general_identifier SEMICOLON
## LR(1) items:
jump_statement(nop) -> GOTO general_identifier SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On VOLATILE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On VOID reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On VAR_NAME reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On UNSIGNED reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On UNION reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On UNDERSCORE_BOOL reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On TYPEDEF_NAME reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On TYPEDEF reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On TILDE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On SWITCH reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On STRUCT reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On STRING_LITERAL reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On STATIC reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On STAR reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On SIZEOF reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On SIGNED reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On SHORT reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On SEMICOLON reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On RETURN reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On RESTRICT reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On REGISTER reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On RBRACE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On PRAGMA reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On PLUS reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On PACKED reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On MINUS reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On LPAREN reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On LONG reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On LBRACE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On INT reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On INLINE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On INC reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On IF reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On GOTO reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On FOR reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On FLOAT reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On EXTERN reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On ENUM reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On DOUBLE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On DO reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On DEFAULT reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On DEC reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On CONTINUE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On CONSTANT reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On CONST reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On CHAR reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On CASE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On BUILTIN_VA_ARG reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On BREAK reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On BANG reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On AUTO reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On ATTRIBUTE reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On ASM reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On AND reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On ALIGNOF reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON
-- On ALIGNAS reduce production jump_statement(nop) -> GOTO general_identifier SEMICOLON

State 587:
## Known stack suffix:
## FOR
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> FOR . open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On open_context shift to state 588
## Reductions:
-- On LPAREN reduce production open_context ->

State 588:
## Known stack suffix:
## FOR open_context
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> FOR open_context . LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 589
## Reductions:

State 589:
## Known stack suffix:
## FOR open_context LPAREN
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN . for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TYPEDEF_NAME shift to state 418
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On SEMICOLON shift to state 419
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(expression,SEMICOLON) shift to state 420
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On list(declaration_specifier_no_type) shift to state 421
-- On inclusive_or_expression shift to state 96
-- On for_statement_header shift to state 590
-- On expression shift to state 512
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On declaration_specifiers_typedef shift to state 514
-- On declaration_specifiers(declaration(block_item)) shift to state 523
-- On declaration(block_item) shift to state 533
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 590:
## Known stack suffix:
## FOR open_context LPAREN for_statement_header
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header . optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On SEMICOLON shift to state 419
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(expression,SEMICOLON) shift to state 591
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 512
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 591:
## Known stack suffix:
## FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON)
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) . optional(expression,RPAREN) statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RPAREN shift to state 429
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On optional(expression,RPAREN) shift to state 592
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 510
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 592:
## Known stack suffix:
## FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN)
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 593
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 593:
## Known stack suffix:
## FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On VOLATILE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On VOID reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On VAR_NAME reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On UNSIGNED reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On UNION reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On UNDERSCORE_BOOL reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On TYPEDEF_NAME reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On TYPEDEF reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On TILDE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SWITCH reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On STRUCT reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On STRING_LITERAL reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On STATIC reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On STAR reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SIZEOF reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SIGNED reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SHORT reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On SEMICOLON reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On RETURN reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On RESTRICT reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On REGISTER reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On RBRACE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On PRAGMA reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On PLUS reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On PACKED reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On MINUS reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On LPAREN reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On LONG reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On LBRACE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On INT reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On INLINE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On INC reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On IF reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On GOTO reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On FOR reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On FLOAT reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On EXTERN reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ENUM reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On DOUBLE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On DO reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On DEFAULT reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On DEC reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CONTINUE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CONSTANT reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CONST reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CHAR reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On CASE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On BUILTIN_VA_ARG reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On BREAK reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On BANG reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On AUTO reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ATTRIBUTE reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ASM reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On AND reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ALIGNOF reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close
-- On ALIGNAS reduce production iteration_statement(open_context,statement_finish_close) -> FOR open_context LPAREN for_statement_header optional(expression,SEMICOLON) optional(expression,RPAREN) statement_finish_close

State 594:
## Known stack suffix:
## DO
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> DO . open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On open_context shift to state 595
## Reductions:
-- On WHILE reduce production open_context ->
-- On VAR_NAME reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On TILDE reduce production open_context ->
-- On SWITCH reduce production open_context ->
-- On STRING_LITERAL reduce production open_context ->
-- On STAR reduce production open_context ->
-- On SIZEOF reduce production open_context ->
-- On SEMICOLON reduce production open_context ->
-- On RETURN reduce production open_context ->
-- On PLUS reduce production open_context ->
-- On MINUS reduce production open_context ->
-- On LPAREN reduce production open_context ->
-- On LBRACE reduce production open_context ->
-- On INC reduce production open_context ->
-- On IF reduce production open_context ->
-- On GOTO reduce production open_context ->
-- On FOR reduce production open_context ->
-- On DO reduce production open_context ->
-- On DEFAULT reduce production open_context ->
-- On DEC reduce production open_context ->
-- On CONTINUE reduce production open_context ->
-- On CONSTANT reduce production open_context ->
-- On CASE reduce production open_context ->
-- On BUILTIN_VA_ARG reduce production open_context ->
-- On BREAK reduce production open_context ->
-- On BANG reduce production open_context ->
-- On ASM reduce production open_context ->
-- On AND reduce production open_context ->
-- On ALIGNOF reduce production open_context ->

State 595:
## Known stack suffix:
## DO open_context
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> DO open_context . statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 596
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 596:
## Known stack suffix:
## DO open_context statement_finish_close
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close . WHILE open_context LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 597
## Reductions:

State 597:
## Known stack suffix:
## DO open_context statement_finish_close WHILE
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE . open_context LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On open_context shift to state 598
## Reductions:
-- On LPAREN reduce production open_context ->

State 598:
## Known stack suffix:
## DO open_context statement_finish_close WHILE open_context
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context . LPAREN expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 599
## Reductions:

State 599:
## Known stack suffix:
## DO open_context statement_finish_close WHILE open_context LPAREN
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN . expression RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On expression shift to state 600
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 600:
## Known stack suffix:
## DO open_context statement_finish_close WHILE open_context LPAREN expression
## LR(1) items:
expression -> expression . COMMA assignment_expression [ RPAREN COMMA ]
iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression . RPAREN close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 601
-- On COMMA shift to state 98
## Reductions:

State 601:
## Known stack suffix:
## DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN . close_context SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On close_context shift to state 602
## Reductions:
-- On SEMICOLON reduce production close_context ->

State 602:
## Known stack suffix:
## DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 603
## Reductions:

State 603:
## Known stack suffix:
## DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On VOLATILE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On VOID reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On VAR_NAME reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On UNSIGNED reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On UNION reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On UNDERSCORE_BOOL reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On TYPEDEF_NAME reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On TYPEDEF reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On TILDE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On SWITCH reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On STRUCT reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On STRING_LITERAL reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On STATIC reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On STAR reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On SIZEOF reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On SIGNED reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On SHORT reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On SEMICOLON reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On RETURN reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On RESTRICT reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On REGISTER reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On RBRACE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On PRAGMA reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On PLUS reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On PACKED reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On MINUS reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On LPAREN reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On LONG reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On LBRACE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On INT reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On INLINE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On INC reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On IF reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On GOTO reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On FOR reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On FLOAT reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On EXTERN reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On ENUM reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On DOUBLE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On DO reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On DEFAULT reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On DEC reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On CONTINUE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On CONSTANT reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On CONST reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On CHAR reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On CASE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On BUILTIN_VA_ARG reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On BREAK reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On BANG reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On AUTO reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On ATTRIBUTE reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On ASM reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On AND reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On ALIGNOF reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON
-- On ALIGNAS reduce production iteration_statement(open_context,statement_finish_close) -> DO open_context statement_finish_close WHILE open_context LPAREN expression RPAREN close_context SEMICOLON

State 604:
## Known stack suffix:
## DEFAULT
## LR(1) items:
labeled_statement(statement_finish_noclose) -> DEFAULT . COLON statement_finish_noclose [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On COLON shift to state 605
## Reductions:

State 605:
## Known stack suffix:
## DEFAULT COLON
## LR(1) items:
labeled_statement(statement_finish_noclose) -> DEFAULT COLON . statement_finish_noclose [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 371
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 394
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 569
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 573
-- On INC shift to state 20
-- On IF shift to state 576
-- On GOTO shift to state 584
-- On FOR shift to state 587
-- On DO shift to state 594
-- On DEFAULT shift to state 604
-- On DEC shift to state 22
-- On CONTINUE shift to state 606
-- On CONSTANT shift to state 23
-- On CASE shift to state 608
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 611
-- On BANG shift to state 26
-- On ASM shift to state 613
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_noclose shift to state 636
-- On shift_expression shift to state 54
-- On selection_statement_finish(open_context) shift to state 621
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 622
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_noclose) shift to state 624
-- On jump_statement(nop) shift to state 625
-- On iteration_statement(open_context,statement_finish_close) shift to state 626
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(open_context) shift to state 627
-- On general_identifier shift to state 630
-- On expression_statement(nop) shift to state 633
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(open_context) shift to state 634
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(nop) shift to state 635
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 606:
## Known stack suffix:
## CONTINUE
## LR(1) items:
jump_statement(nop) -> CONTINUE . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 607
## Reductions:

State 607:
## Known stack suffix:
## CONTINUE SEMICOLON
## LR(1) items:
jump_statement(nop) -> CONTINUE SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On VOLATILE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On VOID reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On VAR_NAME reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On UNSIGNED reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On UNION reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On UNDERSCORE_BOOL reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On TYPEDEF_NAME reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On TYPEDEF reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On TILDE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On SWITCH reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On STRUCT reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On STRING_LITERAL reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On STATIC reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On STAR reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On SIZEOF reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On SIGNED reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On SHORT reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On SEMICOLON reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On RETURN reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On RESTRICT reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On REGISTER reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On RBRACE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On PRAGMA reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On PLUS reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On PACKED reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On MINUS reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On LPAREN reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On LONG reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On LBRACE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On INT reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On INLINE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On INC reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On IF reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On GOTO reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On FOR reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On FLOAT reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On EXTERN reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On ENUM reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On DOUBLE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On DO reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On DEFAULT reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On DEC reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On CONTINUE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On CONSTANT reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On CONST reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On CHAR reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On CASE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On BUILTIN_VA_ARG reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On BREAK reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On BANG reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On AUTO reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On ATTRIBUTE reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On ASM reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On AND reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On ALIGNOF reduce production jump_statement(nop) -> CONTINUE SEMICOLON
-- On ALIGNAS reduce production jump_statement(nop) -> CONTINUE SEMICOLON

State 608:
## Known stack suffix:
## CASE
## LR(1) items:
labeled_statement(statement_finish_noclose) -> CASE . conditional_expression COLON statement_finish_noclose [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 11
-- On TILDE shift to state 12
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On INC shift to state 20
-- On DEC shift to state 22
-- On CONSTANT shift to state 23
-- On BUILTIN_VA_ARG shift to state 24
-- On BANG shift to state 26
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 31
-- On string_literals_list shift to state 32
-- On shift_expression shift to state 54
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On inclusive_or_expression shift to state 96
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 609
-- On cast_expression shift to state 64
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:

State 609:
## Known stack suffix:
## CASE conditional_expression
## LR(1) items:
labeled_statement(statement_finish_noclose) -> CASE conditional_expression . COLON statement_finish_noclose [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On COLON shift to state 610
## Reductions:

State 610:
## Known stack suffix:
## CASE conditional_expression COLON
## LR(1) items:
labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON . statement_finish_noclose [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 371
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 394
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 569
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 573
-- On INC shift to state 20
-- On IF shift to state 576
-- On GOTO shift to state 584
-- On FOR shift to state 587
-- On DO shift to state 594
-- On DEFAULT shift to state 604
-- On DEC shift to state 22
-- On CONTINUE shift to state 606
-- On CONSTANT shift to state 23
-- On CASE shift to state 608
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 611
-- On BANG shift to state 26
-- On ASM shift to state 613
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_noclose shift to state 620
-- On shift_expression shift to state 54
-- On selection_statement_finish(open_context) shift to state 621
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 622
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_noclose) shift to state 624
-- On jump_statement(nop) shift to state 625
-- On iteration_statement(open_context,statement_finish_close) shift to state 626
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(open_context) shift to state 627
-- On general_identifier shift to state 630
-- On expression_statement(nop) shift to state 633
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(open_context) shift to state 634
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(nop) shift to state 635
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 611:
## Known stack suffix:
## BREAK
## LR(1) items:
jump_statement(nop) -> BREAK . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 612
## Reductions:

State 612:
## Known stack suffix:
## BREAK SEMICOLON
## LR(1) items:
jump_statement(nop) -> BREAK SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On VOLATILE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On VOID reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On VAR_NAME reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On UNSIGNED reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On UNION reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On UNDERSCORE_BOOL reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On TYPEDEF_NAME reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On TYPEDEF reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On TILDE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On SWITCH reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On STRUCT reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On STRING_LITERAL reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On STATIC reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On STAR reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On SIZEOF reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On SIGNED reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On SHORT reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On SEMICOLON reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On RETURN reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On RESTRICT reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On REGISTER reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On RBRACE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On PRAGMA reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On PLUS reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On PACKED reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On MINUS reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On LPAREN reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On LONG reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On LBRACE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On INT reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On INLINE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On INC reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On IF reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On GOTO reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On FOR reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On FLOAT reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On EXTERN reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On ENUM reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On DOUBLE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On DO reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On DEFAULT reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On DEC reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On CONTINUE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On CONSTANT reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On CONST reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On CHAR reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On CASE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On BUILTIN_VA_ARG reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On BREAK reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On BANG reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On AUTO reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On ATTRIBUTE reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On ASM reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On AND reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On ALIGNOF reduce production jump_statement(nop) -> BREAK SEMICOLON
-- On ALIGNAS reduce production jump_statement(nop) -> BREAK SEMICOLON

State 613:
## Known stack suffix:
## ASM
## LR(1) items:
asm_statement(nop) -> ASM . asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 452
-- On CONST shift to state 453
-- On asm_attributes shift to state 614
## Reductions:
-- On LPAREN reduce production asm_attributes ->

State 614:
## Known stack suffix:
## ASM asm_attributes
## LR(1) items:
asm_statement(nop) -> ASM asm_attributes . LPAREN string_literals_list asm_arguments RPAREN SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On LPAREN shift to state 615
## Reductions:

State 615:
## Known stack suffix:
## ASM asm_attributes LPAREN
## LR(1) items:
asm_statement(nop) -> ASM asm_attributes LPAREN . string_literals_list asm_arguments RPAREN SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On STRING_LITERAL shift to state 13
-- On string_literals_list shift to state 616
## Reductions:

State 616:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list
## LR(1) items:
asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list . asm_arguments RPAREN SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
string_literals_list -> string_literals_list . STRING_LITERAL [ STRING_LITERAL RPAREN COLON ]
## Transitions:
-- On STRING_LITERAL shift to state 33
-- On COLON shift to state 459
-- On asm_arguments shift to state 617
## Reductions:
-- On RPAREN reduce production asm_arguments ->

State 617:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments
## LR(1) items:
asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments . RPAREN SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RPAREN shift to state 618
## Reductions:

State 618:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN
## LR(1) items:
asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 619
## Reductions:

State 619:
## Known stack suffix:
## ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
## LR(1) items:
asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On VOLATILE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On VOID reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On VAR_NAME reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On UNSIGNED reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On UNION reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On UNDERSCORE_BOOL reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On TYPEDEF_NAME reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On TYPEDEF reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On TILDE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On SWITCH reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On STRUCT reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On STRING_LITERAL reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On STATIC reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On STAR reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On SIZEOF reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On SIGNED reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On SHORT reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On SEMICOLON reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On RETURN reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On RESTRICT reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On REGISTER reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On RBRACE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On PRAGMA reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On PLUS reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On PACKED reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On MINUS reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On LPAREN reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On LONG reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On LBRACE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On INT reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On INLINE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On INC reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On IF reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On GOTO reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On FOR reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On FLOAT reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On EXTERN reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On ENUM reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On DOUBLE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On DO reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On DEFAULT reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On DEC reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On CONTINUE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On CONSTANT reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On CONST reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On CHAR reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On CASE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On BUILTIN_VA_ARG reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On BREAK reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On BANG reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On AUTO reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On ATTRIBUTE reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On ASM reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On AND reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On ALIGNOF reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON
-- On ALIGNAS reduce production asm_statement(nop) -> ASM asm_attributes LPAREN string_literals_list asm_arguments RPAREN SEMICOLON

State 620:
## Known stack suffix:
## CASE conditional_expression COLON statement_finish_noclose
## LR(1) items:
labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On VOLATILE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On VOID reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On VAR_NAME reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On UNSIGNED reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On UNION reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On UNDERSCORE_BOOL reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On TYPEDEF_NAME reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On TYPEDEF reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On TILDE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On SWITCH reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On STRUCT reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On STRING_LITERAL reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On STATIC reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On STAR reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On SIZEOF reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On SIGNED reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On SHORT reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On SEMICOLON reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On RETURN reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On RESTRICT reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On REGISTER reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On RBRACE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On PRAGMA reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On PLUS reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On PACKED reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On MINUS reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On LPAREN reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On LONG reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On LBRACE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On INT reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On INLINE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On INC reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On IF reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On GOTO reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On FOR reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On FLOAT reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On EXTERN reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On ENUM reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On DOUBLE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On DO reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On DEFAULT reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On DEC reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On CONTINUE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On CONSTANT reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On CONST reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On CHAR reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On CASE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On BUILTIN_VA_ARG reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On BREAK reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On BANG reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On AUTO reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On ATTRIBUTE reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On ASM reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On AND reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On ALIGNOF reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose
-- On ALIGNAS reduce production labeled_statement(statement_finish_noclose) -> CASE conditional_expression COLON statement_finish_noclose

State 621:
## Known stack suffix:
## selection_statement_finish(open_context)
## LR(1) items:
statement_finish_noclose -> selection_statement_finish(open_context) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On VOLATILE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On VOID reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On VAR_NAME reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On UNSIGNED reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On UNION reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On UNDERSCORE_BOOL reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On TYPEDEF_NAME reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On TYPEDEF reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On TILDE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On SWITCH reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On STRUCT reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On STRING_LITERAL reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On STATIC reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On STAR reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On SIZEOF reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On SIGNED reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On SHORT reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On SEMICOLON reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On RETURN reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On RESTRICT reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On REGISTER reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On RBRACE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On PRAGMA reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On PLUS reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On PACKED reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On MINUS reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On LPAREN reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On LONG reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On LBRACE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On INT reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On INLINE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On INC reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On IF reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On GOTO reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On FOR reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On FLOAT reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On EXTERN reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On ENUM reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On DOUBLE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On DO reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On DEFAULT reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On DEC reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On CONTINUE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On CONSTANT reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On CONST reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On CHAR reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On CASE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On BUILTIN_VA_ARG reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On BREAK reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On BANG reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On AUTO reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On ATTRIBUTE reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On ASM reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On AND reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On ALIGNOF reduce production statement_finish_noclose -> selection_statement_finish(open_context)
-- On ALIGNAS reduce production statement_finish_noclose -> selection_statement_finish(open_context)

State 622:
## Known stack suffix:
## option(expression)
## LR(1) items:
expression_statement(nop) -> option(expression) . SEMICOLON [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 623
## Reductions:

State 623:
## Known stack suffix:
## option(expression) SEMICOLON
## LR(1) items:
expression_statement(nop) -> option(expression) SEMICOLON . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On VOLATILE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On VOID reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On VAR_NAME reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On UNSIGNED reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On UNION reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On UNDERSCORE_BOOL reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On TYPEDEF_NAME reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On TYPEDEF reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On TILDE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On SWITCH reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On STRUCT reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On STRING_LITERAL reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On STATIC reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On STAR reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On SIZEOF reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On SIGNED reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On SHORT reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On SEMICOLON reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On RETURN reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On RESTRICT reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On REGISTER reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On RBRACE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On PRAGMA reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On PLUS reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On PACKED reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On MINUS reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On LPAREN reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On LONG reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On LBRACE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On INT reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On INLINE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On INC reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On IF reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On GOTO reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On FOR reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On FLOAT reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On EXTERN reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On ENUM reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On DOUBLE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On DO reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On DEFAULT reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On DEC reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On CONTINUE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On CONSTANT reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On CONST reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On CHAR reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On CASE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On BUILTIN_VA_ARG reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On BREAK reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On BANG reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On AUTO reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On ATTRIBUTE reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On ASM reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On AND reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On ALIGNOF reduce production expression_statement(nop) -> option(expression) SEMICOLON
-- On ALIGNAS reduce production expression_statement(nop) -> option(expression) SEMICOLON

State 624:
## Known stack suffix:
## labeled_statement(statement_finish_noclose)
## LR(1) items:
statement_finish_noclose -> labeled_statement(statement_finish_noclose) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On VOLATILE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On VOID reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On VAR_NAME reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On UNSIGNED reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On UNION reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On UNDERSCORE_BOOL reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On TYPEDEF_NAME reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On TYPEDEF reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On TILDE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On SWITCH reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On STRUCT reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On STRING_LITERAL reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On STATIC reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On STAR reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On SIZEOF reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On SIGNED reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On SHORT reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On SEMICOLON reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On RETURN reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On RESTRICT reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On REGISTER reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On RBRACE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On PRAGMA reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On PLUS reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On PACKED reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On MINUS reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On LPAREN reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On LONG reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On LBRACE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On INT reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On INLINE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On INC reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On IF reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On GOTO reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On FOR reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On FLOAT reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On EXTERN reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On ENUM reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On DOUBLE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On DO reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On DEFAULT reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On DEC reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On CONTINUE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On CONSTANT reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On CONST reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On CHAR reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On CASE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On BUILTIN_VA_ARG reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On BREAK reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On BANG reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On AUTO reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On ATTRIBUTE reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On ASM reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On AND reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On ALIGNOF reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)
-- On ALIGNAS reduce production statement_finish_noclose -> labeled_statement(statement_finish_noclose)

State 625:
## Known stack suffix:
## jump_statement(nop)
## LR(1) items:
statement_finish_noclose -> jump_statement(nop) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_noclose -> jump_statement(nop)
-- On VOLATILE reduce production statement_finish_noclose -> jump_statement(nop)
-- On VOID reduce production statement_finish_noclose -> jump_statement(nop)
-- On VAR_NAME reduce production statement_finish_noclose -> jump_statement(nop)
-- On UNSIGNED reduce production statement_finish_noclose -> jump_statement(nop)
-- On UNION reduce production statement_finish_noclose -> jump_statement(nop)
-- On UNDERSCORE_BOOL reduce production statement_finish_noclose -> jump_statement(nop)
-- On TYPEDEF_NAME reduce production statement_finish_noclose -> jump_statement(nop)
-- On TYPEDEF reduce production statement_finish_noclose -> jump_statement(nop)
-- On TILDE reduce production statement_finish_noclose -> jump_statement(nop)
-- On SWITCH reduce production statement_finish_noclose -> jump_statement(nop)
-- On STRUCT reduce production statement_finish_noclose -> jump_statement(nop)
-- On STRING_LITERAL reduce production statement_finish_noclose -> jump_statement(nop)
-- On STATIC reduce production statement_finish_noclose -> jump_statement(nop)
-- On STAR reduce production statement_finish_noclose -> jump_statement(nop)
-- On SIZEOF reduce production statement_finish_noclose -> jump_statement(nop)
-- On SIGNED reduce production statement_finish_noclose -> jump_statement(nop)
-- On SHORT reduce production statement_finish_noclose -> jump_statement(nop)
-- On SEMICOLON reduce production statement_finish_noclose -> jump_statement(nop)
-- On RETURN reduce production statement_finish_noclose -> jump_statement(nop)
-- On RESTRICT reduce production statement_finish_noclose -> jump_statement(nop)
-- On REGISTER reduce production statement_finish_noclose -> jump_statement(nop)
-- On RBRACE reduce production statement_finish_noclose -> jump_statement(nop)
-- On PRAGMA reduce production statement_finish_noclose -> jump_statement(nop)
-- On PLUS reduce production statement_finish_noclose -> jump_statement(nop)
-- On PACKED reduce production statement_finish_noclose -> jump_statement(nop)
-- On MINUS reduce production statement_finish_noclose -> jump_statement(nop)
-- On LPAREN reduce production statement_finish_noclose -> jump_statement(nop)
-- On LONG reduce production statement_finish_noclose -> jump_statement(nop)
-- On LBRACE reduce production statement_finish_noclose -> jump_statement(nop)
-- On INT reduce production statement_finish_noclose -> jump_statement(nop)
-- On INLINE reduce production statement_finish_noclose -> jump_statement(nop)
-- On INC reduce production statement_finish_noclose -> jump_statement(nop)
-- On IF reduce production statement_finish_noclose -> jump_statement(nop)
-- On GOTO reduce production statement_finish_noclose -> jump_statement(nop)
-- On FOR reduce production statement_finish_noclose -> jump_statement(nop)
-- On FLOAT reduce production statement_finish_noclose -> jump_statement(nop)
-- On EXTERN reduce production statement_finish_noclose -> jump_statement(nop)
-- On ENUM reduce production statement_finish_noclose -> jump_statement(nop)
-- On DOUBLE reduce production statement_finish_noclose -> jump_statement(nop)
-- On DO reduce production statement_finish_noclose -> jump_statement(nop)
-- On DEFAULT reduce production statement_finish_noclose -> jump_statement(nop)
-- On DEC reduce production statement_finish_noclose -> jump_statement(nop)
-- On CONTINUE reduce production statement_finish_noclose -> jump_statement(nop)
-- On CONSTANT reduce production statement_finish_noclose -> jump_statement(nop)
-- On CONST reduce production statement_finish_noclose -> jump_statement(nop)
-- On CHAR reduce production statement_finish_noclose -> jump_statement(nop)
-- On CASE reduce production statement_finish_noclose -> jump_statement(nop)
-- On BUILTIN_VA_ARG reduce production statement_finish_noclose -> jump_statement(nop)
-- On BREAK reduce production statement_finish_noclose -> jump_statement(nop)
-- On BANG reduce production statement_finish_noclose -> jump_statement(nop)
-- On AUTO reduce production statement_finish_noclose -> jump_statement(nop)
-- On ATTRIBUTE reduce production statement_finish_noclose -> jump_statement(nop)
-- On ASM reduce production statement_finish_noclose -> jump_statement(nop)
-- On AND reduce production statement_finish_noclose -> jump_statement(nop)
-- On ALIGNOF reduce production statement_finish_noclose -> jump_statement(nop)
-- On ALIGNAS reduce production statement_finish_noclose -> jump_statement(nop)

State 626:
## Known stack suffix:
## iteration_statement(open_context,statement_finish_close)
## LR(1) items:
statement_finish_noclose -> iteration_statement(open_context,statement_finish_close) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On VOLATILE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On VOID reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On VAR_NAME reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On UNSIGNED reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On UNION reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On UNDERSCORE_BOOL reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On TYPEDEF_NAME reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On TYPEDEF reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On TILDE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On SWITCH reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On STRUCT reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On STRING_LITERAL reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On STATIC reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On STAR reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On SIZEOF reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On SIGNED reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On SHORT reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On SEMICOLON reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On RETURN reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On RESTRICT reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On REGISTER reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On RBRACE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On PRAGMA reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On PLUS reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On PACKED reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On MINUS reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On LPAREN reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On LONG reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On LBRACE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On INT reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On INLINE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On INC reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On IF reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On GOTO reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On FOR reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On FLOAT reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On EXTERN reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On ENUM reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On DOUBLE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On DO reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On DEFAULT reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On DEC reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On CONTINUE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On CONSTANT reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On CONST reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On CHAR reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On CASE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On BUILTIN_VA_ARG reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On BREAK reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On BANG reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On AUTO reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On ATTRIBUTE reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On ASM reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On AND reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On ALIGNOF reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)
-- On ALIGNAS reduce production statement_finish_noclose -> iteration_statement(open_context,statement_finish_close)

State 627:
## Known stack suffix:
## if_else_statement_begin(open_context)
## LR(1) items:
selection_statement_finish(open_context) -> if_else_statement_begin(open_context) . ELSE statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On ELSE shift to state 628
## Reductions:

State 628:
## Known stack suffix:
## if_else_statement_begin(open_context) ELSE
## LR(1) items:
selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE . statement_finish_close [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 376
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 381
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 385
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 390
-- On INC shift to state 20
-- On IF shift to state 399
-- On GOTO shift to state 412
-- On FOR shift to state 433
-- On DO shift to state 438
-- On DEFAULT shift to state 440
-- On DEC shift to state 22
-- On CONTINUE shift to state 442
-- On CONSTANT shift to state 23
-- On CASE shift to state 445
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 448
-- On BANG shift to state 26
-- On ASM shift to state 451
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_close shift to state 629
-- On shift_expression shift to state 54
-- On selection_statement_finish(nop) shift to state 485
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 486
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_close) shift to state 489
-- On jump_statement(close_context) shift to state 490
-- On iteration_statement(nop,statement_finish_close) shift to state 491
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(nop) shift to state 492
-- On general_identifier shift to state 495
-- On expression_statement(close_context) shift to state 498
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(nop) shift to state 499
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(close_context) shift to state 500
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 629:
## Known stack suffix:
## if_else_statement_begin(open_context) ELSE statement_finish_close
## LR(1) items:
selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On VOLATILE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On VOID reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On VAR_NAME reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On UNSIGNED reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On UNION reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On UNDERSCORE_BOOL reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On TYPEDEF_NAME reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On TYPEDEF reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On TILDE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On SWITCH reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On STRUCT reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On STRING_LITERAL reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On STATIC reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On STAR reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On SIZEOF reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On SIGNED reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On SHORT reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On SEMICOLON reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On RETURN reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On RESTRICT reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On REGISTER reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On RBRACE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On PRAGMA reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On PLUS reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On PACKED reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On MINUS reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On LPAREN reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On LONG reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On LBRACE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On INT reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On INLINE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On INC reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On IF reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On GOTO reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On FOR reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On FLOAT reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On EXTERN reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On ENUM reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On DOUBLE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On DO reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On DEFAULT reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On DEC reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On CONTINUE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On CONSTANT reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On CONST reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On CHAR reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On CASE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On BUILTIN_VA_ARG reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On BREAK reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On BANG reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On AUTO reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On ATTRIBUTE reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On ASM reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On AND reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On ALIGNOF reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close
-- On ALIGNAS reduce production selection_statement_finish(open_context) -> if_else_statement_begin(open_context) ELSE statement_finish_close

State 630:
## Known stack suffix:
## general_identifier
## LR(1) items:
labeled_statement(statement_finish_noclose) -> general_identifier . COLON statement_finish_noclose [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On COLON shift to state 631
## Reductions:

State 631:
## Known stack suffix:
## general_identifier COLON
## LR(1) items:
labeled_statement(statement_finish_noclose) -> general_identifier COLON . statement_finish_noclose [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On WHILE shift to state 371
-- On VAR_NAME shift to state 380
-- On TYPEDEF_NAME shift to state 38
-- On TILDE shift to state 12
-- On SWITCH shift to state 394
-- On STRING_LITERAL shift to state 13
-- On STAR shift to state 14
-- On SIZEOF shift to state 15
-- On RETURN shift to state 569
-- On PLUS shift to state 16
-- On MINUS shift to state 17
-- On LPAREN shift to state 19
-- On LBRACE shift to state 573
-- On INC shift to state 20
-- On IF shift to state 576
-- On GOTO shift to state 584
-- On FOR shift to state 587
-- On DO shift to state 594
-- On DEFAULT shift to state 604
-- On DEC shift to state 22
-- On CONTINUE shift to state 606
-- On CONSTANT shift to state 23
-- On CASE shift to state 608
-- On BUILTIN_VA_ARG shift to state 24
-- On BREAK shift to state 611
-- On BANG shift to state 26
-- On ASM shift to state 613
-- On AND shift to state 27
-- On ALIGNOF shift to state 28
-- On unary_operator shift to state 30
-- On unary_expression shift to state 41
-- On string_literals_list shift to state 32
-- On statement_finish_noclose shift to state 632
-- On shift_expression shift to state 54
-- On selection_statement_finish(open_context) shift to state 621
-- On relational_expression shift to state 70
-- On primary_expression shift to state 34
-- On postfix_expression shift to state 35
-- On option(expression) shift to state 622
-- On multiplicative_expression shift to state 58
-- On logical_or_expression shift to state 78
-- On logical_and_expression shift to state 80
-- On labeled_statement(statement_finish_noclose) shift to state 624
-- On jump_statement(nop) shift to state 625
-- On iteration_statement(open_context,statement_finish_close) shift to state 626
-- On inclusive_or_expression shift to state 96
-- On if_else_statement_begin(open_context) shift to state 627
-- On general_identifier shift to state 630
-- On expression_statement(nop) shift to state 633
-- On expression shift to state 389
-- On exclusive_or_expression shift to state 95
-- On equality_expression shift to state 86
-- On conditional_expression shift to state 99
-- On compound_statement(open_context) shift to state 634
-- On cast_expression shift to state 64
-- On assignment_expression shift to state 103
-- On asm_statement(nop) shift to state 635
-- On and_expression shift to state 94
-- On additive_expression shift to state 77
## Reductions:
-- On SEMICOLON reduce production option(expression) ->

State 632:
## Known stack suffix:
## general_identifier COLON statement_finish_noclose
## LR(1) items:
labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On VOLATILE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On VOID reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On VAR_NAME reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On UNSIGNED reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On UNION reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On UNDERSCORE_BOOL reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On TYPEDEF_NAME reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On TYPEDEF reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On TILDE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On SWITCH reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On STRUCT reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On STRING_LITERAL reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On STATIC reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On STAR reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On SIZEOF reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On SIGNED reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On SHORT reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On SEMICOLON reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On RETURN reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On RESTRICT reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On REGISTER reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On RBRACE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On PRAGMA reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On PLUS reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On PACKED reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On MINUS reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On LPAREN reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On LONG reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On LBRACE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On INT reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On INLINE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On INC reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On IF reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On GOTO reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On FOR reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On FLOAT reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On EXTERN reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On ENUM reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On DOUBLE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On DO reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On DEFAULT reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On DEC reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On CONTINUE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On CONSTANT reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On CONST reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On CHAR reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On CASE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On BUILTIN_VA_ARG reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On BREAK reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On BANG reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On AUTO reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On ATTRIBUTE reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On ASM reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On AND reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On ALIGNOF reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose
-- On ALIGNAS reduce production labeled_statement(statement_finish_noclose) -> general_identifier COLON statement_finish_noclose

State 633:
## Known stack suffix:
## expression_statement(nop)
## LR(1) items:
statement_finish_noclose -> expression_statement(nop) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_noclose -> expression_statement(nop)
-- On VOLATILE reduce production statement_finish_noclose -> expression_statement(nop)
-- On VOID reduce production statement_finish_noclose -> expression_statement(nop)
-- On VAR_NAME reduce production statement_finish_noclose -> expression_statement(nop)
-- On UNSIGNED reduce production statement_finish_noclose -> expression_statement(nop)
-- On UNION reduce production statement_finish_noclose -> expression_statement(nop)
-- On UNDERSCORE_BOOL reduce production statement_finish_noclose -> expression_statement(nop)
-- On TYPEDEF_NAME reduce production statement_finish_noclose -> expression_statement(nop)
-- On TYPEDEF reduce production statement_finish_noclose -> expression_statement(nop)
-- On TILDE reduce production statement_finish_noclose -> expression_statement(nop)
-- On SWITCH reduce production statement_finish_noclose -> expression_statement(nop)
-- On STRUCT reduce production statement_finish_noclose -> expression_statement(nop)
-- On STRING_LITERAL reduce production statement_finish_noclose -> expression_statement(nop)
-- On STATIC reduce production statement_finish_noclose -> expression_statement(nop)
-- On STAR reduce production statement_finish_noclose -> expression_statement(nop)
-- On SIZEOF reduce production statement_finish_noclose -> expression_statement(nop)
-- On SIGNED reduce production statement_finish_noclose -> expression_statement(nop)
-- On SHORT reduce production statement_finish_noclose -> expression_statement(nop)
-- On SEMICOLON reduce production statement_finish_noclose -> expression_statement(nop)
-- On RETURN reduce production statement_finish_noclose -> expression_statement(nop)
-- On RESTRICT reduce production statement_finish_noclose -> expression_statement(nop)
-- On REGISTER reduce production statement_finish_noclose -> expression_statement(nop)
-- On RBRACE reduce production statement_finish_noclose -> expression_statement(nop)
-- On PRAGMA reduce production statement_finish_noclose -> expression_statement(nop)
-- On PLUS reduce production statement_finish_noclose -> expression_statement(nop)
-- On PACKED reduce production statement_finish_noclose -> expression_statement(nop)
-- On MINUS reduce production statement_finish_noclose -> expression_statement(nop)
-- On LPAREN reduce production statement_finish_noclose -> expression_statement(nop)
-- On LONG reduce production statement_finish_noclose -> expression_statement(nop)
-- On LBRACE reduce production statement_finish_noclose -> expression_statement(nop)
-- On INT reduce production statement_finish_noclose -> expression_statement(nop)
-- On INLINE reduce production statement_finish_noclose -> expression_statement(nop)
-- On INC reduce production statement_finish_noclose -> expression_statement(nop)
-- On IF reduce production statement_finish_noclose -> expression_statement(nop)
-- On GOTO reduce production statement_finish_noclose -> expression_statement(nop)
-- On FOR reduce production statement_finish_noclose -> expression_statement(nop)
-- On FLOAT reduce production statement_finish_noclose -> expression_statement(nop)
-- On EXTERN reduce production statement_finish_noclose -> expression_statement(nop)
-- On ENUM reduce production statement_finish_noclose -> expression_statement(nop)
-- On DOUBLE reduce production statement_finish_noclose -> expression_statement(nop)
-- On DO reduce production statement_finish_noclose -> expression_statement(nop)
-- On DEFAULT reduce production statement_finish_noclose -> expression_statement(nop)
-- On DEC reduce production statement_finish_noclose -> expression_statement(nop)
-- On CONTINUE reduce production statement_finish_noclose -> expression_statement(nop)
-- On CONSTANT reduce production statement_finish_noclose -> expression_statement(nop)
-- On CONST reduce production statement_finish_noclose -> expression_statement(nop)
-- On CHAR reduce production statement_finish_noclose -> expression_statement(nop)
-- On CASE reduce production statement_finish_noclose -> expression_statement(nop)
-- On BUILTIN_VA_ARG reduce production statement_finish_noclose -> expression_statement(nop)
-- On BREAK reduce production statement_finish_noclose -> expression_statement(nop)
-- On BANG reduce production statement_finish_noclose -> expression_statement(nop)
-- On AUTO reduce production statement_finish_noclose -> expression_statement(nop)
-- On ATTRIBUTE reduce production statement_finish_noclose -> expression_statement(nop)
-- On ASM reduce production statement_finish_noclose -> expression_statement(nop)
-- On AND reduce production statement_finish_noclose -> expression_statement(nop)
-- On ALIGNOF reduce production statement_finish_noclose -> expression_statement(nop)
-- On ALIGNAS reduce production statement_finish_noclose -> expression_statement(nop)

State 634:
## Known stack suffix:
## compound_statement(open_context)
## LR(1) items:
statement_finish_noclose -> compound_statement(open_context) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On VOLATILE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On VOID reduce production statement_finish_noclose -> compound_statement(open_context)
-- On VAR_NAME reduce production statement_finish_noclose -> compound_statement(open_context)
-- On UNSIGNED reduce production statement_finish_noclose -> compound_statement(open_context)
-- On UNION reduce production statement_finish_noclose -> compound_statement(open_context)
-- On UNDERSCORE_BOOL reduce production statement_finish_noclose -> compound_statement(open_context)
-- On TYPEDEF_NAME reduce production statement_finish_noclose -> compound_statement(open_context)
-- On TYPEDEF reduce production statement_finish_noclose -> compound_statement(open_context)
-- On TILDE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On SWITCH reduce production statement_finish_noclose -> compound_statement(open_context)
-- On STRUCT reduce production statement_finish_noclose -> compound_statement(open_context)
-- On STRING_LITERAL reduce production statement_finish_noclose -> compound_statement(open_context)
-- On STATIC reduce production statement_finish_noclose -> compound_statement(open_context)
-- On STAR reduce production statement_finish_noclose -> compound_statement(open_context)
-- On SIZEOF reduce production statement_finish_noclose -> compound_statement(open_context)
-- On SIGNED reduce production statement_finish_noclose -> compound_statement(open_context)
-- On SHORT reduce production statement_finish_noclose -> compound_statement(open_context)
-- On SEMICOLON reduce production statement_finish_noclose -> compound_statement(open_context)
-- On RETURN reduce production statement_finish_noclose -> compound_statement(open_context)
-- On RESTRICT reduce production statement_finish_noclose -> compound_statement(open_context)
-- On REGISTER reduce production statement_finish_noclose -> compound_statement(open_context)
-- On RBRACE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On PRAGMA reduce production statement_finish_noclose -> compound_statement(open_context)
-- On PLUS reduce production statement_finish_noclose -> compound_statement(open_context)
-- On PACKED reduce production statement_finish_noclose -> compound_statement(open_context)
-- On MINUS reduce production statement_finish_noclose -> compound_statement(open_context)
-- On LPAREN reduce production statement_finish_noclose -> compound_statement(open_context)
-- On LONG reduce production statement_finish_noclose -> compound_statement(open_context)
-- On LBRACE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On INT reduce production statement_finish_noclose -> compound_statement(open_context)
-- On INLINE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On INC reduce production statement_finish_noclose -> compound_statement(open_context)
-- On IF reduce production statement_finish_noclose -> compound_statement(open_context)
-- On GOTO reduce production statement_finish_noclose -> compound_statement(open_context)
-- On FOR reduce production statement_finish_noclose -> compound_statement(open_context)
-- On FLOAT reduce production statement_finish_noclose -> compound_statement(open_context)
-- On EXTERN reduce production statement_finish_noclose -> compound_statement(open_context)
-- On ENUM reduce production statement_finish_noclose -> compound_statement(open_context)
-- On DOUBLE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On DO reduce production statement_finish_noclose -> compound_statement(open_context)
-- On DEFAULT reduce production statement_finish_noclose -> compound_statement(open_context)
-- On DEC reduce production statement_finish_noclose -> compound_statement(open_context)
-- On CONTINUE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On CONSTANT reduce production statement_finish_noclose -> compound_statement(open_context)
-- On CONST reduce production statement_finish_noclose -> compound_statement(open_context)
-- On CHAR reduce production statement_finish_noclose -> compound_statement(open_context)
-- On CASE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On BUILTIN_VA_ARG reduce production statement_finish_noclose -> compound_statement(open_context)
-- On BREAK reduce production statement_finish_noclose -> compound_statement(open_context)
-- On BANG reduce production statement_finish_noclose -> compound_statement(open_context)
-- On AUTO reduce production statement_finish_noclose -> compound_statement(open_context)
-- On ATTRIBUTE reduce production statement_finish_noclose -> compound_statement(open_context)
-- On ASM reduce production statement_finish_noclose -> compound_statement(open_context)
-- On AND reduce production statement_finish_noclose -> compound_statement(open_context)
-- On ALIGNOF reduce production statement_finish_noclose -> compound_statement(open_context)
-- On ALIGNAS reduce production statement_finish_noclose -> compound_statement(open_context)

State 635:
## Known stack suffix:
## asm_statement(nop)
## LR(1) items:
statement_finish_noclose -> asm_statement(nop) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production statement_finish_noclose -> asm_statement(nop)
-- On VOLATILE reduce production statement_finish_noclose -> asm_statement(nop)
-- On VOID reduce production statement_finish_noclose -> asm_statement(nop)
-- On VAR_NAME reduce production statement_finish_noclose -> asm_statement(nop)
-- On UNSIGNED reduce production statement_finish_noclose -> asm_statement(nop)
-- On UNION reduce production statement_finish_noclose -> asm_statement(nop)
-- On UNDERSCORE_BOOL reduce production statement_finish_noclose -> asm_statement(nop)
-- On TYPEDEF_NAME reduce production statement_finish_noclose -> asm_statement(nop)
-- On TYPEDEF reduce production statement_finish_noclose -> asm_statement(nop)
-- On TILDE reduce production statement_finish_noclose -> asm_statement(nop)
-- On SWITCH reduce production statement_finish_noclose -> asm_statement(nop)
-- On STRUCT reduce production statement_finish_noclose -> asm_statement(nop)
-- On STRING_LITERAL reduce production statement_finish_noclose -> asm_statement(nop)
-- On STATIC reduce production statement_finish_noclose -> asm_statement(nop)
-- On STAR reduce production statement_finish_noclose -> asm_statement(nop)
-- On SIZEOF reduce production statement_finish_noclose -> asm_statement(nop)
-- On SIGNED reduce production statement_finish_noclose -> asm_statement(nop)
-- On SHORT reduce production statement_finish_noclose -> asm_statement(nop)
-- On SEMICOLON reduce production statement_finish_noclose -> asm_statement(nop)
-- On RETURN reduce production statement_finish_noclose -> asm_statement(nop)
-- On RESTRICT reduce production statement_finish_noclose -> asm_statement(nop)
-- On REGISTER reduce production statement_finish_noclose -> asm_statement(nop)
-- On RBRACE reduce production statement_finish_noclose -> asm_statement(nop)
-- On PRAGMA reduce production statement_finish_noclose -> asm_statement(nop)
-- On PLUS reduce production statement_finish_noclose -> asm_statement(nop)
-- On PACKED reduce production statement_finish_noclose -> asm_statement(nop)
-- On MINUS reduce production statement_finish_noclose -> asm_statement(nop)
-- On LPAREN reduce production statement_finish_noclose -> asm_statement(nop)
-- On LONG reduce production statement_finish_noclose -> asm_statement(nop)
-- On LBRACE reduce production statement_finish_noclose -> asm_statement(nop)
-- On INT reduce production statement_finish_noclose -> asm_statement(nop)
-- On INLINE reduce production statement_finish_noclose -> asm_statement(nop)
-- On INC reduce production statement_finish_noclose -> asm_statement(nop)
-- On IF reduce production statement_finish_noclose -> asm_statement(nop)
-- On GOTO reduce production statement_finish_noclose -> asm_statement(nop)
-- On FOR reduce production statement_finish_noclose -> asm_statement(nop)
-- On FLOAT reduce production statement_finish_noclose -> asm_statement(nop)
-- On EXTERN reduce production statement_finish_noclose -> asm_statement(nop)
-- On ENUM reduce production statement_finish_noclose -> asm_statement(nop)
-- On DOUBLE reduce production statement_finish_noclose -> asm_statement(nop)
-- On DO reduce production statement_finish_noclose -> asm_statement(nop)
-- On DEFAULT reduce production statement_finish_noclose -> asm_statement(nop)
-- On DEC reduce production statement_finish_noclose -> asm_statement(nop)
-- On CONTINUE reduce production statement_finish_noclose -> asm_statement(nop)
-- On CONSTANT reduce production statement_finish_noclose -> asm_statement(nop)
-- On CONST reduce production statement_finish_noclose -> asm_statement(nop)
-- On CHAR reduce production statement_finish_noclose -> asm_statement(nop)
-- On CASE reduce production statement_finish_noclose -> asm_statement(nop)
-- On BUILTIN_VA_ARG reduce production statement_finish_noclose -> asm_statement(nop)
-- On BREAK reduce production statement_finish_noclose -> asm_statement(nop)
-- On BANG reduce production statement_finish_noclose -> asm_statement(nop)
-- On AUTO reduce production statement_finish_noclose -> asm_statement(nop)
-- On ATTRIBUTE reduce production statement_finish_noclose -> asm_statement(nop)
-- On ASM reduce production statement_finish_noclose -> asm_statement(nop)
-- On AND reduce production statement_finish_noclose -> asm_statement(nop)
-- On ALIGNOF reduce production statement_finish_noclose -> asm_statement(nop)
-- On ALIGNAS reduce production statement_finish_noclose -> asm_statement(nop)

State 636:
## Known stack suffix:
## DEFAULT COLON statement_finish_noclose
## LR(1) items:
labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On VOLATILE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On VOID reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On VAR_NAME reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On UNSIGNED reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On UNION reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On UNDERSCORE_BOOL reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On TYPEDEF_NAME reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On TYPEDEF reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On TILDE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On SWITCH reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On STRUCT reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On STRING_LITERAL reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On STATIC reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On STAR reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On SIZEOF reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On SIGNED reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On SHORT reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On SEMICOLON reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On RETURN reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On RESTRICT reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On REGISTER reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On RBRACE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On PRAGMA reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On PLUS reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On PACKED reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On MINUS reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On LPAREN reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On LONG reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On LBRACE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On INT reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On INLINE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On INC reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On IF reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On GOTO reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On FOR reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On FLOAT reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On EXTERN reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On ENUM reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On DOUBLE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On DO reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On DEFAULT reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On DEC reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On CONTINUE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On CONSTANT reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On CONST reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On CHAR reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On CASE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On BUILTIN_VA_ARG reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On BREAK reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On BANG reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On AUTO reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On ATTRIBUTE reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On ASM reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On AND reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On ALIGNOF reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose
-- On ALIGNAS reduce production labeled_statement(statement_finish_noclose) -> DEFAULT COLON statement_finish_noclose

State 637:
## Known stack suffix:
## statement_finish_noclose
## LR(1) items:
block_item -> statement_finish_noclose . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production block_item -> statement_finish_noclose
-- On VOLATILE reduce production block_item -> statement_finish_noclose
-- On VOID reduce production block_item -> statement_finish_noclose
-- On VAR_NAME reduce production block_item -> statement_finish_noclose
-- On UNSIGNED reduce production block_item -> statement_finish_noclose
-- On UNION reduce production block_item -> statement_finish_noclose
-- On UNDERSCORE_BOOL reduce production block_item -> statement_finish_noclose
-- On TYPEDEF_NAME reduce production block_item -> statement_finish_noclose
-- On TYPEDEF reduce production block_item -> statement_finish_noclose
-- On TILDE reduce production block_item -> statement_finish_noclose
-- On SWITCH reduce production block_item -> statement_finish_noclose
-- On STRUCT reduce production block_item -> statement_finish_noclose
-- On STRING_LITERAL reduce production block_item -> statement_finish_noclose
-- On STATIC reduce production block_item -> statement_finish_noclose
-- On STAR reduce production block_item -> statement_finish_noclose
-- On SIZEOF reduce production block_item -> statement_finish_noclose
-- On SIGNED reduce production block_item -> statement_finish_noclose
-- On SHORT reduce production block_item -> statement_finish_noclose
-- On SEMICOLON reduce production block_item -> statement_finish_noclose
-- On RETURN reduce production block_item -> statement_finish_noclose
-- On RESTRICT reduce production block_item -> statement_finish_noclose
-- On REGISTER reduce production block_item -> statement_finish_noclose
-- On RBRACE reduce production block_item -> statement_finish_noclose
-- On PRAGMA reduce production block_item -> statement_finish_noclose
-- On PLUS reduce production block_item -> statement_finish_noclose
-- On PACKED reduce production block_item -> statement_finish_noclose
-- On MINUS reduce production block_item -> statement_finish_noclose
-- On LPAREN reduce production block_item -> statement_finish_noclose
-- On LONG reduce production block_item -> statement_finish_noclose
-- On LBRACE reduce production block_item -> statement_finish_noclose
-- On INT reduce production block_item -> statement_finish_noclose
-- On INLINE reduce production block_item -> statement_finish_noclose
-- On INC reduce production block_item -> statement_finish_noclose
-- On IF reduce production block_item -> statement_finish_noclose
-- On GOTO reduce production block_item -> statement_finish_noclose
-- On FOR reduce production block_item -> statement_finish_noclose
-- On FLOAT reduce production block_item -> statement_finish_noclose
-- On EXTERN reduce production block_item -> statement_finish_noclose
-- On ENUM reduce production block_item -> statement_finish_noclose
-- On DOUBLE reduce production block_item -> statement_finish_noclose
-- On DO reduce production block_item -> statement_finish_noclose
-- On DEFAULT reduce production block_item -> statement_finish_noclose
-- On DEC reduce production block_item -> statement_finish_noclose
-- On CONTINUE reduce production block_item -> statement_finish_noclose
-- On CONSTANT reduce production block_item -> statement_finish_noclose
-- On CONST reduce production block_item -> statement_finish_noclose
-- On CHAR reduce production block_item -> statement_finish_noclose
-- On CASE reduce production block_item -> statement_finish_noclose
-- On BUILTIN_VA_ARG reduce production block_item -> statement_finish_noclose
-- On BREAK reduce production block_item -> statement_finish_noclose
-- On BANG reduce production block_item -> statement_finish_noclose
-- On AUTO reduce production block_item -> statement_finish_noclose
-- On ATTRIBUTE reduce production block_item -> statement_finish_noclose
-- On ASM reduce production block_item -> statement_finish_noclose
-- On AND reduce production block_item -> statement_finish_noclose
-- On ALIGNOF reduce production block_item -> statement_finish_noclose
-- On ALIGNAS reduce production block_item -> statement_finish_noclose

State 638:
## Known stack suffix:
## declaration(block_item)
## LR(1) items:
block_item -> declaration(block_item) . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production block_item -> declaration(block_item)
-- On VOLATILE reduce production block_item -> declaration(block_item)
-- On VOID reduce production block_item -> declaration(block_item)
-- On VAR_NAME reduce production block_item -> declaration(block_item)
-- On UNSIGNED reduce production block_item -> declaration(block_item)
-- On UNION reduce production block_item -> declaration(block_item)
-- On UNDERSCORE_BOOL reduce production block_item -> declaration(block_item)
-- On TYPEDEF_NAME reduce production block_item -> declaration(block_item)
-- On TYPEDEF reduce production block_item -> declaration(block_item)
-- On TILDE reduce production block_item -> declaration(block_item)
-- On SWITCH reduce production block_item -> declaration(block_item)
-- On STRUCT reduce production block_item -> declaration(block_item)
-- On STRING_LITERAL reduce production block_item -> declaration(block_item)
-- On STATIC reduce production block_item -> declaration(block_item)
-- On STAR reduce production block_item -> declaration(block_item)
-- On SIZEOF reduce production block_item -> declaration(block_item)
-- On SIGNED reduce production block_item -> declaration(block_item)
-- On SHORT reduce production block_item -> declaration(block_item)
-- On SEMICOLON reduce production block_item -> declaration(block_item)
-- On RETURN reduce production block_item -> declaration(block_item)
-- On RESTRICT reduce production block_item -> declaration(block_item)
-- On REGISTER reduce production block_item -> declaration(block_item)
-- On RBRACE reduce production block_item -> declaration(block_item)
-- On PRAGMA reduce production block_item -> declaration(block_item)
-- On PLUS reduce production block_item -> declaration(block_item)
-- On PACKED reduce production block_item -> declaration(block_item)
-- On MINUS reduce production block_item -> declaration(block_item)
-- On LPAREN reduce production block_item -> declaration(block_item)
-- On LONG reduce production block_item -> declaration(block_item)
-- On LBRACE reduce production block_item -> declaration(block_item)
-- On INT reduce production block_item -> declaration(block_item)
-- On INLINE reduce production block_item -> declaration(block_item)
-- On INC reduce production block_item -> declaration(block_item)
-- On IF reduce production block_item -> declaration(block_item)
-- On GOTO reduce production block_item -> declaration(block_item)
-- On FOR reduce production block_item -> declaration(block_item)
-- On FLOAT reduce production block_item -> declaration(block_item)
-- On EXTERN reduce production block_item -> declaration(block_item)
-- On ENUM reduce production block_item -> declaration(block_item)
-- On DOUBLE reduce production block_item -> declaration(block_item)
-- On DO reduce production block_item -> declaration(block_item)
-- On DEFAULT reduce production block_item -> declaration(block_item)
-- On DEC reduce production block_item -> declaration(block_item)
-- On CONTINUE reduce production block_item -> declaration(block_item)
-- On CONSTANT reduce production block_item -> declaration(block_item)
-- On CONST reduce production block_item -> declaration(block_item)
-- On CHAR reduce production block_item -> declaration(block_item)
-- On CASE reduce production block_item -> declaration(block_item)
-- On BUILTIN_VA_ARG reduce production block_item -> declaration(block_item)
-- On BREAK reduce production block_item -> declaration(block_item)
-- On BANG reduce production block_item -> declaration(block_item)
-- On AUTO reduce production block_item -> declaration(block_item)
-- On ATTRIBUTE reduce production block_item -> declaration(block_item)
-- On ASM reduce production block_item -> declaration(block_item)
-- On AND reduce production block_item -> declaration(block_item)
-- On ALIGNOF reduce production block_item -> declaration(block_item)
-- On ALIGNAS reduce production block_item -> declaration(block_item)

State 639:
## Known stack suffix:
## LBRACE open_context option(block_item_list) close_context
## LR(1) items:
compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context . RBRACE [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RBRACE shift to state 640
## Reductions:

State 640:
## Known stack suffix:
## LBRACE open_context option(block_item_list) close_context RBRACE
## LR(1) items:
compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On VOLATILE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On VOID reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On VAR_NAME reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On UNSIGNED reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On UNION reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On UNDERSCORE_BOOL reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On TYPEDEF_NAME reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On TYPEDEF reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On TILDE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On SWITCH reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On STRUCT reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On STRING_LITERAL reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On STATIC reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On STAR reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On SIZEOF reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On SIGNED reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On SHORT reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On SEMICOLON reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On RETURN reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On RESTRICT reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On REGISTER reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On RBRACE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On PRAGMA reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On PLUS reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On PACKED reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On MINUS reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On LPAREN reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On LONG reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On LBRACE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On INT reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On INLINE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On INC reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On IF reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On GOTO reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On FOR reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On FLOAT reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On EXTERN reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On ENUM reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On DOUBLE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On DO reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On DEFAULT reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On DEC reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On CONTINUE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On CONSTANT reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On CONST reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On CHAR reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On CASE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On BUILTIN_VA_ARG reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On BREAK reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On BANG reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On AUTO reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On ATTRIBUTE reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On ASM reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On AND reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On ALIGNOF reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE
-- On ALIGNAS reduce production compound_statement(open_context) -> LBRACE open_context option(block_item_list) close_context RBRACE

State 641:
## Known stack suffix:
## option(block_item_list) block_item
## LR(1) items:
block_item_list -> option(block_item_list) block_item . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production block_item_list -> option(block_item_list) block_item
-- On VOLATILE reduce production block_item_list -> option(block_item_list) block_item
-- On VOID reduce production block_item_list -> option(block_item_list) block_item
-- On VAR_NAME reduce production block_item_list -> option(block_item_list) block_item
-- On UNSIGNED reduce production block_item_list -> option(block_item_list) block_item
-- On UNION reduce production block_item_list -> option(block_item_list) block_item
-- On UNDERSCORE_BOOL reduce production block_item_list -> option(block_item_list) block_item
-- On TYPEDEF_NAME reduce production block_item_list -> option(block_item_list) block_item
-- On TYPEDEF reduce production block_item_list -> option(block_item_list) block_item
-- On TILDE reduce production block_item_list -> option(block_item_list) block_item
-- On SWITCH reduce production block_item_list -> option(block_item_list) block_item
-- On STRUCT reduce production block_item_list -> option(block_item_list) block_item
-- On STRING_LITERAL reduce production block_item_list -> option(block_item_list) block_item
-- On STATIC reduce production block_item_list -> option(block_item_list) block_item
-- On STAR reduce production block_item_list -> option(block_item_list) block_item
-- On SIZEOF reduce production block_item_list -> option(block_item_list) block_item
-- On SIGNED reduce production block_item_list -> option(block_item_list) block_item
-- On SHORT reduce production block_item_list -> option(block_item_list) block_item
-- On SEMICOLON reduce production block_item_list -> option(block_item_list) block_item
-- On RETURN reduce production block_item_list -> option(block_item_list) block_item
-- On RESTRICT reduce production block_item_list -> option(block_item_list) block_item
-- On REGISTER reduce production block_item_list -> option(block_item_list) block_item
-- On RBRACE reduce production block_item_list -> option(block_item_list) block_item
-- On PRAGMA reduce production block_item_list -> option(block_item_list) block_item
-- On PLUS reduce production block_item_list -> option(block_item_list) block_item
-- On PACKED reduce production block_item_list -> option(block_item_list) block_item
-- On MINUS reduce production block_item_list -> option(block_item_list) block_item
-- On LPAREN reduce production block_item_list -> option(block_item_list) block_item
-- On LONG reduce production block_item_list -> option(block_item_list) block_item
-- On LBRACE reduce production block_item_list -> option(block_item_list) block_item
-- On INT reduce production block_item_list -> option(block_item_list) block_item
-- On INLINE reduce production block_item_list -> option(block_item_list) block_item
-- On INC reduce production block_item_list -> option(block_item_list) block_item
-- On IF reduce production block_item_list -> option(block_item_list) block_item
-- On GOTO reduce production block_item_list -> option(block_item_list) block_item
-- On FOR reduce production block_item_list -> option(block_item_list) block_item
-- On FLOAT reduce production block_item_list -> option(block_item_list) block_item
-- On EXTERN reduce production block_item_list -> option(block_item_list) block_item
-- On ENUM reduce production block_item_list -> option(block_item_list) block_item
-- On DOUBLE reduce production block_item_list -> option(block_item_list) block_item
-- On DO reduce production block_item_list -> option(block_item_list) block_item
-- On DEFAULT reduce production block_item_list -> option(block_item_list) block_item
-- On DEC reduce production block_item_list -> option(block_item_list) block_item
-- On CONTINUE reduce production block_item_list -> option(block_item_list) block_item
-- On CONSTANT reduce production block_item_list -> option(block_item_list) block_item
-- On CONST reduce production block_item_list -> option(block_item_list) block_item
-- On CHAR reduce production block_item_list -> option(block_item_list) block_item
-- On CASE reduce production block_item_list -> option(block_item_list) block_item
-- On BUILTIN_VA_ARG reduce production block_item_list -> option(block_item_list) block_item
-- On BREAK reduce production block_item_list -> option(block_item_list) block_item
-- On BANG reduce production block_item_list -> option(block_item_list) block_item
-- On AUTO reduce production block_item_list -> option(block_item_list) block_item
-- On ATTRIBUTE reduce production block_item_list -> option(block_item_list) block_item
-- On ASM reduce production block_item_list -> option(block_item_list) block_item
-- On AND reduce production block_item_list -> option(block_item_list) block_item
-- On ALIGNOF reduce production block_item_list -> option(block_item_list) block_item
-- On ALIGNAS reduce production block_item_list -> option(block_item_list) block_item

State 642:
## Known stack suffix:
## block_item_list
## LR(1) items:
option(block_item_list) -> block_item_list . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production option(block_item_list) -> block_item_list
-- On VOLATILE reduce production option(block_item_list) -> block_item_list
-- On VOID reduce production option(block_item_list) -> block_item_list
-- On VAR_NAME reduce production option(block_item_list) -> block_item_list
-- On UNSIGNED reduce production option(block_item_list) -> block_item_list
-- On UNION reduce production option(block_item_list) -> block_item_list
-- On UNDERSCORE_BOOL reduce production option(block_item_list) -> block_item_list
-- On TYPEDEF_NAME reduce production option(block_item_list) -> block_item_list
-- On TYPEDEF reduce production option(block_item_list) -> block_item_list
-- On TILDE reduce production option(block_item_list) -> block_item_list
-- On SWITCH reduce production option(block_item_list) -> block_item_list
-- On STRUCT reduce production option(block_item_list) -> block_item_list
-- On STRING_LITERAL reduce production option(block_item_list) -> block_item_list
-- On STATIC reduce production option(block_item_list) -> block_item_list
-- On STAR reduce production option(block_item_list) -> block_item_list
-- On SIZEOF reduce production option(block_item_list) -> block_item_list
-- On SIGNED reduce production option(block_item_list) -> block_item_list
-- On SHORT reduce production option(block_item_list) -> block_item_list
-- On SEMICOLON reduce production option(block_item_list) -> block_item_list
-- On RETURN reduce production option(block_item_list) -> block_item_list
-- On RESTRICT reduce production option(block_item_list) -> block_item_list
-- On REGISTER reduce production option(block_item_list) -> block_item_list
-- On RBRACE reduce production option(block_item_list) -> block_item_list
-- On PRAGMA reduce production option(block_item_list) -> block_item_list
-- On PLUS reduce production option(block_item_list) -> block_item_list
-- On PACKED reduce production option(block_item_list) -> block_item_list
-- On MINUS reduce production option(block_item_list) -> block_item_list
-- On LPAREN reduce production option(block_item_list) -> block_item_list
-- On LONG reduce production option(block_item_list) -> block_item_list
-- On LBRACE reduce production option(block_item_list) -> block_item_list
-- On INT reduce production option(block_item_list) -> block_item_list
-- On INLINE reduce production option(block_item_list) -> block_item_list
-- On INC reduce production option(block_item_list) -> block_item_list
-- On IF reduce production option(block_item_list) -> block_item_list
-- On GOTO reduce production option(block_item_list) -> block_item_list
-- On FOR reduce production option(block_item_list) -> block_item_list
-- On FLOAT reduce production option(block_item_list) -> block_item_list
-- On EXTERN reduce production option(block_item_list) -> block_item_list
-- On ENUM reduce production option(block_item_list) -> block_item_list
-- On DOUBLE reduce production option(block_item_list) -> block_item_list
-- On DO reduce production option(block_item_list) -> block_item_list
-- On DEFAULT reduce production option(block_item_list) -> block_item_list
-- On DEC reduce production option(block_item_list) -> block_item_list
-- On CONTINUE reduce production option(block_item_list) -> block_item_list
-- On CONSTANT reduce production option(block_item_list) -> block_item_list
-- On CONST reduce production option(block_item_list) -> block_item_list
-- On CHAR reduce production option(block_item_list) -> block_item_list
-- On CASE reduce production option(block_item_list) -> block_item_list
-- On BUILTIN_VA_ARG reduce production option(block_item_list) -> block_item_list
-- On BREAK reduce production option(block_item_list) -> block_item_list
-- On BANG reduce production option(block_item_list) -> block_item_list
-- On AUTO reduce production option(block_item_list) -> block_item_list
-- On ATTRIBUTE reduce production option(block_item_list) -> block_item_list
-- On ASM reduce production option(block_item_list) -> block_item_list
-- On AND reduce production option(block_item_list) -> block_item_list
-- On ALIGNOF reduce production option(block_item_list) -> block_item_list
-- On ALIGNAS reduce production option(block_item_list) -> block_item_list

State 643:
## Known stack suffix:
## LBRACE option(block_item_list) close_context
## LR(1) items:
compound_statement(nop) -> LBRACE option(block_item_list) close_context . RBRACE [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
-- On RBRACE shift to state 644
## Reductions:

State 644:
## Known stack suffix:
## LBRACE option(block_item_list) close_context RBRACE
## LR(1) items:
compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM ELSE DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On VOLATILE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On VOID reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On VAR_NAME reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On UNSIGNED reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On UNION reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On UNDERSCORE_BOOL reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On TYPEDEF_NAME reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On TYPEDEF reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On TILDE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On SWITCH reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On STRUCT reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On STRING_LITERAL reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On STATIC reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On STAR reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On SIZEOF reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On SIGNED reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On SHORT reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On SEMICOLON reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On RETURN reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On RESTRICT reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On REGISTER reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On RBRACE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On PRAGMA reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On PLUS reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On PACKED reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On MINUS reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On LPAREN reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On LONG reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On LBRACE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On INT reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On INLINE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On INC reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On IF reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On GOTO reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On FOR reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On FLOAT reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On EXTERN reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On ENUM reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On ELSE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On DOUBLE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On DO reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On DEFAULT reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On DEC reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On CONTINUE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On CONSTANT reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On CONST reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On CHAR reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On CASE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On BUILTIN_VA_ARG reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On BREAK reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On BANG reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On AUTO reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On ATTRIBUTE reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On ASM reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On AND reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On ALIGNOF reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE
-- On ALIGNAS reduce production compound_statement(nop) -> LBRACE option(block_item_list) close_context RBRACE

State 645:
## Known stack suffix:
## WHILE open_context LPAREN expression RPAREN statement_finish_close
## LR(1) items:
iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close . [ WHILE VOLATILE VOID VAR_NAME UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF TILDE SWITCH STRUCT STRING_LITERAL STATIC STAR SIZEOF SIGNED SHORT SEMICOLON RETURN RESTRICT REGISTER RBRACE PRAGMA PLUS PACKED MINUS LPAREN LONG LBRACE INT INLINE INC IF GOTO FOR FLOAT EXTERN ENUM DOUBLE DO DEFAULT DEC CONTINUE CONSTANT CONST CHAR CASE BUILTIN_VA_ARG BREAK BANG AUTO ATTRIBUTE ASM AND ALIGNOF ALIGNAS ]
## Transitions:
## Reductions:
-- On WHILE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On VOLATILE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On VOID reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On VAR_NAME reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On UNSIGNED reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On UNION reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On UNDERSCORE_BOOL reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On TYPEDEF_NAME reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On TYPEDEF reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On TILDE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On SWITCH reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On STRUCT reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On STRING_LITERAL reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On STATIC reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On STAR reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On SIZEOF reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On SIGNED reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On SHORT reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On SEMICOLON reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On RETURN reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On RESTRICT reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On REGISTER reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On RBRACE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On PRAGMA reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On PLUS reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On PACKED reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On MINUS reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On LPAREN reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On LONG reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On LBRACE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On INT reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On INLINE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On INC reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On IF reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On GOTO reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On FOR reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On FLOAT reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On EXTERN reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On ENUM reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On DOUBLE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On DO reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On DEFAULT reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On DEC reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On CONTINUE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On CONSTANT reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On CONST reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On CHAR reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On CASE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On BUILTIN_VA_ARG reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On BREAK reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On BANG reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On AUTO reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On ATTRIBUTE reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On ASM reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On AND reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On ALIGNOF reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close
-- On ALIGNAS reduce production iteration_statement(open_context,statement_finish_close) -> WHILE open_context LPAREN expression RPAREN statement_finish_close

State 646:
## Known stack suffix:
## function_definition_begin LBRACE option(block_item_list) close_context
## LR(1) items:
function_definition -> function_definition_begin LBRACE option(block_item_list) close_context . RBRACE [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On RBRACE shift to state 647
## Reductions:

State 647:
## Known stack suffix:
## function_definition_begin LBRACE option(block_item_list) close_context RBRACE
## LR(1) items:
function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On VOID reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On UNSIGNED reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On UNION reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On UNDERSCORE_BOOL reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On TYPEDEF_NAME reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On TYPEDEF reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On STRUCT reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On STATIC reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On SIGNED reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On SHORT reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On SEMICOLON reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On RESTRICT reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On REGISTER reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On PRAGMA reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On PACKED reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On LONG reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On INT reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On INLINE reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On FLOAT reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On EXTERN reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On EOF reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On ENUM reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On DOUBLE reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On CONST reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On CHAR reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On AUTO reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On ATTRIBUTE reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE
-- On ALIGNAS reduce production function_definition -> function_definition_begin LBRACE option(block_item_list) close_context RBRACE

State 648:
## Known stack suffix:
## function_definition
## LR(1) items:
external_declaration -> function_definition . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production external_declaration -> function_definition
-- On VOID reduce production external_declaration -> function_definition
-- On UNSIGNED reduce production external_declaration -> function_definition
-- On UNION reduce production external_declaration -> function_definition
-- On UNDERSCORE_BOOL reduce production external_declaration -> function_definition
-- On TYPEDEF_NAME reduce production external_declaration -> function_definition
-- On TYPEDEF reduce production external_declaration -> function_definition
-- On STRUCT reduce production external_declaration -> function_definition
-- On STATIC reduce production external_declaration -> function_definition
-- On SIGNED reduce production external_declaration -> function_definition
-- On SHORT reduce production external_declaration -> function_definition
-- On SEMICOLON reduce production external_declaration -> function_definition
-- On RESTRICT reduce production external_declaration -> function_definition
-- On REGISTER reduce production external_declaration -> function_definition
-- On PRAGMA reduce production external_declaration -> function_definition
-- On PACKED reduce production external_declaration -> function_definition
-- On LONG reduce production external_declaration -> function_definition
-- On INT reduce production external_declaration -> function_definition
-- On INLINE reduce production external_declaration -> function_definition
-- On FLOAT reduce production external_declaration -> function_definition
-- On EXTERN reduce production external_declaration -> function_definition
-- On EOF reduce production external_declaration -> function_definition
-- On ENUM reduce production external_declaration -> function_definition
-- On DOUBLE reduce production external_declaration -> function_definition
-- On CONST reduce production external_declaration -> function_definition
-- On CHAR reduce production external_declaration -> function_definition
-- On AUTO reduce production external_declaration -> function_definition
-- On ATTRIBUTE reduce production external_declaration -> function_definition
-- On ALIGNAS reduce production external_declaration -> function_definition

State 649:
## Known stack suffix:
## translation_unit external_declaration
## LR(1) items:
translation_unit -> translation_unit external_declaration . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production translation_unit -> translation_unit external_declaration
-- On VOID reduce production translation_unit -> translation_unit external_declaration
-- On UNSIGNED reduce production translation_unit -> translation_unit external_declaration
-- On UNION reduce production translation_unit -> translation_unit external_declaration
-- On UNDERSCORE_BOOL reduce production translation_unit -> translation_unit external_declaration
-- On TYPEDEF_NAME reduce production translation_unit -> translation_unit external_declaration
-- On TYPEDEF reduce production translation_unit -> translation_unit external_declaration
-- On STRUCT reduce production translation_unit -> translation_unit external_declaration
-- On STATIC reduce production translation_unit -> translation_unit external_declaration
-- On SIGNED reduce production translation_unit -> translation_unit external_declaration
-- On SHORT reduce production translation_unit -> translation_unit external_declaration
-- On SEMICOLON reduce production translation_unit -> translation_unit external_declaration
-- On RESTRICT reduce production translation_unit -> translation_unit external_declaration
-- On REGISTER reduce production translation_unit -> translation_unit external_declaration
-- On PRAGMA reduce production translation_unit -> translation_unit external_declaration
-- On PACKED reduce production translation_unit -> translation_unit external_declaration
-- On LONG reduce production translation_unit -> translation_unit external_declaration
-- On INT reduce production translation_unit -> translation_unit external_declaration
-- On INLINE reduce production translation_unit -> translation_unit external_declaration
-- On FLOAT reduce production translation_unit -> translation_unit external_declaration
-- On EXTERN reduce production translation_unit -> translation_unit external_declaration
-- On EOF reduce production translation_unit -> translation_unit external_declaration
-- On ENUM reduce production translation_unit -> translation_unit external_declaration
-- On DOUBLE reduce production translation_unit -> translation_unit external_declaration
-- On CONST reduce production translation_unit -> translation_unit external_declaration
-- On CHAR reduce production translation_unit -> translation_unit external_declaration
-- On AUTO reduce production translation_unit -> translation_unit external_declaration
-- On ATTRIBUTE reduce production translation_unit -> translation_unit external_declaration
-- On ALIGNAS reduce production translation_unit -> translation_unit external_declaration

State 650:
## Known stack suffix:
## declaration_specifiers_typedef
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers_typedef . option(typedef_declarator_list) SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 226
-- On typedef_declarator_list shift to state 515
-- On typedef_declarator shift to state 520
-- On option(typedef_declarator_list) shift to state 651
-- On list(pointer1) shift to state 227
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 275
-- On declare_typename(fst(declarator)) shift to state 518
-- On declarator shift to state 519
## Reductions:
-- On STAR reduce production list(pointer1) ->
-- On SEMICOLON reduce production option(typedef_declarator_list) ->

State 651:
## Known stack suffix:
## declaration_specifiers_typedef option(typedef_declarator_list)
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) . SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 652
## Reductions:

State 652:
## Known stack suffix:
## declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On VOID reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On UNSIGNED reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On UNION reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On UNDERSCORE_BOOL reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On TYPEDEF_NAME reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On TYPEDEF reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On STRUCT reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On STATIC reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On SIGNED reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On SHORT reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On SEMICOLON reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On RESTRICT reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On REGISTER reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On PRAGMA reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On PACKED reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On LONG reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On INT reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On INLINE reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On FLOAT reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On EXTERN reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On EOF reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On ENUM reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On DOUBLE reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On CONST reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On CHAR reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On AUTO reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On ATTRIBUTE reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON
-- On ALIGNAS reduce production declaration(external_declaration) -> declaration_specifiers_typedef option(typedef_declarator_list) SEMICOLON

State 653:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration))
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) . option(init_declarator_list) SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) . direct_declarator [ LBRACE ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) . list(pointer1) STAR option(type_qualifier_list) direct_declarator [ LBRACE ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) . direct_declarator LPAREN identifier_list RPAREN open_context declaration_list [ LBRACE ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) . list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN open_context declaration_list [ LBRACE ]
## Transitions:
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On LPAREN shift to state 226
-- On option(init_declarator_list) shift to state 654
-- On list(pointer1) shift to state 656
-- On init_declarator_list shift to state 526
-- On init_declarator shift to state 532
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 669
-- On declare_varname(fst(declarator)) shift to state 529
-- On declarator shift to state 294
## Reductions:
-- On STAR reduce production list(pointer1) ->
-- On SEMICOLON reduce production option(init_declarator_list) ->

State 654:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) option(init_declarator_list)
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) . SEMICOLON [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
-- On SEMICOLON shift to state 655
## Reductions:

State 655:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
## LR(1) items:
declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On VOID reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On UNSIGNED reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On UNION reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On UNDERSCORE_BOOL reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On TYPEDEF_NAME reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On TYPEDEF reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On STRUCT reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On STATIC reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On SIGNED reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On SHORT reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On SEMICOLON reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On RESTRICT reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On REGISTER reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On PRAGMA reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On PACKED reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On LONG reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On INT reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On INLINE reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On FLOAT reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On EXTERN reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On EOF reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On ENUM reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On DOUBLE reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On CONST reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On CHAR reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On AUTO reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On ATTRIBUTE reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON
-- On ALIGNAS reduce production declaration(external_declaration) -> declaration_specifiers(declaration(external_declaration)) option(init_declarator_list) SEMICOLON

State 656:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) list(pointer1)
## LR(1) items:
declarator -> list(pointer1) . STAR option(type_qualifier_list) direct_declarator attribute_specifier_list [ SEMICOLON EQ COMMA ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) . STAR option(type_qualifier_list) direct_declarator [ LBRACE ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) . STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN open_context declaration_list [ LBRACE ]
list(pointer1) -> list(pointer1) . STAR option(type_qualifier_list) [ STAR ]
## Transitions:
-- On STAR shift to state 657
## Reductions:

State 657:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR
## LR(1) items:
declarator -> list(pointer1) STAR . option(type_qualifier_list) direct_declarator attribute_specifier_list [ SEMICOLON EQ COMMA ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR . option(type_qualifier_list) direct_declarator [ LBRACE ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR . option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN open_context declaration_list [ LBRACE ]
list(pointer1) -> list(pointer1) STAR . option(type_qualifier_list) [ STAR ]
## Transitions:
-- On type_qualifier_list shift to state 121
-- On option(type_qualifier_list) shift to state 658
## Reductions:
-- On VOLATILE reduce production option(type_qualifier_list) ->
-- On VAR_NAME reduce production option(type_qualifier_list) ->
-- On TYPEDEF_NAME reduce production option(type_qualifier_list) ->
-- On STAR reduce production option(type_qualifier_list) ->
-- On RESTRICT reduce production option(type_qualifier_list) ->
-- On PACKED reduce production option(type_qualifier_list) ->
-- On LPAREN reduce production option(type_qualifier_list) ->
-- On CONST reduce production option(type_qualifier_list) ->
-- On ATTRIBUTE reduce production option(type_qualifier_list) ->
-- On ALIGNAS reduce production option(type_qualifier_list) ->

State 658:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list)
## LR(1) items:
declarator -> list(pointer1) STAR option(type_qualifier_list) . direct_declarator attribute_specifier_list [ SEMICOLON EQ COMMA ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) . direct_declarator [ LBRACE ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) . direct_declarator LPAREN identifier_list RPAREN open_context declaration_list [ LBRACE ]
list(pointer1) -> list(pointer1) STAR option(type_qualifier_list) . [ STAR ]
type_qualifier_list -> option(type_qualifier_list) . type_qualifier [ VOLATILE VAR_NAME TYPEDEF_NAME STAR RESTRICT PACKED LPAREN CONST ATTRIBUTE ALIGNAS ]
## Transitions:
-- On VOLATILE shift to state 3
-- On VAR_NAME shift to state 37
-- On TYPEDEF_NAME shift to state 38
-- On RESTRICT shift to state 7
-- On PACKED shift to state 9
-- On LPAREN shift to state 226
-- On CONST shift to state 154
-- On ATTRIBUTE shift to state 155
-- On ALIGNAS shift to state 175
-- On type_qualifier shift to state 186
-- On general_identifier shift to state 230
-- On direct_declarator shift to state 659
-- On attribute_specifier shift to state 187
## Reductions:
-- On STAR reduce production list(pointer1) -> list(pointer1) STAR option(type_qualifier_list)

State 659:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator
## LR(1) items:
declarator -> list(pointer1) STAR option(type_qualifier_list) direct_declarator . attribute_specifier_list [ SEMICOLON EQ COMMA ]
direct_declarator -> direct_declarator . LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK) [ SEMICOLON PACKED LPAREN LBRACK LBRACE EQ COMMA ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN [ SEMICOLON PACKED LPAREN LBRACK LBRACE EQ COMMA ATTRIBUTE ALIGNAS ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator . [ LBRACE ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator . LPAREN identifier_list RPAREN open_context declaration_list [ LBRACE ]
## Transitions:
-- On LPAREN shift to state 660
-- On LBRACK shift to state 276
-- On attribute_specifier_list shift to state 300
## Reductions:
-- On SEMICOLON reduce production attribute_specifier_list ->
-- On PACKED reduce production attribute_specifier_list ->
-- On LBRACE reduce production function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator
-- On EQ reduce production attribute_specifier_list ->
-- On COMMA reduce production attribute_specifier_list ->
-- On ATTRIBUTE reduce production attribute_specifier_list ->
-- On ALIGNAS reduce production attribute_specifier_list ->

State 660:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN . open_context option(parameter_type_list) save_contexts_stk close_context RPAREN [ SEMICOLON PACKED LPAREN LBRACK LBRACE EQ COMMA ATTRIBUTE ALIGNAS ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN . identifier_list RPAREN open_context declaration_list [ LBRACE ]
## Transitions:
-- On VAR_NAME shift to state 661
-- On open_context shift to state 233
-- On identifier_list shift to state 662
## Reductions:
-- On VOLATILE reduce production open_context ->
-- On VOID reduce production open_context ->
-- On UNSIGNED reduce production open_context ->
-- On UNION reduce production open_context ->
-- On UNDERSCORE_BOOL reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On STRUCT reduce production open_context ->
-- On STATIC reduce production open_context ->
-- On SIGNED reduce production open_context ->
-- On SHORT reduce production open_context ->
-- On RPAREN reduce production open_context ->
-- On RESTRICT reduce production open_context ->
-- On REGISTER reduce production open_context ->
-- On PACKED reduce production open_context ->
-- On LONG reduce production open_context ->
-- On INT reduce production open_context ->
-- On INLINE reduce production open_context ->
-- On FLOAT reduce production open_context ->
-- On EXTERN reduce production open_context ->
-- On ENUM reduce production open_context ->
-- On DOUBLE reduce production open_context ->
-- On CONST reduce production open_context ->
-- On CHAR reduce production open_context ->
-- On AUTO reduce production open_context ->
-- On ATTRIBUTE reduce production open_context ->
-- On ALIGNAS reduce production open_context ->

State 661:
## Known stack suffix:
## VAR_NAME
## LR(1) items:
identifier_list -> VAR_NAME . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production identifier_list -> VAR_NAME
-- On COMMA reduce production identifier_list -> VAR_NAME

State 662:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list
## LR(1) items:
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list . RPAREN open_context declaration_list [ LBRACE ]
identifier_list -> identifier_list . COMMA VAR_NAME [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 663
-- On COMMA shift to state 667
## Reductions:

State 663:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN
## LR(1) items:
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN . open_context declaration_list [ LBRACE ]
## Transitions:
-- On open_context shift to state 664
## Reductions:
-- On VOLATILE reduce production open_context ->
-- On VOID reduce production open_context ->
-- On UNSIGNED reduce production open_context ->
-- On UNION reduce production open_context ->
-- On UNDERSCORE_BOOL reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On TYPEDEF reduce production open_context ->
-- On STRUCT reduce production open_context ->
-- On STATIC reduce production open_context ->
-- On SIGNED reduce production open_context ->
-- On SHORT reduce production open_context ->
-- On RESTRICT reduce production open_context ->
-- On REGISTER reduce production open_context ->
-- On PACKED reduce production open_context ->
-- On LONG reduce production open_context ->
-- On LBRACE reduce production open_context ->
-- On INT reduce production open_context ->
-- On INLINE reduce production open_context ->
-- On FLOAT reduce production open_context ->
-- On EXTERN reduce production open_context ->
-- On ENUM reduce production open_context ->
-- On DOUBLE reduce production open_context ->
-- On CONST reduce production open_context ->
-- On CHAR reduce production open_context ->
-- On AUTO reduce production open_context ->
-- On ATTRIBUTE reduce production open_context ->
-- On ALIGNAS reduce production open_context ->

State 664:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN open_context
## LR(1) items:
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN open_context . declaration_list [ LBRACE ]
## Transitions:
-- On declaration_list shift to state 665
## Reductions:
-- On VOLATILE reduce production declaration_list ->
-- On VOID reduce production declaration_list ->
-- On UNSIGNED reduce production declaration_list ->
-- On UNION reduce production declaration_list ->
-- On UNDERSCORE_BOOL reduce production declaration_list ->
-- On TYPEDEF_NAME reduce production declaration_list ->
-- On TYPEDEF reduce production declaration_list ->
-- On STRUCT reduce production declaration_list ->
-- On STATIC reduce production declaration_list ->
-- On SIGNED reduce production declaration_list ->
-- On SHORT reduce production declaration_list ->
-- On RESTRICT reduce production declaration_list ->
-- On REGISTER reduce production declaration_list ->
-- On PACKED reduce production declaration_list ->
-- On LONG reduce production declaration_list ->
-- On LBRACE reduce production declaration_list ->
-- On INT reduce production declaration_list ->
-- On INLINE reduce production declaration_list ->
-- On FLOAT reduce production declaration_list ->
-- On EXTERN reduce production declaration_list ->
-- On ENUM reduce production declaration_list ->
-- On DOUBLE reduce production declaration_list ->
-- On CONST reduce production declaration_list ->
-- On CHAR reduce production declaration_list ->
-- On AUTO reduce production declaration_list ->
-- On ATTRIBUTE reduce production declaration_list ->
-- On ALIGNAS reduce production declaration_list ->

State 665:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN open_context declaration_list
## LR(1) items:
declaration_list -> declaration_list . declaration(block_item) [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG LBRACE INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN open_context declaration_list . [ LBRACE ]
## Transitions:
-- On TYPEDEF_NAME shift to state 418
-- On list(declaration_specifier_no_type) shift to state 421
-- On declaration_specifiers_typedef shift to state 514
-- On declaration_specifiers(declaration(block_item)) shift to state 523
-- On declaration(block_item) shift to state 666
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On LBRACE reduce production function_definition_begin -> declaration_specifiers(declaration(external_declaration)) list(pointer1) STAR option(type_qualifier_list) direct_declarator LPAREN identifier_list RPAREN open_context declaration_list
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 666:
## Known stack suffix:
## declaration_list declaration(block_item)
## LR(1) items:
declaration_list -> declaration_list declaration(block_item) . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG LBRACE INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production declaration_list -> declaration_list declaration(block_item)
-- On VOID reduce production declaration_list -> declaration_list declaration(block_item)
-- On UNSIGNED reduce production declaration_list -> declaration_list declaration(block_item)
-- On UNION reduce production declaration_list -> declaration_list declaration(block_item)
-- On UNDERSCORE_BOOL reduce production declaration_list -> declaration_list declaration(block_item)
-- On TYPEDEF_NAME reduce production declaration_list -> declaration_list declaration(block_item)
-- On TYPEDEF reduce production declaration_list -> declaration_list declaration(block_item)
-- On STRUCT reduce production declaration_list -> declaration_list declaration(block_item)
-- On STATIC reduce production declaration_list -> declaration_list declaration(block_item)
-- On SIGNED reduce production declaration_list -> declaration_list declaration(block_item)
-- On SHORT reduce production declaration_list -> declaration_list declaration(block_item)
-- On RESTRICT reduce production declaration_list -> declaration_list declaration(block_item)
-- On REGISTER reduce production declaration_list -> declaration_list declaration(block_item)
-- On PACKED reduce production declaration_list -> declaration_list declaration(block_item)
-- On LONG reduce production declaration_list -> declaration_list declaration(block_item)
-- On LBRACE reduce production declaration_list -> declaration_list declaration(block_item)
-- On INT reduce production declaration_list -> declaration_list declaration(block_item)
-- On INLINE reduce production declaration_list -> declaration_list declaration(block_item)
-- On FLOAT reduce production declaration_list -> declaration_list declaration(block_item)
-- On EXTERN reduce production declaration_list -> declaration_list declaration(block_item)
-- On ENUM reduce production declaration_list -> declaration_list declaration(block_item)
-- On DOUBLE reduce production declaration_list -> declaration_list declaration(block_item)
-- On CONST reduce production declaration_list -> declaration_list declaration(block_item)
-- On CHAR reduce production declaration_list -> declaration_list declaration(block_item)
-- On AUTO reduce production declaration_list -> declaration_list declaration(block_item)
-- On ATTRIBUTE reduce production declaration_list -> declaration_list declaration(block_item)
-- On ALIGNAS reduce production declaration_list -> declaration_list declaration(block_item)

State 667:
## Known stack suffix:
## identifier_list COMMA
## LR(1) items:
identifier_list -> identifier_list COMMA . VAR_NAME [ RPAREN COMMA ]
## Transitions:
-- On VAR_NAME shift to state 668
## Reductions:

State 668:
## Known stack suffix:
## identifier_list COMMA VAR_NAME
## LR(1) items:
identifier_list -> identifier_list COMMA VAR_NAME . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production identifier_list -> identifier_list COMMA VAR_NAME
-- On COMMA reduce production identifier_list -> identifier_list COMMA VAR_NAME

State 669:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) direct_declarator
## LR(1) items:
declarator -> direct_declarator . attribute_specifier_list [ SEMICOLON EQ COMMA ]
direct_declarator -> direct_declarator . LBRACK option(type_qualifier_list) optional(assignment_expression,RBRACK) [ SEMICOLON PACKED LPAREN LBRACK LBRACE EQ COMMA ATTRIBUTE ALIGNAS ]
direct_declarator -> direct_declarator . LPAREN open_context option(parameter_type_list) save_contexts_stk close_context RPAREN [ SEMICOLON PACKED LPAREN LBRACK LBRACE EQ COMMA ATTRIBUTE ALIGNAS ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) direct_declarator . [ LBRACE ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) direct_declarator . LPAREN identifier_list RPAREN open_context declaration_list [ LBRACE ]
## Transitions:
-- On LPAREN shift to state 670
-- On LBRACK shift to state 276
-- On attribute_specifier_list shift to state 281
## Reductions:
-- On SEMICOLON reduce production attribute_specifier_list ->
-- On PACKED reduce production attribute_specifier_list ->
-- On LBRACE reduce production function_definition_begin -> declaration_specifiers(declaration(external_declaration)) direct_declarator
-- On EQ reduce production attribute_specifier_list ->
-- On COMMA reduce production attribute_specifier_list ->
-- On ATTRIBUTE reduce production attribute_specifier_list ->
-- On ALIGNAS reduce production attribute_specifier_list ->

State 670:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN
## LR(1) items:
direct_declarator -> direct_declarator LPAREN . open_context option(parameter_type_list) save_contexts_stk close_context RPAREN [ SEMICOLON PACKED LPAREN LBRACK LBRACE EQ COMMA ATTRIBUTE ALIGNAS ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN . identifier_list RPAREN open_context declaration_list [ LBRACE ]
## Transitions:
-- On VAR_NAME shift to state 661
-- On open_context shift to state 233
-- On identifier_list shift to state 671
## Reductions:
-- On VOLATILE reduce production open_context ->
-- On VOID reduce production open_context ->
-- On UNSIGNED reduce production open_context ->
-- On UNION reduce production open_context ->
-- On UNDERSCORE_BOOL reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On STRUCT reduce production open_context ->
-- On STATIC reduce production open_context ->
-- On SIGNED reduce production open_context ->
-- On SHORT reduce production open_context ->
-- On RPAREN reduce production open_context ->
-- On RESTRICT reduce production open_context ->
-- On REGISTER reduce production open_context ->
-- On PACKED reduce production open_context ->
-- On LONG reduce production open_context ->
-- On INT reduce production open_context ->
-- On INLINE reduce production open_context ->
-- On FLOAT reduce production open_context ->
-- On EXTERN reduce production open_context ->
-- On ENUM reduce production open_context ->
-- On DOUBLE reduce production open_context ->
-- On CONST reduce production open_context ->
-- On CHAR reduce production open_context ->
-- On AUTO reduce production open_context ->
-- On ATTRIBUTE reduce production open_context ->
-- On ALIGNAS reduce production open_context ->

State 671:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN identifier_list
## LR(1) items:
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN identifier_list . RPAREN open_context declaration_list [ LBRACE ]
identifier_list -> identifier_list . COMMA VAR_NAME [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 672
-- On COMMA shift to state 667
## Reductions:

State 672:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN identifier_list RPAREN
## LR(1) items:
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN identifier_list RPAREN . open_context declaration_list [ LBRACE ]
## Transitions:
-- On open_context shift to state 673
## Reductions:
-- On VOLATILE reduce production open_context ->
-- On VOID reduce production open_context ->
-- On UNSIGNED reduce production open_context ->
-- On UNION reduce production open_context ->
-- On UNDERSCORE_BOOL reduce production open_context ->
-- On TYPEDEF_NAME reduce production open_context ->
-- On TYPEDEF reduce production open_context ->
-- On STRUCT reduce production open_context ->
-- On STATIC reduce production open_context ->
-- On SIGNED reduce production open_context ->
-- On SHORT reduce production open_context ->
-- On RESTRICT reduce production open_context ->
-- On REGISTER reduce production open_context ->
-- On PACKED reduce production open_context ->
-- On LONG reduce production open_context ->
-- On LBRACE reduce production open_context ->
-- On INT reduce production open_context ->
-- On INLINE reduce production open_context ->
-- On FLOAT reduce production open_context ->
-- On EXTERN reduce production open_context ->
-- On ENUM reduce production open_context ->
-- On DOUBLE reduce production open_context ->
-- On CONST reduce production open_context ->
-- On CHAR reduce production open_context ->
-- On AUTO reduce production open_context ->
-- On ATTRIBUTE reduce production open_context ->
-- On ALIGNAS reduce production open_context ->

State 673:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN identifier_list RPAREN open_context
## LR(1) items:
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN identifier_list RPAREN open_context . declaration_list [ LBRACE ]
## Transitions:
-- On declaration_list shift to state 674
## Reductions:
-- On VOLATILE reduce production declaration_list ->
-- On VOID reduce production declaration_list ->
-- On UNSIGNED reduce production declaration_list ->
-- On UNION reduce production declaration_list ->
-- On UNDERSCORE_BOOL reduce production declaration_list ->
-- On TYPEDEF_NAME reduce production declaration_list ->
-- On TYPEDEF reduce production declaration_list ->
-- On STRUCT reduce production declaration_list ->
-- On STATIC reduce production declaration_list ->
-- On SIGNED reduce production declaration_list ->
-- On SHORT reduce production declaration_list ->
-- On RESTRICT reduce production declaration_list ->
-- On REGISTER reduce production declaration_list ->
-- On PACKED reduce production declaration_list ->
-- On LONG reduce production declaration_list ->
-- On LBRACE reduce production declaration_list ->
-- On INT reduce production declaration_list ->
-- On INLINE reduce production declaration_list ->
-- On FLOAT reduce production declaration_list ->
-- On EXTERN reduce production declaration_list ->
-- On ENUM reduce production declaration_list ->
-- On DOUBLE reduce production declaration_list ->
-- On CONST reduce production declaration_list ->
-- On CHAR reduce production declaration_list ->
-- On AUTO reduce production declaration_list ->
-- On ATTRIBUTE reduce production declaration_list ->
-- On ALIGNAS reduce production declaration_list ->

State 674:
## Known stack suffix:
## declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN identifier_list RPAREN open_context declaration_list
## LR(1) items:
declaration_list -> declaration_list . declaration(block_item) [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT RESTRICT REGISTER PACKED LONG LBRACE INT INLINE FLOAT EXTERN ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
function_definition_begin -> declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN identifier_list RPAREN open_context declaration_list . [ LBRACE ]
## Transitions:
-- On TYPEDEF_NAME shift to state 418
-- On list(declaration_specifier_no_type) shift to state 421
-- On declaration_specifiers_typedef shift to state 514
-- On declaration_specifiers(declaration(block_item)) shift to state 523
-- On declaration(block_item) shift to state 666
## Reductions:
-- On VOLATILE reduce production list(declaration_specifier_no_type) ->
-- On VOID reduce production list(declaration_specifier_no_type) ->
-- On UNSIGNED reduce production list(declaration_specifier_no_type) ->
-- On UNION reduce production list(declaration_specifier_no_type) ->
-- On UNDERSCORE_BOOL reduce production list(declaration_specifier_no_type) ->
-- On TYPEDEF reduce production list(declaration_specifier_no_type) ->
-- On STRUCT reduce production list(declaration_specifier_no_type) ->
-- On STATIC reduce production list(declaration_specifier_no_type) ->
-- On SIGNED reduce production list(declaration_specifier_no_type) ->
-- On SHORT reduce production list(declaration_specifier_no_type) ->
-- On RESTRICT reduce production list(declaration_specifier_no_type) ->
-- On REGISTER reduce production list(declaration_specifier_no_type) ->
-- On PACKED reduce production list(declaration_specifier_no_type) ->
-- On LONG reduce production list(declaration_specifier_no_type) ->
-- On LBRACE reduce production function_definition_begin -> declaration_specifiers(declaration(external_declaration)) direct_declarator LPAREN identifier_list RPAREN open_context declaration_list
-- On INT reduce production list(declaration_specifier_no_type) ->
-- On INLINE reduce production list(declaration_specifier_no_type) ->
-- On FLOAT reduce production list(declaration_specifier_no_type) ->
-- On EXTERN reduce production list(declaration_specifier_no_type) ->
-- On ENUM reduce production list(declaration_specifier_no_type) ->
-- On DOUBLE reduce production list(declaration_specifier_no_type) ->
-- On CONST reduce production list(declaration_specifier_no_type) ->
-- On CHAR reduce production list(declaration_specifier_no_type) ->
-- On AUTO reduce production list(declaration_specifier_no_type) ->
-- On ATTRIBUTE reduce production list(declaration_specifier_no_type) ->
-- On ALIGNAS reduce production list(declaration_specifier_no_type) ->

State 675:
## Known stack suffix:
## declaration(external_declaration)
## LR(1) items:
external_declaration -> declaration(external_declaration) . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production external_declaration -> declaration(external_declaration)
-- On VOID reduce production external_declaration -> declaration(external_declaration)
-- On UNSIGNED reduce production external_declaration -> declaration(external_declaration)
-- On UNION reduce production external_declaration -> declaration(external_declaration)
-- On UNDERSCORE_BOOL reduce production external_declaration -> declaration(external_declaration)
-- On TYPEDEF_NAME reduce production external_declaration -> declaration(external_declaration)
-- On TYPEDEF reduce production external_declaration -> declaration(external_declaration)
-- On STRUCT reduce production external_declaration -> declaration(external_declaration)
-- On STATIC reduce production external_declaration -> declaration(external_declaration)
-- On SIGNED reduce production external_declaration -> declaration(external_declaration)
-- On SHORT reduce production external_declaration -> declaration(external_declaration)
-- On SEMICOLON reduce production external_declaration -> declaration(external_declaration)
-- On RESTRICT reduce production external_declaration -> declaration(external_declaration)
-- On REGISTER reduce production external_declaration -> declaration(external_declaration)
-- On PRAGMA reduce production external_declaration -> declaration(external_declaration)
-- On PACKED reduce production external_declaration -> declaration(external_declaration)
-- On LONG reduce production external_declaration -> declaration(external_declaration)
-- On INT reduce production external_declaration -> declaration(external_declaration)
-- On INLINE reduce production external_declaration -> declaration(external_declaration)
-- On FLOAT reduce production external_declaration -> declaration(external_declaration)
-- On EXTERN reduce production external_declaration -> declaration(external_declaration)
-- On EOF reduce production external_declaration -> declaration(external_declaration)
-- On ENUM reduce production external_declaration -> declaration(external_declaration)
-- On DOUBLE reduce production external_declaration -> declaration(external_declaration)
-- On CONST reduce production external_declaration -> declaration(external_declaration)
-- On CHAR reduce production external_declaration -> declaration(external_declaration)
-- On AUTO reduce production external_declaration -> declaration(external_declaration)
-- On ATTRIBUTE reduce production external_declaration -> declaration(external_declaration)
-- On ALIGNAS reduce production external_declaration -> declaration(external_declaration)

State 676:
## Known stack suffix:
## external_declaration
## LR(1) items:
translation_unit -> external_declaration . [ VOLATILE VOID UNSIGNED UNION UNDERSCORE_BOOL TYPEDEF_NAME TYPEDEF STRUCT STATIC SIGNED SHORT SEMICOLON RESTRICT REGISTER PRAGMA PACKED LONG INT INLINE FLOAT EXTERN EOF ENUM DOUBLE CONST CHAR AUTO ATTRIBUTE ALIGNAS ]
## Transitions:
## Reductions:
-- On VOLATILE reduce production translation_unit -> external_declaration
-- On VOID reduce production translation_unit -> external_declaration
-- On UNSIGNED reduce production translation_unit -> external_declaration
-- On UNION reduce production translation_unit -> external_declaration
-- On UNDERSCORE_BOOL reduce production translation_unit -> external_declaration
-- On TYPEDEF_NAME reduce production translation_unit -> external_declaration
-- On TYPEDEF reduce production translation_unit -> external_declaration
-- On STRUCT reduce production translation_unit -> external_declaration
-- On STATIC reduce production translation_unit -> external_declaration
-- On SIGNED reduce production translation_unit -> external_declaration
-- On SHORT reduce production translation_unit -> external_declaration
-- On SEMICOLON reduce production translation_unit -> external_declaration
-- On RESTRICT reduce production translation_unit -> external_declaration
-- On REGISTER reduce production translation_unit -> external_declaration
-- On PRAGMA reduce production translation_unit -> external_declaration
-- On PACKED reduce production translation_unit -> external_declaration
-- On LONG reduce production translation_unit -> external_declaration
-- On INT reduce production translation_unit -> external_declaration
-- On INLINE reduce production translation_unit -> external_declaration
-- On FLOAT reduce production translation_unit -> external_declaration
-- On EXTERN reduce production translation_unit -> external_declaration
-- On EOF reduce production translation_unit -> external_declaration
-- On ENUM reduce production translation_unit -> external_declaration
-- On DOUBLE reduce production translation_unit -> external_declaration
-- On CONST reduce production translation_unit -> external_declaration
-- On CHAR reduce production translation_unit -> external_declaration
-- On AUTO reduce production translation_unit -> external_declaration
-- On ATTRIBUTE reduce production translation_unit -> external_declaration
-- On ALIGNAS reduce production translation_unit -> external_declaration

