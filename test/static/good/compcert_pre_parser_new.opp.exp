%{
  open Pre_parser_aux

  let set_id_type (_,r,_) t =
    r := t

  let declare_varname (i,_,_) =
    !declare_varname i

  let declare_typename (i,_,_) =
    !declare_typename i

%}
%start translation_unit_file
%token <Cabs.cabsloc> ADD_ASSIGN
%token <Cabs.cabsloc> ALIGNAS
%token <Cabs.cabsloc> ALIGNOF
%token <Cabs.cabsloc> AND
%token <Cabs.cabsloc> ANDAND
%token <Cabs.cabsloc> AND_ASSIGN
%token <Cabs.cabsloc> ASM
%token <Cabs.cabsloc> ATTRIBUTE
%token <Cabs.cabsloc> AUTO
%token <Cabs.cabsloc> BANG
%token <Cabs.cabsloc> BAR
%token <Cabs.cabsloc> BARBAR
%token <Cabs.cabsloc> BREAK
%token <Cabs.cabsloc> BUILTIN_VA_ARG
%token <Cabs.cabsloc> CASE
%token <Cabs.cabsloc> CHAR
%token <Cabs.cabsloc> COLON
%token <Cabs.cabsloc> COMMA
%token <Cabs.cabsloc> CONST
%token <Cabs.constant * Cabs.cabsloc> CONSTANT
%token <Cabs.cabsloc> CONTINUE
%token <Cabs.cabsloc> DEC
%token <Cabs.cabsloc> DEFAULT
%token <Cabs.cabsloc> DIV_ASSIGN
%token <Cabs.cabsloc> DO
%token <Cabs.cabsloc> DOT
%token <Cabs.cabsloc> DOUBLE
%token <Cabs.cabsloc> ELLIPSIS
%token <Cabs.cabsloc> ELSE
%token <Cabs.cabsloc> ENUM
%token EOF
%token <Cabs.cabsloc> EQ
%token <Cabs.cabsloc> EQEQ
%token <Cabs.cabsloc> EXTERN
%token <Cabs.cabsloc> FLOAT
%token <Cabs.cabsloc> FOR
%token <Cabs.cabsloc> GEQ
%token <Cabs.cabsloc> GOTO
%token <Cabs.cabsloc> GT
%token <Cabs.cabsloc> HAT
%token <Cabs.cabsloc> IF
%token <Cabs.cabsloc> INC
%token <Cabs.cabsloc> INLINE
%token <Cabs.cabsloc> INT
%token <Cabs.cabsloc> LBRACE
%token <Cabs.cabsloc> LBRACK
%token <Cabs.cabsloc> LEFT
%token <Cabs.cabsloc> LEFT_ASSIGN
%token <Cabs.cabsloc> LEQ
%token <Cabs.cabsloc> LONG
%token <Cabs.cabsloc> LPAREN
%token <Cabs.cabsloc> LT
%token <Cabs.cabsloc> MINUS
%token <Cabs.cabsloc> MOD_ASSIGN
%token <Cabs.cabsloc> MUL_ASSIGN
%token <Cabs.cabsloc> NEQ
%token <Cabs.cabsloc> OR_ASSIGN
%token <Cabs.cabsloc> PACKED
%token <Cabs.cabsloc> PERCENT
%token <Cabs.cabsloc> PLUS
%token <string * Cabs.cabsloc> PRAGMA
%token <Cabs.cabsloc> PTR
%token <Cabs.cabsloc> QUESTION
%token <Cabs.cabsloc> RBRACE
%token <Cabs.cabsloc> RBRACK
%token <Cabs.cabsloc> REGISTER
%token <Cabs.cabsloc> RESTRICT
%token <Cabs.cabsloc> RETURN
%token <Cabs.cabsloc> RIGHT
%token <Cabs.cabsloc> RIGHT_ASSIGN
%token <Cabs.cabsloc> RPAREN
%token <Cabs.cabsloc> SEMICOLON
%token <Cabs.cabsloc> SHORT
%token <Cabs.cabsloc> SIGNED
%token <Cabs.cabsloc> SIZEOF
%token <Cabs.cabsloc> SLASH
%token <Cabs.cabsloc> STAR
%token <Cabs.cabsloc> STATIC
%token <bool * int64 list * Cabs.cabsloc> STRING_LITERAL
%token <Cabs.cabsloc> STRUCT
%token <Cabs.cabsloc> SUB_ASSIGN
%token <Cabs.cabsloc> SWITCH
%token <Cabs.cabsloc> TILDE
%token <Cabs.cabsloc> TYPEDEF
%token <string * Pre_parser_aux.identifier_type ref * Cabs.cabsloc> TYPEDEF_NAME
%token <Cabs.cabsloc> UNDERSCORE_BOOL
%token <Cabs.cabsloc> UNION
%token <Cabs.cabsloc> UNSIGNED
%token <string * Pre_parser_aux.identifier_type ref * Cabs.cabsloc> VAR_NAME
%token <Cabs.cabsloc> VOID
%token <Cabs.cabsloc> VOLATILE
%token <Cabs.cabsloc> WHILE
%token <Cabs.cabsloc> XOR_ASSIGN
%nonassoc TYPEDEF_NAME
%nonassoc highPrec
%type <unit> translation_unit_file
%on_error_reduce abstract_declarator_parameter_declaration_ abstract_declarator_type_name_ additive_expression and_expression asm_flags asm_operands assignment_expression attribute_specifier_list cast_expression conditional_expression declarator enum_specifier equality_expression exclusive_or_expression expression inclusive_or_expression init_declarator iteration_statement_nop_statement_finish_close_ logical_and_expression logical_or_expression multiplicative_expression option_abstract_declarator_type_name__ postfix_expression primary_expression relational_expression shift_expression specifier_qualifier_list_struct_declaration_ specifier_qualifier_list_type_name_ statement_finish_close struct_or_union_specifier unary_expression
%%

option_COMMA_:
  
    {let o =     ( None ) in
    ( o )}
| x = COMMA
    {let o =     ( Some x ) in
    ( o )}

option_abstract_declarator_parameter_declaration__:
  
    {let o =     ( None ) in
    ( o )}
| x = abstract_declarator_parameter_declaration_
    {let o =     ( Some x ) in
    ( o )}

option_abstract_declarator_type_name__:
  
    {let o =     ( None ) in
    ( o )}
| x = abstract_declarator_type_name_
    {let o =     ( Some x ) in
    ( o )}

option_argument_expression_list_:
  
    {let o =     ( None ) in
    ( o )}
| x = argument_expression_list
    {let o =     ( Some x ) in
    ( o )}

option_block_item_list_:
  
    {let o =     ( None ) in
    ( o )}
| x = block_item_list
    {let o =     ( Some x ) in
    ( o )}

option_declarator_:
  
    {let o =     ( None ) in
    ( o )}
| x = declarator
    {let o =     ( Some x ) in
    ( o )}

option_designation_:
  
    {let o =     ( None ) in
    ( o )}
| x = designation
    {let o =     ( Some x ) in
    ( o )}

option_designator_list_:
  
    {let o =     ( None ) in
    ( o )}
| x = designator_list
    {let o =     ( Some x ) in
    ( o )}

option_direct_abstract_declarator_:
  
    {let o =     ( None ) in
    ( o )}
| x = direct_abstract_declarator
    {let o =     ( Some x ) in
    ( o )}

option_expression_:
  
    {let o =     ( None ) in
    ( o )}
| x = expression
    {let o =     ( Some x ) in
    ( o )}

option_init_declarator_list_:
  
    {let o =     ( None ) in
    ( o )}
| x = init_declarator_list
    {let o =     ( Some x ) in
    ( o )}

option_other_identifier_:
  
    {let o =     ( None ) in
    ( o )}
| i = general_identifier
    {let o =
  let x =     ( set_id_type i OtherId ) in
      ( Some x )
in
    ( o )}

option_parameter_type_list_:
  
    {let o =     ( None ) in
    ( o )}
| x = parameter_type_list
    {let o =     ( Some x ) in
    ( o )}

option_struct_declarator_list_:
  
    {let o =     ( None ) in
    ( o )}
| x = struct_declarator_list
    {let o =     ( Some x ) in
    ( o )}

option_type_qualifier_list_:
  
    {let o =     ( None ) in
    ( o )}
| x = type_qualifier_list
    {let o =     ( Some x ) in
    ( o )}

option_typedef_declarator_list_:
  
    {let o =     ( None ) in
    ( o )}
| x = typedef_declarator_list
    {let o =     ( Some x ) in
    ( o )}

optional_assignment_expression_RBRACK_:
  _2 = RBRACK
    {let _1 =     ( None ) in
               ()}
| x = assignment_expression _2 = RBRACK
    {let _1 =     ( Some x ) in
               ()}

optional_expression_RPAREN_:
  _2 = RPAREN
    {let _1 =     ( None ) in
               ()}
| x = expression _2 = RPAREN
    {let _1 =     ( Some x ) in
               ()}

optional_expression_SEMICOLON_:
  _2 = SEMICOLON
    {let _1 =     ( None ) in
               ()}
| x = expression _2 = SEMICOLON
    {let _1 =     ( Some x ) in
               ()}

list_declaration_specifier_no_type_:
  
    {let xs =               () in
    ( xs )}
| _1 = list_declaration_specifier_no_type_ _2 = declaration_specifier_no_type
    {let xs =               () in
    ( xs )}

list_declaration_specifier_no_typedef_name_:
  
    {let xs =               () in
    ( xs )}
| _1 = list_declaration_specifier_no_typedef_name_ _2 = declaration_specifier_no_typedef_name
    {let xs =               () in
    ( xs )}

list_pointer1_:
  
    {let xs =               () in
    ( xs )}
| _1 = list_pointer1_ _1_inlined1 = STAR _2 = option_type_qualifier_list_
    {let xs =
  let _2 =     () in
                ()
in
    ( xs )}

list_specifier_qualifier_no_typedef_name_:
  
    {let xs =               () in
    ( xs )}
| _1 = list_specifier_qualifier_no_typedef_name_ _2 = specifier_qualifier_no_typedef_name
    {let xs =               () in
    ( xs )}

general_identifier:
  i = VAR_NAME
    {    ( i )}
| i = TYPEDEF_NAME
    {    ( i )}

string_literals_list:
  _1 = STRING_LITERAL
    {    ()}
| _1 = string_literals_list _2 = STRING_LITERAL
    {    ()}

open_context:
   %prec highPrec
    {                            ( !open_context () )}

close_context:
  
    {              ( !close_context () )}

in_context_option_parameter_type_list__:
  _1 = open_context x = option_parameter_type_list_ _3 = close_context
    {                                    ( x )}

save_contexts_stk:
  
    {              ( !save_contexts_stk () )}

declare_varname_enumerator_:
  i = enumerator
    {         ( declare_varname i; i )}

declare_varname_fst_declarator__:
  x = declarator
    {let i =     ( fst x ) in
         ( declare_varname i; i )}

declare_typename_fst_declarator__:
  x = declarator
    {let i =     ( fst x ) in
         ( declare_typename i; i )}

primary_expression:
  _1 = VAR_NAME
    {    ()}
| _1 = CONSTANT
    {    ()}
| _1 = string_literals_list
    {    ()}
| _1 = LPAREN _2 = expression _3 = RPAREN
    {    ()}

postfix_expression:
  _1 = primary_expression
    {    ()}
| _1 = postfix_expression _2 = LBRACK _3 = expression _4 = RBRACK
    {    ()}
| _1 = postfix_expression _2 = LPAREN _3 = option_argument_expression_list_ _4 = RPAREN
    {    ()}
| _1 = BUILTIN_VA_ARG _2 = LPAREN _3 = assignment_expression _4 = COMMA _5 = type_name _6 = RPAREN
    {    ()}
| _1 = postfix_expression _2 = DOT i = general_identifier
    {let _3 =     ( set_id_type i OtherId ) in
    ()}
| _1 = postfix_expression _2 = PTR i = general_identifier
    {let _3 =     ( set_id_type i OtherId ) in
    ()}
| _1 = postfix_expression _2 = INC
    {    ()}
| _1 = postfix_expression _2 = DEC
    {    ()}
| _1 = LPAREN _2 = type_name _3 = RPAREN _4 = LBRACE _5 = initializer_list _6 = option_COMMA_ _7 = RBRACE
    {    ()}

argument_expression_list:
  _1 = assignment_expression
    {    ()}
| _1 = argument_expression_list _2 = COMMA _3 = assignment_expression
    {    ()}

unary_expression:
  _1 = postfix_expression
    {    ()}
| _1 = INC _2 = unary_expression
    {    ()}
| _1 = DEC _2 = unary_expression
    {    ()}
| _1 = unary_operator _2 = cast_expression
    {    ()}
| _1 = SIZEOF _2 = unary_expression
    {    ()}
| _1 = SIZEOF _2 = LPAREN _3 = type_name _4 = RPAREN
    {    ()}
| _1 = ALIGNOF _2 = unary_expression
    {    ()}
| _1 = ALIGNOF _2 = LPAREN _3 = type_name _4 = RPAREN
    {    ()}

unary_operator:
  _1 = AND
    {    ()}
| _1 = STAR
    {    ()}
| _1 = PLUS
    {    ()}
| _1 = MINUS
    {    ()}
| _1 = TILDE
    {    ()}
| _1 = BANG
    {    ()}

cast_expression:
  _1 = unary_expression
    {    ()}
| _1 = LPAREN _2 = type_name _3 = RPAREN _4 = cast_expression
    {    ()}

multiplicative_operator:
  _1 = STAR
    {                         ()}
| _1 = SLASH
    {                         ()}
| _1 = PERCENT
    {                         ()}

multiplicative_expression:
  _1 = cast_expression
    {    ()}
| _1 = multiplicative_expression _2 = multiplicative_operator _3 = cast_expression
    {    ()}

additive_operator:
  _1 = PLUS
    {               ()}
| _1 = MINUS
    {               ()}

additive_expression:
  _1 = multiplicative_expression
    {    ()}
| _1 = additive_expression _2 = additive_operator _3 = multiplicative_expression
    {    ()}

shift_operator:
  _1 = LEFT
    {               ()}
| _1 = RIGHT
    {               ()}

shift_expression:
  _1 = additive_expression
    {    ()}
| _1 = shift_expression _2 = shift_operator _3 = additive_expression
    {    ()}

relational_operator:
  _1 = LT
    {                      ()}
| _1 = GT
    {                      ()}
| _1 = LEQ
    {                      ()}
| _1 = GEQ
    {                      ()}

relational_expression:
  _1 = shift_expression
    {    ()}
| _1 = relational_expression _2 = relational_operator _3 = shift_expression
    {    ()}

equality_operator:
  _1 = EQEQ
    {             ()}
| _1 = NEQ
    {             ()}

equality_expression:
  _1 = relational_expression
    {    ()}
| _1 = equality_expression _2 = equality_operator _3 = relational_expression
    {    ()}

and_expression:
  _1 = equality_expression
    {    ()}
| _1 = and_expression _2 = AND _3 = equality_expression
    {    ()}

exclusive_or_expression:
  _1 = and_expression
    {    ()}
| _1 = exclusive_or_expression _2 = HAT _3 = and_expression
    {    ()}

inclusive_or_expression:
  _1 = exclusive_or_expression
    {    ()}
| _1 = inclusive_or_expression _2 = BAR _3 = exclusive_or_expression
    {    ()}

logical_and_expression:
  _1 = inclusive_or_expression
    {    ()}
| _1 = logical_and_expression _2 = ANDAND _3 = inclusive_or_expression
    {    ()}

logical_or_expression:
  _1 = logical_and_expression
    {    ()}
| _1 = logical_or_expression _2 = BARBAR _3 = logical_and_expression
    {    ()}

conditional_expression:
  _1 = logical_or_expression
    {    ()}
| _1 = logical_or_expression _2 = QUESTION _3 = expression _4 = COLON _5 = conditional_expression
    {    ()}

assignment_expression:
  _1 = conditional_expression
    {    ()}
| _1 = unary_expression _2 = assignment_operator _3 = assignment_expression
    {    ()}

assignment_operator:
  _1 = EQ
    {    ()}
| _1 = MUL_ASSIGN
    {    ()}
| _1 = DIV_ASSIGN
    {    ()}
| _1 = MOD_ASSIGN
    {    ()}
| _1 = ADD_ASSIGN
    {    ()}
| _1 = SUB_ASSIGN
    {    ()}
| _1 = LEFT_ASSIGN
    {    ()}
| _1 = RIGHT_ASSIGN
    {    ()}
| _1 = AND_ASSIGN
    {    ()}
| _1 = XOR_ASSIGN
    {    ()}
| _1 = OR_ASSIGN
    {    ()}

expression:
  _1 = assignment_expression
    {    ()}
| _1 = expression _2 = COMMA _3 = assignment_expression
    {    ()}

declaration_block_item_:
  _1 = declaration_specifiers_declaration_block_item__ _2 = option_init_declarator_list_ _3 = SEMICOLON
    {    ()}
| _1 = declaration_specifiers_typedef _2 = option_typedef_declarator_list_ _3 = SEMICOLON
    {    ()}

declaration_external_declaration_:
  _1 = declaration_specifiers_declaration_external_declaration__ _2 = option_init_declarator_list_ _3 = SEMICOLON
    {    ()}
| _1 = declaration_specifiers_typedef _2 = option_typedef_declarator_list_ _3 = SEMICOLON
    {    ()}

init_declarator_list:
  _1 = init_declarator
    {    ()}
| _1 = init_declarator_list _2 = COMMA _3 = init_declarator
    {    ()}

init_declarator:
  _1 = declare_varname_fst_declarator__
    {    ()}
| _1 = declare_varname_fst_declarator__ _2 = EQ _3 = c_initializer
    {    ()}

typedef_declarator_list:
  _1 = typedef_declarator
    {    ()}
| _1 = typedef_declarator_list _2 = COMMA _3 = typedef_declarator
    {    ()}

typedef_declarator:
  _1 = declare_typename_fst_declarator__
    {    ()}

storage_class_specifier_no_typedef:
  _1 = EXTERN
    {    ()}
| _1 = STATIC
    {    ()}
| _1 = AUTO
    {    ()}
| _1 = REGISTER
    {    ()}

declaration_specifier_no_type:
  _1 = storage_class_specifier_no_typedef
    {    ()}
| _1 = type_qualifier
    {    ()}
| _1 = function_specifier
    {    ()}

declaration_specifier_no_typedef_name:
  _1 = storage_class_specifier_no_typedef
    {    ()}
| _1 = type_qualifier
    {    ()}
| _1 = function_specifier
    {    ()}
| _1 = type_specifier_no_typedef_name
    {    ()}

declaration_specifiers_declaration_block_item__:
  _2 = TYPEDEF_NAME _3 = list_declaration_specifier_no_type_
    {let _1 =               () in
    ()}
| _1 = list_declaration_specifier_no_type_ _2_inlined1 = declaration_specifier_no_type _2 = TYPEDEF_NAME _3 = list_declaration_specifier_no_type_
    {let _1 =               () in
    ()}
| _1 = list_declaration_specifier_no_type_ _2 = type_specifier_no_typedef_name _3 = list_declaration_specifier_no_typedef_name_
    {    ()}

declaration_specifiers_declaration_external_declaration__:
  _2 = TYPEDEF_NAME _3 = list_declaration_specifier_no_type_
    {let _1 =               () in
    ()}
| _1 = list_declaration_specifier_no_type_ _2_inlined1 = declaration_specifier_no_type _2 = TYPEDEF_NAME _3 = list_declaration_specifier_no_type_
    {let _1 =               () in
    ()}
| _1 = list_declaration_specifier_no_type_ _2 = type_specifier_no_typedef_name _3 = list_declaration_specifier_no_typedef_name_
    {    ()}

declaration_specifiers_parameter_declaration_:
  _2 = TYPEDEF_NAME _3 = list_declaration_specifier_no_type_
    {let _1 =               () in
    ()}
| _1 = list_declaration_specifier_no_type_ _2_inlined1 = declaration_specifier_no_type _2 = TYPEDEF_NAME _3 = list_declaration_specifier_no_type_
    {let _1 =               () in
    ()}
| _1 = list_declaration_specifier_no_type_ _2 = type_specifier_no_typedef_name _3 = list_declaration_specifier_no_typedef_name_
    {    ()}

declaration_specifiers_typedef:
  _1 = list_declaration_specifier_no_type_ _2 = TYPEDEF _3 = list_declaration_specifier_no_type_ _4 = TYPEDEF_NAME _5 = list_declaration_specifier_no_type_
    {    ()}
| _2 = TYPEDEF_NAME _3 = list_declaration_specifier_no_type_ _4 = TYPEDEF _5 = list_declaration_specifier_no_type_
    {let _1 =               () in
    ()}
| _1 = list_declaration_specifier_no_type_ _2_inlined1 = declaration_specifier_no_type _2 = TYPEDEF_NAME _3 = list_declaration_specifier_no_type_ _4 = TYPEDEF _5 = list_declaration_specifier_no_type_
    {let _1 =               () in
    ()}
| _1 = list_declaration_specifier_no_type_ _2 = TYPEDEF _3 = list_declaration_specifier_no_type_ _4 = type_specifier_no_typedef_name _5 = list_declaration_specifier_no_typedef_name_
    {    ()}
| _1 = list_declaration_specifier_no_type_ _2 = type_specifier_no_typedef_name _3 = list_declaration_specifier_no_typedef_name_ _4 = TYPEDEF _5 = list_declaration_specifier_no_typedef_name_
    {    ()}

type_specifier_no_typedef_name:
  _1 = VOID
    {    ()}
| _1 = CHAR
    {    ()}
| _1 = SHORT
    {    ()}
| _1 = INT
    {    ()}
| _1 = LONG
    {    ()}
| _1 = FLOAT
    {    ()}
| _1 = DOUBLE
    {    ()}
| _1 = SIGNED
    {    ()}
| _1 = UNSIGNED
    {    ()}
| _1 = UNDERSCORE_BOOL
    {    ()}
| _1 = struct_or_union_specifier
    {    ()}
| _1 = enum_specifier
    {    ()}

struct_or_union_specifier:
  _1 = struct_or_union _2 = attribute_specifier_list _3 = option_other_identifier_ _4 = LBRACE _5 = struct_declaration_list _6 = RBRACE
    {    ()}
| _1 = struct_or_union _2 = attribute_specifier_list i = general_identifier
    {let _3 =     ( set_id_type i OtherId ) in
    ()}

struct_or_union:
  _1 = STRUCT
    {    ()}
| _1 = UNION
    {    ()}

struct_declaration_list:
  
    {    ()}
| _1 = struct_declaration_list _2 = struct_declaration
    {    ()}

struct_declaration:
  _1 = specifier_qualifier_list_struct_declaration_ _2 = option_struct_declarator_list_ _3 = SEMICOLON
    {    ()}

specifier_qualifier_list_struct_declaration_:
  _1 = option_type_qualifier_list_ _2 = TYPEDEF_NAME _3 = option_type_qualifier_list_
    {    ()}
| _1 = option_type_qualifier_list_ _2 = type_specifier_no_typedef_name _3 = list_specifier_qualifier_no_typedef_name_
    {    ()}

specifier_qualifier_list_type_name_:
  _1 = option_type_qualifier_list_ _2 = TYPEDEF_NAME _3 = option_type_qualifier_list_
    {    ()}
| _1 = option_type_qualifier_list_ _2 = type_specifier_no_typedef_name _3 = list_specifier_qualifier_no_typedef_name_
    {    ()}

specifier_qualifier_no_typedef_name:
  _1 = type_specifier_no_typedef_name
    {    ()}
| _1 = type_qualifier
    {    ()}

struct_declarator_list:
  _1 = struct_declarator
    {    ()}
| _1 = struct_declarator_list _2 = COMMA _3 = struct_declarator
    {    ()}

struct_declarator:
  _1 = declarator
    {    ()}
| _1 = option_declarator_ _2 = COLON _1_inlined1 = conditional_expression
    {let _3 =     () in
    ()}

enum_specifier:
  _1 = ENUM _2 = attribute_specifier_list _3 = option_other_identifier_ _4 = LBRACE _5 = enumerator_list _6 = option_COMMA_ _7 = RBRACE
    {    ()}
| _1 = ENUM _2 = attribute_specifier_list i = general_identifier
    {let _3 =     ( set_id_type i OtherId ) in
    ()}

enumerator_list:
  _1 = declare_varname_enumerator_
    {    ()}
| _1 = enumerator_list _2 = COMMA _3 = declare_varname_enumerator_
    {    ()}

enumerator:
  i = enumeration_constant
    {    ( i )}
| i = enumeration_constant _2 = EQ _1 = conditional_expression
    {let _3 =     () in
    ( i )}

enumeration_constant:
  i = general_identifier
    {    ( set_id_type i VarId; i )}

type_qualifier:
  _1 = CONST
    {    ()}
| _1 = RESTRICT
    {    ()}
| _1 = VOLATILE
    {    ()}
| _1 = attribute_specifier
    {    ()}

attribute_specifier_list:
  
    {    ()}
| _1 = attribute_specifier_list _2 = attribute_specifier
    {    ()}

attribute_specifier:
  _1 = ATTRIBUTE _2 = LPAREN _3 = LPAREN _4 = gcc_attribute_list _5 = RPAREN _6 = RPAREN
    {    ()}
| _1 = PACKED _2 = LPAREN _3 = argument_expression_list _4 = RPAREN
    {    ()}
| _1 = ALIGNAS _2 = LPAREN _3 = argument_expression_list _4 = RPAREN
    {    ()}
| _1 = ALIGNAS _2 = LPAREN _3 = type_name _4 = RPAREN
    {    ()}

gcc_attribute_list:
  _1 = gcc_attribute
    {    ()}
| _1 = gcc_attribute_list _2 = COMMA _3 = gcc_attribute
    {    ()}

gcc_attribute:
  
    {    ()}
| _1 = gcc_attribute_word
    {    ()}
| _1 = gcc_attribute_word _2 = LPAREN _3 = option_argument_expression_list_ _4 = RPAREN
    {    ()}
| _1 = gcc_attribute_word _2 = LPAREN i = TYPEDEF_NAME _4 = COMMA _5 = argument_expression_list _6 = RPAREN
    {    ( set_id_type i VarId )}

gcc_attribute_word:
  i = general_identifier
    {let _1 =     ( set_id_type i OtherId ) in
    ()}
| _1 = CONST
    {    ()}
| _1 = PACKED
    {    ()}

function_specifier:
  _1 = INLINE
    {    ()}

declarator:
  x = direct_declarator _3 = attribute_specifier_list
    {let _1 =               () in
    ( x )}
| _1 = list_pointer1_ _1_inlined1 = STAR _2 = option_type_qualifier_list_ x = direct_declarator _3 = attribute_specifier_list
    {let _1 =
  let _2 =     () in
                ()
in
    ( x )}

direct_declarator:
  i = general_identifier
    {    ( set_id_type i VarId; (i, None) )}
| _1 = LPAREN x = declarator _3 = RPAREN
    {    ( x )}
| x = direct_declarator _2 = LBRACK _3 = option_type_qualifier_list_ _4 = optional_assignment_expression_RBRACK_
    {    ( x )}
| x = direct_declarator _2 = LPAREN _3 = open_context _4 = option_parameter_type_list_ restore_fun = save_contexts_stk _6 = close_context _7 = RPAREN
    {    ( match snd x with
      | None -> (fst x, Some restore_fun)
      | Some _ -> x )}

type_qualifier_list:
  _1 = option_type_qualifier_list_ _2 = type_qualifier
    {    ()}

parameter_type_list:
  l = parameter_list
    {    ( l )}
| l = parameter_list _2 = COMMA _3 = ELLIPSIS
    {    ( l )}

parameter_list:
  i = parameter_declaration
    {    ( [i] )}
| l = parameter_list _2 = COMMA i = parameter_declaration
    {    ( i::l )}

parameter_declaration:
  _1 = declaration_specifiers_parameter_declaration_ id = declare_varname_fst_declarator__
    {    ( Some id )}
| _1 = declaration_specifiers_parameter_declaration_ _2 = option_abstract_declarator_parameter_declaration__
    {    ( None )}

type_name:
  _1 = specifier_qualifier_list_type_name_ _2 = option_abstract_declarator_type_name__
    {    ()}

abstract_declarator_parameter_declaration_:
  _1 = list_pointer1_ _1_inlined1 = STAR _2 = option_type_qualifier_list_
    {let _1 =
  let _2 =     () in
      ()
in
    ()}
| _2 = direct_abstract_declarator
    {let _1 =               () in
    ()}
| _1 = list_pointer1_ _1_inlined1 = STAR _2_inlined1 = option_type_qualifier_list_ _2 = direct_abstract_declarator
    {let _1 =
  let _2 =     () in
                ()
in
    ()}

abstract_declarator_type_name_:
  _1 = list_pointer1_ _1_inlined1 = STAR _2 = option_type_qualifier_list_
    {let _1 =
  let _2 =     () in
      ()
in
    ()}
| _2 = direct_abstract_declarator
    {let _1 =               () in
    ()}
| _1 = list_pointer1_ _1_inlined1 = STAR _2_inlined1 = option_type_qualifier_list_ _2 = direct_abstract_declarator
    {let _1 =
  let _2 =     () in
                ()
in
    ()}

direct_abstract_declarator:
  _1 = LPAREN _2 = abstract_declarator_type_name_ _3 = RPAREN
    {    ()}
| _1 = option_direct_abstract_declarator_ _2 = LBRACK _3 = option_type_qualifier_list_ _4 = optional_assignment_expression_RBRACK_
    {    ()}
| _2 = LPAREN _3 = in_context_option_parameter_type_list__ _4 = RPAREN
    {let _1 =     ( None ) in
    ()}
| x = direct_abstract_declarator _2 = LPAREN _3 = in_context_option_parameter_type_list__ _4 = RPAREN
    {let _1 =     ( Some x ) in
    ()}

c_initializer:
  _1 = assignment_expression
    {    ()}
| _1 = LBRACE _2 = initializer_list _3 = option_COMMA_ _4 = RBRACE
    {    ()}

initializer_list:
  _1 = option_designation_ _2 = c_initializer
    {    ()}
| _1 = initializer_list _2 = COMMA _3 = option_designation_ _4 = c_initializer
    {    ()}

designation:
  _1 = designator_list _2 = EQ
    {    ()}

designator_list:
  _1 = option_designator_list_ _2 = designator
    {    ()}

designator:
  _1 = LBRACK _1_inlined1 = conditional_expression _3 = RBRACK
    {let _2 =     () in
    ()}
| _1 = DOT i = general_identifier
    {let _2 =     ( set_id_type i OtherId ) in
    ()}

statement_finish_close:
  _1 = labeled_statement_statement_finish_close_
    {    ()}
| _1 = compound_statement_nop_
    {    ()}
| _1 = expression_statement_close_context_
    {    ()}
| _1 = selection_statement_finish_nop_
    {    ()}
| _1 = iteration_statement_nop_statement_finish_close_
    {    ()}
| _1 = jump_statement_close_context_
    {    ()}
| _1 = asm_statement_close_context_
    {    ()}

statement_finish_noclose:
  _1 = labeled_statement_statement_finish_noclose_
    {    ()}
| _1 = compound_statement_open_context_
    {    ()}
| _1 = expression_statement_nop_
    {    ()}
| _1 = selection_statement_finish_open_context_
    {    ()}
| _1 = iteration_statement_open_context_statement_finish_close_
    {    ()}
| _1 = jump_statement_nop_
    {    ()}
| _1 = asm_statement_nop_
    {    ()}

statement_intern_close:
  _1 = labeled_statement_statement_intern_close_
    {    ()}
| _1 = compound_statement_nop_
    {    ()}
| _1 = expression_statement_close_context_
    {    ()}
| _1 = selection_statement_intern_close
    {    ()}
| _1 = iteration_statement_nop_statement_intern_close_
    {    ()}
| _1 = jump_statement_close_context_
    {    ()}
| _1 = asm_statement_close_context_
    {    ()}

labeled_statement_statement_finish_close_:
  i = general_identifier _2 = COLON _3 = statement_finish_close
    {let _1 =     ( set_id_type i OtherId ) in
    ()}
| _1 = CASE _1_inlined1 = conditional_expression _3 = COLON _4 = statement_finish_close
    {let _2 =     () in
    ()}
| _1 = DEFAULT _2 = COLON _3 = statement_finish_close
    {    ()}

labeled_statement_statement_finish_noclose_:
  i = general_identifier _2 = COLON _3 = statement_finish_noclose
    {let _1 =     ( set_id_type i OtherId ) in
    ()}
| _1 = CASE _1_inlined1 = conditional_expression _3 = COLON _4 = statement_finish_noclose
    {let _2 =     () in
    ()}
| _1 = DEFAULT _2 = COLON _3 = statement_finish_noclose
    {    ()}

labeled_statement_statement_intern_close_:
  i = general_identifier _2 = COLON _3 = statement_intern_close
    {let _1 =     ( set_id_type i OtherId ) in
    ()}
| _1 = CASE _1_inlined1 = conditional_expression _3 = COLON _4 = statement_intern_close
    {let _2 =     () in
    ()}
| _1 = DEFAULT _2 = COLON _3 = statement_intern_close
    {    ()}

compound_statement_nop_:
  _1 = LBRACE _3 = option_block_item_list_ _4 = close_context _5 = RBRACE
    {let _2 =                          () in
    ()}

compound_statement_open_context_:
  _1 = LBRACE _2 = open_context _3 = option_block_item_list_ _4 = close_context _5 = RBRACE
    {    ()}

block_item_list:
  _1 = option_block_item_list_ _2 = block_item
    {    ()}

block_item:
  _1 = declaration_block_item_
    {    ()}
| _1 = statement_finish_noclose
    {    ()}
| _1 = PRAGMA
    {    ()}

expression_statement_close_context_:
  _1 = option_expression_ _2 = close_context _3 = SEMICOLON
    {    ()}

expression_statement_nop_:
  _1 = option_expression_ _3 = SEMICOLON
    {let _2 =                          () in
    ()}

jump_statement_close_context_:
  _1 = GOTO i = general_identifier _3 = close_context _4 = SEMICOLON
    {let _2 =     ( set_id_type i OtherId ) in
    ()}
| _1 = CONTINUE _2 = close_context _3 = SEMICOLON
    {    ()}
| _1 = BREAK _2 = close_context _3 = SEMICOLON
    {    ()}
| _1 = RETURN _2 = option_expression_ _3 = close_context _4 = SEMICOLON
    {    ()}

jump_statement_nop_:
  _1 = GOTO i = general_identifier _4 = SEMICOLON
    {let _3 =                          () in
let _2 =     ( set_id_type i OtherId ) in
    ()}
| _1 = CONTINUE _3 = SEMICOLON
    {let _2 =                          () in
    ()}
| _1 = BREAK _3 = SEMICOLON
    {let _2 =                          () in
    ()}
| _1 = RETURN _2 = option_expression_ _4 = SEMICOLON
    {let _3 =                          () in
    ()}

asm_statement_close_context_:
  _1 = ASM _2 = asm_attributes _3 = LPAREN _4 = string_literals_list _5 = asm_arguments _6 = RPAREN _7 = close_context _8 = SEMICOLON
    {    ()}

asm_statement_nop_:
  _1 = ASM _2 = asm_attributes _3 = LPAREN _4 = string_literals_list _5 = asm_arguments _6 = RPAREN _8 = SEMICOLON
    {let _7 =                          () in
    ()}

if_else_statement_begin_nop_:
  _1 = IF _3 = LPAREN _4 = expression _5 = RPAREN restore_fun = save_contexts_stk _7 = statement_intern_close
    {let _2 =                          () in
    ( restore_fun () )}

if_else_statement_begin_open_context_:
  _1 = IF _2 = open_context _3 = LPAREN _4 = expression _5 = RPAREN restore_fun = save_contexts_stk _7 = statement_intern_close
    {    ( restore_fun () )}

selection_statement_finish_nop_:
  _1 = IF _3 = LPAREN _4 = expression _5 = RPAREN _6 = save_contexts_stk _7 = statement_finish_close
    {let _2 =                          () in
    ()}
| _1 = if_else_statement_begin_nop_ _2 = ELSE _3 = statement_finish_close
    {    ()}
| _1 = SWITCH _3 = LPAREN _4 = expression _5 = RPAREN _6 = statement_finish_close
    {let _2 =                          () in
    ()}

selection_statement_finish_open_context_:
  _1 = IF _2 = open_context _3 = LPAREN _4 = expression _5 = RPAREN _6 = save_contexts_stk _7 = statement_finish_close
    {    ()}
| _1 = if_else_statement_begin_open_context_ _2 = ELSE _3 = statement_finish_close
    {    ()}
| _1 = SWITCH _2 = open_context _3 = LPAREN _4 = expression _5 = RPAREN _6 = statement_finish_close
    {    ()}

selection_statement_intern_close:
  _1 = if_else_statement_begin_nop_ _2 = ELSE _3 = statement_intern_close
    {    ()}
| _1 = SWITCH _2 = LPAREN _3 = expression _4 = RPAREN _5 = statement_intern_close
    {    ()}

iteration_statement_nop_statement_finish_close_:
  _1 = WHILE _3 = LPAREN _4 = expression _5 = RPAREN _6 = statement_finish_close
    {let _2 =                          () in
    ()}
| _1 = DO _2 = open_context _3 = statement_finish_close _4 = WHILE _6 = LPAREN _7 = expression _8 = RPAREN _9 = close_context _10 = SEMICOLON
    {let _5 =                          () in
    ()}
| _1 = FOR _3 = LPAREN _4 = for_statement_header _5 = optional_expression_SEMICOLON_ _6 = optional_expression_RPAREN_ _7 = statement_finish_close
    {let _2 =                          () in
    ()}

iteration_statement_nop_statement_intern_close_:
  _1 = WHILE _3 = LPAREN _4 = expression _5 = RPAREN _6 = statement_intern_close
    {let _2 =                          () in
    ()}
| _1 = DO _2 = open_context _3 = statement_finish_close _4 = WHILE _6 = LPAREN _7 = expression _8 = RPAREN _9 = close_context _10 = SEMICOLON
    {let _5 =                          () in
    ()}
| _1 = FOR _3 = LPAREN _4 = for_statement_header _5 = optional_expression_SEMICOLON_ _6 = optional_expression_RPAREN_ _7 = statement_intern_close
    {let _2 =                          () in
    ()}

iteration_statement_open_context_statement_finish_close_:
  _1 = WHILE _2 = open_context _3 = LPAREN _4 = expression _5 = RPAREN _6 = statement_finish_close
    {    ()}
| _1 = DO _2 = open_context _3 = statement_finish_close _4 = WHILE _5 = open_context _6 = LPAREN _7 = expression _8 = RPAREN _9 = close_context _10 = SEMICOLON
    {    ()}
| _1 = FOR _2 = open_context _3 = LPAREN _4 = for_statement_header _5 = optional_expression_SEMICOLON_ _6 = optional_expression_RPAREN_ _7 = statement_finish_close
    {    ()}

for_statement_header:
  _1 = optional_expression_SEMICOLON_
    {    ()}
| _1 = declaration_block_item_
    {    ()}

asm_attributes:
  
    {    ()}
| _1 = CONST _2 = asm_attributes
    {    ()}
| _1 = VOLATILE _2 = asm_attributes
    {    ()}

asm_arguments:
  
    {    ()}
| _1 = COLON _2 = asm_operands
    {    ()}
| _1 = COLON _2 = asm_operands _3 = COLON _4 = asm_operands
    {    ()}
| _1 = COLON _2 = asm_operands _3 = COLON _4 = asm_operands _5 = COLON _6 = asm_flags
    {    ()}

asm_operands:
  
    {    ()}
| _1 = asm_operands_ne
    {    ()}

asm_operands_ne:
  _1 = asm_operands_ne _2 = COMMA _3 = asm_operand
    {    ()}
| _1 = asm_operand
    {    ()}

asm_operand:
  _1 = asm_op_name _2 = string_literals_list _3 = LPAREN _4 = expression _5 = RPAREN
    {    ()}

asm_op_name:
  
    {    ()}
| _1 = LBRACK i = general_identifier _3 = RBRACK
    {let _2 =     ( set_id_type i OtherId ) in
    ()}

asm_flags:
  _1 = string_literals_list
    {    ()}
| _1 = asm_flags _2 = COMMA _3 = string_literals_list
    {    ()}

translation_unit_file:
  _1 = translation_unit _2 = EOF
    {    ()}
| _1 = EOF
    {    ()}

translation_unit:
  _1 = external_declaration
    {    ()}
| _1 = translation_unit _2 = external_declaration
    {    ()}
| _1 = translation_unit _2 = SEMICOLON
    {    ()}
| _1 = SEMICOLON
    {    ()}

external_declaration:
  _1 = function_definition
    {    ()}
| _1 = declaration_external_declaration_
    {    ()}
| _1 = PRAGMA
    {    ()}

function_definition_begin:
  _1 = declaration_specifiers_declaration_external_declaration__ x = direct_declarator
    {let _2 =               () in
    ( match x with
      | (_, None) -> !open_context()
                     (* this case does not make sense, but we let it pass anyway;
                        this error will be caught later on by a type check *)
      | (i, Some restore_fun) -> restore_fun ()
    )}
| _1 = declaration_specifiers_declaration_external_declaration__ _1_inlined1 = list_pointer1_ _1_inlined2 = STAR _2 = option_type_qualifier_list_ x = direct_declarator
    {let _2 =
  let _2 =     () in
                ()
in
    ( match x with
      | (_, None) -> !open_context()
                     (* this case does not make sense, but we let it pass anyway;
                        this error will be caught later on by a type check *)
      | (i, Some restore_fun) -> restore_fun ()
    )}
| _1 = declaration_specifiers_declaration_external_declaration__ x = direct_declarator _4 = LPAREN params = identifier_list _6 = RPAREN _7 = open_context _8 = declaration_list
    {let _2 =               () in
    ( match x with
      | (i, Some _) -> declare_varname i
                       (* this case does not make sense; the syntax of K&R
                          declarators is broken anyway, Jacques-Henri should
                          propose a fix soon *)
      | (i, None) ->
	declare_varname i;
	List.iter declare_varname params
    )}
| _1 = declaration_specifiers_declaration_external_declaration__ _1_inlined1 = list_pointer1_ _1_inlined2 = STAR _2 = option_type_qualifier_list_ x = direct_declarator _4 = LPAREN params = identifier_list _6 = RPAREN _7 = open_context _8 = declaration_list
    {let _2 =
  let _2 =     () in
                ()
in
    ( match x with
      | (i, Some _) -> declare_varname i
                       (* this case does not make sense; the syntax of K&R
                          declarators is broken anyway, Jacques-Henri should
                          propose a fix soon *)
      | (i, None) ->
	declare_varname i;
	List.iter declare_varname params
    )}

identifier_list:
  id = VAR_NAME
    {    ( [id] )}
| idl = identifier_list _2 = COMMA id = VAR_NAME
    {    ( id :: idl )}

declaration_list:
  
    {    ()}
| _1 = declaration_list _2 = declaration_block_item_
    {    ()}

function_definition:
  _1 = function_definition_begin _2 = LBRACE _3 = option_block_item_list_ _4 = close_context _5 = RBRACE
    {    ()}

%%
