File "compsyn.mly", line 281, characters 7-16:
Warning: the token CAPITAL_E is unused.
File "compsyn.mly", line 203, characters 41-44:
Warning: the token EOL is unused.
File "compsyn.mly", line 282, characters 7-15:
Warning: the token LITTLE_E is unused.
Grammar has 156 nonterminal symbols, among which 1 start symbols.
Grammar has 116 terminal symbols.
Grammar has 356 productions.
nullable(timing_check_limit) = false
nullable(timing_check_event_control_opt) = true
nullable(timing_check_event_control) = false
nullable(timing_check_event) = false
nullable(timing_check_condition) = false
nullable(time_declaration) = false
nullable(tf_declaration_optlist) = true
nullable(tf_declaration_list) = false
nullable(tf_declaration) = false
nullable(terminal) = false
nullable(task) = false
nullable(system_timing_check) = false
nullable(statement_or_null) = false
nullable(statement_optlist) = true
nullable(statement) = false
nullable(specparam_declaration) = false
nullable(specify_terminal_descriptor) = false
nullable(specify_item_optlist) = true
nullable(specify_item) = false
nullable(specify_block) = false
nullable(source_text) = false
nullable(sdpd) = false
nullable(register_variable) = false
nullable(reg_declaration) = false
nullable(real_declaration) = false
nullable(range_or_type_opt) = true
nullable(range_or_type) = false
nullable(range_opt) = true
nullable(range) = false
nullable(primary) = false
nullable(port_reference) = false
nullable(port_expression_opt) = true
nullable(port_expression) = false
nullable(port) = true
nullable(polarity_operator_opt) = true
nullable(polarity_operator) = false
nullable(path_description) = false
nullable(path_delay_value) = false
nullable(path_delay_expression) = false
nullable(path_declaration) = false
nullable(parameter_value_assignment_opt) = true
nullable(parameter_value_assignment) = false
nullable(parameter_override) = false
nullable(parameter_declaration) = false
nullable(param_assignment) = false
nullable(output_declaration) = false
nullable(or_event_expression_optlist) = true
nullable(number) = false
nullable(notify_register) = false
nullable(non_blocking_assignment) = false
nullable(net_declaration) = false
nullable(named_port_connection) = false
nullable(name_of_system_task) = false
nullable(name_of_system_function) = false
nullable(name_of_gate_instance_opt) = true
nullable(name_of_event) = false
nullable(multiple_concatenation) = false
nullable(module_port_connection) = true
nullable(module_item_optlist) = true
nullable(module_item) = false
nullable(module_instantiation) = false
nullable(module_instance) = false
nullable(module_def) = false
nullable(mintypmax_expression) = false
nullable(lvalue) = false
nullable(list_of_variables) = false
nullable(list_of_register_variables) = false
nullable(list_of_ports_opt) = true
nullable(list_of_ports) = false
nullable(list_of_path_input_outputs) = false
nullable(list_of_param_assignments) = false
nullable(list_of_module_connections) = true
nullable(list_of_assignments) = false
nullable(level_sensitive_path_declaration) = false
nullable(integer_declaration) = false
nullable(input_declaration) = false
nullable(inout_declaration) = false
nullable(initial_statement) = false
nullable(identifier) = false
nullable(gate_instance) = false
nullable(gate_declaration) = false
nullable(function_avoid_amb) = false
nullable(expression) = false
nullable(expandrange_opt) = true
nullable(expandrange) = false
nullable(event_expression_list) = false
nullable(event_expression) = false
nullable(event_declaration) = false
nullable(event_control) = false
nullable(edge_sensitive_path_declaration) = false
nullable(edge_identifier_opt) = true
nullable(edge_identifier) = false
nullable(edge_descriptor) = true
nullable(edge_control_specifier) = false
nullable(drive_strength_opt) = true
nullable(drive_strength) = false
nullable(dot_IDENTIFIER_optlist) = true
nullable(dot_IDENTIFIER) = false
nullable(description_list) = false
nullable(description) = false
nullable(delay_opt) = true
nullable(delay_control) = false
nullable(delay) = false
nullable(data_source_expression) = false
nullable(controlled_timing_check_event) = false
nullable(continuous_assign) = false
nullable(constant_expression) = false
nullable(conditional_port_expression) = false
nullable(concatenation) = false
nullable(comma_terminal_optlist) = true
nullable(comma_terminal) = false
nullable(comma_specify_terminal_descriptor_optlist) = true
nullable(comma_specify_terminal_descriptor) = false
nullable(comma_register_variable_optlist) = true
nullable(comma_register_variable) = false
nullable(comma_port_reference_optlist) = true
nullable(comma_port_reference) = false
nullable(comma_port_optlist) = true
nullable(comma_port) = false
nullable(comma_param_assignment_optlist) = true
nullable(comma_param_assignment) = false
nullable(comma_notify_register_opt) = true
nullable(comma_notify_register) = false
nullable(comma_named_port_connection_optlist) = true
nullable(comma_named_port_connection) = false
nullable(comma_name_of_event_optlist) = true
nullable(comma_name_of_event) = false
nullable(comma_module_port_connection_optlist) = true
nullable(comma_module_port_connection) = false
nullable(comma_module_instance_optlist) = true
nullable(comma_module_instance) = false
nullable(comma_gate_instance_optlist) = true
nullable(comma_gate_instance) = false
nullable(comma_expression_optlist) = true
nullable(comma_expression) = false
nullable(comma_event_expression_optlist) = true
nullable(comma_edge_descriptor_optlist) = true
nullable(comma_edge_descriptor) = false
nullable(comma_constant_expression_comma_notify_register_opt) = true
nullable(comma_constant_expression_comma_notify_register) = false
nullable(comma_assignment_optlist) = true
nullable(comma_assignment) = false
nullable(comma_IDENTIFIER_optlist) = true
nullable(comma_IDENTIFIER) = false
nullable(charge_strength) = false
nullable(case_item_list) = false
nullable(case_item) = false
nullable(blocking_assignment) = false
nullable(block_declaration_optlist) = true
nullable(block_declaration) = false
nullable(assignment) = false
nullable(and3_timing_check_condition_opt) = true
nullable(and3_timing_check_condition) = false
nullable(always_statement) = false
nullable(SCALAR_EVENT_EXPRESSION) = false
nullable(KEY_IF_LPAREN_expression_RPAREN_opt) = true
first(timing_check_limit) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(timing_check_event_control_opt) = KEY_POSEDGE KEY_NEGEDGE KEY_EDGE
first(timing_check_event_control) = KEY_POSEDGE KEY_NEGEDGE KEY_EDGE
first(timing_check_event) = KEY_POSEDGE KEY_NEGEDGE KEY_EDGE IDENTIFIER
first(timing_check_condition) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(time_declaration) = KEY_TIME
first(tf_declaration_optlist) = KEY_TIME KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_EVENT
first(tf_declaration_list) = KEY_TIME KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_EVENT
first(tf_declaration) = KEY_TIME KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_EVENT
first(terminal) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(task) = KEY_TASK
first(system_timing_check) = DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
first(statement_or_null) = SEMICOLON LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER DOLLOR_SYSTEM_IDENTIFIER AT
first(statement_optlist) = LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER DOLLOR_SYSTEM_IDENTIFIER AT
first(statement) = LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER DOLLOR_SYSTEM_IDENTIFIER AT
first(specparam_declaration) = KEY_SPECPARAM
first(specify_terminal_descriptor) = IDENTIFIER
first(specify_item_optlist) = LPAREN KEY_SPECPARAM KEY_IF DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
first(specify_item) = LPAREN KEY_SPECPARAM KEY_IF DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
first(specify_block) = KEY_SPECIFY
first(source_text) = KEY_MODULE
first(sdpd) = KEY_IF
first(register_variable) = IDENTIFIER
first(reg_declaration) = KEY_REG
first(real_declaration) = KEY_REAL
first(range_or_type_opt) = LBRACKET KEY_REAL KEY_INTEGER
first(range_or_type) = LBRACKET KEY_REAL KEY_INTEGER
first(range_opt) = LBRACKET
first(range) = LBRACKET
first(primary) = UNSIGNED_NUMBER LPAREN LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BASE_NUMBER
first(port_reference) = IDENTIFIER
first(port_expression_opt) = LBRACE IDENTIFIER
first(port_expression) = LBRACE IDENTIFIER
first(port) = LBRACE IDENTIFIER
first(polarity_operator_opt) = SUB ADD
first(polarity_operator) = SUB ADD
first(path_description) = LPAREN
first(path_delay_value) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(path_delay_expression) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(path_declaration) = LPAREN
first(parameter_value_assignment_opt) = JING
first(parameter_value_assignment) = JING
first(parameter_override) = KEY_DEFPARAM
first(parameter_declaration) = KEY_PARAMETER
first(param_assignment) = IDENTIFIER
first(output_declaration) = KEY_OUTPUT
first(or_event_expression_optlist) = KEY_OR
first(number) = UNSIGNED_NUMBER FLOAT_NUMBER BASE_NUMBER
first(notify_register) = IDENTIFIER
first(non_blocking_assignment) = LBRACE IDENTIFIER
first(net_declaration) = NETTYPE
first(named_port_connection) = DOT
first(name_of_system_task) = DOLLOR_SYSTEM_IDENTIFIER
first(name_of_system_function) = DOLLOR
first(name_of_gate_instance_opt) = IDENTIFIER
first(name_of_event) = IDENTIFIER
first(multiple_concatenation) = LBRACE
first(module_port_connection) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(module_item_optlist) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
first(module_item) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
first(module_instantiation) = IDENTIFIER
first(module_instance) = IDENTIFIER
first(module_def) = KEY_MODULE
first(mintypmax_expression) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(lvalue) = LBRACE IDENTIFIER
first(list_of_variables) = IDENTIFIER
first(list_of_register_variables) = IDENTIFIER
first(list_of_ports_opt) = LPAREN
first(list_of_ports) = LPAREN
first(list_of_path_input_outputs) = IDENTIFIER
first(list_of_param_assignments) = IDENTIFIER
first(list_of_module_connections) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOT DOLLOR COMMA BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(list_of_assignments) = LBRACE IDENTIFIER
first(level_sensitive_path_declaration) = KEY_IF
first(integer_declaration) = KEY_INTEGER
first(input_declaration) = KEY_INPUT
first(inout_declaration) = KEY_INOUT
first(initial_statement) = KEY_INITIAL
first(identifier) = IDENTIFIER
first(gate_instance) = LPAREN IDENTIFIER
first(gate_declaration) = GATETYPE
first(function_avoid_amb) = KEY_FUNCTION
first(expression) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(expandrange_opt) = LBRACKET KEY_VECTORED KEY_SCALARED
first(expandrange) = LBRACKET KEY_VECTORED KEY_SCALARED
first(event_expression_list) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE KEY_POSEDGE KEY_NEGEDGE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(event_expression) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE KEY_POSEDGE KEY_NEGEDGE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(event_declaration) = KEY_EVENT
first(event_control) = AT
first(edge_sensitive_path_declaration) = LPAREN KEY_IF
first(edge_identifier_opt) = KEY_POSEDGE KEY_NEGEDGE
first(edge_identifier) = KEY_POSEDGE KEY_NEGEDGE
first(edge_descriptor) = 
first(edge_control_specifier) = KEY_EDGE
first(drive_strength_opt) = LPAREN
first(drive_strength) = LPAREN
first(dot_IDENTIFIER_optlist) = DOT
first(dot_IDENTIFIER) = DOT
first(description_list) = KEY_MODULE
first(description) = KEY_MODULE
first(delay_opt) = JING
first(delay_control) = JING
first(delay) = JING
first(data_source_expression) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(controlled_timing_check_event) = KEY_POSEDGE KEY_NEGEDGE KEY_EDGE
first(continuous_assign) = NETTYPE KEY_ASSIGN
first(constant_expression) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(conditional_port_expression) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(concatenation) = LBRACE
first(comma_terminal_optlist) = COMMA
first(comma_terminal) = COMMA
first(comma_specify_terminal_descriptor_optlist) = COMMA
first(comma_specify_terminal_descriptor) = COMMA
first(comma_register_variable_optlist) = COMMA
first(comma_register_variable) = COMMA
first(comma_port_reference_optlist) = COMMA
first(comma_port_reference) = COMMA
first(comma_port_optlist) = COMMA
first(comma_port) = COMMA
first(comma_param_assignment_optlist) = COMMA
first(comma_param_assignment) = COMMA
first(comma_notify_register_opt) = COMMA
first(comma_notify_register) = COMMA
first(comma_named_port_connection_optlist) = COMMA
first(comma_named_port_connection) = COMMA
first(comma_name_of_event_optlist) = COMMA
first(comma_name_of_event) = COMMA
first(comma_module_port_connection_optlist) = COMMA
first(comma_module_port_connection) = COMMA
first(comma_module_instance_optlist) = COMMA
first(comma_module_instance) = COMMA
first(comma_gate_instance_optlist) = COMMA
first(comma_gate_instance) = COMMA
first(comma_expression_optlist) = COMMA
first(comma_expression) = COMMA
first(comma_event_expression_optlist) = COMMA
first(comma_edge_descriptor_optlist) = COMMA
first(comma_edge_descriptor) = COMMA
first(comma_constant_expression_comma_notify_register_opt) = COMMA
first(comma_constant_expression_comma_notify_register) = COMMA
first(comma_assignment_optlist) = COMMA
first(comma_assignment) = COMMA
first(comma_IDENTIFIER_optlist) = COMMA
first(comma_IDENTIFIER) = COMMA
first(charge_strength) = LPAREN
first(case_item_list) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE KEY_DEFAULT IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(case_item) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE KEY_DEFAULT IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(blocking_assignment) = LBRACE IDENTIFIER
first(block_declaration_optlist) = KEY_TIME KEY_REG KEY_REAL KEY_PARAMETER KEY_INTEGER KEY_EVENT
first(block_declaration) = KEY_TIME KEY_REG KEY_REAL KEY_PARAMETER KEY_INTEGER KEY_EVENT
first(assignment) = LBRACE IDENTIFIER
first(and3_timing_check_condition_opt) = AND3
first(and3_timing_check_condition) = AND3
first(always_statement) = KEY_ALWAYS
first(SCALAR_EVENT_EXPRESSION) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
first(KEY_IF_LPAREN_expression_RPAREN_opt) = KEY_IF
minimal(timing_check_limit) = (* 1 *) UNSIGNED_NUMBER
minimal(timing_check_event_control_opt) = (* 0 *)
minimal(timing_check_event_control) = (* 1 *) KEY_POSEDGE
minimal(timing_check_event) = (* 1 *) IDENTIFIER
minimal(timing_check_condition) = (* 1 *) UNSIGNED_NUMBER
minimal(time_declaration) = (* 3 *) KEY_TIME IDENTIFIER SEMICOLON
minimal(tf_declaration_optlist) = (* 0 *)
minimal(tf_declaration_list) = (* 3 *) KEY_INPUT IDENTIFIER SEMICOLON
minimal(tf_declaration) = (* 3 *) KEY_INPUT IDENTIFIER SEMICOLON
minimal(terminal) = (* 1 *) UNSIGNED_NUMBER
minimal(task) = (* 5 *) KEY_TASK IDENTIFIER SEMICOLON SEMICOLON KEY_ENDTASK
minimal(system_timing_check) = (* 8 *) DOLLOR_PERIOD LPAREN KEY_POSEDGE IDENTIFIER COMMA UNSIGNED_NUMBER RPAREN SEMICOLON
minimal(statement_or_null) = (* 1 *) SEMICOLON
minimal(statement_optlist) = (* 0 *)
minimal(statement) = (* 2 *) KEY_BEGIN KEY_END
minimal(specparam_declaration) = (* 5 *) KEY_SPECPARAM IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER SEMICOLON
minimal(specify_terminal_descriptor) = (* 1 *) IDENTIFIER
minimal(specify_item_optlist) = (* 0 *)
minimal(specify_item) = (* 5 *) KEY_SPECPARAM IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER SEMICOLON
minimal(specify_block) = (* 2 *) KEY_SPECIFY KEY_ENDSPECIFY
minimal(source_text) = (* 5 *) KEY_MODULE IDENTIFIER SEMICOLON KEY_ENDMODULE EOF
minimal(sdpd) = (* 12 *) KEY_IF LPAREN UNSIGNED_NUMBER RPAREN LPAREN IDENTIFIER PATHTO IDENTIFIER RPAREN SINGLEASSIGN UNSIGNED_NUMBER SEMICOLON
minimal(register_variable) = (* 1 *) IDENTIFIER
minimal(reg_declaration) = (* 3 *) KEY_REG IDENTIFIER SEMICOLON
minimal(real_declaration) = (* 3 *) KEY_REAL IDENTIFIER SEMICOLON
minimal(range_or_type_opt) = (* 0 *)
minimal(range_or_type) = (* 1 *) KEY_INTEGER
minimal(range_opt) = (* 0 *)
minimal(range) = (* 5 *) LBRACKET UNSIGNED_NUMBER COLON UNSIGNED_NUMBER RBRACKET
minimal(primary) = (* 1 *) UNSIGNED_NUMBER
minimal(port_reference) = (* 1 *) IDENTIFIER
minimal(port_expression_opt) = (* 0 *)
minimal(port_expression) = (* 1 *) IDENTIFIER
minimal(port) = (* 0 *)
minimal(polarity_operator_opt) = (* 0 *)
minimal(polarity_operator) = (* 1 *) ADD
minimal(path_description) = (* 5 *) LPAREN IDENTIFIER PATHTO IDENTIFIER RPAREN
minimal(path_delay_value) = (* 1 *) UNSIGNED_NUMBER
minimal(path_delay_expression) = (* 1 *) UNSIGNED_NUMBER
minimal(path_declaration) = (* 8 *) LPAREN IDENTIFIER PATHTO IDENTIFIER RPAREN SINGLEASSIGN UNSIGNED_NUMBER SEMICOLON
minimal(parameter_value_assignment_opt) = (* 0 *)
minimal(parameter_value_assignment) = (* 4 *) JING LPAREN UNSIGNED_NUMBER RPAREN
minimal(parameter_override) = (* 5 *) KEY_DEFPARAM IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER SEMICOLON
minimal(parameter_declaration) = (* 5 *) KEY_PARAMETER IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER SEMICOLON
minimal(param_assignment) = (* 3 *) IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER
minimal(output_declaration) = (* 3 *) KEY_OUTPUT IDENTIFIER SEMICOLON
minimal(or_event_expression_optlist) = (* 0 *)
minimal(number) = (* 1 *) UNSIGNED_NUMBER
minimal(notify_register) = (* 1 *) IDENTIFIER
minimal(non_blocking_assignment) = (* 3 *) IDENTIFIER LE UNSIGNED_NUMBER
minimal(net_declaration) = (* 3 *) NETTYPE IDENTIFIER SEMICOLON
minimal(named_port_connection) = (* 4 *) DOT IDENTIFIER LPAREN RPAREN
minimal(name_of_system_task) = (* 1 *) DOLLOR_SYSTEM_IDENTIFIER
minimal(name_of_system_function) = (* 2 *) DOLLOR IDENTIFIER
minimal(name_of_gate_instance_opt) = (* 0 *)
minimal(name_of_event) = (* 1 *) IDENTIFIER
minimal(multiple_concatenation) = (* 6 *) LBRACE UNSIGNED_NUMBER LBRACE UNSIGNED_NUMBER RBRACE RBRACE
minimal(module_port_connection) = (* 0 *)
minimal(module_item_optlist) = (* 0 *)
minimal(module_item) = (* 2 *) KEY_SPECIFY KEY_ENDSPECIFY
minimal(module_instantiation) = (* 5 *) IDENTIFIER IDENTIFIER LPAREN RPAREN SEMICOLON
minimal(module_instance) = (* 3 *) IDENTIFIER LPAREN RPAREN
minimal(module_def) = (* 4 *) KEY_MODULE IDENTIFIER SEMICOLON KEY_ENDMODULE
minimal(mintypmax_expression) = (* 1 *) UNSIGNED_NUMBER
minimal(lvalue) = (* 1 *) IDENTIFIER
minimal(list_of_variables) = (* 1 *) IDENTIFIER
minimal(list_of_register_variables) = (* 1 *) IDENTIFIER
minimal(list_of_ports_opt) = (* 0 *)
minimal(list_of_ports) = (* 2 *) LPAREN RPAREN
minimal(list_of_path_input_outputs) = (* 1 *) IDENTIFIER
minimal(list_of_param_assignments) = (* 3 *) IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER
minimal(list_of_module_connections) = (* 0 *)
minimal(list_of_assignments) = (* 3 *) IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER
minimal(level_sensitive_path_declaration) = (* 12 *) KEY_IF LPAREN UNSIGNED_NUMBER RPAREN LPAREN IDENTIFIER PATHTO IDENTIFIER RPAREN SINGLEASSIGN UNSIGNED_NUMBER SEMICOLON
minimal(integer_declaration) = (* 3 *) KEY_INTEGER IDENTIFIER SEMICOLON
minimal(input_declaration) = (* 3 *) KEY_INPUT IDENTIFIER SEMICOLON
minimal(inout_declaration) = (* 3 *) KEY_INOUT IDENTIFIER SEMICOLON
minimal(initial_statement) = (* 3 *) KEY_INITIAL KEY_BEGIN KEY_END
minimal(identifier) = (* 1 *) IDENTIFIER
minimal(gate_instance) = (* 3 *) LPAREN UNSIGNED_NUMBER RPAREN
minimal(gate_declaration) = (* 5 *) GATETYPE LPAREN UNSIGNED_NUMBER RPAREN SEMICOLON
minimal(function_avoid_amb) = (* 9 *) KEY_FUNCTION IDENTIFIER SEMICOLON KEY_INPUT IDENTIFIER SEMICOLON KEY_BEGIN KEY_END KEY_ENDFUNCTION
minimal(expression) = (* 1 *) UNSIGNED_NUMBER
minimal(expandrange_opt) = (* 0 *)
minimal(expandrange) = (* 5 *) LBRACKET UNSIGNED_NUMBER COLON UNSIGNED_NUMBER RBRACKET
minimal(event_expression_list) = (* 1 *) UNSIGNED_NUMBER
minimal(event_expression) = (* 1 *) UNSIGNED_NUMBER
minimal(event_declaration) = (* 3 *) KEY_EVENT IDENTIFIER SEMICOLON
minimal(event_control) = (* 2 *) AT IDENTIFIER
minimal(edge_sensitive_path_declaration) = (* 13 *) LPAREN IDENTIFIER PATHTO LPAREN IDENTIFIER ADD QUESTION_MARK_COLON UNSIGNED_NUMBER RPAREN RPAREN SINGLEASSIGN UNSIGNED_NUMBER SEMICOLON
minimal(edge_identifier_opt) = (* 0 *)
minimal(edge_identifier) = (* 1 *) KEY_POSEDGE
minimal(edge_descriptor) = (* 0 *)
minimal(edge_control_specifier) = (* 3 *) KEY_EDGE LBRACKET RBRACKET
minimal(drive_strength_opt) = (* 0 *)
minimal(drive_strength) = (* 5 *) LPAREN STRENGTH0 COMMA STRENGTH1 RPAREN
minimal(dot_IDENTIFIER_optlist) = (* 0 *)
minimal(dot_IDENTIFIER) = (* 2 *) DOT IDENTIFIER
minimal(description_list) = (* 4 *) KEY_MODULE IDENTIFIER SEMICOLON KEY_ENDMODULE
minimal(description) = (* 4 *) KEY_MODULE IDENTIFIER SEMICOLON KEY_ENDMODULE
minimal(delay_opt) = (* 0 *)
minimal(delay_control) = (* 2 *) JING UNSIGNED_NUMBER
minimal(delay) = (* 2 *) JING UNSIGNED_NUMBER
minimal(data_source_expression) = (* 1 *) UNSIGNED_NUMBER
minimal(controlled_timing_check_event) = (* 2 *) KEY_POSEDGE IDENTIFIER
minimal(continuous_assign) = (* 5 *) KEY_ASSIGN IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER SEMICOLON
minimal(constant_expression) = (* 1 *) UNSIGNED_NUMBER
minimal(conditional_port_expression) = (* 1 *) UNSIGNED_NUMBER
minimal(concatenation) = (* 3 *) LBRACE UNSIGNED_NUMBER RBRACE
minimal(comma_terminal_optlist) = (* 0 *)
minimal(comma_terminal) = (* 2 *) COMMA UNSIGNED_NUMBER
minimal(comma_specify_terminal_descriptor_optlist) = (* 0 *)
minimal(comma_specify_terminal_descriptor) = (* 2 *) COMMA IDENTIFIER
minimal(comma_register_variable_optlist) = (* 0 *)
minimal(comma_register_variable) = (* 2 *) COMMA IDENTIFIER
minimal(comma_port_reference_optlist) = (* 0 *)
minimal(comma_port_reference) = (* 2 *) COMMA IDENTIFIER
minimal(comma_port_optlist) = (* 0 *)
minimal(comma_port) = (* 1 *) COMMA
minimal(comma_param_assignment_optlist) = (* 0 *)
minimal(comma_param_assignment) = (* 4 *) COMMA IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER
minimal(comma_notify_register_opt) = (* 0 *)
minimal(comma_notify_register) = (* 2 *) COMMA IDENTIFIER
minimal(comma_named_port_connection_optlist) = (* 0 *)
minimal(comma_named_port_connection) = (* 5 *) COMMA DOT IDENTIFIER LPAREN RPAREN
minimal(comma_name_of_event_optlist) = (* 0 *)
minimal(comma_name_of_event) = (* 2 *) COMMA IDENTIFIER
minimal(comma_module_port_connection_optlist) = (* 0 *)
minimal(comma_module_port_connection) = (* 1 *) COMMA
minimal(comma_module_instance_optlist) = (* 0 *)
minimal(comma_module_instance) = (* 4 *) COMMA IDENTIFIER LPAREN RPAREN
minimal(comma_gate_instance_optlist) = (* 0 *)
minimal(comma_gate_instance) = (* 4 *) COMMA LPAREN UNSIGNED_NUMBER RPAREN
minimal(comma_expression_optlist) = (* 0 *)
minimal(comma_expression) = (* 2 *) COMMA UNSIGNED_NUMBER
minimal(comma_event_expression_optlist) = (* 0 *)
minimal(comma_edge_descriptor_optlist) = (* 0 *)
minimal(comma_edge_descriptor) = (* 1 *) COMMA
minimal(comma_constant_expression_comma_notify_register_opt) = (* 0 *)
minimal(comma_constant_expression_comma_notify_register) = (* 4 *) COMMA UNSIGNED_NUMBER COMMA IDENTIFIER
minimal(comma_assignment_optlist) = (* 0 *)
minimal(comma_assignment) = (* 4 *) COMMA IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER
minimal(comma_IDENTIFIER_optlist) = (* 0 *)
minimal(comma_IDENTIFIER) = (* 2 *) COMMA IDENTIFIER
minimal(charge_strength) = (* 3 *) LPAREN KEY_SMALL RPAREN
minimal(case_item_list) = (* 2 *) KEY_DEFAULT SEMICOLON
minimal(case_item) = (* 2 *) KEY_DEFAULT SEMICOLON
minimal(blocking_assignment) = (* 3 *) IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER
minimal(block_declaration_optlist) = (* 0 *)
minimal(block_declaration) = (* 3 *) KEY_REG IDENTIFIER SEMICOLON
minimal(assignment) = (* 3 *) IDENTIFIER SINGLEASSIGN UNSIGNED_NUMBER
minimal(and3_timing_check_condition_opt) = (* 0 *)
minimal(and3_timing_check_condition) = (* 2 *) AND3 UNSIGNED_NUMBER
minimal(always_statement) = (* 3 *) KEY_ALWAYS KEY_BEGIN KEY_END
minimal(SCALAR_EVENT_EXPRESSION) = (* 1 *) UNSIGNED_NUMBER
minimal(KEY_IF_LPAREN_expression_RPAREN_opt) = (* 0 *)
follow(timing_check_limit) = RPAREN COMMA
follow(timing_check_event_control_opt) = IDENTIFIER
follow(timing_check_event_control) = IDENTIFIER
follow(timing_check_event) = COMMA
follow(timing_check_condition) = COMMA
follow(time_declaration) = SEMICOLON NETTYPE LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_JOIN KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDMODULE KEY_END KEY_DISABLE KEY_DEFPARAM KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE DOLLOR_SYSTEM_IDENTIFIER AT
follow(tf_declaration_optlist) = SEMICOLON LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER DOLLOR_SYSTEM_IDENTIFIER AT
follow(tf_declaration_list) = LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER DOLLOR_SYSTEM_IDENTIFIER AT
follow(tf_declaration) = SEMICOLON LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER DOLLOR_SYSTEM_IDENTIFIER AT
follow(terminal) = RPAREN COMMA
follow(task) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(system_timing_check) = LPAREN KEY_SPECPARAM KEY_IF KEY_ENDSPECIFY DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
follow(statement_or_null) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND NETTYPE LPAREN LOGIC_NEG LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_JOIN KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDTASK KEY_ENDMODULE KEY_ENDFUNCTION KEY_ENDCASE KEY_END KEY_ELSE KEY_DISABLE KEY_DEFPARAM KEY_DEFAULT KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(statement_optlist) = KEY_JOIN KEY_END
follow(statement) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND NETTYPE LPAREN LOGIC_NEG LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_JOIN KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDTASK KEY_ENDMODULE KEY_ENDFUNCTION KEY_ENDCASE KEY_END KEY_ELSE KEY_DISABLE KEY_DEFPARAM KEY_DEFAULT KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(specparam_declaration) = LPAREN KEY_SPECPARAM KEY_IF KEY_ENDSPECIFY DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
follow(specify_terminal_descriptor) = SUB RPAREN PATHTOSTAR PATHTO COMMA AND3 ADD
follow(specify_item_optlist) = KEY_ENDSPECIFY
follow(specify_item) = LPAREN KEY_SPECPARAM KEY_IF KEY_ENDSPECIFY DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
follow(specify_block) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(source_text) = EOF #
follow(sdpd) = LPAREN KEY_SPECPARAM KEY_IF KEY_ENDSPECIFY DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
follow(register_variable) = SEMICOLON COMMA
follow(reg_declaration) = SEMICOLON NETTYPE LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_JOIN KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDMODULE KEY_END KEY_DISABLE KEY_DEFPARAM KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE DOLLOR_SYSTEM_IDENTIFIER AT
follow(real_declaration) = SEMICOLON NETTYPE LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_JOIN KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDMODULE KEY_END KEY_DISABLE KEY_DEFPARAM KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE DOLLOR_SYSTEM_IDENTIFIER AT
follow(range_or_type_opt) = IDENTIFIER
follow(range_or_type) = IDENTIFIER
follow(range_opt) = IDENTIFIER
follow(range) = LBRACE JING IDENTIFIER
follow(primary) = UNSIGNED_NUMBER SUB STRING SEMICOLON RPAREN RIGHT_SHIFT RED_NOR RED_NAND RBRACKET RBRACE QUESTION_MARK MUL MOD LT LPAREN LOGIC_OR LOGIC_NEG LOGIC_INE LOGIC_EQU LOGIC_AND LEFT_SHIFT LEADTO LE LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_OR KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER GT GE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR DIV COMMA COLON CASE_INE CASE_EQU BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(port_reference) = RPAREN RBRACE COMMA
follow(port_expression_opt) = RPAREN COMMA
follow(port_expression) = RPAREN COMMA
follow(port) = RPAREN COMMA
follow(polarity_operator_opt) = PATHTOSTAR PATHTO
follow(polarity_operator) = QUESTION_MARK_COLON PATHTOSTAR PATHTO
follow(path_description) = SINGLEASSIGN
follow(path_delay_value) = SEMICOLON
follow(path_delay_expression) = SEMICOLON RPAREN COMMA
follow(path_declaration) = LPAREN KEY_SPECPARAM KEY_IF KEY_ENDSPECIFY DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
follow(parameter_value_assignment_opt) = IDENTIFIER
follow(parameter_value_assignment) = IDENTIFIER
follow(parameter_override) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(parameter_declaration) = SEMICOLON NETTYPE LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_JOIN KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDMODULE KEY_END KEY_DISABLE KEY_DEFPARAM KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE DOLLOR_SYSTEM_IDENTIFIER AT
follow(param_assignment) = SEMICOLON COMMA
follow(output_declaration) = SEMICOLON NETTYPE LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDMODULE KEY_DISABLE KEY_DEFPARAM KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE DOLLOR_SYSTEM_IDENTIFIER AT
follow(or_event_expression_optlist) = RPAREN
follow(number) = UNSIGNED_NUMBER SUB STRING SEMICOLON RPAREN RIGHT_SHIFT RED_NOR RED_NAND RBRACKET RBRACE QUESTION_MARK MUL MOD LT LPAREN LOGIC_OR LOGIC_NEG LOGIC_INE LOGIC_EQU LOGIC_AND LEFT_SHIFT LEADTO LE LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_OR KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER GT GE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR DIV COMMA COLON CASE_INE CASE_EQU BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(notify_register) = RPAREN
follow(non_blocking_assignment) = SEMICOLON
follow(net_declaration) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(named_port_connection) = RPAREN COMMA
follow(name_of_system_task) = SEMICOLON LPAREN
follow(name_of_system_function) = UNSIGNED_NUMBER SUB STRING SEMICOLON RPAREN RIGHT_SHIFT RED_NOR RED_NAND RBRACKET RBRACE QUESTION_MARK MUL MOD LT LPAREN LOGIC_OR LOGIC_NEG LOGIC_INE LOGIC_EQU LOGIC_AND LEFT_SHIFT LEADTO LE LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_OR KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER GT GE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR DIV COMMA COLON CASE_INE CASE_EQU BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(name_of_gate_instance_opt) = LPAREN
follow(name_of_event) = SEMICOLON COMMA
follow(multiple_concatenation) = UNSIGNED_NUMBER SUB STRING SEMICOLON RPAREN RIGHT_SHIFT RED_NOR RED_NAND RBRACKET RBRACE QUESTION_MARK MUL MOD LT LPAREN LOGIC_OR LOGIC_NEG LOGIC_INE LOGIC_EQU LOGIC_AND LEFT_SHIFT LEADTO LE LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_OR KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER GT GE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR DIV COMMA COLON CASE_INE CASE_EQU BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(module_port_connection) = RPAREN COMMA
follow(module_item_optlist) = KEY_ENDMODULE
follow(module_item) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(module_instantiation) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(module_instance) = SEMICOLON COMMA
follow(module_def) = KEY_MODULE EOF
follow(mintypmax_expression) = SEMICOLON RPAREN COMMA
follow(lvalue) = SINGLEASSIGN SEMICOLON LE
follow(list_of_variables) = SEMICOLON
follow(list_of_register_variables) = SEMICOLON
follow(list_of_ports_opt) = SEMICOLON
follow(list_of_ports) = SEMICOLON
follow(list_of_path_input_outputs) = SUB RPAREN PATHTOSTAR ADD
follow(list_of_param_assignments) = SEMICOLON
follow(list_of_module_connections) = RPAREN
follow(list_of_assignments) = SEMICOLON
follow(level_sensitive_path_declaration) = LPAREN KEY_SPECPARAM KEY_IF KEY_ENDSPECIFY DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
follow(integer_declaration) = SEMICOLON NETTYPE LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_JOIN KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDMODULE KEY_END KEY_DISABLE KEY_DEFPARAM KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE DOLLOR_SYSTEM_IDENTIFIER AT
follow(input_declaration) = SEMICOLON NETTYPE LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDMODULE KEY_DISABLE KEY_DEFPARAM KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE DOLLOR_SYSTEM_IDENTIFIER AT
follow(inout_declaration) = SEMICOLON NETTYPE LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDMODULE KEY_DISABLE KEY_DEFPARAM KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE DOLLOR_SYSTEM_IDENTIFIER AT
follow(initial_statement) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(identifier) = UNSIGNED_NUMBER SUB STRING SINGLEASSIGN SEMICOLON RPAREN RIGHT_SHIFT RED_NOR RED_NAND RBRACKET RBRACE QUESTION_MARK MUL MOD LT LPAREN LOGIC_OR LOGIC_NEG LOGIC_INE LOGIC_EQU LOGIC_AND LEFT_SHIFT LEADTO LE LBRACKET LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_OR KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER GT GE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR DIV COMMA COLON CASE_INE CASE_EQU BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(gate_instance) = SEMICOLON COMMA
follow(gate_declaration) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(function_avoid_amb) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(expression) = UNSIGNED_NUMBER SUB STRING SEMICOLON RPAREN RIGHT_SHIFT RED_NOR RED_NAND RBRACKET RBRACE QUESTION_MARK MUL MOD LT LPAREN LOGIC_OR LOGIC_NEG LOGIC_INE LOGIC_EQU LOGIC_AND LEFT_SHIFT LEADTO LE LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_OR KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER GT GE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR DIV COMMA COLON CASE_INE CASE_EQU BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(expandrange_opt) = LBRACE JING IDENTIFIER
follow(expandrange) = LBRACE JING IDENTIFIER
follow(event_expression_list) = RPAREN
follow(event_expression) = RPAREN KEY_OR COMMA
follow(event_declaration) = SEMICOLON NETTYPE LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_TASK KEY_SPECIFY KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_JOIN KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_IF KEY_FUNCTION KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_ENDMODULE KEY_END KEY_DISABLE KEY_DEFPARAM KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN KEY_ASSIGN KEY_ALWAYS JING IDENTIFIER GATETYPE DOLLOR_SYSTEM_IDENTIFIER AT
follow(event_control) = UNSIGNED_NUMBER SUB STRING SEMICOLON RED_NOR RED_NAND LPAREN LOGIC_NEG LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(edge_sensitive_path_declaration) = LPAREN KEY_SPECPARAM KEY_IF KEY_ENDSPECIFY DOLLOR_WIDTH DOLLOR_SKEW DOLLOR_SETUPHOLD DOLLOR_SETUP DOLLOR_RECOVERY DOLLOR_PERIOD DOLLOR_HOLD
follow(edge_identifier_opt) = IDENTIFIER
follow(edge_identifier) = IDENTIFIER
follow(edge_descriptor) = RBRACKET COMMA
follow(edge_control_specifier) = IDENTIFIER
follow(drive_strength_opt) = LPAREN JING IDENTIFIER
follow(drive_strength) = LPAREN LBRACKET LBRACE KEY_VECTORED KEY_SCALARED JING IDENTIFIER
follow(dot_IDENTIFIER_optlist) = UNSIGNED_NUMBER SUB STRING SINGLEASSIGN SEMICOLON RPAREN RIGHT_SHIFT RED_NOR RED_NAND RBRACKET RBRACE QUESTION_MARK MUL MOD LT LPAREN LOGIC_OR LOGIC_NEG LOGIC_INE LOGIC_EQU LOGIC_AND LEFT_SHIFT LEADTO LE LBRACKET LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_OR KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER GT GE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR DIV COMMA COLON CASE_INE CASE_EQU BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(dot_IDENTIFIER) = UNSIGNED_NUMBER SUB STRING SINGLEASSIGN SEMICOLON RPAREN RIGHT_SHIFT RED_NOR RED_NAND RBRACKET RBRACE QUESTION_MARK MUL MOD LT LPAREN LOGIC_OR LOGIC_NEG LOGIC_INE LOGIC_EQU LOGIC_AND LEFT_SHIFT LEADTO LE LBRACKET LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_OR KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER GT GE FLOAT_NUMBER DOT DOLLOR_SYSTEM_IDENTIFIER DOLLOR DIV COMMA COLON CASE_INE CASE_EQU BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(description_list) = EOF
follow(description) = KEY_MODULE EOF
follow(delay_opt) = LPAREN LBRACE IDENTIFIER
follow(delay_control) = UNSIGNED_NUMBER SUB STRING SEMICOLON RED_NOR RED_NAND LPAREN LOGIC_NEG LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(delay) = LPAREN LBRACE IDENTIFIER
follow(data_source_expression) = RPAREN
follow(controlled_timing_check_event) = COMMA
follow(continuous_assign) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(constant_expression) = SEMICOLON RBRACKET COMMA COLON
follow(conditional_port_expression) = RPAREN
follow(concatenation) = UNSIGNED_NUMBER SUB STRING SINGLEASSIGN SEMICOLON RPAREN RIGHT_SHIFT RED_NOR RED_NAND RBRACKET RBRACE QUESTION_MARK MUL MOD LT LPAREN LOGIC_OR LOGIC_NEG LOGIC_INE LOGIC_EQU LOGIC_AND LEFT_SHIFT LEADTO LE LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_OR KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER GT GE FLOAT_NUMBER DOLLOR_SYSTEM_IDENTIFIER DOLLOR DIV COMMA COLON CASE_INE CASE_EQU BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER AT ADD
follow(comma_terminal_optlist) = RPAREN
follow(comma_terminal) = RPAREN COMMA
follow(comma_specify_terminal_descriptor_optlist) = SUB RPAREN PATHTOSTAR ADD
follow(comma_specify_terminal_descriptor) = SUB RPAREN PATHTOSTAR COMMA ADD
follow(comma_register_variable_optlist) = SEMICOLON
follow(comma_register_variable) = SEMICOLON COMMA
follow(comma_port_reference_optlist) = RBRACE
follow(comma_port_reference) = RBRACE COMMA
follow(comma_port_optlist) = RPAREN
follow(comma_port) = RPAREN COMMA
follow(comma_param_assignment_optlist) = SEMICOLON
follow(comma_param_assignment) = SEMICOLON COMMA
follow(comma_notify_register_opt) = RPAREN
follow(comma_notify_register) = RPAREN
follow(comma_named_port_connection_optlist) = RPAREN
follow(comma_named_port_connection) = RPAREN COMMA
follow(comma_name_of_event_optlist) = SEMICOLON
follow(comma_name_of_event) = SEMICOLON COMMA
follow(comma_module_port_connection_optlist) = RPAREN
follow(comma_module_port_connection) = RPAREN COMMA
follow(comma_module_instance_optlist) = SEMICOLON
follow(comma_module_instance) = SEMICOLON COMMA
follow(comma_gate_instance_optlist) = SEMICOLON
follow(comma_gate_instance) = SEMICOLON COMMA
follow(comma_expression_optlist) = RPAREN RBRACE COLON
follow(comma_expression) = RPAREN RBRACE COMMA COLON
follow(comma_event_expression_optlist) = RPAREN
follow(comma_edge_descriptor_optlist) = RBRACKET
follow(comma_edge_descriptor) = RBRACKET COMMA
follow(comma_constant_expression_comma_notify_register_opt) = RPAREN
follow(comma_constant_expression_comma_notify_register) = RPAREN
follow(comma_assignment_optlist) = SEMICOLON
follow(comma_assignment) = SEMICOLON COMMA
follow(comma_IDENTIFIER_optlist) = SEMICOLON
follow(comma_IDENTIFIER) = SEMICOLON COMMA
follow(charge_strength) = LBRACKET KEY_VECTORED KEY_SCALARED JING IDENTIFIER
follow(case_item_list) = KEY_ENDCASE
follow(case_item) = UNSIGNED_NUMBER SUB STRING RED_NOR RED_NAND LPAREN LOGIC_NEG LBRACE KEY_ENDCASE KEY_DEFAULT IDENTIFIER FLOAT_NUMBER DOLLOR BIT_XOR BIT_OR BIT_NEG BIT_EQU BIT_AND BASE_NUMBER ADD
follow(blocking_assignment) = SEMICOLON
follow(block_declaration_optlist) = LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_REPEAT KEY_RELEASE KEY_JOIN KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_END KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER DOLLOR_SYSTEM_IDENTIFIER AT
follow(block_declaration) = LEADTO LBRACE KEY_WHILE KEY_WAIT KEY_TIME KEY_REPEAT KEY_RELEASE KEY_REG KEY_REAL KEY_PARAMETER KEY_JOIN KEY_INTEGER KEY_IF KEY_FORK KEY_FOREVER KEY_FORCE KEY_FOR KEY_EVENT KEY_END KEY_DISABLE KEY_CASEZ KEY_CASEX KEY_CASE KEY_BEGIN JING IDENTIFIER DOLLOR_SYSTEM_IDENTIFIER AT
follow(assignment) = SEMICOLON RPAREN COMMA
follow(and3_timing_check_condition_opt) = COMMA
follow(and3_timing_check_condition) = COMMA
follow(always_statement) = NETTYPE KEY_TIME KEY_TASK KEY_SPECIFY KEY_REG KEY_REAL KEY_PARAMETER KEY_OUTPUT KEY_INTEGER KEY_INPUT KEY_INOUT KEY_INITIAL KEY_FUNCTION KEY_EVENT KEY_ENDMODULE KEY_DEFPARAM KEY_ASSIGN KEY_ALWAYS IDENTIFIER GATETYPE
follow(SCALAR_EVENT_EXPRESSION) = RPAREN KEY_OR COMMA
follow(KEY_IF_LPAREN_expression_RPAREN_opt) = LPAREN
Built an LR(0) automaton with 804 states.
The grammar is not SLR(1) -- 40 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 806 states.
462 shift/reduce conflicts were silently solved.
File "compsyn.mly", line 276, characters 0-5:
Warning: the precedence level assigned to BIT_NEG is never useful.
File "compsyn.mly", line 276, characters 0-5:
Warning: the precedence level assigned to LOGIC_NEG is never useful.
File "compsyn.mly", line 276, characters 0-5:
Warning: the precedence level assigned to RED_NAND is never useful.
File "compsyn.mly", line 276, characters 0-5:
Warning: the precedence level assigned to RED_NOR is never useful.
File "compsyn.mly", line 278, characters 0-5:
Warning: the precedence level assigned to UADD is never useful.
File "compsyn.mly", line 278, characters 0-5:
Warning: the precedence level assigned to UAND is never useful.
File "compsyn.mly", line 278, characters 0-5:
Warning: the precedence level assigned to UEQU is never useful.
File "compsyn.mly", line 278, characters 0-5:
Warning: the precedence level assigned to UOR is never useful.
File "compsyn.mly", line 278, characters 0-5:
Warning: the precedence level assigned to USUB is never useful.
File "compsyn.mly", line 278, characters 0-5:
Warning: the precedence level assigned to UXOR is never useful.
File "compsyn.mly", line 1339, characters 21-25:
Warning: this %prec declaration is never useful.
File "compsyn.mly", line 1340, characters 21-25:
Warning: this %prec declaration is never useful.
File "compsyn.mly", line 1343, characters 26-30:
Warning: this %prec declaration is never useful.
File "compsyn.mly", line 1345, characters 24-27:
Warning: this %prec declaration is never useful.
File "compsyn.mly", line 1347, characters 25-29:
Warning: this %prec declaration is never useful.
File "compsyn.mly", line 1348, characters 25-29:
Warning: this %prec declaration is never useful.
Warning: 11 states have shift/reduce conflicts.
Warning: one state has reduce/reduce conflicts.
Warning: 38 shift/reduce conflicts were arbitrarily resolved.
Warning: one reduce/reduce conflict was arbitrarily resolved.
File "compsyn.mly", line 686, characters 36-36:
Warning: production KEY_IF_LPAREN_expression_RPAREN_opt -> is never reduced.
File "compsyn.mly", line 688, characters 3-34:
Warning: production KEY_IF_LPAREN_expression_RPAREN_opt -> KEY_IF LPAREN expression RPAREN is never reduced.
File "compsyn.mly", line 729, characters 1-11:
Warning: production conditional_port_expression -> expression is never reduced.
Warning: in total, 3 productions are never reduced.
269 out of 806 states have a default reduction.
343 out of 806 states are represented.
0 out of 275 symbols keep track of their start position.
0 out of 275 symbols keep track of their end position.
213 out of 357 productions exploit shiftreduce optimization.
0 out of 806 states can peek at an error.
2127 functions before inlining, 255 functions after inlining.
