State 0:
## Known stack suffix:
##
## LR(1) items:
condition_start' -> . condition_start [ # ]
## Transitions:
-- On STRING shift to state 1
-- On NOT shift to state 2
-- On LPAR shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On EXISTS shift to state 6
-- On DOLLAR_TYPE shift to state 8
-- On DOLLAR_KEY shift to state 9
-- On cte shift to state 10
-- On condition_start shift to state 23
-- On condition shift to state 24
-- On atom shift to state 21
## Reductions:

State 1:
## Known stack suffix:
## STRING
## LR(1) items:
cte -> STRING . [ RPAR OR EOF COMP COLON AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cte -> STRING

State 2:
## Known stack suffix:
## NOT
## LR(1) items:
condition -> NOT . condition [ RPAR OR EOF AND ]
## Transitions:
-- On STRING shift to state 1
-- On NOT shift to state 2
-- On LPAR shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On EXISTS shift to state 6
-- On DOLLAR_TYPE shift to state 8
-- On DOLLAR_KEY shift to state 9
-- On cte shift to state 10
-- On condition shift to state 22
-- On atom shift to state 21
## Reductions:

State 3:
## Known stack suffix:
## LPAR
## LR(1) items:
condition -> LPAR . condition RPAR [ RPAR OR EOF AND ]
## Transitions:
-- On STRING shift to state 1
-- On NOT shift to state 2
-- On LPAR shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On EXISTS shift to state 6
-- On DOLLAR_TYPE shift to state 8
-- On DOLLAR_KEY shift to state 9
-- On cte shift to state 10
-- On condition shift to state 15
-- On atom shift to state 21
## Reductions:

State 4:
## Known stack suffix:
## INT
## LR(1) items:
cte -> INT . [ RPAR OR EOF COMP COLON AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cte -> INT

State 5:
## Known stack suffix:
## IDENT
## LR(1) items:
cte -> IDENT . [ RPAR OR EOF COMP COLON AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cte -> IDENT

State 6:
## Known stack suffix:
## EXISTS
## LR(1) items:
atom -> EXISTS . IDENT [ RPAR OR EOF AND ]
## Transitions:
-- On IDENT shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## EXISTS IDENT
## LR(1) items:
atom -> EXISTS IDENT . [ RPAR OR EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> EXISTS IDENT

State 8:
## Known stack suffix:
## DOLLAR_TYPE
## LR(1) items:
cte -> DOLLAR_TYPE . [ RPAR OR EOF COMP COLON AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cte -> DOLLAR_TYPE

State 9:
## Known stack suffix:
## DOLLAR_KEY
## LR(1) items:
cte -> DOLLAR_KEY . [ RPAR OR EOF COMP COLON AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production cte -> DOLLAR_KEY

State 10:
## Known stack suffix:
## cte
## LR(1) items:
atom -> cte . COLON STRING [ RPAR OR EOF AND ]
atom -> cte . COMP cte [ RPAR OR EOF AND ]
## Transitions:
-- On COMP shift to state 11
-- On COLON shift to state 13
## Reductions:

State 11:
## Known stack suffix:
## cte COMP
## LR(1) items:
atom -> cte COMP . cte [ RPAR OR EOF AND ]
## Transitions:
-- On STRING shift to state 1
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On DOLLAR_TYPE shift to state 8
-- On DOLLAR_KEY shift to state 9
-- On cte shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## cte COMP cte
## LR(1) items:
atom -> cte COMP cte . [ RPAR OR EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> cte COMP cte

State 13:
## Known stack suffix:
## cte COLON
## LR(1) items:
atom -> cte COLON . STRING [ RPAR OR EOF AND ]
## Transitions:
-- On STRING shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## cte COLON STRING
## LR(1) items:
atom -> cte COLON STRING . [ RPAR OR EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> cte COLON STRING

State 15:
## Known stack suffix:
## LPAR condition
## LR(1) items:
condition -> condition . OR condition [ RPAR OR AND ]
condition -> condition . AND condition [ RPAR OR AND ]
condition -> LPAR condition . RPAR [ RPAR OR EOF AND ]
## Transitions:
-- On RPAR shift to state 16
-- On OR shift to state 17
-- On AND shift to state 19
## Reductions:

State 16:
## Known stack suffix:
## LPAR condition RPAR
## LR(1) items:
condition -> LPAR condition RPAR . [ RPAR OR EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production condition -> LPAR condition RPAR

State 17:
## Known stack suffix:
## condition OR
## LR(1) items:
condition -> condition OR . condition [ RPAR OR EOF AND ]
## Transitions:
-- On STRING shift to state 1
-- On NOT shift to state 2
-- On LPAR shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On EXISTS shift to state 6
-- On DOLLAR_TYPE shift to state 8
-- On DOLLAR_KEY shift to state 9
-- On cte shift to state 10
-- On condition shift to state 18
-- On atom shift to state 21
## Reductions:

State 18:
## Known stack suffix:
## condition OR condition
## LR(1) items:
condition -> condition . OR condition [ RPAR OR EOF AND ]
condition -> condition OR condition . [ RPAR OR EOF AND ]
condition -> condition . AND condition [ RPAR OR EOF AND ]
## Transitions:
-- On AND shift to state 19
## Reductions:
-- On RPAR reduce production condition -> condition OR condition
-- On OR reduce production condition -> condition OR condition
-- On EOF reduce production condition -> condition OR condition

State 19:
## Known stack suffix:
## condition AND
## LR(1) items:
condition -> condition AND . condition [ RPAR OR EOF AND ]
## Transitions:
-- On STRING shift to state 1
-- On NOT shift to state 2
-- On LPAR shift to state 3
-- On INT shift to state 4
-- On IDENT shift to state 5
-- On EXISTS shift to state 6
-- On DOLLAR_TYPE shift to state 8
-- On DOLLAR_KEY shift to state 9
-- On cte shift to state 10
-- On condition shift to state 20
-- On atom shift to state 21
## Reductions:

State 20:
## Known stack suffix:
## condition AND condition
## LR(1) items:
condition -> condition . OR condition [ RPAR OR EOF AND ]
condition -> condition . AND condition [ RPAR OR EOF AND ]
condition -> condition AND condition . [ RPAR OR EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production condition -> condition AND condition

State 21:
## Known stack suffix:
## atom
## LR(1) items:
condition -> atom . [ RPAR OR EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production condition -> atom

State 22:
## Known stack suffix:
## NOT condition
## LR(1) items:
condition -> condition . OR condition [ RPAR OR EOF AND ]
condition -> condition . AND condition [ RPAR OR EOF AND ]
condition -> NOT condition . [ RPAR OR EOF AND ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production condition -> NOT condition

State 23:
## Known stack suffix:
## condition_start
## LR(1) items:
condition_start' -> condition_start . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept condition_start

State 24:
## Known stack suffix:
## condition
## LR(1) items:
condition -> condition . OR condition [ OR EOF AND ]
condition -> condition . AND condition [ OR EOF AND ]
condition_start -> condition . EOF [ # ]
## Transitions:
-- On OR shift to state 17
-- On EOF shift to state 25
-- On AND shift to state 19
## Reductions:

State 25:
## Known stack suffix:
## condition EOF
## LR(1) items:
condition_start -> condition EOF . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production condition_start -> condition EOF

