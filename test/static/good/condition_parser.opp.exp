%{

  open Condition

%}
%start condition_start
%token AND
%token COLON
%token <string> COMP
%token DOLLAR_KEY
%token DOLLAR_TYPE
%token EOF
%token EXISTS
%token <string> IDENT
%token <string> INT
%token LPAR
%token NOT
%token OR
%token RPAR
%token <string> STRING
%left OR
%left AND
%left NOT
%type <Condition.condition> condition_start
%%

condition_start:
  _1 = condition _2 = EOF
    {                             ( _1 )}

condition:
  _1 = condition _2 = OR _3 = condition
    {                             ( Or(_1,_3) )}
| _1 = condition _2 = AND _3 = condition
    {                             ( And(_1,_3) )}
| _1 = NOT _2 = condition
    {                             ( Not(_2) )}
| _1 = LPAR _2 = condition _3 = RPAR
    {                             ( _2 )}
| _1 = atom
    {                             ( _1 )}

atom:
  _1 = cte _2 = COLON _3 = STRING
    {    ( let s = Latex_accents.normalize true _3 in
    (*i
      Printf.printf "regexp = %s\n" s;
      i*)
    Match(_1, Str.regexp_case_fold s) )}
| _1 = cte _2 = COMP _3 = cte
    {    ( Comp(_1,_2,_3) )}
| _1 = EXISTS _2 = IDENT
    {    ( Exists(String.uppercase _2) )}

cte:
  _1 = IDENT
    {                             ( Field(String.uppercase _1) )}
| _1 = INT
    {                             ( Cte(_1) )}
| _1 = STRING
    {                             ( Cte(_1) )}
| _1 = DOLLAR_KEY
    {                             ( Key )}
| _1 = DOLLAR_TYPE
    {                             ( Entrytype )}

%%
