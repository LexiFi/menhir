File "confluence-fnf.mly", line 123, characters 39-42:
Warning: the token EOF is unused.
File "confluence-fnf.mly", line 124, characters 39-50:
Warning: the token Lexer_error is unused.
%{
(* Pre Code *)
open Fnf_core;;

let parse_error s =
  Parser_util.error ("Unexpected token: '" ^ (Parser_util.get_current_token ()) ^ "'")
;;

let debug msg =
  print_string msg; print_newline ()
;;

let format_string str =
  let str = String.sub str 1 (String.length str - 2) in
  let len = String.length str in
  let rec format_string sofar i =
    if i >= len then sofar else
      match str.[i] with
      | '\\' -> format_string (sofar ^ String.make 1 '\\' ^ String.make 1 str.[i + 1]) (i + 2)
      | c    -> format_string (sofar ^ String.make 1 c) (i + 1)
  in
  format_string "" 0
;;

let scope_stack = ref [];;

let current_scope () =
  List.hd !scope_stack
;;

let push_scope scope =
  scope_stack := scope :: !scope_stack
;;

let pop_scope () =
  scope_stack := List.tl !scope_stack
;;

let is_root_scope () =
  !scope_stack = []
;;

let id_cell_table = Hashtbl.create 1024;;

let port_id_table = Hashtbl.create 1024;;

let clear_tables () =
  scope_stack := [];
  Hashtbl.clear id_cell_table;
  Hashtbl.clear port_id_table
;;

let add_cell id cell =
  if Hashtbl.mem id_cell_table id then
    Parser_util.error ("Duplicate cell ID: " ^ string_of_int id)
  else
    Hashtbl.add id_cell_table id cell
;;

let add_port port id =
  Hashtbl.add port_id_table port id
;;

let connect_ports () =
  Hashtbl.iter (fun port id ->
    try
      connect (Hashtbl.find id_cell_table id) port
    with Not_found ->
      Parser_util.error ("Reference cell ID not found: " ^ string_of_int id)
  ) port_id_table;
;;


%}
%start netlist
%token <string * (string * int * int)> Add
%token <string * (string * int * int)> And
%token <string * (string * int * int)> Bbox
%token <string * (string * int * int)> Buf
%token <string * (string * int * int)> Concat
%token <string * (string * int * int)> Const
%token <string * (string * int * int)> Dangle
%token <string * (string * int * int)> EOF
%token <string * (string * int * int)> Eq
%token <string * (string * int * int)> Ff
%token <string * (string * int * int)> Ffc
%token <string * (string * int * int)> Input
%token <string * (string * int * int)> Integer
%token <string * (string * int * int)> Lexer_error
%token <string * (string * int * int)> Lt
%token <string * (string * int * int)> Mul
%token <string * (string * int * int)> Mux
%token <string * (string * int * int)> Name
%token <string * (string * int * int)> Not
%token <string * (string * int * int)> Or
%token <string * (string * int * int)> Output
%token <string * (string * int * int)> Parenl
%token <string * (string * int * int)> Parenr
%token <string * (string * int * int)> Scope
%token <string * (string * int * int)> Select
%token <string * (string * int * int)> String
%token <string * (string * int * int)> Sub
%token <string * (string * int * int)> Xor
%type <Fnf_core.scope> netlist
%%

netlist:
  _1 = scope
    {           ( connect_ports (); let scope = current_scope () in clear_tables (); scope )}

scope:
  _1 = Parenl _2 = Scope _3 = scope_name _4 = Parenl _5 = scope_items _6 = Parenr _7 = Parenr
    {                                                              ( () )}

scope_name:
  _1 = name _2 = name
    {              ( push_scope (if is_root_scope () then create_root_scope _1 else create_sub_scope (current_scope ()) _1 _2) )}

scope_items:
  
    {                            ( () )}
| _1 = scope_items _2 = scope_item
    {                            ( () )}

scope_item:
  _1 = scope
    {           ( pop_scope () )}
| _1 = cell
    {           ( () )}

string:
  _1 = String
    {           ( format_string (fst _1) )}

integer:
  _1 = Integer
    {            ( int_of_string (fst _1) )}

integers_0:
  
    {                       ( [] )}
| _1 = integers_0 _2 = integer
    {                       ( _2 :: _1 )}

integers:
  _1 = integers_0
    {               ( List.rev _1 )}

width:
  _1 = integer
    {            ( _1 )}

name:
  _1 = string
    {           ( _1 )}

id:
  _1 = integer
    {            ( _1 )}

bit:
  _1 = integer
    {            ( _1 )}

cell:
  _1 = Parenl _2 = Input _3 = id _4 = name _5 = width _6 = Parenr
    {                                                         ( let cell = create_input (current_scope ()) _4 _5 in add_cell _3 cell )}
| _1 = Parenl _2 = Output _3 = id _4 = name _5 = width _6 = id _7 = Parenr
    {                                                         ( let cell, data = create_output (current_scope ()) _4 _5 in add_cell _3 cell; add_port data _6 )}
| _1 = Parenl _2 = Name _3 = id _4 = name _5 = width _6 = id _7 = Parenr
    {                                                         ( let cell, data = create_name   (current_scope ()) _4 _5 in add_cell _3 cell; add_port data _6 )}
| _1 = Parenl _2 = Dangle _3 = id _4 = Parenr
    {                                                         ( add_cell _3 (dangle (current_scope ())) )}
| _1 = Parenl _2 = Const _3 = id _4 = string _5 = Parenr
    {                                                         ( let cell = create_const (current_scope ()) _4 in add_cell _3 cell )}
| _1 = Parenl _2 = Buf _3 = id _4 = width _5 = id _6 = Parenr
    {                                                         ( let cell, data = create_buf (current_scope ()) _4 in add_cell _3 cell; add_port data _5 )}
| _1 = Parenl _2 = Not _3 = id _4 = width _5 = id _6 = Parenr
    {                                                         ( let cell, data = create_not (current_scope ()) _4 in add_cell _3 cell; add_port data _5 )}
| _1 = Parenl _2 = And _3 = id _4 = width _5 = id _6 = id _7 = Parenr
    {                                                         ( let cell, left, right = create_and  (current_scope ()) _4 in add_cell _3 cell; add_port left _5; add_port right _6 )}
| _1 = Parenl _2 = Xor _3 = id _4 = width _5 = id _6 = id _7 = Parenr
    {                                                         ( let cell, left, right = create_xor  (current_scope ()) _4 in add_cell _3 cell; add_port left _5; add_port right _6 )}
| _1 = Parenl _2 = Or _3 = id _4 = width _5 = id _6 = id _7 = Parenr
    {                                                         ( let cell, left, right = create_or   (current_scope ()) _4 in add_cell _3 cell; add_port left _5; add_port right _6 )}
| _1 = Parenl _2 = Concat _3 = id _4 = width _5 = width _6 = id _7 = id _8 = Parenr
    {                                                         ( let cell, left, right = create_concat (current_scope ()) _4 _5 in add_cell _3 cell; add_port left _6; add_port right _7 )}
| _1 = Parenl _2 = Select _3 = id _4 = width _5 = bit _6 = id _7 = Parenr
    {                                                         ( let cell, data = create_select (current_scope ()) _4 _5 in add_cell _3 cell; add_port data _6 )}
| _1 = Parenl _2 = Eq _3 = id _4 = width _5 = id _6 = id _7 = Parenr
    {                                                         ( let cell, left, right = create_eq   (current_scope ()) _4 in add_cell _3 cell; add_port left _5; add_port right _6 )}
| _1 = Parenl _2 = Lt _3 = id _4 = width _5 = id _6 = id _7 = Parenr
    {                                                         ( let cell, left, right = create_lt   (current_scope ()) _4 in add_cell _3 cell; add_port left _5; add_port right _6 )}
| _1 = Parenl _2 = Add _3 = id _4 = width _5 = id _6 = id _7 = Parenr
    {                                                         ( let cell, left, right = create_add  (current_scope ()) _4 in add_cell _3 cell; add_port left _5; add_port right _6 )}
| _1 = Parenl _2 = Sub _3 = id _4 = width _5 = id _6 = id _7 = Parenr
    {                                                         ( let cell, left, right = create_sub  (current_scope ()) _4 in add_cell _3 cell; add_port left _5; add_port right _6 )}
| _1 = Parenl _2 = Mul _3 = id _4 = width _5 = id _6 = id _7 = Parenr
    {                                                         ( let cell, left, right = create_mul  (current_scope ()) _4 in add_cell _3 cell; add_port left _5; add_port right _6 )}
| _1 = Parenl _2 = Mux _3 = id _4 = width _5 = id _6 = id _7 = id _8 = Parenr
    {                                                         ( let cell, select, data_0, data_1 = create_mux (current_scope ()) _4 in add_cell _3 cell; add_port select _5; add_port data_0 _6; add_port data_1 _7 )}
| _1 = Parenl _2 = Ff _3 = id _4 = width _5 = id _6 = id _7 = Parenr
    {                                                         ( let cell, clock, data = create_ff   (current_scope ()) _4 in add_cell _3 cell; add_port clock _5; add_port data _6 )}
| _1 = Parenl _2 = Ffc _3 = id _4 = width _5 = id _6 = id _7 = id _8 = Parenr
    {                                                         ( let cell, clear, clock, data = create_ffc (current_scope ()) _4 in add_cell _3 cell; add_port clear _5; add_port clock _6; add_port data _7 )}
| _1 = Parenl _2 = Bbox _3 = id _4 = string _5 = width _6 = width _7 = Parenl _8 = integers _9 = Parenr _10 = id _11 = Parenr
    {    ( let cell, data = create_bbox (current_scope ()) _4 _5 _6 _8 in add_cell _3 cell; add_port data _10 )}

%%

(* Post Code *)


