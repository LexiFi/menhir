File "confluence-psl.mly", line 69, characters 23-28:
Warning: the token Abort is unused.
File "confluence-psl.mly", line 57, characters 23-26:
Warning: the token Amp is unused.
File "confluence-psl.mly", line 46, characters 23-28:
Warning: the token Aster is unused.
File "confluence-psl.mly", line 141, characters 23-33:
Warning: the token Bang_equal is unused.
File "confluence-psl.mly", line 59, characters 23-26:
Warning: the token Bar is unused.
File "confluence-psl.mly", line 48, characters 23-34:
Warning: the token Bar_dash_gt is unused.
File "confluence-psl.mly", line 49, characters 23-35:
Warning: the token Bar_equal_gt is unused.
File "confluence-psl.mly", line 78, characters 23-30:
Warning: the token Boolean is unused.
File "confluence-psl.mly", line 52, characters 23-35:
Warning: the token Brackl_aster is unused.
File "confluence-psl.mly", line 54, characters 23-37:
Warning: the token Brackl_dash_gt is unused.
File "confluence-psl.mly", line 55, characters 23-35:
Warning: the token Brackl_equal is unused.
File "confluence-psl.mly", line 53, characters 23-41:
Warning: the token Brackl_plus_brackr is unused.
File "confluence-psl.mly", line 148, characters 23-29:
Warning: the token Carrot is unused.
File "confluence-psl.mly", line 79, characters 23-28:
Warning: the token Clock is unused.
File "confluence-psl.mly", line 45, characters 23-34:
Warning: the token Colon_equal is unused.
File "confluence-psl.mly", line 80, characters 23-28:
Warning: the token Const is unused.
File "confluence-psl.mly", line 81, characters 23-32:
Warning: the token Countones is unused.
File "confluence-psl.mly", line 146, characters 23-27:
Warning: the token Dash is unused.
File "confluence-psl.mly", line 83, characters 23-30:
Warning: the token Default is unused.
File "confluence-psl.mly", line 61, characters 23-29:
Warning: the token Dollar is unused.
File "confluence-psl.mly", line 88, characters 23-31:
Warning: the token Endpoint is unused.
File "confluence-psl.mly", line 44, characters 23-28:
Warning: the token Equal is unused.
File "confluence-psl.mly", line 140, characters 23-34:
Warning: the token Equal_equal is unused.
File "confluence-psl.mly", line 93, characters 23-29:
Warning: the token Forall is unused.
File "confluence-psl.mly", line 144, characters 23-25:
Warning: the token Gt is unused.
File "confluence-psl.mly", line 145, characters 23-31:
Warning: the token Gt_equal is unused.
File "confluence-psl.mly", line 95, characters 23-25:
Warning: the token In is unused.
File "confluence-psl.mly", line 96, characters 23-26:
Warning: the token Inf is unused.
File "confluence-psl.mly", line 152, characters 23-36:
Warning: the token Integer_width is unused.
File "confluence-psl.mly", line 98, characters 23-32:
Warning: the token Isunknown is unused.
File "confluence-psl.mly", line 159, characters 23-34:
Warning: the token Lexer_error is unused.
File "confluence-psl.mly", line 142, characters 23-25:
Warning: the token Lt is unused.
File "confluence-psl.mly", line 143, characters 23-31:
Warning: the token Lt_equal is unused.
File "confluence-psl.mly", line 112, characters 23-29:
Warning: the token Onehot is unused.
File "confluence-psl.mly", line 113, characters 23-30:
Warning: the token Onehot0 is unused.
File "confluence-psl.mly", line 47, characters 23-27:
Warning: the token Plus is unused.
File "confluence-psl.mly", line 115, characters 23-27:
Warning: the token Prev is unused.
File "confluence-psl.mly", line 114, characters 23-31:
Warning: the token Property is unused.
File "confluence-psl.mly", line 181, characters 7-15:
Warning: the token Question is unused.
File "confluence-psl.mly", line 120, characters 23-31:
Warning: the token Sequence is unused.
File "confluence-psl.mly", line 121, characters 23-29:
Warning: the token Stable is unused.
File "confluence-psl.mly", line 147, characters 23-28:
Warning: the token Tildy is unused.
File "confluence-psl.mly", line 125, characters 23-28:
Warning: the token Union is unused.
File "confluence-psl.mly", line 186, characters 7-13:
Warning: the token Vl_amp is unused.
File "confluence-psl.mly", line 183, characters 7-17:
Warning: the token Vl_amp_amp is unused.
File "confluence-psl.mly", line 190, characters 13-20:
Warning: the token Vl_bang is unused.
File "confluence-psl.mly", line 184, characters 7-13:
Warning: the token Vl_bar is unused.
File "confluence-psl.mly", line 182, characters 7-17:
Warning: the token Vl_bar_bar is unused.
File "confluence-psl.mly", line 190, characters 30-39:
Warning: the token Vl_uminus is unused.
File "confluence-psl.mly", line 190, characters 21-29:
Warning: the token Vl_uplus is unused.
File "confluence-psl.mly", line 133, characters 23-29:
Warning: the token Within is unused.
%{
(* Pre Code *)
let parse_error s =
  Parser_util.error ("Unexpected token: '" ^ (Parser_util.get_current_token ()) ^ "'")
;;

let debug msg =
  print_string msg; print_newline ()
;;

%}
%start psl_specification
%token <Psl_ast.token> A
%token <Psl_ast.token> AF
%token <Psl_ast.token> AG
%token <Psl_ast.token> AX
%token <Psl_ast.token> Abort
%token <Psl_ast.token> Always
%token <Psl_ast.token> Amp
%token <Psl_ast.token> Amp_amp
%token <Psl_ast.token> Assert
%token <Psl_ast.token> Assume
%token <Psl_ast.token> Assume_guarantee
%token <Psl_ast.token> Aster
%token <Psl_ast.token> At
%token <Psl_ast.token> Bang
%token <Psl_ast.token> Bang_equal
%token <Psl_ast.token> Bar
%token <Psl_ast.token> Bar_bar
%token <Psl_ast.token> Bar_dash_gt
%token <Psl_ast.token> Bar_equal_gt
%token <Psl_ast.token> Before
%token <Psl_ast.token> Before_
%token <Psl_ast.token> Before_bang
%token <Psl_ast.token> Before_bang_
%token <Psl_ast.token> Boolean
%token <Psl_ast.token> Bracel
%token <Psl_ast.token> Bracer
%token <Psl_ast.token> Brackl
%token <Psl_ast.token> Brackl_aster
%token <Psl_ast.token> Brackl_dash_gt
%token <Psl_ast.token> Brackl_equal
%token <Psl_ast.token> Brackl_plus_brackr
%token <Psl_ast.token> Brackr
%token <Psl_ast.token> Carrot
%token <Psl_ast.token> Clock
%token <Psl_ast.token> Colon
%token <Psl_ast.token> Colon_equal
%token <Psl_ast.token> Comma
%token <Psl_ast.token> Const
%token <Psl_ast.token> Countones
%token <Psl_ast.token> Cover
%token <Psl_ast.token> Dash
%token <Psl_ast.token> Dash_gt
%token <Psl_ast.token> Default
%token <Psl_ast.token> Dollar
%token <Psl_ast.token> E
%token <Psl_ast.token> EF
%token <Psl_ast.token> EG
%token <Psl_ast.token> EOF
%token <Psl_ast.token> EX
%token <Psl_ast.token> Endpoint
%token <Psl_ast.token> Equal
%token <Psl_ast.token> Equal_equal
%token <Psl_ast.token> Eventually_bang
%token <Psl_ast.token> F
%token <Psl_ast.token> Fairness
%token <Psl_ast.token> Fell
%token <Psl_ast.token> Forall
%token <Psl_ast.token> G
%token <Psl_ast.token> Gt
%token <Psl_ast.token> Gt_equal
%token <Psl_ast.token> Identifier
%token <Psl_ast.token> Identifier_esc
%token <Psl_ast.token> In
%token <Psl_ast.token> Inf
%token <Psl_ast.token> Inherit
%token <Psl_ast.token> Integer
%token <Psl_ast.token> Integer_width
%token <Psl_ast.token> Isunknown
%token <Psl_ast.token> Lexer_error
%token <Psl_ast.token> Lt
%token <Psl_ast.token> Lt_dash_gt
%token <Psl_ast.token> Lt_equal
%token <Psl_ast.token> Negedge
%token <Psl_ast.token> Never
%token <Psl_ast.token> Next
%token <Psl_ast.token> Next_a
%token <Psl_ast.token> Next_a_bang
%token <Psl_ast.token> Next_bang
%token <Psl_ast.token> Next_e
%token <Psl_ast.token> Next_e_bang
%token <Psl_ast.token> Next_event
%token <Psl_ast.token> Next_event_a
%token <Psl_ast.token> Next_event_a_bang
%token <Psl_ast.token> Next_event_bang
%token <Psl_ast.token> Next_event_e
%token <Psl_ast.token> Next_event_e_bang
%token <Psl_ast.token> Onehot
%token <Psl_ast.token> Onehot0
%token <Psl_ast.token> Parenl
%token <Psl_ast.token> Parenr
%token <Psl_ast.token> Period
%token <Psl_ast.token> Period_period
%token <Psl_ast.token> Plus
%token <Psl_ast.token> Posedge
%token <Psl_ast.token> Prev
%token <Psl_ast.token> Property
%token <Psl_ast.token> Report
%token <Psl_ast.token> Restrict
%token <Psl_ast.token> Restrict_guarantee
%token <Psl_ast.token> Rose
%token <Psl_ast.token> Semicolon
%token <Psl_ast.token> Sequence
%token <Psl_ast.token> Slash
%token <Psl_ast.token> Stable
%token <Psl_ast.token> String
%token <Psl_ast.token> Strong
%token <Psl_ast.token> Tildy
%token <Psl_ast.token> U
%token <Psl_ast.token> Union
%token <Psl_ast.token> Until
%token <Psl_ast.token> Until_
%token <Psl_ast.token> Until_bang
%token <Psl_ast.token> Until_bang_
%token <Psl_ast.token> Vmode
%token <Psl_ast.token> Vprop
%token <Psl_ast.token> Vunit
%token <Psl_ast.token> W
%token <Psl_ast.token> Within
%token <Psl_ast.token> X
%token <Psl_ast.token> X_bang
%right Always G Never
%right Dash_gt Lt_dash_gt
%right Bar_dash_gt Bar_equal_gt
%right Before Before_ Before_bang Before_bang_ U Until Until_ Until_bang Until_bang_ W
%right Eventually_bang F Next Next_a Next_a_bang Next_bang Next_e Next_e_bang Next_event Next_event_a_bang Next_event_bang Next_event_e_bang X X_bang
%left AF AG AX EF EG EX
%left Abort
%left Semicolon
%left Colon
%left Bar Bar_bar
%left Amp Amp_amp
%left Within
%left Brackl_aster Brackl_dash_gt Brackl_equal Brackl_plus_brackr
%left At
%left Union
%left Bang
%right Question
%left Vl_bar_bar
%left Vl_amp_amp
%left Vl_bar
%left Carrot
%left Vl_amp
%left Bang_equal Equal_equal
%left Gt Gt_equal Lt Lt_equal
%left Dash Plus
%left Tildy Vl_bang Vl_uminus Vl_uplus
%left Brackl
%type <Psl_ast.spec> psl_specification
%%

psl_specification:
  _1 = verification_items _2 = EOF
    {                           ( List.rev _1 )}

verification_items:
  
    {    ( [] )}
| _1 = verification_items _2 = verification_unit
    {                                         ( _2 :: _1 )}

verification_unit:
  _1 = vunit_type _2 = identifier _3 = Bracel _4 = inherit_specs _5 = vunit_items _6 = Bracer
    {                                                                                                       ( raise (Parser_util.Error "Verification unit requires module name.") )}
| _1 = vunit_type _2 = identifier _3 = Parenl _4 = hierarchical_hdl_name _5 = Parenr _6 = Bracel _7 = inherit_specs _8 = vunit_items _9 = Bracer
    {                                                                                                       ( List.hd _4, List.rev _8 )}

vunit_type:
  _1 = Vunit
    {          ( _1 )}
| _1 = Vprop
    {          ( raise (Parser_util.Error "\"vprop\" not supported.") )}
| _1 = Vmode
    {          ( raise (Parser_util.Error "\"vmode\" not supported.") )}

hierarchical_hdl_name:
  _1 = identifier _2 = hierarchical_hdl_names
    {                                      ( fst _1 :: List.rev _2 )}

hierarchical_hdl_names:
  
    {                                                      ( [] )}
| _1 = hierarchical_hdl_names _2 = path_separator _3 = identifier
    {                                                      ( raise (Parser_util.Error "Hierarchical names are not supported.") )}

path_separator:
  _1 = Period
    {           ( () )}
| _1 = Slash
    {           ( () )}

inherit_specs:
  
    {                               ( [] )}
| _1 = inherit_specs _2 = inherit_spec
    {                               ( _2 :: _1 )}

inherit_spec:
  _1 = Inherit _2 = identifier _3 = comma_identifiers
    {                                         ( Parser_util.error "\"inherit\" not supported." )}

vunit_items:
  
    {                           ( [] )}
| _1 = vunit_items _2 = vunit_item
    {                           ( _2 :: _1 )}

vunit_item:
  _1 = psl_directive
    {                    ( _1 )}

psl_directive:
  _1 = verification_directive
    {                                            ( _1 )}
| _1 = identifier _2 = Colon _3 = verification_directive
    {                                            ( _3 )}

verification_directive:
  _1 = Assert _2 = property _3 = report _4 = Semicolon
    {                                                         ( Psl_ast.Assert (snd _1, _2, _3) )}
| _1 = Assume _2 = property _3 = Semicolon
    {                                                         ( raise (Parser_util.Error "\"assume\" directive not supported.") )}
| _1 = Assume_guarantee _2 = property _3 = report _4 = Semicolon
    {                                                         ( raise (Parser_util.Error "\"assume_guarantee\" directive not supported.") )}
| _1 = Restrict _2 = property _3 = Semicolon
    {                                                         ( raise (Parser_util.Error "\"restrict\" directive not supported.") )}
| _1 = Restrict_guarantee _2 = property _3 = report _4 = Semicolon
    {                                                         ( raise (Parser_util.Error "\"restrict_guarantee\" directive not supported.") )}
| _1 = Cover _2 = property _3 = report _4 = Semicolon
    {                                                         ( raise (Parser_util.Error "\"cover\" directive not supported.") )}
| _1 = Fairness _2 = property _3 = Semicolon
    {                                                         ( raise (Parser_util.Error "\"fairness\" directive not supported.") )}
| _1 = Strong _2 = Fairness _3 = property _4 = Comma _5 = property _6 = Semicolon
    {                                                         ( raise (Parser_util.Error "\"strong fairness\" directive not supported.") )}

finite_range:
  _1 = number _2 = range_sym _3 = number
    {                            ( _1, _3 )}

range_sym:
  _1 = Colon
    {                  ( () )}
| _1 = Period_period
    {                  ( () )}

report:
  
    {                  ( "" )}
| _1 = Report _2 = String
    {                  ( let s = fst _2 in String.sub s 1 (String.length s - 2) )}

identifier:
  _1 = Identifier
    {                   ( _1 )}
| _1 = Identifier_esc
    {                   ( _1 )}

comma_identifiers:
  
    {                                        ( () )}
| _1 = Comma _2 = identifier _3 = comma_identifiers
    {                                        ( () )}

number:
  _1 = Integer
    {             ( int_of_string (fst _1) )}

property:
  _1 = identifier
    {                           ( Ltl.Variable (fst _1) )}
| _1 = Parenl _2 = property _3 = Parenr
    {                           ( _2 )}
| _1 = property _2 = At _3 = clock_expression
    {                                       ( _3 _1 )}
| _1 = Bang _2 = property
    {                                       ( Ltl.not_ _2 )}
| _1 = property _2 = Amp_amp _3 = property
    {                                       ( Ltl.and_ _1 _3 )}
| _1 = property _2 = Bar_bar _3 = property
    {                                       ( Ltl.or_ _1 _3 )}
| _1 = property _2 = Dash_gt _3 = property
    {                                       ( Ltl.imply _1 _3 )}
| _1 = property _2 = Lt_dash_gt _3 = property
    {                                       ( Ltl.equivalent _1 _3 )}
| _1 = X _2 = property
    {                                       ( Ltl.next false _2 )}
| _1 = X_bang _2 = property
    {                                       ( Ltl.next true  _2 )}
| _1 = F _2 = property
    {                                       ( Ltl.eventually _2 )}
| _1 = G _2 = property
    {                                       ( Ltl.always _2 )}
| _1 = Brackl _2 = property _3 = U _4 = property _5 = Brackr
    {                                       ( Ltl.until true  _2 _4 )}
| _1 = Brackl _2 = property _3 = W _4 = property _5 = Brackr
    {                                       ( Ltl.until false _2 _4 )}
| _1 = Always _2 = property
    {                                       ( Ltl.always _2 )}
| _1 = Never _2 = property
    {                                       ( Ltl.never _2 )}
| _1 = Next _2 = property
    {                                       ( Ltl.next false _2 )}
| _1 = Next_bang _2 = property
    {                                       ( Ltl.next true  _2 )}
| _1 = Eventually_bang _2 = property
    {                                       ( Ltl.eventually _2 )}
| _1 = property _2 = Until _3 = property
    {                                       ( Ltl.until false _1 _3 )}
| _1 = property _2 = Until_bang _3 = property
    {                                       ( Ltl.until true  _1 _3 )}
| _1 = property _2 = Until_bang_ _3 = property
    {                                       ( Ltl.until_overlap true  _1 _3 )}
| _1 = property _2 = Until_ _3 = property
    {                                       ( Ltl.until_overlap false _1 _3 )}
| _1 = property _2 = Before _3 = property
    {                                       ( Ltl.before false _1 _3 )}
| _1 = property _2 = Before_bang _3 = property
    {                                       ( Ltl.before true  _1 _3 )}
| _1 = property _2 = Before_bang_ _3 = property
    {                                       ( Ltl.before_overlap true  _1 _3 )}
| _1 = property _2 = Before_ _3 = property
    {                                       ( Ltl.before_overlap false _1 _3 )}
| _1 = X _2 = Brackl _3 = number _4 = Brackr _5 = Parenl _6 = property _7 = Parenr
    {                                                           ( Ltl.next_repeat false _3 _6 )}
| _1 = X_bang _2 = Brackl _3 = number _4 = Brackr _5 = Parenl _6 = property _7 = Parenr
    {                                                           ( Ltl.next_repeat true  _3 _6 )}
| _1 = Next _2 = Brackl _3 = number _4 = Brackr _5 = Parenl _6 = property _7 = Parenr
    {                                                           ( Ltl.next_repeat false _3 _6 )}
| _1 = Next_bang _2 = Brackl _3 = number _4 = Brackr _5 = Parenl _6 = property _7 = Parenr
    {                                                           ( Ltl.next_repeat true  _3 _6 )}
| _1 = Next_a _2 = Brackl _3 = finite_range _4 = Brackr _5 = Parenl _6 = property _7 = Parenr
    {                                                                    ( Ltl.next_ae false true  (fst _3) (snd _3) _6 )}
| _1 = Next_a_bang _2 = Brackl _3 = finite_range _4 = Brackr _5 = Parenl _6 = property _7 = Parenr
    {                                                                    ( Ltl.next_ae true  true  (fst _3) (snd _3) _6 )}
| _1 = Next_e _2 = Brackl _3 = finite_range _4 = Brackr _5 = Parenl _6 = property _7 = Parenr
    {                                                                    ( Ltl.next_ae false false (fst _3) (snd _3) _6 )}
| _1 = Next_e_bang _2 = Brackl _3 = finite_range _4 = Brackr _5 = Parenl _6 = property _7 = Parenr
    {                                                                    ( Ltl.next_ae true  false (fst _3) (snd _3) _6 )}
| _1 = Next_event _2 = Parenl _3 = property _4 = Parenr _5 = Parenl _6 = property _7 = Parenr
    {                                                                     (Ltl.next_event false _3 _6 )}
| _1 = Next_event_bang _2 = Parenl _3 = property _4 = Parenr _5 = Parenl _6 = property _7 = Parenr
    {                                                                     (Ltl.next_event true  _3 _6 )}
| _1 = Next_event _2 = Parenl _3 = property _4 = Parenr _5 = Brackl _6 = number _7 = Brackr _8 = Parenl _9 = property _10 = Parenr
    {                                                                                                ( Ltl.next_event_repeat false _6 _3 _9 )}
| _1 = Next_event_bang _2 = Parenl _3 = property _4 = Parenr _5 = Brackl _6 = number _7 = Brackr _8 = Parenl _9 = property _10 = Parenr
    {                                                                                                ( Ltl.next_event_repeat true  _6 _3 _9 )}
| _1 = Next_event_a _2 = Parenl _3 = property _4 = Parenr _5 = Brackl _6 = finite_range _7 = Brackr _8 = Parenl _9 = property _10 = Parenr
    {                                                                                                ( Ltl.next_event_ae false true  (fst _6) (snd _6) _3 _9 )}
| _1 = Next_event_a_bang _2 = Parenl _3 = property _4 = Parenr _5 = Brackl _6 = finite_range _7 = Brackr _8 = Parenl _9 = property _10 = Parenr
    {                                                                                                ( Ltl.next_event_ae true  true  (fst _6) (snd _6) _3 _9 )}
| _1 = Next_event_e _2 = Parenl _3 = property _4 = Parenr _5 = Brackl _6 = finite_range _7 = Brackr _8 = Parenl _9 = property _10 = Parenr
    {                                                                                                ( Ltl.next_event_ae false false (fst _6) (snd _6) _3 _9 )}
| _1 = Next_event_e_bang _2 = Parenl _3 = property _4 = Parenr _5 = Brackl _6 = finite_range _7 = Brackr _8 = Parenl _9 = property _10 = Parenr
    {                                                                                                ( Ltl.next_event_ae true  false (fst _6) (snd _6) _3 _9 )}
| _1 = AX _2 = property
    {                                        ( raise (Parser_util.Error "PSL OBE properties are not supported.") )}
| _1 = AF _2 = property
    {                                        ( raise (Parser_util.Error "PSL OBE properties are not supported.") )}
| _1 = AG _2 = property
    {                                        ( raise (Parser_util.Error "PSL OBE properties are not supported.") )}
| _1 = A _2 = Brackl _3 = property _4 = U _5 = property _6 = Brackr
    {                                        ( raise (Parser_util.Error "PSL OBE properties are not supported.") )}
| _1 = EX _2 = property
    {                                        ( raise (Parser_util.Error "PSL OBE properties are not supported.") )}
| _1 = EF _2 = property
    {                                        ( raise (Parser_util.Error "PSL OBE properties are not supported.") )}
| _1 = EG _2 = property
    {                                        ( raise (Parser_util.Error "PSL OBE properties are not supported.") )}
| _1 = E _2 = Brackl _3 = property _4 = U _5 = property _6 = Brackr
    {                                        ( raise (Parser_util.Error "PSL OBE properties are not supported.") )}

clock_expression:
  _1 = Parenl _2 = Posedge _3 = identifier _4 = Parenr
    {                                      ( Ltl.posedge (fst _3) )}
| _1 = Parenl _2 = Negedge _3 = identifier _4 = Parenr
    {                                      ( Ltl.negedge (fst _3) )}
| _1 = Rose _2 = Parenl _3 = identifier _4 = Parenr
    {                                      ( Ltl.posedge (fst _3) )}
| _1 = Fell _2 = Parenl _3 = identifier _4 = Parenr
    {                                      ( Ltl.negedge (fst _3) )}

%%

(* Post Code *)


