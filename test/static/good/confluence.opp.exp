File "confluence.mly", line 58, characters 26-36:
Warning: the token LexerError is unused.
File "confluence.mly", line 65, characters 26-35:
Warning: the token OP_PROP_U is unused.
%{
(* Pre Code *)
let parse_error s =
  CfParserUtil.error ("Unexpected token: '" ^ (CfParserUtil.get_current_token ()) ^ "'");;
%}
%start file
%token <Loc.loc * bool> BOOLEAN
%token <Loc.loc * string> BRACE_LEFT
%token <Loc.loc * string> BRACE_RIGHT
%token <Loc.loc * string> BRACKET_LEFT
%token <Loc.loc * string> BRACKET_RIGHT
%token <Loc.loc * string> COLON
%token <Loc.loc * string> COMP
%token <Loc.loc * string> COMPONENT
%token <Loc.loc * string> DOLLAR
%token <Loc.loc * string> EF
%token <Loc.loc * string> ELSE
%token <Loc.loc * string> END
%token <Loc.loc * string> ENVIRONMENT
%token <Loc.loc * string> EOF
%token <Loc.loc * float> FLOAT
%token <Loc.loc * string> FREE
%token <Loc.loc * string> IDENTIFIER
%token <Loc.loc * string> IF
%token <Loc.loc * string> IMPORT
%token <Loc.loc * Intbig.intbig> INTEGER
%token <Loc.loc * string> IS
%token <Loc.loc * string> LOCAL
%token <Loc.loc * string> LexerError
%token <Loc.loc * string> OP_ADD
%token <Loc.loc * string> OP_AND
%token <Loc.loc * string> OP_BW_AND
%token <Loc.loc * string> OP_BW_NOT
%token <Loc.loc * string> OP_BW_OR
%token <Loc.loc * string> OP_BW_XOR
%token <Loc.loc * string> OP_CONCAT
%token <Loc.loc * string> OP_CONNECT_LEFT
%token <Loc.loc * string> OP_CONNECT_RIGHT
%token <Loc.loc * string> OP_CONS
%token <Loc.loc * string> OP_DIV
%token <Loc.loc * string> OP_DOT
%token <Loc.loc * string> OP_EQU
%token <Loc.loc * string> OP_GE
%token <Loc.loc * string> OP_GT
%token <Loc.loc * string> OP_HEAD
%token <Loc.loc * string> OP_LE
%token <Loc.loc * string> OP_LENGTH
%token <Loc.loc * string> OP_LSHIFT
%token <Loc.loc * string> OP_LT
%token <Loc.loc * string> OP_MOD
%token <Loc.loc * string> OP_MUL
%token <Loc.loc * string> OP_NEQ
%token <Loc.loc * string> OP_NOT
%token <Loc.loc * string> OP_OR
%token <Loc.loc * string> OP_POW
%token <Loc.loc * string> OP_PROP_AND
%token <Loc.loc * string> OP_PROP_EQUIV
%token <Loc.loc * string> OP_PROP_IMPLY
%token <Loc.loc * string> OP_PROP_NOT
%token <Loc.loc * string> OP_PROP_OR
%token <Loc.loc * string> OP_PROP_U
%token <Loc.loc * string> OP_PROP_X
%token <Loc.loc * string> OP_PROP_XOR
%token <Loc.loc * string> OP_REPEAT
%token <Loc.loc * string> OP_RETURN
%token <Loc.loc * string> OP_RSHIFT
%token <Loc.loc * string> OP_SUB
%token <Loc.loc * string> OP_TAIL
%token <Loc.loc * string> OP_THEN
%token <Loc.loc * string> OP_UNIFY
%token <Loc.loc * string> OP_VEC_ADD
%token <Loc.loc * string> OP_VEC_AND
%token <Loc.loc * string> OP_VEC_CONCAT
%token <Loc.loc * string> OP_VEC_DIV
%token <Loc.loc * string> OP_VEC_ELSE
%token <Loc.loc * string> OP_VEC_EQU
%token <Loc.loc * string> OP_VEC_GE
%token <Loc.loc * string> OP_VEC_GE_S
%token <Loc.loc * string> OP_VEC_GT
%token <Loc.loc * string> OP_VEC_GT_S
%token <Loc.loc * string> OP_VEC_LE
%token <Loc.loc * string> OP_VEC_LE_S
%token <Loc.loc * string> OP_VEC_LSB
%token <Loc.loc * string> OP_VEC_LSBS
%token <Loc.loc * string> OP_VEC_LSHIFT
%token <Loc.loc * string> OP_VEC_LT
%token <Loc.loc * string> OP_VEC_LT_S
%token <Loc.loc * string> OP_VEC_MOD
%token <Loc.loc * string> OP_VEC_MSB
%token <Loc.loc * string> OP_VEC_MSBS
%token <Loc.loc * string> OP_VEC_MUL
%token <Loc.loc * string> OP_VEC_MUL_S
%token <Loc.loc * string> OP_VEC_NEQ
%token <Loc.loc * string> OP_VEC_NOT
%token <Loc.loc * string> OP_VEC_OR
%token <Loc.loc * string> OP_VEC_POW
%token <Loc.loc * string> OP_VEC_REPEAT
%token <Loc.loc * string> OP_VEC_RSHIFT
%token <Loc.loc * string> OP_VEC_RSHIFT_S
%token <Loc.loc * string> OP_VEC_SELECT
%token <Loc.loc * string> OP_VEC_SUB
%token <Loc.loc * string> OP_VEC_THEN
%token <Loc.loc * string> OP_VEC_XOR
%token <Loc.loc * string> OP_WIDTH
%token <Loc.loc * string> PAREN_LEFT
%token <Loc.loc * string> PAREN_RIGHT
%token <Loc.loc * string> PRIM
%token <Loc.loc * string> ROOTENVIRONMENT
%token <Loc.loc * string> STRING
%token <Loc.loc * string> VECTOR
%token <Loc.loc * string> WITH
%right OP_UNIFY
%right OP_CONNECT_LEFT
%left OP_CONNECT_RIGHT
%right ELSE OP_THEN OP_VEC_ELSE OP_VEC_THEN
%left OP_PROP_U
%left OP_PROP_IMPLY
%left OP_PROP_EQUIV
%left OP_OR OP_PROP_OR
%left OP_PROP_XOR
%left OP_AND OP_PROP_AND
%left OP_BW_OR OP_VEC_OR
%left OP_BW_XOR OP_VEC_XOR
%left OP_BW_AND OP_VEC_AND
%left OP_EQU OP_NEQ OP_VEC_EQU OP_VEC_NEQ
%right OP_CONCAT OP_RETURN OP_VEC_CONCAT
%right OP_CONS
%left OP_REPEAT OP_VEC_REPEAT
%left OP_GE OP_GT OP_LE OP_LT OP_VEC_GE OP_VEC_GE_S OP_VEC_GT OP_VEC_GT_S OP_VEC_LE OP_VEC_LE_S OP_VEC_LT OP_VEC_LT_S
%left OP_LSHIFT OP_RSHIFT OP_VEC_LSHIFT OP_VEC_RSHIFT OP_VEC_RSHIFT_S
%left OP_ADD OP_SUB OP_VEC_ADD OP_VEC_SUB
%left OP_DIV OP_MOD OP_MUL OP_VEC_DIV OP_VEC_MOD OP_VEC_MUL OP_VEC_MUL_S
%right OP_POW OP_VEC_POW
%nonassoc OP_BW_NOT OP_HEAD OP_LENGTH OP_NOT OP_PROP_NOT OP_PROP_X OP_TAIL OP_VEC_LSB OP_VEC_LSBS OP_VEC_MSB OP_VEC_MSBS OP_VEC_NOT OP_WIDTH
%left OP_DOT OP_VEC_SELECT
%type <CfAst.expr> file
%%

file:
  _1 = file_application _2 = EOF
    {    (
      CfParserUtil.set_env "";
      (snd _1)
    )}
| _1 = ENVIRONMENT _2 = STRING _3 = file_application _4 = EOF
    {    (
      CfParserUtil.set_env (CfParserUtil.format_string (snd _2));
      (snd _3)
    )}
| _1 = ROOTENVIRONMENT _2 = file_application _3 = EOF
    {    (
      (snd _2)
    )}

file_application:
  _1 = component_ports _2 = IS _3 = statements
    {                                     ( (_1, CfAst.Apply (CfParserUtil.current_file_loc (), "", CfAst.Comp (CfParserUtil.current_file_loc (), "", _1, _3), CfParserUtil.free_arg_list (CfParserUtil.current_file_loc ()) _1)) )}
| _1 = component_ports _2 = name_space_sugar
    {                                     ( (_1, CfAst.Apply (CfParserUtil.current_file_loc (), "", CfAst.Comp (CfParserUtil.current_file_loc (), "", _1, _2), CfParserUtil.free_arg_list (CfParserUtil.current_file_loc ()) _1)) )}

statements:
  
    {                          ( [] )}
| _1 = statements _2 = statement
    {                          ( _1 @ [_2] )}

statement:
  _1 = name_space
    {                    ( CfAst.ApplyStmt _1 )}
| _1 = ifelse
    {                    ( _1 )}
| _1 = component_named
    {                    ( _1 )}
| _1 = application
    {                    ( CfAst.ApplyStmt _1 )}
| _1 = connect
    {                    ( CfAst.ConnectStmt _1 )}

name_space:
  _1 = LOCAL _2 = locals _3 = IS _4 = statements _5 = END
    {                                    ( CfParserUtil.application_expr_of_namespace (fst _1) "" _2 _4 )}

name_space_sugar:
  _1 = WITH _2 = locals _3 = IS _4 = statements
    {                              ( [CfParserUtil.application_of_namespace (fst _1) "" _2 _4] )}

locals:
  _1 = local
    {          ( [_1] )}
| _1 = locals _2 = local
    {                 ( _1 @ [_2] )}

local:
  _1 = IDENTIFIER
    {               ( snd _1 )}

ifelse:
  _1 = IF _2 = expression _3 = statements _4 = ifelse_else
    {                                               ( CfParserUtil.conditional_of_ifelse (fst _1) _2 _3 _4 )}
| _1 = IF _2 = expression _3 = name_space_sugar _4 = ifelse_else
    {                                               ( CfParserUtil.conditional_of_ifelse (fst _1) _2 _3 _4 )}

ifelse_else:
  _1 = END
    {                                                ( [] )}
| _1 = ELSE _2 = statements _3 = END
    {                                                ( _2 )}
| _1 = ELSE _2 = name_space_sugar _3 = END
    {                                                ( _2 )}
| _1 = EF _2 = expression _3 = statements _4 = ifelse_else
    {                                                ( [CfParserUtil.conditional_of_ifelse (fst _1) _2 _3 _4] )}
| _1 = EF _2 = expression _3 = name_space_sugar _4 = ifelse_else
    {                                                ( [CfParserUtil.conditional_of_ifelse (fst _1) _2 _3 _4] )}

component_named:
  _1 = COMPONENT _2 = IDENTIFIER _3 = component_ports _4 = IS _5 = statements _6 = END
    {                                                               ( CfParserUtil.stmt_of_comp_named (fst _1) _2 _3 _5 )}
| _1 = COMPONENT _2 = IDENTIFIER _3 = component_ports _4 = name_space_sugar _5 = END
    {                                                               ( CfParserUtil.stmt_of_comp_named (fst _1) _2 _3 _4 )}

expression:
  _1 = expression_nonop
    {                     ( _1 )}
| _1 = expression_op
    {                     ( _1 )}

expression_nonop:
  _1 = PAREN_LEFT _2 = expression _3 = PAREN_RIGHT
    {                                       ( _2 )}
| _1 = STRING
    {                                       ( CfParserUtil.application_of_string (fst _1) (CfParserUtil.format_string (snd _1)) )}
| _1 = INTEGER
    {                                       ( CfAst.Integer (fst _1, snd _1) )}
| _1 = FLOAT
    {                                       ( CfAst.Float   (fst _1, snd _1) )}
| _1 = BOOLEAN
    {                                       ( CfAst.Boolean (fst _1, snd _1) )}
| _1 = VECTOR
    {                                       ( CfAst.Vector  (fst _1, snd _1) )}
| _1 = IDENTIFIER
    {                                       ( CfAst.Name (fst _1, snd _1) )}
| _1 = FREE
    {                                       ( CfAst.Free (fst _1) )}
| _1 = list_sugar
    {                                       ( _1 )}
| _1 = dot
    {                                       ( _1 )}
| _1 = vector_select
    {                                       ( _1 )}
| _1 = import_file
    {                                       ( _1 )}
| _1 = component_anon
    {                                       ( _1 )}
| _1 = primitive
    {                                       ( _1 )}
| _1 = name_space
    {                                       ( _1 )}
| _1 = application
    {                                       ( _1 )}
| _1 = func
    {                                       ( _1 )}
| _1 = record
    {                                       ( _1 )}
| _1 = nil
    {                                       ( _1 )}

expression_op:
  _1 = connect
    {                                       ( _1 )}
| _1 = prefix
    {                                       ( _1 )}
| _1 = infix
    {                                       ( _1 )}
| _1 = trifix
    {                                       ( _1 )}
| _1 = conditional
    {                                       ( _1 )}

list_sugar:
  _1 = BRACKET_LEFT _2 = list_sugar_items _3 = BRACKET_RIGHT
    {                                                 ( _2 )}

dot:
  _1 = expression_nonop _2 = OP_DOT _3 = IDENTIFIER
    {                                       ( CfAst.DotName     (fst _2, _1, snd _3) )}
| _1 = expression_nonop _2 = OP_DOT _3 = INTEGER
    {                                       ( CfAst.DotPosition (fst _2, _1, snd _3) )}

vector_select:
  _1 = expression_nonop _2 = OP_VEC_SELECT _3 = expression_nonop
    {                                                    ( CfParserUtil.application_of_infix _2 _1 _3 )}

import_file:
  _1 = IMPORT _2 = STRING
    {                  ( CfAst.Name (fst _1, CfParserUtil.add_import (CfParserUtil.format_string (snd _2))) )}

record:
  _1 = PAREN_LEFT _2 = record_fields _3 = PAREN_RIGHT
    {                                            ( CfAst.Record (fst _1, List.rev _2) )}
| _1 = PAREN_LEFT _2 = PAREN_RIGHT
    {                                            ( CfAst.Record (fst _1, []) )}

record_fields:
  _1 = IDENTIFIER _2 = COLON _3 = expression_nonop
    {                                                     ( [(snd _1, _3)] )}
| _1 = record_fields _2 = IDENTIFIER _3 = COLON _4 = expression_nonop
    {                                                     ( (snd _2, _4) :: _1 )}

nil:
  _1 = BRACKET_LEFT _2 = BRACKET_RIGHT
    {                                 ( CfAst.Record (fst _1, []) )}

component_anon:
  _1 = COMP _2 = component_ports _3 = IS _4 = statements _5 = END
    {                                               ( CfAst.Comp (fst _1, "", _2, _4) )}
| _1 = COMP _2 = component_ports _3 = name_space_sugar _4 = END
    {                                               ( CfAst.Comp (fst _1, "", _2, _3) )}

component_ports:
  
    {                                                ( [] )}
| _1 = component_ports _2 = direction_marker _3 = IDENTIFIER
    {                                                ( _1 @ [snd _3] )}

primitive:
  _1 = PRIM _2 = IDENTIFIER _3 = component_ports _4 = END
    {                                         ( CfAst.Prim (fst _1, snd _2, _3) )}

application:
  _1 = BRACE_LEFT _2 = expression_nonop _3 = arguments _4 = BRACE_RIGHT
    {    ( CfAst.Apply (fst _1, "", _2, _3) )}
| _1 = BRACE_LEFT _2 = IDENTIFIER _3 = COLON _4 = expression_nonop _5 = arguments _6 = BRACE_RIGHT
    {    ( CfParserUtil.connect_name (fst _3) _2 (CfAst.Apply (fst _1, snd _2, _4, _5)) )}

func:
  _1 = BRACE_LEFT _2 = expression_nonop _3 = arguments _4 = direction_marker _5 = DOLLAR _6 = arguments _7 = BRACE_RIGHT
    {    ( CfParserUtil.select_position (fst _5)                                        (CfAst.Apply (fst _1, "", _2, (_3 @ (CfAst.Free (fst _5) :: _6))))  (List.length _3 + 1) )}
| _1 = BRACE_LEFT _2 = IDENTIFIER _3 = COLON _4 = expression_nonop _5 = arguments _6 = direction_marker _7 = DOLLAR _8 = arguments _9 = BRACE_RIGHT
    {    ( CfParserUtil.select_position (fst _7) (CfParserUtil.connect_name (fst _3) _2 (CfAst.Apply (fst _1, snd _2, _4, (_5 @ (CfAst.Free (fst _7) :: _8))))) (List.length _5 + 1) )}

arguments:
  
    {                                                ( [] )}
| _1 = arguments _2 = direction_marker _3 = expression_nonop
    {                                                ( _1 @ [_3] )}

direction_marker:
  
    {           ( () )}
| _1 = OP_ADD
    {           ( () )}
| _1 = OP_SUB
    {           ( () )}
| _1 = OP_MUL
    {           ( () )}

connect:
  _1 = expression _2 = OP_UNIFY _3 = expression
    {                                           ( CfAst.Connect (fst _2, _1, _3) )}
| _1 = expression _2 = OP_CONNECT_LEFT _3 = expression
    {                                           ( CfAst.Connect (fst _2, _1, _3) )}
| _1 = expression _2 = OP_CONNECT_RIGHT _3 = expression
    {                                           ( CfAst.Connect (fst _2, _3, _1) )}

prefix:
  _1 = OP_NOT _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_BW_NOT _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_HEAD _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_TAIL _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_LENGTH _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_WIDTH _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_VEC_NOT _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_VEC_MSB _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_VEC_MSBS _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_VEC_LSB _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_VEC_LSBS _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_PROP_NOT _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}
| _1 = OP_PROP_X _2 = expression
    {                              ( CfParserUtil.application_of_prefix _1 _2 )}

infix:
  _1 = expression _2 = OP_BW_OR _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_OR _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_BW_XOR _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_XOR _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_BW_AND _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_AND _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_EQU _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_NEQ _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_EQU _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_NEQ _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_CONCAT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_RETURN _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_CONCAT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_CONS _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_REPEAT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_REPEAT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_LT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_GT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_LE _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_GE _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_LT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_GT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_LE _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_GE _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_LT_S _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_GT_S _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_LE_S _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_GE_S _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_LSHIFT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_RSHIFT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_LSHIFT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_RSHIFT _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_RSHIFT_S _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_ADD _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_SUB _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_ADD _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_SUB _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_MUL _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_DIV _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_MOD _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_MUL _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_DIV _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_MOD _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_MUL_S _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_POW _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_VEC_POW _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_PROP_AND _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_PROP_XOR _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_PROP_OR _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_PROP_EQUIV _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression _2 = OP_PROP_IMPLY _3 = expression
    {                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}

trifix:
  _1 = expression _2 = OP_VEC_THEN _3 = expression _4 = OP_VEC_ELSE _5 = expression
    {                                                              ( CfParserUtil.application_of_trifix _2 _1 _3 _5 )}

conditional:
  _1 = expression _2 = OP_AND _3 = expression
    {                                                      ( CfAst.Cond (fst _2, _1, _3, _1) )}
| _1 = expression _2 = OP_OR _3 = expression
    {                                                      ( CfAst.Cond (fst _2, _1, _1, _3) )}
| _1 = expression _2 = OP_THEN _3 = expression _4 = ELSE _5 = expression
    {                                                      ( CfAst.Cond (fst _2, _1, _3, _5) )}

list_sugar_items:
  _1 = expression_nonop
    {                                                              ( CfParserUtil.application_of_infix (CfAst.expr_loc _1, "::") _1 (CfAst.Record (CfAst.expr_loc _1, [])) )}
| _1 = expression_nonop _2 = list_sugar_items
    {                                                              ( CfParserUtil.application_of_infix (CfAst.expr_loc _1, "::") _1 _2 )}
| _1 = expression_nonop _2 = COLON _3 = expression_nonop
    {                                                              ( CfParserUtil.application_of_infix _2 _1 _3 )}
| _1 = expression_nonop _2 = COLON _3 = expression_nonop _4 = list_sugar_items
    {                                                              ( CfParserUtil.application_of_infix (fst _2, "++") (CfParserUtil.application_of_infix _2 _1 _3) _4 )}

%%

(* Post Code *)

