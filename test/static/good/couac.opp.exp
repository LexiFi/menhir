%{

  open Syntax

%}
%{

  let error i msg =
    Error.error2 (Parsing.rhs_start_pos i) (Parsing.rhs_end_pos i) msg

%}
%start grammar
%token <Syntax.action> ACTION
%token BAR
%token COLON
%token EOF
%token <Syntax.stretch> HEADER
%token LEFT
%token <string> LID
%token NONASSOC
%token <Syntax.stretch> OCAMLTYPE
%token <Syntax.offset> PERCENTPERCENT
%token PREC
%token RIGHT
%token START
%token TOKEN
%token TYPE
%token <string> UID
%type <Syntax.grammar> grammar
%%

grammar:
  _1 = declarations _2 = PERCENTPERCENT _3 = rules _4 = trailer
    {    ( List.rev _1, _3, _4 )}

trailer:
  _1 = EOF
    {    ( None )}
| _1 = PERCENTPERCENT
    {    ( Some _1 )}

declarations:
  
    {    ( [] )}
| _1 = declarations _2 = declaration
    {    ( _2 @ _1 )}

declaration:
  _1 = HEADER
    {    ( [ DCode _1 ] )}
| _1 = TOKEN _2 = terminals
    {    ( List.map (fun x -> DToken (None, x)) _2 )}
| _1 = TOKEN _2 = OCAMLTYPE _3 = terminals
    {    ( List.map (fun x -> DToken (Some _2, x)) _3 )}
| _1 = START _2 = nonterminals
    {    ( List.map (fun x -> DStart x) _2 )}
| _1 = TYPE _2 = OCAMLTYPE _3 = symbols
    {    ( [] )}
| _1 = LEFT _2 = symbols
    {    ( [] )}
| _1 = RIGHT _2 = symbols
    {    ( [] )}
| _1 = NONASSOC _2 = symbols
    {    ( [] )}

symbols:
  
    {    ( [] )}
| _1 = symbols _2 = symbol
    {    ( _2 :: _1 )}

symbol:
  _1 = LID
    {    ( _1 )}
| _1 = UID
    {    ( _1 )}

terminals:
  
    {    ( [] )}
| _1 = terminals _2 = UID
    {    ( _2 :: _1 )}
| _1 = terminals _2 = LID
    {    ( error 2 "Terminal symbols must begin with an uppercase letter." )}

nonterminals:
  
    {    ( [] )}
| _1 = nonterminals _2 = LID
    {    ( _2 :: _1 )}
| _1 = nonterminals _2 = UID
    {    ( error 2 "Nonterminal start symbols must begin with a lowercase letter." )}

rules:
  
    {    ( [] )}
| _1 = rules _2 = rule
    {    ( _2 :: _1 )}

rule:
  _1 = symbol _2 = COLON _3 = optional_bar _4 = production _5 = productions
    {    ( _1, _4 :: _5 )}

optional_bar:
  
    {    ( () )}
| _1 = BAR
    {    ( () )}

productions:
  
    {    ( [] )}
| _1 = productions _2 = BAR _3 = production
    {    ( _3 :: _1 )}

production:
  _1 = symbols _2 = precedence _3 = ACTION
    {    ( List.rev _1, _3, _2 )}

precedence:
  
    {    ( None )}
| _1 = PREC _2 = symbol
    {    ( Some _2 )}

%%
