State 0:
main' -> . main [ # ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 4
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On EOF shift to state 169
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 104
-- On CL_PAREN shift to state 105
-- On unode shift to state 170
-- On node shift to state 110
-- On main shift to state 172

State 1:
node -> WARNING . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> WARNING
-- On UNDEF reduce production node -> WARNING
-- On TEXT reduce production node -> WARNING
-- On OP_PAREN reduce production node -> WARNING
-- On LINE reduce production node -> WARNING
-- On INCLUDE reduce production node -> WARNING
-- On IFDEF reduce production node -> WARNING
-- On IF reduce production node -> WARNING
-- On IDENT reduce production node -> WARNING
-- On FUNIDENT reduce production node -> WARNING
-- On EXT reduce production node -> WARNING
-- On ERROR reduce production node -> WARNING
-- On EOF reduce production node -> WARNING
-- On ENDEF reduce production node -> WARNING
-- On DEFUN reduce production node -> WARNING
-- On DEF reduce production node -> WARNING
-- On CURRENT_LINE reduce production node -> WARNING
-- On CURRENT_FILE reduce production node -> WARNING
-- On COMMA reduce production node -> WARNING
-- On CL_PAREN reduce production node -> WARNING

State 2:
node -> UNDEF . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> UNDEF
-- On UNDEF reduce production node -> UNDEF
-- On TEXT reduce production node -> UNDEF
-- On OP_PAREN reduce production node -> UNDEF
-- On LINE reduce production node -> UNDEF
-- On INCLUDE reduce production node -> UNDEF
-- On IFDEF reduce production node -> UNDEF
-- On IF reduce production node -> UNDEF
-- On IDENT reduce production node -> UNDEF
-- On FUNIDENT reduce production node -> UNDEF
-- On EXT reduce production node -> UNDEF
-- On ERROR reduce production node -> UNDEF
-- On EOF reduce production node -> UNDEF
-- On ENDEF reduce production node -> UNDEF
-- On DEFUN reduce production node -> UNDEF
-- On DEF reduce production node -> UNDEF
-- On CURRENT_LINE reduce production node -> UNDEF
-- On CURRENT_FILE reduce production node -> UNDEF
-- On COMMA reduce production node -> UNDEF
-- On CL_PAREN reduce production node -> UNDEF

State 3:
node -> TEXT . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> TEXT
-- On UNDEF reduce production node -> TEXT
-- On TEXT reduce production node -> TEXT
-- On OP_PAREN reduce production node -> TEXT
-- On LINE reduce production node -> TEXT
-- On INCLUDE reduce production node -> TEXT
-- On IFDEF reduce production node -> TEXT
-- On IF reduce production node -> TEXT
-- On IDENT reduce production node -> TEXT
-- On FUNIDENT reduce production node -> TEXT
-- On EXT reduce production node -> TEXT
-- On ERROR reduce production node -> TEXT
-- On EOF reduce production node -> TEXT
-- On ENDEF reduce production node -> TEXT
-- On DEFUN reduce production node -> TEXT
-- On DEF reduce production node -> TEXT
-- On CURRENT_LINE reduce production node -> TEXT
-- On CURRENT_FILE reduce production node -> TEXT
-- On COMMA reduce production node -> TEXT
-- On CL_PAREN reduce production node -> TEXT

State 4:
unode -> OP_PAREN . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production unode -> OP_PAREN
-- On UNDEF reduce production unode -> OP_PAREN
-- On TEXT reduce production unode -> OP_PAREN
-- On OP_PAREN reduce production unode -> OP_PAREN
-- On LINE reduce production unode -> OP_PAREN
-- On INCLUDE reduce production unode -> OP_PAREN
-- On IFDEF reduce production unode -> OP_PAREN
-- On IF reduce production unode -> OP_PAREN
-- On IDENT reduce production unode -> OP_PAREN
-- On FUNIDENT reduce production unode -> OP_PAREN
-- On EXT reduce production unode -> OP_PAREN
-- On ERROR reduce production unode -> OP_PAREN
-- On EOF reduce production unode -> OP_PAREN
-- On ENDEF reduce production unode -> OP_PAREN
-- On DEFUN reduce production unode -> OP_PAREN
-- On DEF reduce production unode -> OP_PAREN
-- On CURRENT_LINE reduce production unode -> OP_PAREN
-- On CURRENT_FILE reduce production unode -> OP_PAREN
-- On COMMA reduce production unode -> OP_PAREN
-- On CL_PAREN reduce production unode -> OP_PAREN

State 5:
node -> LINE . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> LINE
-- On UNDEF reduce production node -> LINE
-- On TEXT reduce production node -> LINE
-- On OP_PAREN reduce production node -> LINE
-- On LINE reduce production node -> LINE
-- On INCLUDE reduce production node -> LINE
-- On IFDEF reduce production node -> LINE
-- On IF reduce production node -> LINE
-- On IDENT reduce production node -> LINE
-- On FUNIDENT reduce production node -> LINE
-- On EXT reduce production node -> LINE
-- On ERROR reduce production node -> LINE
-- On EOF reduce production node -> LINE
-- On ENDEF reduce production node -> LINE
-- On DEFUN reduce production node -> LINE
-- On DEF reduce production node -> LINE
-- On CURRENT_LINE reduce production node -> LINE
-- On CURRENT_FILE reduce production node -> LINE
-- On COMMA reduce production node -> LINE
-- On CL_PAREN reduce production node -> LINE

State 6:
node -> INCLUDE . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> INCLUDE
-- On UNDEF reduce production node -> INCLUDE
-- On TEXT reduce production node -> INCLUDE
-- On OP_PAREN reduce production node -> INCLUDE
-- On LINE reduce production node -> INCLUDE
-- On INCLUDE reduce production node -> INCLUDE
-- On IFDEF reduce production node -> INCLUDE
-- On IF reduce production node -> INCLUDE
-- On IDENT reduce production node -> INCLUDE
-- On FUNIDENT reduce production node -> INCLUDE
-- On EXT reduce production node -> INCLUDE
-- On ERROR reduce production node -> INCLUDE
-- On EOF reduce production node -> INCLUDE
-- On ENDEF reduce production node -> INCLUDE
-- On DEFUN reduce production node -> INCLUDE
-- On DEF reduce production node -> INCLUDE
-- On CURRENT_LINE reduce production node -> INCLUDE
-- On CURRENT_FILE reduce production node -> INCLUDE
-- On COMMA reduce production node -> INCLUDE
-- On CL_PAREN reduce production node -> INCLUDE

State 7:
node -> IFDEF . unode_list0 elif_list ENDIF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IFDEF . unode_list0 elif_list error [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING shift to state 8
-- On UNDEF shift to state 9
-- On TEXT shift to state 10
-- On OP_PAREN shift to state 11
-- On LINE shift to state 12
-- On INCLUDE shift to state 13
-- On IFDEF shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 78
-- On FUNIDENT shift to state 79
-- On EXT shift to state 84
-- On ERROR shift to state 85
-- On DEFUN shift to state 86
-- On DEF shift to state 127
-- On CURRENT_LINE shift to state 130
-- On CURRENT_FILE shift to state 131
-- On COMMA shift to state 132
-- On CL_PAREN shift to state 133
-- On unode_list0 shift to state 165
-- On unode shift to state 137
-- On node shift to state 139
-- On error reduce production unode_list0 ->
-- On ENDIF reduce production unode_list0 ->
-- On ELSE reduce production unode_list0 ->
-- On ELIF reduce production unode_list0 ->

State 8:
node -> WARNING . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> WARNING
-- On WARNING reduce production node -> WARNING
-- On UNDEF reduce production node -> WARNING
-- On TEXT reduce production node -> WARNING
-- On OP_PAREN reduce production node -> WARNING
-- On LINE reduce production node -> WARNING
-- On INCLUDE reduce production node -> WARNING
-- On IFDEF reduce production node -> WARNING
-- On IF reduce production node -> WARNING
-- On IDENT reduce production node -> WARNING
-- On FUNIDENT reduce production node -> WARNING
-- On EXT reduce production node -> WARNING
-- On ERROR reduce production node -> WARNING
-- On ENDIF reduce production node -> WARNING
-- On ELSE reduce production node -> WARNING
-- On ELIF reduce production node -> WARNING
-- On DEFUN reduce production node -> WARNING
-- On DEF reduce production node -> WARNING
-- On CURRENT_LINE reduce production node -> WARNING
-- On CURRENT_FILE reduce production node -> WARNING
-- On COMMA reduce production node -> WARNING
-- On CL_PAREN reduce production node -> WARNING

State 9:
node -> UNDEF . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> UNDEF
-- On WARNING reduce production node -> UNDEF
-- On UNDEF reduce production node -> UNDEF
-- On TEXT reduce production node -> UNDEF
-- On OP_PAREN reduce production node -> UNDEF
-- On LINE reduce production node -> UNDEF
-- On INCLUDE reduce production node -> UNDEF
-- On IFDEF reduce production node -> UNDEF
-- On IF reduce production node -> UNDEF
-- On IDENT reduce production node -> UNDEF
-- On FUNIDENT reduce production node -> UNDEF
-- On EXT reduce production node -> UNDEF
-- On ERROR reduce production node -> UNDEF
-- On ENDIF reduce production node -> UNDEF
-- On ELSE reduce production node -> UNDEF
-- On ELIF reduce production node -> UNDEF
-- On DEFUN reduce production node -> UNDEF
-- On DEF reduce production node -> UNDEF
-- On CURRENT_LINE reduce production node -> UNDEF
-- On CURRENT_FILE reduce production node -> UNDEF
-- On COMMA reduce production node -> UNDEF
-- On CL_PAREN reduce production node -> UNDEF

State 10:
node -> TEXT . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> TEXT
-- On WARNING reduce production node -> TEXT
-- On UNDEF reduce production node -> TEXT
-- On TEXT reduce production node -> TEXT
-- On OP_PAREN reduce production node -> TEXT
-- On LINE reduce production node -> TEXT
-- On INCLUDE reduce production node -> TEXT
-- On IFDEF reduce production node -> TEXT
-- On IF reduce production node -> TEXT
-- On IDENT reduce production node -> TEXT
-- On FUNIDENT reduce production node -> TEXT
-- On EXT reduce production node -> TEXT
-- On ERROR reduce production node -> TEXT
-- On ENDIF reduce production node -> TEXT
-- On ELSE reduce production node -> TEXT
-- On ELIF reduce production node -> TEXT
-- On DEFUN reduce production node -> TEXT
-- On DEF reduce production node -> TEXT
-- On CURRENT_LINE reduce production node -> TEXT
-- On CURRENT_FILE reduce production node -> TEXT
-- On COMMA reduce production node -> TEXT
-- On CL_PAREN reduce production node -> TEXT

State 11:
unode -> OP_PAREN . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production unode -> OP_PAREN
-- On WARNING reduce production unode -> OP_PAREN
-- On UNDEF reduce production unode -> OP_PAREN
-- On TEXT reduce production unode -> OP_PAREN
-- On OP_PAREN reduce production unode -> OP_PAREN
-- On LINE reduce production unode -> OP_PAREN
-- On INCLUDE reduce production unode -> OP_PAREN
-- On IFDEF reduce production unode -> OP_PAREN
-- On IF reduce production unode -> OP_PAREN
-- On IDENT reduce production unode -> OP_PAREN
-- On FUNIDENT reduce production unode -> OP_PAREN
-- On EXT reduce production unode -> OP_PAREN
-- On ERROR reduce production unode -> OP_PAREN
-- On ENDIF reduce production unode -> OP_PAREN
-- On ELSE reduce production unode -> OP_PAREN
-- On ELIF reduce production unode -> OP_PAREN
-- On DEFUN reduce production unode -> OP_PAREN
-- On DEF reduce production unode -> OP_PAREN
-- On CURRENT_LINE reduce production unode -> OP_PAREN
-- On CURRENT_FILE reduce production unode -> OP_PAREN
-- On COMMA reduce production unode -> OP_PAREN
-- On CL_PAREN reduce production unode -> OP_PAREN

State 12:
node -> LINE . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> LINE
-- On WARNING reduce production node -> LINE
-- On UNDEF reduce production node -> LINE
-- On TEXT reduce production node -> LINE
-- On OP_PAREN reduce production node -> LINE
-- On LINE reduce production node -> LINE
-- On INCLUDE reduce production node -> LINE
-- On IFDEF reduce production node -> LINE
-- On IF reduce production node -> LINE
-- On IDENT reduce production node -> LINE
-- On FUNIDENT reduce production node -> LINE
-- On EXT reduce production node -> LINE
-- On ERROR reduce production node -> LINE
-- On ENDIF reduce production node -> LINE
-- On ELSE reduce production node -> LINE
-- On ELIF reduce production node -> LINE
-- On DEFUN reduce production node -> LINE
-- On DEF reduce production node -> LINE
-- On CURRENT_LINE reduce production node -> LINE
-- On CURRENT_FILE reduce production node -> LINE
-- On COMMA reduce production node -> LINE
-- On CL_PAREN reduce production node -> LINE

State 13:
node -> INCLUDE . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> INCLUDE
-- On WARNING reduce production node -> INCLUDE
-- On UNDEF reduce production node -> INCLUDE
-- On TEXT reduce production node -> INCLUDE
-- On OP_PAREN reduce production node -> INCLUDE
-- On LINE reduce production node -> INCLUDE
-- On INCLUDE reduce production node -> INCLUDE
-- On IFDEF reduce production node -> INCLUDE
-- On IF reduce production node -> INCLUDE
-- On IDENT reduce production node -> INCLUDE
-- On FUNIDENT reduce production node -> INCLUDE
-- On EXT reduce production node -> INCLUDE
-- On ERROR reduce production node -> INCLUDE
-- On ENDIF reduce production node -> INCLUDE
-- On ELSE reduce production node -> INCLUDE
-- On ELIF reduce production node -> INCLUDE
-- On DEFUN reduce production node -> INCLUDE
-- On DEF reduce production node -> INCLUDE
-- On CURRENT_LINE reduce production node -> INCLUDE
-- On CURRENT_FILE reduce production node -> INCLUDE
-- On COMMA reduce production node -> INCLUDE
-- On CL_PAREN reduce production node -> INCLUDE

State 14:
node -> IFDEF . unode_list0 elif_list ENDIF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IFDEF . unode_list0 elif_list error [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING shift to state 8
-- On UNDEF shift to state 9
-- On TEXT shift to state 10
-- On OP_PAREN shift to state 11
-- On LINE shift to state 12
-- On INCLUDE shift to state 13
-- On IFDEF shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 78
-- On FUNIDENT shift to state 79
-- On EXT shift to state 84
-- On ERROR shift to state 85
-- On DEFUN shift to state 86
-- On DEF shift to state 127
-- On CURRENT_LINE shift to state 130
-- On CURRENT_FILE shift to state 131
-- On COMMA shift to state 132
-- On CL_PAREN shift to state 133
-- On unode_list0 shift to state 161
-- On unode shift to state 137
-- On node shift to state 139
-- On error reduce production unode_list0 ->
-- On ENDIF reduce production unode_list0 ->
-- On ELSE reduce production unode_list0 ->
-- On ELIF reduce production unode_list0 ->

State 15:
node -> IF . test unode_list0 elif_list ENDIF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IF . test unode_list0 elif_list error [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On TRUE shift to state 16
-- On OP_PAREN shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 53
-- On DEFINED shift to state 54
-- On test shift to state 77
-- On bexpr shift to state 144
-- On aexpr shift to state 57

State 16:
bexpr -> TRUE . [ OR ENDTEST CL_PAREN AND ]
-- On OR reduce production bexpr -> TRUE
-- On ENDTEST reduce production bexpr -> TRUE
-- On CL_PAREN reduce production bexpr -> TRUE
-- On AND reduce production bexpr -> TRUE

State 17:
aexpr -> OP_PAREN . aexpr_list CL_PAREN [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
bexpr -> OP_PAREN . bexpr CL_PAREN [ OR ENDTEST CL_PAREN AND ]
-- On TRUE shift to state 16
-- On OP_PAREN shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 53
-- On DEFINED shift to state 54
-- On bexpr shift to state 70
-- On aexpr_list shift to state 25
-- On aexpr shift to state 76

State 18:
bexpr -> NOT . bexpr [ OR ENDTEST CL_PAREN AND ]
-- On TRUE shift to state 16
-- On OP_PAREN shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 53
-- On DEFINED shift to state 54
-- On bexpr shift to state 56
-- On aexpr shift to state 57

State 19:
aexpr -> MINUS . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 52

State 20:
aexpr -> OP_PAREN . aexpr_list CL_PAREN [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr_list shift to state 25
-- On aexpr shift to state 27

State 21:
aexpr -> LNOT . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 24

State 22:
aexpr -> INT . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> INT
-- On SLASH reduce production aexpr -> INT
-- On PLUS reduce production aexpr -> INT
-- On OR reduce production aexpr -> INT
-- On NE reduce production aexpr -> INT
-- On MOD reduce production aexpr -> INT
-- On MINUS reduce production aexpr -> INT
-- On LXOR reduce production aexpr -> INT
-- On LT reduce production aexpr -> INT
-- On LSR reduce production aexpr -> INT
-- On LSL reduce production aexpr -> INT
-- On LOR reduce production aexpr -> INT
-- On LE reduce production aexpr -> INT
-- On LAND reduce production aexpr -> INT
-- On GT reduce production aexpr -> INT
-- On GE reduce production aexpr -> INT
-- On EQ reduce production aexpr -> INT
-- On ENDTEST reduce production aexpr -> INT
-- On COMMA reduce production aexpr -> INT
-- On CL_PAREN reduce production aexpr -> INT
-- On ASR reduce production aexpr -> INT
-- On AND reduce production aexpr -> INT

State 23:
aexpr -> IDENT . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> IDENT
-- On SLASH reduce production aexpr -> IDENT
-- On PLUS reduce production aexpr -> IDENT
-- On OR reduce production aexpr -> IDENT
-- On NE reduce production aexpr -> IDENT
-- On MOD reduce production aexpr -> IDENT
-- On MINUS reduce production aexpr -> IDENT
-- On LXOR reduce production aexpr -> IDENT
-- On LT reduce production aexpr -> IDENT
-- On LSR reduce production aexpr -> IDENT
-- On LSL reduce production aexpr -> IDENT
-- On LOR reduce production aexpr -> IDENT
-- On LE reduce production aexpr -> IDENT
-- On LAND reduce production aexpr -> IDENT
-- On GT reduce production aexpr -> IDENT
-- On GE reduce production aexpr -> IDENT
-- On EQ reduce production aexpr -> IDENT
-- On ENDTEST reduce production aexpr -> IDENT
-- On COMMA reduce production aexpr -> IDENT
-- On CL_PAREN reduce production aexpr -> IDENT
-- On ASR reduce production aexpr -> IDENT
-- On AND reduce production aexpr -> IDENT

State 24:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> LNOT aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> LNOT aexpr
-- On SLASH reduce production aexpr -> LNOT aexpr
-- On PLUS reduce production aexpr -> LNOT aexpr
-- On OR reduce production aexpr -> LNOT aexpr
-- On NE reduce production aexpr -> LNOT aexpr
-- On MOD reduce production aexpr -> LNOT aexpr
-- On MINUS reduce production aexpr -> LNOT aexpr
-- On LXOR reduce production aexpr -> LNOT aexpr
-- On LT reduce production aexpr -> LNOT aexpr
-- On LSR reduce production aexpr -> LNOT aexpr
-- On LSL reduce production aexpr -> LNOT aexpr
-- On LOR reduce production aexpr -> LNOT aexpr
-- On LE reduce production aexpr -> LNOT aexpr
-- On LAND reduce production aexpr -> LNOT aexpr
-- On GT reduce production aexpr -> LNOT aexpr
-- On GE reduce production aexpr -> LNOT aexpr
-- On EQ reduce production aexpr -> LNOT aexpr
-- On ENDTEST reduce production aexpr -> LNOT aexpr
-- On COMMA reduce production aexpr -> LNOT aexpr
-- On CL_PAREN reduce production aexpr -> LNOT aexpr
-- On ASR reduce production aexpr -> LNOT aexpr
-- On AND reduce production aexpr -> LNOT aexpr

State 25:
aexpr -> OP_PAREN aexpr_list . CL_PAREN [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On CL_PAREN shift to state 26

State 26:
aexpr -> OP_PAREN aexpr_list CL_PAREN . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On SLASH reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On PLUS reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On OR reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On NE reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On MOD reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On MINUS reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On LXOR reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On LT reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On LSR reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On LSL reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On LOR reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On LE reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On LAND reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On GT reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On GE reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On EQ reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On ENDTEST reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On COMMA reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On CL_PAREN reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On ASR reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN
-- On AND reduce production aexpr -> OP_PAREN aexpr_list CL_PAREN

State 27:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS MOD MINUS LXOR LSR LSL LOR LAND COMMA CL_PAREN ASR ]
aexpr_list -> aexpr . COMMA aexpr_list [ CL_PAREN ]
aexpr_list -> aexpr . [ CL_PAREN ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On PLUS shift to state 46
-- On MOD shift to state 30
-- On MINUS shift to state 48
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On COMMA shift to state 50
-- On ASR shift to state 42
-- On CL_PAREN reduce production aexpr_list -> aexpr

State 28:
aexpr -> aexpr STAR . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 29

State 29:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr STAR aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On MOD shift to state 30
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On STAR reduce production aexpr -> aexpr STAR aexpr
-- On SLASH reduce production aexpr -> aexpr STAR aexpr
-- On PLUS reduce production aexpr -> aexpr STAR aexpr
-- On OR reduce production aexpr -> aexpr STAR aexpr
-- On NE reduce production aexpr -> aexpr STAR aexpr
-- On MINUS reduce production aexpr -> aexpr STAR aexpr
-- On LT reduce production aexpr -> aexpr STAR aexpr
-- On LE reduce production aexpr -> aexpr STAR aexpr
-- On GT reduce production aexpr -> aexpr STAR aexpr
-- On GE reduce production aexpr -> aexpr STAR aexpr
-- On EQ reduce production aexpr -> aexpr STAR aexpr
-- On ENDTEST reduce production aexpr -> aexpr STAR aexpr
-- On COMMA reduce production aexpr -> aexpr STAR aexpr
-- On CL_PAREN reduce production aexpr -> aexpr STAR aexpr
-- On AND reduce production aexpr -> aexpr STAR aexpr

State 30:
aexpr -> aexpr MOD . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 31

State 31:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr MOD aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> aexpr MOD aexpr
-- On SLASH reduce production aexpr -> aexpr MOD aexpr
-- On PLUS reduce production aexpr -> aexpr MOD aexpr
-- On OR reduce production aexpr -> aexpr MOD aexpr
-- On NE reduce production aexpr -> aexpr MOD aexpr
-- On MOD reduce production aexpr -> aexpr MOD aexpr
-- On MINUS reduce production aexpr -> aexpr MOD aexpr
-- On LXOR reduce production aexpr -> aexpr MOD aexpr
-- On LT reduce production aexpr -> aexpr MOD aexpr
-- On LSR reduce production aexpr -> aexpr MOD aexpr
-- On LSL reduce production aexpr -> aexpr MOD aexpr
-- On LOR reduce production aexpr -> aexpr MOD aexpr
-- On LE reduce production aexpr -> aexpr MOD aexpr
-- On LAND reduce production aexpr -> aexpr MOD aexpr
-- On GT reduce production aexpr -> aexpr MOD aexpr
-- On GE reduce production aexpr -> aexpr MOD aexpr
-- On EQ reduce production aexpr -> aexpr MOD aexpr
-- On ENDTEST reduce production aexpr -> aexpr MOD aexpr
-- On COMMA reduce production aexpr -> aexpr MOD aexpr
-- On CL_PAREN reduce production aexpr -> aexpr MOD aexpr
-- On ASR reduce production aexpr -> aexpr MOD aexpr
-- On AND reduce production aexpr -> aexpr MOD aexpr

State 32:
aexpr -> aexpr LXOR . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 33

State 33:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr LXOR aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> aexpr LXOR aexpr
-- On SLASH reduce production aexpr -> aexpr LXOR aexpr
-- On PLUS reduce production aexpr -> aexpr LXOR aexpr
-- On OR reduce production aexpr -> aexpr LXOR aexpr
-- On NE reduce production aexpr -> aexpr LXOR aexpr
-- On MOD reduce production aexpr -> aexpr LXOR aexpr
-- On MINUS reduce production aexpr -> aexpr LXOR aexpr
-- On LXOR reduce production aexpr -> aexpr LXOR aexpr
-- On LT reduce production aexpr -> aexpr LXOR aexpr
-- On LSR reduce production aexpr -> aexpr LXOR aexpr
-- On LSL reduce production aexpr -> aexpr LXOR aexpr
-- On LOR reduce production aexpr -> aexpr LXOR aexpr
-- On LE reduce production aexpr -> aexpr LXOR aexpr
-- On LAND reduce production aexpr -> aexpr LXOR aexpr
-- On GT reduce production aexpr -> aexpr LXOR aexpr
-- On GE reduce production aexpr -> aexpr LXOR aexpr
-- On EQ reduce production aexpr -> aexpr LXOR aexpr
-- On ENDTEST reduce production aexpr -> aexpr LXOR aexpr
-- On COMMA reduce production aexpr -> aexpr LXOR aexpr
-- On CL_PAREN reduce production aexpr -> aexpr LXOR aexpr
-- On ASR reduce production aexpr -> aexpr LXOR aexpr
-- On AND reduce production aexpr -> aexpr LXOR aexpr

State 34:
aexpr -> aexpr LSR . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 35

State 35:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr LSR aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> aexpr LSR aexpr
-- On SLASH reduce production aexpr -> aexpr LSR aexpr
-- On PLUS reduce production aexpr -> aexpr LSR aexpr
-- On OR reduce production aexpr -> aexpr LSR aexpr
-- On NE reduce production aexpr -> aexpr LSR aexpr
-- On MOD reduce production aexpr -> aexpr LSR aexpr
-- On MINUS reduce production aexpr -> aexpr LSR aexpr
-- On LXOR reduce production aexpr -> aexpr LSR aexpr
-- On LT reduce production aexpr -> aexpr LSR aexpr
-- On LSR reduce production aexpr -> aexpr LSR aexpr
-- On LSL reduce production aexpr -> aexpr LSR aexpr
-- On LOR reduce production aexpr -> aexpr LSR aexpr
-- On LE reduce production aexpr -> aexpr LSR aexpr
-- On LAND reduce production aexpr -> aexpr LSR aexpr
-- On GT reduce production aexpr -> aexpr LSR aexpr
-- On GE reduce production aexpr -> aexpr LSR aexpr
-- On EQ reduce production aexpr -> aexpr LSR aexpr
-- On ENDTEST reduce production aexpr -> aexpr LSR aexpr
-- On COMMA reduce production aexpr -> aexpr LSR aexpr
-- On CL_PAREN reduce production aexpr -> aexpr LSR aexpr
-- On ASR reduce production aexpr -> aexpr LSR aexpr
-- On AND reduce production aexpr -> aexpr LSR aexpr

State 36:
aexpr -> aexpr LSL . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 37

State 37:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr LSL aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> aexpr LSL aexpr
-- On SLASH reduce production aexpr -> aexpr LSL aexpr
-- On PLUS reduce production aexpr -> aexpr LSL aexpr
-- On OR reduce production aexpr -> aexpr LSL aexpr
-- On NE reduce production aexpr -> aexpr LSL aexpr
-- On MOD reduce production aexpr -> aexpr LSL aexpr
-- On MINUS reduce production aexpr -> aexpr LSL aexpr
-- On LXOR reduce production aexpr -> aexpr LSL aexpr
-- On LT reduce production aexpr -> aexpr LSL aexpr
-- On LSR reduce production aexpr -> aexpr LSL aexpr
-- On LSL reduce production aexpr -> aexpr LSL aexpr
-- On LOR reduce production aexpr -> aexpr LSL aexpr
-- On LE reduce production aexpr -> aexpr LSL aexpr
-- On LAND reduce production aexpr -> aexpr LSL aexpr
-- On GT reduce production aexpr -> aexpr LSL aexpr
-- On GE reduce production aexpr -> aexpr LSL aexpr
-- On EQ reduce production aexpr -> aexpr LSL aexpr
-- On ENDTEST reduce production aexpr -> aexpr LSL aexpr
-- On COMMA reduce production aexpr -> aexpr LSL aexpr
-- On CL_PAREN reduce production aexpr -> aexpr LSL aexpr
-- On ASR reduce production aexpr -> aexpr LSL aexpr
-- On AND reduce production aexpr -> aexpr LSL aexpr

State 38:
aexpr -> aexpr LOR . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 39

State 39:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr LOR aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> aexpr LOR aexpr
-- On SLASH reduce production aexpr -> aexpr LOR aexpr
-- On PLUS reduce production aexpr -> aexpr LOR aexpr
-- On OR reduce production aexpr -> aexpr LOR aexpr
-- On NE reduce production aexpr -> aexpr LOR aexpr
-- On MOD reduce production aexpr -> aexpr LOR aexpr
-- On MINUS reduce production aexpr -> aexpr LOR aexpr
-- On LXOR reduce production aexpr -> aexpr LOR aexpr
-- On LT reduce production aexpr -> aexpr LOR aexpr
-- On LSR reduce production aexpr -> aexpr LOR aexpr
-- On LSL reduce production aexpr -> aexpr LOR aexpr
-- On LOR reduce production aexpr -> aexpr LOR aexpr
-- On LE reduce production aexpr -> aexpr LOR aexpr
-- On LAND reduce production aexpr -> aexpr LOR aexpr
-- On GT reduce production aexpr -> aexpr LOR aexpr
-- On GE reduce production aexpr -> aexpr LOR aexpr
-- On EQ reduce production aexpr -> aexpr LOR aexpr
-- On ENDTEST reduce production aexpr -> aexpr LOR aexpr
-- On COMMA reduce production aexpr -> aexpr LOR aexpr
-- On CL_PAREN reduce production aexpr -> aexpr LOR aexpr
-- On ASR reduce production aexpr -> aexpr LOR aexpr
-- On AND reduce production aexpr -> aexpr LOR aexpr

State 40:
aexpr -> aexpr LAND . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 41

State 41:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr LAND aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> aexpr LAND aexpr
-- On SLASH reduce production aexpr -> aexpr LAND aexpr
-- On PLUS reduce production aexpr -> aexpr LAND aexpr
-- On OR reduce production aexpr -> aexpr LAND aexpr
-- On NE reduce production aexpr -> aexpr LAND aexpr
-- On MOD reduce production aexpr -> aexpr LAND aexpr
-- On MINUS reduce production aexpr -> aexpr LAND aexpr
-- On LXOR reduce production aexpr -> aexpr LAND aexpr
-- On LT reduce production aexpr -> aexpr LAND aexpr
-- On LSR reduce production aexpr -> aexpr LAND aexpr
-- On LSL reduce production aexpr -> aexpr LAND aexpr
-- On LOR reduce production aexpr -> aexpr LAND aexpr
-- On LE reduce production aexpr -> aexpr LAND aexpr
-- On LAND reduce production aexpr -> aexpr LAND aexpr
-- On GT reduce production aexpr -> aexpr LAND aexpr
-- On GE reduce production aexpr -> aexpr LAND aexpr
-- On EQ reduce production aexpr -> aexpr LAND aexpr
-- On ENDTEST reduce production aexpr -> aexpr LAND aexpr
-- On COMMA reduce production aexpr -> aexpr LAND aexpr
-- On CL_PAREN reduce production aexpr -> aexpr LAND aexpr
-- On ASR reduce production aexpr -> aexpr LAND aexpr
-- On AND reduce production aexpr -> aexpr LAND aexpr

State 42:
aexpr -> aexpr ASR . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 43

State 43:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr ASR aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> aexpr ASR aexpr
-- On SLASH reduce production aexpr -> aexpr ASR aexpr
-- On PLUS reduce production aexpr -> aexpr ASR aexpr
-- On OR reduce production aexpr -> aexpr ASR aexpr
-- On NE reduce production aexpr -> aexpr ASR aexpr
-- On MOD reduce production aexpr -> aexpr ASR aexpr
-- On MINUS reduce production aexpr -> aexpr ASR aexpr
-- On LXOR reduce production aexpr -> aexpr ASR aexpr
-- On LT reduce production aexpr -> aexpr ASR aexpr
-- On LSR reduce production aexpr -> aexpr ASR aexpr
-- On LSL reduce production aexpr -> aexpr ASR aexpr
-- On LOR reduce production aexpr -> aexpr ASR aexpr
-- On LE reduce production aexpr -> aexpr ASR aexpr
-- On LAND reduce production aexpr -> aexpr ASR aexpr
-- On GT reduce production aexpr -> aexpr ASR aexpr
-- On GE reduce production aexpr -> aexpr ASR aexpr
-- On EQ reduce production aexpr -> aexpr ASR aexpr
-- On ENDTEST reduce production aexpr -> aexpr ASR aexpr
-- On COMMA reduce production aexpr -> aexpr ASR aexpr
-- On CL_PAREN reduce production aexpr -> aexpr ASR aexpr
-- On ASR reduce production aexpr -> aexpr ASR aexpr
-- On AND reduce production aexpr -> aexpr ASR aexpr

State 44:
aexpr -> aexpr SLASH . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 45

State 45:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr SLASH aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On MOD shift to state 30
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On STAR reduce production aexpr -> aexpr SLASH aexpr
-- On SLASH reduce production aexpr -> aexpr SLASH aexpr
-- On PLUS reduce production aexpr -> aexpr SLASH aexpr
-- On OR reduce production aexpr -> aexpr SLASH aexpr
-- On NE reduce production aexpr -> aexpr SLASH aexpr
-- On MINUS reduce production aexpr -> aexpr SLASH aexpr
-- On LT reduce production aexpr -> aexpr SLASH aexpr
-- On LE reduce production aexpr -> aexpr SLASH aexpr
-- On GT reduce production aexpr -> aexpr SLASH aexpr
-- On GE reduce production aexpr -> aexpr SLASH aexpr
-- On EQ reduce production aexpr -> aexpr SLASH aexpr
-- On ENDTEST reduce production aexpr -> aexpr SLASH aexpr
-- On COMMA reduce production aexpr -> aexpr SLASH aexpr
-- On CL_PAREN reduce production aexpr -> aexpr SLASH aexpr
-- On AND reduce production aexpr -> aexpr SLASH aexpr

State 46:
aexpr -> aexpr PLUS . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 47

State 47:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr PLUS aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On MOD shift to state 30
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On PLUS reduce production aexpr -> aexpr PLUS aexpr
-- On OR reduce production aexpr -> aexpr PLUS aexpr
-- On NE reduce production aexpr -> aexpr PLUS aexpr
-- On MINUS reduce production aexpr -> aexpr PLUS aexpr
-- On LT reduce production aexpr -> aexpr PLUS aexpr
-- On LE reduce production aexpr -> aexpr PLUS aexpr
-- On GT reduce production aexpr -> aexpr PLUS aexpr
-- On GE reduce production aexpr -> aexpr PLUS aexpr
-- On EQ reduce production aexpr -> aexpr PLUS aexpr
-- On ENDTEST reduce production aexpr -> aexpr PLUS aexpr
-- On COMMA reduce production aexpr -> aexpr PLUS aexpr
-- On CL_PAREN reduce production aexpr -> aexpr PLUS aexpr
-- On AND reduce production aexpr -> aexpr PLUS aexpr

State 48:
aexpr -> aexpr MINUS . aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 49

State 49:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr MINUS aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On MOD shift to state 30
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On PLUS reduce production aexpr -> aexpr MINUS aexpr
-- On OR reduce production aexpr -> aexpr MINUS aexpr
-- On NE reduce production aexpr -> aexpr MINUS aexpr
-- On MINUS reduce production aexpr -> aexpr MINUS aexpr
-- On LT reduce production aexpr -> aexpr MINUS aexpr
-- On LE reduce production aexpr -> aexpr MINUS aexpr
-- On GT reduce production aexpr -> aexpr MINUS aexpr
-- On GE reduce production aexpr -> aexpr MINUS aexpr
-- On EQ reduce production aexpr -> aexpr MINUS aexpr
-- On ENDTEST reduce production aexpr -> aexpr MINUS aexpr
-- On COMMA reduce production aexpr -> aexpr MINUS aexpr
-- On CL_PAREN reduce production aexpr -> aexpr MINUS aexpr
-- On AND reduce production aexpr -> aexpr MINUS aexpr

State 50:
aexpr_list -> aexpr COMMA . aexpr_list [ CL_PAREN ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr_list shift to state 51
-- On aexpr shift to state 27

State 51:
aexpr_list -> aexpr COMMA aexpr_list . [ CL_PAREN ]
-- On CL_PAREN reduce production aexpr_list -> aexpr COMMA aexpr_list

State 52:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
aexpr -> MINUS aexpr . [ STAR SLASH PLUS OR NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ENDTEST COMMA CL_PAREN ASR AND ]
-- On STAR reduce production aexpr -> MINUS aexpr
-- On SLASH reduce production aexpr -> MINUS aexpr
-- On PLUS reduce production aexpr -> MINUS aexpr
-- On OR reduce production aexpr -> MINUS aexpr
-- On NE reduce production aexpr -> MINUS aexpr
-- On MOD reduce production aexpr -> MINUS aexpr
-- On MINUS reduce production aexpr -> MINUS aexpr
-- On LXOR reduce production aexpr -> MINUS aexpr
-- On LT reduce production aexpr -> MINUS aexpr
-- On LSR reduce production aexpr -> MINUS aexpr
-- On LSL reduce production aexpr -> MINUS aexpr
-- On LOR reduce production aexpr -> MINUS aexpr
-- On LE reduce production aexpr -> MINUS aexpr
-- On LAND reduce production aexpr -> MINUS aexpr
-- On GT reduce production aexpr -> MINUS aexpr
-- On GE reduce production aexpr -> MINUS aexpr
-- On EQ reduce production aexpr -> MINUS aexpr
-- On ENDTEST reduce production aexpr -> MINUS aexpr
-- On COMMA reduce production aexpr -> MINUS aexpr
-- On CL_PAREN reduce production aexpr -> MINUS aexpr
-- On ASR reduce production aexpr -> MINUS aexpr
-- On AND reduce production aexpr -> MINUS aexpr

State 53:
bexpr -> FALSE . [ OR ENDTEST CL_PAREN AND ]
-- On OR reduce production bexpr -> FALSE
-- On ENDTEST reduce production bexpr -> FALSE
-- On CL_PAREN reduce production bexpr -> FALSE
-- On AND reduce production bexpr -> FALSE

State 54:
bexpr -> DEFINED . IDENT [ OR ENDTEST CL_PAREN AND ]
-- On IDENT shift to state 55

State 55:
bexpr -> DEFINED IDENT . [ OR ENDTEST CL_PAREN AND ]
-- On OR reduce production bexpr -> DEFINED IDENT
-- On ENDTEST reduce production bexpr -> DEFINED IDENT
-- On CL_PAREN reduce production bexpr -> DEFINED IDENT
-- On AND reduce production bexpr -> DEFINED IDENT

State 56:
bexpr -> NOT bexpr . [ OR ENDTEST CL_PAREN AND ]
bexpr -> bexpr . AND bexpr [ OR ENDTEST CL_PAREN AND ]
bexpr -> bexpr . OR bexpr [ OR ENDTEST CL_PAREN AND ]
-- On OR reduce production bexpr -> NOT bexpr
-- On ENDTEST reduce production bexpr -> NOT bexpr
-- On CL_PAREN reduce production bexpr -> NOT bexpr
-- On AND reduce production bexpr -> NOT bexpr

State 57:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ ASR ]
bexpr -> aexpr . EQ aexpr [ OR ENDTEST CL_PAREN AND ]
bexpr -> aexpr . LT aexpr [ OR ENDTEST CL_PAREN AND ]
bexpr -> aexpr . GT aexpr [ OR ENDTEST CL_PAREN AND ]
bexpr -> aexpr . NE aexpr [ OR ENDTEST CL_PAREN AND ]
bexpr -> aexpr . LE aexpr [ OR ENDTEST CL_PAREN AND ]
bexpr -> aexpr . GE aexpr [ OR ENDTEST CL_PAREN AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On PLUS shift to state 46
-- On NE shift to state 58
-- On MOD shift to state 30
-- On MINUS shift to state 48
-- On LXOR shift to state 32
-- On LT shift to state 60
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LE shift to state 62
-- On LAND shift to state 40
-- On GT shift to state 64
-- On GE shift to state 66
-- On EQ shift to state 68
-- On ASR shift to state 42

State 58:
bexpr -> aexpr NE . aexpr [ OR ENDTEST CL_PAREN AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 59

State 59:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
bexpr -> aexpr NE aexpr . [ OR ENDTEST CL_PAREN AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On PLUS shift to state 46
-- On MOD shift to state 30
-- On MINUS shift to state 48
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On OR reduce production bexpr -> aexpr NE aexpr
-- On ENDTEST reduce production bexpr -> aexpr NE aexpr
-- On CL_PAREN reduce production bexpr -> aexpr NE aexpr
-- On AND reduce production bexpr -> aexpr NE aexpr

State 60:
bexpr -> aexpr LT . aexpr [ OR ENDTEST CL_PAREN AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 61

State 61:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
bexpr -> aexpr LT aexpr . [ OR ENDTEST CL_PAREN AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On PLUS shift to state 46
-- On MOD shift to state 30
-- On MINUS shift to state 48
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On OR reduce production bexpr -> aexpr LT aexpr
-- On ENDTEST reduce production bexpr -> aexpr LT aexpr
-- On CL_PAREN reduce production bexpr -> aexpr LT aexpr
-- On AND reduce production bexpr -> aexpr LT aexpr

State 62:
bexpr -> aexpr LE . aexpr [ OR ENDTEST CL_PAREN AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 63

State 63:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
bexpr -> aexpr LE aexpr . [ OR ENDTEST CL_PAREN AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On PLUS shift to state 46
-- On MOD shift to state 30
-- On MINUS shift to state 48
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On OR reduce production bexpr -> aexpr LE aexpr
-- On ENDTEST reduce production bexpr -> aexpr LE aexpr
-- On CL_PAREN reduce production bexpr -> aexpr LE aexpr
-- On AND reduce production bexpr -> aexpr LE aexpr

State 64:
bexpr -> aexpr GT . aexpr [ OR ENDTEST CL_PAREN AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 65

State 65:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
bexpr -> aexpr GT aexpr . [ OR ENDTEST CL_PAREN AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On PLUS shift to state 46
-- On MOD shift to state 30
-- On MINUS shift to state 48
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On OR reduce production bexpr -> aexpr GT aexpr
-- On ENDTEST reduce production bexpr -> aexpr GT aexpr
-- On CL_PAREN reduce production bexpr -> aexpr GT aexpr
-- On AND reduce production bexpr -> aexpr GT aexpr

State 66:
bexpr -> aexpr GE . aexpr [ OR ENDTEST CL_PAREN AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 67

State 67:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
bexpr -> aexpr GE aexpr . [ OR ENDTEST CL_PAREN AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On PLUS shift to state 46
-- On MOD shift to state 30
-- On MINUS shift to state 48
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On OR reduce production bexpr -> aexpr GE aexpr
-- On ENDTEST reduce production bexpr -> aexpr GE aexpr
-- On CL_PAREN reduce production bexpr -> aexpr GE aexpr
-- On AND reduce production bexpr -> aexpr GE aexpr

State 68:
bexpr -> aexpr EQ . aexpr [ OR ENDTEST CL_PAREN AND ]
-- On OP_PAREN shift to state 20
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On aexpr shift to state 69

State 69:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS OR MOD MINUS LXOR LSR LSL LOR LAND ENDTEST CL_PAREN ASR AND ]
bexpr -> aexpr EQ aexpr . [ OR ENDTEST CL_PAREN AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On PLUS shift to state 46
-- On MOD shift to state 30
-- On MINUS shift to state 48
-- On LXOR shift to state 32
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LAND shift to state 40
-- On ASR shift to state 42
-- On OR reduce production bexpr -> aexpr EQ aexpr
-- On ENDTEST reduce production bexpr -> aexpr EQ aexpr
-- On CL_PAREN reduce production bexpr -> aexpr EQ aexpr
-- On AND reduce production bexpr -> aexpr EQ aexpr

State 70:
bexpr -> OP_PAREN bexpr . CL_PAREN [ OR ENDTEST CL_PAREN AND ]
bexpr -> bexpr . AND bexpr [ OR CL_PAREN AND ]
bexpr -> bexpr . OR bexpr [ OR CL_PAREN AND ]
-- On OR shift to state 71
-- On CL_PAREN shift to state 75
-- On AND shift to state 73

State 71:
bexpr -> bexpr OR . bexpr [ OR ENDTEST CL_PAREN AND ]
-- On TRUE shift to state 16
-- On OP_PAREN shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 53
-- On DEFINED shift to state 54
-- On bexpr shift to state 72
-- On aexpr shift to state 57

State 72:
bexpr -> bexpr . AND bexpr [ OR ENDTEST CL_PAREN AND ]
bexpr -> bexpr . OR bexpr [ OR ENDTEST CL_PAREN AND ]
bexpr -> bexpr OR bexpr . [ OR ENDTEST CL_PAREN AND ]
-- On AND shift to state 73
-- On OR reduce production bexpr -> bexpr OR bexpr
-- On ENDTEST reduce production bexpr -> bexpr OR bexpr
-- On CL_PAREN reduce production bexpr -> bexpr OR bexpr

State 73:
bexpr -> bexpr AND . bexpr [ OR ENDTEST CL_PAREN AND ]
-- On TRUE shift to state 16
-- On OP_PAREN shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 53
-- On DEFINED shift to state 54
-- On bexpr shift to state 74
-- On aexpr shift to state 57

State 74:
bexpr -> bexpr . AND bexpr [ OR ENDTEST CL_PAREN AND ]
bexpr -> bexpr AND bexpr . [ OR ENDTEST CL_PAREN AND ]
bexpr -> bexpr . OR bexpr [ OR ENDTEST CL_PAREN AND ]
-- On OR reduce production bexpr -> bexpr AND bexpr
-- On ENDTEST reduce production bexpr -> bexpr AND bexpr
-- On CL_PAREN reduce production bexpr -> bexpr AND bexpr
-- On AND reduce production bexpr -> bexpr AND bexpr

State 75:
bexpr -> OP_PAREN bexpr CL_PAREN . [ OR ENDTEST CL_PAREN AND ]
-- On OR reduce production bexpr -> OP_PAREN bexpr CL_PAREN
-- On ENDTEST reduce production bexpr -> OP_PAREN bexpr CL_PAREN
-- On CL_PAREN reduce production bexpr -> OP_PAREN bexpr CL_PAREN
-- On AND reduce production bexpr -> OP_PAREN bexpr CL_PAREN

State 76:
aexpr -> aexpr . PLUS aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . MINUS aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . STAR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . SLASH aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . MOD aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . LSL aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . LSR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . ASR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . LAND aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . LOR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr -> aexpr . LXOR aexpr [ STAR SLASH PLUS NE MOD MINUS LXOR LT LSR LSL LOR LE LAND GT GE EQ COMMA CL_PAREN ASR ]
aexpr_list -> aexpr . COMMA aexpr_list [ CL_PAREN ]
aexpr_list -> aexpr . [ CL_PAREN ]
bexpr -> aexpr . EQ aexpr [ OR CL_PAREN AND ]
bexpr -> aexpr . LT aexpr [ OR CL_PAREN AND ]
bexpr -> aexpr . GT aexpr [ OR CL_PAREN AND ]
bexpr -> aexpr . NE aexpr [ OR CL_PAREN AND ]
bexpr -> aexpr . LE aexpr [ OR CL_PAREN AND ]
bexpr -> aexpr . GE aexpr [ OR CL_PAREN AND ]
-- On STAR shift to state 28
-- On SLASH shift to state 44
-- On PLUS shift to state 46
-- On NE shift to state 58
-- On MOD shift to state 30
-- On MINUS shift to state 48
-- On LXOR shift to state 32
-- On LT shift to state 60
-- On LSR shift to state 34
-- On LSL shift to state 36
-- On LOR shift to state 38
-- On LE shift to state 62
-- On LAND shift to state 40
-- On GT shift to state 64
-- On GE shift to state 66
-- On EQ shift to state 68
-- On COMMA shift to state 50
-- On ASR shift to state 42
-- On CL_PAREN reduce production aexpr_list -> aexpr

State 77:
node -> IF test . unode_list0 elif_list ENDIF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IF test . unode_list0 elif_list error [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING shift to state 8
-- On UNDEF shift to state 9
-- On TEXT shift to state 10
-- On OP_PAREN shift to state 11
-- On LINE shift to state 12
-- On INCLUDE shift to state 13
-- On IFDEF shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 78
-- On FUNIDENT shift to state 79
-- On EXT shift to state 84
-- On ERROR shift to state 85
-- On DEFUN shift to state 86
-- On DEF shift to state 127
-- On CURRENT_LINE shift to state 130
-- On CURRENT_FILE shift to state 131
-- On COMMA shift to state 132
-- On CL_PAREN shift to state 133
-- On unode_list0 shift to state 157
-- On unode shift to state 137
-- On node shift to state 139
-- On error reduce production unode_list0 ->
-- On ENDIF reduce production unode_list0 ->
-- On ELSE reduce production unode_list0 ->
-- On ELIF reduce production unode_list0 ->

State 78:
node -> IDENT . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> IDENT
-- On WARNING reduce production node -> IDENT
-- On UNDEF reduce production node -> IDENT
-- On TEXT reduce production node -> IDENT
-- On OP_PAREN reduce production node -> IDENT
-- On LINE reduce production node -> IDENT
-- On INCLUDE reduce production node -> IDENT
-- On IFDEF reduce production node -> IDENT
-- On IF reduce production node -> IDENT
-- On IDENT reduce production node -> IDENT
-- On FUNIDENT reduce production node -> IDENT
-- On EXT reduce production node -> IDENT
-- On ERROR reduce production node -> IDENT
-- On ENDIF reduce production node -> IDENT
-- On ELSE reduce production node -> IDENT
-- On ELIF reduce production node -> IDENT
-- On DEFUN reduce production node -> IDENT
-- On DEF reduce production node -> IDENT
-- On CURRENT_LINE reduce production node -> IDENT
-- On CURRENT_FILE reduce production node -> IDENT
-- On COMMA reduce production node -> IDENT
-- On CL_PAREN reduce production node -> IDENT

State 79:
node -> FUNIDENT . args1 CL_PAREN [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> FUNIDENT . error [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error shift to state 80
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 81
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On pnode_list0 shift to state 117
-- On pnode shift to state 119
-- On node shift to state 121
-- On args1 shift to state 155
-- On COMMA reduce production pnode_list0 ->
-- On CL_PAREN reduce production pnode_list0 ->

State 80:
node -> FUNIDENT error . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> FUNIDENT error
-- On WARNING reduce production node -> FUNIDENT error
-- On UNDEF reduce production node -> FUNIDENT error
-- On TEXT reduce production node -> FUNIDENT error
-- On OP_PAREN reduce production node -> FUNIDENT error
-- On LINE reduce production node -> FUNIDENT error
-- On INCLUDE reduce production node -> FUNIDENT error
-- On IFDEF reduce production node -> FUNIDENT error
-- On IF reduce production node -> FUNIDENT error
-- On IDENT reduce production node -> FUNIDENT error
-- On FUNIDENT reduce production node -> FUNIDENT error
-- On EXT reduce production node -> FUNIDENT error
-- On ERROR reduce production node -> FUNIDENT error
-- On ENDIF reduce production node -> FUNIDENT error
-- On ELSE reduce production node -> FUNIDENT error
-- On ELIF reduce production node -> FUNIDENT error
-- On DEFUN reduce production node -> FUNIDENT error
-- On DEF reduce production node -> FUNIDENT error
-- On CURRENT_LINE reduce production node -> FUNIDENT error
-- On CURRENT_FILE reduce production node -> FUNIDENT error
-- On COMMA reduce production node -> FUNIDENT error
-- On CL_PAREN reduce production node -> FUNIDENT error

State 81:
pnode -> OP_PAREN . pnode_or_comma_list0 CL_PAREN [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 81
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 149
-- On pnode_or_comma_list0 shift to state 153
-- On pnode shift to state 151
-- On node shift to state 121
-- On CL_PAREN reduce production pnode_or_comma_list0 ->

State 82:
node -> IF . test unode_list0 elif_list ENDIF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IF . test unode_list0 elif_list error [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On TRUE shift to state 16
-- On OP_PAREN shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 53
-- On DEFINED shift to state 54
-- On test shift to state 83
-- On bexpr shift to state 144
-- On aexpr shift to state 57

State 83:
node -> IF test . unode_list0 elif_list ENDIF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IF test . unode_list0 elif_list error [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING shift to state 8
-- On UNDEF shift to state 9
-- On TEXT shift to state 10
-- On OP_PAREN shift to state 11
-- On LINE shift to state 12
-- On INCLUDE shift to state 13
-- On IFDEF shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 78
-- On FUNIDENT shift to state 79
-- On EXT shift to state 84
-- On ERROR shift to state 85
-- On DEFUN shift to state 86
-- On DEF shift to state 127
-- On CURRENT_LINE shift to state 130
-- On CURRENT_FILE shift to state 131
-- On COMMA shift to state 132
-- On CL_PAREN shift to state 133
-- On unode_list0 shift to state 134
-- On unode shift to state 137
-- On node shift to state 139
-- On error reduce production unode_list0 ->
-- On ENDIF reduce production unode_list0 ->
-- On ELSE reduce production unode_list0 ->
-- On ELIF reduce production unode_list0 ->

State 84:
node -> EXT . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> EXT
-- On WARNING reduce production node -> EXT
-- On UNDEF reduce production node -> EXT
-- On TEXT reduce production node -> EXT
-- On OP_PAREN reduce production node -> EXT
-- On LINE reduce production node -> EXT
-- On INCLUDE reduce production node -> EXT
-- On IFDEF reduce production node -> EXT
-- On IF reduce production node -> EXT
-- On IDENT reduce production node -> EXT
-- On FUNIDENT reduce production node -> EXT
-- On EXT reduce production node -> EXT
-- On ERROR reduce production node -> EXT
-- On ENDIF reduce production node -> EXT
-- On ELSE reduce production node -> EXT
-- On ELIF reduce production node -> EXT
-- On DEFUN reduce production node -> EXT
-- On DEF reduce production node -> EXT
-- On CURRENT_LINE reduce production node -> EXT
-- On CURRENT_FILE reduce production node -> EXT
-- On COMMA reduce production node -> EXT
-- On CL_PAREN reduce production node -> EXT

State 85:
node -> ERROR . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> ERROR
-- On WARNING reduce production node -> ERROR
-- On UNDEF reduce production node -> ERROR
-- On TEXT reduce production node -> ERROR
-- On OP_PAREN reduce production node -> ERROR
-- On LINE reduce production node -> ERROR
-- On INCLUDE reduce production node -> ERROR
-- On IFDEF reduce production node -> ERROR
-- On IF reduce production node -> ERROR
-- On IDENT reduce production node -> ERROR
-- On FUNIDENT reduce production node -> ERROR
-- On EXT reduce production node -> ERROR
-- On ERROR reduce production node -> ERROR
-- On ENDIF reduce production node -> ERROR
-- On ELSE reduce production node -> ERROR
-- On ELIF reduce production node -> ERROR
-- On DEFUN reduce production node -> ERROR
-- On DEF reduce production node -> ERROR
-- On CURRENT_LINE reduce production node -> ERROR
-- On CURRENT_FILE reduce production node -> ERROR
-- On COMMA reduce production node -> ERROR
-- On CL_PAREN reduce production node -> ERROR

State 86:
node -> DEFUN . def_args1 CL_PAREN unode_list0 ENDEF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> DEFUN . CL_PAREN [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On TEXT shift to state 87
-- On CL_PAREN shift to state 89
-- On def_args1 shift to state 90
-- On arg_blank shift to state 113
-- On IDENT reduce production arg_blank ->

State 87:
arg_blank -> TEXT . arg_blank [ IDENT ]
-- On TEXT shift to state 87
-- On arg_blank shift to state 88
-- On IDENT reduce production arg_blank ->

State 88:
arg_blank -> TEXT arg_blank . [ IDENT ]
-- On IDENT reduce production arg_blank -> TEXT arg_blank

State 89:
node -> DEFUN CL_PAREN . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> DEFUN CL_PAREN
-- On WARNING reduce production node -> DEFUN CL_PAREN
-- On UNDEF reduce production node -> DEFUN CL_PAREN
-- On TEXT reduce production node -> DEFUN CL_PAREN
-- On OP_PAREN reduce production node -> DEFUN CL_PAREN
-- On LINE reduce production node -> DEFUN CL_PAREN
-- On INCLUDE reduce production node -> DEFUN CL_PAREN
-- On IFDEF reduce production node -> DEFUN CL_PAREN
-- On IF reduce production node -> DEFUN CL_PAREN
-- On IDENT reduce production node -> DEFUN CL_PAREN
-- On FUNIDENT reduce production node -> DEFUN CL_PAREN
-- On EXT reduce production node -> DEFUN CL_PAREN
-- On ERROR reduce production node -> DEFUN CL_PAREN
-- On ENDIF reduce production node -> DEFUN CL_PAREN
-- On ELSE reduce production node -> DEFUN CL_PAREN
-- On ELIF reduce production node -> DEFUN CL_PAREN
-- On DEFUN reduce production node -> DEFUN CL_PAREN
-- On DEF reduce production node -> DEFUN CL_PAREN
-- On CURRENT_LINE reduce production node -> DEFUN CL_PAREN
-- On CURRENT_FILE reduce production node -> DEFUN CL_PAREN
-- On COMMA reduce production node -> DEFUN CL_PAREN
-- On CL_PAREN reduce production node -> DEFUN CL_PAREN

State 90:
node -> DEFUN def_args1 . CL_PAREN unode_list0 ENDEF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On CL_PAREN shift to state 91

State 91:
node -> DEFUN def_args1 CL_PAREN . unode_list0 ENDEF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 4
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 104
-- On CL_PAREN shift to state 105
-- On unode_list0 shift to state 125
-- On unode shift to state 108
-- On node shift to state 110
-- On ENDEF reduce production unode_list0 ->

State 92:
node -> IDENT . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> IDENT
-- On UNDEF reduce production node -> IDENT
-- On TEXT reduce production node -> IDENT
-- On OP_PAREN reduce production node -> IDENT
-- On LINE reduce production node -> IDENT
-- On INCLUDE reduce production node -> IDENT
-- On IFDEF reduce production node -> IDENT
-- On IF reduce production node -> IDENT
-- On IDENT reduce production node -> IDENT
-- On FUNIDENT reduce production node -> IDENT
-- On EXT reduce production node -> IDENT
-- On ERROR reduce production node -> IDENT
-- On EOF reduce production node -> IDENT
-- On ENDEF reduce production node -> IDENT
-- On DEFUN reduce production node -> IDENT
-- On DEF reduce production node -> IDENT
-- On CURRENT_LINE reduce production node -> IDENT
-- On CURRENT_FILE reduce production node -> IDENT
-- On COMMA reduce production node -> IDENT
-- On CL_PAREN reduce production node -> IDENT

State 93:
node -> FUNIDENT . args1 CL_PAREN [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> FUNIDENT . error [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error shift to state 94
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 81
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On pnode_list0 shift to state 117
-- On pnode shift to state 119
-- On node shift to state 121
-- On args1 shift to state 123
-- On COMMA reduce production pnode_list0 ->
-- On CL_PAREN reduce production pnode_list0 ->

State 94:
node -> FUNIDENT error . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> FUNIDENT error
-- On UNDEF reduce production node -> FUNIDENT error
-- On TEXT reduce production node -> FUNIDENT error
-- On OP_PAREN reduce production node -> FUNIDENT error
-- On LINE reduce production node -> FUNIDENT error
-- On INCLUDE reduce production node -> FUNIDENT error
-- On IFDEF reduce production node -> FUNIDENT error
-- On IF reduce production node -> FUNIDENT error
-- On IDENT reduce production node -> FUNIDENT error
-- On FUNIDENT reduce production node -> FUNIDENT error
-- On EXT reduce production node -> FUNIDENT error
-- On ERROR reduce production node -> FUNIDENT error
-- On EOF reduce production node -> FUNIDENT error
-- On ENDEF reduce production node -> FUNIDENT error
-- On DEFUN reduce production node -> FUNIDENT error
-- On DEF reduce production node -> FUNIDENT error
-- On CURRENT_LINE reduce production node -> FUNIDENT error
-- On CURRENT_FILE reduce production node -> FUNIDENT error
-- On COMMA reduce production node -> FUNIDENT error
-- On CL_PAREN reduce production node -> FUNIDENT error

State 95:
node -> EXT . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> EXT
-- On UNDEF reduce production node -> EXT
-- On TEXT reduce production node -> EXT
-- On OP_PAREN reduce production node -> EXT
-- On LINE reduce production node -> EXT
-- On INCLUDE reduce production node -> EXT
-- On IFDEF reduce production node -> EXT
-- On IF reduce production node -> EXT
-- On IDENT reduce production node -> EXT
-- On FUNIDENT reduce production node -> EXT
-- On EXT reduce production node -> EXT
-- On ERROR reduce production node -> EXT
-- On EOF reduce production node -> EXT
-- On ENDEF reduce production node -> EXT
-- On DEFUN reduce production node -> EXT
-- On DEF reduce production node -> EXT
-- On CURRENT_LINE reduce production node -> EXT
-- On CURRENT_FILE reduce production node -> EXT
-- On COMMA reduce production node -> EXT
-- On CL_PAREN reduce production node -> EXT

State 96:
node -> ERROR . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> ERROR
-- On UNDEF reduce production node -> ERROR
-- On TEXT reduce production node -> ERROR
-- On OP_PAREN reduce production node -> ERROR
-- On LINE reduce production node -> ERROR
-- On INCLUDE reduce production node -> ERROR
-- On IFDEF reduce production node -> ERROR
-- On IF reduce production node -> ERROR
-- On IDENT reduce production node -> ERROR
-- On FUNIDENT reduce production node -> ERROR
-- On EXT reduce production node -> ERROR
-- On ERROR reduce production node -> ERROR
-- On EOF reduce production node -> ERROR
-- On ENDEF reduce production node -> ERROR
-- On DEFUN reduce production node -> ERROR
-- On DEF reduce production node -> ERROR
-- On CURRENT_LINE reduce production node -> ERROR
-- On CURRENT_FILE reduce production node -> ERROR
-- On COMMA reduce production node -> ERROR
-- On CL_PAREN reduce production node -> ERROR

State 97:
node -> DEFUN . def_args1 CL_PAREN unode_list0 ENDEF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> DEFUN . CL_PAREN [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On TEXT shift to state 87
-- On CL_PAREN shift to state 98
-- On def_args1 shift to state 99
-- On arg_blank shift to state 113
-- On IDENT reduce production arg_blank ->

State 98:
node -> DEFUN CL_PAREN . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> DEFUN CL_PAREN
-- On UNDEF reduce production node -> DEFUN CL_PAREN
-- On TEXT reduce production node -> DEFUN CL_PAREN
-- On OP_PAREN reduce production node -> DEFUN CL_PAREN
-- On LINE reduce production node -> DEFUN CL_PAREN
-- On INCLUDE reduce production node -> DEFUN CL_PAREN
-- On IFDEF reduce production node -> DEFUN CL_PAREN
-- On IF reduce production node -> DEFUN CL_PAREN
-- On IDENT reduce production node -> DEFUN CL_PAREN
-- On FUNIDENT reduce production node -> DEFUN CL_PAREN
-- On EXT reduce production node -> DEFUN CL_PAREN
-- On ERROR reduce production node -> DEFUN CL_PAREN
-- On EOF reduce production node -> DEFUN CL_PAREN
-- On ENDEF reduce production node -> DEFUN CL_PAREN
-- On DEFUN reduce production node -> DEFUN CL_PAREN
-- On DEF reduce production node -> DEFUN CL_PAREN
-- On CURRENT_LINE reduce production node -> DEFUN CL_PAREN
-- On CURRENT_FILE reduce production node -> DEFUN CL_PAREN
-- On COMMA reduce production node -> DEFUN CL_PAREN
-- On CL_PAREN reduce production node -> DEFUN CL_PAREN

State 99:
node -> DEFUN def_args1 . CL_PAREN unode_list0 ENDEF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On CL_PAREN shift to state 100

State 100:
node -> DEFUN def_args1 CL_PAREN . unode_list0 ENDEF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 4
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 104
-- On CL_PAREN shift to state 105
-- On unode_list0 shift to state 111
-- On unode shift to state 108
-- On node shift to state 110
-- On ENDEF reduce production unode_list0 ->

State 101:
node -> DEF . unode_list0 ENDEF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 4
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 104
-- On CL_PAREN shift to state 105
-- On unode_list0 shift to state 106
-- On unode shift to state 108
-- On node shift to state 110
-- On ENDEF reduce production unode_list0 ->

State 102:
node -> CURRENT_LINE . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> CURRENT_LINE
-- On UNDEF reduce production node -> CURRENT_LINE
-- On TEXT reduce production node -> CURRENT_LINE
-- On OP_PAREN reduce production node -> CURRENT_LINE
-- On LINE reduce production node -> CURRENT_LINE
-- On INCLUDE reduce production node -> CURRENT_LINE
-- On IFDEF reduce production node -> CURRENT_LINE
-- On IF reduce production node -> CURRENT_LINE
-- On IDENT reduce production node -> CURRENT_LINE
-- On FUNIDENT reduce production node -> CURRENT_LINE
-- On EXT reduce production node -> CURRENT_LINE
-- On ERROR reduce production node -> CURRENT_LINE
-- On EOF reduce production node -> CURRENT_LINE
-- On ENDEF reduce production node -> CURRENT_LINE
-- On DEFUN reduce production node -> CURRENT_LINE
-- On DEF reduce production node -> CURRENT_LINE
-- On CURRENT_LINE reduce production node -> CURRENT_LINE
-- On CURRENT_FILE reduce production node -> CURRENT_LINE
-- On COMMA reduce production node -> CURRENT_LINE
-- On CL_PAREN reduce production node -> CURRENT_LINE

State 103:
node -> CURRENT_FILE . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> CURRENT_FILE
-- On UNDEF reduce production node -> CURRENT_FILE
-- On TEXT reduce production node -> CURRENT_FILE
-- On OP_PAREN reduce production node -> CURRENT_FILE
-- On LINE reduce production node -> CURRENT_FILE
-- On INCLUDE reduce production node -> CURRENT_FILE
-- On IFDEF reduce production node -> CURRENT_FILE
-- On IF reduce production node -> CURRENT_FILE
-- On IDENT reduce production node -> CURRENT_FILE
-- On FUNIDENT reduce production node -> CURRENT_FILE
-- On EXT reduce production node -> CURRENT_FILE
-- On ERROR reduce production node -> CURRENT_FILE
-- On EOF reduce production node -> CURRENT_FILE
-- On ENDEF reduce production node -> CURRENT_FILE
-- On DEFUN reduce production node -> CURRENT_FILE
-- On DEF reduce production node -> CURRENT_FILE
-- On CURRENT_LINE reduce production node -> CURRENT_FILE
-- On CURRENT_FILE reduce production node -> CURRENT_FILE
-- On COMMA reduce production node -> CURRENT_FILE
-- On CL_PAREN reduce production node -> CURRENT_FILE

State 104:
unode -> COMMA . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production unode -> COMMA
-- On UNDEF reduce production unode -> COMMA
-- On TEXT reduce production unode -> COMMA
-- On OP_PAREN reduce production unode -> COMMA
-- On LINE reduce production unode -> COMMA
-- On INCLUDE reduce production unode -> COMMA
-- On IFDEF reduce production unode -> COMMA
-- On IF reduce production unode -> COMMA
-- On IDENT reduce production unode -> COMMA
-- On FUNIDENT reduce production unode -> COMMA
-- On EXT reduce production unode -> COMMA
-- On ERROR reduce production unode -> COMMA
-- On EOF reduce production unode -> COMMA
-- On ENDEF reduce production unode -> COMMA
-- On DEFUN reduce production unode -> COMMA
-- On DEF reduce production unode -> COMMA
-- On CURRENT_LINE reduce production unode -> COMMA
-- On CURRENT_FILE reduce production unode -> COMMA
-- On COMMA reduce production unode -> COMMA
-- On CL_PAREN reduce production unode -> COMMA

State 105:
unode -> CL_PAREN . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production unode -> CL_PAREN
-- On UNDEF reduce production unode -> CL_PAREN
-- On TEXT reduce production unode -> CL_PAREN
-- On OP_PAREN reduce production unode -> CL_PAREN
-- On LINE reduce production unode -> CL_PAREN
-- On INCLUDE reduce production unode -> CL_PAREN
-- On IFDEF reduce production unode -> CL_PAREN
-- On IF reduce production unode -> CL_PAREN
-- On IDENT reduce production unode -> CL_PAREN
-- On FUNIDENT reduce production unode -> CL_PAREN
-- On EXT reduce production unode -> CL_PAREN
-- On ERROR reduce production unode -> CL_PAREN
-- On EOF reduce production unode -> CL_PAREN
-- On ENDEF reduce production unode -> CL_PAREN
-- On DEFUN reduce production unode -> CL_PAREN
-- On DEF reduce production unode -> CL_PAREN
-- On CURRENT_LINE reduce production unode -> CL_PAREN
-- On CURRENT_FILE reduce production unode -> CL_PAREN
-- On COMMA reduce production unode -> CL_PAREN
-- On CL_PAREN reduce production unode -> CL_PAREN

State 106:
node -> DEF unode_list0 . ENDEF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On ENDEF shift to state 107

State 107:
node -> DEF unode_list0 ENDEF . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> DEF unode_list0 ENDEF
-- On UNDEF reduce production node -> DEF unode_list0 ENDEF
-- On TEXT reduce production node -> DEF unode_list0 ENDEF
-- On OP_PAREN reduce production node -> DEF unode_list0 ENDEF
-- On LINE reduce production node -> DEF unode_list0 ENDEF
-- On INCLUDE reduce production node -> DEF unode_list0 ENDEF
-- On IFDEF reduce production node -> DEF unode_list0 ENDEF
-- On IF reduce production node -> DEF unode_list0 ENDEF
-- On IDENT reduce production node -> DEF unode_list0 ENDEF
-- On FUNIDENT reduce production node -> DEF unode_list0 ENDEF
-- On EXT reduce production node -> DEF unode_list0 ENDEF
-- On ERROR reduce production node -> DEF unode_list0 ENDEF
-- On EOF reduce production node -> DEF unode_list0 ENDEF
-- On ENDEF reduce production node -> DEF unode_list0 ENDEF
-- On DEFUN reduce production node -> DEF unode_list0 ENDEF
-- On DEF reduce production node -> DEF unode_list0 ENDEF
-- On CURRENT_LINE reduce production node -> DEF unode_list0 ENDEF
-- On CURRENT_FILE reduce production node -> DEF unode_list0 ENDEF
-- On COMMA reduce production node -> DEF unode_list0 ENDEF
-- On CL_PAREN reduce production node -> DEF unode_list0 ENDEF

State 108:
unode_list0 -> unode . unode_list0 [ ENDEF ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 4
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 104
-- On CL_PAREN shift to state 105
-- On unode_list0 shift to state 109
-- On unode shift to state 108
-- On node shift to state 110
-- On ENDEF reduce production unode_list0 ->

State 109:
unode_list0 -> unode unode_list0 . [ ENDEF ]
-- On ENDEF reduce production unode_list0 -> unode unode_list0

State 110:
unode -> node . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production unode -> node
-- On UNDEF reduce production unode -> node
-- On TEXT reduce production unode -> node
-- On OP_PAREN reduce production unode -> node
-- On LINE reduce production unode -> node
-- On INCLUDE reduce production unode -> node
-- On IFDEF reduce production unode -> node
-- On IF reduce production unode -> node
-- On IDENT reduce production unode -> node
-- On FUNIDENT reduce production unode -> node
-- On EXT reduce production unode -> node
-- On ERROR reduce production unode -> node
-- On EOF reduce production unode -> node
-- On ENDEF reduce production unode -> node
-- On DEFUN reduce production unode -> node
-- On DEF reduce production unode -> node
-- On CURRENT_LINE reduce production unode -> node
-- On CURRENT_FILE reduce production unode -> node
-- On COMMA reduce production unode -> node
-- On CL_PAREN reduce production unode -> node

State 111:
node -> DEFUN def_args1 CL_PAREN unode_list0 . ENDEF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On ENDEF shift to state 112

State 112:
node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On UNDEF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On TEXT reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On OP_PAREN reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On LINE reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On INCLUDE reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On IFDEF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On IF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On IDENT reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On FUNIDENT reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On EXT reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On ERROR reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On EOF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On ENDEF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On DEFUN reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On DEF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On CURRENT_LINE reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On CURRENT_FILE reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On COMMA reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On CL_PAREN reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF

State 113:
def_args1 -> arg_blank . IDENT COMMA def_args1 [ CL_PAREN ]
def_args1 -> arg_blank . IDENT [ CL_PAREN ]
-- On IDENT shift to state 114

State 114:
def_args1 -> arg_blank IDENT . COMMA def_args1 [ CL_PAREN ]
def_args1 -> arg_blank IDENT . [ CL_PAREN ]
-- On COMMA shift to state 115
-- On CL_PAREN reduce production def_args1 -> arg_blank IDENT

State 115:
def_args1 -> arg_blank IDENT COMMA . def_args1 [ CL_PAREN ]
-- On TEXT shift to state 87
-- On def_args1 shift to state 116
-- On arg_blank shift to state 113
-- On IDENT reduce production arg_blank ->

State 116:
def_args1 -> arg_blank IDENT COMMA def_args1 . [ CL_PAREN ]
-- On CL_PAREN reduce production def_args1 -> arg_blank IDENT COMMA def_args1

State 117:
args1 -> pnode_list0 . COMMA args1 [ CL_PAREN ]
args1 -> pnode_list0 . [ CL_PAREN ]
-- On COMMA shift to state 118
-- On CL_PAREN reduce production args1 -> pnode_list0

State 118:
args1 -> pnode_list0 COMMA . args1 [ CL_PAREN ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 81
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On pnode_list0 shift to state 117
-- On pnode shift to state 119
-- On node shift to state 121
-- On args1 shift to state 122
-- On COMMA reduce production pnode_list0 ->
-- On CL_PAREN reduce production pnode_list0 ->

State 119:
pnode_list0 -> pnode . pnode_list0 [ COMMA CL_PAREN ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 81
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On pnode_list0 shift to state 120
-- On pnode shift to state 119
-- On node shift to state 121
-- On COMMA reduce production pnode_list0 ->
-- On CL_PAREN reduce production pnode_list0 ->

State 120:
pnode_list0 -> pnode pnode_list0 . [ COMMA CL_PAREN ]
-- On COMMA reduce production pnode_list0 -> pnode pnode_list0
-- On CL_PAREN reduce production pnode_list0 -> pnode pnode_list0

State 121:
pnode -> node . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production pnode -> node
-- On UNDEF reduce production pnode -> node
-- On TEXT reduce production pnode -> node
-- On OP_PAREN reduce production pnode -> node
-- On LINE reduce production pnode -> node
-- On INCLUDE reduce production pnode -> node
-- On IFDEF reduce production pnode -> node
-- On IF reduce production pnode -> node
-- On IDENT reduce production pnode -> node
-- On FUNIDENT reduce production pnode -> node
-- On EXT reduce production pnode -> node
-- On ERROR reduce production pnode -> node
-- On DEFUN reduce production pnode -> node
-- On DEF reduce production pnode -> node
-- On CURRENT_LINE reduce production pnode -> node
-- On CURRENT_FILE reduce production pnode -> node
-- On COMMA reduce production pnode -> node
-- On CL_PAREN reduce production pnode -> node

State 122:
args1 -> pnode_list0 COMMA args1 . [ CL_PAREN ]
-- On CL_PAREN reduce production args1 -> pnode_list0 COMMA args1

State 123:
node -> FUNIDENT args1 . CL_PAREN [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On CL_PAREN shift to state 124

State 124:
node -> FUNIDENT args1 CL_PAREN . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> FUNIDENT args1 CL_PAREN
-- On UNDEF reduce production node -> FUNIDENT args1 CL_PAREN
-- On TEXT reduce production node -> FUNIDENT args1 CL_PAREN
-- On OP_PAREN reduce production node -> FUNIDENT args1 CL_PAREN
-- On LINE reduce production node -> FUNIDENT args1 CL_PAREN
-- On INCLUDE reduce production node -> FUNIDENT args1 CL_PAREN
-- On IFDEF reduce production node -> FUNIDENT args1 CL_PAREN
-- On IF reduce production node -> FUNIDENT args1 CL_PAREN
-- On IDENT reduce production node -> FUNIDENT args1 CL_PAREN
-- On FUNIDENT reduce production node -> FUNIDENT args1 CL_PAREN
-- On EXT reduce production node -> FUNIDENT args1 CL_PAREN
-- On ERROR reduce production node -> FUNIDENT args1 CL_PAREN
-- On EOF reduce production node -> FUNIDENT args1 CL_PAREN
-- On ENDEF reduce production node -> FUNIDENT args1 CL_PAREN
-- On DEFUN reduce production node -> FUNIDENT args1 CL_PAREN
-- On DEF reduce production node -> FUNIDENT args1 CL_PAREN
-- On CURRENT_LINE reduce production node -> FUNIDENT args1 CL_PAREN
-- On CURRENT_FILE reduce production node -> FUNIDENT args1 CL_PAREN
-- On COMMA reduce production node -> FUNIDENT args1 CL_PAREN
-- On CL_PAREN reduce production node -> FUNIDENT args1 CL_PAREN

State 125:
node -> DEFUN def_args1 CL_PAREN unode_list0 . ENDEF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On ENDEF shift to state 126

State 126:
node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On WARNING reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On UNDEF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On TEXT reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On OP_PAREN reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On LINE reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On INCLUDE reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On IFDEF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On IF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On IDENT reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On FUNIDENT reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On EXT reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On ERROR reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On ENDIF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On ELSE reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On ELIF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On DEFUN reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On DEF reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On CURRENT_LINE reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On CURRENT_FILE reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On COMMA reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF
-- On CL_PAREN reduce production node -> DEFUN def_args1 CL_PAREN unode_list0 ENDEF

State 127:
node -> DEF . unode_list0 ENDEF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 4
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 104
-- On CL_PAREN shift to state 105
-- On unode_list0 shift to state 128
-- On unode shift to state 108
-- On node shift to state 110
-- On ENDEF reduce production unode_list0 ->

State 128:
node -> DEF unode_list0 . ENDEF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On ENDEF shift to state 129

State 129:
node -> DEF unode_list0 ENDEF . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> DEF unode_list0 ENDEF
-- On WARNING reduce production node -> DEF unode_list0 ENDEF
-- On UNDEF reduce production node -> DEF unode_list0 ENDEF
-- On TEXT reduce production node -> DEF unode_list0 ENDEF
-- On OP_PAREN reduce production node -> DEF unode_list0 ENDEF
-- On LINE reduce production node -> DEF unode_list0 ENDEF
-- On INCLUDE reduce production node -> DEF unode_list0 ENDEF
-- On IFDEF reduce production node -> DEF unode_list0 ENDEF
-- On IF reduce production node -> DEF unode_list0 ENDEF
-- On IDENT reduce production node -> DEF unode_list0 ENDEF
-- On FUNIDENT reduce production node -> DEF unode_list0 ENDEF
-- On EXT reduce production node -> DEF unode_list0 ENDEF
-- On ERROR reduce production node -> DEF unode_list0 ENDEF
-- On ENDIF reduce production node -> DEF unode_list0 ENDEF
-- On ELSE reduce production node -> DEF unode_list0 ENDEF
-- On ELIF reduce production node -> DEF unode_list0 ENDEF
-- On DEFUN reduce production node -> DEF unode_list0 ENDEF
-- On DEF reduce production node -> DEF unode_list0 ENDEF
-- On CURRENT_LINE reduce production node -> DEF unode_list0 ENDEF
-- On CURRENT_FILE reduce production node -> DEF unode_list0 ENDEF
-- On COMMA reduce production node -> DEF unode_list0 ENDEF
-- On CL_PAREN reduce production node -> DEF unode_list0 ENDEF

State 130:
node -> CURRENT_LINE . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> CURRENT_LINE
-- On WARNING reduce production node -> CURRENT_LINE
-- On UNDEF reduce production node -> CURRENT_LINE
-- On TEXT reduce production node -> CURRENT_LINE
-- On OP_PAREN reduce production node -> CURRENT_LINE
-- On LINE reduce production node -> CURRENT_LINE
-- On INCLUDE reduce production node -> CURRENT_LINE
-- On IFDEF reduce production node -> CURRENT_LINE
-- On IF reduce production node -> CURRENT_LINE
-- On IDENT reduce production node -> CURRENT_LINE
-- On FUNIDENT reduce production node -> CURRENT_LINE
-- On EXT reduce production node -> CURRENT_LINE
-- On ERROR reduce production node -> CURRENT_LINE
-- On ENDIF reduce production node -> CURRENT_LINE
-- On ELSE reduce production node -> CURRENT_LINE
-- On ELIF reduce production node -> CURRENT_LINE
-- On DEFUN reduce production node -> CURRENT_LINE
-- On DEF reduce production node -> CURRENT_LINE
-- On CURRENT_LINE reduce production node -> CURRENT_LINE
-- On CURRENT_FILE reduce production node -> CURRENT_LINE
-- On COMMA reduce production node -> CURRENT_LINE
-- On CL_PAREN reduce production node -> CURRENT_LINE

State 131:
node -> CURRENT_FILE . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> CURRENT_FILE
-- On WARNING reduce production node -> CURRENT_FILE
-- On UNDEF reduce production node -> CURRENT_FILE
-- On TEXT reduce production node -> CURRENT_FILE
-- On OP_PAREN reduce production node -> CURRENT_FILE
-- On LINE reduce production node -> CURRENT_FILE
-- On INCLUDE reduce production node -> CURRENT_FILE
-- On IFDEF reduce production node -> CURRENT_FILE
-- On IF reduce production node -> CURRENT_FILE
-- On IDENT reduce production node -> CURRENT_FILE
-- On FUNIDENT reduce production node -> CURRENT_FILE
-- On EXT reduce production node -> CURRENT_FILE
-- On ERROR reduce production node -> CURRENT_FILE
-- On ENDIF reduce production node -> CURRENT_FILE
-- On ELSE reduce production node -> CURRENT_FILE
-- On ELIF reduce production node -> CURRENT_FILE
-- On DEFUN reduce production node -> CURRENT_FILE
-- On DEF reduce production node -> CURRENT_FILE
-- On CURRENT_LINE reduce production node -> CURRENT_FILE
-- On CURRENT_FILE reduce production node -> CURRENT_FILE
-- On COMMA reduce production node -> CURRENT_FILE
-- On CL_PAREN reduce production node -> CURRENT_FILE

State 132:
unode -> COMMA . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production unode -> COMMA
-- On WARNING reduce production unode -> COMMA
-- On UNDEF reduce production unode -> COMMA
-- On TEXT reduce production unode -> COMMA
-- On OP_PAREN reduce production unode -> COMMA
-- On LINE reduce production unode -> COMMA
-- On INCLUDE reduce production unode -> COMMA
-- On IFDEF reduce production unode -> COMMA
-- On IF reduce production unode -> COMMA
-- On IDENT reduce production unode -> COMMA
-- On FUNIDENT reduce production unode -> COMMA
-- On EXT reduce production unode -> COMMA
-- On ERROR reduce production unode -> COMMA
-- On ENDIF reduce production unode -> COMMA
-- On ELSE reduce production unode -> COMMA
-- On ELIF reduce production unode -> COMMA
-- On DEFUN reduce production unode -> COMMA
-- On DEF reduce production unode -> COMMA
-- On CURRENT_LINE reduce production unode -> COMMA
-- On CURRENT_FILE reduce production unode -> COMMA
-- On COMMA reduce production unode -> COMMA
-- On CL_PAREN reduce production unode -> COMMA

State 133:
unode -> CL_PAREN . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production unode -> CL_PAREN
-- On WARNING reduce production unode -> CL_PAREN
-- On UNDEF reduce production unode -> CL_PAREN
-- On TEXT reduce production unode -> CL_PAREN
-- On OP_PAREN reduce production unode -> CL_PAREN
-- On LINE reduce production unode -> CL_PAREN
-- On INCLUDE reduce production unode -> CL_PAREN
-- On IFDEF reduce production unode -> CL_PAREN
-- On IF reduce production unode -> CL_PAREN
-- On IDENT reduce production unode -> CL_PAREN
-- On FUNIDENT reduce production unode -> CL_PAREN
-- On EXT reduce production unode -> CL_PAREN
-- On ERROR reduce production unode -> CL_PAREN
-- On ENDIF reduce production unode -> CL_PAREN
-- On ELSE reduce production unode -> CL_PAREN
-- On ELIF reduce production unode -> CL_PAREN
-- On DEFUN reduce production unode -> CL_PAREN
-- On DEF reduce production unode -> CL_PAREN
-- On CURRENT_LINE reduce production unode -> CL_PAREN
-- On CURRENT_FILE reduce production unode -> CL_PAREN
-- On COMMA reduce production unode -> CL_PAREN
-- On CL_PAREN reduce production unode -> CL_PAREN

State 134:
node -> IF test unode_list0 . elif_list ENDIF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IF test unode_list0 . elif_list error [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On ELSE shift to state 135
-- On ELIF shift to state 140
-- On elif_list shift to state 146
-- On error reduce production elif_list ->
-- On ENDIF reduce production elif_list ->

State 135:
elif_list -> ELSE . unode_list0 [ error ENDIF ]
-- On WARNING shift to state 8
-- On UNDEF shift to state 9
-- On TEXT shift to state 10
-- On OP_PAREN shift to state 11
-- On LINE shift to state 12
-- On INCLUDE shift to state 13
-- On IFDEF shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 78
-- On FUNIDENT shift to state 79
-- On EXT shift to state 84
-- On ERROR shift to state 85
-- On DEFUN shift to state 86
-- On DEF shift to state 127
-- On CURRENT_LINE shift to state 130
-- On CURRENT_FILE shift to state 131
-- On COMMA shift to state 132
-- On CL_PAREN shift to state 133
-- On unode_list0 shift to state 136
-- On unode shift to state 137
-- On node shift to state 139
-- On error reduce production unode_list0 ->
-- On ENDIF reduce production unode_list0 ->

State 136:
elif_list -> ELSE unode_list0 . [ error ENDIF ]
-- On error reduce production elif_list -> ELSE unode_list0
-- On ENDIF reduce production elif_list -> ELSE unode_list0

State 137:
unode_list0 -> unode . unode_list0 [ error ENDIF ELSE ELIF ]
-- On WARNING shift to state 8
-- On UNDEF shift to state 9
-- On TEXT shift to state 10
-- On OP_PAREN shift to state 11
-- On LINE shift to state 12
-- On INCLUDE shift to state 13
-- On IFDEF shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 78
-- On FUNIDENT shift to state 79
-- On EXT shift to state 84
-- On ERROR shift to state 85
-- On DEFUN shift to state 86
-- On DEF shift to state 127
-- On CURRENT_LINE shift to state 130
-- On CURRENT_FILE shift to state 131
-- On COMMA shift to state 132
-- On CL_PAREN shift to state 133
-- On unode_list0 shift to state 138
-- On unode shift to state 137
-- On node shift to state 139
-- On error reduce production unode_list0 ->
-- On ENDIF reduce production unode_list0 ->
-- On ELSE reduce production unode_list0 ->
-- On ELIF reduce production unode_list0 ->

State 138:
unode_list0 -> unode unode_list0 . [ error ENDIF ELSE ELIF ]
-- On error reduce production unode_list0 -> unode unode_list0
-- On ENDIF reduce production unode_list0 -> unode unode_list0
-- On ELSE reduce production unode_list0 -> unode unode_list0
-- On ELIF reduce production unode_list0 -> unode unode_list0

State 139:
unode -> node . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production unode -> node
-- On WARNING reduce production unode -> node
-- On UNDEF reduce production unode -> node
-- On TEXT reduce production unode -> node
-- On OP_PAREN reduce production unode -> node
-- On LINE reduce production unode -> node
-- On INCLUDE reduce production unode -> node
-- On IFDEF reduce production unode -> node
-- On IF reduce production unode -> node
-- On IDENT reduce production unode -> node
-- On FUNIDENT reduce production unode -> node
-- On EXT reduce production unode -> node
-- On ERROR reduce production unode -> node
-- On ENDIF reduce production unode -> node
-- On ELSE reduce production unode -> node
-- On ELIF reduce production unode -> node
-- On DEFUN reduce production unode -> node
-- On DEF reduce production unode -> node
-- On CURRENT_LINE reduce production unode -> node
-- On CURRENT_FILE reduce production unode -> node
-- On COMMA reduce production unode -> node
-- On CL_PAREN reduce production unode -> node

State 140:
elif_list -> ELIF . test unode_list0 elif_list [ error ENDIF ]
-- On TRUE shift to state 16
-- On OP_PAREN shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LNOT shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 53
-- On DEFINED shift to state 54
-- On test shift to state 141
-- On bexpr shift to state 144
-- On aexpr shift to state 57

State 141:
elif_list -> ELIF test . unode_list0 elif_list [ error ENDIF ]
-- On WARNING shift to state 8
-- On UNDEF shift to state 9
-- On TEXT shift to state 10
-- On OP_PAREN shift to state 11
-- On LINE shift to state 12
-- On INCLUDE shift to state 13
-- On IFDEF shift to state 14
-- On IF shift to state 15
-- On IDENT shift to state 78
-- On FUNIDENT shift to state 79
-- On EXT shift to state 84
-- On ERROR shift to state 85
-- On DEFUN shift to state 86
-- On DEF shift to state 127
-- On CURRENT_LINE shift to state 130
-- On CURRENT_FILE shift to state 131
-- On COMMA shift to state 132
-- On CL_PAREN shift to state 133
-- On unode_list0 shift to state 142
-- On unode shift to state 137
-- On node shift to state 139
-- On error reduce production unode_list0 ->
-- On ENDIF reduce production unode_list0 ->
-- On ELSE reduce production unode_list0 ->
-- On ELIF reduce production unode_list0 ->

State 142:
elif_list -> ELIF test unode_list0 . elif_list [ error ENDIF ]
-- On ELSE shift to state 135
-- On ELIF shift to state 140
-- On elif_list shift to state 143
-- On error reduce production elif_list ->
-- On ENDIF reduce production elif_list ->

State 143:
elif_list -> ELIF test unode_list0 elif_list . [ error ENDIF ]
-- On error reduce production elif_list -> ELIF test unode_list0 elif_list
-- On ENDIF reduce production elif_list -> ELIF test unode_list0 elif_list

State 144:
bexpr -> bexpr . AND bexpr [ OR ENDTEST AND ]
bexpr -> bexpr . OR bexpr [ OR ENDTEST AND ]
test -> bexpr . ENDTEST [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On OR shift to state 71
-- On ENDTEST shift to state 145
-- On AND shift to state 73

State 145:
test -> bexpr ENDTEST . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production test -> bexpr ENDTEST
-- On WARNING reduce production test -> bexpr ENDTEST
-- On UNDEF reduce production test -> bexpr ENDTEST
-- On TEXT reduce production test -> bexpr ENDTEST
-- On OP_PAREN reduce production test -> bexpr ENDTEST
-- On LINE reduce production test -> bexpr ENDTEST
-- On INCLUDE reduce production test -> bexpr ENDTEST
-- On IFDEF reduce production test -> bexpr ENDTEST
-- On IF reduce production test -> bexpr ENDTEST
-- On IDENT reduce production test -> bexpr ENDTEST
-- On FUNIDENT reduce production test -> bexpr ENDTEST
-- On EXT reduce production test -> bexpr ENDTEST
-- On ERROR reduce production test -> bexpr ENDTEST
-- On ENDIF reduce production test -> bexpr ENDTEST
-- On ELSE reduce production test -> bexpr ENDTEST
-- On ELIF reduce production test -> bexpr ENDTEST
-- On DEFUN reduce production test -> bexpr ENDTEST
-- On DEF reduce production test -> bexpr ENDTEST
-- On CURRENT_LINE reduce production test -> bexpr ENDTEST
-- On CURRENT_FILE reduce production test -> bexpr ENDTEST
-- On COMMA reduce production test -> bexpr ENDTEST
-- On CL_PAREN reduce production test -> bexpr ENDTEST

State 146:
node -> IF test unode_list0 elif_list . ENDIF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IF test unode_list0 elif_list . error [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error shift to state 147
-- On ENDIF shift to state 148

State 147:
node -> IF test unode_list0 elif_list error . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> IF test unode_list0 elif_list error
-- On UNDEF reduce production node -> IF test unode_list0 elif_list error
-- On TEXT reduce production node -> IF test unode_list0 elif_list error
-- On OP_PAREN reduce production node -> IF test unode_list0 elif_list error
-- On LINE reduce production node -> IF test unode_list0 elif_list error
-- On INCLUDE reduce production node -> IF test unode_list0 elif_list error
-- On IFDEF reduce production node -> IF test unode_list0 elif_list error
-- On IF reduce production node -> IF test unode_list0 elif_list error
-- On IDENT reduce production node -> IF test unode_list0 elif_list error
-- On FUNIDENT reduce production node -> IF test unode_list0 elif_list error
-- On EXT reduce production node -> IF test unode_list0 elif_list error
-- On ERROR reduce production node -> IF test unode_list0 elif_list error
-- On EOF reduce production node -> IF test unode_list0 elif_list error
-- On ENDEF reduce production node -> IF test unode_list0 elif_list error
-- On DEFUN reduce production node -> IF test unode_list0 elif_list error
-- On DEF reduce production node -> IF test unode_list0 elif_list error
-- On CURRENT_LINE reduce production node -> IF test unode_list0 elif_list error
-- On CURRENT_FILE reduce production node -> IF test unode_list0 elif_list error
-- On COMMA reduce production node -> IF test unode_list0 elif_list error
-- On CL_PAREN reduce production node -> IF test unode_list0 elif_list error

State 148:
node -> IF test unode_list0 elif_list ENDIF . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> IF test unode_list0 elif_list ENDIF
-- On UNDEF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On TEXT reduce production node -> IF test unode_list0 elif_list ENDIF
-- On OP_PAREN reduce production node -> IF test unode_list0 elif_list ENDIF
-- On LINE reduce production node -> IF test unode_list0 elif_list ENDIF
-- On INCLUDE reduce production node -> IF test unode_list0 elif_list ENDIF
-- On IFDEF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On IF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On IDENT reduce production node -> IF test unode_list0 elif_list ENDIF
-- On FUNIDENT reduce production node -> IF test unode_list0 elif_list ENDIF
-- On EXT reduce production node -> IF test unode_list0 elif_list ENDIF
-- On ERROR reduce production node -> IF test unode_list0 elif_list ENDIF
-- On EOF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On ENDEF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On DEFUN reduce production node -> IF test unode_list0 elif_list ENDIF
-- On DEF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On CURRENT_LINE reduce production node -> IF test unode_list0 elif_list ENDIF
-- On CURRENT_FILE reduce production node -> IF test unode_list0 elif_list ENDIF
-- On COMMA reduce production node -> IF test unode_list0 elif_list ENDIF
-- On CL_PAREN reduce production node -> IF test unode_list0 elif_list ENDIF

State 149:
pnode_or_comma_list0 -> COMMA . pnode_or_comma_list0 [ CL_PAREN ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 81
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 149
-- On pnode_or_comma_list0 shift to state 150
-- On pnode shift to state 151
-- On node shift to state 121
-- On CL_PAREN reduce production pnode_or_comma_list0 ->

State 150:
pnode_or_comma_list0 -> COMMA pnode_or_comma_list0 . [ CL_PAREN ]
-- On CL_PAREN reduce production pnode_or_comma_list0 -> COMMA pnode_or_comma_list0

State 151:
pnode_or_comma_list0 -> pnode . pnode_or_comma_list0 [ CL_PAREN ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 81
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 149
-- On pnode_or_comma_list0 shift to state 152
-- On pnode shift to state 151
-- On node shift to state 121
-- On CL_PAREN reduce production pnode_or_comma_list0 ->

State 152:
pnode_or_comma_list0 -> pnode pnode_or_comma_list0 . [ CL_PAREN ]
-- On CL_PAREN reduce production pnode_or_comma_list0 -> pnode pnode_or_comma_list0

State 153:
pnode -> OP_PAREN pnode_or_comma_list0 . CL_PAREN [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On CL_PAREN shift to state 154

State 154:
pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On UNDEF reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On TEXT reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On OP_PAREN reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On LINE reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On INCLUDE reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On IFDEF reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On IF reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On IDENT reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On FUNIDENT reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On EXT reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On ERROR reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On DEFUN reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On DEF reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On CURRENT_LINE reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On CURRENT_FILE reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On COMMA reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN
-- On CL_PAREN reduce production pnode -> OP_PAREN pnode_or_comma_list0 CL_PAREN

State 155:
node -> FUNIDENT args1 . CL_PAREN [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On CL_PAREN shift to state 156

State 156:
node -> FUNIDENT args1 CL_PAREN . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> FUNIDENT args1 CL_PAREN
-- On WARNING reduce production node -> FUNIDENT args1 CL_PAREN
-- On UNDEF reduce production node -> FUNIDENT args1 CL_PAREN
-- On TEXT reduce production node -> FUNIDENT args1 CL_PAREN
-- On OP_PAREN reduce production node -> FUNIDENT args1 CL_PAREN
-- On LINE reduce production node -> FUNIDENT args1 CL_PAREN
-- On INCLUDE reduce production node -> FUNIDENT args1 CL_PAREN
-- On IFDEF reduce production node -> FUNIDENT args1 CL_PAREN
-- On IF reduce production node -> FUNIDENT args1 CL_PAREN
-- On IDENT reduce production node -> FUNIDENT args1 CL_PAREN
-- On FUNIDENT reduce production node -> FUNIDENT args1 CL_PAREN
-- On EXT reduce production node -> FUNIDENT args1 CL_PAREN
-- On ERROR reduce production node -> FUNIDENT args1 CL_PAREN
-- On ENDIF reduce production node -> FUNIDENT args1 CL_PAREN
-- On ELSE reduce production node -> FUNIDENT args1 CL_PAREN
-- On ELIF reduce production node -> FUNIDENT args1 CL_PAREN
-- On DEFUN reduce production node -> FUNIDENT args1 CL_PAREN
-- On DEF reduce production node -> FUNIDENT args1 CL_PAREN
-- On CURRENT_LINE reduce production node -> FUNIDENT args1 CL_PAREN
-- On CURRENT_FILE reduce production node -> FUNIDENT args1 CL_PAREN
-- On COMMA reduce production node -> FUNIDENT args1 CL_PAREN
-- On CL_PAREN reduce production node -> FUNIDENT args1 CL_PAREN

State 157:
node -> IF test unode_list0 . elif_list ENDIF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IF test unode_list0 . elif_list error [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On ELSE shift to state 135
-- On ELIF shift to state 140
-- On elif_list shift to state 158
-- On error reduce production elif_list ->
-- On ENDIF reduce production elif_list ->

State 158:
node -> IF test unode_list0 elif_list . ENDIF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IF test unode_list0 elif_list . error [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error shift to state 159
-- On ENDIF shift to state 160

State 159:
node -> IF test unode_list0 elif_list error . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> IF test unode_list0 elif_list error
-- On WARNING reduce production node -> IF test unode_list0 elif_list error
-- On UNDEF reduce production node -> IF test unode_list0 elif_list error
-- On TEXT reduce production node -> IF test unode_list0 elif_list error
-- On OP_PAREN reduce production node -> IF test unode_list0 elif_list error
-- On LINE reduce production node -> IF test unode_list0 elif_list error
-- On INCLUDE reduce production node -> IF test unode_list0 elif_list error
-- On IFDEF reduce production node -> IF test unode_list0 elif_list error
-- On IF reduce production node -> IF test unode_list0 elif_list error
-- On IDENT reduce production node -> IF test unode_list0 elif_list error
-- On FUNIDENT reduce production node -> IF test unode_list0 elif_list error
-- On EXT reduce production node -> IF test unode_list0 elif_list error
-- On ERROR reduce production node -> IF test unode_list0 elif_list error
-- On ENDIF reduce production node -> IF test unode_list0 elif_list error
-- On ELSE reduce production node -> IF test unode_list0 elif_list error
-- On ELIF reduce production node -> IF test unode_list0 elif_list error
-- On DEFUN reduce production node -> IF test unode_list0 elif_list error
-- On DEF reduce production node -> IF test unode_list0 elif_list error
-- On CURRENT_LINE reduce production node -> IF test unode_list0 elif_list error
-- On CURRENT_FILE reduce production node -> IF test unode_list0 elif_list error
-- On COMMA reduce production node -> IF test unode_list0 elif_list error
-- On CL_PAREN reduce production node -> IF test unode_list0 elif_list error

State 160:
node -> IF test unode_list0 elif_list ENDIF . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> IF test unode_list0 elif_list ENDIF
-- On WARNING reduce production node -> IF test unode_list0 elif_list ENDIF
-- On UNDEF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On TEXT reduce production node -> IF test unode_list0 elif_list ENDIF
-- On OP_PAREN reduce production node -> IF test unode_list0 elif_list ENDIF
-- On LINE reduce production node -> IF test unode_list0 elif_list ENDIF
-- On INCLUDE reduce production node -> IF test unode_list0 elif_list ENDIF
-- On IFDEF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On IF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On IDENT reduce production node -> IF test unode_list0 elif_list ENDIF
-- On FUNIDENT reduce production node -> IF test unode_list0 elif_list ENDIF
-- On EXT reduce production node -> IF test unode_list0 elif_list ENDIF
-- On ERROR reduce production node -> IF test unode_list0 elif_list ENDIF
-- On ENDIF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On ELSE reduce production node -> IF test unode_list0 elif_list ENDIF
-- On ELIF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On DEFUN reduce production node -> IF test unode_list0 elif_list ENDIF
-- On DEF reduce production node -> IF test unode_list0 elif_list ENDIF
-- On CURRENT_LINE reduce production node -> IF test unode_list0 elif_list ENDIF
-- On CURRENT_FILE reduce production node -> IF test unode_list0 elif_list ENDIF
-- On COMMA reduce production node -> IF test unode_list0 elif_list ENDIF
-- On CL_PAREN reduce production node -> IF test unode_list0 elif_list ENDIF

State 161:
node -> IFDEF unode_list0 . elif_list ENDIF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IFDEF unode_list0 . elif_list error [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On ELSE shift to state 135
-- On ELIF shift to state 140
-- On elif_list shift to state 162
-- On error reduce production elif_list ->
-- On ENDIF reduce production elif_list ->

State 162:
node -> IFDEF unode_list0 elif_list . ENDIF [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IFDEF unode_list0 elif_list . error [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error shift to state 163
-- On ENDIF shift to state 164

State 163:
node -> IFDEF unode_list0 elif_list error . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> IFDEF unode_list0 elif_list error
-- On WARNING reduce production node -> IFDEF unode_list0 elif_list error
-- On UNDEF reduce production node -> IFDEF unode_list0 elif_list error
-- On TEXT reduce production node -> IFDEF unode_list0 elif_list error
-- On OP_PAREN reduce production node -> IFDEF unode_list0 elif_list error
-- On LINE reduce production node -> IFDEF unode_list0 elif_list error
-- On INCLUDE reduce production node -> IFDEF unode_list0 elif_list error
-- On IFDEF reduce production node -> IFDEF unode_list0 elif_list error
-- On IF reduce production node -> IFDEF unode_list0 elif_list error
-- On IDENT reduce production node -> IFDEF unode_list0 elif_list error
-- On FUNIDENT reduce production node -> IFDEF unode_list0 elif_list error
-- On EXT reduce production node -> IFDEF unode_list0 elif_list error
-- On ERROR reduce production node -> IFDEF unode_list0 elif_list error
-- On ENDIF reduce production node -> IFDEF unode_list0 elif_list error
-- On ELSE reduce production node -> IFDEF unode_list0 elif_list error
-- On ELIF reduce production node -> IFDEF unode_list0 elif_list error
-- On DEFUN reduce production node -> IFDEF unode_list0 elif_list error
-- On DEF reduce production node -> IFDEF unode_list0 elif_list error
-- On CURRENT_LINE reduce production node -> IFDEF unode_list0 elif_list error
-- On CURRENT_FILE reduce production node -> IFDEF unode_list0 elif_list error
-- On COMMA reduce production node -> IFDEF unode_list0 elif_list error
-- On CL_PAREN reduce production node -> IFDEF unode_list0 elif_list error

State 164:
node -> IFDEF unode_list0 elif_list ENDIF . [ error WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR ENDIF ELSE ELIF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On WARNING reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On UNDEF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On TEXT reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On OP_PAREN reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On LINE reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On INCLUDE reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On IFDEF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On IF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On IDENT reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On FUNIDENT reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On EXT reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On ERROR reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On ENDIF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On ELSE reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On ELIF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On DEFUN reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On DEF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On CURRENT_LINE reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On CURRENT_FILE reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On COMMA reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On CL_PAREN reduce production node -> IFDEF unode_list0 elif_list ENDIF

State 165:
node -> IFDEF unode_list0 . elif_list ENDIF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IFDEF unode_list0 . elif_list error [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On ELSE shift to state 135
-- On ELIF shift to state 140
-- On elif_list shift to state 166
-- On error reduce production elif_list ->
-- On ENDIF reduce production elif_list ->

State 166:
node -> IFDEF unode_list0 elif_list . ENDIF [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
node -> IFDEF unode_list0 elif_list . error [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On error shift to state 167
-- On ENDIF shift to state 168

State 167:
node -> IFDEF unode_list0 elif_list error . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> IFDEF unode_list0 elif_list error
-- On UNDEF reduce production node -> IFDEF unode_list0 elif_list error
-- On TEXT reduce production node -> IFDEF unode_list0 elif_list error
-- On OP_PAREN reduce production node -> IFDEF unode_list0 elif_list error
-- On LINE reduce production node -> IFDEF unode_list0 elif_list error
-- On INCLUDE reduce production node -> IFDEF unode_list0 elif_list error
-- On IFDEF reduce production node -> IFDEF unode_list0 elif_list error
-- On IF reduce production node -> IFDEF unode_list0 elif_list error
-- On IDENT reduce production node -> IFDEF unode_list0 elif_list error
-- On FUNIDENT reduce production node -> IFDEF unode_list0 elif_list error
-- On EXT reduce production node -> IFDEF unode_list0 elif_list error
-- On ERROR reduce production node -> IFDEF unode_list0 elif_list error
-- On EOF reduce production node -> IFDEF unode_list0 elif_list error
-- On ENDEF reduce production node -> IFDEF unode_list0 elif_list error
-- On DEFUN reduce production node -> IFDEF unode_list0 elif_list error
-- On DEF reduce production node -> IFDEF unode_list0 elif_list error
-- On CURRENT_LINE reduce production node -> IFDEF unode_list0 elif_list error
-- On CURRENT_FILE reduce production node -> IFDEF unode_list0 elif_list error
-- On COMMA reduce production node -> IFDEF unode_list0 elif_list error
-- On CL_PAREN reduce production node -> IFDEF unode_list0 elif_list error

State 168:
node -> IFDEF unode_list0 elif_list ENDIF . [ WARNING UNDEF TEXT OP_PAREN LINE INCLUDE IFDEF IF IDENT FUNIDENT EXT ERROR EOF ENDEF DEFUN DEF CURRENT_LINE CURRENT_FILE COMMA CL_PAREN ]
-- On WARNING reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On UNDEF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On TEXT reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On OP_PAREN reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On LINE reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On INCLUDE reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On IFDEF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On IF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On IDENT reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On FUNIDENT reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On EXT reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On ERROR reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On EOF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On ENDEF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On DEFUN reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On DEF reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On CURRENT_LINE reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On CURRENT_FILE reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On COMMA reduce production node -> IFDEF unode_list0 elif_list ENDIF
-- On CL_PAREN reduce production node -> IFDEF unode_list0 elif_list ENDIF

State 169:
main -> EOF . [ # ]
-- On # reduce production main -> EOF

State 170:
main -> unode . main [ # ]
-- On WARNING shift to state 1
-- On UNDEF shift to state 2
-- On TEXT shift to state 3
-- On OP_PAREN shift to state 4
-- On LINE shift to state 5
-- On INCLUDE shift to state 6
-- On IFDEF shift to state 7
-- On IF shift to state 82
-- On IDENT shift to state 92
-- On FUNIDENT shift to state 93
-- On EXT shift to state 95
-- On ERROR shift to state 96
-- On EOF shift to state 169
-- On DEFUN shift to state 97
-- On DEF shift to state 101
-- On CURRENT_LINE shift to state 102
-- On CURRENT_FILE shift to state 103
-- On COMMA shift to state 104
-- On CL_PAREN shift to state 105
-- On unode shift to state 170
-- On node shift to state 110
-- On main shift to state 171

State 171:
main -> unode main . [ # ]
-- On # reduce production main -> unode main

State 172:
main' -> main . [ # ]
-- On # accept main

