%{
  open Printf
  open Cppo_types

  let print = print_string

  let rhs_loc n1 n2 = (Parsing.rhs_start_pos n1, Parsing.rhs_end_pos n2)
%}
%start main
%token AND
%token ASR
%token < Cppo_types.loc > CL_PAREN
%token < Cppo_types.loc > COMMA
%token < Cppo_types.loc > CURRENT_FILE
%token < Cppo_types.loc > CURRENT_LINE
%token < Cppo_types.loc * string > DEF
%token DEFINED
%token < Cppo_types.loc * string > DEFUN
%token < Cppo_types.loc > ELIF
%token < Cppo_types.loc > ELSE
%token < Cppo_types.loc > ENDEF
%token < Cppo_types.loc > ENDIF
%token < Cppo_types.loc > ENDTEST
%token EOF
%token EQ
%token < Cppo_types.loc * string > ERROR
%token < Cppo_types.loc * string * string > EXT
%token FALSE
%token < Cppo_types.loc * string > FUNIDENT
%token GE
%token GT
%token < Cppo_types.loc * string > IDENT
%token < Cppo_types.loc > IF
%token < Cppo_types.loc * Cppo_types.bool_expr > IFDEF
%token < Cppo_types.loc * string > INCLUDE
%token < int64 > INT
%token LAND
%token LE
%token < Cppo_types.loc * string option * int > LINE
%token LNOT
%token LOR
%token LSL
%token LSR
%token LT
%token LXOR
%token MINUS
%token < Cppo_types.loc > MOD
%token NE
%token NOT
%token < Cppo_types.loc > OP_PAREN
%token OR
%token PLUS
%token < Cppo_types.loc > SLASH
%token STAR
%token < Cppo_types.loc * bool * string > TEXT
%token TRUE
%token < Cppo_types.loc * string > UNDEF
%token < Cppo_types.loc * string > WARNING
%left OR
%left AND
%left MINUS PLUS
%left SLASH STAR
%left ASR LAND LOR LSL LSR LXOR MOD
%nonassoc NOT
%nonassoc LNOT
%nonassoc UMINUS
%type < Cppo_types.node list > main
%%

main:
  _1 = unode _2 = main
    {             ( _1 :: _2 )}
| _1 = EOF
    {             ( [] )}

unode_list0:
  _1 = unode _2 = unode_list0
    {                     ( _1 :: _2 )}
| 
    {                     ( [] )}

pnode_list0:
  _1 = pnode _2 = pnode_list0
    {                     ( _1 :: _2 )}
| 
    {                     ( [] )}

unode:
  _1 = node
    {                ( _1 )}
| _1 = OP_PAREN
    {                ( `Text (_1, false, "(") )}
| _1 = CL_PAREN
    {                ( `Text (_1, false, ")") )}
| _1 = COMMA
    {                ( `Text (_1, false, ",") )}

pnode:
  _1 = node
    {                ( _1 )}
| _1 = OP_PAREN _2 = pnode_or_comma_list0 _3 = CL_PAREN
    {                ( `Seq [`Text (_1, false, "(");
                        `Seq _2;
                        `Text (_3, false, ")")] )}

node:
  _1 = TEXT
    {                ( `Text _1 )}
| _1 = IDENT
    {                ( let loc, name = _1 in
                  `Ident (loc, name, None) )}
| _1 = FUNIDENT _2 = args1 _3 = CL_PAREN
    {                (
                (* macro application that receives at least one argument,
                   possibly empty.  We cannot distinguish syntactically between
                   zero argument and one empty argument.
                *)
                  let (pos1, _), name = _1 in
                  let _, pos2 = _3 in
                  `Ident ((pos1, pos2), name, Some _2) )}
| _1 = FUNIDENT _2 = error
    {                ( error (fst _1) "Invalid macro application" )}
| _1 = CURRENT_LINE
    {                ( `Current_line _1 )}
| _1 = CURRENT_FILE
    {                ( `Current_file _1 )}
| _1 = DEF _2 = unode_list0 _3 = ENDEF
    {                ( let (pos1, _), name = _1 in

                  (* Additional spacing is needed for cases like '+foo+'
                     expanding into '++' instead of '+ +'. *)
                  let safe_space = `Text (_3, true, " ") in

                  let body = _2 @ [safe_space] in
                  let _, pos2 = _3 in
                  `Def ((pos1, pos2), name, body) )}
| _1 = DEFUN _2 = def_args1 _3 = CL_PAREN _4 = unode_list0 _5 = ENDEF
    {                ( let (pos1, _), name = _1 in
                  let args = _2 in

                  (* Additional spacing is needed for cases like 'foo()bar'
                     where 'foo()' expands into 'abc', giving 'abcbar'
                     instead of 'abc bar';
                     Also needed for '+foo()+' expanding into '++' instead
                     of '+ +'. *)
                  let safe_space = `Text (_5, true, " ") in

                  let body = _4 @ [safe_space] in
                  let _, pos2 = _5 in
                  `Defun ((pos1, pos2), name, args, body) )}
| _1 = DEFUN _2 = CL_PAREN
    {                ( error (fst (fst _1), snd _2)
                    "At least one argument is required" )}
| _1 = UNDEF
    {                ( `Undef _1 )}
| _1 = WARNING
    {                ( `Warning _1 )}
| _1 = ERROR
    {                ( `Error _1 )}
| _1 = INCLUDE
    {                ( `Include _1 )}
| _1 = EXT
    {                ( `Ext _1 )}
| _1 = IF _2 = test _3 = unode_list0 _4 = elif_list _5 = ENDIF
    {                ( let pos1, _ = _1 in
                  let _, pos2 = _5 in
                  let loc = (pos1, pos2) in
                  let test = _2 in
                  let if_true = _3 in
                  let if_false =
                    List.fold_right (
                      fun (loc, test, if_true) if_false ->
                        [`Cond (loc, test, if_true, if_false) ]
                    ) _4 []
                  in
                  `Cond (loc, test, if_true, if_false)
                )}
| _1 = IF _2 = test _3 = unode_list0 _4 = elif_list _5 = error
    {                ( (* BUG? ocamlyacc fails to reduce that rule but not menhir *)
                  error _1 "missing #endif" )}
| _1 = IFDEF _2 = unode_list0 _3 = elif_list _4 = ENDIF
    {                ( let (pos1, _), test = _1 in
                  let _, pos2 = _4 in
                  let loc = (pos1, pos2) in
                  let if_true = _2 in
                  let if_false =
                    List.fold_right (
                      fun (loc, test, if_true) if_false ->
                        [`Cond (loc, test, if_true, if_false) ]
                    ) _3 []
                  in
                  `Cond (loc, test, if_true, if_false)
                )}
| _1 = IFDEF _2 = unode_list0 _3 = elif_list _4 = error
    {                ( error (fst _1) "missing #endif" )}
| _1 = LINE
    {                ( `Line _1 )}

elif_list:
  _1 = ELIF _2 = test _3 = unode_list0 _4 = elif_list
    {                   ( let pos1, _ = _1 in
                     let pos2 = Parsing.rhs_end_pos 4 in
                     ((pos1, pos2), _2, _3) :: _4 )}
| _1 = ELSE _2 = unode_list0
    {                   ( let pos1, _ = _1 in
                     let pos2 = Parsing.rhs_end_pos 2 in
                     [ ((pos1, pos2), `True, _2) ] )}
| 
    {                   ( [] )}

args1:
  _1 = pnode_list0 _2 = COMMA _3 = args1
    {                            ( _1 :: _3  )}
| _1 = pnode_list0
    {                            ( [ _1 ] )}

pnode_or_comma_list0:
  _1 = pnode _2 = pnode_or_comma_list0
    {                               ( _1 :: _2 )}
| _1 = COMMA _2 = pnode_or_comma_list0
    {                               ( `Text (_1, false, ",") :: _2 )}
| 
    {                               ( [] )}

def_args1:
  _1 = arg_blank _2 = IDENT _3 = COMMA _4 = def_args1
    {                               ( (snd _2) :: _4 )}
| _1 = arg_blank _2 = IDENT
    {                               ( [ snd _2 ] )}

arg_blank:
  _1 = TEXT _2 = arg_blank
    {                         ( let loc, is_space, s = _1 in
                           if not is_space then
                             error loc "Invalid argument list"
                         )}
| 
    {                         ( () )}

test:
  _1 = bexpr _2 = ENDTEST
    {                ( _1 )}

bexpr:
  _1 = TRUE
    {                                    ( `True )}
| _1 = FALSE
    {                                    ( `False )}
| _1 = DEFINED _2 = IDENT
    {                                    ( `Defined (snd _2) )}
| _1 = OP_PAREN _2 = bexpr _3 = CL_PAREN
    {                                    ( _2 )}
| _1 = NOT _2 = bexpr
    {                                    ( `Not _2 )}
| _1 = bexpr _2 = AND _3 = bexpr
    {                                    ( `And (_1, _3) )}
| _1 = bexpr _2 = OR _3 = bexpr
    {                                    ( `Or (_1, _3) )}
| _1 = aexpr _2 = EQ _3 = aexpr
    {                                    ( `Eq (_1, _3) )}
| _1 = aexpr _2 = LT _3 = aexpr
    {                                    ( `Lt (_1, _3) )}
| _1 = aexpr _2 = GT _3 = aexpr
    {                                    ( `Gt (_1, _3) )}
| _1 = aexpr _2 = NE _3 = aexpr
    {                                    ( `Not (`Eq (_1, _3)) )}
| _1 = aexpr _2 = LE _3 = aexpr
    {                                    ( `Not (`Gt (_1, _3)) )}
| _1 = aexpr _2 = GE _3 = aexpr
    {                                    ( `Not (`Lt (_1, _3)) )}

aexpr:
  _1 = INT
    {                             ( `Int _1 )}
| _1 = IDENT
    {                             ( `Ident _1 )}
| _1 = OP_PAREN _2 = aexpr_list _3 = CL_PAREN
    {                             ( match _2 with
                               | [x] -> x
                               | l ->
                                 let pos1, _ = _1 in
                                 let _, pos2 = _3 in
                                 `Tuple ((pos1, pos2), l)
                             )}
| _1 = aexpr _2 = PLUS _3 = aexpr
    {                             ( `Add (_1, _3) )}
| _1 = aexpr _2 = MINUS _3 = aexpr
    {                             ( `Sub (_1, _3) )}
| _1 = aexpr _2 = STAR _3 = aexpr
    {                             ( `Mul (_1, _3) )}
| _1 = aexpr _2 = SLASH _3 = aexpr
    {                             ( `Div (_2, _1, _3) )}
| _1 = aexpr _2 = MOD _3 = aexpr
    {                             ( `Mod (_2, _1, _3) )}
| _1 = aexpr _2 = LSL _3 = aexpr
    {                             ( `Lsl (_1, _3) )}
| _1 = aexpr _2 = LSR _3 = aexpr
    {                             ( `Lsr (_1, _3) )}
| _1 = aexpr _2 = ASR _3 = aexpr
    {                             ( `Lsr (_1, _3) )}
| _1 = aexpr _2 = LAND _3 = aexpr
    {                             ( `Land (_1, _3) )}
| _1 = aexpr _2 = LOR _3 = aexpr
    {                             ( `Lor (_1, _3) )}
| _1 = aexpr _2 = LXOR _3 = aexpr
    {                             ( `Lxor (_1, _3) )}
| _1 = LNOT _2 = aexpr
    {                             ( `Lnot _2 )}
| _1 = MINUS _2 = aexpr %prec UMINUS
    {                             ( `Neg _2 )}

aexpr_list:
  _1 = aexpr _2 = COMMA _3 = aexpr_list
    {                             ( _1 :: _3 )}
| _1 = aexpr
    {                             ( [_1] )}

%%
