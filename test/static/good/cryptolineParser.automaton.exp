State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On XOR shift to state 1
-- On VPC shift to state 42
-- On USUBR shift to state 50
-- On USUBC shift to state 61
-- On USUBB shift to state 67
-- On USUB shift to state 73
-- On USPLIT shift to state 78
-- On USBCS shift to state 84
-- On USBCR shift to state 92
-- On USBC shift to state 99
-- On USBBS shift to state 105
-- On USBBR shift to state 112
-- On USBB shift to state 119
-- On UMULS shift to state 125
-- On UMULR shift to state 130
-- On UMULL shift to state 135
-- On UMULJ shift to state 141
-- On UMUL shift to state 145
-- On UINT shift to state 2
-- On UADDS shift to state 150
-- On UADDR shift to state 156
-- On UADD shift to state 161
-- On UADCS shift to state 166
-- On UADCR shift to state 173
-- On UADC shift to state 179
-- On SUBR shift to state 185
-- On SUBC shift to state 191
-- On SUBB shift to state 197
-- On SUB shift to state 203
-- On SSUBR shift to state 208
-- On SSUBC shift to state 214
-- On SSUBB shift to state 220
-- On SSUB shift to state 226
-- On SSPLIT shift to state 231
-- On SSBCS shift to state 237
-- On SSBCR shift to state 244
-- On SSBC shift to state 251
-- On SSBBS shift to state 257
-- On SSBBR shift to state 264
-- On SSBB shift to state 271
-- On SPLIT shift to state 277
-- On SMULS shift to state 283
-- On SMULR shift to state 288
-- On SMULL shift to state 293
-- On SMULJ shift to state 299
-- On SMUL shift to state 303
-- On SINT shift to state 3
-- On SHL shift to state 308
-- On SET shift to state 313
-- On SBCS shift to state 315
-- On SBCR shift to state 322
-- On SBC shift to state 329
-- On SBBS shift to state 335
-- On SBBR shift to state 342
-- On SBB shift to state 349
-- On SADDS shift to state 355
-- On SADDR shift to state 361
-- On SADD shift to state 366
-- On SADCS shift to state 371
-- On SADCR shift to state 378
-- On SADC shift to state 384
-- On RCUT shift to state 390
-- On OR shift to state 851
-- On NOT shift to state 855
-- On NOP shift to state 858
-- On NONDET shift to state 859
-- On MULS shift to state 862
-- On MULR shift to state 867
-- On MULL shift to state 872
-- On MULJ shift to state 878
-- On MUL shift to state 882
-- On MOV shift to state 887
-- On JOIN shift to state 891
-- On ID shift to state 895
-- On GHOST shift to state 899
-- On ECUT shift to state 1189
-- On CUT shift to state 1195
-- On CSHL shift to state 1215
-- On CMOV shift to state 1222
-- On CLEAR shift to state 1227
-- On CAST shift to state 1229
-- On CALL shift to state 1237
-- On BIT shift to state 7
-- On ASSUME shift to state 1258
-- On ASSERT shift to state 1260
-- On AND shift to state 1262
-- On ADDS shift to state 1266
-- On ADDR shift to state 1272
-- On ADD shift to state 1277
-- On ADCS shift to state 1282
-- On ADCR shift to state 1289
-- On ADC shift to state 1295
-- On typ shift to state 1301
-- On program shift to state 1303
-- On prog shift to state 1305
-- On lhs shift to state 1306
-- On instrs shift to state 1566
-- On instr shift to state 1567
## Reductions:

State 1:
## Known stack suffix:
## XOR
## LR(1) items:
instr -> XOR . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 11
## Reductions:

State 2:
## Known stack suffix:
## UINT
## LR(1) items:
typ -> UINT . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DOT DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DOT DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production typ -> UINT

State 3:
## Known stack suffix:
## SINT
## LR(1) items:
typ -> SINT . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DOT DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DOT DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production typ -> SINT

State 4:
## Known stack suffix:
## ID
## LR(1) items:
lval -> ID . [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
lval -> ID . AT typ [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
lval -> ID . AT error [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
-- On AT shift to state 5
## Reductions:
-- On UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT
--   reduce production lval -> ID

State 5:
## Known stack suffix:
## ID AT
## LR(1) items:
lval -> ID AT . typ [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
lval -> ID AT . error [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
-- On error shift to state 6
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On BIT shift to state 7
-- On typ shift to state 8
## Reductions:

State 6:
## Known stack suffix:
## ID AT error
## LR(1) items:
lval -> ID AT error . [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
## Reductions:
-- On UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT
--   reduce production lval -> ID AT error

State 7:
## Known stack suffix:
## BIT
## LR(1) items:
typ -> BIT . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DOT DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DOT DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production typ -> BIT

State 8:
## Known stack suffix:
## ID AT typ
## LR(1) items:
lval -> ID AT typ . [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
## Reductions:
-- On UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT
--   reduce production lval -> ID AT typ

State 9:
## Known stack suffix:
## typ
## LR(1) items:
lval -> typ . ID [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
-- On ID shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## typ ID
## LR(1) items:
lval -> typ ID . [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
## Reductions:
-- On UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT
--   reduce production lval -> typ ID

State 11:
## Known stack suffix:
## XOR lval
## LR(1) items:
instr -> XOR lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 40
## Reductions:

State 12:
## Known stack suffix:
## NUM
## LR(1) items:
simple_const -> NUM . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD
--   reduce production simple_const -> NUM

State 13:
## Known stack suffix:
## LPAR
## LR(1) items:
const -> LPAR . complex_const RPAR [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD ]
## Transitions:
-- On SUBOP shift to state 14
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 18
-- On complex_const shift to state 20
## Reductions:

State 14:
## Known stack suffix:
## SUBOP
## LR(1) items:
complex_const -> SUBOP . complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 14
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 18
-- On complex_const shift to state 19
## Reductions:

State 15:
## Known stack suffix:
## DEREFOP
## LR(1) items:
simple_const -> DEREFOP . ID [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD ]
## Transitions:
-- On ID shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## DEREFOP ID
## LR(1) items:
simple_const -> DEREFOP ID . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD
--   reduce production simple_const -> DEREFOP ID

State 17:
## Known stack suffix:
## simple_const
## LR(1) items:
const -> simple_const . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD
--   reduce production const -> simple_const

State 18:
## Known stack suffix:
## const
## LR(1) items:
complex_const -> const . [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
## Reductions:
-- On SUBOP RPAR POWOP MULOP ADDOP
--   reduce production complex_const -> const

State 19:
## Known stack suffix:
## SUBOP complex_const
## LR(1) items:
complex_const -> SUBOP complex_const . [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . ADDOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . SUBOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . MULOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . POWOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
## Reductions:
-- On SUBOP RPAR POWOP MULOP ADDOP
--   reduce production complex_const -> SUBOP complex_const

State 20:
## Known stack suffix:
## LPAR complex_const
## LR(1) items:
complex_const -> complex_const . ADDOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . SUBOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . MULOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . POWOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
const -> LPAR complex_const . RPAR [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD ]
## Transitions:
-- On SUBOP shift to state 21
-- On RPAR shift to state 27
-- On POWOP shift to state 23
-- On MULOP shift to state 25
-- On ADDOP shift to state 28
## Reductions:

State 21:
## Known stack suffix:
## complex_const SUBOP
## LR(1) items:
complex_const -> complex_const SUBOP . complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 14
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 18
-- On complex_const shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## complex_const SUBOP complex_const
## LR(1) items:
complex_const -> complex_const . ADDOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . SUBOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const SUBOP complex_const . [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . MULOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . POWOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On POWOP shift to state 23
-- On MULOP shift to state 25
## Reductions:
-- On SUBOP RPAR ADDOP
--   reduce production complex_const -> complex_const SUBOP complex_const

State 23:
## Known stack suffix:
## complex_const POWOP
## LR(1) items:
complex_const -> complex_const POWOP . complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 14
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 18
-- On complex_const shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## complex_const POWOP complex_const
## LR(1) items:
complex_const -> complex_const . ADDOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . SUBOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . MULOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . POWOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const POWOP complex_const . [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
## Reductions:
-- On SUBOP RPAR POWOP MULOP ADDOP
--   reduce production complex_const -> complex_const POWOP complex_const

State 25:
## Known stack suffix:
## complex_const MULOP
## LR(1) items:
complex_const -> complex_const MULOP . complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 14
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 18
-- On complex_const shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## complex_const MULOP complex_const
## LR(1) items:
complex_const -> complex_const . ADDOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . SUBOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . MULOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const MULOP complex_const . [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . POWOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On POWOP shift to state 23
## Reductions:
-- On SUBOP RPAR MULOP ADDOP
--   reduce production complex_const -> complex_const MULOP complex_const

State 27:
## Known stack suffix:
## LPAR complex_const RPAR
## LR(1) items:
const -> LPAR complex_const RPAR . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE PROC POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ EOF DEREFOP CONST COMMA BIT AT ANDOP AND ADDOP ADD
--   reduce production const -> LPAR complex_const RPAR

State 28:
## Known stack suffix:
## complex_const ADDOP
## LR(1) items:
complex_const -> complex_const ADDOP . complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 14
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 18
-- On complex_const shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## complex_const ADDOP complex_const
## LR(1) items:
complex_const -> complex_const . ADDOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const ADDOP complex_const . [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . SUBOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . MULOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . POWOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On POWOP shift to state 23
-- On MULOP shift to state 25
## Reductions:
-- On SUBOP RPAR ADDOP
--   reduce production complex_const -> complex_const ADDOP complex_const

State 30:
## Known stack suffix:
## ID
## LR(1) items:
defined_var -> ID . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
defined_var -> ID . AT typ [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On AT shift to state 31
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production defined_var -> ID

State 31:
## Known stack suffix:
## ID AT
## LR(1) items:
defined_var -> ID AT . typ [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On BIT shift to state 7
-- On typ shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## ID AT typ
## LR(1) items:
defined_var -> ID AT typ . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production defined_var -> ID AT typ

State 33:
## Known stack suffix:
## typ
## LR(1) items:
atomic -> typ . const [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
defined_var -> typ . ID [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 34
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 35
## Reductions:

State 34:
## Known stack suffix:
## typ ID
## LR(1) items:
defined_var -> typ ID . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production defined_var -> typ ID

State 35:
## Known stack suffix:
## typ const
## LR(1) items:
atomic -> typ const . [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
## Reductions:
-- On UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT
--   reduce production atomic -> typ const

State 36:
## Known stack suffix:
## defined_var
## LR(1) items:
atomic -> defined_var . [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
## Reductions:
-- On UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT
--   reduce production atomic -> defined_var

State 37:
## Known stack suffix:
## const
## LR(1) items:
atomic -> const . AT typ [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
-- On AT shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## const AT
## LR(1) items:
atomic -> const AT . typ [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On BIT shift to state 7
-- On typ shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## const AT typ
## LR(1) items:
atomic -> const AT typ . [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
## Reductions:
-- On UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT
--   reduce production atomic -> const AT typ

State 40:
## Known stack suffix:
## XOR lval atomic
## LR(1) items:
instr -> XOR lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## XOR lval atomic atomic
## LR(1) items:
instr -> XOR lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> XOR lval atomic atomic

State 42:
## Known stack suffix:
## VPC
## LR(1) items:
instr -> VPC . lval_or_lcarry atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 43
-- On BIT shift to state 7
-- On typ shift to state 46
-- On lval_or_lcarry shift to state 48
## Reductions:

State 43:
## Known stack suffix:
## ID
## LR(1) items:
lval_or_lcarry -> ID . [ UINT SINT RSQUARE NUM LPAR ID DEREFOP BIT ]
lval_or_lcarry -> ID . AT typ [ UINT SINT RSQUARE NUM LPAR ID DEREFOP BIT ]
## Transitions:
-- On AT shift to state 44
## Reductions:
-- On UINT SINT RSQUARE NUM LPAR ID DEREFOP BIT
--   reduce production lval_or_lcarry -> ID

State 44:
## Known stack suffix:
## ID AT
## LR(1) items:
lval_or_lcarry -> ID AT . typ [ UINT SINT RSQUARE NUM LPAR ID DEREFOP BIT ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On BIT shift to state 7
-- On typ shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## ID AT typ
## LR(1) items:
lval_or_lcarry -> ID AT typ . [ UINT SINT RSQUARE NUM LPAR ID DEREFOP BIT ]
## Transitions:
## Reductions:
-- On UINT SINT RSQUARE NUM LPAR ID DEREFOP BIT
--   reduce production lval_or_lcarry -> ID AT typ

State 46:
## Known stack suffix:
## typ
## LR(1) items:
lval_or_lcarry -> typ . ID [ UINT SINT RSQUARE NUM LPAR ID DEREFOP BIT ]
## Transitions:
-- On ID shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## typ ID
## LR(1) items:
lval_or_lcarry -> typ ID . [ UINT SINT RSQUARE NUM LPAR ID DEREFOP BIT ]
## Transitions:
## Reductions:
-- On UINT SINT RSQUARE NUM LPAR ID DEREFOP BIT
--   reduce production lval_or_lcarry -> typ ID

State 48:
## Known stack suffix:
## VPC lval_or_lcarry
## LR(1) items:
instr -> VPC lval_or_lcarry . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## VPC lval_or_lcarry atomic
## LR(1) items:
instr -> VPC lval_or_lcarry atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> VPC lval_or_lcarry atomic

State 50:
## Known stack suffix:
## USUBR
## LR(1) items:
instr -> USUBR . lcarry lval atomic atomic [ SEMICOLON ]
instr -> USUBR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 51
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 57
## Reductions:

State 51:
## Known stack suffix:
## USUBR error
## LR(1) items:
instr -> USUBR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USUBR error

State 52:
## Known stack suffix:
## ID
## LR(1) items:
lcarry -> ID . [ UINT SINT SEMICOLON ID BIT ]
lcarry -> ID . AT typ [ UINT SINT SEMICOLON ID BIT ]
## Transitions:
-- On AT shift to state 53
## Reductions:
-- On UINT SINT SEMICOLON ID BIT
--   reduce production lcarry -> ID

State 53:
## Known stack suffix:
## ID AT
## LR(1) items:
lcarry -> ID AT . typ [ UINT SINT SEMICOLON ID BIT ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On BIT shift to state 7
-- On typ shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## ID AT typ
## LR(1) items:
lcarry -> ID AT typ . [ UINT SINT SEMICOLON ID BIT ]
## Transitions:
## Reductions:
-- On UINT SINT SEMICOLON ID BIT
--   reduce production lcarry -> ID AT typ

State 55:
## Known stack suffix:
## typ
## LR(1) items:
lcarry -> typ . ID [ UINT SINT SEMICOLON ID BIT ]
## Transitions:
-- On ID shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## typ ID
## LR(1) items:
lcarry -> typ ID . [ UINT SINT SEMICOLON ID BIT ]
## Transitions:
## Reductions:
-- On UINT SINT SEMICOLON ID BIT
--   reduce production lcarry -> typ ID

State 57:
## Known stack suffix:
## USUBR lcarry
## LR(1) items:
instr -> USUBR lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## USUBR lcarry lval
## LR(1) items:
instr -> USUBR lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## USUBR lcarry lval atomic
## LR(1) items:
instr -> USUBR lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## USUBR lcarry lval atomic atomic
## LR(1) items:
instr -> USUBR lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USUBR lcarry lval atomic atomic

State 61:
## Known stack suffix:
## USUBC
## LR(1) items:
instr -> USUBC . lcarry lval atomic atomic [ SEMICOLON ]
instr -> USUBC . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 62
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 63
## Reductions:

State 62:
## Known stack suffix:
## USUBC error
## LR(1) items:
instr -> USUBC error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USUBC error

State 63:
## Known stack suffix:
## USUBC lcarry
## LR(1) items:
instr -> USUBC lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## USUBC lcarry lval
## LR(1) items:
instr -> USUBC lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## USUBC lcarry lval atomic
## LR(1) items:
instr -> USUBC lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## USUBC lcarry lval atomic atomic
## LR(1) items:
instr -> USUBC lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USUBC lcarry lval atomic atomic

State 67:
## Known stack suffix:
## USUBB
## LR(1) items:
instr -> USUBB . lcarry lval atomic atomic [ SEMICOLON ]
instr -> USUBB . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 68
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 69
## Reductions:

State 68:
## Known stack suffix:
## USUBB error
## LR(1) items:
instr -> USUBB error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USUBB error

State 69:
## Known stack suffix:
## USUBB lcarry
## LR(1) items:
instr -> USUBB lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## USUBB lcarry lval
## LR(1) items:
instr -> USUBB lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## USUBB lcarry lval atomic
## LR(1) items:
instr -> USUBB lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## USUBB lcarry lval atomic atomic
## LR(1) items:
instr -> USUBB lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USUBB lcarry lval atomic atomic

State 73:
## Known stack suffix:
## USUB
## LR(1) items:
instr -> USUB . lval atomic atomic [ SEMICOLON ]
instr -> USUB . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 74
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 75
## Reductions:

State 74:
## Known stack suffix:
## USUB error
## LR(1) items:
instr -> USUB error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USUB error

State 75:
## Known stack suffix:
## USUB lval
## LR(1) items:
instr -> USUB lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## USUB lval atomic
## LR(1) items:
instr -> USUB lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## USUB lval atomic atomic
## LR(1) items:
instr -> USUB lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USUB lval atomic atomic

State 78:
## Known stack suffix:
## USPLIT
## LR(1) items:
instr -> USPLIT . lval lval atomic const [ SEMICOLON ]
instr -> USPLIT . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 79
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 80
## Reductions:

State 79:
## Known stack suffix:
## USPLIT error
## LR(1) items:
instr -> USPLIT error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USPLIT error

State 80:
## Known stack suffix:
## USPLIT lval
## LR(1) items:
instr -> USPLIT lval . lval atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## USPLIT lval lval
## LR(1) items:
instr -> USPLIT lval lval . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 82
## Reductions:

State 82:
## Known stack suffix:
## USPLIT lval lval atomic
## LR(1) items:
instr -> USPLIT lval lval atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## USPLIT lval lval atomic const
## LR(1) items:
instr -> USPLIT lval lval atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USPLIT lval lval atomic const

State 84:
## Known stack suffix:
## USBCS
## LR(1) items:
instr -> USBCS . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> USBCS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 85
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 86
## Reductions:

State 85:
## Known stack suffix:
## USBCS error
## LR(1) items:
instr -> USBCS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBCS error

State 86:
## Known stack suffix:
## USBCS lcarry
## LR(1) items:
instr -> USBCS lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## USBCS lcarry lval
## LR(1) items:
instr -> USBCS lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## USBCS lcarry lval atomic
## LR(1) items:
instr -> USBCS lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## USBCS lcarry lval atomic atomic
## LR(1) items:
instr -> USBCS lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 90
-- On atomic shift to state 91
## Reductions:

State 90:
## Known stack suffix:
## USBCS lcarry lval atomic atomic carry
## LR(1) items:
instr -> USBCS lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBCS lcarry lval atomic atomic carry

State 91:
## Known stack suffix:
## atomic
## LR(1) items:
carry -> atomic . [ UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT ]
## Transitions:
## Reductions:
-- On UINT SINT SEMICOLON NUM LPAR ID DEREFOP BIT
--   reduce production carry -> atomic

State 92:
## Known stack suffix:
## USBCR
## LR(1) items:
instr -> USBCR . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> USBCR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 93
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 94
## Reductions:

State 93:
## Known stack suffix:
## USBCR error
## LR(1) items:
instr -> USBCR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBCR error

State 94:
## Known stack suffix:
## USBCR lcarry
## LR(1) items:
instr -> USBCR lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## USBCR lcarry lval
## LR(1) items:
instr -> USBCR lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## USBCR lcarry lval atomic
## LR(1) items:
instr -> USBCR lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## USBCR lcarry lval atomic atomic
## LR(1) items:
instr -> USBCR lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 98
-- On atomic shift to state 91
## Reductions:

State 98:
## Known stack suffix:
## USBCR lcarry lval atomic atomic carry
## LR(1) items:
instr -> USBCR lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBCR lcarry lval atomic atomic carry

State 99:
## Known stack suffix:
## USBC
## LR(1) items:
instr -> USBC . lval atomic atomic carry [ SEMICOLON ]
instr -> USBC . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 100
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 101
## Reductions:

State 100:
## Known stack suffix:
## USBC error
## LR(1) items:
instr -> USBC error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBC error

State 101:
## Known stack suffix:
## USBC lval
## LR(1) items:
instr -> USBC lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## USBC lval atomic
## LR(1) items:
instr -> USBC lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## USBC lval atomic atomic
## LR(1) items:
instr -> USBC lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 104
-- On atomic shift to state 91
## Reductions:

State 104:
## Known stack suffix:
## USBC lval atomic atomic carry
## LR(1) items:
instr -> USBC lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBC lval atomic atomic carry

State 105:
## Known stack suffix:
## USBBS
## LR(1) items:
instr -> USBBS . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> USBBS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 106
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 107
## Reductions:

State 106:
## Known stack suffix:
## USBBS error
## LR(1) items:
instr -> USBBS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBBS error

State 107:
## Known stack suffix:
## USBBS lcarry
## LR(1) items:
instr -> USBBS lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## USBBS lcarry lval
## LR(1) items:
instr -> USBBS lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 109
## Reductions:

State 109:
## Known stack suffix:
## USBBS lcarry lval atomic
## LR(1) items:
instr -> USBBS lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## USBBS lcarry lval atomic atomic
## LR(1) items:
instr -> USBBS lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 111
-- On atomic shift to state 91
## Reductions:

State 111:
## Known stack suffix:
## USBBS lcarry lval atomic atomic carry
## LR(1) items:
instr -> USBBS lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBBS lcarry lval atomic atomic carry

State 112:
## Known stack suffix:
## USBBR
## LR(1) items:
instr -> USBBR . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> USBBR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 113
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 114
## Reductions:

State 113:
## Known stack suffix:
## USBBR error
## LR(1) items:
instr -> USBBR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBBR error

State 114:
## Known stack suffix:
## USBBR lcarry
## LR(1) items:
instr -> USBBR lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 115
## Reductions:

State 115:
## Known stack suffix:
## USBBR lcarry lval
## LR(1) items:
instr -> USBBR lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## USBBR lcarry lval atomic
## LR(1) items:
instr -> USBBR lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## USBBR lcarry lval atomic atomic
## LR(1) items:
instr -> USBBR lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 118
-- On atomic shift to state 91
## Reductions:

State 118:
## Known stack suffix:
## USBBR lcarry lval atomic atomic carry
## LR(1) items:
instr -> USBBR lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBBR lcarry lval atomic atomic carry

State 119:
## Known stack suffix:
## USBB
## LR(1) items:
instr -> USBB . lval atomic atomic carry [ SEMICOLON ]
instr -> USBB . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 120
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 121
## Reductions:

State 120:
## Known stack suffix:
## USBB error
## LR(1) items:
instr -> USBB error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBB error

State 121:
## Known stack suffix:
## USBB lval
## LR(1) items:
instr -> USBB lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 122
## Reductions:

State 122:
## Known stack suffix:
## USBB lval atomic
## LR(1) items:
instr -> USBB lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## USBB lval atomic atomic
## LR(1) items:
instr -> USBB lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 124
-- On atomic shift to state 91
## Reductions:

State 124:
## Known stack suffix:
## USBB lval atomic atomic carry
## LR(1) items:
instr -> USBB lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> USBB lval atomic atomic carry

State 125:
## Known stack suffix:
## UMULS
## LR(1) items:
instr -> UMULS . lcarry lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## UMULS lcarry
## LR(1) items:
instr -> UMULS lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## UMULS lcarry lval
## LR(1) items:
instr -> UMULS lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## UMULS lcarry lval atomic
## LR(1) items:
instr -> UMULS lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## UMULS lcarry lval atomic atomic
## LR(1) items:
instr -> UMULS lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UMULS lcarry lval atomic atomic

State 130:
## Known stack suffix:
## UMULR
## LR(1) items:
instr -> UMULR . lcarry lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## UMULR lcarry
## LR(1) items:
instr -> UMULR lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## UMULR lcarry lval
## LR(1) items:
instr -> UMULR lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## UMULR lcarry lval atomic
## LR(1) items:
instr -> UMULR lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## UMULR lcarry lval atomic atomic
## LR(1) items:
instr -> UMULR lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UMULR lcarry lval atomic atomic

State 135:
## Known stack suffix:
## UMULL
## LR(1) items:
instr -> UMULL . lval lval atomic atomic [ SEMICOLON ]
instr -> UMULL . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 136
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 137
## Reductions:

State 136:
## Known stack suffix:
## UMULL error
## LR(1) items:
instr -> UMULL error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UMULL error

State 137:
## Known stack suffix:
## UMULL lval
## LR(1) items:
instr -> UMULL lval . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## UMULL lval lval
## LR(1) items:
instr -> UMULL lval lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## UMULL lval lval atomic
## LR(1) items:
instr -> UMULL lval lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## UMULL lval lval atomic atomic
## LR(1) items:
instr -> UMULL lval lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UMULL lval lval atomic atomic

State 141:
## Known stack suffix:
## UMULJ
## LR(1) items:
instr -> UMULJ . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## UMULJ lval
## LR(1) items:
instr -> UMULJ lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 143
## Reductions:

State 143:
## Known stack suffix:
## UMULJ lval atomic
## LR(1) items:
instr -> UMULJ lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 144
## Reductions:

State 144:
## Known stack suffix:
## UMULJ lval atomic atomic
## LR(1) items:
instr -> UMULJ lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UMULJ lval atomic atomic

State 145:
## Known stack suffix:
## UMUL
## LR(1) items:
instr -> UMUL . lval atomic atomic [ SEMICOLON ]
instr -> UMUL . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 146
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 147
## Reductions:

State 146:
## Known stack suffix:
## UMUL error
## LR(1) items:
instr -> UMUL error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UMUL error

State 147:
## Known stack suffix:
## UMUL lval
## LR(1) items:
instr -> UMUL lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## UMUL lval atomic
## LR(1) items:
instr -> UMUL lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## UMUL lval atomic atomic
## LR(1) items:
instr -> UMUL lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UMUL lval atomic atomic

State 150:
## Known stack suffix:
## UADDS
## LR(1) items:
instr -> UADDS . lcarry lval atomic atomic [ SEMICOLON ]
instr -> UADDS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 151
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 152
## Reductions:

State 151:
## Known stack suffix:
## UADDS error
## LR(1) items:
instr -> UADDS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADDS error

State 152:
## Known stack suffix:
## UADDS lcarry
## LR(1) items:
instr -> UADDS lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## UADDS lcarry lval
## LR(1) items:
instr -> UADDS lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## UADDS lcarry lval atomic
## LR(1) items:
instr -> UADDS lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 155
## Reductions:

State 155:
## Known stack suffix:
## UADDS lcarry lval atomic atomic
## LR(1) items:
instr -> UADDS lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADDS lcarry lval atomic atomic

State 156:
## Known stack suffix:
## UADDR
## LR(1) items:
instr -> UADDR . lcarry lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## UADDR lcarry
## LR(1) items:
instr -> UADDR lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## UADDR lcarry lval
## LR(1) items:
instr -> UADDR lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## UADDR lcarry lval atomic
## LR(1) items:
instr -> UADDR lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## UADDR lcarry lval atomic atomic
## LR(1) items:
instr -> UADDR lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADDR lcarry lval atomic atomic

State 161:
## Known stack suffix:
## UADD
## LR(1) items:
instr -> UADD . lval atomic atomic [ SEMICOLON ]
instr -> UADD . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 162
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 163
## Reductions:

State 162:
## Known stack suffix:
## UADD error
## LR(1) items:
instr -> UADD error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADD error

State 163:
## Known stack suffix:
## UADD lval
## LR(1) items:
instr -> UADD lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## UADD lval atomic
## LR(1) items:
instr -> UADD lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## UADD lval atomic atomic
## LR(1) items:
instr -> UADD lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADD lval atomic atomic

State 166:
## Known stack suffix:
## UADCS
## LR(1) items:
instr -> UADCS . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> UADCS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 167
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 168
## Reductions:

State 167:
## Known stack suffix:
## UADCS error
## LR(1) items:
instr -> UADCS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADCS error

State 168:
## Known stack suffix:
## UADCS lcarry
## LR(1) items:
instr -> UADCS lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 169
## Reductions:

State 169:
## Known stack suffix:
## UADCS lcarry lval
## LR(1) items:
instr -> UADCS lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## UADCS lcarry lval atomic
## LR(1) items:
instr -> UADCS lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 171
## Reductions:

State 171:
## Known stack suffix:
## UADCS lcarry lval atomic atomic
## LR(1) items:
instr -> UADCS lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 172
-- On atomic shift to state 91
## Reductions:

State 172:
## Known stack suffix:
## UADCS lcarry lval atomic atomic carry
## LR(1) items:
instr -> UADCS lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADCS lcarry lval atomic atomic carry

State 173:
## Known stack suffix:
## UADCR
## LR(1) items:
instr -> UADCR . lcarry lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## UADCR lcarry
## LR(1) items:
instr -> UADCR lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 175
## Reductions:

State 175:
## Known stack suffix:
## UADCR lcarry lval
## LR(1) items:
instr -> UADCR lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## UADCR lcarry lval atomic
## LR(1) items:
instr -> UADCR lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 177
## Reductions:

State 177:
## Known stack suffix:
## UADCR lcarry lval atomic atomic
## LR(1) items:
instr -> UADCR lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 178
-- On atomic shift to state 91
## Reductions:

State 178:
## Known stack suffix:
## UADCR lcarry lval atomic atomic carry
## LR(1) items:
instr -> UADCR lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADCR lcarry lval atomic atomic carry

State 179:
## Known stack suffix:
## UADC
## LR(1) items:
instr -> UADC . lval atomic atomic carry [ SEMICOLON ]
instr -> UADC . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 180
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 181
## Reductions:

State 180:
## Known stack suffix:
## UADC error
## LR(1) items:
instr -> UADC error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADC error

State 181:
## Known stack suffix:
## UADC lval
## LR(1) items:
instr -> UADC lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## UADC lval atomic
## LR(1) items:
instr -> UADC lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 183
## Reductions:

State 183:
## Known stack suffix:
## UADC lval atomic atomic
## LR(1) items:
instr -> UADC lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 184
-- On atomic shift to state 91
## Reductions:

State 184:
## Known stack suffix:
## UADC lval atomic atomic carry
## LR(1) items:
instr -> UADC lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> UADC lval atomic atomic carry

State 185:
## Known stack suffix:
## SUBR
## LR(1) items:
instr -> SUBR . lcarry lval atomic atomic [ SEMICOLON ]
instr -> SUBR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 186
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 187
## Reductions:

State 186:
## Known stack suffix:
## SUBR error
## LR(1) items:
instr -> SUBR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SUBR error

State 187:
## Known stack suffix:
## SUBR lcarry
## LR(1) items:
instr -> SUBR lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 188
## Reductions:

State 188:
## Known stack suffix:
## SUBR lcarry lval
## LR(1) items:
instr -> SUBR lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 189
## Reductions:

State 189:
## Known stack suffix:
## SUBR lcarry lval atomic
## LR(1) items:
instr -> SUBR lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 190
## Reductions:

State 190:
## Known stack suffix:
## SUBR lcarry lval atomic atomic
## LR(1) items:
instr -> SUBR lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SUBR lcarry lval atomic atomic

State 191:
## Known stack suffix:
## SUBC
## LR(1) items:
instr -> SUBC . lcarry lval atomic atomic [ SEMICOLON ]
instr -> SUBC . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 192
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 193
## Reductions:

State 192:
## Known stack suffix:
## SUBC error
## LR(1) items:
instr -> SUBC error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SUBC error

State 193:
## Known stack suffix:
## SUBC lcarry
## LR(1) items:
instr -> SUBC lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 194
## Reductions:

State 194:
## Known stack suffix:
## SUBC lcarry lval
## LR(1) items:
instr -> SUBC lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 195
## Reductions:

State 195:
## Known stack suffix:
## SUBC lcarry lval atomic
## LR(1) items:
instr -> SUBC lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## SUBC lcarry lval atomic atomic
## LR(1) items:
instr -> SUBC lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SUBC lcarry lval atomic atomic

State 197:
## Known stack suffix:
## SUBB
## LR(1) items:
instr -> SUBB . lcarry lval atomic atomic [ SEMICOLON ]
instr -> SUBB . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 198
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 199
## Reductions:

State 198:
## Known stack suffix:
## SUBB error
## LR(1) items:
instr -> SUBB error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SUBB error

State 199:
## Known stack suffix:
## SUBB lcarry
## LR(1) items:
instr -> SUBB lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## SUBB lcarry lval
## LR(1) items:
instr -> SUBB lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## SUBB lcarry lval atomic
## LR(1) items:
instr -> SUBB lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## SUBB lcarry lval atomic atomic
## LR(1) items:
instr -> SUBB lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SUBB lcarry lval atomic atomic

State 203:
## Known stack suffix:
## SUB
## LR(1) items:
instr -> SUB . lval atomic atomic [ SEMICOLON ]
instr -> SUB . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 204
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 205
## Reductions:

State 204:
## Known stack suffix:
## SUB error
## LR(1) items:
instr -> SUB error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SUB error

State 205:
## Known stack suffix:
## SUB lval
## LR(1) items:
instr -> SUB lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## SUB lval atomic
## LR(1) items:
instr -> SUB lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## SUB lval atomic atomic
## LR(1) items:
instr -> SUB lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SUB lval atomic atomic

State 208:
## Known stack suffix:
## SSUBR
## LR(1) items:
instr -> SSUBR . lcarry lval atomic atomic [ SEMICOLON ]
instr -> SSUBR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 209
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 210
## Reductions:

State 209:
## Known stack suffix:
## SSUBR error
## LR(1) items:
instr -> SSUBR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSUBR error

State 210:
## Known stack suffix:
## SSUBR lcarry
## LR(1) items:
instr -> SSUBR lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 211
## Reductions:

State 211:
## Known stack suffix:
## SSUBR lcarry lval
## LR(1) items:
instr -> SSUBR lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## SSUBR lcarry lval atomic
## LR(1) items:
instr -> SSUBR lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## SSUBR lcarry lval atomic atomic
## LR(1) items:
instr -> SSUBR lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSUBR lcarry lval atomic atomic

State 214:
## Known stack suffix:
## SSUBC
## LR(1) items:
instr -> SSUBC . lcarry lval atomic atomic [ SEMICOLON ]
instr -> SSUBC . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 215
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 216
## Reductions:

State 215:
## Known stack suffix:
## SSUBC error
## LR(1) items:
instr -> SSUBC error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSUBC error

State 216:
## Known stack suffix:
## SSUBC lcarry
## LR(1) items:
instr -> SSUBC lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 217
## Reductions:

State 217:
## Known stack suffix:
## SSUBC lcarry lval
## LR(1) items:
instr -> SSUBC lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## SSUBC lcarry lval atomic
## LR(1) items:
instr -> SSUBC lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 219
## Reductions:

State 219:
## Known stack suffix:
## SSUBC lcarry lval atomic atomic
## LR(1) items:
instr -> SSUBC lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSUBC lcarry lval atomic atomic

State 220:
## Known stack suffix:
## SSUBB
## LR(1) items:
instr -> SSUBB . lcarry lval atomic atomic [ SEMICOLON ]
instr -> SSUBB . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 221
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 222
## Reductions:

State 221:
## Known stack suffix:
## SSUBB error
## LR(1) items:
instr -> SSUBB error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSUBB error

State 222:
## Known stack suffix:
## SSUBB lcarry
## LR(1) items:
instr -> SSUBB lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 223
## Reductions:

State 223:
## Known stack suffix:
## SSUBB lcarry lval
## LR(1) items:
instr -> SSUBB lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 224
## Reductions:

State 224:
## Known stack suffix:
## SSUBB lcarry lval atomic
## LR(1) items:
instr -> SSUBB lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 225
## Reductions:

State 225:
## Known stack suffix:
## SSUBB lcarry lval atomic atomic
## LR(1) items:
instr -> SSUBB lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSUBB lcarry lval atomic atomic

State 226:
## Known stack suffix:
## SSUB
## LR(1) items:
instr -> SSUB . lval atomic atomic [ SEMICOLON ]
instr -> SSUB . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 227
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 228
## Reductions:

State 227:
## Known stack suffix:
## SSUB error
## LR(1) items:
instr -> SSUB error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSUB error

State 228:
## Known stack suffix:
## SSUB lval
## LR(1) items:
instr -> SSUB lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## SSUB lval atomic
## LR(1) items:
instr -> SSUB lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## SSUB lval atomic atomic
## LR(1) items:
instr -> SSUB lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSUB lval atomic atomic

State 231:
## Known stack suffix:
## SSPLIT
## LR(1) items:
instr -> SSPLIT . lval lval atomic const [ SEMICOLON ]
instr -> SSPLIT . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 232
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 233
## Reductions:

State 232:
## Known stack suffix:
## SSPLIT error
## LR(1) items:
instr -> SSPLIT error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSPLIT error

State 233:
## Known stack suffix:
## SSPLIT lval
## LR(1) items:
instr -> SSPLIT lval . lval atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## SSPLIT lval lval
## LR(1) items:
instr -> SSPLIT lval lval . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 235
## Reductions:

State 235:
## Known stack suffix:
## SSPLIT lval lval atomic
## LR(1) items:
instr -> SSPLIT lval lval atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 236
## Reductions:

State 236:
## Known stack suffix:
## SSPLIT lval lval atomic const
## LR(1) items:
instr -> SSPLIT lval lval atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSPLIT lval lval atomic const

State 237:
## Known stack suffix:
## SSBCS
## LR(1) items:
instr -> SSBCS . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> SSBCS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 238
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 239
## Reductions:

State 238:
## Known stack suffix:
## SSBCS error
## LR(1) items:
instr -> SSBCS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBCS error

State 239:
## Known stack suffix:
## SSBCS lcarry
## LR(1) items:
instr -> SSBCS lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 240
## Reductions:

State 240:
## Known stack suffix:
## SSBCS lcarry lval
## LR(1) items:
instr -> SSBCS lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## SSBCS lcarry lval atomic
## LR(1) items:
instr -> SSBCS lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## SSBCS lcarry lval atomic atomic
## LR(1) items:
instr -> SSBCS lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 243
-- On atomic shift to state 91
## Reductions:

State 243:
## Known stack suffix:
## SSBCS lcarry lval atomic atomic carry
## LR(1) items:
instr -> SSBCS lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBCS lcarry lval atomic atomic carry

State 244:
## Known stack suffix:
## SSBCR
## LR(1) items:
instr -> SSBCR . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> SSBCR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 245
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 246
## Reductions:

State 245:
## Known stack suffix:
## SSBCR error
## LR(1) items:
instr -> SSBCR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBCR error

State 246:
## Known stack suffix:
## SSBCR lcarry
## LR(1) items:
instr -> SSBCR lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 247
## Reductions:

State 247:
## Known stack suffix:
## SSBCR lcarry lval
## LR(1) items:
instr -> SSBCR lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 248
## Reductions:

State 248:
## Known stack suffix:
## SSBCR lcarry lval atomic
## LR(1) items:
instr -> SSBCR lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## SSBCR lcarry lval atomic atomic
## LR(1) items:
instr -> SSBCR lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 250
-- On atomic shift to state 91
## Reductions:

State 250:
## Known stack suffix:
## SSBCR lcarry lval atomic atomic carry
## LR(1) items:
instr -> SSBCR lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBCR lcarry lval atomic atomic carry

State 251:
## Known stack suffix:
## SSBC
## LR(1) items:
instr -> SSBC . lval atomic atomic carry [ SEMICOLON ]
instr -> SSBC . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 252
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 253
## Reductions:

State 252:
## Known stack suffix:
## SSBC error
## LR(1) items:
instr -> SSBC error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBC error

State 253:
## Known stack suffix:
## SSBC lval
## LR(1) items:
instr -> SSBC lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## SSBC lval atomic
## LR(1) items:
instr -> SSBC lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 255
## Reductions:

State 255:
## Known stack suffix:
## SSBC lval atomic atomic
## LR(1) items:
instr -> SSBC lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 256
-- On atomic shift to state 91
## Reductions:

State 256:
## Known stack suffix:
## SSBC lval atomic atomic carry
## LR(1) items:
instr -> SSBC lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBC lval atomic atomic carry

State 257:
## Known stack suffix:
## SSBBS
## LR(1) items:
instr -> SSBBS . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> SSBBS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 258
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 259
## Reductions:

State 258:
## Known stack suffix:
## SSBBS error
## LR(1) items:
instr -> SSBBS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBBS error

State 259:
## Known stack suffix:
## SSBBS lcarry
## LR(1) items:
instr -> SSBBS lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## SSBBS lcarry lval
## LR(1) items:
instr -> SSBBS lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## SSBBS lcarry lval atomic
## LR(1) items:
instr -> SSBBS lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 262
## Reductions:

State 262:
## Known stack suffix:
## SSBBS lcarry lval atomic atomic
## LR(1) items:
instr -> SSBBS lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 263
-- On atomic shift to state 91
## Reductions:

State 263:
## Known stack suffix:
## SSBBS lcarry lval atomic atomic carry
## LR(1) items:
instr -> SSBBS lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBBS lcarry lval atomic atomic carry

State 264:
## Known stack suffix:
## SSBBR
## LR(1) items:
instr -> SSBBR . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> SSBBR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 265
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 266
## Reductions:

State 265:
## Known stack suffix:
## SSBBR error
## LR(1) items:
instr -> SSBBR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBBR error

State 266:
## Known stack suffix:
## SSBBR lcarry
## LR(1) items:
instr -> SSBBR lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## SSBBR lcarry lval
## LR(1) items:
instr -> SSBBR lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 268
## Reductions:

State 268:
## Known stack suffix:
## SSBBR lcarry lval atomic
## LR(1) items:
instr -> SSBBR lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 269
## Reductions:

State 269:
## Known stack suffix:
## SSBBR lcarry lval atomic atomic
## LR(1) items:
instr -> SSBBR lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 270
-- On atomic shift to state 91
## Reductions:

State 270:
## Known stack suffix:
## SSBBR lcarry lval atomic atomic carry
## LR(1) items:
instr -> SSBBR lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBBR lcarry lval atomic atomic carry

State 271:
## Known stack suffix:
## SSBB
## LR(1) items:
instr -> SSBB . lval atomic atomic carry [ SEMICOLON ]
instr -> SSBB . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 272
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 273
## Reductions:

State 272:
## Known stack suffix:
## SSBB error
## LR(1) items:
instr -> SSBB error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBB error

State 273:
## Known stack suffix:
## SSBB lval
## LR(1) items:
instr -> SSBB lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 274
## Reductions:

State 274:
## Known stack suffix:
## SSBB lval atomic
## LR(1) items:
instr -> SSBB lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## SSBB lval atomic atomic
## LR(1) items:
instr -> SSBB lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 276
-- On atomic shift to state 91
## Reductions:

State 276:
## Known stack suffix:
## SSBB lval atomic atomic carry
## LR(1) items:
instr -> SSBB lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SSBB lval atomic atomic carry

State 277:
## Known stack suffix:
## SPLIT
## LR(1) items:
instr -> SPLIT . lval lval atomic const [ SEMICOLON ]
instr -> SPLIT . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 278
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 279
## Reductions:

State 278:
## Known stack suffix:
## SPLIT error
## LR(1) items:
instr -> SPLIT error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SPLIT error

State 279:
## Known stack suffix:
## SPLIT lval
## LR(1) items:
instr -> SPLIT lval . lval atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## SPLIT lval lval
## LR(1) items:
instr -> SPLIT lval lval . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 281
## Reductions:

State 281:
## Known stack suffix:
## SPLIT lval lval atomic
## LR(1) items:
instr -> SPLIT lval lval atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 282
## Reductions:

State 282:
## Known stack suffix:
## SPLIT lval lval atomic const
## LR(1) items:
instr -> SPLIT lval lval atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SPLIT lval lval atomic const

State 283:
## Known stack suffix:
## SMULS
## LR(1) items:
instr -> SMULS . lcarry lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## SMULS lcarry
## LR(1) items:
instr -> SMULS lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 285
## Reductions:

State 285:
## Known stack suffix:
## SMULS lcarry lval
## LR(1) items:
instr -> SMULS lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 286
## Reductions:

State 286:
## Known stack suffix:
## SMULS lcarry lval atomic
## LR(1) items:
instr -> SMULS lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## SMULS lcarry lval atomic atomic
## LR(1) items:
instr -> SMULS lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SMULS lcarry lval atomic atomic

State 288:
## Known stack suffix:
## SMULR
## LR(1) items:
instr -> SMULR . lcarry lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## SMULR lcarry
## LR(1) items:
instr -> SMULR lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## SMULR lcarry lval
## LR(1) items:
instr -> SMULR lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## SMULR lcarry lval atomic
## LR(1) items:
instr -> SMULR lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 292
## Reductions:

State 292:
## Known stack suffix:
## SMULR lcarry lval atomic atomic
## LR(1) items:
instr -> SMULR lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SMULR lcarry lval atomic atomic

State 293:
## Known stack suffix:
## SMULL
## LR(1) items:
instr -> SMULL . lval lval atomic atomic [ SEMICOLON ]
instr -> SMULL . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 294
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 295
## Reductions:

State 294:
## Known stack suffix:
## SMULL error
## LR(1) items:
instr -> SMULL error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SMULL error

State 295:
## Known stack suffix:
## SMULL lval
## LR(1) items:
instr -> SMULL lval . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 296
## Reductions:

State 296:
## Known stack suffix:
## SMULL lval lval
## LR(1) items:
instr -> SMULL lval lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 297
## Reductions:

State 297:
## Known stack suffix:
## SMULL lval lval atomic
## LR(1) items:
instr -> SMULL lval lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 298
## Reductions:

State 298:
## Known stack suffix:
## SMULL lval lval atomic atomic
## LR(1) items:
instr -> SMULL lval lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SMULL lval lval atomic atomic

State 299:
## Known stack suffix:
## SMULJ
## LR(1) items:
instr -> SMULJ . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## SMULJ lval
## LR(1) items:
instr -> SMULJ lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## SMULJ lval atomic
## LR(1) items:
instr -> SMULJ lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 302
## Reductions:

State 302:
## Known stack suffix:
## SMULJ lval atomic atomic
## LR(1) items:
instr -> SMULJ lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SMULJ lval atomic atomic

State 303:
## Known stack suffix:
## SMUL
## LR(1) items:
instr -> SMUL . lval atomic atomic [ SEMICOLON ]
instr -> SMUL . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 304
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 305
## Reductions:

State 304:
## Known stack suffix:
## SMUL error
## LR(1) items:
instr -> SMUL error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SMUL error

State 305:
## Known stack suffix:
## SMUL lval
## LR(1) items:
instr -> SMUL lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 306
## Reductions:

State 306:
## Known stack suffix:
## SMUL lval atomic
## LR(1) items:
instr -> SMUL lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 307
## Reductions:

State 307:
## Known stack suffix:
## SMUL lval atomic atomic
## LR(1) items:
instr -> SMUL lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SMUL lval atomic atomic

State 308:
## Known stack suffix:
## SHL
## LR(1) items:
instr -> SHL . lval atomic const [ SEMICOLON ]
instr -> SHL . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 309
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 310
## Reductions:

State 309:
## Known stack suffix:
## SHL error
## LR(1) items:
instr -> SHL error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SHL error

State 310:
## Known stack suffix:
## SHL lval
## LR(1) items:
instr -> SHL lval . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## SHL lval atomic
## LR(1) items:
instr -> SHL lval atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 312
## Reductions:

State 312:
## Known stack suffix:
## SHL lval atomic const
## LR(1) items:
instr -> SHL lval atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SHL lval atomic const

State 313:
## Known stack suffix:
## SET
## LR(1) items:
instr -> SET . lcarry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## SET lcarry
## LR(1) items:
instr -> SET lcarry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SET lcarry

State 315:
## Known stack suffix:
## SBCS
## LR(1) items:
instr -> SBCS . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> SBCS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 316
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 317
## Reductions:

State 316:
## Known stack suffix:
## SBCS error
## LR(1) items:
instr -> SBCS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBCS error

State 317:
## Known stack suffix:
## SBCS lcarry
## LR(1) items:
instr -> SBCS lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## SBCS lcarry lval
## LR(1) items:
instr -> SBCS lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## SBCS lcarry lval atomic
## LR(1) items:
instr -> SBCS lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 320
## Reductions:

State 320:
## Known stack suffix:
## SBCS lcarry lval atomic atomic
## LR(1) items:
instr -> SBCS lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 321
-- On atomic shift to state 91
## Reductions:

State 321:
## Known stack suffix:
## SBCS lcarry lval atomic atomic carry
## LR(1) items:
instr -> SBCS lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBCS lcarry lval atomic atomic carry

State 322:
## Known stack suffix:
## SBCR
## LR(1) items:
instr -> SBCR . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> SBCR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 323
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 324
## Reductions:

State 323:
## Known stack suffix:
## SBCR error
## LR(1) items:
instr -> SBCR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBCR error

State 324:
## Known stack suffix:
## SBCR lcarry
## LR(1) items:
instr -> SBCR lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 325
## Reductions:

State 325:
## Known stack suffix:
## SBCR lcarry lval
## LR(1) items:
instr -> SBCR lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 326
## Reductions:

State 326:
## Known stack suffix:
## SBCR lcarry lval atomic
## LR(1) items:
instr -> SBCR lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 327
## Reductions:

State 327:
## Known stack suffix:
## SBCR lcarry lval atomic atomic
## LR(1) items:
instr -> SBCR lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 328
-- On atomic shift to state 91
## Reductions:

State 328:
## Known stack suffix:
## SBCR lcarry lval atomic atomic carry
## LR(1) items:
instr -> SBCR lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBCR lcarry lval atomic atomic carry

State 329:
## Known stack suffix:
## SBC
## LR(1) items:
instr -> SBC . lval atomic atomic carry [ SEMICOLON ]
instr -> SBC . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 330
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 331
## Reductions:

State 330:
## Known stack suffix:
## SBC error
## LR(1) items:
instr -> SBC error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBC error

State 331:
## Known stack suffix:
## SBC lval
## LR(1) items:
instr -> SBC lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## SBC lval atomic
## LR(1) items:
instr -> SBC lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## SBC lval atomic atomic
## LR(1) items:
instr -> SBC lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 334
-- On atomic shift to state 91
## Reductions:

State 334:
## Known stack suffix:
## SBC lval atomic atomic carry
## LR(1) items:
instr -> SBC lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBC lval atomic atomic carry

State 335:
## Known stack suffix:
## SBBS
## LR(1) items:
instr -> SBBS . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> SBBS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 336
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 337
## Reductions:

State 336:
## Known stack suffix:
## SBBS error
## LR(1) items:
instr -> SBBS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBBS error

State 337:
## Known stack suffix:
## SBBS lcarry
## LR(1) items:
instr -> SBBS lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 338
## Reductions:

State 338:
## Known stack suffix:
## SBBS lcarry lval
## LR(1) items:
instr -> SBBS lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 339
## Reductions:

State 339:
## Known stack suffix:
## SBBS lcarry lval atomic
## LR(1) items:
instr -> SBBS lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 340
## Reductions:

State 340:
## Known stack suffix:
## SBBS lcarry lval atomic atomic
## LR(1) items:
instr -> SBBS lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 341
-- On atomic shift to state 91
## Reductions:

State 341:
## Known stack suffix:
## SBBS lcarry lval atomic atomic carry
## LR(1) items:
instr -> SBBS lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBBS lcarry lval atomic atomic carry

State 342:
## Known stack suffix:
## SBBR
## LR(1) items:
instr -> SBBR . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> SBBR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 343
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 344
## Reductions:

State 343:
## Known stack suffix:
## SBBR error
## LR(1) items:
instr -> SBBR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBBR error

State 344:
## Known stack suffix:
## SBBR lcarry
## LR(1) items:
instr -> SBBR lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## SBBR lcarry lval
## LR(1) items:
instr -> SBBR lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## SBBR lcarry lval atomic
## LR(1) items:
instr -> SBBR lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 347
## Reductions:

State 347:
## Known stack suffix:
## SBBR lcarry lval atomic atomic
## LR(1) items:
instr -> SBBR lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 348
-- On atomic shift to state 91
## Reductions:

State 348:
## Known stack suffix:
## SBBR lcarry lval atomic atomic carry
## LR(1) items:
instr -> SBBR lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBBR lcarry lval atomic atomic carry

State 349:
## Known stack suffix:
## SBB
## LR(1) items:
instr -> SBB . lval atomic atomic carry [ SEMICOLON ]
instr -> SBB . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 350
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 351
## Reductions:

State 350:
## Known stack suffix:
## SBB error
## LR(1) items:
instr -> SBB error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBB error

State 351:
## Known stack suffix:
## SBB lval
## LR(1) items:
instr -> SBB lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## SBB lval atomic
## LR(1) items:
instr -> SBB lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## SBB lval atomic atomic
## LR(1) items:
instr -> SBB lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 354
-- On atomic shift to state 91
## Reductions:

State 354:
## Known stack suffix:
## SBB lval atomic atomic carry
## LR(1) items:
instr -> SBB lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SBB lval atomic atomic carry

State 355:
## Known stack suffix:
## SADDS
## LR(1) items:
instr -> SADDS . lcarry lval atomic atomic [ SEMICOLON ]
instr -> SADDS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 356
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 357
## Reductions:

State 356:
## Known stack suffix:
## SADDS error
## LR(1) items:
instr -> SADDS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADDS error

State 357:
## Known stack suffix:
## SADDS lcarry
## LR(1) items:
instr -> SADDS lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 358
## Reductions:

State 358:
## Known stack suffix:
## SADDS lcarry lval
## LR(1) items:
instr -> SADDS lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 359
## Reductions:

State 359:
## Known stack suffix:
## SADDS lcarry lval atomic
## LR(1) items:
instr -> SADDS lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## SADDS lcarry lval atomic atomic
## LR(1) items:
instr -> SADDS lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADDS lcarry lval atomic atomic

State 361:
## Known stack suffix:
## SADDR
## LR(1) items:
instr -> SADDR . lcarry lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 362
## Reductions:

State 362:
## Known stack suffix:
## SADDR lcarry
## LR(1) items:
instr -> SADDR lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 363
## Reductions:

State 363:
## Known stack suffix:
## SADDR lcarry lval
## LR(1) items:
instr -> SADDR lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 364
## Reductions:

State 364:
## Known stack suffix:
## SADDR lcarry lval atomic
## LR(1) items:
instr -> SADDR lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 365
## Reductions:

State 365:
## Known stack suffix:
## SADDR lcarry lval atomic atomic
## LR(1) items:
instr -> SADDR lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADDR lcarry lval atomic atomic

State 366:
## Known stack suffix:
## SADD
## LR(1) items:
instr -> SADD . lval atomic atomic [ SEMICOLON ]
instr -> SADD . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 367
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 368
## Reductions:

State 367:
## Known stack suffix:
## SADD error
## LR(1) items:
instr -> SADD error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADD error

State 368:
## Known stack suffix:
## SADD lval
## LR(1) items:
instr -> SADD lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 369
## Reductions:

State 369:
## Known stack suffix:
## SADD lval atomic
## LR(1) items:
instr -> SADD lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 370
## Reductions:

State 370:
## Known stack suffix:
## SADD lval atomic atomic
## LR(1) items:
instr -> SADD lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADD lval atomic atomic

State 371:
## Known stack suffix:
## SADCS
## LR(1) items:
instr -> SADCS . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> SADCS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 372
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 373
## Reductions:

State 372:
## Known stack suffix:
## SADCS error
## LR(1) items:
instr -> SADCS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADCS error

State 373:
## Known stack suffix:
## SADCS lcarry
## LR(1) items:
instr -> SADCS lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## SADCS lcarry lval
## LR(1) items:
instr -> SADCS lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 375
## Reductions:

State 375:
## Known stack suffix:
## SADCS lcarry lval atomic
## LR(1) items:
instr -> SADCS lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## SADCS lcarry lval atomic atomic
## LR(1) items:
instr -> SADCS lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 377
-- On atomic shift to state 91
## Reductions:

State 377:
## Known stack suffix:
## SADCS lcarry lval atomic atomic carry
## LR(1) items:
instr -> SADCS lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADCS lcarry lval atomic atomic carry

State 378:
## Known stack suffix:
## SADCR
## LR(1) items:
instr -> SADCR . lcarry lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 379
## Reductions:

State 379:
## Known stack suffix:
## SADCR lcarry
## LR(1) items:
instr -> SADCR lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## SADCR lcarry lval
## LR(1) items:
instr -> SADCR lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## SADCR lcarry lval atomic
## LR(1) items:
instr -> SADCR lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 382
## Reductions:

State 382:
## Known stack suffix:
## SADCR lcarry lval atomic atomic
## LR(1) items:
instr -> SADCR lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 383
-- On atomic shift to state 91
## Reductions:

State 383:
## Known stack suffix:
## SADCR lcarry lval atomic atomic carry
## LR(1) items:
instr -> SADCR lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADCR lcarry lval atomic atomic carry

State 384:
## Known stack suffix:
## SADC
## LR(1) items:
instr -> SADC . lval atomic atomic carry [ SEMICOLON ]
instr -> SADC . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 385
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 386
## Reductions:

State 385:
## Known stack suffix:
## SADC error
## LR(1) items:
instr -> SADC error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADC error

State 386:
## Known stack suffix:
## SADC lval
## LR(1) items:
instr -> SADC lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## SADC lval atomic
## LR(1) items:
instr -> SADC lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## SADC lval atomic atomic
## LR(1) items:
instr -> SADC lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 389
-- On atomic shift to state 91
## Reductions:

State 389:
## Known stack suffix:
## SADC lval atomic atomic carry
## LR(1) items:
instr -> SADC lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> SADC lval atomic atomic carry

State 390:
## Known stack suffix:
## RCUT
## LR(1) items:
instr -> RCUT . rbexp_prove_with [ SEMICOLON ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 775
-- On rbexp_prove_with shift to state 838
-- On rbexp_atomic shift to state 799
-- On rbexp_and shift to state 802
-- On rbexp shift to state 839
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 795
## Reductions:

State 391:
## Known stack suffix:
## XOR
## LR(1) items:
rexp -> XOR . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 506
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 392:
## Known stack suffix:
## UMOD
## LR(1) items:
rexp -> UMOD . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 504
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 393:
## Known stack suffix:
## ULIMBS
## LR(1) items:
rexp -> ULIMBS . const LSQUARE rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 394
## Reductions:

State 394:
## Known stack suffix:
## ULIMBS const
## LR(1) items:
rexp -> ULIMBS const . LSQUARE rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On LSQUARE shift to state 395
## Reductions:

State 395:
## Known stack suffix:
## ULIMBS const LSQUARE
## LR(1) items:
rexp -> ULIMBS const LSQUARE . rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On VARS shift to state 396
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexps shift to state 502
-- On rexp shift to state 440
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 396:
## Known stack suffix:
## VARS
## LR(1) items:
rexps -> VARS . var_expansion [ RSQUARE ]
## Transitions:
-- On ID shift to state 397
-- On var_expansion shift to state 402
## Reductions:

State 397:
## Known stack suffix:
## ID
## LR(1) items:
var_expansion -> ID . OROP NUM DOTDOT NUM [ RSQUARE ]
## Transitions:
-- On OROP shift to state 398
## Reductions:

State 398:
## Known stack suffix:
## ID OROP
## LR(1) items:
var_expansion -> ID OROP . NUM DOTDOT NUM [ RSQUARE ]
## Transitions:
-- On NUM shift to state 399
## Reductions:

State 399:
## Known stack suffix:
## ID OROP NUM
## LR(1) items:
var_expansion -> ID OROP NUM . DOTDOT NUM [ RSQUARE ]
## Transitions:
-- On DOTDOT shift to state 400
## Reductions:

State 400:
## Known stack suffix:
## ID OROP NUM DOTDOT
## LR(1) items:
var_expansion -> ID OROP NUM DOTDOT . NUM [ RSQUARE ]
## Transitions:
-- On NUM shift to state 401
## Reductions:

State 401:
## Known stack suffix:
## ID OROP NUM DOTDOT NUM
## LR(1) items:
var_expansion -> ID OROP NUM DOTDOT NUM . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production var_expansion -> ID OROP NUM DOTDOT NUM

State 402:
## Known stack suffix:
## VARS var_expansion
## LR(1) items:
rexps -> VARS var_expansion . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production rexps -> VARS var_expansion

State 403:
## Known stack suffix:
## UEXT
## LR(1) items:
rexp -> UEXT . rexp const [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 500
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 404:
## Known stack suffix:
## SUB
## LR(1) items:
rexp -> SUB . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 498
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 405:
## Known stack suffix:
## SREM
## LR(1) items:
rexp -> SREM . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 496
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 406:
## Known stack suffix:
## SQ
## LR(1) items:
rexp -> SQ . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 495
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 407:
## Known stack suffix:
## SMOD
## LR(1) items:
rexp -> SMOD . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 493
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 408:
## Known stack suffix:
## SLIMBS
## LR(1) items:
rexp -> SLIMBS . const LSQUARE rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 409
## Reductions:

State 409:
## Known stack suffix:
## SLIMBS const
## LR(1) items:
rexp -> SLIMBS const . LSQUARE rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On LSQUARE shift to state 410
## Reductions:

State 410:
## Known stack suffix:
## SLIMBS const LSQUARE
## LR(1) items:
rexp -> SLIMBS const LSQUARE . rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On VARS shift to state 396
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexps shift to state 491
-- On rexp shift to state 440
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 411:
## Known stack suffix:
## SHR
## LR(1) items:
rexp -> SHR . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 489
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 412:
## Known stack suffix:
## SHL
## LR(1) items:
rexp -> SHL . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 487
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 413:
## Known stack suffix:
## SEXT
## LR(1) items:
rexp -> SEXT . rexp const [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 485
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 414:
## Known stack suffix:
## SAR
## LR(1) items:
rexp -> SAR . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 483
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 415:
## Known stack suffix:
## OR
## LR(1) items:
rexp -> OR . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 481
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 416:
## Known stack suffix:
## NUM
## LR(1) items:
simple_const -> NUM . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP
--   reduce production simple_const -> NUM

State 417:
## Known stack suffix:
## NOTOP
## LR(1) items:
rexp -> NOTOP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 480
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 418:
## Known stack suffix:
## NOT
## LR(1) items:
rexp -> NOT . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 479
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 419:
## Known stack suffix:
## NEGOP
## LR(1) items:
rexp -> NEGOP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 478
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 420:
## Known stack suffix:
## NEG
## LR(1) items:
rexp -> NEG . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 477
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 421:
## Known stack suffix:
## MUL
## LR(1) items:
rexp -> MUL . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> MUL . LSQUARE rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LSQUARE shift to state 422
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 475
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 422:
## Known stack suffix:
## MUL LSQUARE
## LR(1) items:
rexp -> MUL LSQUARE . rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On VARS shift to state 396
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexps shift to state 473
-- On rexp shift to state 440
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 423:
## Known stack suffix:
## LPAR
## LR(1) items:
const -> LPAR . complex_const RPAR [ error SUBOP RPAR POWOP MULOP AT ADDOP ]
rexp -> LPAR . rexp RPAR [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 14
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 470
-- On defined_var shift to state 447
-- On const shift to state 472
-- On complex_const shift to state 428
## Reductions:

State 424:
## Known stack suffix:
## DEREFOP
## LR(1) items:
simple_const -> DEREFOP . ID [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP ]
## Transitions:
-- On ID shift to state 425
## Reductions:

State 425:
## Known stack suffix:
## DEREFOP ID
## LR(1) items:
simple_const -> DEREFOP ID . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP
--   reduce production simple_const -> DEREFOP ID

State 426:
## Known stack suffix:
## CONST
## LR(1) items:
rexp -> CONST . const const [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> CONST . const error [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On NUM shift to state 416
-- On LPAR shift to state 427
-- On DEREFOP shift to state 424
-- On simple_const shift to state 430
-- On const shift to state 431
## Reductions:

State 427:
## Known stack suffix:
## LPAR
## LR(1) items:
const -> LPAR . complex_const RPAR [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA ANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 14
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 18
-- On complex_const shift to state 428
## Reductions:

State 428:
## Known stack suffix:
## LPAR complex_const
## LR(1) items:
complex_const -> complex_const . ADDOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . SUBOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . MULOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
complex_const -> complex_const . POWOP complex_const [ SUBOP RPAR POWOP MULOP ADDOP ]
const -> LPAR complex_const . RPAR [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 21
-- On RPAR shift to state 429
-- On POWOP shift to state 23
-- On MULOP shift to state 25
-- On ADDOP shift to state 28
## Reductions:

State 429:
## Known stack suffix:
## LPAR complex_const RPAR
## LR(1) items:
const -> LPAR complex_const RPAR . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP
--   reduce production const -> LPAR complex_const RPAR

State 430:
## Known stack suffix:
## simple_const
## LR(1) items:
const -> simple_const . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE RPAR PROVE POWOP OROP NUM MULOP LPAR LOROP LANDOP DEREFOP COMMA AT ANDOP ADDOP
--   reduce production const -> simple_const

State 431:
## Known stack suffix:
## CONST const
## LR(1) items:
rexp -> CONST const . const [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> CONST const . error [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On error shift to state 432
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 433
## Reductions:

State 432:
## Known stack suffix:
## CONST const error
## LR(1) items:
rexp -> CONST const error . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> CONST const error

State 433:
## Known stack suffix:
## CONST const const
## LR(1) items:
rexp -> CONST const const . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> CONST const const

State 434:
## Known stack suffix:
## AND
## LR(1) items:
rexp -> AND . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 468
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 435:
## Known stack suffix:
## ADD
## LR(1) items:
rexp -> ADD . rexp rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> ADD . LSQUARE rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LSQUARE shift to state 436
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 466
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 436:
## Known stack suffix:
## ADD LSQUARE
## LR(1) items:
rexp -> ADD LSQUARE . rexps RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On VARS shift to state 396
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexps shift to state 438
-- On rexp shift to state 440
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 437:
## Known stack suffix:
## typ
## LR(1) items:
defined_var -> typ . ID [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE POWOP OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LSQUARE LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On ID shift to state 34
## Reductions:

State 438:
## Known stack suffix:
## ADD LSQUARE rexps
## LR(1) items:
rexp -> ADD LSQUARE rexps . RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 439
## Reductions:

State 439:
## Known stack suffix:
## ADD LSQUARE rexps RSQUARE
## LR(1) items:
rexp -> ADD LSQUARE rexps RSQUARE . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> ADD LSQUARE rexps RSQUARE

State 440:
## Known stack suffix:
## rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP COMMA ANDOP ADDOP ]
rexps -> rexp . COMMA rexps [ RSQUARE ]
rexps -> rexp . [ RSQUARE ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On COMMA shift to state 464
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On RSQUARE
--   reduce production rexps -> rexp

State 441:
## Known stack suffix:
## rexp XOROP
## LR(1) items:
rexp -> rexp XOROP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 442
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 442:
## Known stack suffix:
## rexp XOROP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp XOROP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHR SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT AND ADD
--   reduce production rexp -> rexp XOROP rexp

State 443:
## Known stack suffix:
## rexp SUBOP
## LR(1) items:
rexp -> rexp SUBOP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 444
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 444:
## Known stack suffix:
## rexp SUBOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp SUBOP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On MULOP shift to state 445
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> rexp SUBOP rexp

State 445:
## Known stack suffix:
## rexp MULOP
## LR(1) items:
rexp -> rexp MULOP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 446
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 446:
## Known stack suffix:
## rexp MULOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp MULOP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> rexp MULOP rexp

State 447:
## Known stack suffix:
## defined_var
## LR(1) items:
rexp -> defined_var . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> defined_var

State 448:
## Known stack suffix:
## const
## LR(1) items:
rexp -> const . AT const [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> const . error [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On error shift to state 449
-- On AT shift to state 450
## Reductions:

State 449:
## Known stack suffix:
## const error
## LR(1) items:
rexp -> const error . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> const error

State 450:
## Known stack suffix:
## const AT
## LR(1) items:
rexp -> const AT . const [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 451
## Reductions:

State 451:
## Known stack suffix:
## const AT const
## LR(1) items:
rexp -> const AT const . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> const AT const

State 452:
## Known stack suffix:
## rexp SHROP
## LR(1) items:
rexp -> rexp SHROP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 453
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 453:
## Known stack suffix:
## rexp SHROP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp SHROP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On SUBOP shift to state 443
-- On MULOP shift to state 445
-- On ADDOP shift to state 454
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADD
--   reduce production rexp -> rexp SHROP rexp

State 454:
## Known stack suffix:
## rexp ADDOP
## LR(1) items:
rexp -> rexp ADDOP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 455
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 455:
## Known stack suffix:
## rexp ADDOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp ADDOP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On MULOP shift to state 445
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> rexp ADDOP rexp

State 456:
## Known stack suffix:
## rexp SHLOP
## LR(1) items:
rexp -> rexp SHLOP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 457
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 457:
## Known stack suffix:
## rexp SHLOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp SHLOP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On SUBOP shift to state 443
-- On MULOP shift to state 445
-- On ADDOP shift to state 454
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADD
--   reduce production rexp -> rexp SHLOP rexp

State 458:
## Known stack suffix:
## rexp SAROP
## LR(1) items:
rexp -> rexp SAROP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 459
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 459:
## Known stack suffix:
## rexp SAROP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp SAROP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On SUBOP shift to state 443
-- On MULOP shift to state 445
-- On ADDOP shift to state 454
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADD
--   reduce production rexp -> rexp SAROP rexp

State 460:
## Known stack suffix:
## rexp ANDOP
## LR(1) items:
rexp -> rexp ANDOP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 461
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 461:
## Known stack suffix:
## rexp ANDOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp ANDOP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On MULOP shift to state 445
-- On ADDOP shift to state 454
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHR SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADD
--   reduce production rexp -> rexp ANDOP rexp

State 462:
## Known stack suffix:
## rexp OROP
## LR(1) items:
rexp -> rexp OROP . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 463
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 463:
## Known stack suffix:
## rexp OROP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp OROP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHR SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT AND ADD
--   reduce production rexp -> rexp OROP rexp

State 464:
## Known stack suffix:
## rexp COMMA
## LR(1) items:
rexps -> rexp COMMA . rexps [ RSQUARE ]
## Transitions:
-- On XOR shift to state 391
-- On VARS shift to state 396
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexps shift to state 465
-- On rexp shift to state 440
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 465:
## Known stack suffix:
## rexp COMMA rexps
## LR(1) items:
rexps -> rexp COMMA rexps . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production rexps -> rexp COMMA rexps

State 466:
## Known stack suffix:
## ADD rexp
## LR(1) items:
rexp -> ADD rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 467
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 467:
## Known stack suffix:
## ADD rexp rexp
## LR(1) items:
rexp -> ADD rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> ADD rexp rexp

State 468:
## Known stack suffix:
## AND rexp
## LR(1) items:
rexp -> AND rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 469
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 469:
## Known stack suffix:
## AND rexp rexp
## LR(1) items:
rexp -> AND rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> AND rexp rexp

State 470:
## Known stack suffix:
## LPAR rexp
## LR(1) items:
rexp -> LPAR rexp . RPAR [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 471
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 471:
## Known stack suffix:
## LPAR rexp RPAR
## LR(1) items:
rexp -> LPAR rexp RPAR . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> LPAR rexp RPAR

State 472:
## Known stack suffix:
## const
## LR(1) items:
complex_const -> const . [ SUBOP RPAR POWOP MULOP ADDOP ]
rexp -> const . AT const [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> const . error [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On error shift to state 449
-- On AT shift to state 450
## Reductions:
-- On SUBOP RPAR POWOP MULOP ADDOP
--   reduce production complex_const -> const

State 473:
## Known stack suffix:
## MUL LSQUARE rexps
## LR(1) items:
rexp -> MUL LSQUARE rexps . RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 474
## Reductions:

State 474:
## Known stack suffix:
## MUL LSQUARE rexps RSQUARE
## LR(1) items:
rexp -> MUL LSQUARE rexps RSQUARE . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> MUL LSQUARE rexps RSQUARE

State 475:
## Known stack suffix:
## MUL rexp
## LR(1) items:
rexp -> MUL rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 476
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 476:
## Known stack suffix:
## MUL rexp rexp
## LR(1) items:
rexp -> MUL rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> MUL rexp rexp

State 477:
## Known stack suffix:
## NEG rexp
## LR(1) items:
rexp -> NEG rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> NEG rexp

State 478:
## Known stack suffix:
## NEGOP rexp
## LR(1) items:
rexp -> NEGOP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> NEGOP rexp

State 479:
## Known stack suffix:
## NOT rexp
## LR(1) items:
rexp -> NOT rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> NOT rexp

State 480:
## Known stack suffix:
## NOTOP rexp
## LR(1) items:
rexp -> NOTOP rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> NOTOP rexp

State 481:
## Known stack suffix:
## OR rexp
## LR(1) items:
rexp -> OR rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 482
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 482:
## Known stack suffix:
## OR rexp rexp
## LR(1) items:
rexp -> OR rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> OR rexp rexp

State 483:
## Known stack suffix:
## SAR rexp
## LR(1) items:
rexp -> SAR rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 484
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 484:
## Known stack suffix:
## SAR rexp rexp
## LR(1) items:
rexp -> SAR rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> SAR rexp rexp

State 485:
## Known stack suffix:
## SEXT rexp
## LR(1) items:
rexp -> SEXT rexp . const [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On NUM shift to state 12
-- On MULOP shift to state 445
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
-- On simple_const shift to state 17
-- On const shift to state 486
## Reductions:

State 486:
## Known stack suffix:
## SEXT rexp const
## LR(1) items:
rexp -> SEXT rexp const . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> SEXT rexp const

State 487:
## Known stack suffix:
## SHL rexp
## LR(1) items:
rexp -> SHL rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 488
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 488:
## Known stack suffix:
## SHL rexp rexp
## LR(1) items:
rexp -> SHL rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> SHL rexp rexp

State 489:
## Known stack suffix:
## SHR rexp
## LR(1) items:
rexp -> SHR rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 490
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 490:
## Known stack suffix:
## SHR rexp rexp
## LR(1) items:
rexp -> SHR rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> SHR rexp rexp

State 491:
## Known stack suffix:
## SLIMBS const LSQUARE rexps
## LR(1) items:
rexp -> SLIMBS const LSQUARE rexps . RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 492
## Reductions:

State 492:
## Known stack suffix:
## SLIMBS const LSQUARE rexps RSQUARE
## LR(1) items:
rexp -> SLIMBS const LSQUARE rexps RSQUARE . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> SLIMBS const LSQUARE rexps RSQUARE

State 493:
## Known stack suffix:
## SMOD rexp
## LR(1) items:
rexp -> SMOD rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 494
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 494:
## Known stack suffix:
## SMOD rexp rexp
## LR(1) items:
rexp -> SMOD rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> SMOD rexp rexp

State 495:
## Known stack suffix:
## SQ rexp
## LR(1) items:
rexp -> SQ rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> SQ rexp

State 496:
## Known stack suffix:
## SREM rexp
## LR(1) items:
rexp -> SREM rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 497
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 497:
## Known stack suffix:
## SREM rexp rexp
## LR(1) items:
rexp -> SREM rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> SREM rexp rexp

State 498:
## Known stack suffix:
## SUB rexp
## LR(1) items:
rexp -> SUB rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 499
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 499:
## Known stack suffix:
## SUB rexp rexp
## LR(1) items:
rexp -> SUB rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> SUB rexp rexp

State 500:
## Known stack suffix:
## UEXT rexp
## LR(1) items:
rexp -> UEXT rexp . const [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On NUM shift to state 12
-- On MULOP shift to state 445
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
-- On simple_const shift to state 17
-- On const shift to state 501
## Reductions:

State 501:
## Known stack suffix:
## UEXT rexp const
## LR(1) items:
rexp -> UEXT rexp const . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> UEXT rexp const

State 502:
## Known stack suffix:
## ULIMBS const LSQUARE rexps
## LR(1) items:
rexp -> ULIMBS const LSQUARE rexps . RSQUARE [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 503
## Reductions:

State 503:
## Known stack suffix:
## ULIMBS const LSQUARE rexps RSQUARE
## LR(1) items:
rexp -> ULIMBS const LSQUARE rexps RSQUARE . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> ULIMBS const LSQUARE rexps RSQUARE

State 504:
## Known stack suffix:
## UMOD rexp
## LR(1) items:
rexp -> UMOD rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 505
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 505:
## Known stack suffix:
## UMOD rexp rexp
## LR(1) items:
rexp -> UMOD rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> UMOD rexp rexp

State 506:
## Known stack suffix:
## XOR rexp
## LR(1) items:
rexp -> XOR rexp . rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 507
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 507:
## Known stack suffix:
## XOR rexp rexp
## LR(1) items:
rexp -> XOR rexp rexp . [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On XOROP XOR UMOD ULTOP ULT ULIMBS ULEOP ULE UINT UGTOP UGT UGEOP UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLTOP SLT SLIMBS SLEOP SLE SINT SHROP SHR SHLOP SHL SGTOP SGT SGEOP SGE SEXT SEMICOLON SAROP SAR RSQUARE RPAR RBRAC PROVE OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQOP EQMOD EQ DEREFOP CONST COMMA BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> XOR rexp rexp

State 508:
## Known stack suffix:
## ULT
## LR(1) items:
cmpop_prefix -> ULT . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_prefix -> ULT

State 509:
## Known stack suffix:
## ULE
## LR(1) items:
cmpop_prefix -> ULE . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_prefix -> ULE

State 510:
## Known stack suffix:
## UGT
## LR(1) items:
cmpop_prefix -> UGT . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_prefix -> UGT

State 511:
## Known stack suffix:
## UGE
## LR(1) items:
cmpop_prefix -> UGE . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_prefix -> UGE

State 512:
## Known stack suffix:
## TRUE
## LR(1) items:
rbexp_atomic -> TRUE . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> TRUE

State 513:
## Known stack suffix:
## SLT
## LR(1) items:
cmpop_prefix -> SLT . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_prefix -> SLT

State 514:
## Known stack suffix:
## SLE
## LR(1) items:
cmpop_prefix -> SLE . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_prefix -> SLE

State 515:
## Known stack suffix:
## SGT
## LR(1) items:
cmpop_prefix -> SGT . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_prefix -> SGT

State 516:
## Known stack suffix:
## SGE
## LR(1) items:
cmpop_prefix -> SGE . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_prefix -> SGE

State 517:
## Known stack suffix:
## OR
## LR(1) items:
rbexp_atomic -> OR . rbexp_atomic_without_eqmod rbexp_atomic [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rbexp_atomic -> OR . LSQUARE rbexps RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> OR . rexp rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 518
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 519
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 520
-- On MUL shift to state 421
-- On LSQUARE shift to state 833
-- On LPAR shift to state 521
-- On ID shift to state 30
-- On EQUMOD shift to state 709
-- On EQSREM shift to state 713
-- On EQSMOD shift to state 717
-- On EQMOD shift to state 721
-- On EQ shift to state 725
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 728
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 813
-- On rbexp_atomic_without_eqmod shift to state 836
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 740
## Reductions:

State 518:
## Known stack suffix:
## TRUE
## LR(1) items:
rbexp_atomic_without_eqmod -> TRUE . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> TRUE

State 519:
## Known stack suffix:
## OR
## LR(1) items:
rbexp_atomic_without_eqmod -> OR . rbexp_atomic_without_eqmod rbexp_atomic_without_eqmod [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rbexp_atomic_without_eqmod -> OR . LSQUARE rbexps RSQUARE [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> OR . rexp rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 518
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 519
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 520
-- On MUL shift to state 421
-- On LSQUARE shift to state 828
-- On LPAR shift to state 521
-- On ID shift to state 30
-- On EQUMOD shift to state 709
-- On EQSREM shift to state 713
-- On EQSMOD shift to state 717
-- On EQMOD shift to state 721
-- On EQ shift to state 725
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 728
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 813
-- On rbexp_atomic_without_eqmod shift to state 831
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 740
## Reductions:

State 520:
## Known stack suffix:
## NEG
## LR(1) items:
rbexp_atomic_without_eqmod -> NEG . rbexp_atomic_without_eqmod [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> NEG . rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 518
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 519
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 520
-- On MUL shift to state 421
-- On LPAR shift to state 521
-- On ID shift to state 30
-- On EQUMOD shift to state 709
-- On EQSREM shift to state 713
-- On EQSMOD shift to state 717
-- On EQMOD shift to state 721
-- On EQ shift to state 725
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 728
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 826
-- On rbexp_atomic_without_eqmod shift to state 827
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 740
## Reductions:

State 521:
## Known stack suffix:
## LPAR
## LR(1) items:
const -> LPAR . complex_const RPAR [ error AT ]
rbexp_atomic_without_eqmod -> LPAR . rbexp RPAR [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> LPAR . rexp RPAR [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUBOP shift to state 14
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 798
-- On rbexp_atomic shift to state 799
-- On rbexp_and shift to state 802
-- On rbexp shift to state 824
-- On defined_var shift to state 447
-- On const shift to state 472
-- On complex_const shift to state 428
-- On cmpop_prefix shift to state 795
## Reductions:

State 522:
## Known stack suffix:
## NEGOP
## LR(1) items:
rbexp_atomic -> NEGOP . rbexp_atomic [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> NEGOP . rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 822
-- On rbexp_atomic shift to state 823
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 795
## Reductions:

State 523:
## Known stack suffix:
## NEG
## LR(1) items:
rbexp_atomic -> NEG . rbexp_atomic [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> NEG . rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 820
-- On rbexp_atomic shift to state 821
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 795
## Reductions:

State 524:
## Known stack suffix:
## LPAR
## LR(1) items:
const -> LPAR . complex_const RPAR [ error SUBOP RPAR POWOP MULOP AT ADDOP ]
rbexp_atomic -> LPAR . rbexp RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> LPAR . rexp RPAR [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUBOP shift to state 14
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 798
-- On rbexp_atomic shift to state 799
-- On rbexp_and shift to state 802
-- On rbexp shift to state 818
-- On defined_var shift to state 447
-- On const shift to state 472
-- On complex_const shift to state 428
-- On cmpop_prefix shift to state 795
## Reductions:

State 525:
## Known stack suffix:
## LOROP
## LR(1) items:
rbexp_atomic -> LOROP . LSQUARE rbexps RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On LSQUARE shift to state 526
## Reductions:

State 526:
## Known stack suffix:
## LOROP LSQUARE
## LR(1) items:
rbexp_atomic -> LOROP LSQUARE . rbexps RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 816
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 527:
## Known stack suffix:
## TRUE
## LR(1) items:
rbexp_atomic -> TRUE . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> TRUE

State 528:
## Known stack suffix:
## OR
## LR(1) items:
rbexp_atomic -> OR . rbexp_atomic_without_eqmod rbexp_atomic [ error RSQUARE LOROP LANDOP COMMA ]
rbexp_atomic -> OR . LSQUARE rbexps RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> OR . rexp rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 518
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 519
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 520
-- On MUL shift to state 421
-- On LSQUARE shift to state 529
-- On LPAR shift to state 521
-- On ID shift to state 30
-- On EQUMOD shift to state 709
-- On EQSREM shift to state 713
-- On EQSMOD shift to state 717
-- On EQMOD shift to state 721
-- On EQ shift to state 725
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 728
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 813
-- On rbexp_atomic_without_eqmod shift to state 814
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 740
## Reductions:

State 529:
## Known stack suffix:
## OR LSQUARE
## LR(1) items:
rbexp_atomic -> OR LSQUARE . rbexps RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 811
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 530:
## Known stack suffix:
## NEGOP
## LR(1) items:
rbexp_atomic -> NEGOP . rbexp_atomic [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> NEGOP . rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 809
-- On rbexp_atomic shift to state 810
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 531:
## Known stack suffix:
## NEG
## LR(1) items:
rbexp_atomic -> NEG . rbexp_atomic [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> NEG . rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 807
-- On rbexp_atomic shift to state 808
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 532:
## Known stack suffix:
## LPAR
## LR(1) items:
const -> LPAR . complex_const RPAR [ error AT ]
rbexp_atomic -> LPAR . rbexp RPAR [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> LPAR . rexp RPAR [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUBOP shift to state 14
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 798
-- On rbexp_atomic shift to state 799
-- On rbexp_and shift to state 802
-- On rbexp shift to state 805
-- On defined_var shift to state 447
-- On const shift to state 472
-- On complex_const shift to state 428
-- On cmpop_prefix shift to state 795
## Reductions:

State 533:
## Known stack suffix:
## LANDOP
## LR(1) items:
rbexp_atomic -> LANDOP . LSQUARE rbexps RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On LSQUARE shift to state 534
## Reductions:

State 534:
## Known stack suffix:
## LANDOP LSQUARE
## LR(1) items:
rbexp_atomic -> LANDOP LSQUARE . rbexps RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 749
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 535:
## Known stack suffix:
## LOROP
## LR(1) items:
rbexp_atomic -> LOROP . LSQUARE rbexps RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On LSQUARE shift to state 536
## Reductions:

State 536:
## Known stack suffix:
## LOROP LSQUARE
## LR(1) items:
rbexp_atomic -> LOROP LSQUARE . rbexps RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 747
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 537:
## Known stack suffix:
## LANDOP
## LR(1) items:
rbexp_atomic -> LANDOP . LSQUARE rbexps RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On LSQUARE shift to state 538
## Reductions:

State 538:
## Known stack suffix:
## LANDOP LSQUARE
## LR(1) items:
rbexp_atomic -> LANDOP LSQUARE . rbexps RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 745
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 539:
## Known stack suffix:
## EQUMOD
## LR(1) items:
rbexp_atomic -> EQUMOD . rexp rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 540
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 540:
## Known stack suffix:
## EQUMOD rexp
## LR(1) items:
rbexp_atomic -> EQUMOD rexp . rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 541
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 541:
## Known stack suffix:
## EQUMOD rexp rexp
## LR(1) items:
rbexp_atomic -> EQUMOD rexp rexp . rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 630
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 542:
## Known stack suffix:
## XOR
## LR(1) items:
rexp -> XOR . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 543
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 543:
## Known stack suffix:
## XOR rexp
## LR(1) items:
rexp -> XOR rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 629
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 544:
## Known stack suffix:
## UMOD
## LR(1) items:
rexp -> UMOD . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 545
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 545:
## Known stack suffix:
## UMOD rexp
## LR(1) items:
rexp -> UMOD rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 628
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 546:
## Known stack suffix:
## ULIMBS
## LR(1) items:
rexp -> ULIMBS . const LSQUARE rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 547
## Reductions:

State 547:
## Known stack suffix:
## ULIMBS const
## LR(1) items:
rexp -> ULIMBS const . LSQUARE rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On LSQUARE shift to state 548
## Reductions:

State 548:
## Known stack suffix:
## ULIMBS const LSQUARE
## LR(1) items:
rexp -> ULIMBS const LSQUARE . rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On VARS shift to state 396
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexps shift to state 549
-- On rexp shift to state 440
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 549:
## Known stack suffix:
## ULIMBS const LSQUARE rexps
## LR(1) items:
rexp -> ULIMBS const LSQUARE rexps . RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On RSQUARE shift to state 550
## Reductions:

State 550:
## Known stack suffix:
## ULIMBS const LSQUARE rexps RSQUARE
## LR(1) items:
rexp -> ULIMBS const LSQUARE rexps RSQUARE . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> ULIMBS const LSQUARE rexps RSQUARE

State 551:
## Known stack suffix:
## UEXT
## LR(1) items:
rexp -> UEXT . rexp const [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 552
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 552:
## Known stack suffix:
## UEXT rexp
## LR(1) items:
rexp -> UEXT rexp . const [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On NUM shift to state 416
-- On MULOP shift to state 445
-- On LPAR shift to state 427
-- On DEREFOP shift to state 424
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
-- On simple_const shift to state 430
-- On const shift to state 553
## Reductions:

State 553:
## Known stack suffix:
## UEXT rexp const
## LR(1) items:
rexp -> UEXT rexp const . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> UEXT rexp const

State 554:
## Known stack suffix:
## SUB
## LR(1) items:
rexp -> SUB . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 555
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 555:
## Known stack suffix:
## SUB rexp
## LR(1) items:
rexp -> SUB rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 627
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 556:
## Known stack suffix:
## SREM
## LR(1) items:
rexp -> SREM . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 557
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 557:
## Known stack suffix:
## SREM rexp
## LR(1) items:
rexp -> SREM rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 626
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 558:
## Known stack suffix:
## SQ
## LR(1) items:
rexp -> SQ . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 625
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 559:
## Known stack suffix:
## SMOD
## LR(1) items:
rexp -> SMOD . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 560
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 560:
## Known stack suffix:
## SMOD rexp
## LR(1) items:
rexp -> SMOD rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 624
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 561:
## Known stack suffix:
## SLIMBS
## LR(1) items:
rexp -> SLIMBS . const LSQUARE rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 562
## Reductions:

State 562:
## Known stack suffix:
## SLIMBS const
## LR(1) items:
rexp -> SLIMBS const . LSQUARE rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On LSQUARE shift to state 563
## Reductions:

State 563:
## Known stack suffix:
## SLIMBS const LSQUARE
## LR(1) items:
rexp -> SLIMBS const LSQUARE . rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On VARS shift to state 396
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexps shift to state 564
-- On rexp shift to state 440
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 564:
## Known stack suffix:
## SLIMBS const LSQUARE rexps
## LR(1) items:
rexp -> SLIMBS const LSQUARE rexps . RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On RSQUARE shift to state 565
## Reductions:

State 565:
## Known stack suffix:
## SLIMBS const LSQUARE rexps RSQUARE
## LR(1) items:
rexp -> SLIMBS const LSQUARE rexps RSQUARE . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> SLIMBS const LSQUARE rexps RSQUARE

State 566:
## Known stack suffix:
## SHR
## LR(1) items:
rexp -> SHR . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 567
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 567:
## Known stack suffix:
## SHR rexp
## LR(1) items:
rexp -> SHR rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 623
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 568:
## Known stack suffix:
## SHL
## LR(1) items:
rexp -> SHL . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 569
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 569:
## Known stack suffix:
## SHL rexp
## LR(1) items:
rexp -> SHL rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 622
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 570:
## Known stack suffix:
## SEXT
## LR(1) items:
rexp -> SEXT . rexp const [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 571
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 571:
## Known stack suffix:
## SEXT rexp
## LR(1) items:
rexp -> SEXT rexp . const [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP OROP NUM MULOP LPAR DEREFOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On NUM shift to state 416
-- On MULOP shift to state 445
-- On LPAR shift to state 427
-- On DEREFOP shift to state 424
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
-- On simple_const shift to state 430
-- On const shift to state 572
## Reductions:

State 572:
## Known stack suffix:
## SEXT rexp const
## LR(1) items:
rexp -> SEXT rexp const . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> SEXT rexp const

State 573:
## Known stack suffix:
## SAR
## LR(1) items:
rexp -> SAR . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 574
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 574:
## Known stack suffix:
## SAR rexp
## LR(1) items:
rexp -> SAR rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 621
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 575:
## Known stack suffix:
## OR
## LR(1) items:
rexp -> OR . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 576
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 576:
## Known stack suffix:
## OR rexp
## LR(1) items:
rexp -> OR rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 620
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 577:
## Known stack suffix:
## NOTOP
## LR(1) items:
rexp -> NOTOP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 619
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 578:
## Known stack suffix:
## NOT
## LR(1) items:
rexp -> NOT . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 618
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 579:
## Known stack suffix:
## NEGOP
## LR(1) items:
rexp -> NEGOP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 617
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 580:
## Known stack suffix:
## NEG
## LR(1) items:
rexp -> NEG . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 616
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 581:
## Known stack suffix:
## MUL
## LR(1) items:
rexp -> MUL . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> MUL . LSQUARE rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LSQUARE shift to state 582
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 585
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 582:
## Known stack suffix:
## MUL LSQUARE
## LR(1) items:
rexp -> MUL LSQUARE . rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On VARS shift to state 396
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexps shift to state 583
-- On rexp shift to state 440
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 583:
## Known stack suffix:
## MUL LSQUARE rexps
## LR(1) items:
rexp -> MUL LSQUARE rexps . RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On RSQUARE shift to state 584
## Reductions:

State 584:
## Known stack suffix:
## MUL LSQUARE rexps RSQUARE
## LR(1) items:
rexp -> MUL LSQUARE rexps RSQUARE . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> MUL LSQUARE rexps RSQUARE

State 585:
## Known stack suffix:
## MUL rexp
## LR(1) items:
rexp -> MUL rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 615
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 586:
## Known stack suffix:
## LPAR
## LR(1) items:
const -> LPAR . complex_const RPAR [ error AT ]
rexp -> LPAR . rexp RPAR [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 14
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 587
-- On defined_var shift to state 447
-- On const shift to state 472
-- On complex_const shift to state 428
## Reductions:

State 587:
## Known stack suffix:
## LPAR rexp
## LR(1) items:
rexp -> LPAR rexp . RPAR [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 588
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 588:
## Known stack suffix:
## LPAR rexp RPAR
## LR(1) items:
rexp -> LPAR rexp RPAR . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> LPAR rexp RPAR

State 589:
## Known stack suffix:
## ID
## LR(1) items:
defined_var -> ID . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
defined_var -> ID . AT typ [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On AT shift to state 590
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production defined_var -> ID

State 590:
## Known stack suffix:
## ID AT
## LR(1) items:
defined_var -> ID AT . typ [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On UINT shift to state 591
-- On SINT shift to state 592
-- On BIT shift to state 593
-- On typ shift to state 594
## Reductions:

State 591:
## Known stack suffix:
## UINT
## LR(1) items:
typ -> UINT . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA COLON ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA COLON ANDOP ADDOP
--   reduce production typ -> UINT

State 592:
## Known stack suffix:
## SINT
## LR(1) items:
typ -> SINT . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA COLON ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA COLON ANDOP ADDOP
--   reduce production typ -> SINT

State 593:
## Known stack suffix:
## BIT
## LR(1) items:
typ -> BIT . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA COLON ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA COLON ANDOP ADDOP
--   reduce production typ -> BIT

State 594:
## Known stack suffix:
## ID AT typ
## LR(1) items:
defined_var -> ID AT typ . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production defined_var -> ID AT typ

State 595:
## Known stack suffix:
## CONST
## LR(1) items:
rexp -> CONST . const const [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> CONST . const error [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On NUM shift to state 416
-- On LPAR shift to state 427
-- On DEREFOP shift to state 424
-- On simple_const shift to state 430
-- On const shift to state 596
## Reductions:

State 596:
## Known stack suffix:
## CONST const
## LR(1) items:
rexp -> CONST const . const [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> CONST const . error [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On error shift to state 597
-- On NUM shift to state 416
-- On LPAR shift to state 427
-- On DEREFOP shift to state 424
-- On simple_const shift to state 430
-- On const shift to state 598
## Reductions:

State 597:
## Known stack suffix:
## CONST const error
## LR(1) items:
rexp -> CONST const error . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> CONST const error

State 598:
## Known stack suffix:
## CONST const const
## LR(1) items:
rexp -> CONST const const . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> CONST const const

State 599:
## Known stack suffix:
## AND
## LR(1) items:
rexp -> AND . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 600
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 600:
## Known stack suffix:
## AND rexp
## LR(1) items:
rexp -> AND rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 614
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 601:
## Known stack suffix:
## ADD
## LR(1) items:
rexp -> ADD . rexp rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> ADD . LSQUARE rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LSQUARE shift to state 602
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 605
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 602:
## Known stack suffix:
## ADD LSQUARE
## LR(1) items:
rexp -> ADD LSQUARE . rexps RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On VARS shift to state 396
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexps shift to state 603
-- On rexp shift to state 440
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 603:
## Known stack suffix:
## ADD LSQUARE rexps
## LR(1) items:
rexp -> ADD LSQUARE rexps . RSQUARE [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On RSQUARE shift to state 604
## Reductions:

State 604:
## Known stack suffix:
## ADD LSQUARE rexps RSQUARE
## LR(1) items:
rexp -> ADD LSQUARE rexps RSQUARE . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> ADD LSQUARE rexps RSQUARE

State 605:
## Known stack suffix:
## ADD rexp
## LR(1) items:
rexp -> ADD rexp . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 608
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 606:
## Known stack suffix:
## typ
## LR(1) items:
defined_var -> typ . ID [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On ID shift to state 607
## Reductions:

State 607:
## Known stack suffix:
## typ ID
## LR(1) items:
defined_var -> typ ID . [ error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP VBAR SUBOP SHROP SHLOP SAROP RSQUARE PROVE POWOP OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production defined_var -> typ ID

State 608:
## Known stack suffix:
## ADD rexp rexp
## LR(1) items:
rexp -> ADD rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> ADD rexp rexp

State 609:
## Known stack suffix:
## defined_var
## LR(1) items:
rexp -> defined_var . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> defined_var

State 610:
## Known stack suffix:
## const
## LR(1) items:
rexp -> const . AT const [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> const . error [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On error shift to state 611
-- On AT shift to state 612
## Reductions:

State 611:
## Known stack suffix:
## const error
## LR(1) items:
rexp -> const error . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> const error

State 612:
## Known stack suffix:
## const AT
## LR(1) items:
rexp -> const AT . const [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On NUM shift to state 416
-- On LPAR shift to state 427
-- On DEREFOP shift to state 424
-- On simple_const shift to state 430
-- On const shift to state 613
## Reductions:

State 613:
## Known stack suffix:
## const AT const
## LR(1) items:
rexp -> const AT const . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> const AT const

State 614:
## Known stack suffix:
## AND rexp rexp
## LR(1) items:
rexp -> AND rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> AND rexp rexp

State 615:
## Known stack suffix:
## MUL rexp rexp
## LR(1) items:
rexp -> MUL rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> MUL rexp rexp

State 616:
## Known stack suffix:
## NEG rexp
## LR(1) items:
rexp -> NEG rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> NEG rexp

State 617:
## Known stack suffix:
## NEGOP rexp
## LR(1) items:
rexp -> NEGOP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> NEGOP rexp

State 618:
## Known stack suffix:
## NOT rexp
## LR(1) items:
rexp -> NOT rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> NOT rexp

State 619:
## Known stack suffix:
## NOTOP rexp
## LR(1) items:
rexp -> NOTOP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> NOTOP rexp

State 620:
## Known stack suffix:
## OR rexp rexp
## LR(1) items:
rexp -> OR rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> OR rexp rexp

State 621:
## Known stack suffix:
## SAR rexp rexp
## LR(1) items:
rexp -> SAR rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> SAR rexp rexp

State 622:
## Known stack suffix:
## SHL rexp rexp
## LR(1) items:
rexp -> SHL rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> SHL rexp rexp

State 623:
## Known stack suffix:
## SHR rexp rexp
## LR(1) items:
rexp -> SHR rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> SHR rexp rexp

State 624:
## Known stack suffix:
## SMOD rexp rexp
## LR(1) items:
rexp -> SMOD rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> SMOD rexp rexp

State 625:
## Known stack suffix:
## SQ rexp
## LR(1) items:
rexp -> SQ rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> SQ rexp

State 626:
## Known stack suffix:
## SREM rexp rexp
## LR(1) items:
rexp -> SREM rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> SREM rexp rexp

State 627:
## Known stack suffix:
## SUB rexp rexp
## LR(1) items:
rexp -> SUB rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> SUB rexp rexp

State 628:
## Known stack suffix:
## UMOD rexp rexp
## LR(1) items:
rexp -> UMOD rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> UMOD rexp rexp

State 629:
## Known stack suffix:
## XOR rexp rexp
## LR(1) items:
rexp -> XOR rexp rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> XOR rexp rexp

State 630:
## Known stack suffix:
## EQUMOD rexp rexp rexp
## LR(1) items:
rbexp_atomic -> EQUMOD rexp rexp rexp . [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 631
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On OROP shift to state 647
-- On MULOP shift to state 635
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> EQUMOD rexp rexp rexp

State 631:
## Known stack suffix:
## rexp XOROP
## LR(1) items:
rexp -> rexp XOROP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 632
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 632:
## Known stack suffix:
## rexp XOROP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp XOROP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On MULOP shift to state 635
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
## Reductions:
-- On error XOROP RSQUARE OROP LPAR LOROP LANDOP COMMA
--   reduce production rexp -> rexp XOROP rexp

State 633:
## Known stack suffix:
## rexp SUBOP
## LR(1) items:
rexp -> rexp SUBOP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 634
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 634:
## Known stack suffix:
## rexp SUBOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp SUBOP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On MULOP shift to state 635
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> rexp SUBOP rexp

State 635:
## Known stack suffix:
## rexp MULOP
## LR(1) items:
rexp -> rexp MULOP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 636
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 636:
## Known stack suffix:
## rexp MULOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp MULOP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> rexp MULOP rexp

State 637:
## Known stack suffix:
## rexp SHROP
## LR(1) items:
rexp -> rexp SHROP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 638
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 638:
## Known stack suffix:
## rexp SHROP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp SHROP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 633
-- On MULOP shift to state 635
-- On ADDOP shift to state 639
## Reductions:
-- On error XOROP SHROP SHLOP SAROP RSQUARE OROP LPAR LOROP LANDOP COMMA ANDOP
--   reduce production rexp -> rexp SHROP rexp

State 639:
## Known stack suffix:
## rexp ADDOP
## LR(1) items:
rexp -> rexp ADDOP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 640
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 640:
## Known stack suffix:
## rexp ADDOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp ADDOP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On MULOP shift to state 635
## Reductions:
-- On error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP LPAR LOROP LANDOP COMMA ANDOP ADDOP
--   reduce production rexp -> rexp ADDOP rexp

State 641:
## Known stack suffix:
## rexp SHLOP
## LR(1) items:
rexp -> rexp SHLOP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 642
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 642:
## Known stack suffix:
## rexp SHLOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp SHLOP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 633
-- On MULOP shift to state 635
-- On ADDOP shift to state 639
## Reductions:
-- On error XOROP SHROP SHLOP SAROP RSQUARE OROP LPAR LOROP LANDOP COMMA ANDOP
--   reduce production rexp -> rexp SHLOP rexp

State 643:
## Known stack suffix:
## rexp SAROP
## LR(1) items:
rexp -> rexp SAROP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 644
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 644:
## Known stack suffix:
## rexp SAROP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp SAROP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 633
-- On MULOP shift to state 635
-- On ADDOP shift to state 639
## Reductions:
-- On error XOROP SHROP SHLOP SAROP RSQUARE OROP LPAR LOROP LANDOP COMMA ANDOP
--   reduce production rexp -> rexp SAROP rexp

State 645:
## Known stack suffix:
## rexp ANDOP
## LR(1) items:
rexp -> rexp ANDOP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 646
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 646:
## Known stack suffix:
## rexp ANDOP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp ANDOP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On MULOP shift to state 635
-- On ADDOP shift to state 639
## Reductions:
-- On error XOROP RSQUARE OROP LPAR LOROP LANDOP COMMA ANDOP
--   reduce production rexp -> rexp ANDOP rexp

State 647:
## Known stack suffix:
## rexp OROP
## LR(1) items:
rexp -> rexp OROP . rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 648
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 648:
## Known stack suffix:
## rexp OROP rexp
## LR(1) items:
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp OROP rexp . [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 631
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On MULOP shift to state 635
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
## Reductions:
-- On error RSQUARE OROP LPAR LOROP LANDOP COMMA
--   reduce production rexp -> rexp OROP rexp

State 649:
## Known stack suffix:
## EQSREM
## LR(1) items:
rbexp_atomic -> EQSREM . rexp rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 650
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 650:
## Known stack suffix:
## EQSREM rexp
## LR(1) items:
rbexp_atomic -> EQSREM rexp . rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 651
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 651:
## Known stack suffix:
## EQSREM rexp rexp
## LR(1) items:
rbexp_atomic -> EQSREM rexp rexp . rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 652
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 652:
## Known stack suffix:
## EQSREM rexp rexp rexp
## LR(1) items:
rbexp_atomic -> EQSREM rexp rexp rexp . [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 631
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On OROP shift to state 647
-- On MULOP shift to state 635
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> EQSREM rexp rexp rexp

State 653:
## Known stack suffix:
## EQSMOD
## LR(1) items:
rbexp_atomic -> EQSMOD . rexp rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 654
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 654:
## Known stack suffix:
## EQSMOD rexp
## LR(1) items:
rbexp_atomic -> EQSMOD rexp . rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 655
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 655:
## Known stack suffix:
## EQSMOD rexp rexp
## LR(1) items:
rbexp_atomic -> EQSMOD rexp rexp . rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 656
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 656:
## Known stack suffix:
## EQSMOD rexp rexp rexp
## LR(1) items:
rbexp_atomic -> EQSMOD rexp rexp rexp . [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 631
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On OROP shift to state 647
-- On MULOP shift to state 635
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> EQSMOD rexp rexp rexp

State 657:
## Known stack suffix:
## EQMOD
## LR(1) items:
rbexp_atomic -> EQMOD . rexp rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 658
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 658:
## Known stack suffix:
## EQMOD rexp
## LR(1) items:
rbexp_atomic -> EQMOD rexp . rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 659
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 659:
## Known stack suffix:
## EQMOD rexp rexp
## LR(1) items:
rbexp_atomic -> EQMOD rexp rexp . rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 660
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 660:
## Known stack suffix:
## EQMOD rexp rexp rexp
## LR(1) items:
rbexp_atomic -> EQMOD rexp rexp rexp . [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 631
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On OROP shift to state 647
-- On MULOP shift to state 635
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> EQMOD rexp rexp rexp

State 661:
## Known stack suffix:
## EQ
## LR(1) items:
rbexp_atomic -> EQ . rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 662
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 662:
## Known stack suffix:
## EQ rexp
## LR(1) items:
rbexp_atomic -> EQ rexp . rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 663
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 663:
## Known stack suffix:
## EQ rexp rexp
## LR(1) items:
rbexp_atomic -> EQ rexp rexp . [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 631
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On OROP shift to state 647
-- On MULOP shift to state 635
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> EQ rexp rexp

State 664:
## Known stack suffix:
## AND
## LR(1) items:
rbexp_atomic -> AND . rbexp_atomic_without_eqmod rbexp_atomic [ error RSQUARE LOROP LANDOP COMMA ]
rbexp_atomic -> AND . LSQUARE rbexps RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> AND . rexp rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 518
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 519
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 520
-- On MUL shift to state 421
-- On LSQUARE shift to state 665
-- On LPAR shift to state 521
-- On ID shift to state 30
-- On EQUMOD shift to state 709
-- On EQSREM shift to state 713
-- On EQSMOD shift to state 717
-- On EQMOD shift to state 721
-- On EQ shift to state 725
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 728
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 732
-- On rbexp_atomic_without_eqmod shift to state 743
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 740
## Reductions:

State 665:
## Known stack suffix:
## AND LSQUARE
## LR(1) items:
rbexp_atomic -> AND LSQUARE . rbexps RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 693
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 666:
## Known stack suffix:
## rexp
## LR(1) items:
rbexp_atomic -> rexp . EQOP rexp req_suffix [ error RSQUARE LOROP LANDOP COMMA ]
rbexp_atomic -> rexp . cmpop_infix rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On ULTOP shift to state 667
-- On ULEOP shift to state 668
-- On UGTOP shift to state 669
-- On UGEOP shift to state 670
-- On SUBOP shift to state 443
-- On SLTOP shift to state 671
-- On SLEOP shift to state 672
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SGTOP shift to state 673
-- On SGEOP shift to state 674
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On EQOP shift to state 675
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
-- On cmpop_infix shift to state 691
## Reductions:

State 667:
## Known stack suffix:
## ULTOP
## LR(1) items:
cmpop_infix -> ULTOP . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_infix -> ULTOP

State 668:
## Known stack suffix:
## ULEOP
## LR(1) items:
cmpop_infix -> ULEOP . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_infix -> ULEOP

State 669:
## Known stack suffix:
## UGTOP
## LR(1) items:
cmpop_infix -> UGTOP . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_infix -> UGTOP

State 670:
## Known stack suffix:
## UGEOP
## LR(1) items:
cmpop_infix -> UGEOP . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_infix -> UGEOP

State 671:
## Known stack suffix:
## SLTOP
## LR(1) items:
cmpop_infix -> SLTOP . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_infix -> SLTOP

State 672:
## Known stack suffix:
## SLEOP
## LR(1) items:
cmpop_infix -> SLEOP . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_infix -> SLEOP

State 673:
## Known stack suffix:
## SGTOP
## LR(1) items:
cmpop_infix -> SGTOP . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_infix -> SGTOP

State 674:
## Known stack suffix:
## SGEOP
## LR(1) items:
cmpop_infix -> SGEOP . [ XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULIMBS UINT UEXT SUB SREM SQ SMOD SLIMBS SINT SHR SHL SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR ID DEREFOP CONST BIT AND ADD
--   reduce production cmpop_infix -> SGEOP

State 675:
## Known stack suffix:
## rexp EQOP
## LR(1) items:
rbexp_atomic -> rexp EQOP . rexp req_suffix [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 676
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 676:
## Known stack suffix:
## rexp EQOP rexp
## LR(1) items:
rbexp_atomic -> rexp EQOP rexp . req_suffix [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LPAR LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 631
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On OROP shift to state 647
-- On MULOP shift to state 635
-- On LPAR shift to state 677
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
-- On req_suffix shift to state 690
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production req_suffix ->

State 677:
## Known stack suffix:
## LPAR
## LR(1) items:
req_suffix -> LPAR . MOD rexp RPAR [ error RSQUARE LOROP LANDOP COMMA ]
req_suffix -> LPAR . UMOD rexp RPAR [ error RSQUARE LOROP LANDOP COMMA ]
req_suffix -> LPAR . SMOD rexp RPAR [ error RSQUARE LOROP LANDOP COMMA ]
req_suffix -> LPAR . SREM rexp RPAR [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On UMOD shift to state 678
-- On SREM shift to state 681
-- On SMOD shift to state 684
-- On MOD shift to state 687
## Reductions:

State 678:
## Known stack suffix:
## LPAR UMOD
## LR(1) items:
req_suffix -> LPAR UMOD . rexp RPAR [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 679
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 679:
## Known stack suffix:
## LPAR UMOD rexp
## LR(1) items:
req_suffix -> LPAR UMOD rexp . RPAR [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 680
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 680:
## Known stack suffix:
## LPAR UMOD rexp RPAR
## LR(1) items:
req_suffix -> LPAR UMOD rexp RPAR . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production req_suffix -> LPAR UMOD rexp RPAR

State 681:
## Known stack suffix:
## LPAR SREM
## LR(1) items:
req_suffix -> LPAR SREM . rexp RPAR [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 682
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 682:
## Known stack suffix:
## LPAR SREM rexp
## LR(1) items:
req_suffix -> LPAR SREM rexp . RPAR [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 683
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 683:
## Known stack suffix:
## LPAR SREM rexp RPAR
## LR(1) items:
req_suffix -> LPAR SREM rexp RPAR . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production req_suffix -> LPAR SREM rexp RPAR

State 684:
## Known stack suffix:
## LPAR SMOD
## LR(1) items:
req_suffix -> LPAR SMOD . rexp RPAR [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 685
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 685:
## Known stack suffix:
## LPAR SMOD rexp
## LR(1) items:
req_suffix -> LPAR SMOD rexp . RPAR [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 686
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 686:
## Known stack suffix:
## LPAR SMOD rexp RPAR
## LR(1) items:
req_suffix -> LPAR SMOD rexp RPAR . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production req_suffix -> LPAR SMOD rexp RPAR

State 687:
## Known stack suffix:
## LPAR MOD
## LR(1) items:
req_suffix -> LPAR MOD . rexp RPAR [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 688
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 688:
## Known stack suffix:
## LPAR MOD rexp
## LR(1) items:
req_suffix -> LPAR MOD rexp . RPAR [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 689
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 689:
## Known stack suffix:
## LPAR MOD rexp RPAR
## LR(1) items:
req_suffix -> LPAR MOD rexp RPAR . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production req_suffix -> LPAR MOD rexp RPAR

State 690:
## Known stack suffix:
## rexp EQOP rexp req_suffix
## LR(1) items:
rbexp_atomic -> rexp EQOP rexp req_suffix . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> rexp EQOP rexp req_suffix

State 691:
## Known stack suffix:
## rexp cmpop_infix
## LR(1) items:
rbexp_atomic -> rexp cmpop_infix . rexp [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHR shift to state 566
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAR shift to state 573
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On AND shift to state 599
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 692
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 692:
## Known stack suffix:
## rexp cmpop_infix rexp
## LR(1) items:
rbexp_atomic -> rexp cmpop_infix rexp . [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 631
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On OROP shift to state 647
-- On MULOP shift to state 635
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> rexp cmpop_infix rexp

State 693:
## Known stack suffix:
## AND LSQUARE rbexps
## LR(1) items:
rbexp_atomic -> AND LSQUARE rbexps . RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On RSQUARE shift to state 694
## Reductions:

State 694:
## Known stack suffix:
## AND LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic -> AND LSQUARE rbexps RSQUARE . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> AND LSQUARE rbexps RSQUARE

State 695:
## Known stack suffix:
## rbexp_atomic
## LR(1) items:
rbexp_and -> rbexp_atomic . LANDOP rbexp_and [ error RSQUARE LOROP COMMA ]
rbexp_and -> rbexp_atomic . [ error RSQUARE LOROP COMMA ]
## Transitions:
-- On LANDOP shift to state 696
## Reductions:
-- On error RSQUARE LOROP COMMA
--   reduce production rbexp_and -> rbexp_atomic

State 696:
## Known stack suffix:
## rbexp_atomic LANDOP
## LR(1) items:
rbexp_and -> rbexp_atomic LANDOP . rbexp_and [ error RSQUARE LOROP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 697
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 697:
## Known stack suffix:
## rbexp_atomic LANDOP rbexp_and
## LR(1) items:
rbexp_and -> rbexp_atomic LANDOP rbexp_and . [ error RSQUARE LOROP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP COMMA
--   reduce production rbexp_and -> rbexp_atomic LANDOP rbexp_and

State 698:
## Known stack suffix:
## cmpop_prefix
## LR(1) items:
rbexp_atomic -> cmpop_prefix . rexp rexp [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 699
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 699:
## Known stack suffix:
## cmpop_prefix rexp
## LR(1) items:
rbexp_atomic -> cmpop_prefix rexp . rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 542
-- On UMOD shift to state 544
-- On ULIMBS shift to state 546
-- On UINT shift to state 2
-- On UEXT shift to state 551
-- On SUBOP shift to state 443
-- On SUB shift to state 554
-- On SREM shift to state 556
-- On SQ shift to state 558
-- On SMOD shift to state 559
-- On SLIMBS shift to state 561
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 566
-- On SHLOP shift to state 456
-- On SHL shift to state 568
-- On SEXT shift to state 570
-- On SAROP shift to state 458
-- On SAR shift to state 573
-- On OROP shift to state 462
-- On OR shift to state 575
-- On NUM shift to state 416
-- On NOTOP shift to state 577
-- On NOT shift to state 578
-- On NEGOP shift to state 579
-- On NEG shift to state 580
-- On MULOP shift to state 445
-- On MUL shift to state 581
-- On LPAR shift to state 586
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On CONST shift to state 595
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 599
-- On ADDOP shift to state 454
-- On ADD shift to state 601
-- On typ shift to state 606
-- On simple_const shift to state 430
-- On rexp shift to state 700
-- On defined_var shift to state 609
-- On const shift to state 610
## Reductions:

State 700:
## Known stack suffix:
## cmpop_prefix rexp rexp
## LR(1) items:
rbexp_atomic -> cmpop_prefix rexp rexp . [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> rexp . ADDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ error XOROP SUBOP SHROP SHLOP SAROP RSQUARE OROP MULOP LOROP LANDOP COMMA ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 631
-- On SUBOP shift to state 633
-- On SHROP shift to state 637
-- On SHLOP shift to state 641
-- On SAROP shift to state 643
-- On OROP shift to state 647
-- On MULOP shift to state 635
-- On ANDOP shift to state 645
-- On ADDOP shift to state 639
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> cmpop_prefix rexp rexp

State 701:
## Known stack suffix:
## rbexp_and
## LR(1) items:
rbexp -> rbexp_and . LOROP rbexp [ error RSQUARE COMMA ]
rbexp -> rbexp_and . [ error RSQUARE COMMA ]
## Transitions:
-- On LOROP shift to state 702
## Reductions:
-- On error RSQUARE COMMA
--   reduce production rbexp -> rbexp_and

State 702:
## Known stack suffix:
## rbexp_and LOROP
## LR(1) items:
rbexp -> rbexp_and LOROP . rbexp [ error RSQUARE COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 703
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 703:
## Known stack suffix:
## rbexp_and LOROP rbexp
## LR(1) items:
rbexp -> rbexp_and LOROP rbexp . [ error RSQUARE COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE COMMA
--   reduce production rbexp -> rbexp_and LOROP rbexp

State 704:
## Known stack suffix:
## rbexp
## LR(1) items:
rbexps -> rbexp . COMMA rbexps [ RSQUARE ]
rbexps -> rbexp . [ RSQUARE ]
rbexps -> rbexp . COMMA error [ RSQUARE ]
rbexps -> rbexp . error [ RSQUARE ]
## Transitions:
-- On error shift to state 705
-- On COMMA shift to state 706
## Reductions:
-- On RSQUARE
--   reduce production rbexps -> rbexp

State 705:
## Known stack suffix:
## rbexp error
## LR(1) items:
rbexps -> rbexp error . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production rbexps -> rbexp error

State 706:
## Known stack suffix:
## rbexp COMMA
## LR(1) items:
rbexps -> rbexp COMMA . rbexps [ RSQUARE ]
rbexps -> rbexp COMMA . error [ RSQUARE ]
## Transitions:
-- On error shift to state 707
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 708
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 707:
## Known stack suffix:
## rbexp COMMA error
## LR(1) items:
rbexps -> rbexp COMMA error . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production rbexps -> rbexp COMMA error

State 708:
## Known stack suffix:
## rbexp COMMA rbexps
## LR(1) items:
rbexps -> rbexp COMMA rbexps . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production rbexps -> rbexp COMMA rbexps

State 709:
## Known stack suffix:
## EQUMOD
## LR(1) items:
rbexp_atomic_without_eqmod -> EQUMOD . rexp rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 710
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 710:
## Known stack suffix:
## EQUMOD rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQUMOD rexp . rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 711
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 711:
## Known stack suffix:
## EQUMOD rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQUMOD rexp rexp . rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 712
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 712:
## Known stack suffix:
## EQUMOD rexp rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQUMOD rexp rexp rexp . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> EQUMOD rexp rexp rexp

State 713:
## Known stack suffix:
## EQSREM
## LR(1) items:
rbexp_atomic_without_eqmod -> EQSREM . rexp rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 714
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 714:
## Known stack suffix:
## EQSREM rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQSREM rexp . rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 715
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 715:
## Known stack suffix:
## EQSREM rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQSREM rexp rexp . rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 716
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 716:
## Known stack suffix:
## EQSREM rexp rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQSREM rexp rexp rexp . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> EQSREM rexp rexp rexp

State 717:
## Known stack suffix:
## EQSMOD
## LR(1) items:
rbexp_atomic_without_eqmod -> EQSMOD . rexp rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 718
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 718:
## Known stack suffix:
## EQSMOD rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQSMOD rexp . rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 719
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 719:
## Known stack suffix:
## EQSMOD rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQSMOD rexp rexp . rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 720
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 720:
## Known stack suffix:
## EQSMOD rexp rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQSMOD rexp rexp rexp . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> EQSMOD rexp rexp rexp

State 721:
## Known stack suffix:
## EQMOD
## LR(1) items:
rbexp_atomic_without_eqmod -> EQMOD . rexp rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 722
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 722:
## Known stack suffix:
## EQMOD rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQMOD rexp . rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 723
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 723:
## Known stack suffix:
## EQMOD rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQMOD rexp rexp . rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 724
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 724:
## Known stack suffix:
## EQMOD rexp rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQMOD rexp rexp rexp . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> EQMOD rexp rexp rexp

State 725:
## Known stack suffix:
## EQ
## LR(1) items:
rbexp_atomic_without_eqmod -> EQ . rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 726
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 726:
## Known stack suffix:
## EQ rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQ rexp . rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 727
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 727:
## Known stack suffix:
## EQ rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> EQ rexp rexp . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> EQ rexp rexp

State 728:
## Known stack suffix:
## AND
## LR(1) items:
rbexp_atomic_without_eqmod -> AND . rbexp_atomic_without_eqmod rbexp_atomic_without_eqmod [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rbexp_atomic_without_eqmod -> AND . LSQUARE rbexps RSQUARE [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> AND . rexp rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 518
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 519
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 520
-- On MUL shift to state 421
-- On LSQUARE shift to state 729
-- On LPAR shift to state 521
-- On ID shift to state 30
-- On EQUMOD shift to state 709
-- On EQSREM shift to state 713
-- On EQSMOD shift to state 717
-- On EQMOD shift to state 721
-- On EQ shift to state 725
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 728
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 732
-- On rbexp_atomic_without_eqmod shift to state 737
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 740
## Reductions:

State 729:
## Known stack suffix:
## AND LSQUARE
## LR(1) items:
rbexp_atomic_without_eqmod -> AND LSQUARE . rbexps RSQUARE [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 730
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 730:
## Known stack suffix:
## AND LSQUARE rbexps
## LR(1) items:
rbexp_atomic_without_eqmod -> AND LSQUARE rbexps . RSQUARE [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On RSQUARE shift to state 731
## Reductions:

State 731:
## Known stack suffix:
## AND LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic_without_eqmod -> AND LSQUARE rbexps RSQUARE . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> AND LSQUARE rbexps RSQUARE

State 732:
## Known stack suffix:
## AND rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> rexp . EQOP rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rbexp_atomic_without_eqmod -> rexp . cmpop_infix rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> AND rexp . rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR RPAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULTOP shift to state 667
-- On ULIMBS shift to state 393
-- On ULEOP shift to state 668
-- On UINT shift to state 2
-- On UGTOP shift to state 669
-- On UGEOP shift to state 670
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLTOP shift to state 671
-- On SLIMBS shift to state 408
-- On SLEOP shift to state 672
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SGTOP shift to state 673
-- On SGEOP shift to state 674
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On EQOP shift to state 733
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 469
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_infix shift to state 735
## Reductions:

State 733:
## Known stack suffix:
## rexp EQOP
## LR(1) items:
rbexp_atomic_without_eqmod -> rexp EQOP . rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 734
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 734:
## Known stack suffix:
## rexp EQOP rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> rexp EQOP rexp . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> rexp EQOP rexp

State 735:
## Known stack suffix:
## rexp cmpop_infix
## LR(1) items:
rbexp_atomic_without_eqmod -> rexp cmpop_infix . rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 736
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 736:
## Known stack suffix:
## rexp cmpop_infix rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> rexp cmpop_infix rexp . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> rexp cmpop_infix rexp

State 737:
## Known stack suffix:
## AND rbexp_atomic_without_eqmod
## LR(1) items:
rbexp_atomic_without_eqmod -> AND rbexp_atomic_without_eqmod . rbexp_atomic_without_eqmod [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 518
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 519
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 520
-- On MUL shift to state 421
-- On LPAR shift to state 521
-- On ID shift to state 30
-- On EQUMOD shift to state 709
-- On EQSREM shift to state 713
-- On EQSMOD shift to state 717
-- On EQMOD shift to state 721
-- On EQ shift to state 725
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 728
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 738
-- On rbexp_atomic_without_eqmod shift to state 739
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 740
## Reductions:

State 738:
## Known stack suffix:
## rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> rexp . EQOP rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rbexp_atomic_without_eqmod -> rexp . cmpop_infix rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On ULTOP shift to state 667
-- On ULEOP shift to state 668
-- On UGTOP shift to state 669
-- On UGEOP shift to state 670
-- On SUBOP shift to state 443
-- On SLTOP shift to state 671
-- On SLEOP shift to state 672
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SGTOP shift to state 673
-- On SGEOP shift to state 674
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On EQOP shift to state 733
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
-- On cmpop_infix shift to state 735
## Reductions:

State 739:
## Known stack suffix:
## AND rbexp_atomic_without_eqmod rbexp_atomic_without_eqmod
## LR(1) items:
rbexp_atomic_without_eqmod -> AND rbexp_atomic_without_eqmod rbexp_atomic_without_eqmod . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> AND rbexp_atomic_without_eqmod rbexp_atomic_without_eqmod

State 740:
## Known stack suffix:
## cmpop_prefix
## LR(1) items:
rbexp_atomic_without_eqmod -> cmpop_prefix . rexp rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 741
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 741:
## Known stack suffix:
## cmpop_prefix rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> cmpop_prefix rexp . rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 742
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 742:
## Known stack suffix:
## cmpop_prefix rexp rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> cmpop_prefix rexp rexp . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUBOP SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHROP SHR SHLOP SHL SGT SGE SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> cmpop_prefix rexp rexp

State 743:
## Known stack suffix:
## AND rbexp_atomic_without_eqmod
## LR(1) items:
rbexp_atomic -> AND rbexp_atomic_without_eqmod . rbexp_atomic [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexp_atomic shift to state 744
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 744:
## Known stack suffix:
## AND rbexp_atomic_without_eqmod rbexp_atomic
## LR(1) items:
rbexp_atomic -> AND rbexp_atomic_without_eqmod rbexp_atomic . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> AND rbexp_atomic_without_eqmod rbexp_atomic

State 745:
## Known stack suffix:
## LANDOP LSQUARE rbexps
## LR(1) items:
rbexp_atomic -> LANDOP LSQUARE rbexps . RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On RSQUARE shift to state 746
## Reductions:

State 746:
## Known stack suffix:
## LANDOP LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic -> LANDOP LSQUARE rbexps RSQUARE . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> LANDOP LSQUARE rbexps RSQUARE

State 747:
## Known stack suffix:
## LOROP LSQUARE rbexps
## LR(1) items:
rbexp_atomic -> LOROP LSQUARE rbexps . RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On RSQUARE shift to state 748
## Reductions:

State 748:
## Known stack suffix:
## LOROP LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic -> LOROP LSQUARE rbexps RSQUARE . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> LOROP LSQUARE rbexps RSQUARE

State 749:
## Known stack suffix:
## LANDOP LSQUARE rbexps
## LR(1) items:
rbexp_atomic -> LANDOP LSQUARE rbexps . RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On RSQUARE shift to state 750
## Reductions:

State 750:
## Known stack suffix:
## LANDOP LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic -> LANDOP LSQUARE rbexps RSQUARE . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> LANDOP LSQUARE rbexps RSQUARE

State 751:
## Known stack suffix:
## EQUMOD
## LR(1) items:
rbexp_atomic -> EQUMOD . rexp rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 752
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 752:
## Known stack suffix:
## EQUMOD rexp
## LR(1) items:
rbexp_atomic -> EQUMOD rexp . rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 753
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 753:
## Known stack suffix:
## EQUMOD rexp rexp
## LR(1) items:
rbexp_atomic -> EQUMOD rexp rexp . rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 754
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 754:
## Known stack suffix:
## EQUMOD rexp rexp rexp
## LR(1) items:
rbexp_atomic -> EQUMOD rexp rexp rexp . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> EQUMOD rexp rexp rexp

State 755:
## Known stack suffix:
## EQSREM
## LR(1) items:
rbexp_atomic -> EQSREM . rexp rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 756
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 756:
## Known stack suffix:
## EQSREM rexp
## LR(1) items:
rbexp_atomic -> EQSREM rexp . rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 757
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 757:
## Known stack suffix:
## EQSREM rexp rexp
## LR(1) items:
rbexp_atomic -> EQSREM rexp rexp . rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 758
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 758:
## Known stack suffix:
## EQSREM rexp rexp rexp
## LR(1) items:
rbexp_atomic -> EQSREM rexp rexp rexp . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> EQSREM rexp rexp rexp

State 759:
## Known stack suffix:
## EQSMOD
## LR(1) items:
rbexp_atomic -> EQSMOD . rexp rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 760
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 760:
## Known stack suffix:
## EQSMOD rexp
## LR(1) items:
rbexp_atomic -> EQSMOD rexp . rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 761
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 761:
## Known stack suffix:
## EQSMOD rexp rexp
## LR(1) items:
rbexp_atomic -> EQSMOD rexp rexp . rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 762
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 762:
## Known stack suffix:
## EQSMOD rexp rexp rexp
## LR(1) items:
rbexp_atomic -> EQSMOD rexp rexp rexp . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> EQSMOD rexp rexp rexp

State 763:
## Known stack suffix:
## EQMOD
## LR(1) items:
rbexp_atomic -> EQMOD . rexp rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 764
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 764:
## Known stack suffix:
## EQMOD rexp
## LR(1) items:
rbexp_atomic -> EQMOD rexp . rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 765
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 765:
## Known stack suffix:
## EQMOD rexp rexp
## LR(1) items:
rbexp_atomic -> EQMOD rexp rexp . rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 766
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 766:
## Known stack suffix:
## EQMOD rexp rexp rexp
## LR(1) items:
rbexp_atomic -> EQMOD rexp rexp rexp . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> EQMOD rexp rexp rexp

State 767:
## Known stack suffix:
## EQ
## LR(1) items:
rbexp_atomic -> EQ . rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 768
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 768:
## Known stack suffix:
## EQ rexp
## LR(1) items:
rbexp_atomic -> EQ rexp . rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 769
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 769:
## Known stack suffix:
## EQ rexp rexp
## LR(1) items:
rbexp_atomic -> EQ rexp rexp . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> EQ rexp rexp

State 770:
## Known stack suffix:
## AND
## LR(1) items:
rbexp_atomic -> AND . rbexp_atomic_without_eqmod rbexp_atomic [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rbexp_atomic -> AND . LSQUARE rbexps RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> AND . rexp rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 518
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 519
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 520
-- On MUL shift to state 421
-- On LSQUARE shift to state 771
-- On LPAR shift to state 521
-- On ID shift to state 30
-- On EQUMOD shift to state 709
-- On EQSREM shift to state 713
-- On EQSMOD shift to state 717
-- On EQMOD shift to state 721
-- On EQ shift to state 725
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 728
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 732
-- On rbexp_atomic_without_eqmod shift to state 774
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 740
## Reductions:

State 771:
## Known stack suffix:
## AND LSQUARE
## LR(1) items:
rbexp_atomic -> AND LSQUARE . rbexps RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 772
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 772:
## Known stack suffix:
## AND LSQUARE rbexps
## LR(1) items:
rbexp_atomic -> AND LSQUARE rbexps . RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On RSQUARE shift to state 773
## Reductions:

State 773:
## Known stack suffix:
## AND LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic -> AND LSQUARE rbexps RSQUARE . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> AND LSQUARE rbexps RSQUARE

State 774:
## Known stack suffix:
## AND rbexp_atomic_without_eqmod
## LR(1) items:
rbexp_atomic -> AND rbexp_atomic_without_eqmod . rbexp_atomic [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 775
-- On rbexp_atomic shift to state 794
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 795
## Reductions:

State 775:
## Known stack suffix:
## rexp
## LR(1) items:
rbexp_atomic -> rexp . EQOP rexp req_suffix [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rbexp_atomic -> rexp . cmpop_infix rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On ULTOP shift to state 667
-- On ULEOP shift to state 668
-- On UGTOP shift to state 669
-- On UGEOP shift to state 670
-- On SUBOP shift to state 443
-- On SLTOP shift to state 671
-- On SLEOP shift to state 672
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SGTOP shift to state 673
-- On SGEOP shift to state 674
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On EQOP shift to state 776
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
-- On cmpop_infix shift to state 792
## Reductions:

State 776:
## Known stack suffix:
## rexp EQOP
## LR(1) items:
rbexp_atomic -> rexp EQOP . rexp req_suffix [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 777
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 777:
## Known stack suffix:
## rexp EQOP rexp
## LR(1) items:
rbexp_atomic -> rexp EQOP rexp . req_suffix [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LPAR LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LPAR LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LPAR LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LPAR LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LPAR LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LPAR LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LPAR LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LPAR LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LPAR LOROP LANDOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On LPAR shift to state 778
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
-- On req_suffix shift to state 791
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production req_suffix ->

State 778:
## Known stack suffix:
## LPAR
## LR(1) items:
req_suffix -> LPAR . MOD rexp RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
req_suffix -> LPAR . UMOD rexp RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
req_suffix -> LPAR . SMOD rexp RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
req_suffix -> LPAR . SREM rexp RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On UMOD shift to state 779
-- On SREM shift to state 782
-- On SMOD shift to state 785
-- On MOD shift to state 788
## Reductions:

State 779:
## Known stack suffix:
## LPAR UMOD
## LR(1) items:
req_suffix -> LPAR UMOD . rexp RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 780
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 780:
## Known stack suffix:
## LPAR UMOD rexp
## LR(1) items:
req_suffix -> LPAR UMOD rexp . RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 781
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 781:
## Known stack suffix:
## LPAR UMOD rexp RPAR
## LR(1) items:
req_suffix -> LPAR UMOD rexp RPAR . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production req_suffix -> LPAR UMOD rexp RPAR

State 782:
## Known stack suffix:
## LPAR SREM
## LR(1) items:
req_suffix -> LPAR SREM . rexp RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 783
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 783:
## Known stack suffix:
## LPAR SREM rexp
## LR(1) items:
req_suffix -> LPAR SREM rexp . RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 784
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 784:
## Known stack suffix:
## LPAR SREM rexp RPAR
## LR(1) items:
req_suffix -> LPAR SREM rexp RPAR . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production req_suffix -> LPAR SREM rexp RPAR

State 785:
## Known stack suffix:
## LPAR SMOD
## LR(1) items:
req_suffix -> LPAR SMOD . rexp RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 786
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 786:
## Known stack suffix:
## LPAR SMOD rexp
## LR(1) items:
req_suffix -> LPAR SMOD rexp . RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 787
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 787:
## Known stack suffix:
## LPAR SMOD rexp RPAR
## LR(1) items:
req_suffix -> LPAR SMOD rexp RPAR . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production req_suffix -> LPAR SMOD rexp RPAR

State 788:
## Known stack suffix:
## LPAR MOD
## LR(1) items:
req_suffix -> LPAR MOD . rexp RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 789
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 789:
## Known stack suffix:
## LPAR MOD rexp
## LR(1) items:
req_suffix -> LPAR MOD rexp . RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SAROP RPAR OROP MULOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On RPAR shift to state 790
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:

State 790:
## Known stack suffix:
## LPAR MOD rexp RPAR
## LR(1) items:
req_suffix -> LPAR MOD rexp RPAR . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production req_suffix -> LPAR MOD rexp RPAR

State 791:
## Known stack suffix:
## rexp EQOP rexp req_suffix
## LR(1) items:
rbexp_atomic -> rexp EQOP rexp req_suffix . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> rexp EQOP rexp req_suffix

State 792:
## Known stack suffix:
## rexp cmpop_infix
## LR(1) items:
rbexp_atomic -> rexp cmpop_infix . rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 793
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 793:
## Known stack suffix:
## rexp cmpop_infix rexp
## LR(1) items:
rbexp_atomic -> rexp cmpop_infix rexp . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> rexp cmpop_infix rexp

State 794:
## Known stack suffix:
## AND rbexp_atomic_without_eqmod rbexp_atomic
## LR(1) items:
rbexp_atomic -> AND rbexp_atomic_without_eqmod rbexp_atomic . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> AND rbexp_atomic_without_eqmod rbexp_atomic

State 795:
## Known stack suffix:
## cmpop_prefix
## LR(1) items:
rbexp_atomic -> cmpop_prefix . rexp rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 434
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 796
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 796:
## Known stack suffix:
## cmpop_prefix rexp
## LR(1) items:
rbexp_atomic -> cmpop_prefix rexp . rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULIMBS UINT UEXT SUBOP SUB SREM SQ SMOD SLIMBS SINT SHROP SHR SHLOP SHL SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULIMBS shift to state 393
-- On UINT shift to state 2
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLIMBS shift to state 408
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 797
-- On defined_var shift to state 447
-- On const shift to state 448
## Reductions:

State 797:
## Known stack suffix:
## cmpop_prefix rexp rexp
## LR(1) items:
rbexp_atomic -> cmpop_prefix rexp rexp . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> rexp . ADDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP SUBOP SHROP SHLOP SEMICOLON SAROP RPAR RBRAC PROVE OROP MULOP LOROP LANDOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On SUBOP shift to state 443
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SAROP shift to state 458
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> cmpop_prefix rexp rexp

State 798:
## Known stack suffix:
## LPAR rexp
## LR(1) items:
rbexp_atomic -> rexp . EQOP rexp req_suffix [ RPAR LOROP LANDOP ]
rbexp_atomic -> rexp . cmpop_infix rexp [ RPAR LOROP LANDOP ]
rexp -> LPAR rexp . RPAR [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR RPAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On XOROP shift to state 441
-- On ULTOP shift to state 667
-- On ULEOP shift to state 668
-- On UGTOP shift to state 669
-- On UGEOP shift to state 670
-- On SUBOP shift to state 443
-- On SLTOP shift to state 671
-- On SLEOP shift to state 672
-- On SHROP shift to state 452
-- On SHLOP shift to state 456
-- On SGTOP shift to state 673
-- On SGEOP shift to state 674
-- On SAROP shift to state 458
-- On RPAR shift to state 471
-- On OROP shift to state 462
-- On MULOP shift to state 445
-- On EQOP shift to state 776
-- On ANDOP shift to state 460
-- On ADDOP shift to state 454
-- On cmpop_infix shift to state 792
## Reductions:

State 799:
## Known stack suffix:
## rbexp_atomic
## LR(1) items:
rbexp_and -> rbexp_atomic . LANDOP rbexp_and [ SEMICOLON RPAR RBRAC PROVE LOROP ]
rbexp_and -> rbexp_atomic . [ SEMICOLON RPAR RBRAC PROVE LOROP ]
## Transitions:
-- On LANDOP shift to state 800
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP
--   reduce production rbexp_and -> rbexp_atomic

State 800:
## Known stack suffix:
## rbexp_atomic LANDOP
## LR(1) items:
rbexp_and -> rbexp_atomic LANDOP . rbexp_and [ SEMICOLON RPAR RBRAC PROVE LOROP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 775
-- On rbexp_atomic shift to state 799
-- On rbexp_and shift to state 801
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 795
## Reductions:

State 801:
## Known stack suffix:
## rbexp_atomic LANDOP rbexp_and
## LR(1) items:
rbexp_and -> rbexp_atomic LANDOP rbexp_and . [ SEMICOLON RPAR RBRAC PROVE LOROP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP
--   reduce production rbexp_and -> rbexp_atomic LANDOP rbexp_and

State 802:
## Known stack suffix:
## rbexp_and
## LR(1) items:
rbexp -> rbexp_and . LOROP rbexp [ SEMICOLON RPAR RBRAC PROVE ]
rbexp -> rbexp_and . [ SEMICOLON RPAR RBRAC PROVE ]
## Transitions:
-- On LOROP shift to state 803
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE
--   reduce production rbexp -> rbexp_and

State 803:
## Known stack suffix:
## rbexp_and LOROP
## LR(1) items:
rbexp -> rbexp_and LOROP . rbexp [ SEMICOLON RPAR RBRAC PROVE ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 775
-- On rbexp_atomic shift to state 799
-- On rbexp_and shift to state 802
-- On rbexp shift to state 804
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 795
## Reductions:

State 804:
## Known stack suffix:
## rbexp_and LOROP rbexp
## LR(1) items:
rbexp -> rbexp_and LOROP rbexp . [ SEMICOLON RPAR RBRAC PROVE ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE
--   reduce production rbexp -> rbexp_and LOROP rbexp

State 805:
## Known stack suffix:
## LPAR rbexp
## LR(1) items:
rbexp_atomic -> LPAR rbexp . RPAR [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On RPAR shift to state 806
## Reductions:

State 806:
## Known stack suffix:
## LPAR rbexp RPAR
## LR(1) items:
rbexp_atomic -> LPAR rbexp RPAR . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> LPAR rbexp RPAR

State 807:
## Known stack suffix:
## NEG rexp
## LR(1) items:
rbexp_atomic -> rexp . EQOP rexp req_suffix [ error RSQUARE LOROP LANDOP COMMA ]
rbexp_atomic -> rexp . cmpop_infix rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> NEG rexp . [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On cmpop_infix shift to state 691
## Reductions:
-- On XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP
--   reduce production rexp -> NEG rexp

State 808:
## Known stack suffix:
## NEG rbexp_atomic
## LR(1) items:
rbexp_atomic -> NEG rbexp_atomic . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> NEG rbexp_atomic

State 809:
## Known stack suffix:
## NEGOP rexp
## LR(1) items:
rbexp_atomic -> rexp . EQOP rexp req_suffix [ error RSQUARE LOROP LANDOP COMMA ]
rbexp_atomic -> rexp . cmpop_infix rexp [ error RSQUARE LOROP LANDOP COMMA ]
rexp -> NEGOP rexp . [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On cmpop_infix shift to state 691
## Reductions:
-- On XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP OROP MULOP EQOP ANDOP ADDOP
--   reduce production rexp -> NEGOP rexp

State 810:
## Known stack suffix:
## NEGOP rbexp_atomic
## LR(1) items:
rbexp_atomic -> NEGOP rbexp_atomic . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> NEGOP rbexp_atomic

State 811:
## Known stack suffix:
## OR LSQUARE rbexps
## LR(1) items:
rbexp_atomic -> OR LSQUARE rbexps . RSQUARE [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On RSQUARE shift to state 812
## Reductions:

State 812:
## Known stack suffix:
## OR LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic -> OR LSQUARE rbexps RSQUARE . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> OR LSQUARE rbexps RSQUARE

State 813:
## Known stack suffix:
## OR rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> rexp . EQOP rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rbexp_atomic_without_eqmod -> rexp . cmpop_infix rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> OR rexp . rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR RPAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On XOROP shift to state 441
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULTOP shift to state 667
-- On ULIMBS shift to state 393
-- On ULEOP shift to state 668
-- On UINT shift to state 2
-- On UGTOP shift to state 669
-- On UGEOP shift to state 670
-- On UEXT shift to state 403
-- On SUBOP shift to state 443
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLTOP shift to state 671
-- On SLIMBS shift to state 408
-- On SLEOP shift to state 672
-- On SINT shift to state 3
-- On SHROP shift to state 452
-- On SHR shift to state 411
-- On SHLOP shift to state 456
-- On SHL shift to state 412
-- On SGTOP shift to state 673
-- On SGEOP shift to state 674
-- On SEXT shift to state 413
-- On SAROP shift to state 458
-- On SAR shift to state 414
-- On OROP shift to state 462
-- On OR shift to state 415
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 420
-- On MULOP shift to state 445
-- On MUL shift to state 421
-- On LPAR shift to state 423
-- On ID shift to state 30
-- On EQOP shift to state 733
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On ANDOP shift to state 460
-- On AND shift to state 434
-- On ADDOP shift to state 454
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 482
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_infix shift to state 735
## Reductions:

State 814:
## Known stack suffix:
## OR rbexp_atomic_without_eqmod
## LR(1) items:
rbexp_atomic -> OR rbexp_atomic_without_eqmod . rbexp_atomic [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexp_atomic shift to state 815
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 815:
## Known stack suffix:
## OR rbexp_atomic_without_eqmod rbexp_atomic
## LR(1) items:
rbexp_atomic -> OR rbexp_atomic_without_eqmod rbexp_atomic . [ error RSQUARE LOROP LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error RSQUARE LOROP LANDOP COMMA
--   reduce production rbexp_atomic -> OR rbexp_atomic_without_eqmod rbexp_atomic

State 816:
## Known stack suffix:
## LOROP LSQUARE rbexps
## LR(1) items:
rbexp_atomic -> LOROP LSQUARE rbexps . RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On RSQUARE shift to state 817
## Reductions:

State 817:
## Known stack suffix:
## LOROP LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic -> LOROP LSQUARE rbexps RSQUARE . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> LOROP LSQUARE rbexps RSQUARE

State 818:
## Known stack suffix:
## LPAR rbexp
## LR(1) items:
rbexp_atomic -> LPAR rbexp . RPAR [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On RPAR shift to state 819
## Reductions:

State 819:
## Known stack suffix:
## LPAR rbexp RPAR
## LR(1) items:
rbexp_atomic -> LPAR rbexp RPAR . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> LPAR rbexp RPAR

State 820:
## Known stack suffix:
## NEG rexp
## LR(1) items:
rbexp_atomic -> rexp . EQOP rexp req_suffix [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rbexp_atomic -> rexp . cmpop_infix rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> NEG rexp . [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On cmpop_infix shift to state 792
## Reductions:
-- On XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP
--   reduce production rexp -> NEG rexp

State 821:
## Known stack suffix:
## NEG rbexp_atomic
## LR(1) items:
rbexp_atomic -> NEG rbexp_atomic . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> NEG rbexp_atomic

State 822:
## Known stack suffix:
## NEGOP rexp
## LR(1) items:
rbexp_atomic -> rexp . EQOP rexp req_suffix [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rbexp_atomic -> rexp . cmpop_infix rexp [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
rexp -> NEGOP rexp . [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ADDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SUBOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . MULOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . ANDOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . OROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . XOROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHLOP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SHROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
rexp -> rexp . SAROP rexp [ XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP ]
## Transitions:
-- On cmpop_infix shift to state 792
## Reductions:
-- On XOROP ULTOP ULEOP UGTOP UGEOP SUBOP SLTOP SLEOP SHROP SHLOP SGTOP SGEOP SAROP RPAR OROP MULOP EQOP ANDOP ADDOP
--   reduce production rexp -> NEGOP rexp

State 823:
## Known stack suffix:
## NEGOP rbexp_atomic
## LR(1) items:
rbexp_atomic -> NEGOP rbexp_atomic . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> NEGOP rbexp_atomic

State 824:
## Known stack suffix:
## LPAR rbexp
## LR(1) items:
rbexp_atomic_without_eqmod -> LPAR rbexp . RPAR [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On RPAR shift to state 825
## Reductions:

State 825:
## Known stack suffix:
## LPAR rbexp RPAR
## LR(1) items:
rbexp_atomic_without_eqmod -> LPAR rbexp RPAR . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> LPAR rbexp RPAR

State 826:
## Known stack suffix:
## NEG rexp
## LR(1) items:
rbexp_atomic_without_eqmod -> rexp . EQOP rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rbexp_atomic_without_eqmod -> rexp . cmpop_infix rexp [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
rexp -> NEG rexp . [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ADDOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SUBOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . MULOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . ANDOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . OROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . XOROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHLOP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SHROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
rexp -> rexp . SAROP rexp [ XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD ]
## Transitions:
-- On cmpop_infix shift to state 735
## Reductions:
-- On XOROP XOR UMOD ULTOP ULIMBS ULEOP UINT UGTOP UGEOP UEXT SUBOP SUB SREM SQ SMOD SLTOP SLIMBS SLEOP SINT SHROP SHR SHLOP SHL SGTOP SGEOP SEXT SAROP SAR OROP OR NUM NOTOP NOT NEGOP NEG MULOP MUL LPAR ID EQOP DEREFOP CONST BIT ANDOP AND ADDOP ADD
--   reduce production rexp -> NEG rexp

State 827:
## Known stack suffix:
## NEG rbexp_atomic_without_eqmod
## LR(1) items:
rbexp_atomic_without_eqmod -> NEG rbexp_atomic_without_eqmod . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> NEG rbexp_atomic_without_eqmod

State 828:
## Known stack suffix:
## OR LSQUARE
## LR(1) items:
rbexp_atomic_without_eqmod -> OR LSQUARE . rbexps RSQUARE [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 829
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 829:
## Known stack suffix:
## OR LSQUARE rbexps
## LR(1) items:
rbexp_atomic_without_eqmod -> OR LSQUARE rbexps . RSQUARE [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On RSQUARE shift to state 830
## Reductions:

State 830:
## Known stack suffix:
## OR LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic_without_eqmod -> OR LSQUARE rbexps RSQUARE . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> OR LSQUARE rbexps RSQUARE

State 831:
## Known stack suffix:
## OR rbexp_atomic_without_eqmod
## LR(1) items:
rbexp_atomic_without_eqmod -> OR rbexp_atomic_without_eqmod . rbexp_atomic_without_eqmod [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 518
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 519
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 419
-- On NEG shift to state 520
-- On MUL shift to state 421
-- On LPAR shift to state 521
-- On ID shift to state 30
-- On EQUMOD shift to state 709
-- On EQSREM shift to state 713
-- On EQSMOD shift to state 717
-- On EQMOD shift to state 721
-- On EQ shift to state 725
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 728
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 738
-- On rbexp_atomic_without_eqmod shift to state 832
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 740
## Reductions:

State 832:
## Known stack suffix:
## OR rbexp_atomic_without_eqmod rbexp_atomic_without_eqmod
## LR(1) items:
rbexp_atomic_without_eqmod -> OR rbexp_atomic_without_eqmod rbexp_atomic_without_eqmod . [ XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD ]
## Transitions:
## Reductions:
-- On XOR UMOD ULT ULIMBS ULE UINT UGT UGE UEXT TRUE SUB SREM SQ SMOD SLT SLIMBS SLE SINT SHR SHL SGT SGE SEXT SAR OR NUM NOTOP NOT NEGOP NEG MUL LPAR LOROP LANDOP ID EQUMOD EQSREM EQSMOD EQMOD EQ DEREFOP CONST BIT AND ADD
--   reduce production rbexp_atomic_without_eqmod -> OR rbexp_atomic_without_eqmod rbexp_atomic_without_eqmod

State 833:
## Known stack suffix:
## OR LSQUARE
## LR(1) items:
rbexp_atomic -> OR LSQUARE . rbexps RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 527
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 528
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 530
-- On NEG shift to state 531
-- On MUL shift to state 421
-- On LPAR shift to state 532
-- On LOROP shift to state 535
-- On LANDOP shift to state 537
-- On ID shift to state 30
-- On EQUMOD shift to state 539
-- On EQSREM shift to state 649
-- On EQSMOD shift to state 653
-- On EQMOD shift to state 657
-- On EQ shift to state 661
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 664
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 666
-- On rbexps shift to state 834
-- On rbexp_atomic shift to state 695
-- On rbexp_and shift to state 701
-- On rbexp shift to state 704
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 698
## Reductions:

State 834:
## Known stack suffix:
## OR LSQUARE rbexps
## LR(1) items:
rbexp_atomic -> OR LSQUARE rbexps . RSQUARE [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On RSQUARE shift to state 835
## Reductions:

State 835:
## Known stack suffix:
## OR LSQUARE rbexps RSQUARE
## LR(1) items:
rbexp_atomic -> OR LSQUARE rbexps RSQUARE . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> OR LSQUARE rbexps RSQUARE

State 836:
## Known stack suffix:
## OR rbexp_atomic_without_eqmod
## LR(1) items:
rbexp_atomic -> OR rbexp_atomic_without_eqmod . rbexp_atomic [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 775
-- On rbexp_atomic shift to state 837
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 795
## Reductions:

State 837:
## Known stack suffix:
## OR rbexp_atomic_without_eqmod rbexp_atomic
## LR(1) items:
rbexp_atomic -> OR rbexp_atomic_without_eqmod rbexp_atomic . [ SEMICOLON RPAR RBRAC PROVE LOROP LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR RBRAC PROVE LOROP LANDOP
--   reduce production rbexp_atomic -> OR rbexp_atomic_without_eqmod rbexp_atomic

State 838:
## Known stack suffix:
## RCUT rbexp_prove_with
## LR(1) items:
instr -> RCUT rbexp_prove_with . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> RCUT rbexp_prove_with

State 839:
## Known stack suffix:
## rbexp
## LR(1) items:
rbexp_prove_with -> rbexp . [ SEMICOLON RBRAC ]
rbexp_prove_with -> rbexp . PROVE WITH prove_with_specs [ SEMICOLON RBRAC ]
## Transitions:
-- On PROVE shift to state 840
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production rbexp_prove_with -> rbexp

State 840:
## Known stack suffix:
## rbexp PROVE
## LR(1) items:
rbexp_prove_with -> rbexp PROVE . WITH prove_with_specs [ SEMICOLON RBRAC ]
## Transitions:
-- On WITH shift to state 841
## Reductions:

State 841:
## Known stack suffix:
## rbexp PROVE WITH
## LR(1) items:
rbexp_prove_with -> rbexp PROVE WITH . prove_with_specs [ SEMICOLON RBRAC ]
## Transitions:
-- On PRECONDITION shift to state 842
-- On ALL shift to state 843
-- On prove_with_specs shift to state 847
-- On prove_with_spec shift to state 848
## Reductions:

State 842:
## Known stack suffix:
## PRECONDITION
## LR(1) items:
prove_with_spec -> PRECONDITION . [ SEMICOLON RBRAC COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC COMMA
--   reduce production prove_with_spec -> PRECONDITION

State 843:
## Known stack suffix:
## ALL
## LR(1) items:
prove_with_spec -> ALL . CUTS [ SEMICOLON RBRAC COMMA ]
prove_with_spec -> ALL . ASSUMES [ SEMICOLON RBRAC COMMA ]
prove_with_spec -> ALL . GHOSTS [ SEMICOLON RBRAC COMMA ]
## Transitions:
-- On GHOSTS shift to state 844
-- On CUTS shift to state 845
-- On ASSUMES shift to state 846
## Reductions:

State 844:
## Known stack suffix:
## ALL GHOSTS
## LR(1) items:
prove_with_spec -> ALL GHOSTS . [ SEMICOLON RBRAC COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC COMMA
--   reduce production prove_with_spec -> ALL GHOSTS

State 845:
## Known stack suffix:
## ALL CUTS
## LR(1) items:
prove_with_spec -> ALL CUTS . [ SEMICOLON RBRAC COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC COMMA
--   reduce production prove_with_spec -> ALL CUTS

State 846:
## Known stack suffix:
## ALL ASSUMES
## LR(1) items:
prove_with_spec -> ALL ASSUMES . [ SEMICOLON RBRAC COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC COMMA
--   reduce production prove_with_spec -> ALL ASSUMES

State 847:
## Known stack suffix:
## rbexp PROVE WITH prove_with_specs
## LR(1) items:
rbexp_prove_with -> rbexp PROVE WITH prove_with_specs . [ SEMICOLON RBRAC ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production rbexp_prove_with -> rbexp PROVE WITH prove_with_specs

State 848:
## Known stack suffix:
## prove_with_spec
## LR(1) items:
prove_with_specs -> prove_with_spec . [ SEMICOLON RBRAC ]
prove_with_specs -> prove_with_spec . COMMA prove_with_specs [ SEMICOLON RBRAC ]
## Transitions:
-- On COMMA shift to state 849
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production prove_with_specs -> prove_with_spec

State 849:
## Known stack suffix:
## prove_with_spec COMMA
## LR(1) items:
prove_with_specs -> prove_with_spec COMMA . prove_with_specs [ SEMICOLON RBRAC ]
## Transitions:
-- On PRECONDITION shift to state 842
-- On ALL shift to state 843
-- On prove_with_specs shift to state 850
-- On prove_with_spec shift to state 848
## Reductions:

State 850:
## Known stack suffix:
## prove_with_spec COMMA prove_with_specs
## LR(1) items:
prove_with_specs -> prove_with_spec COMMA prove_with_specs . [ SEMICOLON RBRAC ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production prove_with_specs -> prove_with_spec COMMA prove_with_specs

State 851:
## Known stack suffix:
## OR
## LR(1) items:
instr -> OR . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 852
## Reductions:

State 852:
## Known stack suffix:
## OR lval
## LR(1) items:
instr -> OR lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 853
## Reductions:

State 853:
## Known stack suffix:
## OR lval atomic
## LR(1) items:
instr -> OR lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 854
## Reductions:

State 854:
## Known stack suffix:
## OR lval atomic atomic
## LR(1) items:
instr -> OR lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> OR lval atomic atomic

State 855:
## Known stack suffix:
## NOT
## LR(1) items:
instr -> NOT . lval atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 856
## Reductions:

State 856:
## Known stack suffix:
## NOT lval
## LR(1) items:
instr -> NOT lval . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 857
## Reductions:

State 857:
## Known stack suffix:
## NOT lval atomic
## LR(1) items:
instr -> NOT lval atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> NOT lval atomic

State 858:
## Known stack suffix:
## NOP
## LR(1) items:
instr -> NOP . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> NOP

State 859:
## Known stack suffix:
## NONDET
## LR(1) items:
instr -> NONDET . lval [ SEMICOLON ]
instr -> NONDET . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 860
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 861
## Reductions:

State 860:
## Known stack suffix:
## NONDET error
## LR(1) items:
instr -> NONDET error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> NONDET error

State 861:
## Known stack suffix:
## NONDET lval
## LR(1) items:
instr -> NONDET lval . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> NONDET lval

State 862:
## Known stack suffix:
## MULS
## LR(1) items:
instr -> MULS . lcarry lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 863
## Reductions:

State 863:
## Known stack suffix:
## MULS lcarry
## LR(1) items:
instr -> MULS lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 864
## Reductions:

State 864:
## Known stack suffix:
## MULS lcarry lval
## LR(1) items:
instr -> MULS lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 865
## Reductions:

State 865:
## Known stack suffix:
## MULS lcarry lval atomic
## LR(1) items:
instr -> MULS lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 866
## Reductions:

State 866:
## Known stack suffix:
## MULS lcarry lval atomic atomic
## LR(1) items:
instr -> MULS lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> MULS lcarry lval atomic atomic

State 867:
## Known stack suffix:
## MULR
## LR(1) items:
instr -> MULR . lcarry lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 868
## Reductions:

State 868:
## Known stack suffix:
## MULR lcarry
## LR(1) items:
instr -> MULR lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 869
## Reductions:

State 869:
## Known stack suffix:
## MULR lcarry lval
## LR(1) items:
instr -> MULR lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 870
## Reductions:

State 870:
## Known stack suffix:
## MULR lcarry lval atomic
## LR(1) items:
instr -> MULR lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 871
## Reductions:

State 871:
## Known stack suffix:
## MULR lcarry lval atomic atomic
## LR(1) items:
instr -> MULR lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> MULR lcarry lval atomic atomic

State 872:
## Known stack suffix:
## MULL
## LR(1) items:
instr -> MULL . lval lval atomic atomic [ SEMICOLON ]
instr -> MULL . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 873
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 874
## Reductions:

State 873:
## Known stack suffix:
## MULL error
## LR(1) items:
instr -> MULL error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> MULL error

State 874:
## Known stack suffix:
## MULL lval
## LR(1) items:
instr -> MULL lval . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 875
## Reductions:

State 875:
## Known stack suffix:
## MULL lval lval
## LR(1) items:
instr -> MULL lval lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 876
## Reductions:

State 876:
## Known stack suffix:
## MULL lval lval atomic
## LR(1) items:
instr -> MULL lval lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 877
## Reductions:

State 877:
## Known stack suffix:
## MULL lval lval atomic atomic
## LR(1) items:
instr -> MULL lval lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> MULL lval lval atomic atomic

State 878:
## Known stack suffix:
## MULJ
## LR(1) items:
instr -> MULJ . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 879
## Reductions:

State 879:
## Known stack suffix:
## MULJ lval
## LR(1) items:
instr -> MULJ lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 880
## Reductions:

State 880:
## Known stack suffix:
## MULJ lval atomic
## LR(1) items:
instr -> MULJ lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 881
## Reductions:

State 881:
## Known stack suffix:
## MULJ lval atomic atomic
## LR(1) items:
instr -> MULJ lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> MULJ lval atomic atomic

State 882:
## Known stack suffix:
## MUL
## LR(1) items:
instr -> MUL . lval atomic atomic [ SEMICOLON ]
instr -> MUL . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 883
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 884
## Reductions:

State 883:
## Known stack suffix:
## MUL error
## LR(1) items:
instr -> MUL error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> MUL error

State 884:
## Known stack suffix:
## MUL lval
## LR(1) items:
instr -> MUL lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 885
## Reductions:

State 885:
## Known stack suffix:
## MUL lval atomic
## LR(1) items:
instr -> MUL lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 886
## Reductions:

State 886:
## Known stack suffix:
## MUL lval atomic atomic
## LR(1) items:
instr -> MUL lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> MUL lval atomic atomic

State 887:
## Known stack suffix:
## MOV
## LR(1) items:
instr -> MOV . lval atomic [ SEMICOLON ]
instr -> MOV . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 888
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 889
## Reductions:

State 888:
## Known stack suffix:
## MOV error
## LR(1) items:
instr -> MOV error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> MOV error

State 889:
## Known stack suffix:
## MOV lval
## LR(1) items:
instr -> MOV lval . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 890
## Reductions:

State 890:
## Known stack suffix:
## MOV lval atomic
## LR(1) items:
instr -> MOV lval atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> MOV lval atomic

State 891:
## Known stack suffix:
## JOIN
## LR(1) items:
instr -> JOIN . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 892
## Reductions:

State 892:
## Known stack suffix:
## JOIN lval
## LR(1) items:
instr -> JOIN lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 893
## Reductions:

State 893:
## Known stack suffix:
## JOIN lval atomic
## LR(1) items:
instr -> JOIN lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 894
## Reductions:

State 894:
## Known stack suffix:
## JOIN lval atomic atomic
## LR(1) items:
instr -> JOIN lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> JOIN lval atomic atomic

State 895:
## Known stack suffix:
## ID
## LR(1) items:
lhs -> ID . [ EQOP DOT ]
lhs -> ID . AT typ [ EQOP DOT ]
lhs -> ID . AT error [ EQOP DOT ]
## Transitions:
-- On AT shift to state 896
## Reductions:
-- On EQOP DOT
--   reduce production lhs -> ID

State 896:
## Known stack suffix:
## ID AT
## LR(1) items:
lhs -> ID AT . typ [ EQOP DOT ]
lhs -> ID AT . error [ EQOP DOT ]
## Transitions:
-- On error shift to state 897
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On BIT shift to state 7
-- On typ shift to state 898
## Reductions:

State 897:
## Known stack suffix:
## ID AT error
## LR(1) items:
lhs -> ID AT error . [ EQOP DOT ]
## Transitions:
## Reductions:
-- On EQOP DOT
--   reduce production lhs -> ID AT error

State 898:
## Known stack suffix:
## ID AT typ
## LR(1) items:
lhs -> ID AT typ . [ EQOP DOT ]
## Transitions:
## Reductions:
-- On EQOP DOT
--   reduce production lhs -> ID AT typ

State 899:
## Known stack suffix:
## GHOST
## LR(1) items:
instr -> GHOST . gvars COLON bexp [ SEMICOLON ]
## Transitions:
-- On error shift to state 900
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 901
-- On BIT shift to state 7
-- On typ shift to state 904
-- On gvars shift to state 906
-- On gvar shift to state 1185
## Reductions:

State 900:
## Known stack suffix:
## error
## LR(1) items:
gvars -> error . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production gvars -> error

State 901:
## Known stack suffix:
## ID
## LR(1) items:
gvar -> ID . AT typ [ error COMMA COLON ]
## Transitions:
-- On AT shift to state 902
## Reductions:

State 902:
## Known stack suffix:
## ID AT
## LR(1) items:
gvar -> ID AT . typ [ error COMMA COLON ]
## Transitions:
-- On UINT shift to state 591
-- On SINT shift to state 592
-- On BIT shift to state 593
-- On typ shift to state 903
## Reductions:

State 903:
## Known stack suffix:
## ID AT typ
## LR(1) items:
gvar -> ID AT typ . [ error COMMA COLON ]
## Transitions:
## Reductions:
-- On error COMMA COLON
--   reduce production gvar -> ID AT typ

State 904:
## Known stack suffix:
## typ
## LR(1) items:
gvar -> typ . ID [ error COMMA COLON ]
## Transitions:
-- On ID shift to state 905
## Reductions:

State 905:
## Known stack suffix:
## typ ID
## LR(1) items:
gvar -> typ ID . [ error COMMA COLON ]
## Transitions:
## Reductions:
-- On error COMMA COLON
--   reduce production gvar -> typ ID

State 906:
## Known stack suffix:
## GHOST gvars
## LR(1) items:
instr -> GHOST gvars . COLON bexp [ SEMICOLON ]
## Transitions:
-- On COLON shift to state 907
## Reductions:

State 907:
## Known stack suffix:
## GHOST gvars COLON
## LR(1) items:
instr -> GHOST gvars COLON . bexp [ SEMICOLON ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 981
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1179
-- On defined_var shift to state 932
-- On bexp shift to state 1184
## Reductions:

State 908:
## Known stack suffix:
## ULIMBS
## LR(1) items:
eexp -> ULIMBS . const LSQUARE eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 909
## Reductions:

State 909:
## Known stack suffix:
## ULIMBS const
## LR(1) items:
eexp -> ULIMBS const . LSQUARE eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On LSQUARE shift to state 910
## Reductions:

State 910:
## Known stack suffix:
## ULIMBS const LSQUARE
## LR(1) items:
eexp -> ULIMBS const LSQUARE . eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 979
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 911:
## Known stack suffix:
## VARS
## LR(1) items:
eexps -> VARS . var_expansion [ RSQUARE ]
## Transitions:
-- On ID shift to state 397
-- On var_expansion shift to state 912
## Reductions:

State 912:
## Known stack suffix:
## VARS var_expansion
## LR(1) items:
eexps -> VARS var_expansion . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production eexps -> VARS var_expansion

State 913:
## Known stack suffix:
## SUBOP
## LR(1) items:
eexp -> SUBOP . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 978
-- On defined_var shift to state 932
## Reductions:

State 914:
## Known stack suffix:
## SUB
## LR(1) items:
eexp -> SUB . eexp eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 976
-- On defined_var shift to state 932
## Reductions:

State 915:
## Known stack suffix:
## SQ
## LR(1) items:
eexp -> SQ . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 975
-- On defined_var shift to state 932
## Reductions:

State 916:
## Known stack suffix:
## NEG
## LR(1) items:
eexp -> NEG . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 974
-- On defined_var shift to state 932
## Reductions:

State 917:
## Known stack suffix:
## MUL
## LR(1) items:
eexp -> MUL . eexp eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> MUL . LSQUARE eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 918
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 972
-- On defined_var shift to state 932
## Reductions:

State 918:
## Known stack suffix:
## MUL LSQUARE
## LR(1) items:
eexp -> MUL LSQUARE . eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 970
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 919:
## Known stack suffix:
## LPAR
## LR(1) items:
eexp -> LPAR . eexp RPAR [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 968
-- On defined_var shift to state 932
## Reductions:

State 920:
## Known stack suffix:
## ADD
## LR(1) items:
eexp -> ADD . eexp eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> ADD . LSQUARE eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 921
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 937
-- On defined_var shift to state 932
## Reductions:

State 921:
## Known stack suffix:
## ADD LSQUARE
## LR(1) items:
eexp -> ADD LSQUARE . eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 923
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 922:
## Known stack suffix:
## simple_const
## LR(1) items:
eexp -> simple_const . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> simple_const

State 923:
## Known stack suffix:
## ADD LSQUARE eexps
## LR(1) items:
eexp -> ADD LSQUARE eexps . RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 924
## Reductions:

State 924:
## Known stack suffix:
## ADD LSQUARE eexps RSQUARE
## LR(1) items:
eexp -> ADD LSQUARE eexps RSQUARE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> ADD LSQUARE eexps RSQUARE

State 925:
## Known stack suffix:
## eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ SUBOP RSQUARE POWOP MULOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP RSQUARE POWOP MULOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP RSQUARE POWOP MULOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ SUBOP RSQUARE POWOP MULOP COMMA ADDOP ]
eexps -> eexp . COMMA eexps [ RSQUARE ]
eexps -> eexp . [ RSQUARE ]
## Transitions:
-- On SUBOP shift to state 926
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On COMMA shift to state 933
-- On ADDOP shift to state 935
## Reductions:
-- On RSQUARE
--   reduce production eexps -> eexp

State 926:
## Known stack suffix:
## eexp SUBOP
## LR(1) items:
eexp -> eexp SUBOP . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 927
-- On defined_var shift to state 932
## Reductions:

State 927:
## Known stack suffix:
## eexp SUBOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp SUBOP eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On POWOP shift to state 928
-- On MULOP shift to state 930
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE NUM NEG MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> eexp SUBOP eexp

State 928:
## Known stack suffix:
## eexp POWOP
## LR(1) items:
eexp -> eexp POWOP . const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 929
## Reductions:

State 929:
## Known stack suffix:
## eexp POWOP const
## LR(1) items:
eexp -> eexp POWOP const . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> eexp POWOP const

State 930:
## Known stack suffix:
## eexp MULOP
## LR(1) items:
eexp -> eexp MULOP . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 931
-- On defined_var shift to state 932
## Reductions:

State 931:
## Known stack suffix:
## eexp MULOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp MULOP eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On POWOP shift to state 928
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> eexp MULOP eexp

State 932:
## Known stack suffix:
## defined_var
## LR(1) items:
eexp -> defined_var . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> defined_var

State 933:
## Known stack suffix:
## eexp COMMA
## LR(1) items:
eexps -> eexp COMMA . eexps [ RSQUARE ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 934
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 934:
## Known stack suffix:
## eexp COMMA eexps
## LR(1) items:
eexps -> eexp COMMA eexps . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production eexps -> eexp COMMA eexps

State 935:
## Known stack suffix:
## eexp ADDOP
## LR(1) items:
eexp -> eexp ADDOP . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 936
-- On defined_var shift to state 932
## Reductions:

State 936:
## Known stack suffix:
## eexp ADDOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp ADDOP eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On POWOP shift to state 928
-- On MULOP shift to state 930
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE NUM NEG MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> eexp ADDOP eexp

State 937:
## Known stack suffix:
## ADD eexp
## LR(1) items:
eexp -> ADD eexp . eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 967
-- On defined_var shift to state 964
## Reductions:

State 938:
## Known stack suffix:
## ULIMBS
## LR(1) items:
eexp_no_unary -> ULIMBS . const LSQUARE eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 939
## Reductions:

State 939:
## Known stack suffix:
## ULIMBS const
## LR(1) items:
eexp_no_unary -> ULIMBS const . LSQUARE eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On LSQUARE shift to state 940
## Reductions:

State 940:
## Known stack suffix:
## ULIMBS const LSQUARE
## LR(1) items:
eexp_no_unary -> ULIMBS const LSQUARE . eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 941
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 941:
## Known stack suffix:
## ULIMBS const LSQUARE eexps
## LR(1) items:
eexp_no_unary -> ULIMBS const LSQUARE eexps . RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 942
## Reductions:

State 942:
## Known stack suffix:
## ULIMBS const LSQUARE eexps RSQUARE
## LR(1) items:
eexp_no_unary -> ULIMBS const LSQUARE eexps RSQUARE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> ULIMBS const LSQUARE eexps RSQUARE

State 943:
## Known stack suffix:
## SUB
## LR(1) items:
eexp_no_unary -> SUB . eexp eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 944
-- On defined_var shift to state 932
## Reductions:

State 944:
## Known stack suffix:
## SUB eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> SUB eexp . eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 966
-- On defined_var shift to state 964
## Reductions:

State 945:
## Known stack suffix:
## SQ
## LR(1) items:
eexp_no_unary -> SQ . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 946
-- On defined_var shift to state 932
## Reductions:

State 946:
## Known stack suffix:
## SQ eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> SQ eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> SQ eexp

State 947:
## Known stack suffix:
## NEG
## LR(1) items:
eexp_no_unary -> NEG . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 948
-- On defined_var shift to state 932
## Reductions:

State 948:
## Known stack suffix:
## NEG eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> NEG eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> NEG eexp

State 949:
## Known stack suffix:
## MUL
## LR(1) items:
eexp_no_unary -> MUL . eexp eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> MUL . LSQUARE eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 950
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 953
-- On defined_var shift to state 932
## Reductions:

State 950:
## Known stack suffix:
## MUL LSQUARE
## LR(1) items:
eexp_no_unary -> MUL LSQUARE . eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 951
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 951:
## Known stack suffix:
## MUL LSQUARE eexps
## LR(1) items:
eexp_no_unary -> MUL LSQUARE eexps . RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 952
## Reductions:

State 952:
## Known stack suffix:
## MUL LSQUARE eexps RSQUARE
## LR(1) items:
eexp_no_unary -> MUL LSQUARE eexps RSQUARE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> MUL LSQUARE eexps RSQUARE

State 953:
## Known stack suffix:
## MUL eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> MUL eexp . eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 965
-- On defined_var shift to state 964
## Reductions:

State 954:
## Known stack suffix:
## LPAR
## LR(1) items:
eexp_no_unary -> LPAR . eexp RPAR [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 955
-- On defined_var shift to state 932
## Reductions:

State 955:
## Known stack suffix:
## LPAR eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp_no_unary -> LPAR eexp . RPAR [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On SUBOP shift to state 926
-- On RPAR shift to state 956
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On ADDOP shift to state 935
## Reductions:

State 956:
## Known stack suffix:
## LPAR eexp RPAR
## LR(1) items:
eexp_no_unary -> LPAR eexp RPAR . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> LPAR eexp RPAR

State 957:
## Known stack suffix:
## ADD
## LR(1) items:
eexp_no_unary -> ADD . eexp eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> ADD . LSQUARE eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 958
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 961
-- On defined_var shift to state 932
## Reductions:

State 958:
## Known stack suffix:
## ADD LSQUARE
## LR(1) items:
eexp_no_unary -> ADD LSQUARE . eexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 959
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 959:
## Known stack suffix:
## ADD LSQUARE eexps
## LR(1) items:
eexp_no_unary -> ADD LSQUARE eexps . RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 960
## Reductions:

State 960:
## Known stack suffix:
## ADD LSQUARE eexps RSQUARE
## LR(1) items:
eexp_no_unary -> ADD LSQUARE eexps RSQUARE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> ADD LSQUARE eexps RSQUARE

State 961:
## Known stack suffix:
## ADD eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> ADD eexp . eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 963
-- On defined_var shift to state 964
## Reductions:

State 962:
## Known stack suffix:
## simple_const
## LR(1) items:
eexp_no_unary -> simple_const . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> simple_const

State 963:
## Known stack suffix:
## ADD eexp eexp_no_unary
## LR(1) items:
eexp_no_unary -> ADD eexp eexp_no_unary . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> ADD eexp eexp_no_unary

State 964:
## Known stack suffix:
## defined_var
## LR(1) items:
eexp_no_unary -> defined_var . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> defined_var

State 965:
## Known stack suffix:
## MUL eexp eexp_no_unary
## LR(1) items:
eexp_no_unary -> MUL eexp eexp_no_unary . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> MUL eexp eexp_no_unary

State 966:
## Known stack suffix:
## SUB eexp eexp_no_unary
## LR(1) items:
eexp_no_unary -> SUB eexp eexp_no_unary . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> SUB eexp eexp_no_unary

State 967:
## Known stack suffix:
## ADD eexp eexp_no_unary
## LR(1) items:
eexp -> ADD eexp eexp_no_unary . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> ADD eexp eexp_no_unary

State 968:
## Known stack suffix:
## LPAR eexp
## LR(1) items:
eexp -> LPAR eexp . RPAR [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . ADDOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 926
-- On RPAR shift to state 969
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On ADDOP shift to state 935
## Reductions:

State 969:
## Known stack suffix:
## LPAR eexp RPAR
## LR(1) items:
eexp -> LPAR eexp RPAR . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> LPAR eexp RPAR

State 970:
## Known stack suffix:
## MUL LSQUARE eexps
## LR(1) items:
eexp -> MUL LSQUARE eexps . RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 971
## Reductions:

State 971:
## Known stack suffix:
## MUL LSQUARE eexps RSQUARE
## LR(1) items:
eexp -> MUL LSQUARE eexps RSQUARE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> MUL LSQUARE eexps RSQUARE

State 972:
## Known stack suffix:
## MUL eexp
## LR(1) items:
eexp -> MUL eexp . eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 973
-- On defined_var shift to state 964
## Reductions:

State 973:
## Known stack suffix:
## MUL eexp eexp_no_unary
## LR(1) items:
eexp -> MUL eexp eexp_no_unary . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> MUL eexp eexp_no_unary

State 974:
## Known stack suffix:
## NEG eexp
## LR(1) items:
eexp -> NEG eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> NEG eexp

State 975:
## Known stack suffix:
## SQ eexp
## LR(1) items:
eexp -> SQ eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> SQ eexp

State 976:
## Known stack suffix:
## SUB eexp
## LR(1) items:
eexp -> SUB eexp . eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 977
-- On defined_var shift to state 964
## Reductions:

State 977:
## Known stack suffix:
## SUB eexp eexp_no_unary
## LR(1) items:
eexp -> SUB eexp eexp_no_unary . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> SUB eexp eexp_no_unary

State 978:
## Known stack suffix:
## SUBOP eexp
## LR(1) items:
eexp -> SUBOP eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> SUBOP eexp

State 979:
## Known stack suffix:
## ULIMBS const LSQUARE eexps
## LR(1) items:
eexp -> ULIMBS const LSQUARE eexps . RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On RSQUARE shift to state 980
## Reductions:

State 980:
## Known stack suffix:
## ULIMBS const LSQUARE eexps RSQUARE
## LR(1) items:
eexp -> ULIMBS const LSQUARE eexps RSQUARE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp -> ULIMBS const LSQUARE eexps RSQUARE

State 981:
## Known stack suffix:
## TRUE
## LR(1) items:
bexp -> TRUE . [ SEMICOLON RBRAC ]
ebexp_atomic -> TRUE . [ error VBAR LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production bexp -> TRUE
-- On error VBAR LANDOP
--   reduce production ebexp_atomic -> TRUE

State 982:
## Known stack suffix:
## LPAR
## LR(1) items:
ebexp_atomic -> LPAR . ebexp RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eexp -> LPAR . eexp RPAR [ SUBOP POWOP MULOP EQOP ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 983
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 984
-- On LANDOP shift to state 985
-- On ID shift to state 30
-- On EQMOD shift to state 1112
-- On EQ shift to state 1119
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1122
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1163
-- On ebexp_atomic shift to state 1164
-- On ebexp shift to state 1177
-- On defined_var shift to state 932
## Reductions:

State 983:
## Known stack suffix:
## TRUE
## LR(1) items:
ebexp_atomic -> TRUE . [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production ebexp_atomic -> TRUE

State 984:
## Known stack suffix:
## LPAR
## LR(1) items:
ebexp_atomic -> LPAR . ebexp RPAR [ SEMICOLON RPAR PROVE LANDOP ]
eexp -> LPAR . eexp RPAR [ SUBOP RPAR POWOP MULOP EQOP ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 983
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 984
-- On LANDOP shift to state 985
-- On ID shift to state 30
-- On EQMOD shift to state 1112
-- On EQ shift to state 1119
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1122
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1163
-- On ebexp_atomic shift to state 1164
-- On ebexp shift to state 1175
-- On defined_var shift to state 932
## Reductions:

State 985:
## Known stack suffix:
## LANDOP
## LR(1) items:
ebexp_atomic -> LANDOP . LSQUARE ebexps RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On LSQUARE shift to state 986
## Reductions:

State 986:
## Known stack suffix:
## LANDOP LSQUARE
## LR(1) items:
ebexp_atomic -> LANDOP LSQUARE . ebexps RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 987
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexps shift to state 1173
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1107
-- On defined_var shift to state 932
## Reductions:

State 987:
## Known stack suffix:
## TRUE
## LR(1) items:
ebexp_atomic -> TRUE . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production ebexp_atomic -> TRUE

State 988:
## Known stack suffix:
## LANDOP
## LR(1) items:
ebexp_atomic -> LANDOP . LSQUARE ebexps RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On LSQUARE shift to state 989
## Reductions:

State 989:
## Known stack suffix:
## LANDOP LSQUARE
## LR(1) items:
ebexp_atomic -> LANDOP LSQUARE . ebexps RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 987
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexps shift to state 1171
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1107
-- On defined_var shift to state 932
## Reductions:

State 990:
## Known stack suffix:
## EQMOD
## LR(1) items:
ebexp_atomic -> EQMOD . eexp eexp_no_unary eexp_no_unary [ error VBAR RSQUARE PROVE LANDOP COMMA ]
ebexp_atomic -> EQMOD . eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 991
-- On defined_var shift to state 932
## Reductions:

State 991:
## Known stack suffix:
## EQMOD eexp
## LR(1) items:
ebexp_atomic -> EQMOD eexp . eexp_no_unary eexp_no_unary [ error VBAR RSQUARE PROVE LANDOP COMMA ]
ebexp_atomic -> EQMOD eexp . eexp_no_unary LSQUARE eexp_no_unarys RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 992
-- On defined_var shift to state 964
## Reductions:

State 992:
## Known stack suffix:
## EQMOD eexp eexp_no_unary
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary . eexp_no_unary [ error VBAR RSQUARE PROVE LANDOP COMMA ]
ebexp_atomic -> EQMOD eexp eexp_no_unary . LSQUARE eexp_no_unarys RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 993
-- On UINT shift to state 2
-- On SUBOP shift to state 998
-- On SUB shift to state 1000
-- On SQ shift to state 1002
-- On SINT shift to state 3
-- On POWOP shift to state 1055
-- On NUM shift to state 416
-- On NEG shift to state 1011
-- On MULOP shift to state 1057
-- On MUL shift to state 1019
-- On LSQUARE shift to state 1059
-- On LPAR shift to state 1024
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADDOP shift to state 1065
-- On ADD shift to state 1027
-- On typ shift to state 606
-- On simple_const shift to state 1032
-- On eexp_no_unary shift to state 1067
-- On defined_var shift to state 1034
## Reductions:

State 993:
## Known stack suffix:
## ULIMBS
## LR(1) items:
eexp_no_unary -> ULIMBS . const LSQUARE eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 994
## Reductions:

State 994:
## Known stack suffix:
## ULIMBS const
## LR(1) items:
eexp_no_unary -> ULIMBS const . LSQUARE eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On LSQUARE shift to state 995
## Reductions:

State 995:
## Known stack suffix:
## ULIMBS const LSQUARE
## LR(1) items:
eexp_no_unary -> ULIMBS const LSQUARE . eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 996
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 996:
## Known stack suffix:
## ULIMBS const LSQUARE eexps
## LR(1) items:
eexp_no_unary -> ULIMBS const LSQUARE eexps . RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On RSQUARE shift to state 997
## Reductions:

State 997:
## Known stack suffix:
## ULIMBS const LSQUARE eexps RSQUARE
## LR(1) items:
eexp_no_unary -> ULIMBS const LSQUARE eexps RSQUARE . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> ULIMBS const LSQUARE eexps RSQUARE

State 998:
## Known stack suffix:
## eexp_no_unary SUBOP
## LR(1) items:
eexp_no_unary -> eexp_no_unary SUBOP . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 999
-- On defined_var shift to state 932
## Reductions:

State 999:
## Known stack suffix:
## eexp_no_unary SUBOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary SUBOP eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On POWOP shift to state 928
-- On MULOP shift to state 930
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE NUM NEG MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> eexp_no_unary SUBOP eexp

State 1000:
## Known stack suffix:
## SUB
## LR(1) items:
eexp_no_unary -> SUB . eexp eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1001
-- On defined_var shift to state 932
## Reductions:

State 1001:
## Known stack suffix:
## SUB eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> SUB eexp . eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 993
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 1000
-- On SQ shift to state 1002
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 416
-- On NEG shift to state 1011
-- On MULOP shift to state 930
-- On MUL shift to state 1019
-- On LPAR shift to state 1024
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 1027
-- On typ shift to state 606
-- On simple_const shift to state 1032
-- On eexp_no_unary shift to state 1054
-- On defined_var shift to state 1034
## Reductions:

State 1002:
## Known stack suffix:
## SQ
## LR(1) items:
eexp_no_unary -> SQ . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1053
-- On defined_var shift to state 1048
## Reductions:

State 1003:
## Known stack suffix:
## ULIMBS
## LR(1) items:
eexp -> ULIMBS . const LSQUARE eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1004
## Reductions:

State 1004:
## Known stack suffix:
## ULIMBS const
## LR(1) items:
eexp -> ULIMBS const . LSQUARE eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On LSQUARE shift to state 1005
## Reductions:

State 1005:
## Known stack suffix:
## ULIMBS const LSQUARE
## LR(1) items:
eexp -> ULIMBS const LSQUARE . eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 1006
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 1006:
## Known stack suffix:
## ULIMBS const LSQUARE eexps
## LR(1) items:
eexp -> ULIMBS const LSQUARE eexps . RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On RSQUARE shift to state 1007
## Reductions:

State 1007:
## Known stack suffix:
## ULIMBS const LSQUARE eexps RSQUARE
## LR(1) items:
eexp -> ULIMBS const LSQUARE eexps RSQUARE . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> ULIMBS const LSQUARE eexps RSQUARE

State 1008:
## Known stack suffix:
## SUBOP
## LR(1) items:
eexp -> SUBOP . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1052
-- On defined_var shift to state 1048
## Reductions:

State 1009:
## Known stack suffix:
## SUB
## LR(1) items:
eexp -> SUB . eexp eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1010
-- On defined_var shift to state 932
## Reductions:

State 1010:
## Known stack suffix:
## SUB eexp
## LR(1) items:
eexp -> SUB eexp . eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 993
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 1000
-- On SQ shift to state 1002
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 416
-- On NEG shift to state 1011
-- On MULOP shift to state 930
-- On MUL shift to state 1019
-- On LPAR shift to state 1024
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 1027
-- On typ shift to state 606
-- On simple_const shift to state 1032
-- On eexp_no_unary shift to state 1051
-- On defined_var shift to state 1034
## Reductions:

State 1011:
## Known stack suffix:
## NEG
## LR(1) items:
eexp_no_unary -> NEG . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1050
-- On defined_var shift to state 1048
## Reductions:

State 1012:
## Known stack suffix:
## SQ
## LR(1) items:
eexp -> SQ . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1049
-- On defined_var shift to state 1048
## Reductions:

State 1013:
## Known stack suffix:
## NEG
## LR(1) items:
eexp -> NEG . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1047
-- On defined_var shift to state 1048
## Reductions:

State 1014:
## Known stack suffix:
## MUL
## LR(1) items:
eexp -> MUL . eexp eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> MUL . LSQUARE eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 1015
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1018
-- On defined_var shift to state 932
## Reductions:

State 1015:
## Known stack suffix:
## MUL LSQUARE
## LR(1) items:
eexp -> MUL LSQUARE . eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 1016
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 1016:
## Known stack suffix:
## MUL LSQUARE eexps
## LR(1) items:
eexp -> MUL LSQUARE eexps . RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On RSQUARE shift to state 1017
## Reductions:

State 1017:
## Known stack suffix:
## MUL LSQUARE eexps RSQUARE
## LR(1) items:
eexp -> MUL LSQUARE eexps RSQUARE . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> MUL LSQUARE eexps RSQUARE

State 1018:
## Known stack suffix:
## MUL eexp
## LR(1) items:
eexp -> MUL eexp . eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 993
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 1000
-- On SQ shift to state 1002
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 416
-- On NEG shift to state 1011
-- On MULOP shift to state 930
-- On MUL shift to state 1019
-- On LPAR shift to state 1024
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 1027
-- On typ shift to state 606
-- On simple_const shift to state 1032
-- On eexp_no_unary shift to state 1036
-- On defined_var shift to state 1034
## Reductions:

State 1019:
## Known stack suffix:
## MUL
## LR(1) items:
eexp_no_unary -> MUL . eexp eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> MUL . LSQUARE eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 1020
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1023
-- On defined_var shift to state 932
## Reductions:

State 1020:
## Known stack suffix:
## MUL LSQUARE
## LR(1) items:
eexp_no_unary -> MUL LSQUARE . eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 1021
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 1021:
## Known stack suffix:
## MUL LSQUARE eexps
## LR(1) items:
eexp_no_unary -> MUL LSQUARE eexps . RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On RSQUARE shift to state 1022
## Reductions:

State 1022:
## Known stack suffix:
## MUL LSQUARE eexps RSQUARE
## LR(1) items:
eexp_no_unary -> MUL LSQUARE eexps RSQUARE . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> MUL LSQUARE eexps RSQUARE

State 1023:
## Known stack suffix:
## MUL eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> MUL eexp . eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 993
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 1000
-- On SQ shift to state 1002
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 416
-- On NEG shift to state 1011
-- On MULOP shift to state 930
-- On MUL shift to state 1019
-- On LPAR shift to state 1024
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 1027
-- On typ shift to state 606
-- On simple_const shift to state 1032
-- On eexp_no_unary shift to state 1035
-- On defined_var shift to state 1034
## Reductions:

State 1024:
## Known stack suffix:
## LPAR
## LR(1) items:
eexp_no_unary -> LPAR . eexp RPAR [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1025
-- On defined_var shift to state 932
## Reductions:

State 1025:
## Known stack suffix:
## LPAR eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp_no_unary -> LPAR eexp . RPAR [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On SUBOP shift to state 926
-- On RPAR shift to state 1026
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On ADDOP shift to state 935
## Reductions:

State 1026:
## Known stack suffix:
## LPAR eexp RPAR
## LR(1) items:
eexp_no_unary -> LPAR eexp RPAR . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> LPAR eexp RPAR

State 1027:
## Known stack suffix:
## ADD
## LR(1) items:
eexp_no_unary -> ADD . eexp eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> ADD . LSQUARE eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 1028
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1031
-- On defined_var shift to state 932
## Reductions:

State 1028:
## Known stack suffix:
## ADD LSQUARE
## LR(1) items:
eexp_no_unary -> ADD LSQUARE . eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 1029
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 1029:
## Known stack suffix:
## ADD LSQUARE eexps
## LR(1) items:
eexp_no_unary -> ADD LSQUARE eexps . RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On RSQUARE shift to state 1030
## Reductions:

State 1030:
## Known stack suffix:
## ADD LSQUARE eexps RSQUARE
## LR(1) items:
eexp_no_unary -> ADD LSQUARE eexps RSQUARE . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> ADD LSQUARE eexps RSQUARE

State 1031:
## Known stack suffix:
## ADD eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> ADD eexp . eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 993
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 1000
-- On SQ shift to state 1002
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 416
-- On NEG shift to state 1011
-- On MULOP shift to state 930
-- On MUL shift to state 1019
-- On LPAR shift to state 1024
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 1027
-- On typ shift to state 606
-- On simple_const shift to state 1032
-- On eexp_no_unary shift to state 1033
-- On defined_var shift to state 1034
## Reductions:

State 1032:
## Known stack suffix:
## simple_const
## LR(1) items:
eexp_no_unary -> simple_const . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> simple_const

State 1033:
## Known stack suffix:
## ADD eexp eexp_no_unary
## LR(1) items:
eexp_no_unary -> ADD eexp eexp_no_unary . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> ADD eexp eexp_no_unary

State 1034:
## Known stack suffix:
## defined_var
## LR(1) items:
eexp_no_unary -> defined_var . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> defined_var

State 1035:
## Known stack suffix:
## MUL eexp eexp_no_unary
## LR(1) items:
eexp_no_unary -> MUL eexp eexp_no_unary . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> MUL eexp eexp_no_unary

State 1036:
## Known stack suffix:
## MUL eexp eexp_no_unary
## LR(1) items:
eexp -> MUL eexp eexp_no_unary . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> MUL eexp eexp_no_unary

State 1037:
## Known stack suffix:
## LPAR
## LR(1) items:
eexp -> LPAR . eexp RPAR [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1038
-- On defined_var shift to state 932
## Reductions:

State 1038:
## Known stack suffix:
## LPAR eexp
## LR(1) items:
eexp -> LPAR eexp . RPAR [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . ADDOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP RPAR POWOP MULOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 926
-- On RPAR shift to state 1039
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On ADDOP shift to state 935
## Reductions:

State 1039:
## Known stack suffix:
## LPAR eexp RPAR
## LR(1) items:
eexp -> LPAR eexp RPAR . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> LPAR eexp RPAR

State 1040:
## Known stack suffix:
## ADD
## LR(1) items:
eexp -> ADD . eexp eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> ADD . LSQUARE eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 1041
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1044
-- On defined_var shift to state 932
## Reductions:

State 1041:
## Known stack suffix:
## ADD LSQUARE
## LR(1) items:
eexp -> ADD LSQUARE . eexps RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 1042
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 1042:
## Known stack suffix:
## ADD LSQUARE eexps
## LR(1) items:
eexp -> ADD LSQUARE eexps . RSQUARE [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On RSQUARE shift to state 1043
## Reductions:

State 1043:
## Known stack suffix:
## ADD LSQUARE eexps RSQUARE
## LR(1) items:
eexp -> ADD LSQUARE eexps RSQUARE . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> ADD LSQUARE eexps RSQUARE

State 1044:
## Known stack suffix:
## ADD eexp
## LR(1) items:
eexp -> ADD eexp . eexp_no_unary [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 993
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 1000
-- On SQ shift to state 1002
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 416
-- On NEG shift to state 1011
-- On MULOP shift to state 930
-- On MUL shift to state 1019
-- On LPAR shift to state 1024
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 1027
-- On typ shift to state 606
-- On simple_const shift to state 1032
-- On eexp_no_unary shift to state 1045
-- On defined_var shift to state 1034
## Reductions:

State 1045:
## Known stack suffix:
## ADD eexp eexp_no_unary
## LR(1) items:
eexp -> ADD eexp eexp_no_unary . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> ADD eexp eexp_no_unary

State 1046:
## Known stack suffix:
## simple_const
## LR(1) items:
eexp -> simple_const . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> simple_const

State 1047:
## Known stack suffix:
## NEG eexp
## LR(1) items:
eexp -> NEG eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> NEG eexp

State 1048:
## Known stack suffix:
## defined_var
## LR(1) items:
eexp -> defined_var . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> defined_var

State 1049:
## Known stack suffix:
## SQ eexp
## LR(1) items:
eexp -> SQ eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> SQ eexp

State 1050:
## Known stack suffix:
## NEG eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> NEG eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> NEG eexp

State 1051:
## Known stack suffix:
## SUB eexp eexp_no_unary
## LR(1) items:
eexp -> SUB eexp eexp_no_unary . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> SUB eexp eexp_no_unary

State 1052:
## Known stack suffix:
## SUBOP eexp
## LR(1) items:
eexp -> SUBOP eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> SUBOP eexp

State 1053:
## Known stack suffix:
## SQ eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> SQ eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> SQ eexp

State 1054:
## Known stack suffix:
## SUB eexp eexp_no_unary
## LR(1) items:
eexp_no_unary -> SUB eexp eexp_no_unary . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> SUB eexp eexp_no_unary

State 1055:
## Known stack suffix:
## eexp_no_unary POWOP
## LR(1) items:
eexp_no_unary -> eexp_no_unary POWOP . const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1056
## Reductions:

State 1056:
## Known stack suffix:
## eexp_no_unary POWOP const
## LR(1) items:
eexp_no_unary -> eexp_no_unary POWOP const . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> eexp_no_unary POWOP const

State 1057:
## Known stack suffix:
## eexp_no_unary MULOP
## LR(1) items:
eexp_no_unary -> eexp_no_unary MULOP . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1058
-- On defined_var shift to state 932
## Reductions:

State 1058:
## Known stack suffix:
## eexp_no_unary MULOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary MULOP eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On POWOP shift to state 928
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> eexp_no_unary MULOP eexp

State 1059:
## Known stack suffix:
## EQMOD eexp eexp_no_unary LSQUARE
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary LSQUARE . eexp_no_unarys RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unarys shift to state 1060
-- On eexp_no_unary shift to state 1062
-- On defined_var shift to state 964
## Reductions:

State 1060:
## Known stack suffix:
## EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys . RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On RSQUARE shift to state 1061
## Reductions:

State 1061:
## Known stack suffix:
## EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production ebexp_atomic -> EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE

State 1062:
## Known stack suffix:
## eexp_no_unary
## LR(1) items:
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ SUBOP RSQUARE POWOP MULOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ SUBOP RSQUARE POWOP MULOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ SUBOP RSQUARE POWOP MULOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ SUBOP RSQUARE POWOP MULOP COMMA ADDOP ]
eexp_no_unarys -> eexp_no_unary . COMMA eexp_no_unarys [ RSQUARE ]
eexp_no_unarys -> eexp_no_unary . [ RSQUARE ]
## Transitions:
-- On SUBOP shift to state 998
-- On POWOP shift to state 1055
-- On MULOP shift to state 1057
-- On COMMA shift to state 1063
-- On ADDOP shift to state 1065
## Reductions:
-- On RSQUARE
--   reduce production eexp_no_unarys -> eexp_no_unary

State 1063:
## Known stack suffix:
## eexp_no_unary COMMA
## LR(1) items:
eexp_no_unarys -> eexp_no_unary COMMA . eexp_no_unarys [ RSQUARE ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unarys shift to state 1064
-- On eexp_no_unary shift to state 1062
-- On defined_var shift to state 964
## Reductions:

State 1064:
## Known stack suffix:
## eexp_no_unary COMMA eexp_no_unarys
## LR(1) items:
eexp_no_unarys -> eexp_no_unary COMMA eexp_no_unarys . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production eexp_no_unarys -> eexp_no_unary COMMA eexp_no_unarys

State 1065:
## Known stack suffix:
## eexp_no_unary ADDOP
## LR(1) items:
eexp_no_unary -> eexp_no_unary ADDOP . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1066
-- On defined_var shift to state 932
## Reductions:

State 1066:
## Known stack suffix:
## eexp_no_unary ADDOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary ADDOP eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE POWOP NUM NEG MULOP MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD ]
## Transitions:
-- On POWOP shift to state 928
-- On MULOP shift to state 930
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT SEMICOLON RSQUARE RPAR PROVE NUM NEG MUL LSQUARE LPAR LANDOP ID EQOP EQMOD EQ DEREFOP COMMA BIT AND ADDOP ADD
--   reduce production eexp_no_unary -> eexp_no_unary ADDOP eexp

State 1067:
## Known stack suffix:
## EQMOD eexp eexp_no_unary eexp_no_unary
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary eexp_no_unary . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LANDOP COMMA ADDOP ]
## Transitions:
-- On SUBOP shift to state 1068
-- On POWOP shift to state 1074
-- On MULOP shift to state 1076
-- On ADDOP shift to state 1078
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production ebexp_atomic -> EQMOD eexp eexp_no_unary eexp_no_unary

State 1068:
## Known stack suffix:
## eexp_no_unary SUBOP
## LR(1) items:
eexp_no_unary -> eexp_no_unary SUBOP . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1069
-- On defined_var shift to state 1048
## Reductions:

State 1069:
## Known stack suffix:
## eexp_no_unary SUBOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary SUBOP eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On POWOP shift to state 1070
-- On MULOP shift to state 1072
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> eexp_no_unary SUBOP eexp

State 1070:
## Known stack suffix:
## eexp POWOP
## LR(1) items:
eexp -> eexp POWOP . const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On NUM shift to state 416
-- On LPAR shift to state 427
-- On DEREFOP shift to state 424
-- On simple_const shift to state 430
-- On const shift to state 1071
## Reductions:

State 1071:
## Known stack suffix:
## eexp POWOP const
## LR(1) items:
eexp -> eexp POWOP const . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> eexp POWOP const

State 1072:
## Known stack suffix:
## eexp MULOP
## LR(1) items:
eexp -> eexp MULOP . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1073
-- On defined_var shift to state 1048
## Reductions:

State 1073:
## Known stack suffix:
## eexp MULOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp MULOP eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On POWOP shift to state 1070
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> eexp MULOP eexp

State 1074:
## Known stack suffix:
## eexp_no_unary POWOP
## LR(1) items:
eexp_no_unary -> eexp_no_unary POWOP . const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On NUM shift to state 416
-- On LPAR shift to state 427
-- On DEREFOP shift to state 424
-- On simple_const shift to state 430
-- On const shift to state 1075
## Reductions:

State 1075:
## Known stack suffix:
## eexp_no_unary POWOP const
## LR(1) items:
eexp_no_unary -> eexp_no_unary POWOP const . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> eexp_no_unary POWOP const

State 1076:
## Known stack suffix:
## eexp_no_unary MULOP
## LR(1) items:
eexp_no_unary -> eexp_no_unary MULOP . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1077
-- On defined_var shift to state 1048
## Reductions:

State 1077:
## Known stack suffix:
## eexp_no_unary MULOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary MULOP eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On POWOP shift to state 1070
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE MULOP LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> eexp_no_unary MULOP eexp

State 1078:
## Known stack suffix:
## eexp_no_unary ADDOP
## LR(1) items:
eexp_no_unary -> eexp_no_unary ADDOP . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1079
-- On defined_var shift to state 1048
## Reductions:

State 1079:
## Known stack suffix:
## eexp_no_unary ADDOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary ADDOP eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On POWOP shift to state 1070
-- On MULOP shift to state 1072
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE LPAR LANDOP COMMA ADDOP
--   reduce production eexp_no_unary -> eexp_no_unary ADDOP eexp

State 1080:
## Known stack suffix:
## EQ
## LR(1) items:
ebexp_atomic -> EQ . eexp eexp_no_unary [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1081
-- On defined_var shift to state 932
## Reductions:

State 1081:
## Known stack suffix:
## EQ eexp
## LR(1) items:
ebexp_atomic -> EQ eexp . eexp_no_unary [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 993
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 1000
-- On SQ shift to state 1002
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 416
-- On NEG shift to state 1011
-- On MULOP shift to state 930
-- On MUL shift to state 1019
-- On LPAR shift to state 1024
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 1027
-- On typ shift to state 606
-- On simple_const shift to state 1032
-- On eexp_no_unary shift to state 1082
-- On defined_var shift to state 1034
## Reductions:

State 1082:
## Known stack suffix:
## EQ eexp eexp_no_unary
## LR(1) items:
ebexp_atomic -> EQ eexp eexp_no_unary . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LANDOP COMMA ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LANDOP COMMA ADDOP ]
## Transitions:
-- On SUBOP shift to state 1068
-- On POWOP shift to state 1074
-- On MULOP shift to state 1076
-- On ADDOP shift to state 1078
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production ebexp_atomic -> EQ eexp eexp_no_unary

State 1083:
## Known stack suffix:
## AND
## LR(1) items:
ebexp_atomic -> AND . ebexp_atomic_without_eqmod ebexp_atomic [ error VBAR RSQUARE PROVE LANDOP COMMA ]
ebexp_atomic -> AND . LSQUARE ebexps RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 1084
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 1085
-- On LPAR shift to state 1111
-- On LANDOP shift to state 1126
-- On ID shift to state 30
-- On EQMOD shift to state 1130
-- On EQ shift to state 1137
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1140
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1144
-- On ebexp_atomic_without_eqmod shift to state 1169
-- On defined_var shift to state 932
## Reductions:

State 1084:
## Known stack suffix:
## TRUE
## LR(1) items:
ebexp_atomic_without_eqmod -> TRUE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD
--   reduce production ebexp_atomic_without_eqmod -> TRUE

State 1085:
## Known stack suffix:
## AND LSQUARE
## LR(1) items:
ebexp_atomic -> AND LSQUARE . ebexps RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 987
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexps shift to state 1102
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1107
-- On defined_var shift to state 932
## Reductions:

State 1086:
## Known stack suffix:
## eexp
## LR(1) items:
ebexp_atomic -> eexp . EQOP eexp eq_suffix [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eexp -> eexp . ADDOP eexp [ SUBOP POWOP MULOP EQOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP POWOP MULOP EQOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP POWOP MULOP EQOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP POWOP MULOP EQOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 926
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On EQOP shift to state 1087
-- On ADDOP shift to state 935
## Reductions:

State 1087:
## Known stack suffix:
## eexp EQOP
## LR(1) items:
ebexp_atomic -> eexp EQOP . eexp eq_suffix [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1088
-- On defined_var shift to state 1048
## Reductions:

State 1088:
## Known stack suffix:
## eexp EQOP eexp
## LR(1) items:
ebexp_atomic -> eexp EQOP eexp . eq_suffix [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On SUBOP shift to state 1089
-- On POWOP shift to state 1070
-- On MULOP shift to state 1072
-- On LPAR shift to state 1091
-- On ADDOP shift to state 1099
-- On eq_suffix shift to state 1101
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production eq_suffix ->

State 1089:
## Known stack suffix:
## eexp SUBOP
## LR(1) items:
eexp -> eexp SUBOP . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1090
-- On defined_var shift to state 1048
## Reductions:

State 1090:
## Known stack suffix:
## eexp SUBOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp SUBOP eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On POWOP shift to state 1070
-- On MULOP shift to state 1072
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> eexp SUBOP eexp

State 1091:
## Known stack suffix:
## LPAR
## LR(1) items:
eq_suffix -> LPAR . MOD eexp RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eq_suffix -> LPAR . MOD LSQUARE eexps RSQUARE RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On MOD shift to state 1092
## Reductions:

State 1092:
## Known stack suffix:
## LPAR MOD
## LR(1) items:
eq_suffix -> LPAR MOD . eexp RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
eq_suffix -> LPAR MOD . LSQUARE eexps RSQUARE RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 1093
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1097
-- On defined_var shift to state 932
## Reductions:

State 1093:
## Known stack suffix:
## LPAR MOD LSQUARE
## LR(1) items:
eq_suffix -> LPAR MOD LSQUARE . eexps RSQUARE RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 1094
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 1094:
## Known stack suffix:
## LPAR MOD LSQUARE eexps
## LR(1) items:
eq_suffix -> LPAR MOD LSQUARE eexps . RSQUARE RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On RSQUARE shift to state 1095
## Reductions:

State 1095:
## Known stack suffix:
## LPAR MOD LSQUARE eexps RSQUARE
## LR(1) items:
eq_suffix -> LPAR MOD LSQUARE eexps RSQUARE . RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On RPAR shift to state 1096
## Reductions:

State 1096:
## Known stack suffix:
## LPAR MOD LSQUARE eexps RSQUARE RPAR
## LR(1) items:
eq_suffix -> LPAR MOD LSQUARE eexps RSQUARE RPAR . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production eq_suffix -> LPAR MOD LSQUARE eexps RSQUARE RPAR

State 1097:
## Known stack suffix:
## LPAR MOD eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP RPAR POWOP MULOP ADDOP ]
eq_suffix -> LPAR MOD eexp . RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On SUBOP shift to state 926
-- On RPAR shift to state 1098
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On ADDOP shift to state 935
## Reductions:

State 1098:
## Known stack suffix:
## LPAR MOD eexp RPAR
## LR(1) items:
eq_suffix -> LPAR MOD eexp RPAR . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production eq_suffix -> LPAR MOD eexp RPAR

State 1099:
## Known stack suffix:
## eexp ADDOP
## LR(1) items:
eexp -> eexp ADDOP . eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On ULIMBS shift to state 1003
-- On UINT shift to state 2
-- On SUBOP shift to state 1008
-- On SUB shift to state 1009
-- On SQ shift to state 1012
-- On SINT shift to state 3
-- On NUM shift to state 416
-- On NEG shift to state 1013
-- On MUL shift to state 1014
-- On LPAR shift to state 1037
-- On ID shift to state 589
-- On DEREFOP shift to state 424
-- On BIT shift to state 7
-- On ADD shift to state 1040
-- On typ shift to state 606
-- On simple_const shift to state 1046
-- On eexp shift to state 1100
-- On defined_var shift to state 1048
## Reductions:

State 1100:
## Known stack suffix:
## eexp ADDOP eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp ADDOP eexp . [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . SUBOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . MULOP eexp [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
eexp -> eexp . POWOP const [ error VBAR SUBOP RSQUARE PROVE POWOP MULOP LPAR LANDOP COMMA ADDOP ]
## Transitions:
-- On POWOP shift to state 1070
-- On MULOP shift to state 1072
## Reductions:
-- On error VBAR SUBOP RSQUARE PROVE LPAR LANDOP COMMA ADDOP
--   reduce production eexp -> eexp ADDOP eexp

State 1101:
## Known stack suffix:
## eexp EQOP eexp eq_suffix
## LR(1) items:
ebexp_atomic -> eexp EQOP eexp eq_suffix . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production ebexp_atomic -> eexp EQOP eexp eq_suffix

State 1102:
## Known stack suffix:
## AND LSQUARE ebexps
## LR(1) items:
ebexp_atomic -> AND LSQUARE ebexps . RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On RSQUARE shift to state 1103
## Reductions:

State 1103:
## Known stack suffix:
## AND LSQUARE ebexps RSQUARE
## LR(1) items:
ebexp_atomic -> AND LSQUARE ebexps RSQUARE . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production ebexp_atomic -> AND LSQUARE ebexps RSQUARE

State 1104:
## Known stack suffix:
## ebexp_atomic
## LR(1) items:
ebexp -> ebexp_atomic . LANDOP ebexp [ error VBAR RSQUARE PROVE COMMA ]
ebexp -> ebexp_atomic . [ error VBAR RSQUARE PROVE COMMA ]
## Transitions:
-- On LANDOP shift to state 1105
## Reductions:
-- On error VBAR RSQUARE PROVE COMMA
--   reduce production ebexp -> ebexp_atomic

State 1105:
## Known stack suffix:
## ebexp_atomic LANDOP
## LR(1) items:
ebexp -> ebexp_atomic LANDOP . ebexp [ error VBAR RSQUARE PROVE COMMA ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 987
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1106
-- On defined_var shift to state 932
## Reductions:

State 1106:
## Known stack suffix:
## ebexp_atomic LANDOP ebexp
## LR(1) items:
ebexp -> ebexp_atomic LANDOP ebexp . [ error VBAR RSQUARE PROVE COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE COMMA
--   reduce production ebexp -> ebexp_atomic LANDOP ebexp

State 1107:
## Known stack suffix:
## ebexp
## LR(1) items:
ebexps -> ebexp . COMMA ebexps [ RSQUARE ]
ebexps -> ebexp . [ RSQUARE ]
ebexps -> ebexp . error [ RSQUARE ]
## Transitions:
-- On error shift to state 1108
-- On COMMA shift to state 1109
## Reductions:
-- On RSQUARE
--   reduce production ebexps -> ebexp

State 1108:
## Known stack suffix:
## ebexp error
## LR(1) items:
ebexps -> ebexp error . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production ebexps -> ebexp error

State 1109:
## Known stack suffix:
## ebexp COMMA
## LR(1) items:
ebexps -> ebexp COMMA . ebexps [ RSQUARE ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 987
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexps shift to state 1110
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1107
-- On defined_var shift to state 932
## Reductions:

State 1110:
## Known stack suffix:
## ebexp COMMA ebexps
## LR(1) items:
ebexps -> ebexp COMMA ebexps . [ RSQUARE ]
## Transitions:
## Reductions:
-- On RSQUARE
--   reduce production ebexps -> ebexp COMMA ebexps

State 1111:
## Known stack suffix:
## LPAR
## LR(1) items:
ebexp_atomic_without_eqmod -> LPAR . ebexp RPAR [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
eexp -> LPAR . eexp RPAR [ SUBOP POWOP MULOP EQOP ADDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 983
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 984
-- On LANDOP shift to state 985
-- On ID shift to state 30
-- On EQMOD shift to state 1112
-- On EQ shift to state 1119
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1122
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1163
-- On ebexp_atomic shift to state 1164
-- On ebexp shift to state 1167
-- On defined_var shift to state 932
## Reductions:

State 1112:
## Known stack suffix:
## EQMOD
## LR(1) items:
ebexp_atomic -> EQMOD . eexp eexp_no_unary eexp_no_unary [ SEMICOLON RPAR PROVE LANDOP ]
ebexp_atomic -> EQMOD . eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1113
-- On defined_var shift to state 932
## Reductions:

State 1113:
## Known stack suffix:
## EQMOD eexp
## LR(1) items:
ebexp_atomic -> EQMOD eexp . eexp_no_unary eexp_no_unary [ SEMICOLON RPAR PROVE LANDOP ]
ebexp_atomic -> EQMOD eexp . eexp_no_unary LSQUARE eexp_no_unarys RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 1114
-- On defined_var shift to state 964
## Reductions:

State 1114:
## Known stack suffix:
## EQMOD eexp eexp_no_unary
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary . eexp_no_unary [ SEMICOLON RPAR PROVE LANDOP ]
ebexp_atomic -> EQMOD eexp eexp_no_unary . LSQUARE eexp_no_unarys RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 998
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 1055
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 1057
-- On MUL shift to state 949
-- On LSQUARE shift to state 1115
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 1065
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 1118
-- On defined_var shift to state 964
## Reductions:

State 1115:
## Known stack suffix:
## EQMOD eexp eexp_no_unary LSQUARE
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary LSQUARE . eexp_no_unarys RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unarys shift to state 1116
-- On eexp_no_unary shift to state 1062
-- On defined_var shift to state 964
## Reductions:

State 1116:
## Known stack suffix:
## EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys . RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On RSQUARE shift to state 1117
## Reductions:

State 1117:
## Known stack suffix:
## EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE . [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production ebexp_atomic -> EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE

State 1118:
## Known stack suffix:
## EQMOD eexp eexp_no_unary eexp_no_unary
## LR(1) items:
ebexp_atomic -> EQMOD eexp eexp_no_unary eexp_no_unary . [ SEMICOLON RPAR PROVE LANDOP ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LANDOP ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LANDOP ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LANDOP ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 998
-- On POWOP shift to state 1055
-- On MULOP shift to state 1057
-- On ADDOP shift to state 1065
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production ebexp_atomic -> EQMOD eexp eexp_no_unary eexp_no_unary

State 1119:
## Known stack suffix:
## EQ
## LR(1) items:
ebexp_atomic -> EQ . eexp eexp_no_unary [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1120
-- On defined_var shift to state 932
## Reductions:

State 1120:
## Known stack suffix:
## EQ eexp
## LR(1) items:
ebexp_atomic -> EQ eexp . eexp_no_unary [ SEMICOLON RPAR PROVE LANDOP ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 1121
-- On defined_var shift to state 964
## Reductions:

State 1121:
## Known stack suffix:
## EQ eexp eexp_no_unary
## LR(1) items:
ebexp_atomic -> EQ eexp eexp_no_unary . [ SEMICOLON RPAR PROVE LANDOP ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LANDOP ADDOP ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LANDOP ADDOP ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LANDOP ADDOP ]
eexp_no_unary -> eexp_no_unary . POWOP const [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 998
-- On POWOP shift to state 1055
-- On MULOP shift to state 1057
-- On ADDOP shift to state 1065
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production ebexp_atomic -> EQ eexp eexp_no_unary

State 1122:
## Known stack suffix:
## AND
## LR(1) items:
ebexp_atomic -> AND . ebexp_atomic_without_eqmod ebexp_atomic [ SEMICOLON RPAR PROVE LANDOP ]
ebexp_atomic -> AND . LSQUARE ebexps RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 1084
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 1123
-- On LPAR shift to state 1111
-- On LANDOP shift to state 1126
-- On ID shift to state 30
-- On EQMOD shift to state 1130
-- On EQ shift to state 1137
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1140
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1144
-- On ebexp_atomic_without_eqmod shift to state 1149
-- On defined_var shift to state 932
## Reductions:

State 1123:
## Known stack suffix:
## AND LSQUARE
## LR(1) items:
ebexp_atomic -> AND LSQUARE . ebexps RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 987
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexps shift to state 1124
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1107
-- On defined_var shift to state 932
## Reductions:

State 1124:
## Known stack suffix:
## AND LSQUARE ebexps
## LR(1) items:
ebexp_atomic -> AND LSQUARE ebexps . RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On RSQUARE shift to state 1125
## Reductions:

State 1125:
## Known stack suffix:
## AND LSQUARE ebexps RSQUARE
## LR(1) items:
ebexp_atomic -> AND LSQUARE ebexps RSQUARE . [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production ebexp_atomic -> AND LSQUARE ebexps RSQUARE

State 1126:
## Known stack suffix:
## LANDOP
## LR(1) items:
ebexp_atomic_without_eqmod -> LANDOP . LSQUARE ebexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On LSQUARE shift to state 1127
## Reductions:

State 1127:
## Known stack suffix:
## LANDOP LSQUARE
## LR(1) items:
ebexp_atomic_without_eqmod -> LANDOP LSQUARE . ebexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 987
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexps shift to state 1128
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1107
-- On defined_var shift to state 932
## Reductions:

State 1128:
## Known stack suffix:
## LANDOP LSQUARE ebexps
## LR(1) items:
ebexp_atomic_without_eqmod -> LANDOP LSQUARE ebexps . RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On RSQUARE shift to state 1129
## Reductions:

State 1129:
## Known stack suffix:
## LANDOP LSQUARE ebexps RSQUARE
## LR(1) items:
ebexp_atomic_without_eqmod -> LANDOP LSQUARE ebexps RSQUARE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD
--   reduce production ebexp_atomic_without_eqmod -> LANDOP LSQUARE ebexps RSQUARE

State 1130:
## Known stack suffix:
## EQMOD
## LR(1) items:
ebexp_atomic_without_eqmod -> EQMOD . eexp eexp_no_unary eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
ebexp_atomic_without_eqmod -> EQMOD . eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1131
-- On defined_var shift to state 932
## Reductions:

State 1131:
## Known stack suffix:
## EQMOD eexp
## LR(1) items:
ebexp_atomic_without_eqmod -> EQMOD eexp . eexp_no_unary eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
ebexp_atomic_without_eqmod -> EQMOD eexp . eexp_no_unary LSQUARE eexp_no_unarys RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 1132
-- On defined_var shift to state 964
## Reductions:

State 1132:
## Known stack suffix:
## EQMOD eexp eexp_no_unary
## LR(1) items:
ebexp_atomic_without_eqmod -> EQMOD eexp eexp_no_unary . eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
ebexp_atomic_without_eqmod -> EQMOD eexp eexp_no_unary . LSQUARE eexp_no_unarys RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LSQUARE LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 998
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 1055
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 1057
-- On MUL shift to state 949
-- On LSQUARE shift to state 1133
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 1065
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 1136
-- On defined_var shift to state 964
## Reductions:

State 1133:
## Known stack suffix:
## EQMOD eexp eexp_no_unary LSQUARE
## LR(1) items:
ebexp_atomic_without_eqmod -> EQMOD eexp eexp_no_unary LSQUARE . eexp_no_unarys RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unarys shift to state 1134
-- On eexp_no_unary shift to state 1062
-- On defined_var shift to state 964
## Reductions:

State 1134:
## Known stack suffix:
## EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys
## LR(1) items:
ebexp_atomic_without_eqmod -> EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys . RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On RSQUARE shift to state 1135
## Reductions:

State 1135:
## Known stack suffix:
## EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE
## LR(1) items:
ebexp_atomic_without_eqmod -> EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD
--   reduce production ebexp_atomic_without_eqmod -> EQMOD eexp eexp_no_unary LSQUARE eexp_no_unarys RSQUARE

State 1136:
## Known stack suffix:
## EQMOD eexp eexp_no_unary eexp_no_unary
## LR(1) items:
ebexp_atomic_without_eqmod -> EQMOD eexp eexp_no_unary eexp_no_unary . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
## Transitions:
-- On POWOP shift to state 1055
-- On MULOP shift to state 1057
-- On ADDOP shift to state 1065
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD
--   reduce production ebexp_atomic_without_eqmod -> EQMOD eexp eexp_no_unary eexp_no_unary

State 1137:
## Known stack suffix:
## EQ
## LR(1) items:
ebexp_atomic_without_eqmod -> EQ . eexp eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1138
-- On defined_var shift to state 932
## Reductions:

State 1138:
## Known stack suffix:
## EQ eexp
## LR(1) items:
ebexp_atomic_without_eqmod -> EQ eexp . eexp_no_unary [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR ID DEREFOP BIT ADDOP ADD ]
## Transitions:
-- On ULIMBS shift to state 938
-- On UINT shift to state 2
-- On SUBOP shift to state 926
-- On SUB shift to state 943
-- On SQ shift to state 945
-- On SINT shift to state 3
-- On POWOP shift to state 928
-- On NUM shift to state 12
-- On NEG shift to state 947
-- On MULOP shift to state 930
-- On MUL shift to state 949
-- On LPAR shift to state 954
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADDOP shift to state 935
-- On ADD shift to state 957
-- On typ shift to state 437
-- On simple_const shift to state 962
-- On eexp_no_unary shift to state 1139
-- On defined_var shift to state 964
## Reductions:

State 1139:
## Known stack suffix:
## EQ eexp eexp_no_unary
## LR(1) items:
ebexp_atomic_without_eqmod -> EQ eexp eexp_no_unary . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
eexp_no_unary -> eexp_no_unary . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
eexp_no_unary -> eexp_no_unary . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
## Transitions:
-- On POWOP shift to state 1055
-- On MULOP shift to state 1057
-- On ADDOP shift to state 1065
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD
--   reduce production ebexp_atomic_without_eqmod -> EQ eexp eexp_no_unary

State 1140:
## Known stack suffix:
## AND
## LR(1) items:
ebexp_atomic_without_eqmod -> AND . ebexp_atomic_without_eqmod ebexp_atomic_without_eqmod [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
ebexp_atomic_without_eqmod -> AND . LSQUARE ebexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 1084
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 1141
-- On LPAR shift to state 1111
-- On LANDOP shift to state 1126
-- On ID shift to state 30
-- On EQMOD shift to state 1130
-- On EQ shift to state 1137
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1140
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1144
-- On ebexp_atomic_without_eqmod shift to state 1147
-- On defined_var shift to state 932
## Reductions:

State 1141:
## Known stack suffix:
## AND LSQUARE
## LR(1) items:
ebexp_atomic_without_eqmod -> AND LSQUARE . ebexps RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 987
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexps shift to state 1142
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1107
-- On defined_var shift to state 932
## Reductions:

State 1142:
## Known stack suffix:
## AND LSQUARE ebexps
## LR(1) items:
ebexp_atomic_without_eqmod -> AND LSQUARE ebexps . RSQUARE [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On RSQUARE shift to state 1143
## Reductions:

State 1143:
## Known stack suffix:
## AND LSQUARE ebexps RSQUARE
## LR(1) items:
ebexp_atomic_without_eqmod -> AND LSQUARE ebexps RSQUARE . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD
--   reduce production ebexp_atomic_without_eqmod -> AND LSQUARE ebexps RSQUARE

State 1144:
## Known stack suffix:
## eexp
## LR(1) items:
ebexp_atomic_without_eqmod -> eexp . EQOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
eexp -> eexp . ADDOP eexp [ SUBOP POWOP MULOP EQOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP POWOP MULOP EQOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP POWOP MULOP EQOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP POWOP MULOP EQOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 926
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On EQOP shift to state 1145
-- On ADDOP shift to state 935
## Reductions:

State 1145:
## Known stack suffix:
## eexp EQOP
## LR(1) items:
ebexp_atomic_without_eqmod -> eexp EQOP . eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1146
-- On defined_var shift to state 932
## Reductions:

State 1146:
## Known stack suffix:
## eexp EQOP eexp
## LR(1) items:
ebexp_atomic_without_eqmod -> eexp EQOP eexp . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
eexp -> eexp . ADDOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
eexp -> eexp . SUBOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
eexp -> eexp . MULOP eexp [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
eexp -> eexp . POWOP const [ ULIMBS UINT TRUE SUBOP SUB SQ SINT POWOP NUM NEG MULOP MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADDOP ADD ]
## Transitions:
-- On SUBOP shift to state 926
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On ADDOP shift to state 935
## Reductions:
-- On ULIMBS UINT TRUE SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD
--   reduce production ebexp_atomic_without_eqmod -> eexp EQOP eexp

State 1147:
## Known stack suffix:
## AND ebexp_atomic_without_eqmod
## LR(1) items:
ebexp_atomic_without_eqmod -> AND ebexp_atomic_without_eqmod . ebexp_atomic_without_eqmod [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 1084
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 1111
-- On LANDOP shift to state 1126
-- On ID shift to state 30
-- On EQMOD shift to state 1130
-- On EQ shift to state 1137
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1140
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1144
-- On ebexp_atomic_without_eqmod shift to state 1148
-- On defined_var shift to state 932
## Reductions:

State 1148:
## Known stack suffix:
## AND ebexp_atomic_without_eqmod ebexp_atomic_without_eqmod
## LR(1) items:
ebexp_atomic_without_eqmod -> AND ebexp_atomic_without_eqmod ebexp_atomic_without_eqmod . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD
--   reduce production ebexp_atomic_without_eqmod -> AND ebexp_atomic_without_eqmod ebexp_atomic_without_eqmod

State 1149:
## Known stack suffix:
## AND ebexp_atomic_without_eqmod
## LR(1) items:
ebexp_atomic -> AND ebexp_atomic_without_eqmod . ebexp_atomic [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 983
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 984
-- On LANDOP shift to state 985
-- On ID shift to state 30
-- On EQMOD shift to state 1112
-- On EQ shift to state 1119
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1122
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1150
-- On ebexp_atomic shift to state 1162
-- On defined_var shift to state 932
## Reductions:

State 1150:
## Known stack suffix:
## eexp
## LR(1) items:
ebexp_atomic -> eexp . EQOP eexp eq_suffix [ SEMICOLON RPAR PROVE LANDOP ]
eexp -> eexp . ADDOP eexp [ SUBOP POWOP MULOP EQOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP POWOP MULOP EQOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP POWOP MULOP EQOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP POWOP MULOP EQOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 926
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On EQOP shift to state 1151
-- On ADDOP shift to state 935
## Reductions:

State 1151:
## Known stack suffix:
## eexp EQOP
## LR(1) items:
ebexp_atomic -> eexp EQOP . eexp eq_suffix [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1152
-- On defined_var shift to state 932
## Reductions:

State 1152:
## Known stack suffix:
## eexp EQOP eexp
## LR(1) items:
ebexp_atomic -> eexp EQOP eexp . eq_suffix [ SEMICOLON RPAR PROVE LANDOP ]
eexp -> eexp . ADDOP eexp [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LPAR LANDOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LPAR LANDOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LPAR LANDOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP SEMICOLON RPAR PROVE POWOP MULOP LPAR LANDOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 926
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On LPAR shift to state 1153
-- On ADDOP shift to state 935
-- On eq_suffix shift to state 1161
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production eq_suffix ->

State 1153:
## Known stack suffix:
## LPAR
## LR(1) items:
eq_suffix -> LPAR . MOD eexp RPAR [ SEMICOLON RPAR PROVE LANDOP ]
eq_suffix -> LPAR . MOD LSQUARE eexps RSQUARE RPAR [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On MOD shift to state 1154
## Reductions:

State 1154:
## Known stack suffix:
## LPAR MOD
## LR(1) items:
eq_suffix -> LPAR MOD . eexp RPAR [ SEMICOLON RPAR PROVE LANDOP ]
eq_suffix -> LPAR MOD . LSQUARE eexps RSQUARE RPAR [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LSQUARE shift to state 1155
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1159
-- On defined_var shift to state 932
## Reductions:

State 1155:
## Known stack suffix:
## LPAR MOD LSQUARE
## LR(1) items:
eq_suffix -> LPAR MOD LSQUARE . eexps RSQUARE RPAR [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On VARS shift to state 911
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 919
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexps shift to state 1156
-- On eexp shift to state 925
-- On defined_var shift to state 932
## Reductions:

State 1156:
## Known stack suffix:
## LPAR MOD LSQUARE eexps
## LR(1) items:
eq_suffix -> LPAR MOD LSQUARE eexps . RSQUARE RPAR [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On RSQUARE shift to state 1157
## Reductions:

State 1157:
## Known stack suffix:
## LPAR MOD LSQUARE eexps RSQUARE
## LR(1) items:
eq_suffix -> LPAR MOD LSQUARE eexps RSQUARE . RPAR [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On RPAR shift to state 1158
## Reductions:

State 1158:
## Known stack suffix:
## LPAR MOD LSQUARE eexps RSQUARE RPAR
## LR(1) items:
eq_suffix -> LPAR MOD LSQUARE eexps RSQUARE RPAR . [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production eq_suffix -> LPAR MOD LSQUARE eexps RSQUARE RPAR

State 1159:
## Known stack suffix:
## LPAR MOD eexp
## LR(1) items:
eexp -> eexp . ADDOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP RPAR POWOP MULOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP RPAR POWOP MULOP ADDOP ]
eq_suffix -> LPAR MOD eexp . RPAR [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On SUBOP shift to state 926
-- On RPAR shift to state 1160
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On ADDOP shift to state 935
## Reductions:

State 1160:
## Known stack suffix:
## LPAR MOD eexp RPAR
## LR(1) items:
eq_suffix -> LPAR MOD eexp RPAR . [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production eq_suffix -> LPAR MOD eexp RPAR

State 1161:
## Known stack suffix:
## eexp EQOP eexp eq_suffix
## LR(1) items:
ebexp_atomic -> eexp EQOP eexp eq_suffix . [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production ebexp_atomic -> eexp EQOP eexp eq_suffix

State 1162:
## Known stack suffix:
## AND ebexp_atomic_without_eqmod ebexp_atomic
## LR(1) items:
ebexp_atomic -> AND ebexp_atomic_without_eqmod ebexp_atomic . [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production ebexp_atomic -> AND ebexp_atomic_without_eqmod ebexp_atomic

State 1163:
## Known stack suffix:
## LPAR eexp
## LR(1) items:
ebexp_atomic -> eexp . EQOP eexp eq_suffix [ RPAR LANDOP ]
eexp -> LPAR eexp . RPAR [ SUBOP RPAR POWOP MULOP EQOP ADDOP ]
eexp -> eexp . ADDOP eexp [ SUBOP RPAR POWOP MULOP EQOP ADDOP ]
eexp -> eexp . SUBOP eexp [ SUBOP RPAR POWOP MULOP EQOP ADDOP ]
eexp -> eexp . MULOP eexp [ SUBOP RPAR POWOP MULOP EQOP ADDOP ]
eexp -> eexp . POWOP const [ SUBOP RPAR POWOP MULOP EQOP ADDOP ]
## Transitions:
-- On SUBOP shift to state 926
-- On RPAR shift to state 969
-- On POWOP shift to state 928
-- On MULOP shift to state 930
-- On EQOP shift to state 1151
-- On ADDOP shift to state 935
## Reductions:

State 1164:
## Known stack suffix:
## ebexp_atomic
## LR(1) items:
ebexp -> ebexp_atomic . LANDOP ebexp [ SEMICOLON RPAR PROVE ]
ebexp -> ebexp_atomic . [ SEMICOLON RPAR PROVE ]
## Transitions:
-- On LANDOP shift to state 1165
## Reductions:
-- On SEMICOLON RPAR PROVE
--   reduce production ebexp -> ebexp_atomic

State 1165:
## Known stack suffix:
## ebexp_atomic LANDOP
## LR(1) items:
ebexp -> ebexp_atomic LANDOP . ebexp [ SEMICOLON RPAR PROVE ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 983
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 984
-- On LANDOP shift to state 985
-- On ID shift to state 30
-- On EQMOD shift to state 1112
-- On EQ shift to state 1119
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1122
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1150
-- On ebexp_atomic shift to state 1164
-- On ebexp shift to state 1166
-- On defined_var shift to state 932
## Reductions:

State 1166:
## Known stack suffix:
## ebexp_atomic LANDOP ebexp
## LR(1) items:
ebexp -> ebexp_atomic LANDOP ebexp . [ SEMICOLON RPAR PROVE ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE
--   reduce production ebexp -> ebexp_atomic LANDOP ebexp

State 1167:
## Known stack suffix:
## LPAR ebexp
## LR(1) items:
ebexp_atomic_without_eqmod -> LPAR ebexp . RPAR [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
-- On RPAR shift to state 1168
## Reductions:

State 1168:
## Known stack suffix:
## LPAR ebexp RPAR
## LR(1) items:
ebexp_atomic_without_eqmod -> LPAR ebexp RPAR . [ ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD ]
## Transitions:
## Reductions:
-- On ULIMBS UINT TRUE SUBOP SUB SQ SINT NUM NEG MUL LPAR LANDOP ID EQMOD EQ DEREFOP BIT AND ADD
--   reduce production ebexp_atomic_without_eqmod -> LPAR ebexp RPAR

State 1169:
## Known stack suffix:
## AND ebexp_atomic_without_eqmod
## LR(1) items:
ebexp_atomic -> AND ebexp_atomic_without_eqmod . ebexp_atomic [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 987
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexp_atomic shift to state 1170
-- On defined_var shift to state 932
## Reductions:

State 1170:
## Known stack suffix:
## AND ebexp_atomic_without_eqmod ebexp_atomic
## LR(1) items:
ebexp_atomic -> AND ebexp_atomic_without_eqmod ebexp_atomic . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production ebexp_atomic -> AND ebexp_atomic_without_eqmod ebexp_atomic

State 1171:
## Known stack suffix:
## LANDOP LSQUARE ebexps
## LR(1) items:
ebexp_atomic -> LANDOP LSQUARE ebexps . RSQUARE [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On RSQUARE shift to state 1172
## Reductions:

State 1172:
## Known stack suffix:
## LANDOP LSQUARE ebexps RSQUARE
## LR(1) items:
ebexp_atomic -> LANDOP LSQUARE ebexps RSQUARE . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production ebexp_atomic -> LANDOP LSQUARE ebexps RSQUARE

State 1173:
## Known stack suffix:
## LANDOP LSQUARE ebexps
## LR(1) items:
ebexp_atomic -> LANDOP LSQUARE ebexps . RSQUARE [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On RSQUARE shift to state 1174
## Reductions:

State 1174:
## Known stack suffix:
## LANDOP LSQUARE ebexps RSQUARE
## LR(1) items:
ebexp_atomic -> LANDOP LSQUARE ebexps RSQUARE . [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production ebexp_atomic -> LANDOP LSQUARE ebexps RSQUARE

State 1175:
## Known stack suffix:
## LPAR ebexp
## LR(1) items:
ebexp_atomic -> LPAR ebexp . RPAR [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
-- On RPAR shift to state 1176
## Reductions:

State 1176:
## Known stack suffix:
## LPAR ebexp RPAR
## LR(1) items:
ebexp_atomic -> LPAR ebexp RPAR . [ SEMICOLON RPAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR PROVE LANDOP
--   reduce production ebexp_atomic -> LPAR ebexp RPAR

State 1177:
## Known stack suffix:
## LPAR ebexp
## LR(1) items:
ebexp_atomic -> LPAR ebexp . RPAR [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
-- On RPAR shift to state 1178
## Reductions:

State 1178:
## Known stack suffix:
## LPAR ebexp RPAR
## LR(1) items:
ebexp_atomic -> LPAR ebexp RPAR . [ error VBAR RSQUARE PROVE LANDOP COMMA ]
## Transitions:
## Reductions:
-- On error VBAR RSQUARE PROVE LANDOP COMMA
--   reduce production ebexp_atomic -> LPAR ebexp RPAR

State 1179:
## Known stack suffix:
## ebexp
## LR(1) items:
bexp -> ebexp . VBAR rbexp [ SEMICOLON RBRAC ]
bexp -> ebexp . VBAR error [ SEMICOLON RBRAC ]
bexp -> ebexp . error [ SEMICOLON RBRAC ]
## Transitions:
-- On error shift to state 1180
-- On VBAR shift to state 1181
## Reductions:

State 1180:
## Known stack suffix:
## ebexp error
## LR(1) items:
bexp -> ebexp error . [ SEMICOLON RBRAC ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production bexp -> ebexp error

State 1181:
## Known stack suffix:
## ebexp VBAR
## LR(1) items:
bexp -> ebexp VBAR . rbexp [ SEMICOLON RBRAC ]
bexp -> ebexp VBAR . error [ SEMICOLON RBRAC ]
## Transitions:
-- On error shift to state 1182
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 775
-- On rbexp_atomic shift to state 799
-- On rbexp_and shift to state 802
-- On rbexp shift to state 1183
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 795
## Reductions:

State 1182:
## Known stack suffix:
## ebexp VBAR error
## LR(1) items:
bexp -> ebexp VBAR error . [ SEMICOLON RBRAC ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production bexp -> ebexp VBAR error

State 1183:
## Known stack suffix:
## ebexp VBAR rbexp
## LR(1) items:
bexp -> ebexp VBAR rbexp . [ SEMICOLON RBRAC ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production bexp -> ebexp VBAR rbexp

State 1184:
## Known stack suffix:
## GHOST gvars COLON bexp
## LR(1) items:
instr -> GHOST gvars COLON bexp . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> GHOST gvars COLON bexp

State 1185:
## Known stack suffix:
## gvar
## LR(1) items:
gvars -> gvar . [ COLON ]
gvars -> gvar . COMMA gvars [ COLON ]
gvars -> gvar . error [ COLON ]
## Transitions:
-- On error shift to state 1186
-- On COMMA shift to state 1187
## Reductions:
-- On COLON
--   reduce production gvars -> gvar

State 1186:
## Known stack suffix:
## gvar error
## LR(1) items:
gvars -> gvar error . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production gvars -> gvar error

State 1187:
## Known stack suffix:
## gvar COMMA
## LR(1) items:
gvars -> gvar COMMA . gvars [ COLON ]
## Transitions:
-- On error shift to state 900
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 901
-- On BIT shift to state 7
-- On typ shift to state 904
-- On gvars shift to state 1188
-- On gvar shift to state 1185
## Reductions:

State 1188:
## Known stack suffix:
## gvar COMMA gvars
## LR(1) items:
gvars -> gvar COMMA gvars . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production gvars -> gvar COMMA gvars

State 1189:
## Known stack suffix:
## ECUT
## LR(1) items:
instr -> ECUT . ebexp_prove_with [ SEMICOLON ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 983
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 984
-- On LANDOP shift to state 985
-- On ID shift to state 30
-- On EQMOD shift to state 1112
-- On EQ shift to state 1119
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1122
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1150
-- On ebexp_prove_with shift to state 1190
-- On ebexp_atomic shift to state 1164
-- On ebexp shift to state 1191
-- On defined_var shift to state 932
## Reductions:

State 1190:
## Known stack suffix:
## ECUT ebexp_prove_with
## LR(1) items:
instr -> ECUT ebexp_prove_with . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ECUT ebexp_prove_with

State 1191:
## Known stack suffix:
## ebexp
## LR(1) items:
ebexp_prove_with -> ebexp . [ SEMICOLON ]
ebexp_prove_with -> ebexp . PROVE WITH prove_with_specs [ SEMICOLON ]
## Transitions:
-- On PROVE shift to state 1192
## Reductions:
-- On SEMICOLON
--   reduce production ebexp_prove_with -> ebexp

State 1192:
## Known stack suffix:
## ebexp PROVE
## LR(1) items:
ebexp_prove_with -> ebexp PROVE . WITH prove_with_specs [ SEMICOLON ]
## Transitions:
-- On WITH shift to state 1193
## Reductions:

State 1193:
## Known stack suffix:
## ebexp PROVE WITH
## LR(1) items:
ebexp_prove_with -> ebexp PROVE WITH . prove_with_specs [ SEMICOLON ]
## Transitions:
-- On PRECONDITION shift to state 842
-- On ALL shift to state 843
-- On prove_with_specs shift to state 1194
-- On prove_with_spec shift to state 848
## Reductions:

State 1194:
## Known stack suffix:
## ebexp PROVE WITH prove_with_specs
## LR(1) items:
ebexp_prove_with -> ebexp PROVE WITH prove_with_specs . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production ebexp_prove_with -> ebexp PROVE WITH prove_with_specs

State 1195:
## Known stack suffix:
## CUT
## LR(1) items:
instr -> CUT . bexp_prove_with [ SEMICOLON ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 1196
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexp_prove_with shift to state 1197
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1202
-- On defined_var shift to state 932
-- On bexp_prove_with shift to state 1214
## Reductions:

State 1196:
## Known stack suffix:
## TRUE
## LR(1) items:
bexp_prove_with -> TRUE . [ SEMICOLON RBRAC ]
ebexp_atomic -> TRUE . [ error VBAR PROVE LANDOP ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production bexp_prove_with -> TRUE
-- On error VBAR PROVE LANDOP
--   reduce production ebexp_atomic -> TRUE

State 1197:
## Known stack suffix:
## ebexp_prove_with
## LR(1) items:
bexp_prove_with -> ebexp_prove_with . VBAR rbexp_prove_with [ SEMICOLON RBRAC ]
bexp_prove_with -> ebexp_prove_with . VBAR error [ SEMICOLON RBRAC ]
bexp_prove_with -> ebexp_prove_with . error [ SEMICOLON RBRAC ]
## Transitions:
-- On error shift to state 1198
-- On VBAR shift to state 1199
## Reductions:

State 1198:
## Known stack suffix:
## ebexp_prove_with error
## LR(1) items:
bexp_prove_with -> ebexp_prove_with error . [ SEMICOLON RBRAC ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production bexp_prove_with -> ebexp_prove_with error

State 1199:
## Known stack suffix:
## ebexp_prove_with VBAR
## LR(1) items:
bexp_prove_with -> ebexp_prove_with VBAR . rbexp_prove_with [ SEMICOLON RBRAC ]
bexp_prove_with -> ebexp_prove_with VBAR . error [ SEMICOLON RBRAC ]
## Transitions:
-- On error shift to state 1200
-- On XOR shift to state 391
-- On UMOD shift to state 392
-- On ULT shift to state 508
-- On ULIMBS shift to state 393
-- On ULE shift to state 509
-- On UINT shift to state 2
-- On UGT shift to state 510
-- On UGE shift to state 511
-- On UEXT shift to state 403
-- On TRUE shift to state 512
-- On SUB shift to state 404
-- On SREM shift to state 405
-- On SQ shift to state 406
-- On SMOD shift to state 407
-- On SLT shift to state 513
-- On SLIMBS shift to state 408
-- On SLE shift to state 514
-- On SINT shift to state 3
-- On SHR shift to state 411
-- On SHL shift to state 412
-- On SGT shift to state 515
-- On SGE shift to state 516
-- On SEXT shift to state 413
-- On SAR shift to state 414
-- On OR shift to state 517
-- On NUM shift to state 416
-- On NOTOP shift to state 417
-- On NOT shift to state 418
-- On NEGOP shift to state 522
-- On NEG shift to state 523
-- On MUL shift to state 421
-- On LPAR shift to state 524
-- On LOROP shift to state 525
-- On LANDOP shift to state 533
-- On ID shift to state 30
-- On EQUMOD shift to state 751
-- On EQSREM shift to state 755
-- On EQSMOD shift to state 759
-- On EQMOD shift to state 763
-- On EQ shift to state 767
-- On DEREFOP shift to state 424
-- On CONST shift to state 426
-- On BIT shift to state 7
-- On AND shift to state 770
-- On ADD shift to state 435
-- On typ shift to state 437
-- On simple_const shift to state 430
-- On rexp shift to state 775
-- On rbexp_prove_with shift to state 1201
-- On rbexp_atomic shift to state 799
-- On rbexp_and shift to state 802
-- On rbexp shift to state 839
-- On defined_var shift to state 447
-- On const shift to state 448
-- On cmpop_prefix shift to state 795
## Reductions:

State 1200:
## Known stack suffix:
## ebexp_prove_with VBAR error
## LR(1) items:
bexp_prove_with -> ebexp_prove_with VBAR error . [ SEMICOLON RBRAC ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production bexp_prove_with -> ebexp_prove_with VBAR error

State 1201:
## Known stack suffix:
## ebexp_prove_with VBAR rbexp_prove_with
## LR(1) items:
bexp_prove_with -> ebexp_prove_with VBAR rbexp_prove_with . [ SEMICOLON RBRAC ]
## Transitions:
## Reductions:
-- On SEMICOLON RBRAC
--   reduce production bexp_prove_with -> ebexp_prove_with VBAR rbexp_prove_with

State 1202:
## Known stack suffix:
## ebexp
## LR(1) items:
ebexp_prove_with -> ebexp . [ error VBAR ]
ebexp_prove_with -> ebexp . PROVE WITH prove_with_specs [ error VBAR ]
## Transitions:
-- On PROVE shift to state 1203
## Reductions:
-- On error VBAR
--   reduce production ebexp_prove_with -> ebexp

State 1203:
## Known stack suffix:
## ebexp PROVE
## LR(1) items:
ebexp_prove_with -> ebexp PROVE . WITH prove_with_specs [ error VBAR ]
## Transitions:
-- On WITH shift to state 1204
## Reductions:

State 1204:
## Known stack suffix:
## ebexp PROVE WITH
## LR(1) items:
ebexp_prove_with -> ebexp PROVE WITH . prove_with_specs [ error VBAR ]
## Transitions:
-- On PRECONDITION shift to state 1205
-- On ALL shift to state 1206
-- On prove_with_specs shift to state 1210
-- On prove_with_spec shift to state 1211
## Reductions:

State 1205:
## Known stack suffix:
## PRECONDITION
## LR(1) items:
prove_with_spec -> PRECONDITION . [ error VBAR COMMA ]
## Transitions:
## Reductions:
-- On error VBAR COMMA
--   reduce production prove_with_spec -> PRECONDITION

State 1206:
## Known stack suffix:
## ALL
## LR(1) items:
prove_with_spec -> ALL . CUTS [ error VBAR COMMA ]
prove_with_spec -> ALL . ASSUMES [ error VBAR COMMA ]
prove_with_spec -> ALL . GHOSTS [ error VBAR COMMA ]
## Transitions:
-- On GHOSTS shift to state 1207
-- On CUTS shift to state 1208
-- On ASSUMES shift to state 1209
## Reductions:

State 1207:
## Known stack suffix:
## ALL GHOSTS
## LR(1) items:
prove_with_spec -> ALL GHOSTS . [ error VBAR COMMA ]
## Transitions:
## Reductions:
-- On error VBAR COMMA
--   reduce production prove_with_spec -> ALL GHOSTS

State 1208:
## Known stack suffix:
## ALL CUTS
## LR(1) items:
prove_with_spec -> ALL CUTS . [ error VBAR COMMA ]
## Transitions:
## Reductions:
-- On error VBAR COMMA
--   reduce production prove_with_spec -> ALL CUTS

State 1209:
## Known stack suffix:
## ALL ASSUMES
## LR(1) items:
prove_with_spec -> ALL ASSUMES . [ error VBAR COMMA ]
## Transitions:
## Reductions:
-- On error VBAR COMMA
--   reduce production prove_with_spec -> ALL ASSUMES

State 1210:
## Known stack suffix:
## ebexp PROVE WITH prove_with_specs
## LR(1) items:
ebexp_prove_with -> ebexp PROVE WITH prove_with_specs . [ error VBAR ]
## Transitions:
## Reductions:
-- On error VBAR
--   reduce production ebexp_prove_with -> ebexp PROVE WITH prove_with_specs

State 1211:
## Known stack suffix:
## prove_with_spec
## LR(1) items:
prove_with_specs -> prove_with_spec . [ error VBAR ]
prove_with_specs -> prove_with_spec . COMMA prove_with_specs [ error VBAR ]
## Transitions:
-- On COMMA shift to state 1212
## Reductions:
-- On error VBAR
--   reduce production prove_with_specs -> prove_with_spec

State 1212:
## Known stack suffix:
## prove_with_spec COMMA
## LR(1) items:
prove_with_specs -> prove_with_spec COMMA . prove_with_specs [ error VBAR ]
## Transitions:
-- On PRECONDITION shift to state 1205
-- On ALL shift to state 1206
-- On prove_with_specs shift to state 1213
-- On prove_with_spec shift to state 1211
## Reductions:

State 1213:
## Known stack suffix:
## prove_with_spec COMMA prove_with_specs
## LR(1) items:
prove_with_specs -> prove_with_spec COMMA prove_with_specs . [ error VBAR ]
## Transitions:
## Reductions:
-- On error VBAR
--   reduce production prove_with_specs -> prove_with_spec COMMA prove_with_specs

State 1214:
## Known stack suffix:
## CUT bexp_prove_with
## LR(1) items:
instr -> CUT bexp_prove_with . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CUT bexp_prove_with

State 1215:
## Known stack suffix:
## CSHL
## LR(1) items:
instr -> CSHL . lval lval atomic atomic const [ SEMICOLON ]
instr -> CSHL . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 1216
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1217
## Reductions:

State 1216:
## Known stack suffix:
## CSHL error
## LR(1) items:
instr -> CSHL error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CSHL error

State 1217:
## Known stack suffix:
## CSHL lval
## LR(1) items:
instr -> CSHL lval . lval atomic atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1218
## Reductions:

State 1218:
## Known stack suffix:
## CSHL lval lval
## LR(1) items:
instr -> CSHL lval lval . atomic atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1219
## Reductions:

State 1219:
## Known stack suffix:
## CSHL lval lval atomic
## LR(1) items:
instr -> CSHL lval lval atomic . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1220
## Reductions:

State 1220:
## Known stack suffix:
## CSHL lval lval atomic atomic
## LR(1) items:
instr -> CSHL lval lval atomic atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1221
## Reductions:

State 1221:
## Known stack suffix:
## CSHL lval lval atomic atomic const
## LR(1) items:
instr -> CSHL lval lval atomic atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CSHL lval lval atomic atomic const

State 1222:
## Known stack suffix:
## CMOV
## LR(1) items:
instr -> CMOV . lval carry atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1223
## Reductions:

State 1223:
## Known stack suffix:
## CMOV lval
## LR(1) items:
instr -> CMOV lval . carry atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1224
-- On atomic shift to state 91
## Reductions:

State 1224:
## Known stack suffix:
## CMOV lval carry
## LR(1) items:
instr -> CMOV lval carry . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1225
## Reductions:

State 1225:
## Known stack suffix:
## CMOV lval carry atomic
## LR(1) items:
instr -> CMOV lval carry atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1226
## Reductions:

State 1226:
## Known stack suffix:
## CMOV lval carry atomic atomic
## LR(1) items:
instr -> CMOV lval carry atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CMOV lval carry atomic atomic

State 1227:
## Known stack suffix:
## CLEAR
## LR(1) items:
instr -> CLEAR . lcarry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 1228
## Reductions:

State 1228:
## Known stack suffix:
## CLEAR lcarry
## LR(1) items:
instr -> CLEAR lcarry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CLEAR lcarry

State 1229:
## Known stack suffix:
## CAST
## LR(1) items:
instr -> CAST . lval_or_lcarry atomic [ SEMICOLON ]
instr -> CAST . LSQUARE lval_or_lcarry RSQUARE lval_or_lcarry atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On LSQUARE shift to state 1230
-- On ID shift to state 43
-- On BIT shift to state 7
-- On typ shift to state 46
-- On lval_or_lcarry shift to state 1235
## Reductions:

State 1230:
## Known stack suffix:
## CAST LSQUARE
## LR(1) items:
instr -> CAST LSQUARE . lval_or_lcarry RSQUARE lval_or_lcarry atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 43
-- On BIT shift to state 7
-- On typ shift to state 46
-- On lval_or_lcarry shift to state 1231
## Reductions:

State 1231:
## Known stack suffix:
## CAST LSQUARE lval_or_lcarry
## LR(1) items:
instr -> CAST LSQUARE lval_or_lcarry . RSQUARE lval_or_lcarry atomic [ SEMICOLON ]
## Transitions:
-- On RSQUARE shift to state 1232
## Reductions:

State 1232:
## Known stack suffix:
## CAST LSQUARE lval_or_lcarry RSQUARE
## LR(1) items:
instr -> CAST LSQUARE lval_or_lcarry RSQUARE . lval_or_lcarry atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 43
-- On BIT shift to state 7
-- On typ shift to state 46
-- On lval_or_lcarry shift to state 1233
## Reductions:

State 1233:
## Known stack suffix:
## CAST LSQUARE lval_or_lcarry RSQUARE lval_or_lcarry
## LR(1) items:
instr -> CAST LSQUARE lval_or_lcarry RSQUARE lval_or_lcarry . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1234
## Reductions:

State 1234:
## Known stack suffix:
## CAST LSQUARE lval_or_lcarry RSQUARE lval_or_lcarry atomic
## LR(1) items:
instr -> CAST LSQUARE lval_or_lcarry RSQUARE lval_or_lcarry atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CAST LSQUARE lval_or_lcarry RSQUARE lval_or_lcarry atomic

State 1235:
## Known stack suffix:
## CAST lval_or_lcarry
## LR(1) items:
instr -> CAST lval_or_lcarry . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1236
## Reductions:

State 1236:
## Known stack suffix:
## CAST lval_or_lcarry atomic
## LR(1) items:
instr -> CAST lval_or_lcarry atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CAST lval_or_lcarry atomic

State 1237:
## Known stack suffix:
## CALL
## LR(1) items:
instr -> CALL . ID LPAR actuals RPAR [ SEMICOLON ]
instr -> CALL . ID LPAR error [ SEMICOLON ]
instr -> CALL . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 1238
-- On ID shift to state 1239
## Reductions:

State 1238:
## Known stack suffix:
## CALL error
## LR(1) items:
instr -> CALL error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CALL error

State 1239:
## Known stack suffix:
## CALL ID
## LR(1) items:
instr -> CALL ID . LPAR actuals RPAR [ SEMICOLON ]
instr -> CALL ID . LPAR error [ SEMICOLON ]
## Transitions:
-- On LPAR shift to state 1240
## Reductions:

State 1240:
## Known stack suffix:
## CALL ID LPAR
## LR(1) items:
instr -> CALL ID LPAR . actuals RPAR [ SEMICOLON ]
instr -> CALL ID LPAR . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 1241
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 1242
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 1247
-- On simple_const shift to state 17
-- On const shift to state 1249
-- On actuals shift to state 1252
-- On actual_atomics shift to state 1254
-- On actual_atomic shift to state 1255
## Reductions:
-- On RPAR
--   reduce production actuals ->

State 1241:
## Known stack suffix:
## CALL ID LPAR error
## LR(1) items:
instr -> CALL ID LPAR error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CALL ID LPAR error

State 1242:
## Known stack suffix:
## ID
## LR(1) items:
actual_atomic -> ID . [ RPAR COMMA ]
actual_atomic -> ID . OROP NUM DOTDOT NUM [ RPAR COMMA ]
## Transitions:
-- On OROP shift to state 1243
## Reductions:
-- On RPAR COMMA
--   reduce production actual_atomic -> ID

State 1243:
## Known stack suffix:
## ID OROP
## LR(1) items:
actual_atomic -> ID OROP . NUM DOTDOT NUM [ RPAR COMMA ]
## Transitions:
-- On NUM shift to state 1244
## Reductions:

State 1244:
## Known stack suffix:
## ID OROP NUM
## LR(1) items:
actual_atomic -> ID OROP NUM . DOTDOT NUM [ RPAR COMMA ]
## Transitions:
-- On DOTDOT shift to state 1245
## Reductions:

State 1245:
## Known stack suffix:
## ID OROP NUM DOTDOT
## LR(1) items:
actual_atomic -> ID OROP NUM DOTDOT . NUM [ RPAR COMMA ]
## Transitions:
-- On NUM shift to state 1246
## Reductions:

State 1246:
## Known stack suffix:
## ID OROP NUM DOTDOT NUM
## LR(1) items:
actual_atomic -> ID OROP NUM DOTDOT NUM . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production actual_atomic -> ID OROP NUM DOTDOT NUM

State 1247:
## Known stack suffix:
## typ
## LR(1) items:
actual_atomic -> typ . const [ RPAR COMMA ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1248
## Reductions:

State 1248:
## Known stack suffix:
## typ const
## LR(1) items:
actual_atomic -> typ const . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production actual_atomic -> typ const

State 1249:
## Known stack suffix:
## const
## LR(1) items:
actual_atomic -> const . [ RPAR COMMA ]
actual_atomic -> const . AT typ [ RPAR COMMA ]
## Transitions:
-- On AT shift to state 1250
## Reductions:
-- On RPAR COMMA
--   reduce production actual_atomic -> const

State 1250:
## Known stack suffix:
## const AT
## LR(1) items:
actual_atomic -> const AT . typ [ RPAR COMMA ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On BIT shift to state 7
-- On typ shift to state 1251
## Reductions:

State 1251:
## Known stack suffix:
## const AT typ
## LR(1) items:
actual_atomic -> const AT typ . [ RPAR COMMA ]
## Transitions:
## Reductions:
-- On RPAR COMMA
--   reduce production actual_atomic -> const AT typ

State 1252:
## Known stack suffix:
## CALL ID LPAR actuals
## LR(1) items:
instr -> CALL ID LPAR actuals . RPAR [ SEMICOLON ]
## Transitions:
-- On RPAR shift to state 1253
## Reductions:

State 1253:
## Known stack suffix:
## CALL ID LPAR actuals RPAR
## LR(1) items:
instr -> CALL ID LPAR actuals RPAR . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> CALL ID LPAR actuals RPAR

State 1254:
## Known stack suffix:
## actual_atomics
## LR(1) items:
actuals -> actual_atomics . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production actuals -> actual_atomics

State 1255:
## Known stack suffix:
## actual_atomic
## LR(1) items:
actual_atomics -> actual_atomic . [ RPAR ]
actual_atomics -> actual_atomic . COMMA actual_atomics [ RPAR ]
## Transitions:
-- On COMMA shift to state 1256
## Reductions:
-- On RPAR
--   reduce production actual_atomics -> actual_atomic

State 1256:
## Known stack suffix:
## actual_atomic COMMA
## LR(1) items:
actual_atomics -> actual_atomic COMMA . actual_atomics [ RPAR ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 1242
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 1247
-- On simple_const shift to state 17
-- On const shift to state 1249
-- On actual_atomics shift to state 1257
-- On actual_atomic shift to state 1255
## Reductions:

State 1257:
## Known stack suffix:
## actual_atomic COMMA actual_atomics
## LR(1) items:
actual_atomics -> actual_atomic COMMA actual_atomics . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production actual_atomics -> actual_atomic COMMA actual_atomics

State 1258:
## Known stack suffix:
## ASSUME
## LR(1) items:
instr -> ASSUME . bexp [ SEMICOLON ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 981
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1179
-- On defined_var shift to state 932
-- On bexp shift to state 1259
## Reductions:

State 1259:
## Known stack suffix:
## ASSUME bexp
## LR(1) items:
instr -> ASSUME bexp . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ASSUME bexp

State 1260:
## Known stack suffix:
## ASSERT
## LR(1) items:
instr -> ASSERT . bexp [ SEMICOLON ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 981
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1179
-- On defined_var shift to state 932
-- On bexp shift to state 1261
## Reductions:

State 1261:
## Known stack suffix:
## ASSERT bexp
## LR(1) items:
instr -> ASSERT bexp . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ASSERT bexp

State 1262:
## Known stack suffix:
## AND
## LR(1) items:
instr -> AND . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1263
## Reductions:

State 1263:
## Known stack suffix:
## AND lval
## LR(1) items:
instr -> AND lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1264
## Reductions:

State 1264:
## Known stack suffix:
## AND lval atomic
## LR(1) items:
instr -> AND lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1265
## Reductions:

State 1265:
## Known stack suffix:
## AND lval atomic atomic
## LR(1) items:
instr -> AND lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> AND lval atomic atomic

State 1266:
## Known stack suffix:
## ADDS
## LR(1) items:
instr -> ADDS . lcarry lval atomic atomic [ SEMICOLON ]
instr -> ADDS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 1267
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 1268
## Reductions:

State 1267:
## Known stack suffix:
## ADDS error
## LR(1) items:
instr -> ADDS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADDS error

State 1268:
## Known stack suffix:
## ADDS lcarry
## LR(1) items:
instr -> ADDS lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1269
## Reductions:

State 1269:
## Known stack suffix:
## ADDS lcarry lval
## LR(1) items:
instr -> ADDS lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1270
## Reductions:

State 1270:
## Known stack suffix:
## ADDS lcarry lval atomic
## LR(1) items:
instr -> ADDS lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1271
## Reductions:

State 1271:
## Known stack suffix:
## ADDS lcarry lval atomic atomic
## LR(1) items:
instr -> ADDS lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADDS lcarry lval atomic atomic

State 1272:
## Known stack suffix:
## ADDR
## LR(1) items:
instr -> ADDR . lcarry lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 1273
## Reductions:

State 1273:
## Known stack suffix:
## ADDR lcarry
## LR(1) items:
instr -> ADDR lcarry . lval atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1274
## Reductions:

State 1274:
## Known stack suffix:
## ADDR lcarry lval
## LR(1) items:
instr -> ADDR lcarry lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1275
## Reductions:

State 1275:
## Known stack suffix:
## ADDR lcarry lval atomic
## LR(1) items:
instr -> ADDR lcarry lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1276
## Reductions:

State 1276:
## Known stack suffix:
## ADDR lcarry lval atomic atomic
## LR(1) items:
instr -> ADDR lcarry lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADDR lcarry lval atomic atomic

State 1277:
## Known stack suffix:
## ADD
## LR(1) items:
instr -> ADD . lval atomic atomic [ SEMICOLON ]
instr -> ADD . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 1278
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1279
## Reductions:

State 1278:
## Known stack suffix:
## ADD error
## LR(1) items:
instr -> ADD error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADD error

State 1279:
## Known stack suffix:
## ADD lval
## LR(1) items:
instr -> ADD lval . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1280
## Reductions:

State 1280:
## Known stack suffix:
## ADD lval atomic
## LR(1) items:
instr -> ADD lval atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1281
## Reductions:

State 1281:
## Known stack suffix:
## ADD lval atomic atomic
## LR(1) items:
instr -> ADD lval atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADD lval atomic atomic

State 1282:
## Known stack suffix:
## ADCS
## LR(1) items:
instr -> ADCS . lcarry lval atomic atomic carry [ SEMICOLON ]
instr -> ADCS . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 1283
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 1284
## Reductions:

State 1283:
## Known stack suffix:
## ADCS error
## LR(1) items:
instr -> ADCS error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADCS error

State 1284:
## Known stack suffix:
## ADCS lcarry
## LR(1) items:
instr -> ADCS lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1285
## Reductions:

State 1285:
## Known stack suffix:
## ADCS lcarry lval
## LR(1) items:
instr -> ADCS lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1286
## Reductions:

State 1286:
## Known stack suffix:
## ADCS lcarry lval atomic
## LR(1) items:
instr -> ADCS lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1287
## Reductions:

State 1287:
## Known stack suffix:
## ADCS lcarry lval atomic atomic
## LR(1) items:
instr -> ADCS lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1288
-- On atomic shift to state 91
## Reductions:

State 1288:
## Known stack suffix:
## ADCS lcarry lval atomic atomic carry
## LR(1) items:
instr -> ADCS lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADCS lcarry lval atomic atomic carry

State 1289:
## Known stack suffix:
## ADCR
## LR(1) items:
instr -> ADCR . lcarry lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 52
-- On BIT shift to state 7
-- On typ shift to state 55
-- On lcarry shift to state 1290
## Reductions:

State 1290:
## Known stack suffix:
## ADCR lcarry
## LR(1) items:
instr -> ADCR lcarry . lval atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1291
## Reductions:

State 1291:
## Known stack suffix:
## ADCR lcarry lval
## LR(1) items:
instr -> ADCR lcarry lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1292
## Reductions:

State 1292:
## Known stack suffix:
## ADCR lcarry lval atomic
## LR(1) items:
instr -> ADCR lcarry lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1293
## Reductions:

State 1293:
## Known stack suffix:
## ADCR lcarry lval atomic atomic
## LR(1) items:
instr -> ADCR lcarry lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1294
-- On atomic shift to state 91
## Reductions:

State 1294:
## Known stack suffix:
## ADCR lcarry lval atomic atomic carry
## LR(1) items:
instr -> ADCR lcarry lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADCR lcarry lval atomic atomic carry

State 1295:
## Known stack suffix:
## ADC
## LR(1) items:
instr -> ADC . lval atomic atomic carry [ SEMICOLON ]
instr -> ADC . error [ SEMICOLON ]
## Transitions:
-- On error shift to state 1296
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 4
-- On BIT shift to state 7
-- On typ shift to state 9
-- On lval shift to state 1297
## Reductions:

State 1296:
## Known stack suffix:
## ADC error
## LR(1) items:
instr -> ADC error . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADC error

State 1297:
## Known stack suffix:
## ADC lval
## LR(1) items:
instr -> ADC lval . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1298
## Reductions:

State 1298:
## Known stack suffix:
## ADC lval atomic
## LR(1) items:
instr -> ADC lval atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1299
## Reductions:

State 1299:
## Known stack suffix:
## ADC lval atomic atomic
## LR(1) items:
instr -> ADC lval atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1300
-- On atomic shift to state 91
## Reductions:

State 1300:
## Known stack suffix:
## ADC lval atomic atomic carry
## LR(1) items:
instr -> ADC lval atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> ADC lval atomic atomic carry

State 1301:
## Known stack suffix:
## typ
## LR(1) items:
lhs -> typ . ID [ EQOP DOT ]
## Transitions:
-- On ID shift to state 1302
## Reductions:

State 1302:
## Known stack suffix:
## typ ID
## LR(1) items:
lhs -> typ ID . [ EQOP DOT ]
## Transitions:
## Reductions:
-- On EQOP DOT
--   reduce production lhs -> typ ID

State 1303:
## Known stack suffix:
## program
## LR(1) items:
prog -> program . EOF [ # ]
## Transitions:
-- On EOF shift to state 1304
## Reductions:

State 1304:
## Known stack suffix:
## program EOF
## LR(1) items:
prog -> program EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> program EOF

State 1305:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 1306:
## Known stack suffix:
## lhs
## LR(1) items:
instr -> lhs . EQOP atomic [ SEMICOLON ]
instr -> lhs . EQOP SHL atomic const [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP CSHL atomic atomic const [ SEMICOLON ]
instr -> lhs . EQOP CMOV carry atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP ADD atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP ADDS atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP ADDR atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP ADC atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP ADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP ADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs . EQOP SUB atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SUBC atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SUBB atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SUBR atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP SBC atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs . EQOP SBB atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs . EQOP MUL atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP MULS atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP MULR atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP MULL atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP MULJ atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SPLIT atomic const [ SEMICOLON ]
instr -> lhs . EQOP UADD atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP UADDS atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP UADDR atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP UADC atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP UADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP UADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs . EQOP USUB atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP USUBC atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP USUBB atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP USUBR atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP USBC atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP USBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP USBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs . EQOP USBB atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP USBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP USBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs . EQOP UMUL atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP UMULS atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP UMULR atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP UMULL atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP UMULJ atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP USPLIT atomic const [ SEMICOLON ]
instr -> lhs . EQOP SADD atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SADDS atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SADDR atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP SADC atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs . EQOP SSUB atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SSUBC atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SSUBB atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SSUBR atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP SSBC atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SSBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SSBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs . EQOP SSBB atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SSBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SSBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs . EQOP SMUL atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SMULS atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SMULR atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SMULL atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP SMULJ atomic atomic [ SEMICOLON ]
instr -> lhs . DOT lhs EQOP SSPLIT atomic const [ SEMICOLON ]
instr -> lhs . EQOP AND atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP OR atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP XOR atomic atomic [ SEMICOLON ]
instr -> lhs . EQOP NOT atomic [ SEMICOLON ]
instr -> lhs . EQOP CAST atomic [ SEMICOLON ]
instr -> lhs . EQOP VPC atomic [ SEMICOLON ]
instr -> lhs . EQOP JOIN atomic atomic [ SEMICOLON ]
## Transitions:
-- On EQOP shift to state 1307
-- On DOT shift to state 1406
## Reductions:

State 1307:
## Known stack suffix:
## lhs EQOP
## LR(1) items:
instr -> lhs EQOP . atomic [ SEMICOLON ]
instr -> lhs EQOP . SHL atomic const [ SEMICOLON ]
instr -> lhs EQOP . CMOV carry atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . ADD atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . ADC atomic atomic carry [ SEMICOLON ]
instr -> lhs EQOP . SUB atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . SBC atomic atomic carry [ SEMICOLON ]
instr -> lhs EQOP . SBB atomic atomic carry [ SEMICOLON ]
instr -> lhs EQOP . MUL atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . MULJ atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . UADD atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . UADC atomic atomic carry [ SEMICOLON ]
instr -> lhs EQOP . USUB atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . USBC atomic atomic carry [ SEMICOLON ]
instr -> lhs EQOP . USBB atomic atomic carry [ SEMICOLON ]
instr -> lhs EQOP . UMUL atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . UMULJ atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . SADD atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . SADC atomic atomic carry [ SEMICOLON ]
instr -> lhs EQOP . SSUB atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . SSBC atomic atomic carry [ SEMICOLON ]
instr -> lhs EQOP . SSBB atomic atomic carry [ SEMICOLON ]
instr -> lhs EQOP . SMUL atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . SMULJ atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . AND atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . OR atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . XOR atomic atomic [ SEMICOLON ]
instr -> lhs EQOP . NOT atomic [ SEMICOLON ]
instr -> lhs EQOP . CAST atomic [ SEMICOLON ]
instr -> lhs EQOP . VPC atomic [ SEMICOLON ]
instr -> lhs EQOP . JOIN atomic atomic [ SEMICOLON ]
## Transitions:
-- On XOR shift to state 1308
-- On VPC shift to state 1311
-- On USUB shift to state 1313
-- On USBC shift to state 1316
-- On USBB shift to state 1320
-- On UMULJ shift to state 1324
-- On UMUL shift to state 1327
-- On UINT shift to state 2
-- On UADD shift to state 1330
-- On UADC shift to state 1333
-- On SUB shift to state 1337
-- On SSUB shift to state 1340
-- On SSBC shift to state 1343
-- On SSBB shift to state 1347
-- On SMULJ shift to state 1351
-- On SMUL shift to state 1354
-- On SINT shift to state 3
-- On SHL shift to state 1357
-- On SBC shift to state 1360
-- On SBB shift to state 1364
-- On SADD shift to state 1368
-- On SADC shift to state 1371
-- On OR shift to state 1375
-- On NUM shift to state 12
-- On NOT shift to state 1378
-- On MULJ shift to state 1380
-- On MUL shift to state 1383
-- On LPAR shift to state 13
-- On JOIN shift to state 1386
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On CMOV shift to state 1389
-- On CAST shift to state 1393
-- On BIT shift to state 7
-- On AND shift to state 1395
-- On ADD shift to state 1398
-- On ADC shift to state 1401
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1405
## Reductions:

State 1308:
## Known stack suffix:
## lhs EQOP XOR
## LR(1) items:
instr -> lhs EQOP XOR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1309
## Reductions:

State 1309:
## Known stack suffix:
## lhs EQOP XOR atomic
## LR(1) items:
instr -> lhs EQOP XOR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1310
## Reductions:

State 1310:
## Known stack suffix:
## lhs EQOP XOR atomic atomic
## LR(1) items:
instr -> lhs EQOP XOR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP XOR atomic atomic

State 1311:
## Known stack suffix:
## lhs EQOP VPC
## LR(1) items:
instr -> lhs EQOP VPC . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1312
## Reductions:

State 1312:
## Known stack suffix:
## lhs EQOP VPC atomic
## LR(1) items:
instr -> lhs EQOP VPC atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP VPC atomic

State 1313:
## Known stack suffix:
## lhs EQOP USUB
## LR(1) items:
instr -> lhs EQOP USUB . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1314
## Reductions:

State 1314:
## Known stack suffix:
## lhs EQOP USUB atomic
## LR(1) items:
instr -> lhs EQOP USUB atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1315
## Reductions:

State 1315:
## Known stack suffix:
## lhs EQOP USUB atomic atomic
## LR(1) items:
instr -> lhs EQOP USUB atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP USUB atomic atomic

State 1316:
## Known stack suffix:
## lhs EQOP USBC
## LR(1) items:
instr -> lhs EQOP USBC . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1317
## Reductions:

State 1317:
## Known stack suffix:
## lhs EQOP USBC atomic
## LR(1) items:
instr -> lhs EQOP USBC atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1318
## Reductions:

State 1318:
## Known stack suffix:
## lhs EQOP USBC atomic atomic
## LR(1) items:
instr -> lhs EQOP USBC atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1319
-- On atomic shift to state 91
## Reductions:

State 1319:
## Known stack suffix:
## lhs EQOP USBC atomic atomic carry
## LR(1) items:
instr -> lhs EQOP USBC atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP USBC atomic atomic carry

State 1320:
## Known stack suffix:
## lhs EQOP USBB
## LR(1) items:
instr -> lhs EQOP USBB . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1321
## Reductions:

State 1321:
## Known stack suffix:
## lhs EQOP USBB atomic
## LR(1) items:
instr -> lhs EQOP USBB atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1322
## Reductions:

State 1322:
## Known stack suffix:
## lhs EQOP USBB atomic atomic
## LR(1) items:
instr -> lhs EQOP USBB atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1323
-- On atomic shift to state 91
## Reductions:

State 1323:
## Known stack suffix:
## lhs EQOP USBB atomic atomic carry
## LR(1) items:
instr -> lhs EQOP USBB atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP USBB atomic atomic carry

State 1324:
## Known stack suffix:
## lhs EQOP UMULJ
## LR(1) items:
instr -> lhs EQOP UMULJ . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1325
## Reductions:

State 1325:
## Known stack suffix:
## lhs EQOP UMULJ atomic
## LR(1) items:
instr -> lhs EQOP UMULJ atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1326
## Reductions:

State 1326:
## Known stack suffix:
## lhs EQOP UMULJ atomic atomic
## LR(1) items:
instr -> lhs EQOP UMULJ atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP UMULJ atomic atomic

State 1327:
## Known stack suffix:
## lhs EQOP UMUL
## LR(1) items:
instr -> lhs EQOP UMUL . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1328
## Reductions:

State 1328:
## Known stack suffix:
## lhs EQOP UMUL atomic
## LR(1) items:
instr -> lhs EQOP UMUL atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1329
## Reductions:

State 1329:
## Known stack suffix:
## lhs EQOP UMUL atomic atomic
## LR(1) items:
instr -> lhs EQOP UMUL atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP UMUL atomic atomic

State 1330:
## Known stack suffix:
## lhs EQOP UADD
## LR(1) items:
instr -> lhs EQOP UADD . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1331
## Reductions:

State 1331:
## Known stack suffix:
## lhs EQOP UADD atomic
## LR(1) items:
instr -> lhs EQOP UADD atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1332
## Reductions:

State 1332:
## Known stack suffix:
## lhs EQOP UADD atomic atomic
## LR(1) items:
instr -> lhs EQOP UADD atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP UADD atomic atomic

State 1333:
## Known stack suffix:
## lhs EQOP UADC
## LR(1) items:
instr -> lhs EQOP UADC . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1334
## Reductions:

State 1334:
## Known stack suffix:
## lhs EQOP UADC atomic
## LR(1) items:
instr -> lhs EQOP UADC atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1335
## Reductions:

State 1335:
## Known stack suffix:
## lhs EQOP UADC atomic atomic
## LR(1) items:
instr -> lhs EQOP UADC atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1336
-- On atomic shift to state 91
## Reductions:

State 1336:
## Known stack suffix:
## lhs EQOP UADC atomic atomic carry
## LR(1) items:
instr -> lhs EQOP UADC atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP UADC atomic atomic carry

State 1337:
## Known stack suffix:
## lhs EQOP SUB
## LR(1) items:
instr -> lhs EQOP SUB . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1338
## Reductions:

State 1338:
## Known stack suffix:
## lhs EQOP SUB atomic
## LR(1) items:
instr -> lhs EQOP SUB atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1339
## Reductions:

State 1339:
## Known stack suffix:
## lhs EQOP SUB atomic atomic
## LR(1) items:
instr -> lhs EQOP SUB atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SUB atomic atomic

State 1340:
## Known stack suffix:
## lhs EQOP SSUB
## LR(1) items:
instr -> lhs EQOP SSUB . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1341
## Reductions:

State 1341:
## Known stack suffix:
## lhs EQOP SSUB atomic
## LR(1) items:
instr -> lhs EQOP SSUB atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1342
## Reductions:

State 1342:
## Known stack suffix:
## lhs EQOP SSUB atomic atomic
## LR(1) items:
instr -> lhs EQOP SSUB atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SSUB atomic atomic

State 1343:
## Known stack suffix:
## lhs EQOP SSBC
## LR(1) items:
instr -> lhs EQOP SSBC . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1344
## Reductions:

State 1344:
## Known stack suffix:
## lhs EQOP SSBC atomic
## LR(1) items:
instr -> lhs EQOP SSBC atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1345
## Reductions:

State 1345:
## Known stack suffix:
## lhs EQOP SSBC atomic atomic
## LR(1) items:
instr -> lhs EQOP SSBC atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1346
-- On atomic shift to state 91
## Reductions:

State 1346:
## Known stack suffix:
## lhs EQOP SSBC atomic atomic carry
## LR(1) items:
instr -> lhs EQOP SSBC atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SSBC atomic atomic carry

State 1347:
## Known stack suffix:
## lhs EQOP SSBB
## LR(1) items:
instr -> lhs EQOP SSBB . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1348
## Reductions:

State 1348:
## Known stack suffix:
## lhs EQOP SSBB atomic
## LR(1) items:
instr -> lhs EQOP SSBB atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1349
## Reductions:

State 1349:
## Known stack suffix:
## lhs EQOP SSBB atomic atomic
## LR(1) items:
instr -> lhs EQOP SSBB atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1350
-- On atomic shift to state 91
## Reductions:

State 1350:
## Known stack suffix:
## lhs EQOP SSBB atomic atomic carry
## LR(1) items:
instr -> lhs EQOP SSBB atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SSBB atomic atomic carry

State 1351:
## Known stack suffix:
## lhs EQOP SMULJ
## LR(1) items:
instr -> lhs EQOP SMULJ . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1352
## Reductions:

State 1352:
## Known stack suffix:
## lhs EQOP SMULJ atomic
## LR(1) items:
instr -> lhs EQOP SMULJ atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1353
## Reductions:

State 1353:
## Known stack suffix:
## lhs EQOP SMULJ atomic atomic
## LR(1) items:
instr -> lhs EQOP SMULJ atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SMULJ atomic atomic

State 1354:
## Known stack suffix:
## lhs EQOP SMUL
## LR(1) items:
instr -> lhs EQOP SMUL . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1355
## Reductions:

State 1355:
## Known stack suffix:
## lhs EQOP SMUL atomic
## LR(1) items:
instr -> lhs EQOP SMUL atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1356
## Reductions:

State 1356:
## Known stack suffix:
## lhs EQOP SMUL atomic atomic
## LR(1) items:
instr -> lhs EQOP SMUL atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SMUL atomic atomic

State 1357:
## Known stack suffix:
## lhs EQOP SHL
## LR(1) items:
instr -> lhs EQOP SHL . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1358
## Reductions:

State 1358:
## Known stack suffix:
## lhs EQOP SHL atomic
## LR(1) items:
instr -> lhs EQOP SHL atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1359
## Reductions:

State 1359:
## Known stack suffix:
## lhs EQOP SHL atomic const
## LR(1) items:
instr -> lhs EQOP SHL atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SHL atomic const

State 1360:
## Known stack suffix:
## lhs EQOP SBC
## LR(1) items:
instr -> lhs EQOP SBC . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1361
## Reductions:

State 1361:
## Known stack suffix:
## lhs EQOP SBC atomic
## LR(1) items:
instr -> lhs EQOP SBC atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1362
## Reductions:

State 1362:
## Known stack suffix:
## lhs EQOP SBC atomic atomic
## LR(1) items:
instr -> lhs EQOP SBC atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1363
-- On atomic shift to state 91
## Reductions:

State 1363:
## Known stack suffix:
## lhs EQOP SBC atomic atomic carry
## LR(1) items:
instr -> lhs EQOP SBC atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SBC atomic atomic carry

State 1364:
## Known stack suffix:
## lhs EQOP SBB
## LR(1) items:
instr -> lhs EQOP SBB . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1365
## Reductions:

State 1365:
## Known stack suffix:
## lhs EQOP SBB atomic
## LR(1) items:
instr -> lhs EQOP SBB atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1366
## Reductions:

State 1366:
## Known stack suffix:
## lhs EQOP SBB atomic atomic
## LR(1) items:
instr -> lhs EQOP SBB atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1367
-- On atomic shift to state 91
## Reductions:

State 1367:
## Known stack suffix:
## lhs EQOP SBB atomic atomic carry
## LR(1) items:
instr -> lhs EQOP SBB atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SBB atomic atomic carry

State 1368:
## Known stack suffix:
## lhs EQOP SADD
## LR(1) items:
instr -> lhs EQOP SADD . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1369
## Reductions:

State 1369:
## Known stack suffix:
## lhs EQOP SADD atomic
## LR(1) items:
instr -> lhs EQOP SADD atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1370
## Reductions:

State 1370:
## Known stack suffix:
## lhs EQOP SADD atomic atomic
## LR(1) items:
instr -> lhs EQOP SADD atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SADD atomic atomic

State 1371:
## Known stack suffix:
## lhs EQOP SADC
## LR(1) items:
instr -> lhs EQOP SADC . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1372
## Reductions:

State 1372:
## Known stack suffix:
## lhs EQOP SADC atomic
## LR(1) items:
instr -> lhs EQOP SADC atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1373
## Reductions:

State 1373:
## Known stack suffix:
## lhs EQOP SADC atomic atomic
## LR(1) items:
instr -> lhs EQOP SADC atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1374
-- On atomic shift to state 91
## Reductions:

State 1374:
## Known stack suffix:
## lhs EQOP SADC atomic atomic carry
## LR(1) items:
instr -> lhs EQOP SADC atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP SADC atomic atomic carry

State 1375:
## Known stack suffix:
## lhs EQOP OR
## LR(1) items:
instr -> lhs EQOP OR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1376
## Reductions:

State 1376:
## Known stack suffix:
## lhs EQOP OR atomic
## LR(1) items:
instr -> lhs EQOP OR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1377
## Reductions:

State 1377:
## Known stack suffix:
## lhs EQOP OR atomic atomic
## LR(1) items:
instr -> lhs EQOP OR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP OR atomic atomic

State 1378:
## Known stack suffix:
## lhs EQOP NOT
## LR(1) items:
instr -> lhs EQOP NOT . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1379
## Reductions:

State 1379:
## Known stack suffix:
## lhs EQOP NOT atomic
## LR(1) items:
instr -> lhs EQOP NOT atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP NOT atomic

State 1380:
## Known stack suffix:
## lhs EQOP MULJ
## LR(1) items:
instr -> lhs EQOP MULJ . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1381
## Reductions:

State 1381:
## Known stack suffix:
## lhs EQOP MULJ atomic
## LR(1) items:
instr -> lhs EQOP MULJ atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1382
## Reductions:

State 1382:
## Known stack suffix:
## lhs EQOP MULJ atomic atomic
## LR(1) items:
instr -> lhs EQOP MULJ atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP MULJ atomic atomic

State 1383:
## Known stack suffix:
## lhs EQOP MUL
## LR(1) items:
instr -> lhs EQOP MUL . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1384
## Reductions:

State 1384:
## Known stack suffix:
## lhs EQOP MUL atomic
## LR(1) items:
instr -> lhs EQOP MUL atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1385
## Reductions:

State 1385:
## Known stack suffix:
## lhs EQOP MUL atomic atomic
## LR(1) items:
instr -> lhs EQOP MUL atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP MUL atomic atomic

State 1386:
## Known stack suffix:
## lhs EQOP JOIN
## LR(1) items:
instr -> lhs EQOP JOIN . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1387
## Reductions:

State 1387:
## Known stack suffix:
## lhs EQOP JOIN atomic
## LR(1) items:
instr -> lhs EQOP JOIN atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1388
## Reductions:

State 1388:
## Known stack suffix:
## lhs EQOP JOIN atomic atomic
## LR(1) items:
instr -> lhs EQOP JOIN atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP JOIN atomic atomic

State 1389:
## Known stack suffix:
## lhs EQOP CMOV
## LR(1) items:
instr -> lhs EQOP CMOV . carry atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1390
-- On atomic shift to state 91
## Reductions:

State 1390:
## Known stack suffix:
## lhs EQOP CMOV carry
## LR(1) items:
instr -> lhs EQOP CMOV carry . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1391
## Reductions:

State 1391:
## Known stack suffix:
## lhs EQOP CMOV carry atomic
## LR(1) items:
instr -> lhs EQOP CMOV carry atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1392
## Reductions:

State 1392:
## Known stack suffix:
## lhs EQOP CMOV carry atomic atomic
## LR(1) items:
instr -> lhs EQOP CMOV carry atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP CMOV carry atomic atomic

State 1393:
## Known stack suffix:
## lhs EQOP CAST
## LR(1) items:
instr -> lhs EQOP CAST . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1394
## Reductions:

State 1394:
## Known stack suffix:
## lhs EQOP CAST atomic
## LR(1) items:
instr -> lhs EQOP CAST atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP CAST atomic

State 1395:
## Known stack suffix:
## lhs EQOP AND
## LR(1) items:
instr -> lhs EQOP AND . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1396
## Reductions:

State 1396:
## Known stack suffix:
## lhs EQOP AND atomic
## LR(1) items:
instr -> lhs EQOP AND atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1397
## Reductions:

State 1397:
## Known stack suffix:
## lhs EQOP AND atomic atomic
## LR(1) items:
instr -> lhs EQOP AND atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP AND atomic atomic

State 1398:
## Known stack suffix:
## lhs EQOP ADD
## LR(1) items:
instr -> lhs EQOP ADD . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1399
## Reductions:

State 1399:
## Known stack suffix:
## lhs EQOP ADD atomic
## LR(1) items:
instr -> lhs EQOP ADD atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1400
## Reductions:

State 1400:
## Known stack suffix:
## lhs EQOP ADD atomic atomic
## LR(1) items:
instr -> lhs EQOP ADD atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP ADD atomic atomic

State 1401:
## Known stack suffix:
## lhs EQOP ADC
## LR(1) items:
instr -> lhs EQOP ADC . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1402
## Reductions:

State 1402:
## Known stack suffix:
## lhs EQOP ADC atomic
## LR(1) items:
instr -> lhs EQOP ADC atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1403
## Reductions:

State 1403:
## Known stack suffix:
## lhs EQOP ADC atomic atomic
## LR(1) items:
instr -> lhs EQOP ADC atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1404
-- On atomic shift to state 91
## Reductions:

State 1404:
## Known stack suffix:
## lhs EQOP ADC atomic atomic carry
## LR(1) items:
instr -> lhs EQOP ADC atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP ADC atomic atomic carry

State 1405:
## Known stack suffix:
## lhs EQOP atomic
## LR(1) items:
instr -> lhs EQOP atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs EQOP atomic

State 1406:
## Known stack suffix:
## lhs DOT
## LR(1) items:
instr -> lhs DOT . lhs EQOP CSHL atomic atomic const [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP ADDS atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP ADDR atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP ADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP ADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SUBC atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SUBB atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SUBR atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP MULS atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP MULR atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP MULL atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SPLIT atomic const [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP UADDS atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP UADDR atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP UADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP UADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP USUBC atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP USUBB atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP USUBR atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP USBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP USBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP USBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP USBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP UMULS atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP UMULR atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP UMULL atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP USPLIT atomic const [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SADDS atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SADDR atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SSUBC atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SSUBB atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SSUBR atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SSBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SSBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SSBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SSBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SMULS atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SMULR atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SMULL atomic atomic [ SEMICOLON ]
instr -> lhs DOT . lhs EQOP SSPLIT atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 895
-- On BIT shift to state 7
-- On typ shift to state 1301
-- On lhs shift to state 1407
## Reductions:

State 1407:
## Known stack suffix:
## lhs DOT lhs
## LR(1) items:
instr -> lhs DOT lhs . EQOP CSHL atomic atomic const [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP ADDS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP ADDR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP ADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP ADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SUBC atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SUBB atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SUBR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP MULS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP MULR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP MULL atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SPLIT atomic const [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP UADDS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP UADDR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP UADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP UADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP USUBC atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP USUBB atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP USUBR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP USBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP USBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP USBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP USBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP UMULS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP UMULR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP UMULL atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP USPLIT atomic const [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SADDS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SADDR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SSUBC atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SSUBB atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SSUBR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SSBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SSBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SSBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SSBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SMULS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SMULR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SMULL atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs . EQOP SSPLIT atomic const [ SEMICOLON ]
## Transitions:
-- On EQOP shift to state 1408
## Reductions:

State 1408:
## Known stack suffix:
## lhs DOT lhs EQOP
## LR(1) items:
instr -> lhs DOT lhs EQOP . CSHL atomic atomic const [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . ADDS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . ADDR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . ADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . ADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SUBC atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SUBB atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SUBR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . MULS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . MULR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . MULL atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SPLIT atomic const [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . UADDS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . UADDR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . UADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . UADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . USUBC atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . USUBB atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . USUBR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . USBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . USBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . USBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . USBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . UMULS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . UMULR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . UMULL atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . USPLIT atomic const [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SADDS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SADDR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SADCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SADCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SSUBC atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SSUBB atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SSUBR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SSBCS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SSBCR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SSBBS atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SSBBR atomic atomic carry [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SMULS atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SMULR atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SMULL atomic atomic [ SEMICOLON ]
instr -> lhs DOT lhs EQOP . SSPLIT atomic const [ SEMICOLON ]
## Transitions:
-- On USUBR shift to state 1409
-- On USUBC shift to state 1412
-- On USUBB shift to state 1415
-- On USPLIT shift to state 1418
-- On USBCS shift to state 1421
-- On USBCR shift to state 1425
-- On USBBS shift to state 1429
-- On USBBR shift to state 1433
-- On UMULS shift to state 1437
-- On UMULR shift to state 1440
-- On UMULL shift to state 1443
-- On UADDS shift to state 1446
-- On UADDR shift to state 1449
-- On UADCS shift to state 1452
-- On UADCR shift to state 1456
-- On SUBR shift to state 1460
-- On SUBC shift to state 1463
-- On SUBB shift to state 1466
-- On SSUBR shift to state 1469
-- On SSUBC shift to state 1472
-- On SSUBB shift to state 1475
-- On SSPLIT shift to state 1478
-- On SSBCS shift to state 1481
-- On SSBCR shift to state 1485
-- On SSBBS shift to state 1489
-- On SSBBR shift to state 1493
-- On SPLIT shift to state 1497
-- On SMULS shift to state 1500
-- On SMULR shift to state 1503
-- On SMULL shift to state 1506
-- On SBCS shift to state 1509
-- On SBCR shift to state 1513
-- On SBBS shift to state 1517
-- On SBBR shift to state 1521
-- On SADDS shift to state 1525
-- On SADDR shift to state 1528
-- On SADCS shift to state 1531
-- On SADCR shift to state 1535
-- On MULS shift to state 1539
-- On MULR shift to state 1542
-- On MULL shift to state 1545
-- On CSHL shift to state 1548
-- On ADDS shift to state 1552
-- On ADDR shift to state 1555
-- On ADCS shift to state 1558
-- On ADCR shift to state 1562
## Reductions:

State 1409:
## Known stack suffix:
## lhs DOT lhs EQOP USUBR
## LR(1) items:
instr -> lhs DOT lhs EQOP USUBR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1410
## Reductions:

State 1410:
## Known stack suffix:
## lhs DOT lhs EQOP USUBR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USUBR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1411
## Reductions:

State 1411:
## Known stack suffix:
## lhs DOT lhs EQOP USUBR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USUBR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP USUBR atomic atomic

State 1412:
## Known stack suffix:
## lhs DOT lhs EQOP USUBC
## LR(1) items:
instr -> lhs DOT lhs EQOP USUBC . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1413
## Reductions:

State 1413:
## Known stack suffix:
## lhs DOT lhs EQOP USUBC atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USUBC atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1414
## Reductions:

State 1414:
## Known stack suffix:
## lhs DOT lhs EQOP USUBC atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USUBC atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP USUBC atomic atomic

State 1415:
## Known stack suffix:
## lhs DOT lhs EQOP USUBB
## LR(1) items:
instr -> lhs DOT lhs EQOP USUBB . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1416
## Reductions:

State 1416:
## Known stack suffix:
## lhs DOT lhs EQOP USUBB atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USUBB atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1417
## Reductions:

State 1417:
## Known stack suffix:
## lhs DOT lhs EQOP USUBB atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USUBB atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP USUBB atomic atomic

State 1418:
## Known stack suffix:
## lhs DOT lhs EQOP USPLIT
## LR(1) items:
instr -> lhs DOT lhs EQOP USPLIT . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1419
## Reductions:

State 1419:
## Known stack suffix:
## lhs DOT lhs EQOP USPLIT atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USPLIT atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1420
## Reductions:

State 1420:
## Known stack suffix:
## lhs DOT lhs EQOP USPLIT atomic const
## LR(1) items:
instr -> lhs DOT lhs EQOP USPLIT atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP USPLIT atomic const

State 1421:
## Known stack suffix:
## lhs DOT lhs EQOP USBCS
## LR(1) items:
instr -> lhs DOT lhs EQOP USBCS . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1422
## Reductions:

State 1422:
## Known stack suffix:
## lhs DOT lhs EQOP USBCS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USBCS atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1423
## Reductions:

State 1423:
## Known stack suffix:
## lhs DOT lhs EQOP USBCS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USBCS atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1424
-- On atomic shift to state 91
## Reductions:

State 1424:
## Known stack suffix:
## lhs DOT lhs EQOP USBCS atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP USBCS atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP USBCS atomic atomic carry

State 1425:
## Known stack suffix:
## lhs DOT lhs EQOP USBCR
## LR(1) items:
instr -> lhs DOT lhs EQOP USBCR . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1426
## Reductions:

State 1426:
## Known stack suffix:
## lhs DOT lhs EQOP USBCR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USBCR atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1427
## Reductions:

State 1427:
## Known stack suffix:
## lhs DOT lhs EQOP USBCR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USBCR atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1428
-- On atomic shift to state 91
## Reductions:

State 1428:
## Known stack suffix:
## lhs DOT lhs EQOP USBCR atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP USBCR atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP USBCR atomic atomic carry

State 1429:
## Known stack suffix:
## lhs DOT lhs EQOP USBBS
## LR(1) items:
instr -> lhs DOT lhs EQOP USBBS . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1430
## Reductions:

State 1430:
## Known stack suffix:
## lhs DOT lhs EQOP USBBS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USBBS atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1431
## Reductions:

State 1431:
## Known stack suffix:
## lhs DOT lhs EQOP USBBS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USBBS atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1432
-- On atomic shift to state 91
## Reductions:

State 1432:
## Known stack suffix:
## lhs DOT lhs EQOP USBBS atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP USBBS atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP USBBS atomic atomic carry

State 1433:
## Known stack suffix:
## lhs DOT lhs EQOP USBBR
## LR(1) items:
instr -> lhs DOT lhs EQOP USBBR . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1434
## Reductions:

State 1434:
## Known stack suffix:
## lhs DOT lhs EQOP USBBR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USBBR atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1435
## Reductions:

State 1435:
## Known stack suffix:
## lhs DOT lhs EQOP USBBR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP USBBR atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1436
-- On atomic shift to state 91
## Reductions:

State 1436:
## Known stack suffix:
## lhs DOT lhs EQOP USBBR atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP USBBR atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP USBBR atomic atomic carry

State 1437:
## Known stack suffix:
## lhs DOT lhs EQOP UMULS
## LR(1) items:
instr -> lhs DOT lhs EQOP UMULS . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1438
## Reductions:

State 1438:
## Known stack suffix:
## lhs DOT lhs EQOP UMULS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UMULS atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1439
## Reductions:

State 1439:
## Known stack suffix:
## lhs DOT lhs EQOP UMULS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UMULS atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP UMULS atomic atomic

State 1440:
## Known stack suffix:
## lhs DOT lhs EQOP UMULR
## LR(1) items:
instr -> lhs DOT lhs EQOP UMULR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1441
## Reductions:

State 1441:
## Known stack suffix:
## lhs DOT lhs EQOP UMULR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UMULR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1442
## Reductions:

State 1442:
## Known stack suffix:
## lhs DOT lhs EQOP UMULR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UMULR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP UMULR atomic atomic

State 1443:
## Known stack suffix:
## lhs DOT lhs EQOP UMULL
## LR(1) items:
instr -> lhs DOT lhs EQOP UMULL . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1444
## Reductions:

State 1444:
## Known stack suffix:
## lhs DOT lhs EQOP UMULL atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UMULL atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1445
## Reductions:

State 1445:
## Known stack suffix:
## lhs DOT lhs EQOP UMULL atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UMULL atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP UMULL atomic atomic

State 1446:
## Known stack suffix:
## lhs DOT lhs EQOP UADDS
## LR(1) items:
instr -> lhs DOT lhs EQOP UADDS . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1447
## Reductions:

State 1447:
## Known stack suffix:
## lhs DOT lhs EQOP UADDS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UADDS atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1448
## Reductions:

State 1448:
## Known stack suffix:
## lhs DOT lhs EQOP UADDS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UADDS atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP UADDS atomic atomic

State 1449:
## Known stack suffix:
## lhs DOT lhs EQOP UADDR
## LR(1) items:
instr -> lhs DOT lhs EQOP UADDR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1450
## Reductions:

State 1450:
## Known stack suffix:
## lhs DOT lhs EQOP UADDR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UADDR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1451
## Reductions:

State 1451:
## Known stack suffix:
## lhs DOT lhs EQOP UADDR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UADDR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP UADDR atomic atomic

State 1452:
## Known stack suffix:
## lhs DOT lhs EQOP UADCS
## LR(1) items:
instr -> lhs DOT lhs EQOP UADCS . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1453
## Reductions:

State 1453:
## Known stack suffix:
## lhs DOT lhs EQOP UADCS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UADCS atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1454
## Reductions:

State 1454:
## Known stack suffix:
## lhs DOT lhs EQOP UADCS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UADCS atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1455
-- On atomic shift to state 91
## Reductions:

State 1455:
## Known stack suffix:
## lhs DOT lhs EQOP UADCS atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP UADCS atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP UADCS atomic atomic carry

State 1456:
## Known stack suffix:
## lhs DOT lhs EQOP UADCR
## LR(1) items:
instr -> lhs DOT lhs EQOP UADCR . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1457
## Reductions:

State 1457:
## Known stack suffix:
## lhs DOT lhs EQOP UADCR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UADCR atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1458
## Reductions:

State 1458:
## Known stack suffix:
## lhs DOT lhs EQOP UADCR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP UADCR atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1459
-- On atomic shift to state 91
## Reductions:

State 1459:
## Known stack suffix:
## lhs DOT lhs EQOP UADCR atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP UADCR atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP UADCR atomic atomic carry

State 1460:
## Known stack suffix:
## lhs DOT lhs EQOP SUBR
## LR(1) items:
instr -> lhs DOT lhs EQOP SUBR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1461
## Reductions:

State 1461:
## Known stack suffix:
## lhs DOT lhs EQOP SUBR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SUBR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1462
## Reductions:

State 1462:
## Known stack suffix:
## lhs DOT lhs EQOP SUBR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SUBR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SUBR atomic atomic

State 1463:
## Known stack suffix:
## lhs DOT lhs EQOP SUBC
## LR(1) items:
instr -> lhs DOT lhs EQOP SUBC . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1464
## Reductions:

State 1464:
## Known stack suffix:
## lhs DOT lhs EQOP SUBC atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SUBC atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1465
## Reductions:

State 1465:
## Known stack suffix:
## lhs DOT lhs EQOP SUBC atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SUBC atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SUBC atomic atomic

State 1466:
## Known stack suffix:
## lhs DOT lhs EQOP SUBB
## LR(1) items:
instr -> lhs DOT lhs EQOP SUBB . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1467
## Reductions:

State 1467:
## Known stack suffix:
## lhs DOT lhs EQOP SUBB atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SUBB atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1468
## Reductions:

State 1468:
## Known stack suffix:
## lhs DOT lhs EQOP SUBB atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SUBB atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SUBB atomic atomic

State 1469:
## Known stack suffix:
## lhs DOT lhs EQOP SSUBR
## LR(1) items:
instr -> lhs DOT lhs EQOP SSUBR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1470
## Reductions:

State 1470:
## Known stack suffix:
## lhs DOT lhs EQOP SSUBR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSUBR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1471
## Reductions:

State 1471:
## Known stack suffix:
## lhs DOT lhs EQOP SSUBR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSUBR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SSUBR atomic atomic

State 1472:
## Known stack suffix:
## lhs DOT lhs EQOP SSUBC
## LR(1) items:
instr -> lhs DOT lhs EQOP SSUBC . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1473
## Reductions:

State 1473:
## Known stack suffix:
## lhs DOT lhs EQOP SSUBC atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSUBC atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1474
## Reductions:

State 1474:
## Known stack suffix:
## lhs DOT lhs EQOP SSUBC atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSUBC atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SSUBC atomic atomic

State 1475:
## Known stack suffix:
## lhs DOT lhs EQOP SSUBB
## LR(1) items:
instr -> lhs DOT lhs EQOP SSUBB . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1476
## Reductions:

State 1476:
## Known stack suffix:
## lhs DOT lhs EQOP SSUBB atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSUBB atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1477
## Reductions:

State 1477:
## Known stack suffix:
## lhs DOT lhs EQOP SSUBB atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSUBB atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SSUBB atomic atomic

State 1478:
## Known stack suffix:
## lhs DOT lhs EQOP SSPLIT
## LR(1) items:
instr -> lhs DOT lhs EQOP SSPLIT . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1479
## Reductions:

State 1479:
## Known stack suffix:
## lhs DOT lhs EQOP SSPLIT atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSPLIT atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1480
## Reductions:

State 1480:
## Known stack suffix:
## lhs DOT lhs EQOP SSPLIT atomic const
## LR(1) items:
instr -> lhs DOT lhs EQOP SSPLIT atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SSPLIT atomic const

State 1481:
## Known stack suffix:
## lhs DOT lhs EQOP SSBCS
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBCS . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1482
## Reductions:

State 1482:
## Known stack suffix:
## lhs DOT lhs EQOP SSBCS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBCS atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1483
## Reductions:

State 1483:
## Known stack suffix:
## lhs DOT lhs EQOP SSBCS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBCS atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1484
-- On atomic shift to state 91
## Reductions:

State 1484:
## Known stack suffix:
## lhs DOT lhs EQOP SSBCS atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBCS atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SSBCS atomic atomic carry

State 1485:
## Known stack suffix:
## lhs DOT lhs EQOP SSBCR
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBCR . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1486
## Reductions:

State 1486:
## Known stack suffix:
## lhs DOT lhs EQOP SSBCR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBCR atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1487
## Reductions:

State 1487:
## Known stack suffix:
## lhs DOT lhs EQOP SSBCR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBCR atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1488
-- On atomic shift to state 91
## Reductions:

State 1488:
## Known stack suffix:
## lhs DOT lhs EQOP SSBCR atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBCR atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SSBCR atomic atomic carry

State 1489:
## Known stack suffix:
## lhs DOT lhs EQOP SSBBS
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBBS . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1490
## Reductions:

State 1490:
## Known stack suffix:
## lhs DOT lhs EQOP SSBBS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBBS atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1491
## Reductions:

State 1491:
## Known stack suffix:
## lhs DOT lhs EQOP SSBBS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBBS atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1492
-- On atomic shift to state 91
## Reductions:

State 1492:
## Known stack suffix:
## lhs DOT lhs EQOP SSBBS atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBBS atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SSBBS atomic atomic carry

State 1493:
## Known stack suffix:
## lhs DOT lhs EQOP SSBBR
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBBR . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1494
## Reductions:

State 1494:
## Known stack suffix:
## lhs DOT lhs EQOP SSBBR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBBR atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1495
## Reductions:

State 1495:
## Known stack suffix:
## lhs DOT lhs EQOP SSBBR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBBR atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1496
-- On atomic shift to state 91
## Reductions:

State 1496:
## Known stack suffix:
## lhs DOT lhs EQOP SSBBR atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SSBBR atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SSBBR atomic atomic carry

State 1497:
## Known stack suffix:
## lhs DOT lhs EQOP SPLIT
## LR(1) items:
instr -> lhs DOT lhs EQOP SPLIT . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1498
## Reductions:

State 1498:
## Known stack suffix:
## lhs DOT lhs EQOP SPLIT atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SPLIT atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1499
## Reductions:

State 1499:
## Known stack suffix:
## lhs DOT lhs EQOP SPLIT atomic const
## LR(1) items:
instr -> lhs DOT lhs EQOP SPLIT atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SPLIT atomic const

State 1500:
## Known stack suffix:
## lhs DOT lhs EQOP SMULS
## LR(1) items:
instr -> lhs DOT lhs EQOP SMULS . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1501
## Reductions:

State 1501:
## Known stack suffix:
## lhs DOT lhs EQOP SMULS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SMULS atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1502
## Reductions:

State 1502:
## Known stack suffix:
## lhs DOT lhs EQOP SMULS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SMULS atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SMULS atomic atomic

State 1503:
## Known stack suffix:
## lhs DOT lhs EQOP SMULR
## LR(1) items:
instr -> lhs DOT lhs EQOP SMULR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1504
## Reductions:

State 1504:
## Known stack suffix:
## lhs DOT lhs EQOP SMULR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SMULR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1505
## Reductions:

State 1505:
## Known stack suffix:
## lhs DOT lhs EQOP SMULR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SMULR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SMULR atomic atomic

State 1506:
## Known stack suffix:
## lhs DOT lhs EQOP SMULL
## LR(1) items:
instr -> lhs DOT lhs EQOP SMULL . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1507
## Reductions:

State 1507:
## Known stack suffix:
## lhs DOT lhs EQOP SMULL atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SMULL atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1508
## Reductions:

State 1508:
## Known stack suffix:
## lhs DOT lhs EQOP SMULL atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SMULL atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SMULL atomic atomic

State 1509:
## Known stack suffix:
## lhs DOT lhs EQOP SBCS
## LR(1) items:
instr -> lhs DOT lhs EQOP SBCS . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1510
## Reductions:

State 1510:
## Known stack suffix:
## lhs DOT lhs EQOP SBCS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SBCS atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1511
## Reductions:

State 1511:
## Known stack suffix:
## lhs DOT lhs EQOP SBCS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SBCS atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1512
-- On atomic shift to state 91
## Reductions:

State 1512:
## Known stack suffix:
## lhs DOT lhs EQOP SBCS atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SBCS atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SBCS atomic atomic carry

State 1513:
## Known stack suffix:
## lhs DOT lhs EQOP SBCR
## LR(1) items:
instr -> lhs DOT lhs EQOP SBCR . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1514
## Reductions:

State 1514:
## Known stack suffix:
## lhs DOT lhs EQOP SBCR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SBCR atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1515
## Reductions:

State 1515:
## Known stack suffix:
## lhs DOT lhs EQOP SBCR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SBCR atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1516
-- On atomic shift to state 91
## Reductions:

State 1516:
## Known stack suffix:
## lhs DOT lhs EQOP SBCR atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SBCR atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SBCR atomic atomic carry

State 1517:
## Known stack suffix:
## lhs DOT lhs EQOP SBBS
## LR(1) items:
instr -> lhs DOT lhs EQOP SBBS . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1518
## Reductions:

State 1518:
## Known stack suffix:
## lhs DOT lhs EQOP SBBS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SBBS atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1519
## Reductions:

State 1519:
## Known stack suffix:
## lhs DOT lhs EQOP SBBS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SBBS atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1520
-- On atomic shift to state 91
## Reductions:

State 1520:
## Known stack suffix:
## lhs DOT lhs EQOP SBBS atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SBBS atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SBBS atomic atomic carry

State 1521:
## Known stack suffix:
## lhs DOT lhs EQOP SBBR
## LR(1) items:
instr -> lhs DOT lhs EQOP SBBR . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1522
## Reductions:

State 1522:
## Known stack suffix:
## lhs DOT lhs EQOP SBBR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SBBR atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1523
## Reductions:

State 1523:
## Known stack suffix:
## lhs DOT lhs EQOP SBBR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SBBR atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1524
-- On atomic shift to state 91
## Reductions:

State 1524:
## Known stack suffix:
## lhs DOT lhs EQOP SBBR atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SBBR atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SBBR atomic atomic carry

State 1525:
## Known stack suffix:
## lhs DOT lhs EQOP SADDS
## LR(1) items:
instr -> lhs DOT lhs EQOP SADDS . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1526
## Reductions:

State 1526:
## Known stack suffix:
## lhs DOT lhs EQOP SADDS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SADDS atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1527
## Reductions:

State 1527:
## Known stack suffix:
## lhs DOT lhs EQOP SADDS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SADDS atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SADDS atomic atomic

State 1528:
## Known stack suffix:
## lhs DOT lhs EQOP SADDR
## LR(1) items:
instr -> lhs DOT lhs EQOP SADDR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1529
## Reductions:

State 1529:
## Known stack suffix:
## lhs DOT lhs EQOP SADDR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SADDR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1530
## Reductions:

State 1530:
## Known stack suffix:
## lhs DOT lhs EQOP SADDR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SADDR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SADDR atomic atomic

State 1531:
## Known stack suffix:
## lhs DOT lhs EQOP SADCS
## LR(1) items:
instr -> lhs DOT lhs EQOP SADCS . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1532
## Reductions:

State 1532:
## Known stack suffix:
## lhs DOT lhs EQOP SADCS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SADCS atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1533
## Reductions:

State 1533:
## Known stack suffix:
## lhs DOT lhs EQOP SADCS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SADCS atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1534
-- On atomic shift to state 91
## Reductions:

State 1534:
## Known stack suffix:
## lhs DOT lhs EQOP SADCS atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SADCS atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SADCS atomic atomic carry

State 1535:
## Known stack suffix:
## lhs DOT lhs EQOP SADCR
## LR(1) items:
instr -> lhs DOT lhs EQOP SADCR . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1536
## Reductions:

State 1536:
## Known stack suffix:
## lhs DOT lhs EQOP SADCR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SADCR atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1537
## Reductions:

State 1537:
## Known stack suffix:
## lhs DOT lhs EQOP SADCR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP SADCR atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1538
-- On atomic shift to state 91
## Reductions:

State 1538:
## Known stack suffix:
## lhs DOT lhs EQOP SADCR atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP SADCR atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP SADCR atomic atomic carry

State 1539:
## Known stack suffix:
## lhs DOT lhs EQOP MULS
## LR(1) items:
instr -> lhs DOT lhs EQOP MULS . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1540
## Reductions:

State 1540:
## Known stack suffix:
## lhs DOT lhs EQOP MULS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP MULS atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1541
## Reductions:

State 1541:
## Known stack suffix:
## lhs DOT lhs EQOP MULS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP MULS atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP MULS atomic atomic

State 1542:
## Known stack suffix:
## lhs DOT lhs EQOP MULR
## LR(1) items:
instr -> lhs DOT lhs EQOP MULR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1543
## Reductions:

State 1543:
## Known stack suffix:
## lhs DOT lhs EQOP MULR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP MULR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1544
## Reductions:

State 1544:
## Known stack suffix:
## lhs DOT lhs EQOP MULR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP MULR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP MULR atomic atomic

State 1545:
## Known stack suffix:
## lhs DOT lhs EQOP MULL
## LR(1) items:
instr -> lhs DOT lhs EQOP MULL . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1546
## Reductions:

State 1546:
## Known stack suffix:
## lhs DOT lhs EQOP MULL atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP MULL atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1547
## Reductions:

State 1547:
## Known stack suffix:
## lhs DOT lhs EQOP MULL atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP MULL atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP MULL atomic atomic

State 1548:
## Known stack suffix:
## lhs DOT lhs EQOP CSHL
## LR(1) items:
instr -> lhs DOT lhs EQOP CSHL . atomic atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1549
## Reductions:

State 1549:
## Known stack suffix:
## lhs DOT lhs EQOP CSHL atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP CSHL atomic . atomic const [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1550
## Reductions:

State 1550:
## Known stack suffix:
## lhs DOT lhs EQOP CSHL atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP CSHL atomic atomic . const [ SEMICOLON ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1551
## Reductions:

State 1551:
## Known stack suffix:
## lhs DOT lhs EQOP CSHL atomic atomic const
## LR(1) items:
instr -> lhs DOT lhs EQOP CSHL atomic atomic const . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP CSHL atomic atomic const

State 1552:
## Known stack suffix:
## lhs DOT lhs EQOP ADDS
## LR(1) items:
instr -> lhs DOT lhs EQOP ADDS . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1553
## Reductions:

State 1553:
## Known stack suffix:
## lhs DOT lhs EQOP ADDS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP ADDS atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1554
## Reductions:

State 1554:
## Known stack suffix:
## lhs DOT lhs EQOP ADDS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP ADDS atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP ADDS atomic atomic

State 1555:
## Known stack suffix:
## lhs DOT lhs EQOP ADDR
## LR(1) items:
instr -> lhs DOT lhs EQOP ADDR . atomic atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1556
## Reductions:

State 1556:
## Known stack suffix:
## lhs DOT lhs EQOP ADDR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP ADDR atomic . atomic [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1557
## Reductions:

State 1557:
## Known stack suffix:
## lhs DOT lhs EQOP ADDR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP ADDR atomic atomic . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP ADDR atomic atomic

State 1558:
## Known stack suffix:
## lhs DOT lhs EQOP ADCS
## LR(1) items:
instr -> lhs DOT lhs EQOP ADCS . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1559
## Reductions:

State 1559:
## Known stack suffix:
## lhs DOT lhs EQOP ADCS atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP ADCS atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1560
## Reductions:

State 1560:
## Known stack suffix:
## lhs DOT lhs EQOP ADCS atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP ADCS atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1561
-- On atomic shift to state 91
## Reductions:

State 1561:
## Known stack suffix:
## lhs DOT lhs EQOP ADCS atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP ADCS atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP ADCS atomic atomic carry

State 1562:
## Known stack suffix:
## lhs DOT lhs EQOP ADCR
## LR(1) items:
instr -> lhs DOT lhs EQOP ADCR . atomic atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1563
## Reductions:

State 1563:
## Known stack suffix:
## lhs DOT lhs EQOP ADCR atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP ADCR atomic . atomic carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On atomic shift to state 1564
## Reductions:

State 1564:
## Known stack suffix:
## lhs DOT lhs EQOP ADCR atomic atomic
## LR(1) items:
instr -> lhs DOT lhs EQOP ADCR atomic atomic . carry [ SEMICOLON ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On ID shift to state 30
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On typ shift to state 33
-- On simple_const shift to state 17
-- On defined_var shift to state 36
-- On const shift to state 37
-- On carry shift to state 1565
-- On atomic shift to state 91
## Reductions:

State 1565:
## Known stack suffix:
## lhs DOT lhs EQOP ADCR atomic atomic carry
## LR(1) items:
instr -> lhs DOT lhs EQOP ADCR atomic atomic carry . [ SEMICOLON ]
## Transitions:
## Reductions:
-- On SEMICOLON
--   reduce production instr -> lhs DOT lhs EQOP ADCR atomic atomic carry

State 1566:
## Known stack suffix:
## instrs
## LR(1) items:
program -> instrs . [ PROC LBRAC EOF CONST ]
## Transitions:
## Reductions:
-- On PROC LBRAC EOF CONST
--   reduce production program -> instrs

State 1567:
## Known stack suffix:
## instr
## LR(1) items:
instrs -> instr . SEMICOLON instrs [ PROC LBRAC EOF CONST ]
instrs -> instr . SEMICOLON [ PROC LBRAC EOF CONST ]
instrs -> instr . SEMICOLON error [ PROC LBRAC EOF CONST ]
## Transitions:
-- On SEMICOLON shift to state 1568
## Reductions:

State 1568:
## Known stack suffix:
## instr SEMICOLON
## LR(1) items:
instrs -> instr SEMICOLON . instrs [ PROC LBRAC EOF CONST ]
instrs -> instr SEMICOLON . [ PROC LBRAC EOF CONST ]
instrs -> instr SEMICOLON . error [ PROC LBRAC EOF CONST ]
## Transitions:
-- On error shift to state 1569
-- On XOR shift to state 1
-- On VPC shift to state 42
-- On USUBR shift to state 50
-- On USUBC shift to state 61
-- On USUBB shift to state 67
-- On USUB shift to state 73
-- On USPLIT shift to state 78
-- On USBCS shift to state 84
-- On USBCR shift to state 92
-- On USBC shift to state 99
-- On USBBS shift to state 105
-- On USBBR shift to state 112
-- On USBB shift to state 119
-- On UMULS shift to state 125
-- On UMULR shift to state 130
-- On UMULL shift to state 135
-- On UMULJ shift to state 141
-- On UMUL shift to state 145
-- On UINT shift to state 2
-- On UADDS shift to state 150
-- On UADDR shift to state 156
-- On UADD shift to state 161
-- On UADCS shift to state 166
-- On UADCR shift to state 173
-- On UADC shift to state 179
-- On SUBR shift to state 185
-- On SUBC shift to state 191
-- On SUBB shift to state 197
-- On SUB shift to state 203
-- On SSUBR shift to state 208
-- On SSUBC shift to state 214
-- On SSUBB shift to state 220
-- On SSUB shift to state 226
-- On SSPLIT shift to state 231
-- On SSBCS shift to state 237
-- On SSBCR shift to state 244
-- On SSBC shift to state 251
-- On SSBBS shift to state 257
-- On SSBBR shift to state 264
-- On SSBB shift to state 271
-- On SPLIT shift to state 277
-- On SMULS shift to state 283
-- On SMULR shift to state 288
-- On SMULL shift to state 293
-- On SMULJ shift to state 299
-- On SMUL shift to state 303
-- On SINT shift to state 3
-- On SHL shift to state 308
-- On SET shift to state 313
-- On SBCS shift to state 315
-- On SBCR shift to state 322
-- On SBC shift to state 329
-- On SBBS shift to state 335
-- On SBBR shift to state 342
-- On SBB shift to state 349
-- On SADDS shift to state 355
-- On SADDR shift to state 361
-- On SADD shift to state 366
-- On SADCS shift to state 371
-- On SADCR shift to state 378
-- On SADC shift to state 384
-- On RCUT shift to state 390
-- On OR shift to state 851
-- On NOT shift to state 855
-- On NOP shift to state 858
-- On NONDET shift to state 859
-- On MULS shift to state 862
-- On MULR shift to state 867
-- On MULL shift to state 872
-- On MULJ shift to state 878
-- On MUL shift to state 882
-- On MOV shift to state 887
-- On JOIN shift to state 891
-- On ID shift to state 895
-- On GHOST shift to state 899
-- On ECUT shift to state 1189
-- On CUT shift to state 1195
-- On CSHL shift to state 1215
-- On CMOV shift to state 1222
-- On CLEAR shift to state 1227
-- On CAST shift to state 1229
-- On CALL shift to state 1237
-- On BIT shift to state 7
-- On ASSUME shift to state 1258
-- On ASSERT shift to state 1260
-- On AND shift to state 1262
-- On ADDS shift to state 1266
-- On ADDR shift to state 1272
-- On ADD shift to state 1277
-- On ADCS shift to state 1282
-- On ADCR shift to state 1289
-- On ADC shift to state 1295
-- On typ shift to state 1301
-- On lhs shift to state 1306
-- On instrs shift to state 1570
-- On instr shift to state 1567
## Reductions:
-- On PROC LBRAC EOF CONST
--   reduce production instrs -> instr SEMICOLON

State 1569:
## Known stack suffix:
## instr SEMICOLON error
## LR(1) items:
instrs -> instr SEMICOLON error . [ PROC LBRAC EOF CONST ]
## Transitions:
## Reductions:
-- On PROC LBRAC EOF CONST
--   reduce production instrs -> instr SEMICOLON error

State 1570:
## Known stack suffix:
## instr SEMICOLON instrs
## LR(1) items:
instrs -> instr SEMICOLON instrs . [ PROC LBRAC EOF CONST ]
## Transitions:
## Reductions:
-- On PROC LBRAC EOF CONST
--   reduce production instrs -> instr SEMICOLON instrs

State 1571:
## Known stack suffix:
##
## LR(1) items:
spec' -> . spec [ # ]
## Transitions:
-- On PROC shift to state 1572
-- On CONST shift to state 1606
-- On spec shift to state 1610
-- On procs shift to state 1611
-- On proc shift to state 1613
## Reductions:
-- On EOF
--   reduce production procs ->

State 1572:
## Known stack suffix:
## PROC
## LR(1) items:
proc -> PROC . ID LPAR formals RPAR EQOP pre program post [ PROC EOF CONST ]
## Transitions:
-- On ID shift to state 1573
## Reductions:

State 1573:
## Known stack suffix:
## PROC ID
## LR(1) items:
proc -> PROC ID . LPAR formals RPAR EQOP pre program post [ PROC EOF CONST ]
## Transitions:
-- On LPAR shift to state 1574
## Reductions:

State 1574:
## Known stack suffix:
## PROC ID LPAR
## LR(1) items:
proc -> PROC ID LPAR . formals RPAR EQOP pre program post [ PROC EOF CONST ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 1575
-- On BIT shift to state 7
-- On typ shift to state 1582
-- On fvars shift to state 1588
-- On fvar shift to state 1591
-- On formals shift to state 1594
## Reductions:
-- On RPAR
--   reduce production formals ->

State 1575:
## Known stack suffix:
## ID
## LR(1) items:
fvar -> ID . AT typ [ SEMICOLON RPAR COMMA ]
fvar -> ID . AT typ OROP NUM DOTDOT NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On AT shift to state 1576
## Reductions:

State 1576:
## Known stack suffix:
## ID AT
## LR(1) items:
fvar -> ID AT . typ [ SEMICOLON RPAR COMMA ]
fvar -> ID AT . typ OROP NUM DOTDOT NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On BIT shift to state 7
-- On typ shift to state 1577
## Reductions:

State 1577:
## Known stack suffix:
## ID AT typ
## LR(1) items:
fvar -> ID AT typ . [ SEMICOLON RPAR COMMA ]
fvar -> ID AT typ . OROP NUM DOTDOT NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On OROP shift to state 1578
## Reductions:
-- On SEMICOLON RPAR COMMA
--   reduce production fvar -> ID AT typ

State 1578:
## Known stack suffix:
## ID AT typ OROP
## LR(1) items:
fvar -> ID AT typ OROP . NUM DOTDOT NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On NUM shift to state 1579
## Reductions:

State 1579:
## Known stack suffix:
## ID AT typ OROP NUM
## LR(1) items:
fvar -> ID AT typ OROP NUM . DOTDOT NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On DOTDOT shift to state 1580
## Reductions:

State 1580:
## Known stack suffix:
## ID AT typ OROP NUM DOTDOT
## LR(1) items:
fvar -> ID AT typ OROP NUM DOTDOT . NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On NUM shift to state 1581
## Reductions:

State 1581:
## Known stack suffix:
## ID AT typ OROP NUM DOTDOT NUM
## LR(1) items:
fvar -> ID AT typ OROP NUM DOTDOT NUM . [ SEMICOLON RPAR COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR COMMA
--   reduce production fvar -> ID AT typ OROP NUM DOTDOT NUM

State 1582:
## Known stack suffix:
## typ
## LR(1) items:
fvar -> typ . ID [ SEMICOLON RPAR COMMA ]
fvar -> typ . ID OROP NUM DOTDOT NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On ID shift to state 1583
## Reductions:

State 1583:
## Known stack suffix:
## typ ID
## LR(1) items:
fvar -> typ ID . [ SEMICOLON RPAR COMMA ]
fvar -> typ ID . OROP NUM DOTDOT NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On OROP shift to state 1584
## Reductions:
-- On SEMICOLON RPAR COMMA
--   reduce production fvar -> typ ID

State 1584:
## Known stack suffix:
## typ ID OROP
## LR(1) items:
fvar -> typ ID OROP . NUM DOTDOT NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On NUM shift to state 1585
## Reductions:

State 1585:
## Known stack suffix:
## typ ID OROP NUM
## LR(1) items:
fvar -> typ ID OROP NUM . DOTDOT NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On DOTDOT shift to state 1586
## Reductions:

State 1586:
## Known stack suffix:
## typ ID OROP NUM DOTDOT
## LR(1) items:
fvar -> typ ID OROP NUM DOTDOT . NUM [ SEMICOLON RPAR COMMA ]
## Transitions:
-- On NUM shift to state 1587
## Reductions:

State 1587:
## Known stack suffix:
## typ ID OROP NUM DOTDOT NUM
## LR(1) items:
fvar -> typ ID OROP NUM DOTDOT NUM . [ SEMICOLON RPAR COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR COMMA
--   reduce production fvar -> typ ID OROP NUM DOTDOT NUM

State 1588:
## Known stack suffix:
## fvars
## LR(1) items:
formals -> fvars . [ RPAR ]
formals -> fvars . SEMICOLON fvars [ RPAR ]
## Transitions:
-- On SEMICOLON shift to state 1589
## Reductions:
-- On RPAR
--   reduce production formals -> fvars

State 1589:
## Known stack suffix:
## fvars SEMICOLON
## LR(1) items:
formals -> fvars SEMICOLON . fvars [ RPAR ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 1575
-- On BIT shift to state 7
-- On typ shift to state 1582
-- On fvars shift to state 1590
-- On fvar shift to state 1591
## Reductions:

State 1590:
## Known stack suffix:
## fvars SEMICOLON fvars
## LR(1) items:
formals -> fvars SEMICOLON fvars . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production formals -> fvars SEMICOLON fvars

State 1591:
## Known stack suffix:
## fvar
## LR(1) items:
fvars -> fvar . [ SEMICOLON RPAR ]
fvars -> fvar . COMMA fvars [ SEMICOLON RPAR ]
## Transitions:
-- On COMMA shift to state 1592
## Reductions:
-- On SEMICOLON RPAR
--   reduce production fvars -> fvar

State 1592:
## Known stack suffix:
## fvar COMMA
## LR(1) items:
fvars -> fvar COMMA . fvars [ SEMICOLON RPAR ]
## Transitions:
-- On UINT shift to state 2
-- On SINT shift to state 3
-- On ID shift to state 1575
-- On BIT shift to state 7
-- On typ shift to state 1582
-- On fvars shift to state 1593
-- On fvar shift to state 1591
## Reductions:

State 1593:
## Known stack suffix:
## fvar COMMA fvars
## LR(1) items:
fvars -> fvar COMMA fvars . [ SEMICOLON RPAR ]
## Transitions:
## Reductions:
-- On SEMICOLON RPAR
--   reduce production fvars -> fvar COMMA fvars

State 1594:
## Known stack suffix:
## PROC ID LPAR formals
## LR(1) items:
proc -> PROC ID LPAR formals . RPAR EQOP pre program post [ PROC EOF CONST ]
## Transitions:
-- On RPAR shift to state 1595
## Reductions:

State 1595:
## Known stack suffix:
## PROC ID LPAR formals RPAR
## LR(1) items:
proc -> PROC ID LPAR formals RPAR . EQOP pre program post [ PROC EOF CONST ]
## Transitions:
-- On EQOP shift to state 1596
## Reductions:

State 1596:
## Known stack suffix:
## PROC ID LPAR formals RPAR EQOP
## LR(1) items:
proc -> PROC ID LPAR formals RPAR EQOP . pre program post [ PROC EOF CONST ]
## Transitions:
-- On LBRAC shift to state 1597
-- On pre shift to state 1600
## Reductions:
-- On XOR VPC USUBR USUBC USUBB USUB USPLIT USBCS USBCR USBC USBBS USBBR USBB UMULS UMULR UMULL UMULJ UMUL UINT UADDS UADDR UADD UADCS UADCR UADC SUBR SUBC SUBB SUB SSUBR SSUBC SSUBB SSUB SSPLIT SSBCS SSBCR SSBC SSBBS SSBBR SSBB SPLIT SMULS SMULR SMULL SMULJ SMUL SINT SHL SET SBCS SBCR SBC SBBS SBBR SBB SADDS SADDR SADD SADCS SADCR SADC RCUT OR NOT NOP NONDET MULS MULR MULL MULJ MUL MOV JOIN ID GHOST ECUT CUT CSHL CMOV CLEAR CAST CALL BIT ASSUME ASSERT AND ADDS ADDR ADD ADCS ADCR ADC
--   reduce production pre ->

State 1597:
## Known stack suffix:
## LBRAC
## LR(1) items:
pre -> LBRAC . bexp RBRAC [ XOR VPC USUBR USUBC USUBB USUB USPLIT USBCS USBCR USBC USBBS USBBR USBB UMULS UMULR UMULL UMULJ UMUL UINT UADDS UADDR UADD UADCS UADCR UADC SUBR SUBC SUBB SUB SSUBR SSUBC SSUBB SSUB SSPLIT SSBCS SSBCR SSBC SSBBS SSBBR SSBB SPLIT SMULS SMULR SMULL SMULJ SMUL SINT SHL SET SBCS SBCR SBC SBBS SBBR SBB SADDS SADDR SADD SADCS SADCR SADC RCUT OR NOT NOP NONDET MULS MULR MULL MULJ MUL MOV JOIN ID GHOST ECUT CUT CSHL CMOV CLEAR CAST CALL BIT ASSUME ASSERT AND ADDS ADDR ADD ADCS ADCR ADC ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 981
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1179
-- On defined_var shift to state 932
-- On bexp shift to state 1598
## Reductions:

State 1598:
## Known stack suffix:
## LBRAC bexp
## LR(1) items:
pre -> LBRAC bexp . RBRAC [ XOR VPC USUBR USUBC USUBB USUB USPLIT USBCS USBCR USBC USBBS USBBR USBB UMULS UMULR UMULL UMULJ UMUL UINT UADDS UADDR UADD UADCS UADCR UADC SUBR SUBC SUBB SUB SSUBR SSUBC SSUBB SSUB SSPLIT SSBCS SSBCR SSBC SSBBS SSBBR SSBB SPLIT SMULS SMULR SMULL SMULJ SMUL SINT SHL SET SBCS SBCR SBC SBBS SBBR SBB SADDS SADDR SADD SADCS SADCR SADC RCUT OR NOT NOP NONDET MULS MULR MULL MULJ MUL MOV JOIN ID GHOST ECUT CUT CSHL CMOV CLEAR CAST CALL BIT ASSUME ASSERT AND ADDS ADDR ADD ADCS ADCR ADC ]
## Transitions:
-- On RBRAC shift to state 1599
## Reductions:

State 1599:
## Known stack suffix:
## LBRAC bexp RBRAC
## LR(1) items:
pre -> LBRAC bexp RBRAC . [ XOR VPC USUBR USUBC USUBB USUB USPLIT USBCS USBCR USBC USBBS USBBR USBB UMULS UMULR UMULL UMULJ UMUL UINT UADDS UADDR UADD UADCS UADCR UADC SUBR SUBC SUBB SUB SSUBR SSUBC SSUBB SSUB SSPLIT SSBCS SSBCR SSBC SSBBS SSBBR SSBB SPLIT SMULS SMULR SMULL SMULJ SMUL SINT SHL SET SBCS SBCR SBC SBBS SBBR SBB SADDS SADDR SADD SADCS SADCR SADC RCUT OR NOT NOP NONDET MULS MULR MULL MULJ MUL MOV JOIN ID GHOST ECUT CUT CSHL CMOV CLEAR CAST CALL BIT ASSUME ASSERT AND ADDS ADDR ADD ADCS ADCR ADC ]
## Transitions:
## Reductions:
-- On XOR VPC USUBR USUBC USUBB USUB USPLIT USBCS USBCR USBC USBBS USBBR USBB UMULS UMULR UMULL UMULJ UMUL UINT UADDS UADDR UADD UADCS UADCR UADC SUBR SUBC SUBB SUB SSUBR SSUBC SSUBB SSUB SSPLIT SSBCS SSBCR SSBC SSBBS SSBBR SSBB SPLIT SMULS SMULR SMULL SMULJ SMUL SINT SHL SET SBCS SBCR SBC SBBS SBBR SBB SADDS SADDR SADD SADCS SADCR SADC RCUT OR NOT NOP NONDET MULS MULR MULL MULJ MUL MOV JOIN ID GHOST ECUT CUT CSHL CMOV CLEAR CAST CALL BIT ASSUME ASSERT AND ADDS ADDR ADD ADCS ADCR ADC
--   reduce production pre -> LBRAC bexp RBRAC

State 1600:
## Known stack suffix:
## PROC ID LPAR formals RPAR EQOP pre
## LR(1) items:
proc -> PROC ID LPAR formals RPAR EQOP pre . program post [ PROC EOF CONST ]
## Transitions:
-- On XOR shift to state 1
-- On VPC shift to state 42
-- On USUBR shift to state 50
-- On USUBC shift to state 61
-- On USUBB shift to state 67
-- On USUB shift to state 73
-- On USPLIT shift to state 78
-- On USBCS shift to state 84
-- On USBCR shift to state 92
-- On USBC shift to state 99
-- On USBBS shift to state 105
-- On USBBR shift to state 112
-- On USBB shift to state 119
-- On UMULS shift to state 125
-- On UMULR shift to state 130
-- On UMULL shift to state 135
-- On UMULJ shift to state 141
-- On UMUL shift to state 145
-- On UINT shift to state 2
-- On UADDS shift to state 150
-- On UADDR shift to state 156
-- On UADD shift to state 161
-- On UADCS shift to state 166
-- On UADCR shift to state 173
-- On UADC shift to state 179
-- On SUBR shift to state 185
-- On SUBC shift to state 191
-- On SUBB shift to state 197
-- On SUB shift to state 203
-- On SSUBR shift to state 208
-- On SSUBC shift to state 214
-- On SSUBB shift to state 220
-- On SSUB shift to state 226
-- On SSPLIT shift to state 231
-- On SSBCS shift to state 237
-- On SSBCR shift to state 244
-- On SSBC shift to state 251
-- On SSBBS shift to state 257
-- On SSBBR shift to state 264
-- On SSBB shift to state 271
-- On SPLIT shift to state 277
-- On SMULS shift to state 283
-- On SMULR shift to state 288
-- On SMULL shift to state 293
-- On SMULJ shift to state 299
-- On SMUL shift to state 303
-- On SINT shift to state 3
-- On SHL shift to state 308
-- On SET shift to state 313
-- On SBCS shift to state 315
-- On SBCR shift to state 322
-- On SBC shift to state 329
-- On SBBS shift to state 335
-- On SBBR shift to state 342
-- On SBB shift to state 349
-- On SADDS shift to state 355
-- On SADDR shift to state 361
-- On SADD shift to state 366
-- On SADCS shift to state 371
-- On SADCR shift to state 378
-- On SADC shift to state 384
-- On RCUT shift to state 390
-- On OR shift to state 851
-- On NOT shift to state 855
-- On NOP shift to state 858
-- On NONDET shift to state 859
-- On MULS shift to state 862
-- On MULR shift to state 867
-- On MULL shift to state 872
-- On MULJ shift to state 878
-- On MUL shift to state 882
-- On MOV shift to state 887
-- On JOIN shift to state 891
-- On ID shift to state 895
-- On GHOST shift to state 899
-- On ECUT shift to state 1189
-- On CUT shift to state 1195
-- On CSHL shift to state 1215
-- On CMOV shift to state 1222
-- On CLEAR shift to state 1227
-- On CAST shift to state 1229
-- On CALL shift to state 1237
-- On BIT shift to state 7
-- On ASSUME shift to state 1258
-- On ASSERT shift to state 1260
-- On AND shift to state 1262
-- On ADDS shift to state 1266
-- On ADDR shift to state 1272
-- On ADD shift to state 1277
-- On ADCS shift to state 1282
-- On ADCR shift to state 1289
-- On ADC shift to state 1295
-- On typ shift to state 1301
-- On program shift to state 1601
-- On lhs shift to state 1306
-- On instrs shift to state 1566
-- On instr shift to state 1567
## Reductions:

State 1601:
## Known stack suffix:
## PROC ID LPAR formals RPAR EQOP pre program
## LR(1) items:
proc -> PROC ID LPAR formals RPAR EQOP pre program . post [ PROC EOF CONST ]
## Transitions:
-- On LBRAC shift to state 1602
-- On post shift to state 1605
## Reductions:
-- On PROC EOF CONST
--   reduce production post ->

State 1602:
## Known stack suffix:
## LBRAC
## LR(1) items:
post -> LBRAC . bexp_prove_with RBRAC [ PROC EOF CONST ]
## Transitions:
-- On ULIMBS shift to state 908
-- On UINT shift to state 2
-- On TRUE shift to state 1196
-- On SUBOP shift to state 913
-- On SUB shift to state 914
-- On SQ shift to state 915
-- On SINT shift to state 3
-- On NUM shift to state 12
-- On NEG shift to state 916
-- On MUL shift to state 917
-- On LPAR shift to state 982
-- On LANDOP shift to state 988
-- On ID shift to state 30
-- On EQMOD shift to state 990
-- On EQ shift to state 1080
-- On DEREFOP shift to state 15
-- On BIT shift to state 7
-- On AND shift to state 1083
-- On ADD shift to state 920
-- On typ shift to state 437
-- On simple_const shift to state 922
-- On eexp shift to state 1086
-- On ebexp_prove_with shift to state 1197
-- On ebexp_atomic shift to state 1104
-- On ebexp shift to state 1202
-- On defined_var shift to state 932
-- On bexp_prove_with shift to state 1603
## Reductions:

State 1603:
## Known stack suffix:
## LBRAC bexp_prove_with
## LR(1) items:
post -> LBRAC bexp_prove_with . RBRAC [ PROC EOF CONST ]
## Transitions:
-- On RBRAC shift to state 1604
## Reductions:

State 1604:
## Known stack suffix:
## LBRAC bexp_prove_with RBRAC
## LR(1) items:
post -> LBRAC bexp_prove_with RBRAC . [ PROC EOF CONST ]
## Transitions:
## Reductions:
-- On PROC EOF CONST
--   reduce production post -> LBRAC bexp_prove_with RBRAC

State 1605:
## Known stack suffix:
## PROC ID LPAR formals RPAR EQOP pre program post
## LR(1) items:
proc -> PROC ID LPAR formals RPAR EQOP pre program post . [ PROC EOF CONST ]
## Transitions:
## Reductions:
-- On PROC EOF CONST
--   reduce production proc -> PROC ID LPAR formals RPAR EQOP pre program post

State 1606:
## Known stack suffix:
## CONST
## LR(1) items:
proc -> CONST . ID EQOP const [ PROC EOF CONST ]
## Transitions:
-- On ID shift to state 1607
## Reductions:

State 1607:
## Known stack suffix:
## CONST ID
## LR(1) items:
proc -> CONST ID . EQOP const [ PROC EOF CONST ]
## Transitions:
-- On EQOP shift to state 1608
## Reductions:

State 1608:
## Known stack suffix:
## CONST ID EQOP
## LR(1) items:
proc -> CONST ID EQOP . const [ PROC EOF CONST ]
## Transitions:
-- On NUM shift to state 12
-- On LPAR shift to state 13
-- On DEREFOP shift to state 15
-- On simple_const shift to state 17
-- On const shift to state 1609
## Reductions:

State 1609:
## Known stack suffix:
## CONST ID EQOP const
## LR(1) items:
proc -> CONST ID EQOP const . [ PROC EOF CONST ]
## Transitions:
## Reductions:
-- On PROC EOF CONST
--   reduce production proc -> CONST ID EQOP const

State 1610:
## Known stack suffix:
## spec
## LR(1) items:
spec' -> spec . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept spec

State 1611:
## Known stack suffix:
## procs
## LR(1) items:
spec -> procs . EOF [ # ]
## Transitions:
-- On EOF shift to state 1612
## Reductions:

State 1612:
## Known stack suffix:
## procs EOF
## LR(1) items:
spec -> procs EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production spec -> procs EOF

State 1613:
## Known stack suffix:
## proc
## LR(1) items:
procs -> proc . procs [ EOF ]
## Transitions:
-- On PROC shift to state 1572
-- On CONST shift to state 1606
-- On procs shift to state 1614
-- On proc shift to state 1613
## Reductions:
-- On EOF
--   reduce production procs ->

State 1614:
## Known stack suffix:
## proc procs
## LR(1) items:
procs -> proc procs . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production procs -> proc procs

