%{

  open Ast
  open Types
  open Parsing
  open Ptree
  
  let _ = Smt.set_cc false; Smt.set_arith false; Smt.set_sum false


  (* Helper functions for location info *)

  let loc () = (symbol_start_pos (), symbol_end_pos ())
  let loc_i i = (rhs_start_pos i, rhs_end_pos i)
  let loc_ij i j = (rhs_start_pos i, rhs_end_pos j)


  type t = 
    | Assign of Hstring.t * pglob_update
    | Nondet of Hstring.t
    | Upd of pupdate

  module S = Set.Make(Hstring)

  module Constructors = struct
    let s = ref (S.add (Hstring.make "@MTrue") 
		   (S.singleton (Hstring.make "@MFalse")))
    let add x = s := S.add x !s
    let mem x = S.mem x !s
  end

  module Globals = struct
    let s = ref S.empty
    let add x = s := S.add x !s
    let mem x = S.mem x !s
  end

  module Arrays = struct
    let s = ref S.empty
    let add x = s := S.add x !s
    let mem x = S.mem x !s
  end

  module Consts = struct
    let s = ref S.empty
    let add x = s := S.add x !s
    let mem x = S.mem x !s
  end

  let sort s = 
    if Constructors.mem s then Constr
    else if Globals.mem s then Glob
    else
      begin
        (* assert (not (Arrays.mem s)); *)
        Var
      end

  let hproc = Hstring.make "proc"
  let hreal = Hstring.make "real"
  let hint = Hstring.make "int"

  let set_from_list = List.fold_left (fun sa a -> SAtom.add a sa) SAtom.empty 

  let fresh_var = 
    let cpt = ref 0 in
    fun () -> incr cpt; Hstring.make ("_j"^(string_of_int !cpt))

%}
%start system
%token AFFECT
%token AND
%token ARRAY
%token BAR
%token CASE
%token COLON
%token COMMA
%token CONST
%token <string> CONSTPROC
%token DOT
%token ELSE
%token EOF
%token EQ
%token EQUIV
%token EXISTS
%token EXISTS_OTHER
%token FALSE
%token FORALL
%token FORALL_OTHER
%token GE
%token GT
%token IF
%token IMP
%token IN
%token INIT
%token <Num.num> INT
%token INVARIANT
%token LE
%token LEFTBR
%token LEFTPAR
%token LEFTSQ
%token LET
%token <string> LIDENT
%token LT
%token <string> MIDENT
%token MINUS
%token NEQ
%token NOT
%token OR
%token PLUS
%token PREDICATE
%token PV
%token QMARK
%token <Num.num> REAL
%token REQUIRE
%token RIGHTBR
%token RIGHTPAR
%token RIGHTSQ
%token SIZEPROC
%token THEN
%token TIMES
%token TRANSITION
%token TRUE
%token TYPE
%token UNDERSCORE
%token UNSAFE
%token VAR
%nonassoc IN
%nonassoc prec_exists prec_forall
%right EQUIV IMP
%right OR
%right AND
%nonassoc prec_ite
%nonassoc NOT
%type <Ast.system> system
%%

system:
  _1 = size_proc _2 = type_defs _3 = symbold_decls _4 = decl_list _5 = EOF
    {( let ptype_defs = _2 in
  Smt.set_sum true;
  let b = [Hstring.make "@MTrue"; Hstring.make "@MFalse"] in
  List.iter Constructors.add b;
  let ptype_defs = (loc (), (Hstring.make "mbool", b)) :: ptype_defs in
  let pconsts, pglobals, parrays = _3 in
  psystem_of_decls ~pglobals ~pconsts ~parrays ~ptype_defs _4
   |> encode_psystem 
)}

decl_list:
  _1 = decl
    {         ( [_1] )}
| _1 = decl _2 = decl_list
    {                   ( _1 :: _2 )}

decl:
  _1 = init
    {         ( PInit _1 )}
| _1 = invariant
    {              ( PInv _1 )}
| _1 = unsafe
    {           ( PUnsafe _1 )}
| _1 = transition
    {               ( PTrans _1 )}
| _1 = function_decl
    {                  ( PFun  )}

symbold_decls:
  
    {    ( [], [], [] )}
| _1 = const_decl _2 = symbold_decls
    {      ( let consts, vars, arrays = _2 in (_1::consts), vars, arrays )}
| _1 = var_decl _2 = symbold_decls
    {      ( let consts, vars, arrays = _2 in consts, (_1::vars), arrays )}
| _1 = array_decl _2 = symbold_decls
    {      ( let consts, vars, arrays = _2 in consts, vars, (_1::arrays) )}

function_decl:
  _1 = PREDICATE _2 = lident _3 = LEFTPAR _4 = lident_comma_list _5 = RIGHTPAR _6 = LEFTBR _7 = expr _8 = RIGHTBR
    {                                                                            (
    add_fun_def _2 _4 _7
  )}

var_decl:
  _1 = VAR _2 = mident _3 = COLON _4 = lident
    {                            ( 
    if Hstring.equal _4 hint || Hstring.equal _4 hreal then Smt.set_arith true;
    Globals.add _2; 
    loc (), _2, _4 )}

const_decl:
  _1 = CONST _2 = mident _3 = COLON _4 = lident
    {                              ( 
    if Hstring.equal _4 hint || Hstring.equal _4 hreal then Smt.set_arith true;
    Consts.add _2;
    loc (), _2, _4 )}

array_decl:
  _1 = ARRAY _2 = mident _3 = LEFTSQ _4 = lident_list_plus _5 = RIGHTSQ _6 = COLON _7 = lident
    {                                                              ( 
        if not (List.for_all (fun p -> Hstring.equal p hproc) _4) then
          raise Parsing.Parse_error;
        if Hstring.equal _7 hint || Hstring.equal _7 hreal then Smt.set_arith true;
	Arrays.add _2;
	loc (), _2, (_4, _7))}

type_defs:
  
    {    ( [] )}
| _1 = type_def_plus
    {                  ( _1 )}

type_def_plus:
  _1 = type_def
    {             ( [_1] )}
| _1 = type_def _2 = type_def_plus
    {                           ( _1::_2 )}

size_proc:
  
    {    ( () )}
| _1 = SIZEPROC _2 = INT
    {                 ( Options.size_proc := Num.int_of_num _2 )}

type_def:
  _1 = TYPE _2 = lident
    {                ( (loc (), (_2, [])) )}
| _1 = TYPE _2 = lident _3 = EQ _4 = constructors
    {      ( Smt.set_sum true; List.iter Constructors.add _4; (loc (), (_2, _4)) )}
| _1 = TYPE _2 = lident _3 = EQ _4 = BAR _5 = constructors
    {      ( Smt.set_sum true; List.iter Constructors.add _5; (loc (), (_2, _5)) )}

constructors:
  _1 = mident
    {           ( [_1] )}
| _1 = mident _2 = BAR _3 = constructors
    {                            ( _1::_3 )}

init:
  _1 = INIT _2 = LEFTBR _3 = expr _4 = RIGHTBR
    {                             ( loc (), [], _3 )}
| _1 = INIT _2 = LEFTPAR _3 = lidents _4 = RIGHTPAR _5 = LEFTBR _6 = expr _7 = RIGHTBR
    {                                                      ( loc (), _3, _6 )}

invariant:
  _1 = INVARIANT _2 = LEFTBR _3 = expr _4 = RIGHTBR
    {                                  ( loc (), [], _3 )}
| _1 = INVARIANT _2 = LEFTPAR _3 = lidents _4 = RIGHTPAR _5 = LEFTBR _6 = expr _7 = RIGHTBR
    {                                                           ( loc (), _3, _6 )}

unsafe:
  _1 = UNSAFE _2 = LEFTBR _3 = expr _4 = RIGHTBR
    {                               ( loc (), [], _3 )}
| _1 = UNSAFE _2 = LEFTPAR _3 = lidents _4 = RIGHTPAR _5 = LEFTBR _6 = expr _7 = RIGHTBR
    {                                                        ( loc (), _3, _6 )}

transition_name:
  _1 = lident
    {           (_1)}
| _1 = mident
    {           (_1)}

transition:
  _1 = TRANSITION _2 = transition_name _3 = LEFTPAR _4 = lidents _5 = RIGHTPAR _6 = require _7 = LEFTBR _8 = let_assigns_nondets_updates _9 = RIGHTBR
    {      ( let lets, (assigns, nondets, upds) = _8 in
	{   ptr_lets = lets;
	    ptr_name = _2;
            ptr_args = _4; 
	    ptr_reqs = _6;
	    ptr_assigns = assigns; 
	    ptr_nondets = nondets; 
	    ptr_upds = upds;
            ptr_loc = loc ();
          }
      )}

let_assigns_nondets_updates:
  _1 = assigns_nondets_updates
    {                            ( [], _1 )}
| _1 = LET _2 = lident _3 = EQ _4 = term _5 = IN _6 = let_assigns_nondets_updates
    {                                                      (
	  let lets, l = _6 in
	  (_2, _4) :: lets, l)}

assigns_nondets_updates:
  
    {     ( [], [], [] )}
| _1 = assign_nondet_update
    {      (  
	match _1 with
	  | Assign (x, y) -> [x, y], [], []
	  | Nondet x -> [], [x], []
	  | Upd x -> [], [], [x]
      )}
| _1 = assign_nondet_update _2 = PV _3 = assigns_nondets_updates
    {      ( 
	let assigns, nondets, upds = _3 in
	match _1 with
	  | Assign (x, y) -> (x, y) :: assigns, nondets, upds
	  | Nondet x -> assigns, x :: nondets, upds
	  | Upd x -> assigns, nondets, x :: upds
      )}

assign_nondet_update:
  _1 = assignment
    {               ( _1 )}
| _1 = nondet
    {           ( _1 )}
| _1 = update
    {           ( _1 )}

assignment:
  _1 = mident _2 = AFFECT _3 = term
    {                       ( Assign (_1, PUTerm _3) )}
| _1 = mident _2 = AFFECT _3 = CASE _4 = switchs
    {                               ( Assign (_1, PUCase _4) )}

nondet:
  _1 = mident _2 = AFFECT _3 = DOT
    {                      ( Nondet _1 )}
| _1 = mident _2 = AFFECT _3 = QMARK
    {                        ( Nondet _1 )}

require:
  
    {    ( PAtom (AAtom (Atom.True)) )}
| _1 = REQUIRE _2 = LEFTBR _3 = expr _4 = RIGHTBR
    {                                ( _3 )}

update:
  _1 = mident _2 = LEFTSQ _3 = proc_name_list_plus _4 = RIGHTSQ _5 = AFFECT _6 = CASE _7 = switchs
    {      ( List.iter (fun p ->
          if (Hstring.view p).[0] = '#' then
            raise Parsing.Parse_error;
        ) _3;
        Upd { pup_loc = loc (); pup_arr = _1; pup_arg = _3; pup_swts = _7} )}
| _1 = mident _2 = LEFTSQ _3 = proc_name_list_plus _4 = RIGHTSQ _5 = AFFECT _6 = term
    {      ( let cube, rjs =
          List.fold_left (fun (cube, rjs) i ->
            let j = fresh_var () in
            let c = PAtom (AEq (TVar j, TVar i)) in
            c :: cube, j :: rjs) ([], []) _3 in
        let a = PAnd cube in
        let js = List.rev rjs in
	let sw = [(a, _6); (PAtom (AAtom Atom.True), TTerm (Access(_1, js)))] in
	Upd { pup_loc = loc (); pup_arr = _1; pup_arg = js; pup_swts = sw}  )}

switchs:
  _1 = BAR _2 = UNDERSCORE _3 = COLON _4 = term
    {                              ( [(PAtom (AAtom (Atom.True)), _4)] )}
| _1 = BAR _2 = switch
    {               ( [_2] )}
| _1 = BAR _2 = switch _3 = switchs
    {                       ( _2::_3 )}

switch:
  _1 = expr _2 = COLON _3 = term
    {                    ( _1, _3 )}

constnum:
  _1 = REAL
    {         ( ConstReal _1 )}
| _1 = INT
    {        ( ConstInt _1 )}

var_term:
  _1 = mident
    {           ( 
      if Consts.mem _1 then Const (MConst.add (ConstName _1) 1 MConst.empty)
      else Elem (_1, sort _1) )}
| _1 = proc_name
    {              ( Elem (_1, Var) )}

top_id_term:
  _1 = var_term
    {             ( match _1 with
                 | Elem (v, Var) -> TVar v
                 | _ -> TTerm _1 )}

array_term:
  _1 = mident _2 = LEFTSQ _3 = proc_name_list_plus _4 = RIGHTSQ
    {                                              (
    Access (_1, _3)
  )}

var_or_array_term:
  _1 = var_term
    {             ( _1 )}
| _1 = array_term
    {               ( _1 )}

arith_term:
  _1 = var_or_array_term _2 = PLUS _3 = constnum
    {      ( Arith(_1, MConst.add _3 1 MConst.empty) )}
| _1 = var_or_array_term _2 = MINUS _3 = constnum
    {      ( Arith(_1, MConst.add _3 (-1) MConst.empty) )}
| _1 = var_or_array_term _2 = PLUS _3 = mident
    {      ( Arith(_1, MConst.add (ConstName _3) 1 MConst.empty) )}
| _1 = var_or_array_term _2 = PLUS _3 = INT _4 = TIMES _5 = mident
    {      ( Arith(_1, MConst.add (ConstName _5) (Num.int_of_num _3) MConst.empty) )}
| _1 = var_or_array_term _2 = PLUS _3 = mident _4 = TIMES _5 = INT
    {      ( Arith(_1, MConst.add (ConstName _3) (Num.int_of_num _5) MConst.empty) )}
| _1 = var_or_array_term _2 = MINUS _3 = mident
    {      ( Arith(_1, MConst.add (ConstName _3) (-1) MConst.empty) )}
| _1 = var_or_array_term _2 = MINUS _3 = INT _4 = TIMES _5 = mident
    {      ( Arith(_1, MConst.add (ConstName _5) (- (Num.int_of_num _3)) MConst.empty) )}
| _1 = var_or_array_term _2 = MINUS _3 = mident _4 = TIMES _5 = INT
    {      ( Arith(_1, MConst.add (ConstName _3) (- (Num.int_of_num _5)) MConst.empty) )}
| _1 = INT _2 = TIMES _3 = mident
    {      ( Const(MConst.add (ConstName _3) (Num.int_of_num _1) MConst.empty) )}
| _1 = MINUS _2 = INT _3 = TIMES _4 = mident
    {      ( Const(MConst.add (ConstName _4) (- (Num.int_of_num _2)) MConst.empty) )}
| _1 = constnum
    {             ( Const (MConst.add _1 1 MConst.empty) )}

term:
  _1 = top_id_term
    {                ( _1 )}
| _1 = array_term
    {               ( TTerm _1 )}
| _1 = arith_term
    {               ( Smt.set_arith true; TTerm _1 )}

lident:
  _1 = LIDENT
    {           ( Hstring.make _1 )}

const_proc:
  _1 = CONSTPROC
    {              ( Hstring.make _1 )}

proc_name:
  _1 = lident
    {           ( _1 )}
| _1 = const_proc
    {               ( _1 )}

proc_name_list_plus:
  _1 = proc_name
    {              ( [_1] )}
| _1 = proc_name _2 = COMMA _3 = proc_name_list_plus
    {                                        ( _1::_3 )}

mident:
  _1 = MIDENT
    {           ( Hstring.make _1 )}

lidents_plus:
  _1 = lident
    {           ( [_1] )}
| _1 = lident _2 = lidents_plus
    {                        ( _1::_2 )}

lidents:
  
    {    ( [] )}
| _1 = lidents_plus
    {                 ( _1 )}

lident_list_plus:
  _1 = lident
    {           ( [_1] )}
| _1 = lident _2 = COMMA _3 = lident_list_plus
    {                                  ( _1::_3 )}

lident_comma_list:
  
    {    ( [] )}
| _1 = lident_list_plus
    {                     ( _1 )}

lidents_plus_distinct:
  _1 = lident
    {           ( [_1] )}
| _1 = lident _2 = NEQ _3 = lidents_plus_distinct
    {                                     ( _1 :: _3 )}

literal:
  _1 = TRUE
    {         ( AAtom Atom.True )}
| _1 = FALSE
    {          ( AAtom Atom.False )}
| _1 = term _2 = EQ _3 = term
    {                 ( AEq (_1, _3) )}
| _1 = term _2 = NEQ _3 = term
    {                  ( ANeq (_1, _3) )}
| _1 = term _2 = LT _3 = term
    {                 ( Smt.set_arith true; ALt (_1, _3) )}
| _1 = term _2 = LE _3 = term
    {                 ( Smt.set_arith true; ALe (_1, _3) )}
| _1 = term _2 = GT _3 = term
    {                 ( Smt.set_arith true; ALt (_3, _1) )}
| _1 = term _2 = GE _3 = term
    {                 ( Smt.set_arith true; ALe (_3, _1) )}

expr:
  _1 = simple_expr
    {                ( _1 )}
| _1 = NOT _2 = expr
    {             ( PNot _2 )}
| _1 = expr _2 = AND _3 = expr
    {                  ( PAnd [_1; _3] )}
| _1 = expr _2 = OR _3 = expr
    {                  ( POr [_1; _3] )}
| _1 = expr _2 = IMP _3 = expr
    {                  ( PImp (_1, _3) )}
| _1 = expr _2 = EQUIV _3 = expr
    {                    ( PEquiv (_1, _3) )}
| _1 = IF _2 = expr _3 = THEN _4 = expr _5 = ELSE _6 = expr %prec prec_ite
    {                                               ( PIte (_2, _4, _6) )}
| _1 = FORALL _2 = lidents_plus_distinct _3 = DOT _4 = expr %prec prec_forall
    {                                                            ( PForall (_2, _4) )}
| _1 = EXISTS _2 = lidents_plus_distinct _3 = DOT _4 = expr %prec prec_exists
    {                                                            ( PExists (_2, _4) )}
| _1 = FORALL_OTHER _2 = lident _3 = DOT _4 = expr %prec prec_forall
    {                                                   ( PForall_other ([_2], _4) )}
| _1 = EXISTS_OTHER _2 = lident _3 = DOT _4 = expr %prec prec_exists
    {                                                   ( PExists_other ([_2], _4) )}

simple_expr:
  _1 = literal
    {            ( PAtom _1 )}
| _1 = LEFTPAR _2 = expr _3 = RIGHTPAR
    {                          ( _2 )}
| _1 = lident _2 = LEFTPAR _3 = expr_or_term_comma_list _4 = RIGHTPAR
    {                                                    ( app_fun _1 _3 )}

expr_or_term_comma_list:
  
    {    ( [] )}
| _1 = term
    {          ( [PT _1] )}
| _1 = expr
    {          ( [PF _1] )}
| _1 = term _2 = COMMA _3 = expr_or_term_comma_list
    {                                       ( PT _1 :: _3 )}
| _1 = expr _2 = COMMA _3 = expr_or_term_comma_list
    {                                       ( PF _1 :: _3 )}

%%
