State 0:
## Known stack suffix:
##
## LR(1) items:
ident_top' -> . ident_top [ # ]
## Transitions:
-- On IDENT shift to state 1
-- On ident_top shift to state 2
-- On ident shift to state 3
## Reductions:

State 1:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ RBRACKET LBRACKET EQ EOL COMMA COLON ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production ident -> IDENT

State 2:
## Known stack suffix:
## ident_top
## LR(1) items:
ident_top' -> ident_top . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept ident_top

State 3:
## Known stack suffix:
## ident
## LR(1) items:
ident_top -> ident . EOL [ # ]
## Transitions:
-- On EOL shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## ident EOL
## LR(1) items:
ident_top -> ident EOL . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production ident_top -> ident EOL

State 5:
## Known stack suffix:
##
## LR(1) items:
int_top' -> . int_top [ # ]
## Transitions:
-- On POSINT shift to state 6
-- On NEGINT shift to state 7
-- On int_top shift to state 8
-- On int shift to state 9
## Reductions:

State 6:
## Known stack suffix:
## POSINT
## LR(1) items:
int -> POSINT . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production int -> POSINT

State 7:
## Known stack suffix:
## NEGINT
## LR(1) items:
int -> NEGINT . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production int -> NEGINT

State 8:
## Known stack suffix:
## int_top
## LR(1) items:
int_top' -> int_top . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept int_top

State 9:
## Known stack suffix:
## int
## LR(1) items:
int_top -> int . EOL [ # ]
## Transitions:
-- On EOL shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## int EOL
## LR(1) items:
int_top -> int EOL . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production int_top -> int EOL

State 11:
## Known stack suffix:
##
## LR(1) items:
pkgname_top' -> . pkgname_top [ # ]
## Transitions:
-- On POSINT shift to state 12
-- On PKGNAME shift to state 13
-- On NEGINT shift to state 14
-- On IDENT shift to state 15
-- On pkgname_top shift to state 16
-- On pkgname shift to state 17
## Reductions:

State 12:
## Known stack suffix:
## POSINT
## LR(1) items:
pkgname -> POSINT . [ RELOP RBRACKET PIPE EQ EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pkgname -> POSINT

State 13:
## Known stack suffix:
## PKGNAME
## LR(1) items:
pkgname -> PKGNAME . [ RELOP RBRACKET PIPE EQ EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pkgname -> PKGNAME

State 14:
## Known stack suffix:
## NEGINT
## LR(1) items:
pkgname -> NEGINT . [ RELOP RBRACKET PIPE EQ EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pkgname -> NEGINT

State 15:
## Known stack suffix:
## IDENT
## LR(1) items:
pkgname -> IDENT . [ RELOP RBRACKET PIPE EQ EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production pkgname -> IDENT

State 16:
## Known stack suffix:
## pkgname_top
## LR(1) items:
pkgname_top' -> pkgname_top . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept pkgname_top

State 17:
## Known stack suffix:
## pkgname
## LR(1) items:
pkgname_top -> pkgname . EOL [ # ]
## Transitions:
-- On EOL shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## pkgname EOL
## LR(1) items:
pkgname_top -> pkgname EOL . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production pkgname_top -> pkgname EOL

State 19:
## Known stack suffix:
##
## LR(1) items:
qstring_top' -> . qstring_top [ # ]
## Transitions:
-- On QSTRING shift to state 20
-- On qstring_top shift to state 21
-- On qstring shift to state 22
## Reductions:

State 20:
## Known stack suffix:
## QSTRING
## LR(1) items:
qstring -> QSTRING . [ RBRACKET EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production qstring -> QSTRING

State 21:
## Known stack suffix:
## qstring_top
## LR(1) items:
qstring_top' -> qstring_top . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept qstring_top

State 22:
## Known stack suffix:
## qstring
## LR(1) items:
qstring_top -> qstring . EOL [ # ]
## Transitions:
-- On EOL shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## qstring EOL
## LR(1) items:
qstring_top -> qstring EOL . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production qstring_top -> qstring EOL

State 24:
## Known stack suffix:
##
## LR(1) items:
type_top' -> . type_top [ # ]
## Transitions:
-- On IDENT shift to state 1
-- On type_top shift to state 25
-- On type_ shift to state 26
-- On ident shift to state 28
## Reductions:

State 25:
## Known stack suffix:
## type_top
## LR(1) items:
type_top' -> type_top . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept type_top

State 26:
## Known stack suffix:
## type_
## LR(1) items:
type_top -> type_ . EOL [ # ]
## Transitions:
-- On EOL shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## type_ EOL
## LR(1) items:
type_top -> type_ EOL . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production type_top -> type_ EOL

State 28:
## Known stack suffix:
## ident
## LR(1) items:
type_ -> ident . [ EQ EOL COMMA ]
type_ -> ident . LBRACKET enums RBRACKET [ EQ EOL COMMA ]
## Transitions:
-- On LBRACKET shift to state 29
## Reductions:
-- On EQ EOL COMMA
--   reduce production type_ -> ident

State 29:
## Known stack suffix:
## ident LBRACKET
## LR(1) items:
type_ -> ident LBRACKET . enums RBRACKET [ EQ EOL COMMA ]
## Transitions:
-- On IDENT shift to state 1
-- On ident shift to state 30
-- On enums shift to state 33
## Reductions:

State 30:
## Known stack suffix:
## ident
## LR(1) items:
enums -> ident . [ RBRACKET ]
enums -> ident . COMMA enums [ RBRACKET ]
## Transitions:
-- On COMMA shift to state 31
## Reductions:
-- On RBRACKET
--   reduce production enums -> ident

State 31:
## Known stack suffix:
## ident COMMA
## LR(1) items:
enums -> ident COMMA . enums [ RBRACKET ]
## Transitions:
-- On IDENT shift to state 1
-- On ident shift to state 30
-- On enums shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## ident COMMA enums
## LR(1) items:
enums -> ident COMMA enums . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production enums -> ident COMMA enums

State 33:
## Known stack suffix:
## ident LBRACKET enums
## LR(1) items:
type_ -> ident LBRACKET enums . RBRACKET [ EQ EOL COMMA ]
## Transitions:
-- On RBRACKET shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## ident LBRACKET enums RBRACKET
## LR(1) items:
type_ -> ident LBRACKET enums RBRACKET . [ EQ EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production type_ -> ident LBRACKET enums RBRACKET

State 35:
## Known stack suffix:
##
## LR(1) items:
typedecl_top' -> . typedecl_top [ # ]
## Transitions:
-- On IDENT shift to state 1
-- On typedecl_top shift to state 36
-- On typedecl_ne shift to state 37
-- On typedecl_ shift to state 38
-- On typedecl shift to state 82
-- On ident shift to state 41
## Reductions:
-- On EOL
--   reduce production typedecl ->

State 36:
## Known stack suffix:
## typedecl_top
## LR(1) items:
typedecl_top' -> typedecl_top . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept typedecl_top

State 37:
## Known stack suffix:
## typedecl_ne
## LR(1) items:
typedecl -> typedecl_ne . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedecl -> typedecl_ne

State 38:
## Known stack suffix:
## typedecl_
## LR(1) items:
typedecl_ne -> typedecl_ . [ EOL ]
typedecl_ne -> typedecl_ . COMMA typedecl_ne [ EOL ]
## Transitions:
-- On COMMA shift to state 39
## Reductions:
-- On EOL
--   reduce production typedecl_ne -> typedecl_

State 39:
## Known stack suffix:
## typedecl_ COMMA
## LR(1) items:
typedecl_ne -> typedecl_ COMMA . typedecl_ne [ EOL ]
## Transitions:
-- On IDENT shift to state 1
-- On typedecl_ne shift to state 40
-- On typedecl_ shift to state 38
-- On ident shift to state 41
## Reductions:

State 40:
## Known stack suffix:
## typedecl_ COMMA typedecl_ne
## LR(1) items:
typedecl_ne -> typedecl_ COMMA typedecl_ne . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedecl_ne -> typedecl_ COMMA typedecl_ne

State 41:
## Known stack suffix:
## ident
## LR(1) items:
typedecl_ -> ident . COLON type_ [ EOL COMMA ]
typedecl_ -> ident . COLON type_ EQ LBRACKET typed_value RBRACKET [ EOL COMMA ]
## Transitions:
-- On COLON shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## ident COLON
## LR(1) items:
typedecl_ -> ident COLON . type_ [ EOL COMMA ]
typedecl_ -> ident COLON . type_ EQ LBRACKET typed_value RBRACKET [ EOL COMMA ]
## Transitions:
-- On IDENT shift to state 1
-- On type_ shift to state 43
-- On ident shift to state 28
## Reductions:

State 43:
## Known stack suffix:
## ident COLON type_
## LR(1) items:
typedecl_ -> ident COLON type_ . [ EOL COMMA ]
typedecl_ -> ident COLON type_ . EQ LBRACKET typed_value RBRACKET [ EOL COMMA ]
## Transitions:
-- On EQ shift to state 44
## Reductions:
-- On EOL COMMA
--   reduce production typedecl_ -> ident COLON type_

State 44:
## Known stack suffix:
## ident COLON type_ EQ
## LR(1) items:
typedecl_ -> ident COLON type_ EQ . LBRACKET typed_value RBRACKET [ EOL COMMA ]
## Transitions:
-- On LBRACKET shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## ident COLON type_ EQ LBRACKET
## LR(1) items:
typedecl_ -> ident COLON type_ EQ LBRACKET . typed_value RBRACKET [ EOL COMMA ]
## Transitions:
-- On VPKGTRUE shift to state 46
-- On VPKGFALSE shift to state 47
-- On QSTRING shift to state 20
-- On POSINT shift to state 48
-- On PKGNAME shift to state 49
-- On NEGINT shift to state 50
-- On IDENT shift to state 51
-- On vpkgformula_ntriv shift to state 52
-- On vpkg_ntriv shift to state 53
-- On vpkg shift to state 54
-- On typed_value shift to state 66
-- On qstring shift to state 68
-- On pkgname shift to state 69
-- On or_formula_ntriv shift to state 72
-- On or_formula shift to state 73
-- On int shift to state 79
-- On ident shift to state 80
-- On and_formula_ntriv shift to state 81
## Reductions:
-- On RBRACKET
--   reduce production typed_value ->

State 46:
## Known stack suffix:
## VPKGTRUE
## LR(1) items:
vpkgformula_ntriv -> VPKGTRUE . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vpkgformula_ntriv -> VPKGTRUE

State 47:
## Known stack suffix:
## VPKGFALSE
## LR(1) items:
vpkgformula_ntriv -> VPKGFALSE . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vpkgformula_ntriv -> VPKGFALSE

State 48:
## Known stack suffix:
## POSINT
## LR(1) items:
int -> POSINT . [ RBRACKET ]
pkgname -> POSINT . [ RELOP PIPE EQ COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production int -> POSINT
-- On RELOP PIPE EQ COMMA
--   reduce production pkgname -> POSINT

State 49:
## Known stack suffix:
## PKGNAME
## LR(1) items:
pkgname -> PKGNAME . [ RELOP PIPE EQ COMMA ]
vpkg_ntriv -> PKGNAME . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RELOP PIPE EQ COMMA
--   reduce production pkgname -> PKGNAME
-- On RBRACKET
--   reduce production vpkg_ntriv -> PKGNAME

State 50:
## Known stack suffix:
## NEGINT
## LR(1) items:
int -> NEGINT . [ RBRACKET ]
pkgname -> NEGINT . [ RELOP PIPE EQ COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production int -> NEGINT
-- On RELOP PIPE EQ COMMA
--   reduce production pkgname -> NEGINT

State 51:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ RBRACKET ]
pkgname -> IDENT . [ RELOP PIPE EQ COMMA ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production ident -> IDENT
-- On RELOP PIPE EQ COMMA
--   reduce production pkgname -> IDENT

State 52:
## Known stack suffix:
## vpkgformula_ntriv
## LR(1) items:
typed_value -> vpkgformula_ntriv . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_value -> vpkgformula_ntriv

State 53:
## Known stack suffix:
## vpkg_ntriv
## LR(1) items:
or_formula_ntriv -> vpkg_ntriv . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production or_formula_ntriv -> vpkg_ntriv

State 54:
## Known stack suffix:
## vpkg
## LR(1) items:
or_formula -> vpkg . [ COMMA ]
or_formula -> vpkg . PIPE or_formula [ COMMA ]
or_formula_ntriv -> vpkg . PIPE or_formula [ RBRACKET ]
## Transitions:
-- On PIPE shift to state 55
## Reductions:
-- On COMMA
--   reduce production or_formula -> vpkg

State 55:
## Known stack suffix:
## vpkg PIPE
## LR(1) items:
or_formula -> vpkg PIPE . or_formula [ COMMA ]
or_formula_ntriv -> vpkg PIPE . or_formula [ RBRACKET ]
## Transitions:
-- On POSINT shift to state 12
-- On PKGNAME shift to state 13
-- On NEGINT shift to state 14
-- On IDENT shift to state 15
-- On vpkg shift to state 56
-- On pkgname shift to state 58
-- On or_formula shift to state 65
## Reductions:

State 56:
## Known stack suffix:
## vpkg
## LR(1) items:
or_formula -> vpkg . [ RBRACKET EOL COMMA ]
or_formula -> vpkg . PIPE or_formula [ RBRACKET EOL COMMA ]
## Transitions:
-- On PIPE shift to state 57
## Reductions:
-- On RBRACKET EOL COMMA
--   reduce production or_formula -> vpkg

State 57:
## Known stack suffix:
## vpkg PIPE
## LR(1) items:
or_formula -> vpkg PIPE . or_formula [ RBRACKET EOL COMMA ]
## Transitions:
-- On POSINT shift to state 12
-- On PKGNAME shift to state 13
-- On NEGINT shift to state 14
-- On IDENT shift to state 15
-- On vpkg shift to state 56
-- On pkgname shift to state 58
-- On or_formula shift to state 64
## Reductions:

State 58:
## Known stack suffix:
## pkgname
## LR(1) items:
vpkg -> pkgname . [ RBRACKET PIPE EOL COMMA ]
vpkg -> pkgname . relop version [ RBRACKET PIPE EOL COMMA ]
## Transitions:
-- On RELOP shift to state 59
-- On EQ shift to state 60
-- On relop shift to state 61
## Reductions:
-- On RBRACKET PIPE EOL COMMA
--   reduce production vpkg -> pkgname

State 59:
## Known stack suffix:
## RELOP
## LR(1) items:
relop -> RELOP . [ POSINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relop -> RELOP

State 60:
## Known stack suffix:
## EQ
## LR(1) items:
relop -> EQ . [ POSINT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production relop -> EQ

State 61:
## Known stack suffix:
## pkgname relop
## LR(1) items:
vpkg -> pkgname relop . version [ RBRACKET PIPE EOL COMMA ]
## Transitions:
-- On POSINT shift to state 62
-- On version shift to state 63
## Reductions:

State 62:
## Known stack suffix:
## POSINT
## LR(1) items:
version -> POSINT . [ RBRACKET PIPE EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production version -> POSINT

State 63:
## Known stack suffix:
## pkgname relop version
## LR(1) items:
vpkg -> pkgname relop version . [ RBRACKET PIPE EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vpkg -> pkgname relop version

State 64:
## Known stack suffix:
## vpkg PIPE or_formula
## LR(1) items:
or_formula -> vpkg PIPE or_formula . [ RBRACKET EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production or_formula -> vpkg PIPE or_formula

State 65:
## Known stack suffix:
## vpkg PIPE or_formula
## LR(1) items:
or_formula -> vpkg PIPE or_formula . [ COMMA ]
or_formula_ntriv -> vpkg PIPE or_formula . [ RBRACKET ]
## Transitions:
## Reductions:
-- On COMMA
--   reduce production or_formula -> vpkg PIPE or_formula
-- On RBRACKET
--   reduce production or_formula_ntriv -> vpkg PIPE or_formula

State 66:
## Known stack suffix:
## ident COLON type_ EQ LBRACKET typed_value
## LR(1) items:
typedecl_ -> ident COLON type_ EQ LBRACKET typed_value . RBRACKET [ EOL COMMA ]
## Transitions:
-- On RBRACKET shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## ident COLON type_ EQ LBRACKET typed_value RBRACKET
## LR(1) items:
typedecl_ -> ident COLON type_ EQ LBRACKET typed_value RBRACKET . [ EOL COMMA ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typedecl_ -> ident COLON type_ EQ LBRACKET typed_value RBRACKET

State 68:
## Known stack suffix:
## qstring
## LR(1) items:
typed_value -> qstring . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_value -> qstring

State 69:
## Known stack suffix:
## pkgname
## LR(1) items:
vpkg -> pkgname . [ PIPE COMMA ]
vpkg -> pkgname . relop version [ PIPE COMMA ]
vpkg_ntriv -> pkgname . relop version [ RBRACKET ]
## Transitions:
-- On RELOP shift to state 59
-- On EQ shift to state 60
-- On relop shift to state 70
## Reductions:
-- On PIPE COMMA
--   reduce production vpkg -> pkgname

State 70:
## Known stack suffix:
## pkgname relop
## LR(1) items:
vpkg -> pkgname relop . version [ PIPE COMMA ]
vpkg_ntriv -> pkgname relop . version [ RBRACKET ]
## Transitions:
-- On POSINT shift to state 62
-- On version shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## pkgname relop version
## LR(1) items:
vpkg -> pkgname relop version . [ PIPE COMMA ]
vpkg_ntriv -> pkgname relop version . [ RBRACKET ]
## Transitions:
## Reductions:
-- On PIPE COMMA
--   reduce production vpkg -> pkgname relop version
-- On RBRACKET
--   reduce production vpkg_ntriv -> pkgname relop version

State 72:
## Known stack suffix:
## or_formula_ntriv
## LR(1) items:
and_formula_ntriv -> or_formula_ntriv . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production and_formula_ntriv -> or_formula_ntriv

State 73:
## Known stack suffix:
## or_formula
## LR(1) items:
and_formula_ntriv -> or_formula . COMMA and_formula [ RBRACKET ]
## Transitions:
-- On COMMA shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## or_formula COMMA
## LR(1) items:
and_formula_ntriv -> or_formula COMMA . and_formula [ RBRACKET ]
## Transitions:
-- On POSINT shift to state 12
-- On PKGNAME shift to state 13
-- On NEGINT shift to state 14
-- On IDENT shift to state 15
-- On vpkg shift to state 56
-- On pkgname shift to state 58
-- On or_formula shift to state 75
-- On and_formula shift to state 78
## Reductions:

State 75:
## Known stack suffix:
## or_formula
## LR(1) items:
and_formula -> or_formula . [ RBRACKET EOL ]
and_formula -> or_formula . COMMA and_formula [ RBRACKET EOL ]
## Transitions:
-- On COMMA shift to state 76
## Reductions:
-- On RBRACKET EOL
--   reduce production and_formula -> or_formula

State 76:
## Known stack suffix:
## or_formula COMMA
## LR(1) items:
and_formula -> or_formula COMMA . and_formula [ RBRACKET EOL ]
## Transitions:
-- On POSINT shift to state 12
-- On PKGNAME shift to state 13
-- On NEGINT shift to state 14
-- On IDENT shift to state 15
-- On vpkg shift to state 56
-- On pkgname shift to state 58
-- On or_formula shift to state 75
-- On and_formula shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## or_formula COMMA and_formula
## LR(1) items:
and_formula -> or_formula COMMA and_formula . [ RBRACKET EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production and_formula -> or_formula COMMA and_formula

State 78:
## Known stack suffix:
## or_formula COMMA and_formula
## LR(1) items:
and_formula_ntriv -> or_formula COMMA and_formula . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production and_formula_ntriv -> or_formula COMMA and_formula

State 79:
## Known stack suffix:
## int
## LR(1) items:
typed_value -> int . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_value -> int

State 80:
## Known stack suffix:
## ident
## LR(1) items:
typed_value -> ident . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production typed_value -> ident

State 81:
## Known stack suffix:
## and_formula_ntriv
## LR(1) items:
vpkgformula_ntriv -> and_formula_ntriv . [ RBRACKET ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vpkgformula_ntriv -> and_formula_ntriv

State 82:
## Known stack suffix:
## typedecl
## LR(1) items:
typedecl_top -> typedecl . EOL [ # ]
## Transitions:
-- On EOL shift to state 83
## Reductions:

State 83:
## Known stack suffix:
## typedecl EOL
## LR(1) items:
typedecl_top -> typedecl EOL . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production typedecl_top -> typedecl EOL

State 84:
## Known stack suffix:
##
## LR(1) items:
vpkg_top' -> . vpkg_top [ # ]
## Transitions:
-- On POSINT shift to state 12
-- On PKGNAME shift to state 13
-- On NEGINT shift to state 14
-- On IDENT shift to state 15
-- On vpkg_top shift to state 85
-- On vpkg shift to state 86
-- On pkgname shift to state 58
## Reductions:

State 85:
## Known stack suffix:
## vpkg_top
## LR(1) items:
vpkg_top' -> vpkg_top . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept vpkg_top

State 86:
## Known stack suffix:
## vpkg
## LR(1) items:
vpkg_top -> vpkg . EOL [ # ]
## Transitions:
-- On EOL shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## vpkg EOL
## LR(1) items:
vpkg_top -> vpkg EOL . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production vpkg_top -> vpkg EOL

State 88:
## Known stack suffix:
##
## LR(1) items:
vpkgformula_top' -> . vpkgformula_top [ # ]
## Transitions:
-- On VPKGTRUE shift to state 89
-- On VPKGFALSE shift to state 90
-- On POSINT shift to state 12
-- On PKGNAME shift to state 13
-- On NEGINT shift to state 14
-- On IDENT shift to state 15
-- On vpkgformula_top shift to state 91
-- On vpkgformula shift to state 92
-- On vpkg shift to state 56
-- On pkgname shift to state 58
-- On or_formula shift to state 75
-- On and_formula shift to state 94
## Reductions:

State 89:
## Known stack suffix:
## VPKGTRUE
## LR(1) items:
vpkgformula -> VPKGTRUE . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vpkgformula -> VPKGTRUE

State 90:
## Known stack suffix:
## VPKGFALSE
## LR(1) items:
vpkgformula -> VPKGFALSE . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vpkgformula -> VPKGFALSE

State 91:
## Known stack suffix:
## vpkgformula_top
## LR(1) items:
vpkgformula_top' -> vpkgformula_top . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept vpkgformula_top

State 92:
## Known stack suffix:
## vpkgformula
## LR(1) items:
vpkgformula_top -> vpkgformula . EOL [ # ]
## Transitions:
-- On EOL shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## vpkgformula EOL
## LR(1) items:
vpkgformula_top -> vpkgformula EOL . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production vpkgformula_top -> vpkgformula EOL

State 94:
## Known stack suffix:
## and_formula
## LR(1) items:
vpkgformula -> and_formula . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vpkgformula -> and_formula

State 95:
## Known stack suffix:
##
## LR(1) items:
vpkglist_top' -> . vpkglist_top [ # ]
## Transitions:
-- On POSINT shift to state 12
-- On PKGNAME shift to state 13
-- On NEGINT shift to state 14
-- On IDENT shift to state 15
-- On vpkglist_top shift to state 96
-- On vpkglist_ne shift to state 97
-- On vpkglist shift to state 98
-- On vpkg shift to state 100
-- On pkgname shift to state 58
## Reductions:
-- On EOL
--   reduce production vpkglist ->

State 96:
## Known stack suffix:
## vpkglist_top
## LR(1) items:
vpkglist_top' -> vpkglist_top . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept vpkglist_top

State 97:
## Known stack suffix:
## vpkglist_ne
## LR(1) items:
vpkglist -> vpkglist_ne . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vpkglist -> vpkglist_ne

State 98:
## Known stack suffix:
## vpkglist
## LR(1) items:
vpkglist_top -> vpkglist . EOL [ # ]
## Transitions:
-- On EOL shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## vpkglist EOL
## LR(1) items:
vpkglist_top -> vpkglist EOL . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production vpkglist_top -> vpkglist EOL

State 100:
## Known stack suffix:
## vpkg
## LR(1) items:
vpkglist_ne -> vpkg . [ EOL ]
vpkglist_ne -> vpkg . COMMA vpkglist_ne [ EOL ]
## Transitions:
-- On COMMA shift to state 101
## Reductions:
-- On EOL
--   reduce production vpkglist_ne -> vpkg

State 101:
## Known stack suffix:
## vpkg COMMA
## LR(1) items:
vpkglist_ne -> vpkg COMMA . vpkglist_ne [ EOL ]
## Transitions:
-- On POSINT shift to state 12
-- On PKGNAME shift to state 13
-- On NEGINT shift to state 14
-- On IDENT shift to state 15
-- On vpkglist_ne shift to state 102
-- On vpkg shift to state 100
-- On pkgname shift to state 58
## Reductions:

State 102:
## Known stack suffix:
## vpkg COMMA vpkglist_ne
## LR(1) items:
vpkglist_ne -> vpkg COMMA vpkglist_ne . [ EOL ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production vpkglist_ne -> vpkg COMMA vpkglist_ne

