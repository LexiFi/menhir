File "cudf.0.9-cudf_type_parser.mly", line 56, characters 25-31:
Warning: the token LPAREN is unused.
File "cudf.0.9-cudf_type_parser.mly", line 56, characters 32-38:
Warning: the token RPAREN is unused.
Grammar has 31 nonterminal symbols, among which 9 start symbols.
Grammar has 17 terminal symbols.
Grammar has 57 productions.
nullable(vpkglist_top) = false
nullable(vpkglist_ne) = false
nullable(vpkglist) = true
nullable(vpkgformula_top) = false
nullable(vpkgformula_ntriv) = false
nullable(vpkgformula) = false
nullable(vpkg_top) = false
nullable(vpkg_ntriv) = false
nullable(vpkg) = false
nullable(version) = false
nullable(typedecl_top) = false
nullable(typedecl_ne) = false
nullable(typedecl_) = false
nullable(typedecl) = true
nullable(typed_value) = true
nullable(type_top) = false
nullable(type_) = false
nullable(relop) = false
nullable(qstring_top) = false
nullable(qstring) = false
nullable(pkgname_top) = false
nullable(pkgname) = false
nullable(or_formula_ntriv) = false
nullable(or_formula) = false
nullable(int_top) = false
nullable(int) = false
nullable(ident_top) = false
nullable(ident) = false
nullable(enums) = false
nullable(and_formula_ntriv) = false
nullable(and_formula) = false
first(vpkglist_top) = POSINT PKGNAME NEGINT IDENT EOL
first(vpkglist_ne) = POSINT PKGNAME NEGINT IDENT
first(vpkglist) = POSINT PKGNAME NEGINT IDENT
first(vpkgformula_top) = VPKGTRUE VPKGFALSE POSINT PKGNAME NEGINT IDENT
first(vpkgformula_ntriv) = VPKGTRUE VPKGFALSE POSINT PKGNAME NEGINT IDENT
first(vpkgformula) = VPKGTRUE VPKGFALSE POSINT PKGNAME NEGINT IDENT
first(vpkg_top) = POSINT PKGNAME NEGINT IDENT
first(vpkg_ntriv) = POSINT PKGNAME NEGINT IDENT
first(vpkg) = POSINT PKGNAME NEGINT IDENT
first(version) = POSINT
first(typedecl_top) = IDENT EOL
first(typedecl_ne) = IDENT
first(typedecl_) = IDENT
first(typedecl) = IDENT
first(typed_value) = VPKGTRUE VPKGFALSE QSTRING POSINT PKGNAME NEGINT IDENT
first(type_top) = IDENT
first(type_) = IDENT
first(relop) = RELOP EQ
first(qstring_top) = QSTRING
first(qstring) = QSTRING
first(pkgname_top) = POSINT PKGNAME NEGINT IDENT
first(pkgname) = POSINT PKGNAME NEGINT IDENT
first(or_formula_ntriv) = POSINT PKGNAME NEGINT IDENT
first(or_formula) = POSINT PKGNAME NEGINT IDENT
first(int_top) = POSINT NEGINT
first(int) = POSINT NEGINT
first(ident_top) = IDENT
first(ident) = IDENT
first(enums) = IDENT
first(and_formula_ntriv) = POSINT PKGNAME NEGINT IDENT
first(and_formula) = POSINT PKGNAME NEGINT IDENT
minimal(vpkglist_top) = (* 1 *) EOL
minimal(vpkglist_ne) = (* 1 *) PKGNAME
minimal(vpkglist) = (* 0 *)
minimal(vpkgformula_top) = (* 2 *) PKGNAME EOL
minimal(vpkgformula_ntriv) = (* 1 *) PKGNAME
minimal(vpkgformula) = (* 1 *) PKGNAME
minimal(vpkg_top) = (* 2 *) PKGNAME EOL
minimal(vpkg_ntriv) = (* 1 *) PKGNAME
minimal(vpkg) = (* 1 *) PKGNAME
minimal(version) = (* 1 *) POSINT
minimal(typedecl_top) = (* 1 *) EOL
minimal(typedecl_ne) = (* 3 *) IDENT COLON IDENT
minimal(typedecl_) = (* 3 *) IDENT COLON IDENT
minimal(typedecl) = (* 0 *)
minimal(typed_value) = (* 0 *)
minimal(type_top) = (* 2 *) IDENT EOL
minimal(type_) = (* 1 *) IDENT
minimal(relop) = (* 1 *) RELOP
minimal(qstring_top) = (* 2 *) QSTRING EOL
minimal(qstring) = (* 1 *) QSTRING
minimal(pkgname_top) = (* 2 *) PKGNAME EOL
minimal(pkgname) = (* 1 *) PKGNAME
minimal(or_formula_ntriv) = (* 1 *) PKGNAME
minimal(or_formula) = (* 1 *) PKGNAME
minimal(int_top) = (* 2 *) POSINT EOL
minimal(int) = (* 1 *) POSINT
minimal(ident_top) = (* 2 *) IDENT EOL
minimal(ident) = (* 1 *) IDENT
minimal(enums) = (* 1 *) IDENT
minimal(and_formula_ntriv) = (* 1 *) PKGNAME
minimal(and_formula) = (* 1 *) PKGNAME
follow(vpkglist_top) = #
follow(vpkglist_ne) = EOL
follow(vpkglist) = EOL
follow(vpkgformula_top) = #
follow(vpkgformula_ntriv) = RBRACKET
follow(vpkgformula) = EOL
follow(vpkg_top) = #
follow(vpkg_ntriv) = RBRACKET
follow(vpkg) = RBRACKET PIPE EOL COMMA
follow(version) = RBRACKET PIPE EOL COMMA
follow(typedecl_top) = #
follow(typedecl_ne) = EOL
follow(typedecl_) = EOL COMMA
follow(typedecl) = EOL
follow(typed_value) = RBRACKET
follow(type_top) = #
follow(type_) = EQ EOL COMMA
follow(relop) = POSINT
follow(qstring_top) = #
follow(qstring) = RBRACKET EOL
follow(pkgname_top) = #
follow(pkgname) = RELOP RBRACKET PIPE EQ EOL COMMA
follow(or_formula_ntriv) = RBRACKET
follow(or_formula) = RBRACKET EOL COMMA
follow(int_top) = #
follow(int) = RBRACKET EOL
follow(ident_top) = #
follow(ident) = RBRACKET LBRACKET EQ EOL COMMA COLON
follow(enums) = RBRACKET
follow(and_formula_ntriv) = RBRACKET
follow(and_formula) = RBRACKET EOL
Built an LR(0) automaton with 103 states.
The grammar is not SLR(1) -- 6 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 103 states.
52 out of 103 states have a default reduction.
23 out of 103 states are represented.
0 out of 59 symbols keep track of their start position.
0 out of 59 symbols keep track of their end position.
39 out of 66 productions exploit shiftreduce optimization.
213 functions before inlining, 51 functions after inlining.
