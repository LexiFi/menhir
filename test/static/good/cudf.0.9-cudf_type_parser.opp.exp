File "cudf.0.9-cudf_type_parser.mly", line 56, characters 25-31:
Warning: the token LPAREN is unused.
File "cudf.0.9-cudf_type_parser.mly", line 56, characters 32-38:
Warning: the token RPAREN is unused.
%{

(** a non-located parse error carrying an error message (...) *)
exception Parse_error_msg of string

let parse_relop = function
  | "="  -> `Eq
  | "!=" -> `Neq
  | ">=" -> `Geq
  | ">"  -> `Gt
  | "<=" -> `Leq
  | "<"  -> `Lt
  | _ -> assert false	(* lexer shouldn't have returned such a RELOP! *)

(** parse a type declaration with no default value *)
let parse_typename = function
  | "int"        -> `Int
  | "posint"     -> `Posint
  | "nat"        -> `Nat
  | "bool"       -> `Bool
  | "string"     -> `String
  | "pkgname"    -> `Pkgname
  | "ident"      -> `Ident
  | "vpkg"       -> `Vpkg
  | "vpkgformula" -> `Vpkgformula
  | "vpkglist"   -> `Vpkglist
  | "veqpkg"     -> `Veqpkg
  | "veqpkglist" -> `Veqpkglist
  | s            -> raise (Parse_error_msg ("unknown type name: " ^ s))

%}
%start ident_top
%start int_top
%start pkgname_top
%start qstring_top
%start type_top
%start typedecl_top
%start vpkg_top
%start vpkgformula_top
%start vpkglist_top
%token COLON
%token COMMA
%token EOL
%token EQ
%token <string> IDENT
%token LBRACKET
%token LPAREN
%token <string> NEGINT
%token PIPE
%token <string> PKGNAME
%token <string> POSINT
%token <string> QSTRING
%token RBRACKET
%token <string> RELOP
%token RPAREN
%token VPKGFALSE
%token VPKGTRUE
%type <string> ident_top
%type <int> int_top
%type <Cudf_types.pkgname> pkgname_top
%type <string> qstring_top
%type <Cudf_types.typ> type_top
%type <Cudf_types.typedecl> typedecl_top
%type <Cudf_types.vpkg> vpkg_top
%type <Cudf_types.vpkgformula> vpkgformula_top
%type <Cudf_types.vpkglist> vpkglist_top
%%

int_top:
  _1 = int _2 = EOL
    {                 ( _1 )}

ident_top:
  _1 = ident _2 = EOL
    {                     ( _1 )}

qstring_top:
  _1 = qstring _2 = EOL
    {                         ( _1 )}

pkgname_top:
  _1 = pkgname _2 = EOL
    {                         ( _1 )}

vpkg_top:
  _1 = vpkg _2 = EOL
    {                   ( _1 )}

vpkglist_top:
  _1 = vpkglist _2 = EOL
    {                           ( _1 )}

vpkgformula_top:
  _1 = vpkgformula _2 = EOL
    {                                 ( _1 )}

typedecl_top:
  _1 = typedecl _2 = EOL
    {                           ( _1 )}

type_top:
  _1 = type_ _2 = EOL
    {                    ( _1 )}

ident:
  _1 = IDENT
    {             ( _1 )}

qstring:
  _1 = QSTRING
    {                 ( _1 )}

version:
  _1 = POSINT
    {                ( int_of_string _1 )}

pkgname:
  _1 = PKGNAME
    {            ( _1 )}
| _1 = IDENT
    {          ( _1 )}
| _1 = POSINT
    {           ( _1 )}
| _1 = NEGINT
    {           ( _1 )}

relop:
  _1 = RELOP
    {          ( parse_relop _1 )}
| _1 = EQ
    {        ( `Eq )}

int:
  _1 = POSINT
    {           ( int_of_string _1 )}
| _1 = NEGINT
    {           ( int_of_string _1 )}

vpkg:
  _1 = pkgname
    {              ( (_1, None) )}
| _1 = pkgname _2 = relop _3 = version
    {                          ( (_1, Some (_2, _3)) )}

vpkglist:
  
    {     ( [] )}
| _1 = vpkglist_ne
    {                ( _1 )}

vpkglist_ne:
  _1 = vpkg
    {           ( [ _1 ] )}
| _1 = vpkg _2 = COMMA _3 = vpkglist_ne
    {                           ( _1 :: _3 )}

vpkgformula:
  _1 = and_formula
    {                 ( _1 )}
| _1 = VPKGTRUE
    {              ( [] )}
| _1 = VPKGFALSE
    {               ( [ [] ] )}

and_formula:
  _1 = or_formula
    {                  ( [ _1 ] )}
| _1 = or_formula _2 = COMMA _3 = and_formula
    {                                 ( _1 :: _3 )}

or_formula:
  _1 = vpkg
    {           ( [ _1 ] )}
| _1 = vpkg _2 = PIPE _3 = or_formula
    {                         ( _1 :: _3 )}

vpkgformula_ntriv:
  _1 = and_formula_ntriv
    {                      ( _1 )}
| _1 = VPKGTRUE
    {              ( [] )}
| _1 = VPKGFALSE
    {               ( [ [] ] )}

and_formula_ntriv:
  _1 = or_formula_ntriv
    {                        ( [ _1 ] )}
| _1 = or_formula _2 = COMMA _3 = and_formula
    {                                  ( _1 :: _3 )}

or_formula_ntriv:
  _1 = vpkg_ntriv
    {                 ( [ _1 ] )}
| _1 = vpkg _2 = PIPE _3 = or_formula
    {                         ( _1 :: _3 )}

vpkg_ntriv:
  _1 = PKGNAME
    {              ( (_1, None) )}
| _1 = pkgname _2 = relop _3 = version
    {                          ( (_1, Some (_2, _3)) )}

typedecl:
  
    {       ( [] )}
| _1 = typedecl_ne
    {                  ( _1 )}

typedecl_ne:
  _1 = typedecl_
    {                ( [ _1 ] )}
| _1 = typedecl_ _2 = COMMA _3 = typedecl_ne
    {                                ( _1 :: _3 )}

typedecl_:
  _1 = ident _2 = COLON _3 = type_
    {                        ( (_1, Cudf_types.typedecl_of_type _3) )}
| _1 = ident _2 = COLON _3 = type_ _4 = EQ _5 = LBRACKET _6 = typed_value _7 = RBRACKET
    {                                       ( let name, typ, v = _1, _3, _6 in
					  (name,
					   Cudf_types.typedecl_of_value
					     (Cudf_types.cast typ v)) )}

type_:
  _1 = ident
    {             ( parse_typename _1 )}
| _1 = ident _2 = LBRACKET _3 = enums _4 = RBRACKET
    {                                  ( if _1 = "enum"
					  then `Enum _3
					  else raise Parsing.Parse_error )}

enums:
  _1 = ident
    {           ( [ _1 ] )}
| _1 = ident _2 = COMMA _3 = enums
    {                      ( _1 :: _3 )}

typed_value:
  
    {      ( `Vpkglist [] )}
| _1 = ident
    {           ( `Ident _1 )}
| _1 = int
    {          ( `Int _1 )}
| _1 = qstring
    {             ( `String _1 )}
| _1 = vpkgformula_ntriv
    {                      ( `Vpkgformula _1 )}

%%


open ExtLib

let error_wrapper f =
  fun lexer lexbuf ->
    let syntax_error msg =
      raise (Cudf_types.Syntax_error (msg, Cudf_types.loc_of_lexbuf lexbuf)) in
    try
      f lexer lexbuf
    with
      | Parsing.Parse_error -> syntax_error "parse error"
      | Failure _m when String.starts_with _m "lexing" ->
	  syntax_error "lexer error"
      | Cudf_types.Type_error _ -> syntax_error "type error"
      | Parse_error_msg msg -> syntax_error msg

let int_top = error_wrapper int_top
let ident_top = error_wrapper ident_top
let pkgname_top = error_wrapper pkgname_top
let vpkg_top = error_wrapper vpkg_top
let vpkglist_top = error_wrapper vpkglist_top
let vpkgformula_top = error_wrapper vpkgformula_top
let typedecl_top = error_wrapper typedecl_top

let qstring_top = error_wrapper qstring_top
let type_top = error_wrapper type_top

