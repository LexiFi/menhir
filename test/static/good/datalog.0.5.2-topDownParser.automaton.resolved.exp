State 0:
## Known stack suffix:
##
## LR(1) items:
parse_clause' -> . parse_clause [ # ]
## Transitions:
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 13
-- On parse_clause shift to state 34
-- On clause shift to state 35
## Reductions:

State 1:
## Known stack suffix:
## SINGLE_QUOTED
## LR(1) items:
term -> SINGLE_QUOTED . [ RIGHT_PARENTHESIS OPERATOR IF EOI DOT COMMA AGGR_EQUAL # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> SINGLE_QUOTED

State 2:
## Known stack suffix:
## LOWER_WORD
## LR(1) items:
term -> LOWER_WORD . [ RIGHT_PARENTHESIS OPERATOR IF EOI DOT COMMA AGGR_EQUAL # ]
term -> LOWER_WORD . LEFT_PARENTHESIS args RIGHT_PARENTHESIS [ RIGHT_PARENTHESIS OPERATOR IF EOI DOT COMMA AGGR_EQUAL # ]
## Transitions:
-- On LEFT_PARENTHESIS shift to state 3
## Reductions:
-- On RIGHT_PARENTHESIS OPERATOR IF EOI DOT COMMA AGGR_EQUAL
--   reduce production term -> LOWER_WORD

State 3:
## Known stack suffix:
## LOWER_WORD LEFT_PARENTHESIS
## LR(1) items:
term -> LOWER_WORD LEFT_PARENTHESIS . args RIGHT_PARENTHESIS [ RIGHT_PARENTHESIS OPERATOR IF EOI DOT COMMA AGGR_EQUAL # ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 7
-- On subterm shift to state 8
-- On args shift to state 11
## Reductions:

State 4:
## Known stack suffix:
## UPPER_WORD
## LR(1) items:
subterm -> UPPER_WORD . [ RIGHT_PARENTHESIS OPERATOR EOI DOT COMMA AGGR_EQUAL # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subterm -> UPPER_WORD

State 5:
## Known stack suffix:
## INT
## LR(1) items:
subterm -> INT . [ RIGHT_PARENTHESIS OPERATOR EOI DOT COMMA AGGR_EQUAL # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subterm -> INT

State 6:
## Known stack suffix:
## DOUBLE_QUOTED
## LR(1) items:
term -> DOUBLE_QUOTED . [ RIGHT_PARENTHESIS OPERATOR IF EOI DOT COMMA AGGR_EQUAL # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> DOUBLE_QUOTED

State 7:
## Known stack suffix:
## term
## LR(1) items:
subterm -> term . [ RIGHT_PARENTHESIS EOI DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production subterm -> term

State 8:
## Known stack suffix:
## subterm
## LR(1) items:
args -> subterm . [ RIGHT_PARENTHESIS ]
args -> subterm . COMMA args [ RIGHT_PARENTHESIS ]
## Transitions:
-- On COMMA shift to state 9
## Reductions:
-- On RIGHT_PARENTHESIS
--   reduce production args -> subterm

State 9:
## Known stack suffix:
## subterm COMMA
## LR(1) items:
args -> subterm COMMA . args [ RIGHT_PARENTHESIS ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 7
-- On subterm shift to state 8
-- On args shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## subterm COMMA args
## LR(1) items:
args -> subterm COMMA args . [ RIGHT_PARENTHESIS ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production args -> subterm COMMA args

State 11:
## Known stack suffix:
## LOWER_WORD LEFT_PARENTHESIS args
## LR(1) items:
term -> LOWER_WORD LEFT_PARENTHESIS args . RIGHT_PARENTHESIS [ RIGHT_PARENTHESIS OPERATOR IF EOI DOT COMMA AGGR_EQUAL # ]
## Transitions:
-- On RIGHT_PARENTHESIS shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## LOWER_WORD LEFT_PARENTHESIS args RIGHT_PARENTHESIS
## LR(1) items:
term -> LOWER_WORD LEFT_PARENTHESIS args RIGHT_PARENTHESIS . [ RIGHT_PARENTHESIS OPERATOR IF EOI DOT COMMA AGGR_EQUAL # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production term -> LOWER_WORD LEFT_PARENTHESIS args RIGHT_PARENTHESIS

State 13:
## Known stack suffix:
## term
## LR(1) items:
clause -> term . DOT [ SINGLE_QUOTED LOWER_WORD EOI DOUBLE_QUOTED ]
clause -> term . IF literals DOT [ SINGLE_QUOTED LOWER_WORD EOI DOUBLE_QUOTED ]
## Transitions:
-- On IF shift to state 14
-- On DOT shift to state 33
## Reductions:

State 14:
## Known stack suffix:
## term IF
## LR(1) items:
clause -> term IF . literals DOT [ SINGLE_QUOTED LOWER_WORD EOI DOUBLE_QUOTED ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 16
-- On subterm shift to state 21
-- On literals shift to state 27
-- On literal shift to state 29
-- On atom shift to state 32
## Reductions:

State 15:
## Known stack suffix:
## NOT
## LR(1) items:
literal -> NOT . atom [ EOI DOT COMMA # ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 16
-- On subterm shift to state 17
-- On atom shift to state 20
## Reductions:

State 16:
## Known stack suffix:
## term
## LR(1) items:
atom -> term . [ EOI DOT COMMA # ]
subterm -> term . [ OPERATOR AGGR_EQUAL ]
## Transitions:
## Reductions:
-- On EOI DOT COMMA
--   reduce production atom -> term
-- On OPERATOR AGGR_EQUAL
--   reduce production subterm -> term

State 17:
## Known stack suffix:
## subterm
## LR(1) items:
atom -> subterm . OPERATOR subterm [ EOI DOT COMMA # ]
## Transitions:
-- On OPERATOR shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## subterm OPERATOR
## LR(1) items:
atom -> subterm OPERATOR . subterm [ EOI DOT COMMA # ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 7
-- On subterm shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## subterm OPERATOR subterm
## LR(1) items:
atom -> subterm OPERATOR subterm . [ EOI DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production atom -> subterm OPERATOR subterm

State 20:
## Known stack suffix:
## NOT atom
## LR(1) items:
literal -> NOT atom . [ EOI DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> NOT atom

State 21:
## Known stack suffix:
## subterm
## LR(1) items:
atom -> subterm . OPERATOR subterm [ EOI DOT COMMA # ]
literal -> subterm . AGGR_EQUAL LOWER_WORD UPPER_WORD COLON term [ EOI DOT COMMA # ]
## Transitions:
-- On OPERATOR shift to state 18
-- On AGGR_EQUAL shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## subterm AGGR_EQUAL
## LR(1) items:
literal -> subterm AGGR_EQUAL . LOWER_WORD UPPER_WORD COLON term [ EOI DOT COMMA # ]
## Transitions:
-- On LOWER_WORD shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## subterm AGGR_EQUAL LOWER_WORD
## LR(1) items:
literal -> subterm AGGR_EQUAL LOWER_WORD . UPPER_WORD COLON term [ EOI DOT COMMA # ]
## Transitions:
-- On UPPER_WORD shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## subterm AGGR_EQUAL LOWER_WORD UPPER_WORD
## LR(1) items:
literal -> subterm AGGR_EQUAL LOWER_WORD UPPER_WORD . COLON term [ EOI DOT COMMA # ]
## Transitions:
-- On COLON shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## subterm AGGR_EQUAL LOWER_WORD UPPER_WORD COLON
## LR(1) items:
literal -> subterm AGGR_EQUAL LOWER_WORD UPPER_WORD COLON . term [ EOI DOT COMMA # ]
## Transitions:
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## subterm AGGR_EQUAL LOWER_WORD UPPER_WORD COLON term
## LR(1) items:
literal -> subterm AGGR_EQUAL LOWER_WORD UPPER_WORD COLON term . [ EOI DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> subterm AGGR_EQUAL LOWER_WORD UPPER_WORD COLON term

State 27:
## Known stack suffix:
## term IF literals
## LR(1) items:
clause -> term IF literals . DOT [ SINGLE_QUOTED LOWER_WORD EOI DOUBLE_QUOTED ]
## Transitions:
-- On DOT shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## term IF literals DOT
## LR(1) items:
clause -> term IF literals DOT . [ SINGLE_QUOTED LOWER_WORD EOI DOUBLE_QUOTED ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clause -> term IF literals DOT

State 29:
## Known stack suffix:
## literal
## LR(1) items:
literals -> literal . [ EOI DOT ]
literals -> literal . COMMA literals [ EOI DOT ]
## Transitions:
-- On COMMA shift to state 30
## Reductions:
-- On EOI DOT
--   reduce production literals -> literal

State 30:
## Known stack suffix:
## literal COMMA
## LR(1) items:
literals -> literal COMMA . literals [ EOI DOT ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 16
-- On subterm shift to state 21
-- On literals shift to state 31
-- On literal shift to state 29
-- On atom shift to state 32
## Reductions:

State 31:
## Known stack suffix:
## literal COMMA literals
## LR(1) items:
literals -> literal COMMA literals . [ EOI DOT ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literals -> literal COMMA literals

State 32:
## Known stack suffix:
## atom
## LR(1) items:
literal -> atom . [ EOI DOT COMMA # ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production literal -> atom

State 33:
## Known stack suffix:
## term DOT
## LR(1) items:
clause -> term DOT . [ SINGLE_QUOTED LOWER_WORD EOI DOUBLE_QUOTED ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clause -> term DOT

State 34:
## Known stack suffix:
## parse_clause
## LR(1) items:
parse_clause' -> parse_clause . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_clause

State 35:
## Known stack suffix:
## clause
## LR(1) items:
parse_clause -> clause . EOI [ # ]
## Transitions:
-- On EOI shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## clause EOI
## LR(1) items:
parse_clause -> clause EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_clause -> clause EOI

State 37:
## Known stack suffix:
##
## LR(1) items:
parse_file' -> . parse_file [ # ]
## Transitions:
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 13
-- On parse_file shift to state 38
-- On clauses shift to state 39
-- On clause shift to state 41
## Reductions:

State 38:
## Known stack suffix:
## parse_file
## LR(1) items:
parse_file' -> parse_file . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_file

State 39:
## Known stack suffix:
## clauses
## LR(1) items:
parse_file -> clauses . EOI [ # ]
## Transitions:
-- On EOI shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## clauses EOI
## LR(1) items:
parse_file -> clauses EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_file -> clauses EOI

State 41:
## Known stack suffix:
## clause
## LR(1) items:
clauses -> clause . [ EOI ]
clauses -> clause . clauses [ EOI ]
## Transitions:
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 13
-- On clauses shift to state 42
-- On clause shift to state 41
## Reductions:
-- On EOI
--   reduce production clauses -> clause

State 42:
## Known stack suffix:
## clause clauses
## LR(1) items:
clauses -> clause clauses . [ EOI ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production clauses -> clause clauses

State 43:
## Known stack suffix:
##
## LR(1) items:
parse_literal' -> . parse_literal [ # ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 16
-- On subterm shift to state 21
-- On parse_literal shift to state 44
-- On literal shift to state 45
-- On atom shift to state 32
## Reductions:

State 44:
## Known stack suffix:
## parse_literal
## LR(1) items:
parse_literal' -> parse_literal . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_literal

State 45:
## Known stack suffix:
## literal
## LR(1) items:
parse_literal -> literal . EOI [ # ]
## Transitions:
-- On EOI shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## literal EOI
## LR(1) items:
parse_literal -> literal EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_literal -> literal EOI

State 47:
## Known stack suffix:
##
## LR(1) items:
parse_literals' -> . parse_literals [ # ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 16
-- On subterm shift to state 21
-- On parse_literals shift to state 48
-- On literals shift to state 49
-- On literal shift to state 29
-- On atom shift to state 32
## Reductions:

State 48:
## Known stack suffix:
## parse_literals
## LR(1) items:
parse_literals' -> parse_literals . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_literals

State 49:
## Known stack suffix:
## literals
## LR(1) items:
parse_literals -> literals . EOI [ # ]
## Transitions:
-- On EOI shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## literals EOI
## LR(1) items:
parse_literals -> literals EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_literals -> literals EOI

State 51:
## Known stack suffix:
##
## LR(1) items:
parse_query' -> . parse_query [ # ]
## Transitions:
-- On LEFT_PARENTHESIS shift to state 52
-- On tuple shift to state 55
-- On parse_query shift to state 61
## Reductions:

State 52:
## Known stack suffix:
## LEFT_PARENTHESIS
## LR(1) items:
tuple -> LEFT_PARENTHESIS . args RIGHT_PARENTHESIS [ IF ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 7
-- On subterm shift to state 8
-- On args shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## LEFT_PARENTHESIS args
## LR(1) items:
tuple -> LEFT_PARENTHESIS args . RIGHT_PARENTHESIS [ IF ]
## Transitions:
-- On RIGHT_PARENTHESIS shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## LEFT_PARENTHESIS args RIGHT_PARENTHESIS
## LR(1) items:
tuple -> LEFT_PARENTHESIS args RIGHT_PARENTHESIS . [ IF ]
## Transitions:
## Default reduction:
-- After reading the next token, reduce production tuple -> LEFT_PARENTHESIS args RIGHT_PARENTHESIS

State 55:
## Known stack suffix:
## tuple
## LR(1) items:
parse_query -> tuple . IF literals [ # ]
## Transitions:
-- On IF shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## tuple IF
## LR(1) items:
parse_query -> tuple IF . literals [ # ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 16
-- On subterm shift to state 21
-- On literals shift to state 57
-- On literal shift to state 58
-- On atom shift to state 32
## Reductions:

State 57:
## Known stack suffix:
## tuple IF literals
## LR(1) items:
parse_query -> tuple IF literals . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_query -> tuple IF literals

State 58:
## Known stack suffix:
## literal
## LR(1) items:
literals -> literal . [ # ]
literals -> literal . COMMA literals [ # ]
## Transitions:
-- On COMMA shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## literal COMMA
## LR(1) items:
literals -> literal COMMA . literals [ # ]
## Transitions:
-- On UPPER_WORD shift to state 4
-- On SINGLE_QUOTED shift to state 1
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 2
-- On INT shift to state 5
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 16
-- On subterm shift to state 21
-- On literals shift to state 60
-- On literal shift to state 58
-- On atom shift to state 32
## Reductions:

State 60:
## Known stack suffix:
## literal COMMA literals
## LR(1) items:
literals -> literal COMMA literals . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production literals -> literal COMMA literals

State 61:
## Known stack suffix:
## parse_query
## LR(1) items:
parse_query' -> parse_query . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_query

State 62:
## Known stack suffix:
##
## LR(1) items:
parse_term' -> . parse_term [ # ]
## Transitions:
-- On SINGLE_QUOTED shift to state 1
-- On LOWER_WORD shift to state 2
-- On DOUBLE_QUOTED shift to state 6
-- On term shift to state 63
-- On parse_term shift to state 65
## Reductions:

State 63:
## Known stack suffix:
## term
## LR(1) items:
parse_term -> term . EOI [ # ]
## Transitions:
-- On EOI shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## term EOI
## LR(1) items:
parse_term -> term EOI . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, reduce production parse_term -> term EOI

State 65:
## Known stack suffix:
## parse_term
## LR(1) items:
parse_term' -> parse_term . [ # ]
## Transitions:
## Default reduction:
-- Without reading the next token, accept parse_term

