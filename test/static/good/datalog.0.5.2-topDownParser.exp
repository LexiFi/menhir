Grammar has 15 nonterminal symbols, among which 6 start symbols.
Grammar has 15 terminal symbols.
Grammar has 27 productions.
nullable(tuple) = false
nullable(term) = false
nullable(subterm) = false
nullable(parse_term) = false
nullable(parse_query) = false
nullable(parse_literals) = false
nullable(parse_literal) = false
nullable(parse_file) = false
nullable(parse_clause) = false
nullable(literals) = false
nullable(literal) = false
nullable(clauses) = false
nullable(clause) = false
nullable(atom) = false
nullable(args) = false
first(tuple) = LEFT_PARENTHESIS
first(term) = SINGLE_QUOTED LOWER_WORD DOUBLE_QUOTED
first(subterm) = UPPER_WORD SINGLE_QUOTED LOWER_WORD INT DOUBLE_QUOTED
first(parse_term) = SINGLE_QUOTED LOWER_WORD DOUBLE_QUOTED
first(parse_query) = LEFT_PARENTHESIS
first(parse_literals) = UPPER_WORD SINGLE_QUOTED NOT LOWER_WORD INT DOUBLE_QUOTED
first(parse_literal) = UPPER_WORD SINGLE_QUOTED NOT LOWER_WORD INT DOUBLE_QUOTED
first(parse_file) = SINGLE_QUOTED LOWER_WORD DOUBLE_QUOTED
first(parse_clause) = SINGLE_QUOTED LOWER_WORD DOUBLE_QUOTED
first(literals) = UPPER_WORD SINGLE_QUOTED NOT LOWER_WORD INT DOUBLE_QUOTED
first(literal) = UPPER_WORD SINGLE_QUOTED NOT LOWER_WORD INT DOUBLE_QUOTED
first(clauses) = SINGLE_QUOTED LOWER_WORD DOUBLE_QUOTED
first(clause) = SINGLE_QUOTED LOWER_WORD DOUBLE_QUOTED
first(atom) = UPPER_WORD SINGLE_QUOTED LOWER_WORD INT DOUBLE_QUOTED
first(args) = UPPER_WORD SINGLE_QUOTED LOWER_WORD INT DOUBLE_QUOTED
minimal(tuple) = (* 3 *) LEFT_PARENTHESIS LOWER_WORD RIGHT_PARENTHESIS
minimal(term) = (* 1 *) LOWER_WORD
minimal(subterm) = (* 1 *) LOWER_WORD
minimal(parse_term) = (* 2 *) LOWER_WORD EOI
minimal(parse_query) = (* 5 *) LEFT_PARENTHESIS LOWER_WORD RIGHT_PARENTHESIS IF LOWER_WORD
minimal(parse_literals) = (* 2 *) LOWER_WORD EOI
minimal(parse_literal) = (* 2 *) LOWER_WORD EOI
minimal(parse_file) = (* 3 *) LOWER_WORD DOT EOI
minimal(parse_clause) = (* 3 *) LOWER_WORD DOT EOI
minimal(literals) = (* 1 *) LOWER_WORD
minimal(literal) = (* 1 *) LOWER_WORD
minimal(clauses) = (* 2 *) LOWER_WORD DOT
minimal(clause) = (* 2 *) LOWER_WORD DOT
minimal(atom) = (* 1 *) LOWER_WORD
minimal(args) = (* 1 *) LOWER_WORD
follow(tuple) = IF
follow(term) = RIGHT_PARENTHESIS OPERATOR IF EOI DOT COMMA AGGR_EQUAL #
follow(subterm) = RIGHT_PARENTHESIS OPERATOR EOI DOT COMMA AGGR_EQUAL #
follow(parse_term) = #
follow(parse_query) = #
follow(parse_literals) = #
follow(parse_literal) = #
follow(parse_file) = #
follow(parse_clause) = #
follow(literals) = EOI DOT #
follow(literal) = EOI DOT COMMA #
follow(clauses) = EOI
follow(clause) = SINGLE_QUOTED LOWER_WORD EOI DOUBLE_QUOTED
follow(atom) = EOI DOT COMMA #
follow(args) = RIGHT_PARENTHESIS
Built an LR(0) automaton with 63 states.
The grammar is not SLR(1) -- 1 states have a conflict.
The construction mode is pager.
Built an LR(1) automaton with 66 states.
Warning: 13 end-of-stream conflicts were arbitrarily resolved.
29 out of 66 states have a default reduction.
16 out of 66 states are represented.
0 out of 38 symbols keep track of their start position.
0 out of 38 symbols keep track of their end position.
21 out of 33 productions exploit shiftreduce optimization.
124 functions before inlining, 26 functions after inlining.
