%{
  let remove_quotes s =
    let n = String.length s in
    if (s.[0] = '\'' && s.[n-1] = '\'') ||
       (s.[0] = '"' && s.[n-1] = '"')
      then String.sub s 1 (n-2)
      else s
%}
%start parse_clause
%start parse_file
%start parse_literal
%start parse_literals
%start parse_query
%start parse_term
%token AGGR_EQUAL
%token COLON
%token COMMA
%token DOT
%token <string> DOUBLE_QUOTED
%token EOI
%token IF
%token <string> INT
%token LEFT_PARENTHESIS
%token <string> LOWER_WORD
%token NOT
%token <string> OPERATOR
%token RIGHT_PARENTHESIS
%token <string> SINGLE_QUOTED
%token <string> UPPER_WORD
%type <TopDownAst.clause> parse_clause
%type <TopDownAst.file> parse_file
%type <TopDownAst.literal> parse_literal
%type <TopDownAst.literal list> parse_literals
%type <TopDownAst.term list * TopDownAst.literal list> parse_query
%type <TopDownAst.term> parse_term
%%

parse_file:
  _1 = clauses _2 = EOI
    {                ( _1 )}

parse_term:
  _1 = term _2 = EOI
    {             ( _1 )}

parse_literal:
  _1 = literal _2 = EOI
    {                ( _1 )}

parse_literals:
  _1 = literals _2 = EOI
    {                 ( _1 )}

parse_query:
  _1 = tuple _2 = IF _3 = literals
    {                      ( _1, _3 )}

parse_clause:
  _1 = clause _2 = EOI
    {               ( _1 )}

clauses:
  _1 = clause
    {           ( [_1] )}
| _1 = clause _2 = clauses
    {                   ( _1 :: _2 )}

clause:
  _1 = term _2 = DOT
    {             ( (_1, []) )}
| _1 = term _2 = IF _3 = literals _4 = DOT
    {                         ( (_1, _3) )}

literals:
  _1 = literal
    {            ( [_1] )}
| _1 = literal _2 = COMMA _3 = literals
    {                           ( _1 :: _3 )}

literal:
  _1 = atom
    {         ( TopDownAst.LitPos _1 )}
| _1 = NOT _2 = atom
    {             ( TopDownAst.LitNeg _2 )}
| _1 = subterm _2 = AGGR_EQUAL _3 = LOWER_WORD _4 = UPPER_WORD _5 = COLON _6 = term
    {    ( TopDownAst.(LitAggr
      { ag_left=_1; ag_constructor= _3; ag_var= _4; ag_guard= _6}
      )
    )}

atom:
  _1 = term
    {         ( _1 )}
| _1 = subterm _2 = OPERATOR _3 = subterm
    {                             ( TopDownAst.Apply(_2, [_1; _3]) )}

term:
  _1 = LOWER_WORD
    {               ( TopDownAst.Apply (_1, []) )}
| _1 = SINGLE_QUOTED
    {                  ( TopDownAst.Apply (remove_quotes _1, []) )}
| _1 = DOUBLE_QUOTED
    {                  ( TopDownAst.Apply (remove_quotes _1, []) )}
| _1 = LOWER_WORD _2 = LEFT_PARENTHESIS _3 = args _4 = RIGHT_PARENTHESIS
    {    ( TopDownAst.Apply (_1, _3) )}

subterm:
  _1 = term
    {         ( _1 )}
| _1 = UPPER_WORD
    {               ( TopDownAst.Var _1 )}
| _1 = INT
    {        ( TopDownAst.Int( int_of_string _1) )}

args:
  _1 = subterm
    {            ( [_1] )}
| _1 = subterm _2 = COMMA _3 = args
    {                        ( _1 :: _3 )}

tuple:
  _1 = LEFT_PARENTHESIS _2 = args _3 = RIGHT_PARENTHESIS
    {                                            ( _2 )}

%%
