State 0:
## Known stack suffix:
##
## LR(1) items:
cmd' -> . cmd [ # ]
## Transitions:
-- On WHENEVER shift to state 1
-- On UPDATE shift to state 10
-- On SELECT shift to state 189
-- On ROLLBACK shift to state 199
-- On OPEN shift to state 201
-- On MODULE shift to state 203
-- On INSERT shift to state 253
-- On GRANT shift to state 341
-- On FETCH shift to state 274
-- On DELETE shift to state 278
-- On CREATE shift to state 369
-- On COMMIT shift to state 286
-- On CLOSE shift to state 288
-- On view_def shift to state 438
-- On update_statement_searched shift to state 290
-- On update_statement_positioned shift to state 291
-- On select_statement shift to state 292
-- On schema_element shift to state 445
-- On schema shift to state 446
-- On rollback_statement shift to state 293
-- On privilege_def shift to state 442
-- On open_statement shift to state 294
-- On module_def shift to state 447
-- On manipulative_statement shift to state 448
-- On insert_statement shift to state 297
-- On fetch_statement shift to state 298
-- On delete_statement_searched shift to state 299
-- On delete_statement_positioned shift to state 300
-- On commit_statement shift to state 301
-- On cmd shift to state 449
-- On close_statement shift to state 302
-- On base_table_def shift to state 443
## Reductions:

State 1:
## Known stack suffix:
## WHENEVER
## LR(1) items:
cmd -> WHENEVER . NOT FOUND when_action [ # ]
cmd -> WHENEVER . SQLERROR when_action [ # ]
## Transitions:
-- On SQLERROR shift to state 2
-- On NOT shift to state 7
## Reductions:

State 2:
## Known stack suffix:
## WHENEVER SQLERROR
## LR(1) items:
cmd -> WHENEVER SQLERROR . when_action [ # ]
## Transitions:
-- On GOTO shift to state 3
-- On CONTINUE shift to state 5
-- On when_action shift to state 6
## Reductions:

State 3:
## Known stack suffix:
## GOTO
## LR(1) items:
when_action -> GOTO . IDENT [ # ]
## Transitions:
-- On IDENT shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## GOTO IDENT
## LR(1) items:
when_action -> GOTO IDENT . [ # ]
## Transitions:
## Reductions:
-- On # reduce production when_action -> GOTO IDENT

State 5:
## Known stack suffix:
## CONTINUE
## LR(1) items:
when_action -> CONTINUE . [ # ]
## Transitions:
## Reductions:
-- On # reduce production when_action -> CONTINUE

State 6:
## Known stack suffix:
## WHENEVER SQLERROR when_action
## LR(1) items:
cmd -> WHENEVER SQLERROR when_action . [ # ]
## Transitions:
## Reductions:
-- On # reduce production cmd -> WHENEVER SQLERROR when_action

State 7:
## Known stack suffix:
## WHENEVER NOT
## LR(1) items:
cmd -> WHENEVER NOT . FOUND when_action [ # ]
## Transitions:
-- On FOUND shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## WHENEVER NOT FOUND
## LR(1) items:
cmd -> WHENEVER NOT FOUND . when_action [ # ]
## Transitions:
-- On GOTO shift to state 3
-- On CONTINUE shift to state 5
-- On when_action shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## WHENEVER NOT FOUND when_action
## LR(1) items:
cmd -> WHENEVER NOT FOUND when_action . [ # ]
## Transitions:
## Reductions:
-- On # reduce production cmd -> WHENEVER NOT FOUND when_action

State 10:
## Known stack suffix:
## UPDATE
## LR(1) items:
update_statement_positioned -> UPDATE . table SET assignment_commalist WHERE CURRENT OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
update_statement_searched -> UPDATE . table SET assignment_commalist opt_where_clause [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 11
-- On table shift to state 12
## Reductions:

State 11:
## Known stack suffix:
## IDENT
## LR(1) items:
table -> IDENT . [ WITH WHERE VALUES UPDATE UNION TO SET SEMICOLON SELECT RPAREN ROLLBACK REFERENCES PROCEDURE ORDER OPEN NOT LPAREN INSERT HAVING GROUP GRANT FETCH EOF DELETE DEFAULT DECLARE CREATE COMMIT COMMA CLOSE CHECK AS # ]
## Transitions:
## Reductions:
-- On WITH reduce production table -> IDENT
-- On WHERE reduce production table -> IDENT
-- On VALUES reduce production table -> IDENT
-- On UPDATE reduce production table -> IDENT
-- On UNION reduce production table -> IDENT
-- On TO reduce production table -> IDENT
-- On SET reduce production table -> IDENT
-- On SEMICOLON reduce production table -> IDENT
-- On SELECT reduce production table -> IDENT
-- On RPAREN reduce production table -> IDENT
-- On ROLLBACK reduce production table -> IDENT
-- On REFERENCES reduce production table -> IDENT
-- On PROCEDURE reduce production table -> IDENT
-- On ORDER reduce production table -> IDENT
-- On OPEN reduce production table -> IDENT
-- On NOT reduce production table -> IDENT
-- On LPAREN reduce production table -> IDENT
-- On INSERT reduce production table -> IDENT
-- On HAVING reduce production table -> IDENT
-- On GROUP reduce production table -> IDENT
-- On GRANT reduce production table -> IDENT
-- On FETCH reduce production table -> IDENT
-- On EOF reduce production table -> IDENT
-- On DELETE reduce production table -> IDENT
-- On DEFAULT reduce production table -> IDENT
-- On DECLARE reduce production table -> IDENT
-- On CREATE reduce production table -> IDENT
-- On COMMIT reduce production table -> IDENT
-- On COMMA reduce production table -> IDENT
-- On CLOSE reduce production table -> IDENT
-- On CHECK reduce production table -> IDENT
-- On AS reduce production table -> IDENT

State 12:
## Known stack suffix:
## UPDATE table
## LR(1) items:
update_statement_positioned -> UPDATE table . SET assignment_commalist WHERE CURRENT OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
update_statement_searched -> UPDATE table . SET assignment_commalist opt_where_clause [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On SET shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## UPDATE table SET
## LR(1) items:
update_statement_positioned -> UPDATE table SET . assignment_commalist WHERE CURRENT OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
update_statement_searched -> UPDATE table SET . assignment_commalist opt_where_clause [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 14
-- On column shift to state 15
-- On assignment_commalist shift to state 73
-- On assignment shift to state 188
## Reductions:

State 14:
## Known stack suffix:
## IDENT
## LR(1) items:
column -> IDENT . [ SMALLINT RPAREN REAL NUMERIC INTEGER FLOAT DOUBLE DECIMAL COMPARISON COMMA CHARACTER ]
## Transitions:
## Reductions:
-- On SMALLINT reduce production column -> IDENT
-- On RPAREN reduce production column -> IDENT
-- On REAL reduce production column -> IDENT
-- On NUMERIC reduce production column -> IDENT
-- On INTEGER reduce production column -> IDENT
-- On FLOAT reduce production column -> IDENT
-- On DOUBLE reduce production column -> IDENT
-- On DECIMAL reduce production column -> IDENT
-- On COMPARISON reduce production column -> IDENT
-- On COMMA reduce production column -> IDENT
-- On CHARACTER reduce production column -> IDENT

State 15:
## Known stack suffix:
## column
## LR(1) items:
assignment -> column . COMPARISON scalar_exp [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
assignment -> column . COMPARISON NULL [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
-- On COMPARISON shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## column COMPARISON
## LR(1) items:
assignment -> column COMPARISON . scalar_exp [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
assignment -> column COMPARISON . NULL [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NULL shift to state 71
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 72
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 17:
## Known stack suffix:
## USER
## LR(1) items:
atom -> USER . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production atom -> USER
-- On WHERE reduce production atom -> USER
-- On UPDATE reduce production atom -> USER
-- On UNION reduce production atom -> USER
-- On TIMES reduce production atom -> USER
-- On SEMICOLON reduce production atom -> USER
-- On SELECT reduce production atom -> USER
-- On RPAREN reduce production atom -> USER
-- On ROLLBACK reduce production atom -> USER
-- On PROCEDURE reduce production atom -> USER
-- On PLUS reduce production atom -> USER
-- On ORDER reduce production atom -> USER
-- On OR reduce production atom -> USER
-- On OPEN reduce production atom -> USER
-- On NOT reduce production atom -> USER
-- On MINUS reduce production atom -> USER
-- On LIKE reduce production atom -> USER
-- On INTO reduce production atom -> USER
-- On INSERT reduce production atom -> USER
-- On IN reduce production atom -> USER
-- On HAVING reduce production atom -> USER
-- On GROUP reduce production atom -> USER
-- On GRANT reduce production atom -> USER
-- On FROM reduce production atom -> USER
-- On FETCH reduce production atom -> USER
-- On ESCAPE reduce production atom -> USER
-- On EOF reduce production atom -> USER
-- On DIV reduce production atom -> USER
-- On DELETE reduce production atom -> USER
-- On DECLARE reduce production atom -> USER
-- On CREATE reduce production atom -> USER
-- On COMPARISON reduce production atom -> USER
-- On COMMIT reduce production atom -> USER
-- On COMMA reduce production atom -> USER
-- On CLOSE reduce production atom -> USER
-- On BETWEEN reduce production atom -> USER
-- On AND reduce production atom -> USER

State 18:
## Known stack suffix:
## SUM
## LR(1) items:
ammsc -> SUM . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production ammsc -> SUM

State 19:
## Known stack suffix:
## STRING
## LR(1) items:
literal -> STRING . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK REFERENCES PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DEFAULT DECLARE CREATE COMPARISON COMMIT COMMA CLOSE CHECK BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production literal -> STRING
-- On WHERE reduce production literal -> STRING
-- On UPDATE reduce production literal -> STRING
-- On UNION reduce production literal -> STRING
-- On TIMES reduce production literal -> STRING
-- On SEMICOLON reduce production literal -> STRING
-- On SELECT reduce production literal -> STRING
-- On RPAREN reduce production literal -> STRING
-- On ROLLBACK reduce production literal -> STRING
-- On REFERENCES reduce production literal -> STRING
-- On PROCEDURE reduce production literal -> STRING
-- On PLUS reduce production literal -> STRING
-- On ORDER reduce production literal -> STRING
-- On OR reduce production literal -> STRING
-- On OPEN reduce production literal -> STRING
-- On NOT reduce production literal -> STRING
-- On MINUS reduce production literal -> STRING
-- On LIKE reduce production literal -> STRING
-- On INTO reduce production literal -> STRING
-- On INSERT reduce production literal -> STRING
-- On IN reduce production literal -> STRING
-- On HAVING reduce production literal -> STRING
-- On GROUP reduce production literal -> STRING
-- On GRANT reduce production literal -> STRING
-- On FROM reduce production literal -> STRING
-- On FETCH reduce production literal -> STRING
-- On ESCAPE reduce production literal -> STRING
-- On EOF reduce production literal -> STRING
-- On DIV reduce production literal -> STRING
-- On DELETE reduce production literal -> STRING
-- On DEFAULT reduce production literal -> STRING
-- On DECLARE reduce production literal -> STRING
-- On CREATE reduce production literal -> STRING
-- On COMPARISON reduce production literal -> STRING
-- On COMMIT reduce production literal -> STRING
-- On COMMA reduce production literal -> STRING
-- On CLOSE reduce production literal -> STRING
-- On CHECK reduce production literal -> STRING
-- On BETWEEN reduce production literal -> STRING
-- On AND reduce production literal -> STRING

State 20:
## Known stack suffix:
## PLUS
## LR(1) items:
scalar_exp -> PLUS . scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 70
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 21:
## Known stack suffix:
## MINUS
## LR(1) items:
scalar_exp -> MINUS . scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 69
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 22:
## Known stack suffix:
## MIN
## LR(1) items:
ammsc -> MIN . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production ammsc -> MIN

State 23:
## Known stack suffix:
## MAX
## LR(1) items:
ammsc -> MAX . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production ammsc -> MAX

State 24:
## Known stack suffix:
## LPAREN
## LR(1) items:
scalar_exp -> LPAREN . scalar_exp RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 33
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 25:
## Known stack suffix:
## INTNUM
## LR(1) items:
literal -> INTNUM . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK REFERENCES PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DEFAULT DECLARE CREATE COMPARISON COMMIT COMMA CLOSE CHECK BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production literal -> INTNUM
-- On WHERE reduce production literal -> INTNUM
-- On UPDATE reduce production literal -> INTNUM
-- On UNION reduce production literal -> INTNUM
-- On TIMES reduce production literal -> INTNUM
-- On SEMICOLON reduce production literal -> INTNUM
-- On SELECT reduce production literal -> INTNUM
-- On RPAREN reduce production literal -> INTNUM
-- On ROLLBACK reduce production literal -> INTNUM
-- On REFERENCES reduce production literal -> INTNUM
-- On PROCEDURE reduce production literal -> INTNUM
-- On PLUS reduce production literal -> INTNUM
-- On ORDER reduce production literal -> INTNUM
-- On OR reduce production literal -> INTNUM
-- On OPEN reduce production literal -> INTNUM
-- On NOT reduce production literal -> INTNUM
-- On MINUS reduce production literal -> INTNUM
-- On LIKE reduce production literal -> INTNUM
-- On INTO reduce production literal -> INTNUM
-- On INSERT reduce production literal -> INTNUM
-- On IN reduce production literal -> INTNUM
-- On HAVING reduce production literal -> INTNUM
-- On GROUP reduce production literal -> INTNUM
-- On GRANT reduce production literal -> INTNUM
-- On FROM reduce production literal -> INTNUM
-- On FETCH reduce production literal -> INTNUM
-- On ESCAPE reduce production literal -> INTNUM
-- On EOF reduce production literal -> INTNUM
-- On DIV reduce production literal -> INTNUM
-- On DELETE reduce production literal -> INTNUM
-- On DEFAULT reduce production literal -> INTNUM
-- On DECLARE reduce production literal -> INTNUM
-- On CREATE reduce production literal -> INTNUM
-- On COMPARISON reduce production literal -> INTNUM
-- On COMMIT reduce production literal -> INTNUM
-- On COMMA reduce production literal -> INTNUM
-- On CLOSE reduce production literal -> INTNUM
-- On CHECK reduce production literal -> INTNUM
-- On BETWEEN reduce production literal -> INTNUM
-- On AND reduce production literal -> INTNUM

State 26:
## Known stack suffix:
## IDENT
## LR(1) items:
ammsc -> IDENT . [ LPAREN ]
column_ref -> IDENT . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE IS INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
column_ref -> IDENT . DOT IDENT [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE IS INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On DOT shift to state 27
## Reductions:
-- On WITH reduce production column_ref -> IDENT
-- On WHERE reduce production column_ref -> IDENT
-- On UPDATE reduce production column_ref -> IDENT
-- On UNION reduce production column_ref -> IDENT
-- On TIMES reduce production column_ref -> IDENT
-- On SEMICOLON reduce production column_ref -> IDENT
-- On SELECT reduce production column_ref -> IDENT
-- On RPAREN reduce production column_ref -> IDENT
-- On ROLLBACK reduce production column_ref -> IDENT
-- On PROCEDURE reduce production column_ref -> IDENT
-- On PLUS reduce production column_ref -> IDENT
-- On ORDER reduce production column_ref -> IDENT
-- On OR reduce production column_ref -> IDENT
-- On OPEN reduce production column_ref -> IDENT
-- On NOT reduce production column_ref -> IDENT
-- On MINUS reduce production column_ref -> IDENT
-- On LPAREN reduce production ammsc -> IDENT
-- On LIKE reduce production column_ref -> IDENT
-- On IS reduce production column_ref -> IDENT
-- On INTO reduce production column_ref -> IDENT
-- On INSERT reduce production column_ref -> IDENT
-- On IN reduce production column_ref -> IDENT
-- On HAVING reduce production column_ref -> IDENT
-- On GROUP reduce production column_ref -> IDENT
-- On GRANT reduce production column_ref -> IDENT
-- On FROM reduce production column_ref -> IDENT
-- On FETCH reduce production column_ref -> IDENT
-- On EOF reduce production column_ref -> IDENT
-- On DIV reduce production column_ref -> IDENT
-- On DELETE reduce production column_ref -> IDENT
-- On DECLARE reduce production column_ref -> IDENT
-- On CREATE reduce production column_ref -> IDENT
-- On COMPARISON reduce production column_ref -> IDENT
-- On COMMIT reduce production column_ref -> IDENT
-- On COMMA reduce production column_ref -> IDENT
-- On CLOSE reduce production column_ref -> IDENT
-- On BETWEEN reduce production column_ref -> IDENT
-- On AND reduce production column_ref -> IDENT

State 27:
## Known stack suffix:
## IDENT DOT
## LR(1) items:
column_ref -> IDENT DOT . IDENT [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE IS INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DESC DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN ASC AND # ]
## Transitions:
-- On IDENT shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## IDENT DOT IDENT
## LR(1) items:
column_ref -> IDENT DOT IDENT . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE IS INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DESC DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN ASC AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production column_ref -> IDENT DOT IDENT
-- On WHERE reduce production column_ref -> IDENT DOT IDENT
-- On UPDATE reduce production column_ref -> IDENT DOT IDENT
-- On UNION reduce production column_ref -> IDENT DOT IDENT
-- On TIMES reduce production column_ref -> IDENT DOT IDENT
-- On SEMICOLON reduce production column_ref -> IDENT DOT IDENT
-- On SELECT reduce production column_ref -> IDENT DOT IDENT
-- On RPAREN reduce production column_ref -> IDENT DOT IDENT
-- On ROLLBACK reduce production column_ref -> IDENT DOT IDENT
-- On PROCEDURE reduce production column_ref -> IDENT DOT IDENT
-- On PLUS reduce production column_ref -> IDENT DOT IDENT
-- On ORDER reduce production column_ref -> IDENT DOT IDENT
-- On OR reduce production column_ref -> IDENT DOT IDENT
-- On OPEN reduce production column_ref -> IDENT DOT IDENT
-- On NOT reduce production column_ref -> IDENT DOT IDENT
-- On MINUS reduce production column_ref -> IDENT DOT IDENT
-- On LIKE reduce production column_ref -> IDENT DOT IDENT
-- On IS reduce production column_ref -> IDENT DOT IDENT
-- On INTO reduce production column_ref -> IDENT DOT IDENT
-- On INSERT reduce production column_ref -> IDENT DOT IDENT
-- On IN reduce production column_ref -> IDENT DOT IDENT
-- On HAVING reduce production column_ref -> IDENT DOT IDENT
-- On GROUP reduce production column_ref -> IDENT DOT IDENT
-- On GRANT reduce production column_ref -> IDENT DOT IDENT
-- On FROM reduce production column_ref -> IDENT DOT IDENT
-- On FETCH reduce production column_ref -> IDENT DOT IDENT
-- On EOF reduce production column_ref -> IDENT DOT IDENT
-- On DIV reduce production column_ref -> IDENT DOT IDENT
-- On DESC reduce production column_ref -> IDENT DOT IDENT
-- On DELETE reduce production column_ref -> IDENT DOT IDENT
-- On DECLARE reduce production column_ref -> IDENT DOT IDENT
-- On CREATE reduce production column_ref -> IDENT DOT IDENT
-- On COMPARISON reduce production column_ref -> IDENT DOT IDENT
-- On COMMIT reduce production column_ref -> IDENT DOT IDENT
-- On COMMA reduce production column_ref -> IDENT DOT IDENT
-- On CLOSE reduce production column_ref -> IDENT DOT IDENT
-- On BETWEEN reduce production column_ref -> IDENT DOT IDENT
-- On ASC reduce production column_ref -> IDENT DOT IDENT
-- On AND reduce production column_ref -> IDENT DOT IDENT

State 29:
## Known stack suffix:
## COUNT
## LR(1) items:
ammsc -> COUNT . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production ammsc -> COUNT

State 30:
## Known stack suffix:
## COLON
## LR(1) items:
parameter -> COLON . IDENT [ WITH WHERE UPDATE UNION TIMES SMALLINT SEMICOLON SELECT RPAREN ROLLBACK REAL PROCEDURE PLUS ORDER OR OPEN NUMERIC NOT MINUS LIKE INTO INTEGER INSERT INDICATOR IN HAVING GROUP GRANT FROM FLOAT FETCH ESCAPE EOF DOUBLE DIV DELETE DECLARE DECIMAL CREATE COMPARISON COMMIT COMMA COLON CLOSE CHARACTER BETWEEN AND # ]
## Transitions:
-- On IDENT shift to state 31
## Reductions:

State 31:
## Known stack suffix:
## COLON IDENT
## LR(1) items:
parameter -> COLON IDENT . [ WITH WHERE UPDATE UNION TIMES SMALLINT SEMICOLON SELECT RPAREN ROLLBACK REAL PROCEDURE PLUS ORDER OR OPEN NUMERIC NOT MINUS LIKE INTO INTEGER INSERT INDICATOR IN HAVING GROUP GRANT FROM FLOAT FETCH ESCAPE EOF DOUBLE DIV DELETE DECLARE DECIMAL CREATE COMPARISON COMMIT COMMA COLON CLOSE CHARACTER BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production parameter -> COLON IDENT
-- On WHERE reduce production parameter -> COLON IDENT
-- On UPDATE reduce production parameter -> COLON IDENT
-- On UNION reduce production parameter -> COLON IDENT
-- On TIMES reduce production parameter -> COLON IDENT
-- On SMALLINT reduce production parameter -> COLON IDENT
-- On SEMICOLON reduce production parameter -> COLON IDENT
-- On SELECT reduce production parameter -> COLON IDENT
-- On RPAREN reduce production parameter -> COLON IDENT
-- On ROLLBACK reduce production parameter -> COLON IDENT
-- On REAL reduce production parameter -> COLON IDENT
-- On PROCEDURE reduce production parameter -> COLON IDENT
-- On PLUS reduce production parameter -> COLON IDENT
-- On ORDER reduce production parameter -> COLON IDENT
-- On OR reduce production parameter -> COLON IDENT
-- On OPEN reduce production parameter -> COLON IDENT
-- On NUMERIC reduce production parameter -> COLON IDENT
-- On NOT reduce production parameter -> COLON IDENT
-- On MINUS reduce production parameter -> COLON IDENT
-- On LIKE reduce production parameter -> COLON IDENT
-- On INTO reduce production parameter -> COLON IDENT
-- On INTEGER reduce production parameter -> COLON IDENT
-- On INSERT reduce production parameter -> COLON IDENT
-- On INDICATOR reduce production parameter -> COLON IDENT
-- On IN reduce production parameter -> COLON IDENT
-- On HAVING reduce production parameter -> COLON IDENT
-- On GROUP reduce production parameter -> COLON IDENT
-- On GRANT reduce production parameter -> COLON IDENT
-- On FROM reduce production parameter -> COLON IDENT
-- On FLOAT reduce production parameter -> COLON IDENT
-- On FETCH reduce production parameter -> COLON IDENT
-- On ESCAPE reduce production parameter -> COLON IDENT
-- On EOF reduce production parameter -> COLON IDENT
-- On DOUBLE reduce production parameter -> COLON IDENT
-- On DIV reduce production parameter -> COLON IDENT
-- On DELETE reduce production parameter -> COLON IDENT
-- On DECLARE reduce production parameter -> COLON IDENT
-- On DECIMAL reduce production parameter -> COLON IDENT
-- On CREATE reduce production parameter -> COLON IDENT
-- On COMPARISON reduce production parameter -> COLON IDENT
-- On COMMIT reduce production parameter -> COLON IDENT
-- On COMMA reduce production parameter -> COLON IDENT
-- On COLON reduce production parameter -> COLON IDENT
-- On CLOSE reduce production parameter -> COLON IDENT
-- On CHARACTER reduce production parameter -> COLON IDENT
-- On BETWEEN reduce production parameter -> COLON IDENT
-- On AND reduce production parameter -> COLON IDENT

State 32:
## Known stack suffix:
## AVG
## LR(1) items:
ammsc -> AVG . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production ammsc -> AVG

State 33:
## Known stack suffix:
## LPAREN scalar_exp
## LR(1) items:
scalar_exp -> scalar_exp . PLUS scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> scalar_exp . DIV scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> LPAREN scalar_exp . RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On TIMES shift to state 34
-- On RPAREN shift to state 68
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
## Reductions:

State 34:
## Known stack suffix:
## scalar_exp TIMES
## LR(1) items:
scalar_exp -> scalar_exp TIMES . scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 35
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 35:
## Known stack suffix:
## scalar_exp TIMES scalar_exp
## LR(1) items:
scalar_exp -> scalar_exp . PLUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp TIMES scalar_exp . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On WHERE reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On UPDATE reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On UNION reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On TIMES reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On SEMICOLON reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On SELECT reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On RPAREN reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On ROLLBACK reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On PROCEDURE reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On PLUS reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On ORDER reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On OR reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On OPEN reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On NOT reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On MINUS reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On LIKE reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On INTO reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On INSERT reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On IN reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On HAVING reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On GROUP reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On GRANT reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On FROM reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On FETCH reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On EOF reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On DIV reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On DELETE reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On DECLARE reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On CREATE reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On COMPARISON reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On COMMIT reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On COMMA reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On CLOSE reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On BETWEEN reduce production scalar_exp -> scalar_exp TIMES scalar_exp
-- On AND reduce production scalar_exp -> scalar_exp TIMES scalar_exp

State 36:
## Known stack suffix:
## parameter_ref
## LR(1) items:
atom -> parameter_ref . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production atom -> parameter_ref
-- On WHERE reduce production atom -> parameter_ref
-- On UPDATE reduce production atom -> parameter_ref
-- On UNION reduce production atom -> parameter_ref
-- On TIMES reduce production atom -> parameter_ref
-- On SEMICOLON reduce production atom -> parameter_ref
-- On SELECT reduce production atom -> parameter_ref
-- On RPAREN reduce production atom -> parameter_ref
-- On ROLLBACK reduce production atom -> parameter_ref
-- On PROCEDURE reduce production atom -> parameter_ref
-- On PLUS reduce production atom -> parameter_ref
-- On ORDER reduce production atom -> parameter_ref
-- On OR reduce production atom -> parameter_ref
-- On OPEN reduce production atom -> parameter_ref
-- On NOT reduce production atom -> parameter_ref
-- On MINUS reduce production atom -> parameter_ref
-- On LIKE reduce production atom -> parameter_ref
-- On INTO reduce production atom -> parameter_ref
-- On INSERT reduce production atom -> parameter_ref
-- On IN reduce production atom -> parameter_ref
-- On HAVING reduce production atom -> parameter_ref
-- On GROUP reduce production atom -> parameter_ref
-- On GRANT reduce production atom -> parameter_ref
-- On FROM reduce production atom -> parameter_ref
-- On FETCH reduce production atom -> parameter_ref
-- On ESCAPE reduce production atom -> parameter_ref
-- On EOF reduce production atom -> parameter_ref
-- On DIV reduce production atom -> parameter_ref
-- On DELETE reduce production atom -> parameter_ref
-- On DECLARE reduce production atom -> parameter_ref
-- On CREATE reduce production atom -> parameter_ref
-- On COMPARISON reduce production atom -> parameter_ref
-- On COMMIT reduce production atom -> parameter_ref
-- On COMMA reduce production atom -> parameter_ref
-- On CLOSE reduce production atom -> parameter_ref
-- On BETWEEN reduce production atom -> parameter_ref
-- On AND reduce production atom -> parameter_ref

State 37:
## Known stack suffix:
## parameter
## LR(1) items:
parameter_ref -> parameter . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
parameter_ref -> parameter . COLON IDENT DOT IDENT [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
parameter_ref -> parameter . parameter [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
parameter_ref -> parameter . INDICATOR parameter [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On INDICATOR shift to state 38
-- On COLON shift to state 40
-- On parameter shift to state 44
## Reductions:
-- On WITH reduce production parameter_ref -> parameter
-- On WHERE reduce production parameter_ref -> parameter
-- On UPDATE reduce production parameter_ref -> parameter
-- On UNION reduce production parameter_ref -> parameter
-- On TIMES reduce production parameter_ref -> parameter
-- On SEMICOLON reduce production parameter_ref -> parameter
-- On SELECT reduce production parameter_ref -> parameter
-- On RPAREN reduce production parameter_ref -> parameter
-- On ROLLBACK reduce production parameter_ref -> parameter
-- On PROCEDURE reduce production parameter_ref -> parameter
-- On PLUS reduce production parameter_ref -> parameter
-- On ORDER reduce production parameter_ref -> parameter
-- On OR reduce production parameter_ref -> parameter
-- On OPEN reduce production parameter_ref -> parameter
-- On NOT reduce production parameter_ref -> parameter
-- On MINUS reduce production parameter_ref -> parameter
-- On LIKE reduce production parameter_ref -> parameter
-- On INTO reduce production parameter_ref -> parameter
-- On INSERT reduce production parameter_ref -> parameter
-- On IN reduce production parameter_ref -> parameter
-- On HAVING reduce production parameter_ref -> parameter
-- On GROUP reduce production parameter_ref -> parameter
-- On GRANT reduce production parameter_ref -> parameter
-- On FROM reduce production parameter_ref -> parameter
-- On FETCH reduce production parameter_ref -> parameter
-- On ESCAPE reduce production parameter_ref -> parameter
-- On EOF reduce production parameter_ref -> parameter
-- On DIV reduce production parameter_ref -> parameter
-- On DELETE reduce production parameter_ref -> parameter
-- On DECLARE reduce production parameter_ref -> parameter
-- On CREATE reduce production parameter_ref -> parameter
-- On COMPARISON reduce production parameter_ref -> parameter
-- On COMMIT reduce production parameter_ref -> parameter
-- On COMMA reduce production parameter_ref -> parameter
-- On CLOSE reduce production parameter_ref -> parameter
-- On BETWEEN reduce production parameter_ref -> parameter
-- On AND reduce production parameter_ref -> parameter

State 38:
## Known stack suffix:
## parameter INDICATOR
## LR(1) items:
parameter_ref -> parameter INDICATOR . parameter [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On COLON shift to state 30
-- On parameter shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## parameter INDICATOR parameter
## LR(1) items:
parameter_ref -> parameter INDICATOR parameter . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production parameter_ref -> parameter INDICATOR parameter
-- On WHERE reduce production parameter_ref -> parameter INDICATOR parameter
-- On UPDATE reduce production parameter_ref -> parameter INDICATOR parameter
-- On UNION reduce production parameter_ref -> parameter INDICATOR parameter
-- On TIMES reduce production parameter_ref -> parameter INDICATOR parameter
-- On SEMICOLON reduce production parameter_ref -> parameter INDICATOR parameter
-- On SELECT reduce production parameter_ref -> parameter INDICATOR parameter
-- On RPAREN reduce production parameter_ref -> parameter INDICATOR parameter
-- On ROLLBACK reduce production parameter_ref -> parameter INDICATOR parameter
-- On PROCEDURE reduce production parameter_ref -> parameter INDICATOR parameter
-- On PLUS reduce production parameter_ref -> parameter INDICATOR parameter
-- On ORDER reduce production parameter_ref -> parameter INDICATOR parameter
-- On OR reduce production parameter_ref -> parameter INDICATOR parameter
-- On OPEN reduce production parameter_ref -> parameter INDICATOR parameter
-- On NOT reduce production parameter_ref -> parameter INDICATOR parameter
-- On MINUS reduce production parameter_ref -> parameter INDICATOR parameter
-- On LIKE reduce production parameter_ref -> parameter INDICATOR parameter
-- On INTO reduce production parameter_ref -> parameter INDICATOR parameter
-- On INSERT reduce production parameter_ref -> parameter INDICATOR parameter
-- On IN reduce production parameter_ref -> parameter INDICATOR parameter
-- On HAVING reduce production parameter_ref -> parameter INDICATOR parameter
-- On GROUP reduce production parameter_ref -> parameter INDICATOR parameter
-- On GRANT reduce production parameter_ref -> parameter INDICATOR parameter
-- On FROM reduce production parameter_ref -> parameter INDICATOR parameter
-- On FETCH reduce production parameter_ref -> parameter INDICATOR parameter
-- On ESCAPE reduce production parameter_ref -> parameter INDICATOR parameter
-- On EOF reduce production parameter_ref -> parameter INDICATOR parameter
-- On DIV reduce production parameter_ref -> parameter INDICATOR parameter
-- On DELETE reduce production parameter_ref -> parameter INDICATOR parameter
-- On DECLARE reduce production parameter_ref -> parameter INDICATOR parameter
-- On CREATE reduce production parameter_ref -> parameter INDICATOR parameter
-- On COMPARISON reduce production parameter_ref -> parameter INDICATOR parameter
-- On COMMIT reduce production parameter_ref -> parameter INDICATOR parameter
-- On COMMA reduce production parameter_ref -> parameter INDICATOR parameter
-- On CLOSE reduce production parameter_ref -> parameter INDICATOR parameter
-- On BETWEEN reduce production parameter_ref -> parameter INDICATOR parameter
-- On AND reduce production parameter_ref -> parameter INDICATOR parameter

State 40:
## Known stack suffix:
## parameter COLON
## LR(1) items:
parameter -> COLON . IDENT [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
parameter_ref -> parameter COLON . IDENT DOT IDENT [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On IDENT shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## parameter COLON IDENT
## LR(1) items:
parameter -> COLON IDENT . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
parameter_ref -> parameter COLON IDENT . DOT IDENT [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On DOT shift to state 42
## Reductions:
-- On WITH reduce production parameter -> COLON IDENT
-- On WHERE reduce production parameter -> COLON IDENT
-- On UPDATE reduce production parameter -> COLON IDENT
-- On UNION reduce production parameter -> COLON IDENT
-- On TIMES reduce production parameter -> COLON IDENT
-- On SEMICOLON reduce production parameter -> COLON IDENT
-- On SELECT reduce production parameter -> COLON IDENT
-- On RPAREN reduce production parameter -> COLON IDENT
-- On ROLLBACK reduce production parameter -> COLON IDENT
-- On PROCEDURE reduce production parameter -> COLON IDENT
-- On PLUS reduce production parameter -> COLON IDENT
-- On ORDER reduce production parameter -> COLON IDENT
-- On OR reduce production parameter -> COLON IDENT
-- On OPEN reduce production parameter -> COLON IDENT
-- On NOT reduce production parameter -> COLON IDENT
-- On MINUS reduce production parameter -> COLON IDENT
-- On LIKE reduce production parameter -> COLON IDENT
-- On INTO reduce production parameter -> COLON IDENT
-- On INSERT reduce production parameter -> COLON IDENT
-- On IN reduce production parameter -> COLON IDENT
-- On HAVING reduce production parameter -> COLON IDENT
-- On GROUP reduce production parameter -> COLON IDENT
-- On GRANT reduce production parameter -> COLON IDENT
-- On FROM reduce production parameter -> COLON IDENT
-- On FETCH reduce production parameter -> COLON IDENT
-- On ESCAPE reduce production parameter -> COLON IDENT
-- On EOF reduce production parameter -> COLON IDENT
-- On DIV reduce production parameter -> COLON IDENT
-- On DELETE reduce production parameter -> COLON IDENT
-- On DECLARE reduce production parameter -> COLON IDENT
-- On CREATE reduce production parameter -> COLON IDENT
-- On COMPARISON reduce production parameter -> COLON IDENT
-- On COMMIT reduce production parameter -> COLON IDENT
-- On COMMA reduce production parameter -> COLON IDENT
-- On CLOSE reduce production parameter -> COLON IDENT
-- On BETWEEN reduce production parameter -> COLON IDENT
-- On AND reduce production parameter -> COLON IDENT

State 42:
## Known stack suffix:
## parameter COLON IDENT DOT
## LR(1) items:
parameter_ref -> parameter COLON IDENT DOT . IDENT [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On IDENT shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## parameter COLON IDENT DOT IDENT
## LR(1) items:
parameter_ref -> parameter COLON IDENT DOT IDENT . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On WHERE reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On UPDATE reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On UNION reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On TIMES reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On SEMICOLON reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On SELECT reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On RPAREN reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On ROLLBACK reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On PROCEDURE reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On PLUS reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On ORDER reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On OR reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On OPEN reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On NOT reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On MINUS reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On LIKE reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On INTO reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On INSERT reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On IN reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On HAVING reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On GROUP reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On GRANT reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On FROM reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On FETCH reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On ESCAPE reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On EOF reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On DIV reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On DELETE reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On DECLARE reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On CREATE reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On COMPARISON reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On COMMIT reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On COMMA reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On CLOSE reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On BETWEEN reduce production parameter_ref -> parameter COLON IDENT DOT IDENT
-- On AND reduce production parameter_ref -> parameter COLON IDENT DOT IDENT

State 44:
## Known stack suffix:
## parameter parameter
## LR(1) items:
parameter_ref -> parameter parameter . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production parameter_ref -> parameter parameter
-- On WHERE reduce production parameter_ref -> parameter parameter
-- On UPDATE reduce production parameter_ref -> parameter parameter
-- On UNION reduce production parameter_ref -> parameter parameter
-- On TIMES reduce production parameter_ref -> parameter parameter
-- On SEMICOLON reduce production parameter_ref -> parameter parameter
-- On SELECT reduce production parameter_ref -> parameter parameter
-- On RPAREN reduce production parameter_ref -> parameter parameter
-- On ROLLBACK reduce production parameter_ref -> parameter parameter
-- On PROCEDURE reduce production parameter_ref -> parameter parameter
-- On PLUS reduce production parameter_ref -> parameter parameter
-- On ORDER reduce production parameter_ref -> parameter parameter
-- On OR reduce production parameter_ref -> parameter parameter
-- On OPEN reduce production parameter_ref -> parameter parameter
-- On NOT reduce production parameter_ref -> parameter parameter
-- On MINUS reduce production parameter_ref -> parameter parameter
-- On LIKE reduce production parameter_ref -> parameter parameter
-- On INTO reduce production parameter_ref -> parameter parameter
-- On INSERT reduce production parameter_ref -> parameter parameter
-- On IN reduce production parameter_ref -> parameter parameter
-- On HAVING reduce production parameter_ref -> parameter parameter
-- On GROUP reduce production parameter_ref -> parameter parameter
-- On GRANT reduce production parameter_ref -> parameter parameter
-- On FROM reduce production parameter_ref -> parameter parameter
-- On FETCH reduce production parameter_ref -> parameter parameter
-- On ESCAPE reduce production parameter_ref -> parameter parameter
-- On EOF reduce production parameter_ref -> parameter parameter
-- On DIV reduce production parameter_ref -> parameter parameter
-- On DELETE reduce production parameter_ref -> parameter parameter
-- On DECLARE reduce production parameter_ref -> parameter parameter
-- On CREATE reduce production parameter_ref -> parameter parameter
-- On COMPARISON reduce production parameter_ref -> parameter parameter
-- On COMMIT reduce production parameter_ref -> parameter parameter
-- On COMMA reduce production parameter_ref -> parameter parameter
-- On CLOSE reduce production parameter_ref -> parameter parameter
-- On BETWEEN reduce production parameter_ref -> parameter parameter
-- On AND reduce production parameter_ref -> parameter parameter

State 45:
## Known stack suffix:
## literal
## LR(1) items:
atom -> literal . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH ESCAPE EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production atom -> literal
-- On WHERE reduce production atom -> literal
-- On UPDATE reduce production atom -> literal
-- On UNION reduce production atom -> literal
-- On TIMES reduce production atom -> literal
-- On SEMICOLON reduce production atom -> literal
-- On SELECT reduce production atom -> literal
-- On RPAREN reduce production atom -> literal
-- On ROLLBACK reduce production atom -> literal
-- On PROCEDURE reduce production atom -> literal
-- On PLUS reduce production atom -> literal
-- On ORDER reduce production atom -> literal
-- On OR reduce production atom -> literal
-- On OPEN reduce production atom -> literal
-- On NOT reduce production atom -> literal
-- On MINUS reduce production atom -> literal
-- On LIKE reduce production atom -> literal
-- On INTO reduce production atom -> literal
-- On INSERT reduce production atom -> literal
-- On IN reduce production atom -> literal
-- On HAVING reduce production atom -> literal
-- On GROUP reduce production atom -> literal
-- On GRANT reduce production atom -> literal
-- On FROM reduce production atom -> literal
-- On FETCH reduce production atom -> literal
-- On ESCAPE reduce production atom -> literal
-- On EOF reduce production atom -> literal
-- On DIV reduce production atom -> literal
-- On DELETE reduce production atom -> literal
-- On DECLARE reduce production atom -> literal
-- On CREATE reduce production atom -> literal
-- On COMPARISON reduce production atom -> literal
-- On COMMIT reduce production atom -> literal
-- On COMMA reduce production atom -> literal
-- On CLOSE reduce production atom -> literal
-- On BETWEEN reduce production atom -> literal
-- On AND reduce production atom -> literal

State 46:
## Known stack suffix:
## function_ref
## LR(1) items:
scalar_exp -> function_ref . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production scalar_exp -> function_ref
-- On WHERE reduce production scalar_exp -> function_ref
-- On UPDATE reduce production scalar_exp -> function_ref
-- On UNION reduce production scalar_exp -> function_ref
-- On TIMES reduce production scalar_exp -> function_ref
-- On SEMICOLON reduce production scalar_exp -> function_ref
-- On SELECT reduce production scalar_exp -> function_ref
-- On RPAREN reduce production scalar_exp -> function_ref
-- On ROLLBACK reduce production scalar_exp -> function_ref
-- On PROCEDURE reduce production scalar_exp -> function_ref
-- On PLUS reduce production scalar_exp -> function_ref
-- On ORDER reduce production scalar_exp -> function_ref
-- On OR reduce production scalar_exp -> function_ref
-- On OPEN reduce production scalar_exp -> function_ref
-- On NOT reduce production scalar_exp -> function_ref
-- On MINUS reduce production scalar_exp -> function_ref
-- On LIKE reduce production scalar_exp -> function_ref
-- On INTO reduce production scalar_exp -> function_ref
-- On INSERT reduce production scalar_exp -> function_ref
-- On IN reduce production scalar_exp -> function_ref
-- On HAVING reduce production scalar_exp -> function_ref
-- On GROUP reduce production scalar_exp -> function_ref
-- On GRANT reduce production scalar_exp -> function_ref
-- On FROM reduce production scalar_exp -> function_ref
-- On FETCH reduce production scalar_exp -> function_ref
-- On EOF reduce production scalar_exp -> function_ref
-- On DIV reduce production scalar_exp -> function_ref
-- On DELETE reduce production scalar_exp -> function_ref
-- On DECLARE reduce production scalar_exp -> function_ref
-- On CREATE reduce production scalar_exp -> function_ref
-- On COMPARISON reduce production scalar_exp -> function_ref
-- On COMMIT reduce production scalar_exp -> function_ref
-- On COMMA reduce production scalar_exp -> function_ref
-- On CLOSE reduce production scalar_exp -> function_ref
-- On BETWEEN reduce production scalar_exp -> function_ref
-- On AND reduce production scalar_exp -> function_ref

State 47:
## Known stack suffix:
## column_ref
## LR(1) items:
scalar_exp -> column_ref . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production scalar_exp -> column_ref
-- On WHERE reduce production scalar_exp -> column_ref
-- On UPDATE reduce production scalar_exp -> column_ref
-- On UNION reduce production scalar_exp -> column_ref
-- On TIMES reduce production scalar_exp -> column_ref
-- On SEMICOLON reduce production scalar_exp -> column_ref
-- On SELECT reduce production scalar_exp -> column_ref
-- On RPAREN reduce production scalar_exp -> column_ref
-- On ROLLBACK reduce production scalar_exp -> column_ref
-- On PROCEDURE reduce production scalar_exp -> column_ref
-- On PLUS reduce production scalar_exp -> column_ref
-- On ORDER reduce production scalar_exp -> column_ref
-- On OR reduce production scalar_exp -> column_ref
-- On OPEN reduce production scalar_exp -> column_ref
-- On NOT reduce production scalar_exp -> column_ref
-- On MINUS reduce production scalar_exp -> column_ref
-- On LIKE reduce production scalar_exp -> column_ref
-- On INTO reduce production scalar_exp -> column_ref
-- On INSERT reduce production scalar_exp -> column_ref
-- On IN reduce production scalar_exp -> column_ref
-- On HAVING reduce production scalar_exp -> column_ref
-- On GROUP reduce production scalar_exp -> column_ref
-- On GRANT reduce production scalar_exp -> column_ref
-- On FROM reduce production scalar_exp -> column_ref
-- On FETCH reduce production scalar_exp -> column_ref
-- On EOF reduce production scalar_exp -> column_ref
-- On DIV reduce production scalar_exp -> column_ref
-- On DELETE reduce production scalar_exp -> column_ref
-- On DECLARE reduce production scalar_exp -> column_ref
-- On CREATE reduce production scalar_exp -> column_ref
-- On COMPARISON reduce production scalar_exp -> column_ref
-- On COMMIT reduce production scalar_exp -> column_ref
-- On COMMA reduce production scalar_exp -> column_ref
-- On CLOSE reduce production scalar_exp -> column_ref
-- On BETWEEN reduce production scalar_exp -> column_ref
-- On AND reduce production scalar_exp -> column_ref

State 48:
## Known stack suffix:
## atom
## LR(1) items:
scalar_exp -> atom . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production scalar_exp -> atom
-- On WHERE reduce production scalar_exp -> atom
-- On UPDATE reduce production scalar_exp -> atom
-- On UNION reduce production scalar_exp -> atom
-- On TIMES reduce production scalar_exp -> atom
-- On SEMICOLON reduce production scalar_exp -> atom
-- On SELECT reduce production scalar_exp -> atom
-- On RPAREN reduce production scalar_exp -> atom
-- On ROLLBACK reduce production scalar_exp -> atom
-- On PROCEDURE reduce production scalar_exp -> atom
-- On PLUS reduce production scalar_exp -> atom
-- On ORDER reduce production scalar_exp -> atom
-- On OR reduce production scalar_exp -> atom
-- On OPEN reduce production scalar_exp -> atom
-- On NOT reduce production scalar_exp -> atom
-- On MINUS reduce production scalar_exp -> atom
-- On LIKE reduce production scalar_exp -> atom
-- On INTO reduce production scalar_exp -> atom
-- On INSERT reduce production scalar_exp -> atom
-- On IN reduce production scalar_exp -> atom
-- On HAVING reduce production scalar_exp -> atom
-- On GROUP reduce production scalar_exp -> atom
-- On GRANT reduce production scalar_exp -> atom
-- On FROM reduce production scalar_exp -> atom
-- On FETCH reduce production scalar_exp -> atom
-- On EOF reduce production scalar_exp -> atom
-- On DIV reduce production scalar_exp -> atom
-- On DELETE reduce production scalar_exp -> atom
-- On DECLARE reduce production scalar_exp -> atom
-- On CREATE reduce production scalar_exp -> atom
-- On COMPARISON reduce production scalar_exp -> atom
-- On COMMIT reduce production scalar_exp -> atom
-- On COMMA reduce production scalar_exp -> atom
-- On CLOSE reduce production scalar_exp -> atom
-- On BETWEEN reduce production scalar_exp -> atom
-- On AND reduce production scalar_exp -> atom

State 49:
## Known stack suffix:
## ammsc
## LR(1) items:
function_ref -> ammsc . LPAREN TIMES RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
function_ref -> ammsc . LPAREN DISTINCT column_ref RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
function_ref -> ammsc . LPAREN ALL scalar_exp RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
function_ref -> ammsc . LPAREN scalar_exp RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On LPAREN shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## ammsc LPAREN
## LR(1) items:
function_ref -> ammsc LPAREN . TIMES RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
function_ref -> ammsc LPAREN . DISTINCT column_ref RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
function_ref -> ammsc LPAREN . ALL scalar_exp RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
function_ref -> ammsc LPAREN . scalar_exp RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On USER shift to state 17
-- On TIMES shift to state 51
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On DISTINCT shift to state 53
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On ALL shift to state 57
-- On scalar_exp shift to state 66
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 51:
## Known stack suffix:
## ammsc LPAREN TIMES
## LR(1) items:
function_ref -> ammsc LPAREN TIMES . RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On RPAREN shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## ammsc LPAREN TIMES RPAREN
## LR(1) items:
function_ref -> ammsc LPAREN TIMES RPAREN . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On WHERE reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On UPDATE reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On UNION reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On TIMES reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On SEMICOLON reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On SELECT reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On RPAREN reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On ROLLBACK reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On PROCEDURE reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On PLUS reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On ORDER reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On OR reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On OPEN reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On NOT reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On MINUS reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On LIKE reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On INTO reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On INSERT reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On IN reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On HAVING reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On GROUP reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On GRANT reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On FROM reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On FETCH reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On EOF reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On DIV reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On DELETE reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On DECLARE reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On CREATE reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On COMPARISON reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On COMMIT reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On COMMA reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On CLOSE reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On BETWEEN reduce production function_ref -> ammsc LPAREN TIMES RPAREN
-- On AND reduce production function_ref -> ammsc LPAREN TIMES RPAREN

State 53:
## Known stack suffix:
## ammsc LPAREN DISTINCT
## LR(1) items:
function_ref -> ammsc LPAREN DISTINCT . column_ref RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On IDENT shift to state 54
-- On column_ref shift to state 55
## Reductions:

State 54:
## Known stack suffix:
## IDENT
## LR(1) items:
column_ref -> IDENT . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GRANT FETCH EOF DESC DELETE DECLARE CREATE COMMIT COMMA CLOSE ASC # ]
column_ref -> IDENT . DOT IDENT [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GRANT FETCH EOF DESC DELETE DECLARE CREATE COMMIT COMMA CLOSE ASC # ]
## Transitions:
-- On DOT shift to state 27
## Reductions:
-- On WITH reduce production column_ref -> IDENT
-- On UPDATE reduce production column_ref -> IDENT
-- On UNION reduce production column_ref -> IDENT
-- On SEMICOLON reduce production column_ref -> IDENT
-- On SELECT reduce production column_ref -> IDENT
-- On RPAREN reduce production column_ref -> IDENT
-- On ROLLBACK reduce production column_ref -> IDENT
-- On PROCEDURE reduce production column_ref -> IDENT
-- On ORDER reduce production column_ref -> IDENT
-- On OPEN reduce production column_ref -> IDENT
-- On INSERT reduce production column_ref -> IDENT
-- On HAVING reduce production column_ref -> IDENT
-- On GRANT reduce production column_ref -> IDENT
-- On FETCH reduce production column_ref -> IDENT
-- On EOF reduce production column_ref -> IDENT
-- On DESC reduce production column_ref -> IDENT
-- On DELETE reduce production column_ref -> IDENT
-- On DECLARE reduce production column_ref -> IDENT
-- On CREATE reduce production column_ref -> IDENT
-- On COMMIT reduce production column_ref -> IDENT
-- On COMMA reduce production column_ref -> IDENT
-- On CLOSE reduce production column_ref -> IDENT
-- On ASC reduce production column_ref -> IDENT

State 55:
## Known stack suffix:
## ammsc LPAREN DISTINCT column_ref
## LR(1) items:
function_ref -> ammsc LPAREN DISTINCT column_ref . RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On RPAREN shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## ammsc LPAREN DISTINCT column_ref RPAREN
## LR(1) items:
function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On WHERE reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On UPDATE reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On UNION reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On TIMES reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On SEMICOLON reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On SELECT reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On RPAREN reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On ROLLBACK reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On PROCEDURE reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On PLUS reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On ORDER reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On OR reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On OPEN reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On NOT reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On MINUS reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On LIKE reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On INTO reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On INSERT reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On IN reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On HAVING reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On GROUP reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On GRANT reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On FROM reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On FETCH reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On EOF reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On DIV reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On DELETE reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On DECLARE reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On CREATE reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On COMPARISON reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On COMMIT reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On COMMA reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On CLOSE reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On BETWEEN reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN
-- On AND reduce production function_ref -> ammsc LPAREN DISTINCT column_ref RPAREN

State 57:
## Known stack suffix:
## ammsc LPAREN ALL
## LR(1) items:
function_ref -> ammsc LPAREN ALL . scalar_exp RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 58
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 58:
## Known stack suffix:
## ammsc LPAREN ALL scalar_exp
## LR(1) items:
function_ref -> ammsc LPAREN ALL scalar_exp . RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> scalar_exp . DIV scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
## Transitions:
-- On TIMES shift to state 34
-- On RPAREN shift to state 59
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
## Reductions:

State 59:
## Known stack suffix:
## ammsc LPAREN ALL scalar_exp RPAREN
## LR(1) items:
function_ref -> ammsc LPAREN ALL scalar_exp RPAREN . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On WHERE reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On UPDATE reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On UNION reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On TIMES reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On SEMICOLON reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On SELECT reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On RPAREN reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On ROLLBACK reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On PROCEDURE reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On PLUS reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On ORDER reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On OR reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On OPEN reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On NOT reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On MINUS reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On LIKE reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On INTO reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On INSERT reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On IN reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On HAVING reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On GROUP reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On GRANT reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On FROM reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On FETCH reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On EOF reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On DIV reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On DELETE reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On DECLARE reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On CREATE reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On COMPARISON reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On COMMIT reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On COMMA reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On CLOSE reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On BETWEEN reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN
-- On AND reduce production function_ref -> ammsc LPAREN ALL scalar_exp RPAREN

State 60:
## Known stack suffix:
## scalar_exp PLUS
## LR(1) items:
scalar_exp -> scalar_exp PLUS . scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 61
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 61:
## Known stack suffix:
## scalar_exp PLUS scalar_exp
## LR(1) items:
scalar_exp -> scalar_exp . PLUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp PLUS scalar_exp . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On TIMES shift to state 34
-- On DIV shift to state 62
## Reductions:
-- On WITH reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On WHERE reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On UPDATE reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On UNION reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On SEMICOLON reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On SELECT reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On RPAREN reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On ROLLBACK reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On PROCEDURE reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On PLUS reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On ORDER reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On OR reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On OPEN reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On NOT reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On MINUS reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On LIKE reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On INTO reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On INSERT reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On IN reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On HAVING reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On GROUP reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On GRANT reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On FROM reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On FETCH reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On EOF reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On DELETE reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On DECLARE reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On CREATE reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On COMPARISON reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On COMMIT reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On COMMA reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On CLOSE reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On BETWEEN reduce production scalar_exp -> scalar_exp PLUS scalar_exp
-- On AND reduce production scalar_exp -> scalar_exp PLUS scalar_exp

State 62:
## Known stack suffix:
## scalar_exp DIV
## LR(1) items:
scalar_exp -> scalar_exp DIV . scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 63
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 63:
## Known stack suffix:
## scalar_exp DIV scalar_exp
## LR(1) items:
scalar_exp -> scalar_exp . PLUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp DIV scalar_exp . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On WHERE reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On UPDATE reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On UNION reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On TIMES reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On SEMICOLON reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On SELECT reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On RPAREN reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On ROLLBACK reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On PROCEDURE reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On PLUS reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On ORDER reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On OR reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On OPEN reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On NOT reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On MINUS reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On LIKE reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On INTO reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On INSERT reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On IN reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On HAVING reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On GROUP reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On GRANT reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On FROM reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On FETCH reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On EOF reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On DIV reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On DELETE reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On DECLARE reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On CREATE reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On COMPARISON reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On COMMIT reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On COMMA reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On CLOSE reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On BETWEEN reduce production scalar_exp -> scalar_exp DIV scalar_exp
-- On AND reduce production scalar_exp -> scalar_exp DIV scalar_exp

State 64:
## Known stack suffix:
## scalar_exp MINUS
## LR(1) items:
scalar_exp -> scalar_exp MINUS . scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 65
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 65:
## Known stack suffix:
## scalar_exp MINUS scalar_exp
## LR(1) items:
scalar_exp -> scalar_exp . PLUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp MINUS scalar_exp . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
-- On TIMES shift to state 34
-- On DIV shift to state 62
## Reductions:
-- On WITH reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On WHERE reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On UPDATE reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On UNION reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On SEMICOLON reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On SELECT reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On RPAREN reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On ROLLBACK reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On PROCEDURE reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On PLUS reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On ORDER reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On OR reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On OPEN reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On NOT reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On MINUS reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On LIKE reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On INTO reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On INSERT reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On IN reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On HAVING reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On GROUP reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On GRANT reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On FROM reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On FETCH reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On EOF reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On DELETE reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On DECLARE reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On CREATE reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On COMPARISON reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On COMMIT reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On COMMA reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On CLOSE reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On BETWEEN reduce production scalar_exp -> scalar_exp MINUS scalar_exp
-- On AND reduce production scalar_exp -> scalar_exp MINUS scalar_exp

State 66:
## Known stack suffix:
## ammsc LPAREN scalar_exp
## LR(1) items:
function_ref -> ammsc LPAREN scalar_exp . RPAREN [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
scalar_exp -> scalar_exp . DIV scalar_exp [ TIMES RPAREN PLUS MINUS DIV ]
## Transitions:
-- On TIMES shift to state 34
-- On RPAREN shift to state 67
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
## Reductions:

State 67:
## Known stack suffix:
## ammsc LPAREN scalar_exp RPAREN
## LR(1) items:
function_ref -> ammsc LPAREN scalar_exp RPAREN . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On WHERE reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On UPDATE reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On UNION reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On TIMES reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On SEMICOLON reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On SELECT reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On RPAREN reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On ROLLBACK reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On PROCEDURE reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On PLUS reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On ORDER reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On OR reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On OPEN reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On NOT reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On MINUS reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On LIKE reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On INTO reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On INSERT reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On IN reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On HAVING reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On GROUP reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On GRANT reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On FROM reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On FETCH reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On EOF reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On DIV reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On DELETE reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On DECLARE reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On CREATE reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On COMPARISON reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On COMMIT reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On COMMA reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On CLOSE reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On BETWEEN reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN
-- On AND reduce production function_ref -> ammsc LPAREN scalar_exp RPAREN

State 68:
## Known stack suffix:
## LPAREN scalar_exp RPAREN
## LR(1) items:
scalar_exp -> LPAREN scalar_exp RPAREN . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On WHERE reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On UPDATE reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On UNION reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On TIMES reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On SEMICOLON reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On SELECT reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On RPAREN reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On ROLLBACK reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On PROCEDURE reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On PLUS reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On ORDER reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On OR reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On OPEN reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On NOT reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On MINUS reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On LIKE reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On INTO reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On INSERT reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On IN reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On HAVING reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On GROUP reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On GRANT reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On FROM reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On FETCH reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On EOF reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On DIV reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On DELETE reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On DECLARE reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On CREATE reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On COMPARISON reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On COMMIT reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On COMMA reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On CLOSE reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On BETWEEN reduce production scalar_exp -> LPAREN scalar_exp RPAREN
-- On AND reduce production scalar_exp -> LPAREN scalar_exp RPAREN

State 69:
## Known stack suffix:
## MINUS scalar_exp
## LR(1) items:
scalar_exp -> scalar_exp . PLUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> MINUS scalar_exp . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production scalar_exp -> MINUS scalar_exp
-- On WHERE reduce production scalar_exp -> MINUS scalar_exp
-- On UPDATE reduce production scalar_exp -> MINUS scalar_exp
-- On UNION reduce production scalar_exp -> MINUS scalar_exp
-- On TIMES reduce production scalar_exp -> MINUS scalar_exp
-- On SEMICOLON reduce production scalar_exp -> MINUS scalar_exp
-- On SELECT reduce production scalar_exp -> MINUS scalar_exp
-- On RPAREN reduce production scalar_exp -> MINUS scalar_exp
-- On ROLLBACK reduce production scalar_exp -> MINUS scalar_exp
-- On PROCEDURE reduce production scalar_exp -> MINUS scalar_exp
-- On PLUS reduce production scalar_exp -> MINUS scalar_exp
-- On ORDER reduce production scalar_exp -> MINUS scalar_exp
-- On OR reduce production scalar_exp -> MINUS scalar_exp
-- On OPEN reduce production scalar_exp -> MINUS scalar_exp
-- On NOT reduce production scalar_exp -> MINUS scalar_exp
-- On MINUS reduce production scalar_exp -> MINUS scalar_exp
-- On LIKE reduce production scalar_exp -> MINUS scalar_exp
-- On INTO reduce production scalar_exp -> MINUS scalar_exp
-- On INSERT reduce production scalar_exp -> MINUS scalar_exp
-- On IN reduce production scalar_exp -> MINUS scalar_exp
-- On HAVING reduce production scalar_exp -> MINUS scalar_exp
-- On GROUP reduce production scalar_exp -> MINUS scalar_exp
-- On GRANT reduce production scalar_exp -> MINUS scalar_exp
-- On FROM reduce production scalar_exp -> MINUS scalar_exp
-- On FETCH reduce production scalar_exp -> MINUS scalar_exp
-- On EOF reduce production scalar_exp -> MINUS scalar_exp
-- On DIV reduce production scalar_exp -> MINUS scalar_exp
-- On DELETE reduce production scalar_exp -> MINUS scalar_exp
-- On DECLARE reduce production scalar_exp -> MINUS scalar_exp
-- On CREATE reduce production scalar_exp -> MINUS scalar_exp
-- On COMPARISON reduce production scalar_exp -> MINUS scalar_exp
-- On COMMIT reduce production scalar_exp -> MINUS scalar_exp
-- On COMMA reduce production scalar_exp -> MINUS scalar_exp
-- On CLOSE reduce production scalar_exp -> MINUS scalar_exp
-- On BETWEEN reduce production scalar_exp -> MINUS scalar_exp
-- On AND reduce production scalar_exp -> MINUS scalar_exp

State 70:
## Known stack suffix:
## PLUS scalar_exp
## LR(1) items:
scalar_exp -> scalar_exp . PLUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
scalar_exp -> PLUS scalar_exp . [ WITH WHERE UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN NOT MINUS LIKE INTO INSERT IN HAVING GROUP GRANT FROM FETCH EOF DIV DELETE DECLARE CREATE COMPARISON COMMIT COMMA CLOSE BETWEEN AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production scalar_exp -> PLUS scalar_exp
-- On WHERE reduce production scalar_exp -> PLUS scalar_exp
-- On UPDATE reduce production scalar_exp -> PLUS scalar_exp
-- On UNION reduce production scalar_exp -> PLUS scalar_exp
-- On TIMES reduce production scalar_exp -> PLUS scalar_exp
-- On SEMICOLON reduce production scalar_exp -> PLUS scalar_exp
-- On SELECT reduce production scalar_exp -> PLUS scalar_exp
-- On RPAREN reduce production scalar_exp -> PLUS scalar_exp
-- On ROLLBACK reduce production scalar_exp -> PLUS scalar_exp
-- On PROCEDURE reduce production scalar_exp -> PLUS scalar_exp
-- On PLUS reduce production scalar_exp -> PLUS scalar_exp
-- On ORDER reduce production scalar_exp -> PLUS scalar_exp
-- On OR reduce production scalar_exp -> PLUS scalar_exp
-- On OPEN reduce production scalar_exp -> PLUS scalar_exp
-- On NOT reduce production scalar_exp -> PLUS scalar_exp
-- On MINUS reduce production scalar_exp -> PLUS scalar_exp
-- On LIKE reduce production scalar_exp -> PLUS scalar_exp
-- On INTO reduce production scalar_exp -> PLUS scalar_exp
-- On INSERT reduce production scalar_exp -> PLUS scalar_exp
-- On IN reduce production scalar_exp -> PLUS scalar_exp
-- On HAVING reduce production scalar_exp -> PLUS scalar_exp
-- On GROUP reduce production scalar_exp -> PLUS scalar_exp
-- On GRANT reduce production scalar_exp -> PLUS scalar_exp
-- On FROM reduce production scalar_exp -> PLUS scalar_exp
-- On FETCH reduce production scalar_exp -> PLUS scalar_exp
-- On EOF reduce production scalar_exp -> PLUS scalar_exp
-- On DIV reduce production scalar_exp -> PLUS scalar_exp
-- On DELETE reduce production scalar_exp -> PLUS scalar_exp
-- On DECLARE reduce production scalar_exp -> PLUS scalar_exp
-- On CREATE reduce production scalar_exp -> PLUS scalar_exp
-- On COMPARISON reduce production scalar_exp -> PLUS scalar_exp
-- On COMMIT reduce production scalar_exp -> PLUS scalar_exp
-- On COMMA reduce production scalar_exp -> PLUS scalar_exp
-- On CLOSE reduce production scalar_exp -> PLUS scalar_exp
-- On BETWEEN reduce production scalar_exp -> PLUS scalar_exp
-- On AND reduce production scalar_exp -> PLUS scalar_exp

State 71:
## Known stack suffix:
## column COMPARISON NULL
## LR(1) items:
assignment -> column COMPARISON NULL . [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On WHERE reduce production assignment -> column COMPARISON NULL
-- On UPDATE reduce production assignment -> column COMPARISON NULL
-- On SEMICOLON reduce production assignment -> column COMPARISON NULL
-- On SELECT reduce production assignment -> column COMPARISON NULL
-- On ROLLBACK reduce production assignment -> column COMPARISON NULL
-- On PROCEDURE reduce production assignment -> column COMPARISON NULL
-- On OPEN reduce production assignment -> column COMPARISON NULL
-- On INSERT reduce production assignment -> column COMPARISON NULL
-- On FETCH reduce production assignment -> column COMPARISON NULL
-- On EOF reduce production assignment -> column COMPARISON NULL
-- On DELETE reduce production assignment -> column COMPARISON NULL
-- On COMMIT reduce production assignment -> column COMPARISON NULL
-- On COMMA reduce production assignment -> column COMPARISON NULL
-- On CLOSE reduce production assignment -> column COMPARISON NULL

State 72:
## Known stack suffix:
## column COMPARISON scalar_exp
## LR(1) items:
assignment -> column COMPARISON scalar_exp . [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ WHERE UPDATE TIMES SEMICOLON SELECT ROLLBACK PROCEDURE PLUS OPEN MINUS INSERT FETCH EOF DIV DELETE COMMIT COMMA CLOSE # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WHERE UPDATE TIMES SEMICOLON SELECT ROLLBACK PROCEDURE PLUS OPEN MINUS INSERT FETCH EOF DIV DELETE COMMIT COMMA CLOSE # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WHERE UPDATE TIMES SEMICOLON SELECT ROLLBACK PROCEDURE PLUS OPEN MINUS INSERT FETCH EOF DIV DELETE COMMIT COMMA CLOSE # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WHERE UPDATE TIMES SEMICOLON SELECT ROLLBACK PROCEDURE PLUS OPEN MINUS INSERT FETCH EOF DIV DELETE COMMIT COMMA CLOSE # ]
## Transitions:
-- On TIMES shift to state 34
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
## Reductions:
-- On WHERE reduce production assignment -> column COMPARISON scalar_exp
-- On UPDATE reduce production assignment -> column COMPARISON scalar_exp
-- On SEMICOLON reduce production assignment -> column COMPARISON scalar_exp
-- On SELECT reduce production assignment -> column COMPARISON scalar_exp
-- On ROLLBACK reduce production assignment -> column COMPARISON scalar_exp
-- On PROCEDURE reduce production assignment -> column COMPARISON scalar_exp
-- On OPEN reduce production assignment -> column COMPARISON scalar_exp
-- On INSERT reduce production assignment -> column COMPARISON scalar_exp
-- On FETCH reduce production assignment -> column COMPARISON scalar_exp
-- On EOF reduce production assignment -> column COMPARISON scalar_exp
-- On DELETE reduce production assignment -> column COMPARISON scalar_exp
-- On COMMIT reduce production assignment -> column COMPARISON scalar_exp
-- On COMMA reduce production assignment -> column COMPARISON scalar_exp
-- On CLOSE reduce production assignment -> column COMPARISON scalar_exp

State 73:
## Known stack suffix:
## UPDATE table SET assignment_commalist
## LR(1) items:
assignment_commalist -> assignment_commalist . COMMA assignment [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
update_statement_positioned -> UPDATE table SET assignment_commalist . WHERE CURRENT OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
update_statement_searched -> UPDATE table SET assignment_commalist . opt_where_clause [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On WHERE shift to state 74
-- On COMMA shift to state 185
-- On where_clause shift to state 159
-- On opt_where_clause shift to state 187
## Reductions:
-- On UPDATE reduce production opt_where_clause ->
-- On SEMICOLON reduce production opt_where_clause ->
-- On SELECT reduce production opt_where_clause ->
-- On ROLLBACK reduce production opt_where_clause ->
-- On PROCEDURE reduce production opt_where_clause ->
-- On OPEN reduce production opt_where_clause ->
-- On INSERT reduce production opt_where_clause ->
-- On FETCH reduce production opt_where_clause ->
-- On EOF reduce production opt_where_clause ->
-- On DELETE reduce production opt_where_clause ->
-- On COMMIT reduce production opt_where_clause ->
-- On CLOSE reduce production opt_where_clause ->

State 74:
## Known stack suffix:
## UPDATE table SET assignment_commalist WHERE
## LR(1) items:
update_statement_positioned -> UPDATE table SET assignment_commalist WHERE . CURRENT OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
where_clause -> WHERE . search_condition [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On CURRENT shift to state 181
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 97
-- On scalar_exp shift to state 102
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 75:
## Known stack suffix:
## NOT
## LR(1) items:
search_condition -> NOT . search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 180
-- On scalar_exp shift to state 102
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 76:
## Known stack suffix:
## LPAREN
## LR(1) items:
scalar_exp -> LPAREN . scalar_exp RPAREN [ TIMES RPAREN PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
search_condition -> LPAREN . search_condition RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 177
-- On scalar_exp shift to state 179
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 77:
## Known stack suffix:
## EXISTS
## LR(1) items:
existence_test -> EXISTS . LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On LPAREN shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## EXISTS LPAREN
## LR(1) items:
existence_test -> EXISTS LPAREN . select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On SELECT shift to state 79
-- On select_exp shift to state 175
## Reductions:

State 79:
## Known stack suffix:
## SELECT
## LR(1) items:
select_exp -> SELECT . opt_all_distinct selection table_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On DISTINCT shift to state 80
-- On ALL shift to state 81
-- On opt_all_distinct shift to state 82
## Reductions:
-- On USER reduce production opt_all_distinct ->
-- On TIMES reduce production opt_all_distinct ->
-- On SUM reduce production opt_all_distinct ->
-- On STRING reduce production opt_all_distinct ->
-- On PLUS reduce production opt_all_distinct ->
-- On MINUS reduce production opt_all_distinct ->
-- On MIN reduce production opt_all_distinct ->
-- On MAX reduce production opt_all_distinct ->
-- On LPAREN reduce production opt_all_distinct ->
-- On INTNUM reduce production opt_all_distinct ->
-- On IDENT reduce production opt_all_distinct ->
-- On COUNT reduce production opt_all_distinct ->
-- On COLON reduce production opt_all_distinct ->
-- On AVG reduce production opt_all_distinct ->

State 80:
## Known stack suffix:
## DISTINCT
## LR(1) items:
opt_all_distinct -> DISTINCT . [ USER TIMES SUM STRING PLUS MINUS MIN MAX LPAREN INTNUM IDENT COUNT COLON AVG ]
## Transitions:
## Reductions:
-- On USER reduce production opt_all_distinct -> DISTINCT
-- On TIMES reduce production opt_all_distinct -> DISTINCT
-- On SUM reduce production opt_all_distinct -> DISTINCT
-- On STRING reduce production opt_all_distinct -> DISTINCT
-- On PLUS reduce production opt_all_distinct -> DISTINCT
-- On MINUS reduce production opt_all_distinct -> DISTINCT
-- On MIN reduce production opt_all_distinct -> DISTINCT
-- On MAX reduce production opt_all_distinct -> DISTINCT
-- On LPAREN reduce production opt_all_distinct -> DISTINCT
-- On INTNUM reduce production opt_all_distinct -> DISTINCT
-- On IDENT reduce production opt_all_distinct -> DISTINCT
-- On COUNT reduce production opt_all_distinct -> DISTINCT
-- On COLON reduce production opt_all_distinct -> DISTINCT
-- On AVG reduce production opt_all_distinct -> DISTINCT

State 81:
## Known stack suffix:
## ALL
## LR(1) items:
opt_all_distinct -> ALL . [ USER TIMES SUM STRING PLUS MINUS MIN MAX LPAREN INTNUM IDENT COUNT COLON AVG ]
## Transitions:
## Reductions:
-- On USER reduce production opt_all_distinct -> ALL
-- On TIMES reduce production opt_all_distinct -> ALL
-- On SUM reduce production opt_all_distinct -> ALL
-- On STRING reduce production opt_all_distinct -> ALL
-- On PLUS reduce production opt_all_distinct -> ALL
-- On MINUS reduce production opt_all_distinct -> ALL
-- On MIN reduce production opt_all_distinct -> ALL
-- On MAX reduce production opt_all_distinct -> ALL
-- On LPAREN reduce production opt_all_distinct -> ALL
-- On INTNUM reduce production opt_all_distinct -> ALL
-- On IDENT reduce production opt_all_distinct -> ALL
-- On COUNT reduce production opt_all_distinct -> ALL
-- On COLON reduce production opt_all_distinct -> ALL
-- On AVG reduce production opt_all_distinct -> ALL

State 82:
## Known stack suffix:
## SELECT opt_all_distinct
## LR(1) items:
select_exp -> SELECT opt_all_distinct . selection table_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On USER shift to state 17
-- On TIMES shift to state 83
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On selection shift to state 84
-- On scalar_exp shift to state 171
-- On rev_scalar_exp_commalist shift to state 172
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 83:
## Known stack suffix:
## TIMES
## LR(1) items:
selection -> TIMES . [ INTO FROM ]
## Transitions:
## Reductions:
-- On INTO reduce production selection -> TIMES
-- On FROM reduce production selection -> TIMES

State 84:
## Known stack suffix:
## SELECT opt_all_distinct selection
## LR(1) items:
select_exp -> SELECT opt_all_distinct selection . table_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On FROM shift to state 85
-- On table_exp shift to state 93
-- On from_clause shift to state 94
## Reductions:

State 85:
## Known stack suffix:
## FROM
## LR(1) items:
from_clause -> FROM . rev_table_ref_commalist [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 11
-- On table_ref shift to state 86
-- On table shift to state 87
-- On rev_table_ref_commalist shift to state 90
## Reductions:

State 86:
## Known stack suffix:
## table_ref
## LR(1) items:
rev_table_ref_commalist -> table_ref . [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On WITH reduce production rev_table_ref_commalist -> table_ref
-- On WHERE reduce production rev_table_ref_commalist -> table_ref
-- On UPDATE reduce production rev_table_ref_commalist -> table_ref
-- On UNION reduce production rev_table_ref_commalist -> table_ref
-- On SEMICOLON reduce production rev_table_ref_commalist -> table_ref
-- On SELECT reduce production rev_table_ref_commalist -> table_ref
-- On RPAREN reduce production rev_table_ref_commalist -> table_ref
-- On ROLLBACK reduce production rev_table_ref_commalist -> table_ref
-- On PROCEDURE reduce production rev_table_ref_commalist -> table_ref
-- On ORDER reduce production rev_table_ref_commalist -> table_ref
-- On OPEN reduce production rev_table_ref_commalist -> table_ref
-- On INSERT reduce production rev_table_ref_commalist -> table_ref
-- On HAVING reduce production rev_table_ref_commalist -> table_ref
-- On GROUP reduce production rev_table_ref_commalist -> table_ref
-- On GRANT reduce production rev_table_ref_commalist -> table_ref
-- On FETCH reduce production rev_table_ref_commalist -> table_ref
-- On EOF reduce production rev_table_ref_commalist -> table_ref
-- On DELETE reduce production rev_table_ref_commalist -> table_ref
-- On DECLARE reduce production rev_table_ref_commalist -> table_ref
-- On CREATE reduce production rev_table_ref_commalist -> table_ref
-- On COMMIT reduce production rev_table_ref_commalist -> table_ref
-- On COMMA reduce production rev_table_ref_commalist -> table_ref
-- On CLOSE reduce production rev_table_ref_commalist -> table_ref

State 87:
## Known stack suffix:
## table
## LR(1) items:
table_ref -> table . [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
table_ref -> table . AS IDENT [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
-- On AS shift to state 88
## Reductions:
-- On WITH reduce production table_ref -> table
-- On WHERE reduce production table_ref -> table
-- On UPDATE reduce production table_ref -> table
-- On UNION reduce production table_ref -> table
-- On SEMICOLON reduce production table_ref -> table
-- On SELECT reduce production table_ref -> table
-- On RPAREN reduce production table_ref -> table
-- On ROLLBACK reduce production table_ref -> table
-- On PROCEDURE reduce production table_ref -> table
-- On ORDER reduce production table_ref -> table
-- On OPEN reduce production table_ref -> table
-- On INSERT reduce production table_ref -> table
-- On HAVING reduce production table_ref -> table
-- On GROUP reduce production table_ref -> table
-- On GRANT reduce production table_ref -> table
-- On FETCH reduce production table_ref -> table
-- On EOF reduce production table_ref -> table
-- On DELETE reduce production table_ref -> table
-- On DECLARE reduce production table_ref -> table
-- On CREATE reduce production table_ref -> table
-- On COMMIT reduce production table_ref -> table
-- On COMMA reduce production table_ref -> table
-- On CLOSE reduce production table_ref -> table

State 88:
## Known stack suffix:
## table AS
## LR(1) items:
table_ref -> table AS . IDENT [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
-- On IDENT shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## table AS IDENT
## LR(1) items:
table_ref -> table AS IDENT . [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On WITH reduce production table_ref -> table AS IDENT
-- On WHERE reduce production table_ref -> table AS IDENT
-- On UPDATE reduce production table_ref -> table AS IDENT
-- On UNION reduce production table_ref -> table AS IDENT
-- On SEMICOLON reduce production table_ref -> table AS IDENT
-- On SELECT reduce production table_ref -> table AS IDENT
-- On RPAREN reduce production table_ref -> table AS IDENT
-- On ROLLBACK reduce production table_ref -> table AS IDENT
-- On PROCEDURE reduce production table_ref -> table AS IDENT
-- On ORDER reduce production table_ref -> table AS IDENT
-- On OPEN reduce production table_ref -> table AS IDENT
-- On INSERT reduce production table_ref -> table AS IDENT
-- On HAVING reduce production table_ref -> table AS IDENT
-- On GROUP reduce production table_ref -> table AS IDENT
-- On GRANT reduce production table_ref -> table AS IDENT
-- On FETCH reduce production table_ref -> table AS IDENT
-- On EOF reduce production table_ref -> table AS IDENT
-- On DELETE reduce production table_ref -> table AS IDENT
-- On DECLARE reduce production table_ref -> table AS IDENT
-- On CREATE reduce production table_ref -> table AS IDENT
-- On COMMIT reduce production table_ref -> table AS IDENT
-- On COMMA reduce production table_ref -> table AS IDENT
-- On CLOSE reduce production table_ref -> table AS IDENT

State 90:
## Known stack suffix:
## FROM rev_table_ref_commalist
## LR(1) items:
from_clause -> FROM rev_table_ref_commalist . [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
rev_table_ref_commalist -> rev_table_ref_commalist . COMMA table_ref [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
-- On COMMA shift to state 91
## Reductions:
-- On WITH reduce production from_clause -> FROM rev_table_ref_commalist
-- On WHERE reduce production from_clause -> FROM rev_table_ref_commalist
-- On UPDATE reduce production from_clause -> FROM rev_table_ref_commalist
-- On UNION reduce production from_clause -> FROM rev_table_ref_commalist
-- On SEMICOLON reduce production from_clause -> FROM rev_table_ref_commalist
-- On SELECT reduce production from_clause -> FROM rev_table_ref_commalist
-- On RPAREN reduce production from_clause -> FROM rev_table_ref_commalist
-- On ROLLBACK reduce production from_clause -> FROM rev_table_ref_commalist
-- On PROCEDURE reduce production from_clause -> FROM rev_table_ref_commalist
-- On ORDER reduce production from_clause -> FROM rev_table_ref_commalist
-- On OPEN reduce production from_clause -> FROM rev_table_ref_commalist
-- On INSERT reduce production from_clause -> FROM rev_table_ref_commalist
-- On HAVING reduce production from_clause -> FROM rev_table_ref_commalist
-- On GROUP reduce production from_clause -> FROM rev_table_ref_commalist
-- On GRANT reduce production from_clause -> FROM rev_table_ref_commalist
-- On FETCH reduce production from_clause -> FROM rev_table_ref_commalist
-- On EOF reduce production from_clause -> FROM rev_table_ref_commalist
-- On DELETE reduce production from_clause -> FROM rev_table_ref_commalist
-- On DECLARE reduce production from_clause -> FROM rev_table_ref_commalist
-- On CREATE reduce production from_clause -> FROM rev_table_ref_commalist
-- On COMMIT reduce production from_clause -> FROM rev_table_ref_commalist
-- On CLOSE reduce production from_clause -> FROM rev_table_ref_commalist

State 91:
## Known stack suffix:
## rev_table_ref_commalist COMMA
## LR(1) items:
rev_table_ref_commalist -> rev_table_ref_commalist COMMA . table_ref [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
-- On IDENT shift to state 11
-- On table_ref shift to state 92
-- On table shift to state 87
## Reductions:

State 92:
## Known stack suffix:
## rev_table_ref_commalist COMMA table_ref
## LR(1) items:
rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref . [ WITH WHERE UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On WITH reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On WHERE reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On UPDATE reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On UNION reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On SEMICOLON reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On SELECT reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On RPAREN reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On ROLLBACK reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On PROCEDURE reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On ORDER reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On OPEN reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On INSERT reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On HAVING reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On GROUP reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On GRANT reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On FETCH reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On EOF reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On DELETE reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On DECLARE reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On CREATE reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On COMMIT reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On COMMA reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref
-- On CLOSE reduce production rev_table_ref_commalist -> rev_table_ref_commalist COMMA table_ref

State 93:
## Known stack suffix:
## SELECT opt_all_distinct selection table_exp
## LR(1) items:
select_exp -> SELECT opt_all_distinct selection table_exp . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On WITH reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On UPDATE reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On UNION reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On SEMICOLON reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On SELECT reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On RPAREN reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On ROLLBACK reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On PROCEDURE reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On ORDER reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On OPEN reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On INSERT reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On GRANT reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On FETCH reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On EOF reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On DELETE reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On DECLARE reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On CREATE reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On COMMIT reduce production select_exp -> SELECT opt_all_distinct selection table_exp
-- On CLOSE reduce production select_exp -> SELECT opt_all_distinct selection table_exp

State 94:
## Known stack suffix:
## from_clause
## LR(1) items:
table_exp -> from_clause . opt_where_clause opt_group_by_clause opt_having_clause [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On WHERE shift to state 95
-- On where_clause shift to state 159
-- On opt_where_clause shift to state 160
## Reductions:
-- On WITH reduce production opt_where_clause ->
-- On UPDATE reduce production opt_where_clause ->
-- On UNION reduce production opt_where_clause ->
-- On SEMICOLON reduce production opt_where_clause ->
-- On SELECT reduce production opt_where_clause ->
-- On RPAREN reduce production opt_where_clause ->
-- On ROLLBACK reduce production opt_where_clause ->
-- On PROCEDURE reduce production opt_where_clause ->
-- On ORDER reduce production opt_where_clause ->
-- On OPEN reduce production opt_where_clause ->
-- On INSERT reduce production opt_where_clause ->
-- On HAVING reduce production opt_where_clause ->
-- On GROUP reduce production opt_where_clause ->
-- On GRANT reduce production opt_where_clause ->
-- On FETCH reduce production opt_where_clause ->
-- On EOF reduce production opt_where_clause ->
-- On DELETE reduce production opt_where_clause ->
-- On DECLARE reduce production opt_where_clause ->
-- On CREATE reduce production opt_where_clause ->
-- On COMMIT reduce production opt_where_clause ->
-- On CLOSE reduce production opt_where_clause ->

State 95:
## Known stack suffix:
## WHERE
## LR(1) items:
where_clause -> WHERE . search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 97
-- On scalar_exp shift to state 102
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 96:
## Known stack suffix:
## test_for_null
## LR(1) items:
predicate -> test_for_null . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production predicate -> test_for_null
-- On UPDATE reduce production predicate -> test_for_null
-- On UNION reduce production predicate -> test_for_null
-- On SEMICOLON reduce production predicate -> test_for_null
-- On SELECT reduce production predicate -> test_for_null
-- On RPAREN reduce production predicate -> test_for_null
-- On ROLLBACK reduce production predicate -> test_for_null
-- On PROCEDURE reduce production predicate -> test_for_null
-- On ORDER reduce production predicate -> test_for_null
-- On OR reduce production predicate -> test_for_null
-- On OPEN reduce production predicate -> test_for_null
-- On INSERT reduce production predicate -> test_for_null
-- On HAVING reduce production predicate -> test_for_null
-- On GROUP reduce production predicate -> test_for_null
-- On GRANT reduce production predicate -> test_for_null
-- On FETCH reduce production predicate -> test_for_null
-- On EOF reduce production predicate -> test_for_null
-- On DELETE reduce production predicate -> test_for_null
-- On DECLARE reduce production predicate -> test_for_null
-- On CREATE reduce production predicate -> test_for_null
-- On COMMIT reduce production predicate -> test_for_null
-- On CLOSE reduce production predicate -> test_for_null
-- On AND reduce production predicate -> test_for_null

State 97:
## Known stack suffix:
## WHERE search_condition
## LR(1) items:
search_condition -> search_condition . OR search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
search_condition -> search_condition . AND search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
where_clause -> WHERE search_condition . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On OR shift to state 98
-- On AND shift to state 100
## Reductions:
-- On WITH reduce production where_clause -> WHERE search_condition
-- On UPDATE reduce production where_clause -> WHERE search_condition
-- On UNION reduce production where_clause -> WHERE search_condition
-- On SEMICOLON reduce production where_clause -> WHERE search_condition
-- On SELECT reduce production where_clause -> WHERE search_condition
-- On RPAREN reduce production where_clause -> WHERE search_condition
-- On ROLLBACK reduce production where_clause -> WHERE search_condition
-- On PROCEDURE reduce production where_clause -> WHERE search_condition
-- On ORDER reduce production where_clause -> WHERE search_condition
-- On OPEN reduce production where_clause -> WHERE search_condition
-- On INSERT reduce production where_clause -> WHERE search_condition
-- On HAVING reduce production where_clause -> WHERE search_condition
-- On GROUP reduce production where_clause -> WHERE search_condition
-- On GRANT reduce production where_clause -> WHERE search_condition
-- On FETCH reduce production where_clause -> WHERE search_condition
-- On EOF reduce production where_clause -> WHERE search_condition
-- On DELETE reduce production where_clause -> WHERE search_condition
-- On DECLARE reduce production where_clause -> WHERE search_condition
-- On CREATE reduce production where_clause -> WHERE search_condition
-- On COMMIT reduce production where_clause -> WHERE search_condition
-- On CLOSE reduce production where_clause -> WHERE search_condition

State 98:
## Known stack suffix:
## search_condition OR
## LR(1) items:
search_condition -> search_condition OR . search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 99
-- On scalar_exp shift to state 102
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 99:
## Known stack suffix:
## search_condition OR search_condition
## LR(1) items:
search_condition -> search_condition . OR search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
search_condition -> search_condition OR search_condition . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
search_condition -> search_condition . AND search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On AND shift to state 100
## Reductions:
-- On WITH reduce production search_condition -> search_condition OR search_condition
-- On UPDATE reduce production search_condition -> search_condition OR search_condition
-- On UNION reduce production search_condition -> search_condition OR search_condition
-- On SEMICOLON reduce production search_condition -> search_condition OR search_condition
-- On SELECT reduce production search_condition -> search_condition OR search_condition
-- On RPAREN reduce production search_condition -> search_condition OR search_condition
-- On ROLLBACK reduce production search_condition -> search_condition OR search_condition
-- On PROCEDURE reduce production search_condition -> search_condition OR search_condition
-- On ORDER reduce production search_condition -> search_condition OR search_condition
-- On OR reduce production search_condition -> search_condition OR search_condition
-- On OPEN reduce production search_condition -> search_condition OR search_condition
-- On INSERT reduce production search_condition -> search_condition OR search_condition
-- On HAVING reduce production search_condition -> search_condition OR search_condition
-- On GROUP reduce production search_condition -> search_condition OR search_condition
-- On GRANT reduce production search_condition -> search_condition OR search_condition
-- On FETCH reduce production search_condition -> search_condition OR search_condition
-- On EOF reduce production search_condition -> search_condition OR search_condition
-- On DELETE reduce production search_condition -> search_condition OR search_condition
-- On DECLARE reduce production search_condition -> search_condition OR search_condition
-- On CREATE reduce production search_condition -> search_condition OR search_condition
-- On COMMIT reduce production search_condition -> search_condition OR search_condition
-- On CLOSE reduce production search_condition -> search_condition OR search_condition

State 100:
## Known stack suffix:
## search_condition AND
## LR(1) items:
search_condition -> search_condition AND . search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 101
-- On scalar_exp shift to state 102
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 101:
## Known stack suffix:
## search_condition AND search_condition
## LR(1) items:
search_condition -> search_condition . OR search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
search_condition -> search_condition . AND search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
search_condition -> search_condition AND search_condition . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production search_condition -> search_condition AND search_condition
-- On UPDATE reduce production search_condition -> search_condition AND search_condition
-- On UNION reduce production search_condition -> search_condition AND search_condition
-- On SEMICOLON reduce production search_condition -> search_condition AND search_condition
-- On SELECT reduce production search_condition -> search_condition AND search_condition
-- On RPAREN reduce production search_condition -> search_condition AND search_condition
-- On ROLLBACK reduce production search_condition -> search_condition AND search_condition
-- On PROCEDURE reduce production search_condition -> search_condition AND search_condition
-- On ORDER reduce production search_condition -> search_condition AND search_condition
-- On OR reduce production search_condition -> search_condition AND search_condition
-- On OPEN reduce production search_condition -> search_condition AND search_condition
-- On INSERT reduce production search_condition -> search_condition AND search_condition
-- On HAVING reduce production search_condition -> search_condition AND search_condition
-- On GROUP reduce production search_condition -> search_condition AND search_condition
-- On GRANT reduce production search_condition -> search_condition AND search_condition
-- On FETCH reduce production search_condition -> search_condition AND search_condition
-- On EOF reduce production search_condition -> search_condition AND search_condition
-- On DELETE reduce production search_condition -> search_condition AND search_condition
-- On DECLARE reduce production search_condition -> search_condition AND search_condition
-- On CREATE reduce production search_condition -> search_condition AND search_condition
-- On COMMIT reduce production search_condition -> search_condition AND search_condition
-- On CLOSE reduce production search_condition -> search_condition AND search_condition
-- On AND reduce production search_condition -> search_condition AND search_condition

State 102:
## Known stack suffix:
## scalar_exp
## LR(1) items:
all_or_any_predicate -> scalar_exp . COMPARISON any_all_some LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
between_predicate -> scalar_exp . NOT BETWEEN scalar_exp AND scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
between_predicate -> scalar_exp . BETWEEN scalar_exp AND scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
comparison_predicate -> scalar_exp . COMPARISON scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
comparison_predicate -> scalar_exp . COMPARISON LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp . NOT IN LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp . IN LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp . NOT IN LPAREN rev_atom_commalist RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp . IN LPAREN rev_atom_commalist RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
like_predicate -> scalar_exp . NOT LIKE atom opt_escape [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
like_predicate -> scalar_exp . LIKE atom opt_escape [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ TIMES PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ TIMES PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ TIMES PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
scalar_exp -> scalar_exp . DIV scalar_exp [ TIMES PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
## Transitions:
-- On TIMES shift to state 34
-- On PLUS shift to state 60
-- On NOT shift to state 103
-- On MINUS shift to state 64
-- On LIKE shift to state 122
-- On IN shift to state 125
-- On DIV shift to state 62
-- On COMPARISON shift to state 131
-- On BETWEEN shift to state 143
## Reductions:

State 103:
## Known stack suffix:
## scalar_exp NOT
## LR(1) items:
between_predicate -> scalar_exp NOT . BETWEEN scalar_exp AND scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp NOT . IN LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp NOT . IN LPAREN rev_atom_commalist RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
like_predicate -> scalar_exp NOT . LIKE atom opt_escape [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On LIKE shift to state 104
-- On IN shift to state 109
-- On BETWEEN shift to state 118
## Reductions:

State 104:
## Known stack suffix:
## scalar_exp NOT LIKE
## LR(1) items:
like_predicate -> scalar_exp NOT LIKE . atom opt_escape [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On STRING shift to state 19
-- On INTNUM shift to state 25
-- On COLON shift to state 30
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On atom shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## scalar_exp NOT LIKE atom
## LR(1) items:
like_predicate -> scalar_exp NOT LIKE atom . opt_escape [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On ESCAPE shift to state 106
-- On opt_escape shift to state 108
## Reductions:
-- On WITH reduce production opt_escape ->
-- On UPDATE reduce production opt_escape ->
-- On UNION reduce production opt_escape ->
-- On SEMICOLON reduce production opt_escape ->
-- On SELECT reduce production opt_escape ->
-- On RPAREN reduce production opt_escape ->
-- On ROLLBACK reduce production opt_escape ->
-- On PROCEDURE reduce production opt_escape ->
-- On ORDER reduce production opt_escape ->
-- On OR reduce production opt_escape ->
-- On OPEN reduce production opt_escape ->
-- On INSERT reduce production opt_escape ->
-- On HAVING reduce production opt_escape ->
-- On GROUP reduce production opt_escape ->
-- On GRANT reduce production opt_escape ->
-- On FETCH reduce production opt_escape ->
-- On EOF reduce production opt_escape ->
-- On DELETE reduce production opt_escape ->
-- On DECLARE reduce production opt_escape ->
-- On CREATE reduce production opt_escape ->
-- On COMMIT reduce production opt_escape ->
-- On CLOSE reduce production opt_escape ->
-- On AND reduce production opt_escape ->

State 106:
## Known stack suffix:
## ESCAPE
## LR(1) items:
opt_escape -> ESCAPE . atom [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On STRING shift to state 19
-- On INTNUM shift to state 25
-- On COLON shift to state 30
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On atom shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## ESCAPE atom
## LR(1) items:
opt_escape -> ESCAPE atom . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production opt_escape -> ESCAPE atom
-- On UPDATE reduce production opt_escape -> ESCAPE atom
-- On UNION reduce production opt_escape -> ESCAPE atom
-- On SEMICOLON reduce production opt_escape -> ESCAPE atom
-- On SELECT reduce production opt_escape -> ESCAPE atom
-- On RPAREN reduce production opt_escape -> ESCAPE atom
-- On ROLLBACK reduce production opt_escape -> ESCAPE atom
-- On PROCEDURE reduce production opt_escape -> ESCAPE atom
-- On ORDER reduce production opt_escape -> ESCAPE atom
-- On OR reduce production opt_escape -> ESCAPE atom
-- On OPEN reduce production opt_escape -> ESCAPE atom
-- On INSERT reduce production opt_escape -> ESCAPE atom
-- On HAVING reduce production opt_escape -> ESCAPE atom
-- On GROUP reduce production opt_escape -> ESCAPE atom
-- On GRANT reduce production opt_escape -> ESCAPE atom
-- On FETCH reduce production opt_escape -> ESCAPE atom
-- On EOF reduce production opt_escape -> ESCAPE atom
-- On DELETE reduce production opt_escape -> ESCAPE atom
-- On DECLARE reduce production opt_escape -> ESCAPE atom
-- On CREATE reduce production opt_escape -> ESCAPE atom
-- On COMMIT reduce production opt_escape -> ESCAPE atom
-- On CLOSE reduce production opt_escape -> ESCAPE atom
-- On AND reduce production opt_escape -> ESCAPE atom

State 108:
## Known stack suffix:
## scalar_exp NOT LIKE atom opt_escape
## LR(1) items:
like_predicate -> scalar_exp NOT LIKE atom opt_escape . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On UPDATE reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On UNION reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On SEMICOLON reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On SELECT reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On RPAREN reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On ROLLBACK reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On PROCEDURE reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On ORDER reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On OR reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On OPEN reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On INSERT reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On HAVING reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On GROUP reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On GRANT reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On FETCH reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On EOF reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On DELETE reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On DECLARE reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On CREATE reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On COMMIT reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On CLOSE reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape
-- On AND reduce production like_predicate -> scalar_exp NOT LIKE atom opt_escape

State 109:
## Known stack suffix:
## scalar_exp NOT IN
## LR(1) items:
in_predicate -> scalar_exp NOT IN . LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp NOT IN . LPAREN rev_atom_commalist RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On LPAREN shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## scalar_exp NOT IN LPAREN
## LR(1) items:
in_predicate -> scalar_exp NOT IN LPAREN . select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp NOT IN LPAREN . rev_atom_commalist RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On STRING shift to state 19
-- On SELECT shift to state 79
-- On INTNUM shift to state 25
-- On COLON shift to state 30
-- On select_exp shift to state 111
-- On rev_atom_commalist shift to state 113
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On atom shift to state 117
## Reductions:

State 111:
## Known stack suffix:
## scalar_exp NOT IN LPAREN select_exp
## LR(1) items:
in_predicate -> scalar_exp NOT IN LPAREN select_exp . RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On RPAREN shift to state 112
## Reductions:

State 112:
## Known stack suffix:
## scalar_exp NOT IN LPAREN select_exp RPAREN
## LR(1) items:
in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On UPDATE reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On UNION reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On SEMICOLON reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On SELECT reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On RPAREN reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On ROLLBACK reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On PROCEDURE reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On ORDER reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On OR reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On OPEN reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On INSERT reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On HAVING reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On GROUP reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On GRANT reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On FETCH reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On EOF reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On DELETE reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On DECLARE reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On CREATE reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On COMMIT reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On CLOSE reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN
-- On AND reduce production in_predicate -> scalar_exp NOT IN LPAREN select_exp RPAREN

State 113:
## Known stack suffix:
## scalar_exp NOT IN LPAREN rev_atom_commalist
## LR(1) items:
in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist . RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
rev_atom_commalist -> rev_atom_commalist . COMMA atom [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 114
-- On COMMA shift to state 115
## Reductions:

State 114:
## Known stack suffix:
## scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
## LR(1) items:
in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On UPDATE reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On UNION reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On SEMICOLON reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On SELECT reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On RPAREN reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On ROLLBACK reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On PROCEDURE reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On ORDER reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On OR reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On OPEN reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On INSERT reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On HAVING reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On GROUP reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On GRANT reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On FETCH reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On EOF reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On DELETE reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On DECLARE reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On CREATE reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On COMMIT reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On CLOSE reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN
-- On AND reduce production in_predicate -> scalar_exp NOT IN LPAREN rev_atom_commalist RPAREN

State 115:
## Known stack suffix:
## rev_atom_commalist COMMA
## LR(1) items:
rev_atom_commalist -> rev_atom_commalist COMMA . atom [ RPAREN COMMA ]
## Transitions:
-- On USER shift to state 17
-- On STRING shift to state 19
-- On INTNUM shift to state 25
-- On COLON shift to state 30
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On atom shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## rev_atom_commalist COMMA atom
## LR(1) items:
rev_atom_commalist -> rev_atom_commalist COMMA atom . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production rev_atom_commalist -> rev_atom_commalist COMMA atom
-- On COMMA reduce production rev_atom_commalist -> rev_atom_commalist COMMA atom

State 117:
## Known stack suffix:
## atom
## LR(1) items:
rev_atom_commalist -> atom . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production rev_atom_commalist -> atom
-- On COMMA reduce production rev_atom_commalist -> atom

State 118:
## Known stack suffix:
## scalar_exp NOT BETWEEN
## LR(1) items:
between_predicate -> scalar_exp NOT BETWEEN . scalar_exp AND scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 119
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 119:
## Known stack suffix:
## scalar_exp NOT BETWEEN scalar_exp
## LR(1) items:
between_predicate -> scalar_exp NOT BETWEEN scalar_exp . AND scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ TIMES PLUS MINUS DIV AND ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ TIMES PLUS MINUS DIV AND ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ TIMES PLUS MINUS DIV AND ]
scalar_exp -> scalar_exp . DIV scalar_exp [ TIMES PLUS MINUS DIV AND ]
## Transitions:
-- On TIMES shift to state 34
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
-- On AND shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## scalar_exp NOT BETWEEN scalar_exp AND
## LR(1) items:
between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND . scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 121
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 121:
## Known stack suffix:
## scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
## LR(1) items:
between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On TIMES shift to state 34
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
## Reductions:
-- On WITH reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On UPDATE reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On UNION reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On SEMICOLON reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On SELECT reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On RPAREN reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On ROLLBACK reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On PROCEDURE reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On ORDER reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On OR reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On OPEN reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On INSERT reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On HAVING reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On GROUP reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On GRANT reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On FETCH reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On EOF reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On DELETE reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On DECLARE reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On CREATE reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On COMMIT reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On CLOSE reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp
-- On AND reduce production between_predicate -> scalar_exp NOT BETWEEN scalar_exp AND scalar_exp

State 122:
## Known stack suffix:
## scalar_exp LIKE
## LR(1) items:
like_predicate -> scalar_exp LIKE . atom opt_escape [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On STRING shift to state 19
-- On INTNUM shift to state 25
-- On COLON shift to state 30
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On atom shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## scalar_exp LIKE atom
## LR(1) items:
like_predicate -> scalar_exp LIKE atom . opt_escape [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On ESCAPE shift to state 106
-- On opt_escape shift to state 124
## Reductions:
-- On WITH reduce production opt_escape ->
-- On UPDATE reduce production opt_escape ->
-- On UNION reduce production opt_escape ->
-- On SEMICOLON reduce production opt_escape ->
-- On SELECT reduce production opt_escape ->
-- On RPAREN reduce production opt_escape ->
-- On ROLLBACK reduce production opt_escape ->
-- On PROCEDURE reduce production opt_escape ->
-- On ORDER reduce production opt_escape ->
-- On OR reduce production opt_escape ->
-- On OPEN reduce production opt_escape ->
-- On INSERT reduce production opt_escape ->
-- On HAVING reduce production opt_escape ->
-- On GROUP reduce production opt_escape ->
-- On GRANT reduce production opt_escape ->
-- On FETCH reduce production opt_escape ->
-- On EOF reduce production opt_escape ->
-- On DELETE reduce production opt_escape ->
-- On DECLARE reduce production opt_escape ->
-- On CREATE reduce production opt_escape ->
-- On COMMIT reduce production opt_escape ->
-- On CLOSE reduce production opt_escape ->
-- On AND reduce production opt_escape ->

State 124:
## Known stack suffix:
## scalar_exp LIKE atom opt_escape
## LR(1) items:
like_predicate -> scalar_exp LIKE atom opt_escape . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On UPDATE reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On UNION reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On SEMICOLON reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On SELECT reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On RPAREN reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On ROLLBACK reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On PROCEDURE reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On ORDER reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On OR reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On OPEN reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On INSERT reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On HAVING reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On GROUP reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On GRANT reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On FETCH reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On EOF reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On DELETE reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On DECLARE reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On CREATE reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On COMMIT reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On CLOSE reduce production like_predicate -> scalar_exp LIKE atom opt_escape
-- On AND reduce production like_predicate -> scalar_exp LIKE atom opt_escape

State 125:
## Known stack suffix:
## scalar_exp IN
## LR(1) items:
in_predicate -> scalar_exp IN . LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp IN . LPAREN rev_atom_commalist RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On LPAREN shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## scalar_exp IN LPAREN
## LR(1) items:
in_predicate -> scalar_exp IN LPAREN . select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
in_predicate -> scalar_exp IN LPAREN . rev_atom_commalist RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On STRING shift to state 19
-- On SELECT shift to state 79
-- On INTNUM shift to state 25
-- On COLON shift to state 30
-- On select_exp shift to state 127
-- On rev_atom_commalist shift to state 129
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On atom shift to state 117
## Reductions:

State 127:
## Known stack suffix:
## scalar_exp IN LPAREN select_exp
## LR(1) items:
in_predicate -> scalar_exp IN LPAREN select_exp . RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On RPAREN shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## scalar_exp IN LPAREN select_exp RPAREN
## LR(1) items:
in_predicate -> scalar_exp IN LPAREN select_exp RPAREN . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On UPDATE reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On UNION reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On SEMICOLON reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On SELECT reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On RPAREN reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On ROLLBACK reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On PROCEDURE reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On ORDER reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On OR reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On OPEN reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On INSERT reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On HAVING reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On GROUP reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On GRANT reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On FETCH reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On EOF reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On DELETE reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On DECLARE reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On CREATE reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On COMMIT reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On CLOSE reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN
-- On AND reduce production in_predicate -> scalar_exp IN LPAREN select_exp RPAREN

State 129:
## Known stack suffix:
## scalar_exp IN LPAREN rev_atom_commalist
## LR(1) items:
in_predicate -> scalar_exp IN LPAREN rev_atom_commalist . RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
rev_atom_commalist -> rev_atom_commalist . COMMA atom [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 130
-- On COMMA shift to state 115
## Reductions:

State 130:
## Known stack suffix:
## scalar_exp IN LPAREN rev_atom_commalist RPAREN
## LR(1) items:
in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On UPDATE reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On UNION reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On SEMICOLON reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On SELECT reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On RPAREN reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On ROLLBACK reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On PROCEDURE reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On ORDER reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On OR reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On OPEN reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On INSERT reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On HAVING reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On GROUP reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On GRANT reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On FETCH reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On EOF reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On DELETE reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On DECLARE reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On CREATE reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On COMMIT reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On CLOSE reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN
-- On AND reduce production in_predicate -> scalar_exp IN LPAREN rev_atom_commalist RPAREN

State 131:
## Known stack suffix:
## scalar_exp COMPARISON
## LR(1) items:
all_or_any_predicate -> scalar_exp COMPARISON . any_all_some LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
comparison_predicate -> scalar_exp COMPARISON . scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
comparison_predicate -> scalar_exp COMPARISON . LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On SOME shift to state 132
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 133
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On ANY shift to state 136
-- On ALL shift to state 137
-- On scalar_exp shift to state 138
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On any_all_some shift to state 139
-- On ammsc shift to state 49
## Reductions:

State 132:
## Known stack suffix:
## SOME
## LR(1) items:
any_all_some -> SOME . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production any_all_some -> SOME

State 133:
## Known stack suffix:
## scalar_exp COMPARISON LPAREN
## LR(1) items:
comparison_predicate -> scalar_exp COMPARISON LPAREN . select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> LPAREN . scalar_exp RPAREN [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On SELECT shift to state 79
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On select_exp shift to state 134
-- On scalar_exp shift to state 33
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 134:
## Known stack suffix:
## scalar_exp COMPARISON LPAREN select_exp
## LR(1) items:
comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp . RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On RPAREN shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## scalar_exp COMPARISON LPAREN select_exp RPAREN
## LR(1) items:
comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On UPDATE reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On UNION reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On SEMICOLON reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On SELECT reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On RPAREN reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On ROLLBACK reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On PROCEDURE reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On ORDER reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On OR reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On OPEN reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On INSERT reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On HAVING reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On GROUP reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On GRANT reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On FETCH reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On EOF reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On DELETE reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On DECLARE reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On CREATE reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On COMMIT reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On CLOSE reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN
-- On AND reduce production comparison_predicate -> scalar_exp COMPARISON LPAREN select_exp RPAREN

State 136:
## Known stack suffix:
## ANY
## LR(1) items:
any_all_some -> ANY . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production any_all_some -> ANY

State 137:
## Known stack suffix:
## ALL
## LR(1) items:
any_all_some -> ALL . [ LPAREN ]
## Transitions:
## Reductions:
-- On LPAREN reduce production any_all_some -> ALL

State 138:
## Known stack suffix:
## scalar_exp COMPARISON scalar_exp
## LR(1) items:
comparison_predicate -> scalar_exp COMPARISON scalar_exp . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On TIMES shift to state 34
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
## Reductions:
-- On WITH reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On UPDATE reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On UNION reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On SEMICOLON reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On SELECT reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On RPAREN reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On ROLLBACK reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On PROCEDURE reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On ORDER reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On OR reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On OPEN reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On INSERT reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On HAVING reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On GROUP reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On GRANT reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On FETCH reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On EOF reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On DELETE reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On DECLARE reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On CREATE reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On COMMIT reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On CLOSE reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp
-- On AND reduce production comparison_predicate -> scalar_exp COMPARISON scalar_exp

State 139:
## Known stack suffix:
## scalar_exp COMPARISON any_all_some
## LR(1) items:
all_or_any_predicate -> scalar_exp COMPARISON any_all_some . LPAREN select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On LPAREN shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## scalar_exp COMPARISON any_all_some LPAREN
## LR(1) items:
all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN . select_exp RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On SELECT shift to state 79
-- On select_exp shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## scalar_exp COMPARISON any_all_some LPAREN select_exp
## LR(1) items:
all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp . RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On RPAREN shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
## LR(1) items:
all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On UPDATE reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On UNION reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On SEMICOLON reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On SELECT reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On RPAREN reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On ROLLBACK reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On PROCEDURE reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On ORDER reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On OR reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On OPEN reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On INSERT reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On HAVING reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On GROUP reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On GRANT reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On FETCH reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On EOF reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On DELETE reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On DECLARE reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On CREATE reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On COMMIT reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On CLOSE reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN
-- On AND reduce production all_or_any_predicate -> scalar_exp COMPARISON any_all_some LPAREN select_exp RPAREN

State 143:
## Known stack suffix:
## scalar_exp BETWEEN
## LR(1) items:
between_predicate -> scalar_exp BETWEEN . scalar_exp AND scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 144
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 144:
## Known stack suffix:
## scalar_exp BETWEEN scalar_exp
## LR(1) items:
between_predicate -> scalar_exp BETWEEN scalar_exp . AND scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ TIMES PLUS MINUS DIV AND ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ TIMES PLUS MINUS DIV AND ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ TIMES PLUS MINUS DIV AND ]
scalar_exp -> scalar_exp . DIV scalar_exp [ TIMES PLUS MINUS DIV AND ]
## Transitions:
-- On TIMES shift to state 34
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
-- On AND shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## scalar_exp BETWEEN scalar_exp AND
## LR(1) items:
between_predicate -> scalar_exp BETWEEN scalar_exp AND . scalar_exp [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 146
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 146:
## Known stack suffix:
## scalar_exp BETWEEN scalar_exp AND scalar_exp
## LR(1) items:
between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
scalar_exp -> scalar_exp . DIV scalar_exp [ WITH UPDATE UNION TIMES SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE PLUS ORDER OR OPEN MINUS INSERT HAVING GROUP GRANT FETCH EOF DIV DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On TIMES shift to state 34
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
## Reductions:
-- On WITH reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On UPDATE reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On UNION reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On SEMICOLON reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On SELECT reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On RPAREN reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On ROLLBACK reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On PROCEDURE reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On ORDER reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On OR reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On OPEN reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On INSERT reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On HAVING reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On GROUP reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On GRANT reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On FETCH reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On EOF reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On DELETE reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On DECLARE reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On CREATE reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On COMMIT reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On CLOSE reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp
-- On AND reduce production between_predicate -> scalar_exp BETWEEN scalar_exp AND scalar_exp

State 147:
## Known stack suffix:
## predicate
## LR(1) items:
search_condition -> predicate . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production search_condition -> predicate
-- On UPDATE reduce production search_condition -> predicate
-- On UNION reduce production search_condition -> predicate
-- On SEMICOLON reduce production search_condition -> predicate
-- On SELECT reduce production search_condition -> predicate
-- On RPAREN reduce production search_condition -> predicate
-- On ROLLBACK reduce production search_condition -> predicate
-- On PROCEDURE reduce production search_condition -> predicate
-- On ORDER reduce production search_condition -> predicate
-- On OR reduce production search_condition -> predicate
-- On OPEN reduce production search_condition -> predicate
-- On INSERT reduce production search_condition -> predicate
-- On HAVING reduce production search_condition -> predicate
-- On GROUP reduce production search_condition -> predicate
-- On GRANT reduce production search_condition -> predicate
-- On FETCH reduce production search_condition -> predicate
-- On EOF reduce production search_condition -> predicate
-- On DELETE reduce production search_condition -> predicate
-- On DECLARE reduce production search_condition -> predicate
-- On CREATE reduce production search_condition -> predicate
-- On COMMIT reduce production search_condition -> predicate
-- On CLOSE reduce production search_condition -> predicate
-- On AND reduce production search_condition -> predicate

State 148:
## Known stack suffix:
## like_predicate
## LR(1) items:
predicate -> like_predicate . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production predicate -> like_predicate
-- On UPDATE reduce production predicate -> like_predicate
-- On UNION reduce production predicate -> like_predicate
-- On SEMICOLON reduce production predicate -> like_predicate
-- On SELECT reduce production predicate -> like_predicate
-- On RPAREN reduce production predicate -> like_predicate
-- On ROLLBACK reduce production predicate -> like_predicate
-- On PROCEDURE reduce production predicate -> like_predicate
-- On ORDER reduce production predicate -> like_predicate
-- On OR reduce production predicate -> like_predicate
-- On OPEN reduce production predicate -> like_predicate
-- On INSERT reduce production predicate -> like_predicate
-- On HAVING reduce production predicate -> like_predicate
-- On GROUP reduce production predicate -> like_predicate
-- On GRANT reduce production predicate -> like_predicate
-- On FETCH reduce production predicate -> like_predicate
-- On EOF reduce production predicate -> like_predicate
-- On DELETE reduce production predicate -> like_predicate
-- On DECLARE reduce production predicate -> like_predicate
-- On CREATE reduce production predicate -> like_predicate
-- On COMMIT reduce production predicate -> like_predicate
-- On CLOSE reduce production predicate -> like_predicate
-- On AND reduce production predicate -> like_predicate

State 149:
## Known stack suffix:
## in_predicate
## LR(1) items:
predicate -> in_predicate . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production predicate -> in_predicate
-- On UPDATE reduce production predicate -> in_predicate
-- On UNION reduce production predicate -> in_predicate
-- On SEMICOLON reduce production predicate -> in_predicate
-- On SELECT reduce production predicate -> in_predicate
-- On RPAREN reduce production predicate -> in_predicate
-- On ROLLBACK reduce production predicate -> in_predicate
-- On PROCEDURE reduce production predicate -> in_predicate
-- On ORDER reduce production predicate -> in_predicate
-- On OR reduce production predicate -> in_predicate
-- On OPEN reduce production predicate -> in_predicate
-- On INSERT reduce production predicate -> in_predicate
-- On HAVING reduce production predicate -> in_predicate
-- On GROUP reduce production predicate -> in_predicate
-- On GRANT reduce production predicate -> in_predicate
-- On FETCH reduce production predicate -> in_predicate
-- On EOF reduce production predicate -> in_predicate
-- On DELETE reduce production predicate -> in_predicate
-- On DECLARE reduce production predicate -> in_predicate
-- On CREATE reduce production predicate -> in_predicate
-- On COMMIT reduce production predicate -> in_predicate
-- On CLOSE reduce production predicate -> in_predicate
-- On AND reduce production predicate -> in_predicate

State 150:
## Known stack suffix:
## existence_test
## LR(1) items:
predicate -> existence_test . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production predicate -> existence_test
-- On UPDATE reduce production predicate -> existence_test
-- On UNION reduce production predicate -> existence_test
-- On SEMICOLON reduce production predicate -> existence_test
-- On SELECT reduce production predicate -> existence_test
-- On RPAREN reduce production predicate -> existence_test
-- On ROLLBACK reduce production predicate -> existence_test
-- On PROCEDURE reduce production predicate -> existence_test
-- On ORDER reduce production predicate -> existence_test
-- On OR reduce production predicate -> existence_test
-- On OPEN reduce production predicate -> existence_test
-- On INSERT reduce production predicate -> existence_test
-- On HAVING reduce production predicate -> existence_test
-- On GROUP reduce production predicate -> existence_test
-- On GRANT reduce production predicate -> existence_test
-- On FETCH reduce production predicate -> existence_test
-- On EOF reduce production predicate -> existence_test
-- On DELETE reduce production predicate -> existence_test
-- On DECLARE reduce production predicate -> existence_test
-- On CREATE reduce production predicate -> existence_test
-- On COMMIT reduce production predicate -> existence_test
-- On CLOSE reduce production predicate -> existence_test
-- On AND reduce production predicate -> existence_test

State 151:
## Known stack suffix:
## comparison_predicate
## LR(1) items:
predicate -> comparison_predicate . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production predicate -> comparison_predicate
-- On UPDATE reduce production predicate -> comparison_predicate
-- On UNION reduce production predicate -> comparison_predicate
-- On SEMICOLON reduce production predicate -> comparison_predicate
-- On SELECT reduce production predicate -> comparison_predicate
-- On RPAREN reduce production predicate -> comparison_predicate
-- On ROLLBACK reduce production predicate -> comparison_predicate
-- On PROCEDURE reduce production predicate -> comparison_predicate
-- On ORDER reduce production predicate -> comparison_predicate
-- On OR reduce production predicate -> comparison_predicate
-- On OPEN reduce production predicate -> comparison_predicate
-- On INSERT reduce production predicate -> comparison_predicate
-- On HAVING reduce production predicate -> comparison_predicate
-- On GROUP reduce production predicate -> comparison_predicate
-- On GRANT reduce production predicate -> comparison_predicate
-- On FETCH reduce production predicate -> comparison_predicate
-- On EOF reduce production predicate -> comparison_predicate
-- On DELETE reduce production predicate -> comparison_predicate
-- On DECLARE reduce production predicate -> comparison_predicate
-- On CREATE reduce production predicate -> comparison_predicate
-- On COMMIT reduce production predicate -> comparison_predicate
-- On CLOSE reduce production predicate -> comparison_predicate
-- On AND reduce production predicate -> comparison_predicate

State 152:
## Known stack suffix:
## column_ref
## LR(1) items:
scalar_exp -> column_ref . [ TIMES RPAREN PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
test_for_null -> column_ref . IS NOT NULL [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
test_for_null -> column_ref . IS NULL [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On IS shift to state 153
## Reductions:
-- On TIMES reduce production scalar_exp -> column_ref
-- On RPAREN reduce production scalar_exp -> column_ref
-- On PLUS reduce production scalar_exp -> column_ref
-- On NOT reduce production scalar_exp -> column_ref
-- On MINUS reduce production scalar_exp -> column_ref
-- On LIKE reduce production scalar_exp -> column_ref
-- On IN reduce production scalar_exp -> column_ref
-- On DIV reduce production scalar_exp -> column_ref
-- On COMPARISON reduce production scalar_exp -> column_ref
-- On BETWEEN reduce production scalar_exp -> column_ref

State 153:
## Known stack suffix:
## column_ref IS
## LR(1) items:
test_for_null -> column_ref IS . NOT NULL [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
test_for_null -> column_ref IS . NULL [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On NULL shift to state 154
-- On NOT shift to state 155
## Reductions:

State 154:
## Known stack suffix:
## column_ref IS NULL
## LR(1) items:
test_for_null -> column_ref IS NULL . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production test_for_null -> column_ref IS NULL
-- On UPDATE reduce production test_for_null -> column_ref IS NULL
-- On UNION reduce production test_for_null -> column_ref IS NULL
-- On SEMICOLON reduce production test_for_null -> column_ref IS NULL
-- On SELECT reduce production test_for_null -> column_ref IS NULL
-- On RPAREN reduce production test_for_null -> column_ref IS NULL
-- On ROLLBACK reduce production test_for_null -> column_ref IS NULL
-- On PROCEDURE reduce production test_for_null -> column_ref IS NULL
-- On ORDER reduce production test_for_null -> column_ref IS NULL
-- On OR reduce production test_for_null -> column_ref IS NULL
-- On OPEN reduce production test_for_null -> column_ref IS NULL
-- On INSERT reduce production test_for_null -> column_ref IS NULL
-- On HAVING reduce production test_for_null -> column_ref IS NULL
-- On GROUP reduce production test_for_null -> column_ref IS NULL
-- On GRANT reduce production test_for_null -> column_ref IS NULL
-- On FETCH reduce production test_for_null -> column_ref IS NULL
-- On EOF reduce production test_for_null -> column_ref IS NULL
-- On DELETE reduce production test_for_null -> column_ref IS NULL
-- On DECLARE reduce production test_for_null -> column_ref IS NULL
-- On CREATE reduce production test_for_null -> column_ref IS NULL
-- On COMMIT reduce production test_for_null -> column_ref IS NULL
-- On CLOSE reduce production test_for_null -> column_ref IS NULL
-- On AND reduce production test_for_null -> column_ref IS NULL

State 155:
## Known stack suffix:
## column_ref IS NOT
## LR(1) items:
test_for_null -> column_ref IS NOT . NULL [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On NULL shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## column_ref IS NOT NULL
## LR(1) items:
test_for_null -> column_ref IS NOT NULL . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production test_for_null -> column_ref IS NOT NULL
-- On UPDATE reduce production test_for_null -> column_ref IS NOT NULL
-- On UNION reduce production test_for_null -> column_ref IS NOT NULL
-- On SEMICOLON reduce production test_for_null -> column_ref IS NOT NULL
-- On SELECT reduce production test_for_null -> column_ref IS NOT NULL
-- On RPAREN reduce production test_for_null -> column_ref IS NOT NULL
-- On ROLLBACK reduce production test_for_null -> column_ref IS NOT NULL
-- On PROCEDURE reduce production test_for_null -> column_ref IS NOT NULL
-- On ORDER reduce production test_for_null -> column_ref IS NOT NULL
-- On OR reduce production test_for_null -> column_ref IS NOT NULL
-- On OPEN reduce production test_for_null -> column_ref IS NOT NULL
-- On INSERT reduce production test_for_null -> column_ref IS NOT NULL
-- On HAVING reduce production test_for_null -> column_ref IS NOT NULL
-- On GROUP reduce production test_for_null -> column_ref IS NOT NULL
-- On GRANT reduce production test_for_null -> column_ref IS NOT NULL
-- On FETCH reduce production test_for_null -> column_ref IS NOT NULL
-- On EOF reduce production test_for_null -> column_ref IS NOT NULL
-- On DELETE reduce production test_for_null -> column_ref IS NOT NULL
-- On DECLARE reduce production test_for_null -> column_ref IS NOT NULL
-- On CREATE reduce production test_for_null -> column_ref IS NOT NULL
-- On COMMIT reduce production test_for_null -> column_ref IS NOT NULL
-- On CLOSE reduce production test_for_null -> column_ref IS NOT NULL
-- On AND reduce production test_for_null -> column_ref IS NOT NULL

State 157:
## Known stack suffix:
## between_predicate
## LR(1) items:
predicate -> between_predicate . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production predicate -> between_predicate
-- On UPDATE reduce production predicate -> between_predicate
-- On UNION reduce production predicate -> between_predicate
-- On SEMICOLON reduce production predicate -> between_predicate
-- On SELECT reduce production predicate -> between_predicate
-- On RPAREN reduce production predicate -> between_predicate
-- On ROLLBACK reduce production predicate -> between_predicate
-- On PROCEDURE reduce production predicate -> between_predicate
-- On ORDER reduce production predicate -> between_predicate
-- On OR reduce production predicate -> between_predicate
-- On OPEN reduce production predicate -> between_predicate
-- On INSERT reduce production predicate -> between_predicate
-- On HAVING reduce production predicate -> between_predicate
-- On GROUP reduce production predicate -> between_predicate
-- On GRANT reduce production predicate -> between_predicate
-- On FETCH reduce production predicate -> between_predicate
-- On EOF reduce production predicate -> between_predicate
-- On DELETE reduce production predicate -> between_predicate
-- On DECLARE reduce production predicate -> between_predicate
-- On CREATE reduce production predicate -> between_predicate
-- On COMMIT reduce production predicate -> between_predicate
-- On CLOSE reduce production predicate -> between_predicate
-- On AND reduce production predicate -> between_predicate

State 158:
## Known stack suffix:
## all_or_any_predicate
## LR(1) items:
predicate -> all_or_any_predicate . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production predicate -> all_or_any_predicate
-- On UPDATE reduce production predicate -> all_or_any_predicate
-- On UNION reduce production predicate -> all_or_any_predicate
-- On SEMICOLON reduce production predicate -> all_or_any_predicate
-- On SELECT reduce production predicate -> all_or_any_predicate
-- On RPAREN reduce production predicate -> all_or_any_predicate
-- On ROLLBACK reduce production predicate -> all_or_any_predicate
-- On PROCEDURE reduce production predicate -> all_or_any_predicate
-- On ORDER reduce production predicate -> all_or_any_predicate
-- On OR reduce production predicate -> all_or_any_predicate
-- On OPEN reduce production predicate -> all_or_any_predicate
-- On INSERT reduce production predicate -> all_or_any_predicate
-- On HAVING reduce production predicate -> all_or_any_predicate
-- On GROUP reduce production predicate -> all_or_any_predicate
-- On GRANT reduce production predicate -> all_or_any_predicate
-- On FETCH reduce production predicate -> all_or_any_predicate
-- On EOF reduce production predicate -> all_or_any_predicate
-- On DELETE reduce production predicate -> all_or_any_predicate
-- On DECLARE reduce production predicate -> all_or_any_predicate
-- On CREATE reduce production predicate -> all_or_any_predicate
-- On COMMIT reduce production predicate -> all_or_any_predicate
-- On CLOSE reduce production predicate -> all_or_any_predicate
-- On AND reduce production predicate -> all_or_any_predicate

State 159:
## Known stack suffix:
## where_clause
## LR(1) items:
opt_where_clause -> where_clause . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On WITH reduce production opt_where_clause -> where_clause
-- On UPDATE reduce production opt_where_clause -> where_clause
-- On UNION reduce production opt_where_clause -> where_clause
-- On SEMICOLON reduce production opt_where_clause -> where_clause
-- On SELECT reduce production opt_where_clause -> where_clause
-- On RPAREN reduce production opt_where_clause -> where_clause
-- On ROLLBACK reduce production opt_where_clause -> where_clause
-- On PROCEDURE reduce production opt_where_clause -> where_clause
-- On ORDER reduce production opt_where_clause -> where_clause
-- On OPEN reduce production opt_where_clause -> where_clause
-- On INSERT reduce production opt_where_clause -> where_clause
-- On HAVING reduce production opt_where_clause -> where_clause
-- On GROUP reduce production opt_where_clause -> where_clause
-- On GRANT reduce production opt_where_clause -> where_clause
-- On FETCH reduce production opt_where_clause -> where_clause
-- On EOF reduce production opt_where_clause -> where_clause
-- On DELETE reduce production opt_where_clause -> where_clause
-- On DECLARE reduce production opt_where_clause -> where_clause
-- On CREATE reduce production opt_where_clause -> where_clause
-- On COMMIT reduce production opt_where_clause -> where_clause
-- On CLOSE reduce production opt_where_clause -> where_clause

State 160:
## Known stack suffix:
## from_clause opt_where_clause
## LR(1) items:
table_exp -> from_clause opt_where_clause . opt_group_by_clause opt_having_clause [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On GROUP shift to state 161
-- On opt_group_by_clause shift to state 167
## Reductions:
-- On WITH reduce production opt_group_by_clause ->
-- On UPDATE reduce production opt_group_by_clause ->
-- On UNION reduce production opt_group_by_clause ->
-- On SEMICOLON reduce production opt_group_by_clause ->
-- On SELECT reduce production opt_group_by_clause ->
-- On RPAREN reduce production opt_group_by_clause ->
-- On ROLLBACK reduce production opt_group_by_clause ->
-- On PROCEDURE reduce production opt_group_by_clause ->
-- On ORDER reduce production opt_group_by_clause ->
-- On OPEN reduce production opt_group_by_clause ->
-- On INSERT reduce production opt_group_by_clause ->
-- On HAVING reduce production opt_group_by_clause ->
-- On GRANT reduce production opt_group_by_clause ->
-- On FETCH reduce production opt_group_by_clause ->
-- On EOF reduce production opt_group_by_clause ->
-- On DELETE reduce production opt_group_by_clause ->
-- On DECLARE reduce production opt_group_by_clause ->
-- On CREATE reduce production opt_group_by_clause ->
-- On COMMIT reduce production opt_group_by_clause ->
-- On CLOSE reduce production opt_group_by_clause ->

State 161:
## Known stack suffix:
## GROUP
## LR(1) items:
opt_group_by_clause -> GROUP . BY rev_column_ref_commalist [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On BY shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## GROUP BY
## LR(1) items:
opt_group_by_clause -> GROUP BY . rev_column_ref_commalist [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 54
-- On rev_column_ref_commalist shift to state 163
-- On column_ref shift to state 166
## Reductions:

State 163:
## Known stack suffix:
## GROUP BY rev_column_ref_commalist
## LR(1) items:
opt_group_by_clause -> GROUP BY rev_column_ref_commalist . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
rev_column_ref_commalist -> rev_column_ref_commalist . COMMA column_ref [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
-- On COMMA shift to state 164
## Reductions:
-- On WITH reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On UPDATE reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On UNION reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On SEMICOLON reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On SELECT reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On RPAREN reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On ROLLBACK reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On PROCEDURE reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On ORDER reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On OPEN reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On INSERT reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On HAVING reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On GRANT reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On FETCH reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On EOF reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On DELETE reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On DECLARE reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On CREATE reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On COMMIT reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist
-- On CLOSE reduce production opt_group_by_clause -> GROUP BY rev_column_ref_commalist

State 164:
## Known stack suffix:
## rev_column_ref_commalist COMMA
## LR(1) items:
rev_column_ref_commalist -> rev_column_ref_commalist COMMA . column_ref [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
-- On IDENT shift to state 54
-- On column_ref shift to state 165
## Reductions:

State 165:
## Known stack suffix:
## rev_column_ref_commalist COMMA column_ref
## LR(1) items:
rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On WITH reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On UPDATE reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On UNION reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On SEMICOLON reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On SELECT reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On RPAREN reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On ROLLBACK reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On PROCEDURE reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On ORDER reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On OPEN reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On INSERT reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On HAVING reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On GRANT reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On FETCH reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On EOF reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On DELETE reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On DECLARE reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On CREATE reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On COMMIT reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On COMMA reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref
-- On CLOSE reduce production rev_column_ref_commalist -> rev_column_ref_commalist COMMA column_ref

State 166:
## Known stack suffix:
## column_ref
## LR(1) items:
rev_column_ref_commalist -> column_ref . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT HAVING GRANT FETCH EOF DELETE DECLARE CREATE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On WITH reduce production rev_column_ref_commalist -> column_ref
-- On UPDATE reduce production rev_column_ref_commalist -> column_ref
-- On UNION reduce production rev_column_ref_commalist -> column_ref
-- On SEMICOLON reduce production rev_column_ref_commalist -> column_ref
-- On SELECT reduce production rev_column_ref_commalist -> column_ref
-- On RPAREN reduce production rev_column_ref_commalist -> column_ref
-- On ROLLBACK reduce production rev_column_ref_commalist -> column_ref
-- On PROCEDURE reduce production rev_column_ref_commalist -> column_ref
-- On ORDER reduce production rev_column_ref_commalist -> column_ref
-- On OPEN reduce production rev_column_ref_commalist -> column_ref
-- On INSERT reduce production rev_column_ref_commalist -> column_ref
-- On HAVING reduce production rev_column_ref_commalist -> column_ref
-- On GRANT reduce production rev_column_ref_commalist -> column_ref
-- On FETCH reduce production rev_column_ref_commalist -> column_ref
-- On EOF reduce production rev_column_ref_commalist -> column_ref
-- On DELETE reduce production rev_column_ref_commalist -> column_ref
-- On DECLARE reduce production rev_column_ref_commalist -> column_ref
-- On CREATE reduce production rev_column_ref_commalist -> column_ref
-- On COMMIT reduce production rev_column_ref_commalist -> column_ref
-- On COMMA reduce production rev_column_ref_commalist -> column_ref
-- On CLOSE reduce production rev_column_ref_commalist -> column_ref

State 167:
## Known stack suffix:
## from_clause opt_where_clause opt_group_by_clause
## LR(1) items:
table_exp -> from_clause opt_where_clause opt_group_by_clause . opt_having_clause [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On HAVING shift to state 168
-- On opt_having_clause shift to state 170
## Reductions:
-- On WITH reduce production opt_having_clause ->
-- On UPDATE reduce production opt_having_clause ->
-- On UNION reduce production opt_having_clause ->
-- On SEMICOLON reduce production opt_having_clause ->
-- On SELECT reduce production opt_having_clause ->
-- On RPAREN reduce production opt_having_clause ->
-- On ROLLBACK reduce production opt_having_clause ->
-- On PROCEDURE reduce production opt_having_clause ->
-- On ORDER reduce production opt_having_clause ->
-- On OPEN reduce production opt_having_clause ->
-- On INSERT reduce production opt_having_clause ->
-- On GRANT reduce production opt_having_clause ->
-- On FETCH reduce production opt_having_clause ->
-- On EOF reduce production opt_having_clause ->
-- On DELETE reduce production opt_having_clause ->
-- On DECLARE reduce production opt_having_clause ->
-- On CREATE reduce production opt_having_clause ->
-- On COMMIT reduce production opt_having_clause ->
-- On CLOSE reduce production opt_having_clause ->

State 168:
## Known stack suffix:
## HAVING
## LR(1) items:
opt_having_clause -> HAVING . search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 169
-- On scalar_exp shift to state 102
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 169:
## Known stack suffix:
## HAVING search_condition
## LR(1) items:
opt_having_clause -> HAVING search_condition . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
search_condition -> search_condition . OR search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
search_condition -> search_condition . AND search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On OR shift to state 98
-- On AND shift to state 100
## Reductions:
-- On WITH reduce production opt_having_clause -> HAVING search_condition
-- On UPDATE reduce production opt_having_clause -> HAVING search_condition
-- On UNION reduce production opt_having_clause -> HAVING search_condition
-- On SEMICOLON reduce production opt_having_clause -> HAVING search_condition
-- On SELECT reduce production opt_having_clause -> HAVING search_condition
-- On RPAREN reduce production opt_having_clause -> HAVING search_condition
-- On ROLLBACK reduce production opt_having_clause -> HAVING search_condition
-- On PROCEDURE reduce production opt_having_clause -> HAVING search_condition
-- On ORDER reduce production opt_having_clause -> HAVING search_condition
-- On OPEN reduce production opt_having_clause -> HAVING search_condition
-- On INSERT reduce production opt_having_clause -> HAVING search_condition
-- On GRANT reduce production opt_having_clause -> HAVING search_condition
-- On FETCH reduce production opt_having_clause -> HAVING search_condition
-- On EOF reduce production opt_having_clause -> HAVING search_condition
-- On DELETE reduce production opt_having_clause -> HAVING search_condition
-- On DECLARE reduce production opt_having_clause -> HAVING search_condition
-- On CREATE reduce production opt_having_clause -> HAVING search_condition
-- On COMMIT reduce production opt_having_clause -> HAVING search_condition
-- On CLOSE reduce production opt_having_clause -> HAVING search_condition

State 170:
## Known stack suffix:
## from_clause opt_where_clause opt_group_by_clause opt_having_clause
## LR(1) items:
table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OPEN INSERT GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On WITH reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On UPDATE reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On UNION reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On SEMICOLON reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On SELECT reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On RPAREN reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On ROLLBACK reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On PROCEDURE reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On ORDER reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On OPEN reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On INSERT reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On GRANT reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On FETCH reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On EOF reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On DELETE reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On DECLARE reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On CREATE reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On COMMIT reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause
-- On CLOSE reduce production table_exp -> from_clause opt_where_clause opt_group_by_clause opt_having_clause

State 171:
## Known stack suffix:
## scalar_exp
## LR(1) items:
rev_scalar_exp_commalist -> scalar_exp . [ INTO FROM COMMA ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ TIMES PLUS MINUS INTO FROM DIV COMMA ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ TIMES PLUS MINUS INTO FROM DIV COMMA ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ TIMES PLUS MINUS INTO FROM DIV COMMA ]
scalar_exp -> scalar_exp . DIV scalar_exp [ TIMES PLUS MINUS INTO FROM DIV COMMA ]
## Transitions:
-- On TIMES shift to state 34
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
## Reductions:
-- On INTO reduce production rev_scalar_exp_commalist -> scalar_exp
-- On FROM reduce production rev_scalar_exp_commalist -> scalar_exp
-- On COMMA reduce production rev_scalar_exp_commalist -> scalar_exp

State 172:
## Known stack suffix:
## rev_scalar_exp_commalist
## LR(1) items:
rev_scalar_exp_commalist -> rev_scalar_exp_commalist . COMMA scalar_exp [ INTO FROM COMMA ]
selection -> rev_scalar_exp_commalist . [ INTO FROM ]
## Transitions:
-- On COMMA shift to state 173
## Reductions:
-- On INTO reduce production selection -> rev_scalar_exp_commalist
-- On FROM reduce production selection -> rev_scalar_exp_commalist

State 173:
## Known stack suffix:
## rev_scalar_exp_commalist COMMA
## LR(1) items:
rev_scalar_exp_commalist -> rev_scalar_exp_commalist COMMA . scalar_exp [ INTO FROM COMMA ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On scalar_exp shift to state 174
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 174:
## Known stack suffix:
## rev_scalar_exp_commalist COMMA scalar_exp
## LR(1) items:
rev_scalar_exp_commalist -> rev_scalar_exp_commalist COMMA scalar_exp . [ INTO FROM COMMA ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ TIMES PLUS MINUS INTO FROM DIV COMMA ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ TIMES PLUS MINUS INTO FROM DIV COMMA ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ TIMES PLUS MINUS INTO FROM DIV COMMA ]
scalar_exp -> scalar_exp . DIV scalar_exp [ TIMES PLUS MINUS INTO FROM DIV COMMA ]
## Transitions:
-- On TIMES shift to state 34
-- On PLUS shift to state 60
-- On MINUS shift to state 64
-- On DIV shift to state 62
## Reductions:
-- On INTO reduce production rev_scalar_exp_commalist -> rev_scalar_exp_commalist COMMA scalar_exp
-- On FROM reduce production rev_scalar_exp_commalist -> rev_scalar_exp_commalist COMMA scalar_exp
-- On COMMA reduce production rev_scalar_exp_commalist -> rev_scalar_exp_commalist COMMA scalar_exp

State 175:
## Known stack suffix:
## EXISTS LPAREN select_exp
## LR(1) items:
existence_test -> EXISTS LPAREN select_exp . RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On RPAREN shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## EXISTS LPAREN select_exp RPAREN
## LR(1) items:
existence_test -> EXISTS LPAREN select_exp RPAREN . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On UPDATE reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On UNION reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On SEMICOLON reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On SELECT reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On RPAREN reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On ROLLBACK reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On PROCEDURE reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On ORDER reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On OR reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On OPEN reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On INSERT reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On HAVING reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On GROUP reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On GRANT reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On FETCH reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On EOF reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On DELETE reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On DECLARE reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On CREATE reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On COMMIT reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On CLOSE reduce production existence_test -> EXISTS LPAREN select_exp RPAREN
-- On AND reduce production existence_test -> EXISTS LPAREN select_exp RPAREN

State 177:
## Known stack suffix:
## LPAREN search_condition
## LR(1) items:
search_condition -> search_condition . OR search_condition [ RPAREN OR AND ]
search_condition -> search_condition . AND search_condition [ RPAREN OR AND ]
search_condition -> LPAREN search_condition . RPAREN [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
-- On RPAREN shift to state 178
-- On OR shift to state 98
-- On AND shift to state 100
## Reductions:

State 178:
## Known stack suffix:
## LPAREN search_condition RPAREN
## LR(1) items:
search_condition -> LPAREN search_condition RPAREN . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production search_condition -> LPAREN search_condition RPAREN
-- On UPDATE reduce production search_condition -> LPAREN search_condition RPAREN
-- On UNION reduce production search_condition -> LPAREN search_condition RPAREN
-- On SEMICOLON reduce production search_condition -> LPAREN search_condition RPAREN
-- On SELECT reduce production search_condition -> LPAREN search_condition RPAREN
-- On RPAREN reduce production search_condition -> LPAREN search_condition RPAREN
-- On ROLLBACK reduce production search_condition -> LPAREN search_condition RPAREN
-- On PROCEDURE reduce production search_condition -> LPAREN search_condition RPAREN
-- On ORDER reduce production search_condition -> LPAREN search_condition RPAREN
-- On OR reduce production search_condition -> LPAREN search_condition RPAREN
-- On OPEN reduce production search_condition -> LPAREN search_condition RPAREN
-- On INSERT reduce production search_condition -> LPAREN search_condition RPAREN
-- On HAVING reduce production search_condition -> LPAREN search_condition RPAREN
-- On GROUP reduce production search_condition -> LPAREN search_condition RPAREN
-- On GRANT reduce production search_condition -> LPAREN search_condition RPAREN
-- On FETCH reduce production search_condition -> LPAREN search_condition RPAREN
-- On EOF reduce production search_condition -> LPAREN search_condition RPAREN
-- On DELETE reduce production search_condition -> LPAREN search_condition RPAREN
-- On DECLARE reduce production search_condition -> LPAREN search_condition RPAREN
-- On CREATE reduce production search_condition -> LPAREN search_condition RPAREN
-- On COMMIT reduce production search_condition -> LPAREN search_condition RPAREN
-- On CLOSE reduce production search_condition -> LPAREN search_condition RPAREN
-- On AND reduce production search_condition -> LPAREN search_condition RPAREN

State 179:
## Known stack suffix:
## LPAREN scalar_exp
## LR(1) items:
all_or_any_predicate -> scalar_exp . COMPARISON any_all_some LPAREN select_exp RPAREN [ RPAREN OR AND ]
between_predicate -> scalar_exp . NOT BETWEEN scalar_exp AND scalar_exp [ RPAREN OR AND ]
between_predicate -> scalar_exp . BETWEEN scalar_exp AND scalar_exp [ RPAREN OR AND ]
comparison_predicate -> scalar_exp . COMPARISON scalar_exp [ RPAREN OR AND ]
comparison_predicate -> scalar_exp . COMPARISON LPAREN select_exp RPAREN [ RPAREN OR AND ]
in_predicate -> scalar_exp . NOT IN LPAREN select_exp RPAREN [ RPAREN OR AND ]
in_predicate -> scalar_exp . IN LPAREN select_exp RPAREN [ RPAREN OR AND ]
in_predicate -> scalar_exp . NOT IN LPAREN rev_atom_commalist RPAREN [ RPAREN OR AND ]
in_predicate -> scalar_exp . IN LPAREN rev_atom_commalist RPAREN [ RPAREN OR AND ]
like_predicate -> scalar_exp . NOT LIKE atom opt_escape [ RPAREN OR AND ]
like_predicate -> scalar_exp . LIKE atom opt_escape [ RPAREN OR AND ]
scalar_exp -> scalar_exp . PLUS scalar_exp [ TIMES RPAREN PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
scalar_exp -> scalar_exp . MINUS scalar_exp [ TIMES RPAREN PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
scalar_exp -> scalar_exp . TIMES scalar_exp [ TIMES RPAREN PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
scalar_exp -> scalar_exp . DIV scalar_exp [ TIMES RPAREN PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
scalar_exp -> LPAREN scalar_exp . RPAREN [ TIMES RPAREN PLUS NOT MINUS LIKE IN DIV COMPARISON BETWEEN ]
## Transitions:
-- On TIMES shift to state 34
-- On RPAREN shift to state 68
-- On PLUS shift to state 60
-- On NOT shift to state 103
-- On MINUS shift to state 64
-- On LIKE shift to state 122
-- On IN shift to state 125
-- On DIV shift to state 62
-- On COMPARISON shift to state 131
-- On BETWEEN shift to state 143
## Reductions:

State 180:
## Known stack suffix:
## NOT search_condition
## LR(1) items:
search_condition -> search_condition . OR search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
search_condition -> search_condition . AND search_condition [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
search_condition -> NOT search_condition . [ WITH UPDATE UNION SEMICOLON SELECT RPAREN ROLLBACK PROCEDURE ORDER OR OPEN INSERT HAVING GROUP GRANT FETCH EOF DELETE DECLARE CREATE COMMIT CLOSE AND # ]
## Transitions:
## Reductions:
-- On WITH reduce production search_condition -> NOT search_condition
-- On UPDATE reduce production search_condition -> NOT search_condition
-- On UNION reduce production search_condition -> NOT search_condition
-- On SEMICOLON reduce production search_condition -> NOT search_condition
-- On SELECT reduce production search_condition -> NOT search_condition
-- On RPAREN reduce production search_condition -> NOT search_condition
-- On ROLLBACK reduce production search_condition -> NOT search_condition
-- On PROCEDURE reduce production search_condition -> NOT search_condition
-- On ORDER reduce production search_condition -> NOT search_condition
-- On OR reduce production search_condition -> NOT search_condition
-- On OPEN reduce production search_condition -> NOT search_condition
-- On INSERT reduce production search_condition -> NOT search_condition
-- On HAVING reduce production search_condition -> NOT search_condition
-- On GROUP reduce production search_condition -> NOT search_condition
-- On GRANT reduce production search_condition -> NOT search_condition
-- On FETCH reduce production search_condition -> NOT search_condition
-- On EOF reduce production search_condition -> NOT search_condition
-- On DELETE reduce production search_condition -> NOT search_condition
-- On DECLARE reduce production search_condition -> NOT search_condition
-- On CREATE reduce production search_condition -> NOT search_condition
-- On COMMIT reduce production search_condition -> NOT search_condition
-- On CLOSE reduce production search_condition -> NOT search_condition
-- On AND reduce production search_condition -> NOT search_condition

State 181:
## Known stack suffix:
## UPDATE table SET assignment_commalist WHERE CURRENT
## LR(1) items:
update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT . OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On OF shift to state 182
## Reductions:

State 182:
## Known stack suffix:
## UPDATE table SET assignment_commalist WHERE CURRENT OF
## LR(1) items:
update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF . cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 183
-- On cursor shift to state 184
## Reductions:

State 183:
## Known stack suffix:
## IDENT
## LR(1) items:
cursor -> IDENT . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INTO INSERT FETCH EOF DELETE CURSOR COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production cursor -> IDENT
-- On SEMICOLON reduce production cursor -> IDENT
-- On SELECT reduce production cursor -> IDENT
-- On ROLLBACK reduce production cursor -> IDENT
-- On PROCEDURE reduce production cursor -> IDENT
-- On OPEN reduce production cursor -> IDENT
-- On INTO reduce production cursor -> IDENT
-- On INSERT reduce production cursor -> IDENT
-- On FETCH reduce production cursor -> IDENT
-- On EOF reduce production cursor -> IDENT
-- On DELETE reduce production cursor -> IDENT
-- On CURSOR reduce production cursor -> IDENT
-- On COMMIT reduce production cursor -> IDENT
-- On CLOSE reduce production cursor -> IDENT

State 184:
## Known stack suffix:
## UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
## LR(1) items:
update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On SEMICOLON reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On SELECT reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On ROLLBACK reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On PROCEDURE reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On OPEN reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On INSERT reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On FETCH reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On EOF reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On DELETE reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On COMMIT reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor
-- On CLOSE reduce production update_statement_positioned -> UPDATE table SET assignment_commalist WHERE CURRENT OF cursor

State 185:
## Known stack suffix:
## assignment_commalist COMMA
## LR(1) items:
assignment_commalist -> assignment_commalist COMMA . assignment [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
-- On IDENT shift to state 14
-- On column shift to state 15
-- On assignment shift to state 186
## Reductions:

State 186:
## Known stack suffix:
## assignment_commalist COMMA assignment
## LR(1) items:
assignment_commalist -> assignment_commalist COMMA assignment . [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On WHERE reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On UPDATE reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On SEMICOLON reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On SELECT reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On ROLLBACK reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On PROCEDURE reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On OPEN reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On INSERT reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On FETCH reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On EOF reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On DELETE reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On COMMIT reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On COMMA reduce production assignment_commalist -> assignment_commalist COMMA assignment
-- On CLOSE reduce production assignment_commalist -> assignment_commalist COMMA assignment

State 187:
## Known stack suffix:
## UPDATE table SET assignment_commalist opt_where_clause
## LR(1) items:
update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On SEMICOLON reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On SELECT reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On ROLLBACK reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On PROCEDURE reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On OPEN reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On INSERT reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On FETCH reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On EOF reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On DELETE reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On COMMIT reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause
-- On CLOSE reduce production update_statement_searched -> UPDATE table SET assignment_commalist opt_where_clause

State 188:
## Known stack suffix:
## assignment
## LR(1) items:
assignment_commalist -> assignment . [ WHERE UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On WHERE reduce production assignment_commalist -> assignment
-- On UPDATE reduce production assignment_commalist -> assignment
-- On SEMICOLON reduce production assignment_commalist -> assignment
-- On SELECT reduce production assignment_commalist -> assignment
-- On ROLLBACK reduce production assignment_commalist -> assignment
-- On PROCEDURE reduce production assignment_commalist -> assignment
-- On OPEN reduce production assignment_commalist -> assignment
-- On INSERT reduce production assignment_commalist -> assignment
-- On FETCH reduce production assignment_commalist -> assignment
-- On EOF reduce production assignment_commalist -> assignment
-- On DELETE reduce production assignment_commalist -> assignment
-- On COMMIT reduce production assignment_commalist -> assignment
-- On COMMA reduce production assignment_commalist -> assignment
-- On CLOSE reduce production assignment_commalist -> assignment

State 189:
## Known stack suffix:
## SELECT
## LR(1) items:
select_statement -> SELECT . opt_all_distinct selection INTO target_commalist table_exp [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On DISTINCT shift to state 80
-- On ALL shift to state 81
-- On opt_all_distinct shift to state 190
## Reductions:
-- On USER reduce production opt_all_distinct ->
-- On TIMES reduce production opt_all_distinct ->
-- On SUM reduce production opt_all_distinct ->
-- On STRING reduce production opt_all_distinct ->
-- On PLUS reduce production opt_all_distinct ->
-- On MINUS reduce production opt_all_distinct ->
-- On MIN reduce production opt_all_distinct ->
-- On MAX reduce production opt_all_distinct ->
-- On LPAREN reduce production opt_all_distinct ->
-- On INTNUM reduce production opt_all_distinct ->
-- On IDENT reduce production opt_all_distinct ->
-- On COUNT reduce production opt_all_distinct ->
-- On COLON reduce production opt_all_distinct ->
-- On AVG reduce production opt_all_distinct ->

State 190:
## Known stack suffix:
## SELECT opt_all_distinct
## LR(1) items:
select_statement -> SELECT opt_all_distinct . selection INTO target_commalist table_exp [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On USER shift to state 17
-- On TIMES shift to state 83
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 24
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On selection shift to state 191
-- On scalar_exp shift to state 171
-- On rev_scalar_exp_commalist shift to state 172
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On function_ref shift to state 46
-- On column_ref shift to state 47
-- On atom shift to state 48
-- On ammsc shift to state 49
## Reductions:

State 191:
## Known stack suffix:
## SELECT opt_all_distinct selection
## LR(1) items:
select_statement -> SELECT opt_all_distinct selection . INTO target_commalist table_exp [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On INTO shift to state 192
## Reductions:

State 192:
## Known stack suffix:
## SELECT opt_all_distinct selection INTO
## LR(1) items:
select_statement -> SELECT opt_all_distinct selection INTO . target_commalist table_exp [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On COLON shift to state 30
-- On target_commalist shift to state 193
-- On target shift to state 198
-- On parameter_ref shift to state 196
-- On parameter shift to state 37
## Reductions:

State 193:
## Known stack suffix:
## SELECT opt_all_distinct selection INTO target_commalist
## LR(1) items:
select_statement -> SELECT opt_all_distinct selection INTO target_commalist . table_exp [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
target_commalist -> target_commalist . COMMA target [ FROM COMMA ]
## Transitions:
-- On FROM shift to state 85
-- On COMMA shift to state 194
-- On table_exp shift to state 197
-- On from_clause shift to state 94
## Reductions:

State 194:
## Known stack suffix:
## target_commalist COMMA
## LR(1) items:
target_commalist -> target_commalist COMMA . target [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FROM FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
-- On COLON shift to state 30
-- On target shift to state 195
-- On parameter_ref shift to state 196
-- On parameter shift to state 37
## Reductions:

State 195:
## Known stack suffix:
## target_commalist COMMA target
## LR(1) items:
target_commalist -> target_commalist COMMA target . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FROM FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production target_commalist -> target_commalist COMMA target
-- On SEMICOLON reduce production target_commalist -> target_commalist COMMA target
-- On SELECT reduce production target_commalist -> target_commalist COMMA target
-- On ROLLBACK reduce production target_commalist -> target_commalist COMMA target
-- On PROCEDURE reduce production target_commalist -> target_commalist COMMA target
-- On OPEN reduce production target_commalist -> target_commalist COMMA target
-- On INSERT reduce production target_commalist -> target_commalist COMMA target
-- On FROM reduce production target_commalist -> target_commalist COMMA target
-- On FETCH reduce production target_commalist -> target_commalist COMMA target
-- On EOF reduce production target_commalist -> target_commalist COMMA target
-- On DELETE reduce production target_commalist -> target_commalist COMMA target
-- On COMMIT reduce production target_commalist -> target_commalist COMMA target
-- On COMMA reduce production target_commalist -> target_commalist COMMA target
-- On CLOSE reduce production target_commalist -> target_commalist COMMA target

State 196:
## Known stack suffix:
## parameter_ref
## LR(1) items:
target -> parameter_ref . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FROM FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production target -> parameter_ref
-- On SEMICOLON reduce production target -> parameter_ref
-- On SELECT reduce production target -> parameter_ref
-- On ROLLBACK reduce production target -> parameter_ref
-- On PROCEDURE reduce production target -> parameter_ref
-- On OPEN reduce production target -> parameter_ref
-- On INSERT reduce production target -> parameter_ref
-- On FROM reduce production target -> parameter_ref
-- On FETCH reduce production target -> parameter_ref
-- On EOF reduce production target -> parameter_ref
-- On DELETE reduce production target -> parameter_ref
-- On COMMIT reduce production target -> parameter_ref
-- On COMMA reduce production target -> parameter_ref
-- On CLOSE reduce production target -> parameter_ref

State 197:
## Known stack suffix:
## SELECT opt_all_distinct selection INTO target_commalist table_exp
## LR(1) items:
select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On SEMICOLON reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On SELECT reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On ROLLBACK reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On PROCEDURE reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On OPEN reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On INSERT reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On FETCH reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On EOF reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On DELETE reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On COMMIT reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp
-- On CLOSE reduce production select_statement -> SELECT opt_all_distinct selection INTO target_commalist table_exp

State 198:
## Known stack suffix:
## target
## LR(1) items:
target_commalist -> target . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FROM FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production target_commalist -> target
-- On SEMICOLON reduce production target_commalist -> target
-- On SELECT reduce production target_commalist -> target
-- On ROLLBACK reduce production target_commalist -> target
-- On PROCEDURE reduce production target_commalist -> target
-- On OPEN reduce production target_commalist -> target
-- On INSERT reduce production target_commalist -> target
-- On FROM reduce production target_commalist -> target
-- On FETCH reduce production target_commalist -> target
-- On EOF reduce production target_commalist -> target
-- On DELETE reduce production target_commalist -> target
-- On COMMIT reduce production target_commalist -> target
-- On COMMA reduce production target_commalist -> target
-- On CLOSE reduce production target_commalist -> target

State 199:
## Known stack suffix:
## ROLLBACK
## LR(1) items:
rollback_statement -> ROLLBACK . WORK [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On WORK shift to state 200
## Reductions:

State 200:
## Known stack suffix:
## ROLLBACK WORK
## LR(1) items:
rollback_statement -> ROLLBACK WORK . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production rollback_statement -> ROLLBACK WORK
-- On SEMICOLON reduce production rollback_statement -> ROLLBACK WORK
-- On SELECT reduce production rollback_statement -> ROLLBACK WORK
-- On ROLLBACK reduce production rollback_statement -> ROLLBACK WORK
-- On PROCEDURE reduce production rollback_statement -> ROLLBACK WORK
-- On OPEN reduce production rollback_statement -> ROLLBACK WORK
-- On INSERT reduce production rollback_statement -> ROLLBACK WORK
-- On FETCH reduce production rollback_statement -> ROLLBACK WORK
-- On EOF reduce production rollback_statement -> ROLLBACK WORK
-- On DELETE reduce production rollback_statement -> ROLLBACK WORK
-- On COMMIT reduce production rollback_statement -> ROLLBACK WORK
-- On CLOSE reduce production rollback_statement -> ROLLBACK WORK

State 201:
## Known stack suffix:
## OPEN
## LR(1) items:
open_statement -> OPEN . cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 183
-- On cursor shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## OPEN cursor
## LR(1) items:
open_statement -> OPEN cursor . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production open_statement -> OPEN cursor
-- On SEMICOLON reduce production open_statement -> OPEN cursor
-- On SELECT reduce production open_statement -> OPEN cursor
-- On ROLLBACK reduce production open_statement -> OPEN cursor
-- On PROCEDURE reduce production open_statement -> OPEN cursor
-- On OPEN reduce production open_statement -> OPEN cursor
-- On INSERT reduce production open_statement -> OPEN cursor
-- On FETCH reduce production open_statement -> OPEN cursor
-- On EOF reduce production open_statement -> OPEN cursor
-- On DELETE reduce production open_statement -> OPEN cursor
-- On COMMIT reduce production open_statement -> OPEN cursor
-- On CLOSE reduce production open_statement -> OPEN cursor

State 203:
## Known stack suffix:
## MODULE
## LR(1) items:
module_def -> MODULE . opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list [ # ]
## Transitions:
-- On IDENT shift to state 204
-- On sqlmodule shift to state 205
-- On opt_module shift to state 206
## Reductions:
-- On LANGUAGE reduce production opt_module ->

State 204:
## Known stack suffix:
## IDENT
## LR(1) items:
sqlmodule -> IDENT . [ LANGUAGE ]
## Transitions:
## Reductions:
-- On LANGUAGE reduce production sqlmodule -> IDENT

State 205:
## Known stack suffix:
## sqlmodule
## LR(1) items:
opt_module -> sqlmodule . [ LANGUAGE ]
## Transitions:
## Reductions:
-- On LANGUAGE reduce production opt_module -> sqlmodule

State 206:
## Known stack suffix:
## MODULE opt_module
## LR(1) items:
module_def -> MODULE opt_module . LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list [ # ]
## Transitions:
-- On LANGUAGE shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## MODULE opt_module LANGUAGE
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE . lang AUTHORIZATION user opt_cursor_def_list procedure_def_list [ # ]
## Transitions:
-- On PLI shift to state 208
-- On PASCAL shift to state 209
-- On OCAML shift to state 210
-- On FORTRAN shift to state 211
-- On COBOL shift to state 212
-- On C shift to state 213
-- On ADA shift to state 214
-- On lang shift to state 215
## Reductions:

State 208:
## Known stack suffix:
## PLI
## LR(1) items:
lang -> PLI . [ AUTHORIZATION ]
## Transitions:
## Reductions:
-- On AUTHORIZATION reduce production lang -> PLI

State 209:
## Known stack suffix:
## PASCAL
## LR(1) items:
lang -> PASCAL . [ AUTHORIZATION ]
## Transitions:
## Reductions:
-- On AUTHORIZATION reduce production lang -> PASCAL

State 210:
## Known stack suffix:
## OCAML
## LR(1) items:
lang -> OCAML . [ AUTHORIZATION ]
## Transitions:
## Reductions:
-- On AUTHORIZATION reduce production lang -> OCAML

State 211:
## Known stack suffix:
## FORTRAN
## LR(1) items:
lang -> FORTRAN . [ AUTHORIZATION ]
## Transitions:
## Reductions:
-- On AUTHORIZATION reduce production lang -> FORTRAN

State 212:
## Known stack suffix:
## COBOL
## LR(1) items:
lang -> COBOL . [ AUTHORIZATION ]
## Transitions:
## Reductions:
-- On AUTHORIZATION reduce production lang -> COBOL

State 213:
## Known stack suffix:
## C
## LR(1) items:
lang -> C . [ AUTHORIZATION ]
## Transitions:
## Reductions:
-- On AUTHORIZATION reduce production lang -> C

State 214:
## Known stack suffix:
## ADA
## LR(1) items:
lang -> ADA . [ AUTHORIZATION ]
## Transitions:
## Reductions:
-- On AUTHORIZATION reduce production lang -> ADA

State 215:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang . AUTHORIZATION user opt_cursor_def_list procedure_def_list [ # ]
## Transitions:
-- On AUTHORIZATION shift to state 216
## Reductions:

State 216:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang AUTHORIZATION
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION . user opt_cursor_def_list procedure_def_list [ # ]
## Transitions:
-- On IDENT shift to state 217
-- On user shift to state 218
## Reductions:

State 217:
## Known stack suffix:
## IDENT
## LR(1) items:
user -> IDENT . [ WITH SEMICOLON PROCEDURE GRANT EOF DECLARE CREATE COMMA # ]
## Transitions:
## Reductions:
-- On WITH reduce production user -> IDENT
-- On SEMICOLON reduce production user -> IDENT
-- On PROCEDURE reduce production user -> IDENT
-- On GRANT reduce production user -> IDENT
-- On EOF reduce production user -> IDENT
-- On DECLARE reduce production user -> IDENT
-- On CREATE reduce production user -> IDENT
-- On COMMA reduce production user -> IDENT

State 218:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang AUTHORIZATION user
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION user . opt_cursor_def_list procedure_def_list [ # ]
## Transitions:
-- On DECLARE shift to state 219
-- On opt_cursor_def_list shift to state 246
-- On cursor_def_list shift to state 338
-- On cursor_def shift to state 340
## Reductions:
-- On PROCEDURE reduce production opt_cursor_def_list ->

State 219:
## Known stack suffix:
## DECLARE
## LR(1) items:
cursor_def -> DECLARE . cursor CURSOR FOR query_exp opt_order_by_clause [ PROCEDURE DECLARE ]
## Transitions:
-- On IDENT shift to state 183
-- On cursor shift to state 220
## Reductions:

State 220:
## Known stack suffix:
## DECLARE cursor
## LR(1) items:
cursor_def -> DECLARE cursor . CURSOR FOR query_exp opt_order_by_clause [ PROCEDURE DECLARE ]
## Transitions:
-- On CURSOR shift to state 221
## Reductions:

State 221:
## Known stack suffix:
## DECLARE cursor CURSOR
## LR(1) items:
cursor_def -> DECLARE cursor CURSOR . FOR query_exp opt_order_by_clause [ PROCEDURE DECLARE ]
## Transitions:
-- On FOR shift to state 222
## Reductions:

State 222:
## Known stack suffix:
## DECLARE cursor CURSOR FOR
## LR(1) items:
cursor_def -> DECLARE cursor CURSOR FOR . query_exp opt_order_by_clause [ PROCEDURE DECLARE ]
## Transitions:
-- On SELECT shift to state 79
-- On LPAREN shift to state 223
-- On select_exp shift to state 224
-- On query_term shift to state 225
-- On query_exp shift to state 232
## Reductions:

State 223:
## Known stack suffix:
## LPAREN
## LR(1) items:
query_term -> LPAREN . query_exp RPAREN [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
## Transitions:
-- On SELECT shift to state 79
-- On LPAREN shift to state 223
-- On select_exp shift to state 224
-- On query_term shift to state 225
-- On query_exp shift to state 226
## Reductions:

State 224:
## Known stack suffix:
## select_exp
## LR(1) items:
query_term -> select_exp . [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
## Transitions:
## Reductions:
-- On UNION reduce production query_term -> select_exp
-- On SEMICOLON reduce production query_term -> select_exp
-- On RPAREN reduce production query_term -> select_exp
-- On PROCEDURE reduce production query_term -> select_exp
-- On ORDER reduce production query_term -> select_exp
-- On EOF reduce production query_term -> select_exp
-- On DECLARE reduce production query_term -> select_exp

State 225:
## Known stack suffix:
## query_term
## LR(1) items:
query_exp -> query_term . [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
## Transitions:
## Reductions:
-- On UNION reduce production query_exp -> query_term
-- On SEMICOLON reduce production query_exp -> query_term
-- On RPAREN reduce production query_exp -> query_term
-- On PROCEDURE reduce production query_exp -> query_term
-- On ORDER reduce production query_exp -> query_term
-- On EOF reduce production query_exp -> query_term
-- On DECLARE reduce production query_exp -> query_term

State 226:
## Known stack suffix:
## LPAREN query_exp
## LR(1) items:
query_exp -> query_exp . UNION query_term [ UNION RPAREN ]
query_exp -> query_exp . UNION ALL query_term [ UNION RPAREN ]
query_term -> LPAREN query_exp . RPAREN [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
## Transitions:
-- On UNION shift to state 227
-- On RPAREN shift to state 231
## Reductions:

State 227:
## Known stack suffix:
## query_exp UNION
## LR(1) items:
query_exp -> query_exp UNION . query_term [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
query_exp -> query_exp UNION . ALL query_term [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
## Transitions:
-- On SELECT shift to state 79
-- On LPAREN shift to state 223
-- On ALL shift to state 228
-- On select_exp shift to state 224
-- On query_term shift to state 230
## Reductions:

State 228:
## Known stack suffix:
## query_exp UNION ALL
## LR(1) items:
query_exp -> query_exp UNION ALL . query_term [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
## Transitions:
-- On SELECT shift to state 79
-- On LPAREN shift to state 223
-- On select_exp shift to state 224
-- On query_term shift to state 229
## Reductions:

State 229:
## Known stack suffix:
## query_exp UNION ALL query_term
## LR(1) items:
query_exp -> query_exp UNION ALL query_term . [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
## Transitions:
## Reductions:
-- On UNION reduce production query_exp -> query_exp UNION ALL query_term
-- On SEMICOLON reduce production query_exp -> query_exp UNION ALL query_term
-- On RPAREN reduce production query_exp -> query_exp UNION ALL query_term
-- On PROCEDURE reduce production query_exp -> query_exp UNION ALL query_term
-- On ORDER reduce production query_exp -> query_exp UNION ALL query_term
-- On EOF reduce production query_exp -> query_exp UNION ALL query_term
-- On DECLARE reduce production query_exp -> query_exp UNION ALL query_term

State 230:
## Known stack suffix:
## query_exp UNION query_term
## LR(1) items:
query_exp -> query_exp UNION query_term . [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
## Transitions:
## Reductions:
-- On UNION reduce production query_exp -> query_exp UNION query_term
-- On SEMICOLON reduce production query_exp -> query_exp UNION query_term
-- On RPAREN reduce production query_exp -> query_exp UNION query_term
-- On PROCEDURE reduce production query_exp -> query_exp UNION query_term
-- On ORDER reduce production query_exp -> query_exp UNION query_term
-- On EOF reduce production query_exp -> query_exp UNION query_term
-- On DECLARE reduce production query_exp -> query_exp UNION query_term

State 231:
## Known stack suffix:
## LPAREN query_exp RPAREN
## LR(1) items:
query_term -> LPAREN query_exp RPAREN . [ UNION SEMICOLON RPAREN PROCEDURE ORDER EOF DECLARE ]
## Transitions:
## Reductions:
-- On UNION reduce production query_term -> LPAREN query_exp RPAREN
-- On SEMICOLON reduce production query_term -> LPAREN query_exp RPAREN
-- On RPAREN reduce production query_term -> LPAREN query_exp RPAREN
-- On PROCEDURE reduce production query_term -> LPAREN query_exp RPAREN
-- On ORDER reduce production query_term -> LPAREN query_exp RPAREN
-- On EOF reduce production query_term -> LPAREN query_exp RPAREN
-- On DECLARE reduce production query_term -> LPAREN query_exp RPAREN

State 232:
## Known stack suffix:
## DECLARE cursor CURSOR FOR query_exp
## LR(1) items:
cursor_def -> DECLARE cursor CURSOR FOR query_exp . opt_order_by_clause [ PROCEDURE DECLARE ]
query_exp -> query_exp . UNION query_term [ UNION PROCEDURE ORDER DECLARE ]
query_exp -> query_exp . UNION ALL query_term [ UNION PROCEDURE ORDER DECLARE ]
## Transitions:
-- On UNION shift to state 227
-- On ORDER shift to state 233
-- On opt_order_by_clause shift to state 245
## Reductions:
-- On PROCEDURE reduce production opt_order_by_clause ->
-- On DECLARE reduce production opt_order_by_clause ->

State 233:
## Known stack suffix:
## ORDER
## LR(1) items:
opt_order_by_clause -> ORDER . BY ordering_spec_commalist [ SEMICOLON PROCEDURE EOF DECLARE ]
## Transitions:
-- On BY shift to state 234
## Reductions:

State 234:
## Known stack suffix:
## ORDER BY
## LR(1) items:
opt_order_by_clause -> ORDER BY . ordering_spec_commalist [ SEMICOLON PROCEDURE EOF DECLARE ]
## Transitions:
-- On INTNUM shift to state 235
-- On IDENT shift to state 54
-- On ordering_spec_commalist shift to state 239
-- On ordering_spec shift to state 244
-- On column_ref shift to state 242
## Reductions:

State 235:
## Known stack suffix:
## INTNUM
## LR(1) items:
ordering_spec -> INTNUM . opt_asc_desc [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
-- On DESC shift to state 236
-- On ASC shift to state 237
-- On opt_asc_desc shift to state 238
## Reductions:
-- On SEMICOLON reduce production opt_asc_desc ->
-- On PROCEDURE reduce production opt_asc_desc ->
-- On EOF reduce production opt_asc_desc ->
-- On DECLARE reduce production opt_asc_desc ->
-- On COMMA reduce production opt_asc_desc ->

State 236:
## Known stack suffix:
## DESC
## LR(1) items:
opt_asc_desc -> DESC . [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production opt_asc_desc -> DESC
-- On PROCEDURE reduce production opt_asc_desc -> DESC
-- On EOF reduce production opt_asc_desc -> DESC
-- On DECLARE reduce production opt_asc_desc -> DESC
-- On COMMA reduce production opt_asc_desc -> DESC

State 237:
## Known stack suffix:
## ASC
## LR(1) items:
opt_asc_desc -> ASC . [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production opt_asc_desc -> ASC
-- On PROCEDURE reduce production opt_asc_desc -> ASC
-- On EOF reduce production opt_asc_desc -> ASC
-- On DECLARE reduce production opt_asc_desc -> ASC
-- On COMMA reduce production opt_asc_desc -> ASC

State 238:
## Known stack suffix:
## INTNUM opt_asc_desc
## LR(1) items:
ordering_spec -> INTNUM opt_asc_desc . [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production ordering_spec -> INTNUM opt_asc_desc
-- On PROCEDURE reduce production ordering_spec -> INTNUM opt_asc_desc
-- On EOF reduce production ordering_spec -> INTNUM opt_asc_desc
-- On DECLARE reduce production ordering_spec -> INTNUM opt_asc_desc
-- On COMMA reduce production ordering_spec -> INTNUM opt_asc_desc

State 239:
## Known stack suffix:
## ORDER BY ordering_spec_commalist
## LR(1) items:
opt_order_by_clause -> ORDER BY ordering_spec_commalist . [ SEMICOLON PROCEDURE EOF DECLARE ]
ordering_spec_commalist -> ordering_spec_commalist . COMMA ordering_spec [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
-- On COMMA shift to state 240
## Reductions:
-- On SEMICOLON reduce production opt_order_by_clause -> ORDER BY ordering_spec_commalist
-- On PROCEDURE reduce production opt_order_by_clause -> ORDER BY ordering_spec_commalist
-- On EOF reduce production opt_order_by_clause -> ORDER BY ordering_spec_commalist
-- On DECLARE reduce production opt_order_by_clause -> ORDER BY ordering_spec_commalist

State 240:
## Known stack suffix:
## ordering_spec_commalist COMMA
## LR(1) items:
ordering_spec_commalist -> ordering_spec_commalist COMMA . ordering_spec [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
-- On INTNUM shift to state 235
-- On IDENT shift to state 54
-- On ordering_spec shift to state 241
-- On column_ref shift to state 242
## Reductions:

State 241:
## Known stack suffix:
## ordering_spec_commalist COMMA ordering_spec
## LR(1) items:
ordering_spec_commalist -> ordering_spec_commalist COMMA ordering_spec . [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production ordering_spec_commalist -> ordering_spec_commalist COMMA ordering_spec
-- On PROCEDURE reduce production ordering_spec_commalist -> ordering_spec_commalist COMMA ordering_spec
-- On EOF reduce production ordering_spec_commalist -> ordering_spec_commalist COMMA ordering_spec
-- On DECLARE reduce production ordering_spec_commalist -> ordering_spec_commalist COMMA ordering_spec
-- On COMMA reduce production ordering_spec_commalist -> ordering_spec_commalist COMMA ordering_spec

State 242:
## Known stack suffix:
## column_ref
## LR(1) items:
ordering_spec -> column_ref . opt_asc_desc [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
-- On DESC shift to state 236
-- On ASC shift to state 237
-- On opt_asc_desc shift to state 243
## Reductions:
-- On SEMICOLON reduce production opt_asc_desc ->
-- On PROCEDURE reduce production opt_asc_desc ->
-- On EOF reduce production opt_asc_desc ->
-- On DECLARE reduce production opt_asc_desc ->
-- On COMMA reduce production opt_asc_desc ->

State 243:
## Known stack suffix:
## column_ref opt_asc_desc
## LR(1) items:
ordering_spec -> column_ref opt_asc_desc . [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production ordering_spec -> column_ref opt_asc_desc
-- On PROCEDURE reduce production ordering_spec -> column_ref opt_asc_desc
-- On EOF reduce production ordering_spec -> column_ref opt_asc_desc
-- On DECLARE reduce production ordering_spec -> column_ref opt_asc_desc
-- On COMMA reduce production ordering_spec -> column_ref opt_asc_desc

State 244:
## Known stack suffix:
## ordering_spec
## LR(1) items:
ordering_spec_commalist -> ordering_spec . [ SEMICOLON PROCEDURE EOF DECLARE COMMA ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production ordering_spec_commalist -> ordering_spec
-- On PROCEDURE reduce production ordering_spec_commalist -> ordering_spec
-- On EOF reduce production ordering_spec_commalist -> ordering_spec
-- On DECLARE reduce production ordering_spec_commalist -> ordering_spec
-- On COMMA reduce production ordering_spec_commalist -> ordering_spec

State 245:
## Known stack suffix:
## DECLARE cursor CURSOR FOR query_exp opt_order_by_clause
## LR(1) items:
cursor_def -> DECLARE cursor CURSOR FOR query_exp opt_order_by_clause . [ PROCEDURE DECLARE ]
## Transitions:
## Reductions:
-- On PROCEDURE reduce production cursor_def -> DECLARE cursor CURSOR FOR query_exp opt_order_by_clause
-- On DECLARE reduce production cursor_def -> DECLARE cursor CURSOR FOR query_exp opt_order_by_clause

State 246:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list . procedure_def_list [ # ]
## Transitions:
-- On PROCEDURE shift to state 247
-- On procedure_def_list shift to state 335
-- On procedure_def shift to state 337
## Reductions:

State 247:
## Known stack suffix:
## PROCEDURE
## LR(1) items:
procedure_def -> PROCEDURE . procedure parameter_def_list SEMICOLON manipulative_statement_list [ SEMICOLON PROCEDURE EOF # ]
## Transitions:
-- On IDENT shift to state 248
-- On procedure shift to state 249
## Reductions:

State 248:
## Known stack suffix:
## IDENT
## LR(1) items:
procedure -> IDENT . [ SQLCODE COLON ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production procedure -> IDENT
-- On COLON reduce production procedure -> IDENT

State 249:
## Known stack suffix:
## PROCEDURE procedure
## LR(1) items:
procedure_def -> PROCEDURE procedure . parameter_def_list SEMICOLON manipulative_statement_list [ SEMICOLON PROCEDURE EOF # ]
## Transitions:
-- On SQLCODE shift to state 250
-- On COLON shift to state 30
-- On parameter_def_list shift to state 251
-- On parameter_def shift to state 334
-- On parameter shift to state 305
## Reductions:

State 250:
## Known stack suffix:
## SQLCODE
## LR(1) items:
parameter_def -> SQLCODE . [ SQLCODE SEMICOLON COLON ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production parameter_def -> SQLCODE
-- On SEMICOLON reduce production parameter_def -> SQLCODE
-- On COLON reduce production parameter_def -> SQLCODE

State 251:
## Known stack suffix:
## PROCEDURE procedure parameter_def_list
## LR(1) items:
parameter_def_list -> parameter_def_list . parameter_def [ SQLCODE SEMICOLON COLON ]
procedure_def -> PROCEDURE procedure parameter_def_list . SEMICOLON manipulative_statement_list [ SEMICOLON PROCEDURE EOF # ]
## Transitions:
-- On SQLCODE shift to state 250
-- On SEMICOLON shift to state 252
-- On COLON shift to state 30
-- On parameter_def shift to state 304
-- On parameter shift to state 305
## Reductions:

State 252:
## Known stack suffix:
## PROCEDURE procedure parameter_def_list SEMICOLON
## LR(1) items:
procedure_def -> PROCEDURE procedure parameter_def_list SEMICOLON . manipulative_statement_list [ SEMICOLON PROCEDURE EOF # ]
## Transitions:
-- On UPDATE shift to state 10
-- On SELECT shift to state 189
-- On ROLLBACK shift to state 199
-- On OPEN shift to state 201
-- On INSERT shift to state 253
-- On FETCH shift to state 274
-- On DELETE shift to state 278
-- On COMMIT shift to state 286
-- On CLOSE shift to state 288
-- On update_statement_searched shift to state 290
-- On update_statement_positioned shift to state 291
-- On select_statement shift to state 292
-- On rollback_statement shift to state 293
-- On open_statement shift to state 294
-- On manipulative_statement_list shift to state 295
-- On manipulative_statement shift to state 303
-- On insert_statement shift to state 297
-- On fetch_statement shift to state 298
-- On delete_statement_searched shift to state 299
-- On delete_statement_positioned shift to state 300
-- On commit_statement shift to state 301
-- On close_statement shift to state 302
## Reductions:

State 253:
## Known stack suffix:
## INSERT
## LR(1) items:
insert_statement -> INSERT . INTO table opt_column_commalist values_or_select_exp [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On INTO shift to state 254
## Reductions:

State 254:
## Known stack suffix:
## INSERT INTO
## LR(1) items:
insert_statement -> INSERT INTO . table opt_column_commalist values_or_select_exp [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 11
-- On table shift to state 255
## Reductions:

State 255:
## Known stack suffix:
## INSERT INTO table
## LR(1) items:
insert_statement -> INSERT INTO table . opt_column_commalist values_or_select_exp [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On LPAREN shift to state 256
-- On opt_column_commalist shift to state 262
## Reductions:
-- On VALUES reduce production opt_column_commalist ->
-- On SELECT reduce production opt_column_commalist ->

State 256:
## Known stack suffix:
## LPAREN
## LR(1) items:
opt_column_commalist -> LPAREN . column_commalist RPAREN [ VALUES SELECT ON COMMA AS ]
## Transitions:
-- On IDENT shift to state 14
-- On column_commalist shift to state 257
-- On column shift to state 261
## Reductions:

State 257:
## Known stack suffix:
## LPAREN column_commalist
## LR(1) items:
column_commalist -> column_commalist . COMMA column [ RPAREN COMMA ]
opt_column_commalist -> LPAREN column_commalist . RPAREN [ VALUES SELECT ON COMMA AS ]
## Transitions:
-- On RPAREN shift to state 258
-- On COMMA shift to state 259
## Reductions:

State 258:
## Known stack suffix:
## LPAREN column_commalist RPAREN
## LR(1) items:
opt_column_commalist -> LPAREN column_commalist RPAREN . [ VALUES SELECT ON COMMA AS ]
## Transitions:
## Reductions:
-- On VALUES reduce production opt_column_commalist -> LPAREN column_commalist RPAREN
-- On SELECT reduce production opt_column_commalist -> LPAREN column_commalist RPAREN
-- On ON reduce production opt_column_commalist -> LPAREN column_commalist RPAREN
-- On COMMA reduce production opt_column_commalist -> LPAREN column_commalist RPAREN
-- On AS reduce production opt_column_commalist -> LPAREN column_commalist RPAREN

State 259:
## Known stack suffix:
## column_commalist COMMA
## LR(1) items:
column_commalist -> column_commalist COMMA . column [ RPAREN COMMA ]
## Transitions:
-- On IDENT shift to state 14
-- On column shift to state 260
## Reductions:

State 260:
## Known stack suffix:
## column_commalist COMMA column
## LR(1) items:
column_commalist -> column_commalist COMMA column . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_commalist -> column_commalist COMMA column
-- On COMMA reduce production column_commalist -> column_commalist COMMA column

State 261:
## Known stack suffix:
## column
## LR(1) items:
column_commalist -> column . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_commalist -> column
-- On COMMA reduce production column_commalist -> column

State 262:
## Known stack suffix:
## INSERT INTO table opt_column_commalist
## LR(1) items:
insert_statement -> INSERT INTO table opt_column_commalist . values_or_select_exp [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On VALUES shift to state 263
-- On SELECT shift to state 79
-- On values_or_select_exp shift to state 272
-- On select_exp shift to state 273
## Reductions:

State 263:
## Known stack suffix:
## VALUES
## LR(1) items:
values_or_select_exp -> VALUES . LPAREN rev_insert_atom_commalist RPAREN [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On LPAREN shift to state 264
## Reductions:

State 264:
## Known stack suffix:
## VALUES LPAREN
## LR(1) items:
values_or_select_exp -> VALUES LPAREN . rev_insert_atom_commalist RPAREN [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On USER shift to state 17
-- On STRING shift to state 19
-- On NULL shift to state 265
-- On INTNUM shift to state 25
-- On COLON shift to state 30
-- On rev_insert_atom_commalist shift to state 266
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On insert_atom shift to state 271
-- On atom shift to state 270
## Reductions:

State 265:
## Known stack suffix:
## NULL
## LR(1) items:
insert_atom -> NULL . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production insert_atom -> NULL
-- On COMMA reduce production insert_atom -> NULL

State 266:
## Known stack suffix:
## VALUES LPAREN rev_insert_atom_commalist
## LR(1) items:
rev_insert_atom_commalist -> rev_insert_atom_commalist . COMMA insert_atom [ RPAREN COMMA ]
values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist . RPAREN [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On RPAREN shift to state 267
-- On COMMA shift to state 268
## Reductions:

State 267:
## Known stack suffix:
## VALUES LPAREN rev_insert_atom_commalist RPAREN
## LR(1) items:
values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On SEMICOLON reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On SELECT reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On ROLLBACK reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On PROCEDURE reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On OPEN reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On INSERT reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On FETCH reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On EOF reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On DELETE reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On COMMIT reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN
-- On CLOSE reduce production values_or_select_exp -> VALUES LPAREN rev_insert_atom_commalist RPAREN

State 268:
## Known stack suffix:
## rev_insert_atom_commalist COMMA
## LR(1) items:
rev_insert_atom_commalist -> rev_insert_atom_commalist COMMA . insert_atom [ RPAREN COMMA ]
## Transitions:
-- On USER shift to state 17
-- On STRING shift to state 19
-- On NULL shift to state 265
-- On INTNUM shift to state 25
-- On COLON shift to state 30
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On insert_atom shift to state 269
-- On atom shift to state 270
## Reductions:

State 269:
## Known stack suffix:
## rev_insert_atom_commalist COMMA insert_atom
## LR(1) items:
rev_insert_atom_commalist -> rev_insert_atom_commalist COMMA insert_atom . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production rev_insert_atom_commalist -> rev_insert_atom_commalist COMMA insert_atom
-- On COMMA reduce production rev_insert_atom_commalist -> rev_insert_atom_commalist COMMA insert_atom

State 270:
## Known stack suffix:
## atom
## LR(1) items:
insert_atom -> atom . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production insert_atom -> atom
-- On COMMA reduce production insert_atom -> atom

State 271:
## Known stack suffix:
## insert_atom
## LR(1) items:
rev_insert_atom_commalist -> insert_atom . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production rev_insert_atom_commalist -> insert_atom
-- On COMMA reduce production rev_insert_atom_commalist -> insert_atom

State 272:
## Known stack suffix:
## INSERT INTO table opt_column_commalist values_or_select_exp
## LR(1) items:
insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On SEMICOLON reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On SELECT reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On ROLLBACK reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On PROCEDURE reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On OPEN reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On INSERT reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On FETCH reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On EOF reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On DELETE reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On COMMIT reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp
-- On CLOSE reduce production insert_statement -> INSERT INTO table opt_column_commalist values_or_select_exp

State 273:
## Known stack suffix:
## select_exp
## LR(1) items:
values_or_select_exp -> select_exp . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production values_or_select_exp -> select_exp
-- On SEMICOLON reduce production values_or_select_exp -> select_exp
-- On SELECT reduce production values_or_select_exp -> select_exp
-- On ROLLBACK reduce production values_or_select_exp -> select_exp
-- On PROCEDURE reduce production values_or_select_exp -> select_exp
-- On OPEN reduce production values_or_select_exp -> select_exp
-- On INSERT reduce production values_or_select_exp -> select_exp
-- On FETCH reduce production values_or_select_exp -> select_exp
-- On EOF reduce production values_or_select_exp -> select_exp
-- On DELETE reduce production values_or_select_exp -> select_exp
-- On COMMIT reduce production values_or_select_exp -> select_exp
-- On CLOSE reduce production values_or_select_exp -> select_exp

State 274:
## Known stack suffix:
## FETCH
## LR(1) items:
fetch_statement -> FETCH . cursor INTO target_commalist [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 183
-- On cursor shift to state 275
## Reductions:

State 275:
## Known stack suffix:
## FETCH cursor
## LR(1) items:
fetch_statement -> FETCH cursor . INTO target_commalist [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On INTO shift to state 276
## Reductions:

State 276:
## Known stack suffix:
## FETCH cursor INTO
## LR(1) items:
fetch_statement -> FETCH cursor INTO . target_commalist [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On COLON shift to state 30
-- On target_commalist shift to state 277
-- On target shift to state 198
-- On parameter_ref shift to state 196
-- On parameter shift to state 37
## Reductions:

State 277:
## Known stack suffix:
## FETCH cursor INTO target_commalist
## LR(1) items:
fetch_statement -> FETCH cursor INTO target_commalist . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
target_commalist -> target_commalist . COMMA target [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT COMMA CLOSE # ]
## Transitions:
-- On COMMA shift to state 194
## Reductions:
-- On UPDATE reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On SEMICOLON reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On SELECT reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On ROLLBACK reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On PROCEDURE reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On OPEN reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On INSERT reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On FETCH reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On EOF reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On DELETE reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On COMMIT reduce production fetch_statement -> FETCH cursor INTO target_commalist
-- On CLOSE reduce production fetch_statement -> FETCH cursor INTO target_commalist

State 278:
## Known stack suffix:
## DELETE
## LR(1) items:
delete_statement_positioned -> DELETE . FROM table WHERE CURRENT OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
delete_statement_searched -> DELETE . FROM table opt_where_clause [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On FROM shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## DELETE FROM
## LR(1) items:
delete_statement_positioned -> DELETE FROM . table WHERE CURRENT OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
delete_statement_searched -> DELETE FROM . table opt_where_clause [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 11
-- On table shift to state 280
## Reductions:

State 280:
## Known stack suffix:
## DELETE FROM table
## LR(1) items:
delete_statement_positioned -> DELETE FROM table . WHERE CURRENT OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
delete_statement_searched -> DELETE FROM table . opt_where_clause [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On WHERE shift to state 281
-- On where_clause shift to state 159
-- On opt_where_clause shift to state 285
## Reductions:
-- On UPDATE reduce production opt_where_clause ->
-- On SEMICOLON reduce production opt_where_clause ->
-- On SELECT reduce production opt_where_clause ->
-- On ROLLBACK reduce production opt_where_clause ->
-- On PROCEDURE reduce production opt_where_clause ->
-- On OPEN reduce production opt_where_clause ->
-- On INSERT reduce production opt_where_clause ->
-- On FETCH reduce production opt_where_clause ->
-- On EOF reduce production opt_where_clause ->
-- On DELETE reduce production opt_where_clause ->
-- On COMMIT reduce production opt_where_clause ->
-- On CLOSE reduce production opt_where_clause ->

State 281:
## Known stack suffix:
## DELETE FROM table WHERE
## LR(1) items:
delete_statement_positioned -> DELETE FROM table WHERE . CURRENT OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
where_clause -> WHERE . search_condition [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On CURRENT shift to state 282
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 97
-- On scalar_exp shift to state 102
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 282:
## Known stack suffix:
## DELETE FROM table WHERE CURRENT
## LR(1) items:
delete_statement_positioned -> DELETE FROM table WHERE CURRENT . OF cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On OF shift to state 283
## Reductions:

State 283:
## Known stack suffix:
## DELETE FROM table WHERE CURRENT OF
## LR(1) items:
delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF . cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 183
-- On cursor shift to state 284
## Reductions:

State 284:
## Known stack suffix:
## DELETE FROM table WHERE CURRENT OF cursor
## LR(1) items:
delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On SEMICOLON reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On SELECT reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On ROLLBACK reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On PROCEDURE reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On OPEN reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On INSERT reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On FETCH reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On EOF reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On DELETE reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On COMMIT reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor
-- On CLOSE reduce production delete_statement_positioned -> DELETE FROM table WHERE CURRENT OF cursor

State 285:
## Known stack suffix:
## DELETE FROM table opt_where_clause
## LR(1) items:
delete_statement_searched -> DELETE FROM table opt_where_clause . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On SEMICOLON reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On SELECT reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On ROLLBACK reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On PROCEDURE reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On OPEN reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On INSERT reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On FETCH reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On EOF reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On DELETE reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On COMMIT reduce production delete_statement_searched -> DELETE FROM table opt_where_clause
-- On CLOSE reduce production delete_statement_searched -> DELETE FROM table opt_where_clause

State 286:
## Known stack suffix:
## COMMIT
## LR(1) items:
commit_statement -> COMMIT . WORK [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On WORK shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## COMMIT WORK
## LR(1) items:
commit_statement -> COMMIT WORK . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production commit_statement -> COMMIT WORK
-- On SEMICOLON reduce production commit_statement -> COMMIT WORK
-- On SELECT reduce production commit_statement -> COMMIT WORK
-- On ROLLBACK reduce production commit_statement -> COMMIT WORK
-- On PROCEDURE reduce production commit_statement -> COMMIT WORK
-- On OPEN reduce production commit_statement -> COMMIT WORK
-- On INSERT reduce production commit_statement -> COMMIT WORK
-- On FETCH reduce production commit_statement -> COMMIT WORK
-- On EOF reduce production commit_statement -> COMMIT WORK
-- On DELETE reduce production commit_statement -> COMMIT WORK
-- On COMMIT reduce production commit_statement -> COMMIT WORK
-- On CLOSE reduce production commit_statement -> COMMIT WORK

State 288:
## Known stack suffix:
## CLOSE
## LR(1) items:
close_statement -> CLOSE . cursor [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
-- On IDENT shift to state 183
-- On cursor shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## CLOSE cursor
## LR(1) items:
close_statement -> CLOSE cursor . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production close_statement -> CLOSE cursor
-- On SEMICOLON reduce production close_statement -> CLOSE cursor
-- On SELECT reduce production close_statement -> CLOSE cursor
-- On ROLLBACK reduce production close_statement -> CLOSE cursor
-- On PROCEDURE reduce production close_statement -> CLOSE cursor
-- On OPEN reduce production close_statement -> CLOSE cursor
-- On INSERT reduce production close_statement -> CLOSE cursor
-- On FETCH reduce production close_statement -> CLOSE cursor
-- On EOF reduce production close_statement -> CLOSE cursor
-- On DELETE reduce production close_statement -> CLOSE cursor
-- On COMMIT reduce production close_statement -> CLOSE cursor
-- On CLOSE reduce production close_statement -> CLOSE cursor

State 290:
## Known stack suffix:
## update_statement_searched
## LR(1) items:
manipulative_statement -> update_statement_searched . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> update_statement_searched
-- On SEMICOLON reduce production manipulative_statement -> update_statement_searched
-- On SELECT reduce production manipulative_statement -> update_statement_searched
-- On ROLLBACK reduce production manipulative_statement -> update_statement_searched
-- On PROCEDURE reduce production manipulative_statement -> update_statement_searched
-- On OPEN reduce production manipulative_statement -> update_statement_searched
-- On INSERT reduce production manipulative_statement -> update_statement_searched
-- On FETCH reduce production manipulative_statement -> update_statement_searched
-- On EOF reduce production manipulative_statement -> update_statement_searched
-- On DELETE reduce production manipulative_statement -> update_statement_searched
-- On COMMIT reduce production manipulative_statement -> update_statement_searched
-- On CLOSE reduce production manipulative_statement -> update_statement_searched

State 291:
## Known stack suffix:
## update_statement_positioned
## LR(1) items:
manipulative_statement -> update_statement_positioned . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> update_statement_positioned
-- On SEMICOLON reduce production manipulative_statement -> update_statement_positioned
-- On SELECT reduce production manipulative_statement -> update_statement_positioned
-- On ROLLBACK reduce production manipulative_statement -> update_statement_positioned
-- On PROCEDURE reduce production manipulative_statement -> update_statement_positioned
-- On OPEN reduce production manipulative_statement -> update_statement_positioned
-- On INSERT reduce production manipulative_statement -> update_statement_positioned
-- On FETCH reduce production manipulative_statement -> update_statement_positioned
-- On EOF reduce production manipulative_statement -> update_statement_positioned
-- On DELETE reduce production manipulative_statement -> update_statement_positioned
-- On COMMIT reduce production manipulative_statement -> update_statement_positioned
-- On CLOSE reduce production manipulative_statement -> update_statement_positioned

State 292:
## Known stack suffix:
## select_statement
## LR(1) items:
manipulative_statement -> select_statement . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> select_statement
-- On SEMICOLON reduce production manipulative_statement -> select_statement
-- On SELECT reduce production manipulative_statement -> select_statement
-- On ROLLBACK reduce production manipulative_statement -> select_statement
-- On PROCEDURE reduce production manipulative_statement -> select_statement
-- On OPEN reduce production manipulative_statement -> select_statement
-- On INSERT reduce production manipulative_statement -> select_statement
-- On FETCH reduce production manipulative_statement -> select_statement
-- On EOF reduce production manipulative_statement -> select_statement
-- On DELETE reduce production manipulative_statement -> select_statement
-- On COMMIT reduce production manipulative_statement -> select_statement
-- On CLOSE reduce production manipulative_statement -> select_statement

State 293:
## Known stack suffix:
## rollback_statement
## LR(1) items:
manipulative_statement -> rollback_statement . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> rollback_statement
-- On SEMICOLON reduce production manipulative_statement -> rollback_statement
-- On SELECT reduce production manipulative_statement -> rollback_statement
-- On ROLLBACK reduce production manipulative_statement -> rollback_statement
-- On PROCEDURE reduce production manipulative_statement -> rollback_statement
-- On OPEN reduce production manipulative_statement -> rollback_statement
-- On INSERT reduce production manipulative_statement -> rollback_statement
-- On FETCH reduce production manipulative_statement -> rollback_statement
-- On EOF reduce production manipulative_statement -> rollback_statement
-- On DELETE reduce production manipulative_statement -> rollback_statement
-- On COMMIT reduce production manipulative_statement -> rollback_statement
-- On CLOSE reduce production manipulative_statement -> rollback_statement

State 294:
## Known stack suffix:
## open_statement
## LR(1) items:
manipulative_statement -> open_statement . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> open_statement
-- On SEMICOLON reduce production manipulative_statement -> open_statement
-- On SELECT reduce production manipulative_statement -> open_statement
-- On ROLLBACK reduce production manipulative_statement -> open_statement
-- On PROCEDURE reduce production manipulative_statement -> open_statement
-- On OPEN reduce production manipulative_statement -> open_statement
-- On INSERT reduce production manipulative_statement -> open_statement
-- On FETCH reduce production manipulative_statement -> open_statement
-- On EOF reduce production manipulative_statement -> open_statement
-- On DELETE reduce production manipulative_statement -> open_statement
-- On COMMIT reduce production manipulative_statement -> open_statement
-- On CLOSE reduce production manipulative_statement -> open_statement

State 295:
## Known stack suffix:
## PROCEDURE procedure parameter_def_list SEMICOLON manipulative_statement_list
## LR(1) items:
manipulative_statement_list -> manipulative_statement_list . manipulative_statement [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
procedure_def -> PROCEDURE procedure parameter_def_list SEMICOLON manipulative_statement_list . [ SEMICOLON PROCEDURE EOF # ]
## Transitions:
-- On UPDATE shift to state 10
-- On SELECT shift to state 189
-- On ROLLBACK shift to state 199
-- On OPEN shift to state 201
-- On INSERT shift to state 253
-- On FETCH shift to state 274
-- On DELETE shift to state 278
-- On COMMIT shift to state 286
-- On CLOSE shift to state 288
-- On update_statement_searched shift to state 290
-- On update_statement_positioned shift to state 291
-- On select_statement shift to state 292
-- On rollback_statement shift to state 293
-- On open_statement shift to state 294
-- On manipulative_statement shift to state 296
-- On insert_statement shift to state 297
-- On fetch_statement shift to state 298
-- On delete_statement_searched shift to state 299
-- On delete_statement_positioned shift to state 300
-- On commit_statement shift to state 301
-- On close_statement shift to state 302
## Reductions:
-- On SEMICOLON reduce production procedure_def -> PROCEDURE procedure parameter_def_list SEMICOLON manipulative_statement_list
-- On PROCEDURE reduce production procedure_def -> PROCEDURE procedure parameter_def_list SEMICOLON manipulative_statement_list
-- On EOF reduce production procedure_def -> PROCEDURE procedure parameter_def_list SEMICOLON manipulative_statement_list

State 296:
## Known stack suffix:
## manipulative_statement_list manipulative_statement
## LR(1) items:
manipulative_statement_list -> manipulative_statement_list manipulative_statement . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On SEMICOLON reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On SELECT reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On ROLLBACK reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On PROCEDURE reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On OPEN reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On INSERT reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On FETCH reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On EOF reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On DELETE reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On COMMIT reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement
-- On CLOSE reduce production manipulative_statement_list -> manipulative_statement_list manipulative_statement

State 297:
## Known stack suffix:
## insert_statement
## LR(1) items:
manipulative_statement -> insert_statement . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> insert_statement
-- On SEMICOLON reduce production manipulative_statement -> insert_statement
-- On SELECT reduce production manipulative_statement -> insert_statement
-- On ROLLBACK reduce production manipulative_statement -> insert_statement
-- On PROCEDURE reduce production manipulative_statement -> insert_statement
-- On OPEN reduce production manipulative_statement -> insert_statement
-- On INSERT reduce production manipulative_statement -> insert_statement
-- On FETCH reduce production manipulative_statement -> insert_statement
-- On EOF reduce production manipulative_statement -> insert_statement
-- On DELETE reduce production manipulative_statement -> insert_statement
-- On COMMIT reduce production manipulative_statement -> insert_statement
-- On CLOSE reduce production manipulative_statement -> insert_statement

State 298:
## Known stack suffix:
## fetch_statement
## LR(1) items:
manipulative_statement -> fetch_statement . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> fetch_statement
-- On SEMICOLON reduce production manipulative_statement -> fetch_statement
-- On SELECT reduce production manipulative_statement -> fetch_statement
-- On ROLLBACK reduce production manipulative_statement -> fetch_statement
-- On PROCEDURE reduce production manipulative_statement -> fetch_statement
-- On OPEN reduce production manipulative_statement -> fetch_statement
-- On INSERT reduce production manipulative_statement -> fetch_statement
-- On FETCH reduce production manipulative_statement -> fetch_statement
-- On EOF reduce production manipulative_statement -> fetch_statement
-- On DELETE reduce production manipulative_statement -> fetch_statement
-- On COMMIT reduce production manipulative_statement -> fetch_statement
-- On CLOSE reduce production manipulative_statement -> fetch_statement

State 299:
## Known stack suffix:
## delete_statement_searched
## LR(1) items:
manipulative_statement -> delete_statement_searched . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> delete_statement_searched
-- On SEMICOLON reduce production manipulative_statement -> delete_statement_searched
-- On SELECT reduce production manipulative_statement -> delete_statement_searched
-- On ROLLBACK reduce production manipulative_statement -> delete_statement_searched
-- On PROCEDURE reduce production manipulative_statement -> delete_statement_searched
-- On OPEN reduce production manipulative_statement -> delete_statement_searched
-- On INSERT reduce production manipulative_statement -> delete_statement_searched
-- On FETCH reduce production manipulative_statement -> delete_statement_searched
-- On EOF reduce production manipulative_statement -> delete_statement_searched
-- On DELETE reduce production manipulative_statement -> delete_statement_searched
-- On COMMIT reduce production manipulative_statement -> delete_statement_searched
-- On CLOSE reduce production manipulative_statement -> delete_statement_searched

State 300:
## Known stack suffix:
## delete_statement_positioned
## LR(1) items:
manipulative_statement -> delete_statement_positioned . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> delete_statement_positioned
-- On SEMICOLON reduce production manipulative_statement -> delete_statement_positioned
-- On SELECT reduce production manipulative_statement -> delete_statement_positioned
-- On ROLLBACK reduce production manipulative_statement -> delete_statement_positioned
-- On PROCEDURE reduce production manipulative_statement -> delete_statement_positioned
-- On OPEN reduce production manipulative_statement -> delete_statement_positioned
-- On INSERT reduce production manipulative_statement -> delete_statement_positioned
-- On FETCH reduce production manipulative_statement -> delete_statement_positioned
-- On EOF reduce production manipulative_statement -> delete_statement_positioned
-- On DELETE reduce production manipulative_statement -> delete_statement_positioned
-- On COMMIT reduce production manipulative_statement -> delete_statement_positioned
-- On CLOSE reduce production manipulative_statement -> delete_statement_positioned

State 301:
## Known stack suffix:
## commit_statement
## LR(1) items:
manipulative_statement -> commit_statement . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> commit_statement
-- On SEMICOLON reduce production manipulative_statement -> commit_statement
-- On SELECT reduce production manipulative_statement -> commit_statement
-- On ROLLBACK reduce production manipulative_statement -> commit_statement
-- On PROCEDURE reduce production manipulative_statement -> commit_statement
-- On OPEN reduce production manipulative_statement -> commit_statement
-- On INSERT reduce production manipulative_statement -> commit_statement
-- On FETCH reduce production manipulative_statement -> commit_statement
-- On EOF reduce production manipulative_statement -> commit_statement
-- On DELETE reduce production manipulative_statement -> commit_statement
-- On COMMIT reduce production manipulative_statement -> commit_statement
-- On CLOSE reduce production manipulative_statement -> commit_statement

State 302:
## Known stack suffix:
## close_statement
## LR(1) items:
manipulative_statement -> close_statement . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement -> close_statement
-- On SEMICOLON reduce production manipulative_statement -> close_statement
-- On SELECT reduce production manipulative_statement -> close_statement
-- On ROLLBACK reduce production manipulative_statement -> close_statement
-- On PROCEDURE reduce production manipulative_statement -> close_statement
-- On OPEN reduce production manipulative_statement -> close_statement
-- On INSERT reduce production manipulative_statement -> close_statement
-- On FETCH reduce production manipulative_statement -> close_statement
-- On EOF reduce production manipulative_statement -> close_statement
-- On DELETE reduce production manipulative_statement -> close_statement
-- On COMMIT reduce production manipulative_statement -> close_statement
-- On CLOSE reduce production manipulative_statement -> close_statement

State 303:
## Known stack suffix:
## manipulative_statement
## LR(1) items:
manipulative_statement_list -> manipulative_statement . [ UPDATE SEMICOLON SELECT ROLLBACK PROCEDURE OPEN INSERT FETCH EOF DELETE COMMIT CLOSE # ]
## Transitions:
## Reductions:
-- On UPDATE reduce production manipulative_statement_list -> manipulative_statement
-- On SEMICOLON reduce production manipulative_statement_list -> manipulative_statement
-- On SELECT reduce production manipulative_statement_list -> manipulative_statement
-- On ROLLBACK reduce production manipulative_statement_list -> manipulative_statement
-- On PROCEDURE reduce production manipulative_statement_list -> manipulative_statement
-- On OPEN reduce production manipulative_statement_list -> manipulative_statement
-- On INSERT reduce production manipulative_statement_list -> manipulative_statement
-- On FETCH reduce production manipulative_statement_list -> manipulative_statement
-- On EOF reduce production manipulative_statement_list -> manipulative_statement
-- On DELETE reduce production manipulative_statement_list -> manipulative_statement
-- On COMMIT reduce production manipulative_statement_list -> manipulative_statement
-- On CLOSE reduce production manipulative_statement_list -> manipulative_statement

State 304:
## Known stack suffix:
## parameter_def_list parameter_def
## LR(1) items:
parameter_def_list -> parameter_def_list parameter_def . [ SQLCODE SEMICOLON COLON ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production parameter_def_list -> parameter_def_list parameter_def
-- On SEMICOLON reduce production parameter_def_list -> parameter_def_list parameter_def
-- On COLON reduce production parameter_def_list -> parameter_def_list parameter_def

State 305:
## Known stack suffix:
## parameter
## LR(1) items:
parameter_def -> parameter . data_type [ SQLCODE SEMICOLON COLON ]
## Transitions:
-- On SMALLINT shift to state 306
-- On REAL shift to state 307
-- On NUMERIC shift to state 308
-- On INTEGER shift to state 315
-- On FLOAT shift to state 316
-- On DOUBLE shift to state 320
-- On DECIMAL shift to state 322
-- On CHARACTER shift to state 329
-- On data_type shift to state 333
## Reductions:

State 306:
## Known stack suffix:
## SMALLINT
## LR(1) items:
data_type -> SMALLINT . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> SMALLINT
-- On SEMICOLON reduce production data_type -> SMALLINT
-- On RPAREN reduce production data_type -> SMALLINT
-- On REFERENCES reduce production data_type -> SMALLINT
-- On NOT reduce production data_type -> SMALLINT
-- On DEFAULT reduce production data_type -> SMALLINT
-- On COMMA reduce production data_type -> SMALLINT
-- On COLON reduce production data_type -> SMALLINT
-- On CHECK reduce production data_type -> SMALLINT

State 307:
## Known stack suffix:
## REAL
## LR(1) items:
data_type -> REAL . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> REAL
-- On SEMICOLON reduce production data_type -> REAL
-- On RPAREN reduce production data_type -> REAL
-- On REFERENCES reduce production data_type -> REAL
-- On NOT reduce production data_type -> REAL
-- On DEFAULT reduce production data_type -> REAL
-- On COMMA reduce production data_type -> REAL
-- On COLON reduce production data_type -> REAL
-- On CHECK reduce production data_type -> REAL

State 308:
## Known stack suffix:
## NUMERIC
## LR(1) items:
data_type -> NUMERIC . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> NUMERIC . LPAREN INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> NUMERIC . LPAREN INTNUM COMMA INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On LPAREN shift to state 309
## Reductions:
-- On SQLCODE reduce production data_type -> NUMERIC
-- On SEMICOLON reduce production data_type -> NUMERIC
-- On RPAREN reduce production data_type -> NUMERIC
-- On REFERENCES reduce production data_type -> NUMERIC
-- On NOT reduce production data_type -> NUMERIC
-- On DEFAULT reduce production data_type -> NUMERIC
-- On COMMA reduce production data_type -> NUMERIC
-- On COLON reduce production data_type -> NUMERIC
-- On CHECK reduce production data_type -> NUMERIC

State 309:
## Known stack suffix:
## NUMERIC LPAREN
## LR(1) items:
data_type -> NUMERIC LPAREN . INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> NUMERIC LPAREN . INTNUM COMMA INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On INTNUM shift to state 310
## Reductions:

State 310:
## Known stack suffix:
## NUMERIC LPAREN INTNUM
## LR(1) items:
data_type -> NUMERIC LPAREN INTNUM . RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> NUMERIC LPAREN INTNUM . COMMA INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On RPAREN shift to state 311
-- On COMMA shift to state 312
## Reductions:

State 311:
## Known stack suffix:
## NUMERIC LPAREN INTNUM RPAREN
## LR(1) items:
data_type -> NUMERIC LPAREN INTNUM RPAREN . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> NUMERIC LPAREN INTNUM RPAREN
-- On SEMICOLON reduce production data_type -> NUMERIC LPAREN INTNUM RPAREN
-- On RPAREN reduce production data_type -> NUMERIC LPAREN INTNUM RPAREN
-- On REFERENCES reduce production data_type -> NUMERIC LPAREN INTNUM RPAREN
-- On NOT reduce production data_type -> NUMERIC LPAREN INTNUM RPAREN
-- On DEFAULT reduce production data_type -> NUMERIC LPAREN INTNUM RPAREN
-- On COMMA reduce production data_type -> NUMERIC LPAREN INTNUM RPAREN
-- On COLON reduce production data_type -> NUMERIC LPAREN INTNUM RPAREN
-- On CHECK reduce production data_type -> NUMERIC LPAREN INTNUM RPAREN

State 312:
## Known stack suffix:
## NUMERIC LPAREN INTNUM COMMA
## LR(1) items:
data_type -> NUMERIC LPAREN INTNUM COMMA . INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On INTNUM shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## NUMERIC LPAREN INTNUM COMMA INTNUM
## LR(1) items:
data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM . RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On RPAREN shift to state 314
## Reductions:

State 314:
## Known stack suffix:
## NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN
## LR(1) items:
data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN
-- On SEMICOLON reduce production data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN
-- On RPAREN reduce production data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN
-- On REFERENCES reduce production data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN
-- On NOT reduce production data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN
-- On DEFAULT reduce production data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN
-- On COMMA reduce production data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN
-- On COLON reduce production data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN
-- On CHECK reduce production data_type -> NUMERIC LPAREN INTNUM COMMA INTNUM RPAREN

State 315:
## Known stack suffix:
## INTEGER
## LR(1) items:
data_type -> INTEGER . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> INTEGER
-- On SEMICOLON reduce production data_type -> INTEGER
-- On RPAREN reduce production data_type -> INTEGER
-- On REFERENCES reduce production data_type -> INTEGER
-- On NOT reduce production data_type -> INTEGER
-- On DEFAULT reduce production data_type -> INTEGER
-- On COMMA reduce production data_type -> INTEGER
-- On COLON reduce production data_type -> INTEGER
-- On CHECK reduce production data_type -> INTEGER

State 316:
## Known stack suffix:
## FLOAT
## LR(1) items:
data_type -> FLOAT . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> FLOAT . LPAREN INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On LPAREN shift to state 317
## Reductions:
-- On SQLCODE reduce production data_type -> FLOAT
-- On SEMICOLON reduce production data_type -> FLOAT
-- On RPAREN reduce production data_type -> FLOAT
-- On REFERENCES reduce production data_type -> FLOAT
-- On NOT reduce production data_type -> FLOAT
-- On DEFAULT reduce production data_type -> FLOAT
-- On COMMA reduce production data_type -> FLOAT
-- On COLON reduce production data_type -> FLOAT
-- On CHECK reduce production data_type -> FLOAT

State 317:
## Known stack suffix:
## FLOAT LPAREN
## LR(1) items:
data_type -> FLOAT LPAREN . INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On INTNUM shift to state 318
## Reductions:

State 318:
## Known stack suffix:
## FLOAT LPAREN INTNUM
## LR(1) items:
data_type -> FLOAT LPAREN INTNUM . RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On RPAREN shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## FLOAT LPAREN INTNUM RPAREN
## LR(1) items:
data_type -> FLOAT LPAREN INTNUM RPAREN . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> FLOAT LPAREN INTNUM RPAREN
-- On SEMICOLON reduce production data_type -> FLOAT LPAREN INTNUM RPAREN
-- On RPAREN reduce production data_type -> FLOAT LPAREN INTNUM RPAREN
-- On REFERENCES reduce production data_type -> FLOAT LPAREN INTNUM RPAREN
-- On NOT reduce production data_type -> FLOAT LPAREN INTNUM RPAREN
-- On DEFAULT reduce production data_type -> FLOAT LPAREN INTNUM RPAREN
-- On COMMA reduce production data_type -> FLOAT LPAREN INTNUM RPAREN
-- On COLON reduce production data_type -> FLOAT LPAREN INTNUM RPAREN
-- On CHECK reduce production data_type -> FLOAT LPAREN INTNUM RPAREN

State 320:
## Known stack suffix:
## DOUBLE
## LR(1) items:
data_type -> DOUBLE . PRECISION [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On PRECISION shift to state 321
## Reductions:

State 321:
## Known stack suffix:
## DOUBLE PRECISION
## LR(1) items:
data_type -> DOUBLE PRECISION . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> DOUBLE PRECISION
-- On SEMICOLON reduce production data_type -> DOUBLE PRECISION
-- On RPAREN reduce production data_type -> DOUBLE PRECISION
-- On REFERENCES reduce production data_type -> DOUBLE PRECISION
-- On NOT reduce production data_type -> DOUBLE PRECISION
-- On DEFAULT reduce production data_type -> DOUBLE PRECISION
-- On COMMA reduce production data_type -> DOUBLE PRECISION
-- On COLON reduce production data_type -> DOUBLE PRECISION
-- On CHECK reduce production data_type -> DOUBLE PRECISION

State 322:
## Known stack suffix:
## DECIMAL
## LR(1) items:
data_type -> DECIMAL . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> DECIMAL . LPAREN INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> DECIMAL . LPAREN INTNUM COMMA INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On LPAREN shift to state 323
## Reductions:
-- On SQLCODE reduce production data_type -> DECIMAL
-- On SEMICOLON reduce production data_type -> DECIMAL
-- On RPAREN reduce production data_type -> DECIMAL
-- On REFERENCES reduce production data_type -> DECIMAL
-- On NOT reduce production data_type -> DECIMAL
-- On DEFAULT reduce production data_type -> DECIMAL
-- On COMMA reduce production data_type -> DECIMAL
-- On COLON reduce production data_type -> DECIMAL
-- On CHECK reduce production data_type -> DECIMAL

State 323:
## Known stack suffix:
## DECIMAL LPAREN
## LR(1) items:
data_type -> DECIMAL LPAREN . INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> DECIMAL LPAREN . INTNUM COMMA INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On INTNUM shift to state 324
## Reductions:

State 324:
## Known stack suffix:
## DECIMAL LPAREN INTNUM
## LR(1) items:
data_type -> DECIMAL LPAREN INTNUM . RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> DECIMAL LPAREN INTNUM . COMMA INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On RPAREN shift to state 325
-- On COMMA shift to state 326
## Reductions:

State 325:
## Known stack suffix:
## DECIMAL LPAREN INTNUM RPAREN
## LR(1) items:
data_type -> DECIMAL LPAREN INTNUM RPAREN . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> DECIMAL LPAREN INTNUM RPAREN
-- On SEMICOLON reduce production data_type -> DECIMAL LPAREN INTNUM RPAREN
-- On RPAREN reduce production data_type -> DECIMAL LPAREN INTNUM RPAREN
-- On REFERENCES reduce production data_type -> DECIMAL LPAREN INTNUM RPAREN
-- On NOT reduce production data_type -> DECIMAL LPAREN INTNUM RPAREN
-- On DEFAULT reduce production data_type -> DECIMAL LPAREN INTNUM RPAREN
-- On COMMA reduce production data_type -> DECIMAL LPAREN INTNUM RPAREN
-- On COLON reduce production data_type -> DECIMAL LPAREN INTNUM RPAREN
-- On CHECK reduce production data_type -> DECIMAL LPAREN INTNUM RPAREN

State 326:
## Known stack suffix:
## DECIMAL LPAREN INTNUM COMMA
## LR(1) items:
data_type -> DECIMAL LPAREN INTNUM COMMA . INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On INTNUM shift to state 327
## Reductions:

State 327:
## Known stack suffix:
## DECIMAL LPAREN INTNUM COMMA INTNUM
## LR(1) items:
data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM . RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On RPAREN shift to state 328
## Reductions:

State 328:
## Known stack suffix:
## DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN
## LR(1) items:
data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN
-- On SEMICOLON reduce production data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN
-- On RPAREN reduce production data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN
-- On REFERENCES reduce production data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN
-- On NOT reduce production data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN
-- On DEFAULT reduce production data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN
-- On COMMA reduce production data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN
-- On COLON reduce production data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN
-- On CHECK reduce production data_type -> DECIMAL LPAREN INTNUM COMMA INTNUM RPAREN

State 329:
## Known stack suffix:
## CHARACTER
## LR(1) items:
data_type -> CHARACTER . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
data_type -> CHARACTER . LPAREN INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On LPAREN shift to state 330
## Reductions:
-- On SQLCODE reduce production data_type -> CHARACTER
-- On SEMICOLON reduce production data_type -> CHARACTER
-- On RPAREN reduce production data_type -> CHARACTER
-- On REFERENCES reduce production data_type -> CHARACTER
-- On NOT reduce production data_type -> CHARACTER
-- On DEFAULT reduce production data_type -> CHARACTER
-- On COMMA reduce production data_type -> CHARACTER
-- On COLON reduce production data_type -> CHARACTER
-- On CHECK reduce production data_type -> CHARACTER

State 330:
## Known stack suffix:
## CHARACTER LPAREN
## LR(1) items:
data_type -> CHARACTER LPAREN . INTNUM RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On INTNUM shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## CHARACTER LPAREN INTNUM
## LR(1) items:
data_type -> CHARACTER LPAREN INTNUM . RPAREN [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
-- On RPAREN shift to state 332
## Reductions:

State 332:
## Known stack suffix:
## CHARACTER LPAREN INTNUM RPAREN
## LR(1) items:
data_type -> CHARACTER LPAREN INTNUM RPAREN . [ SQLCODE SEMICOLON RPAREN REFERENCES NOT DEFAULT COMMA COLON CHECK ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production data_type -> CHARACTER LPAREN INTNUM RPAREN
-- On SEMICOLON reduce production data_type -> CHARACTER LPAREN INTNUM RPAREN
-- On RPAREN reduce production data_type -> CHARACTER LPAREN INTNUM RPAREN
-- On REFERENCES reduce production data_type -> CHARACTER LPAREN INTNUM RPAREN
-- On NOT reduce production data_type -> CHARACTER LPAREN INTNUM RPAREN
-- On DEFAULT reduce production data_type -> CHARACTER LPAREN INTNUM RPAREN
-- On COMMA reduce production data_type -> CHARACTER LPAREN INTNUM RPAREN
-- On COLON reduce production data_type -> CHARACTER LPAREN INTNUM RPAREN
-- On CHECK reduce production data_type -> CHARACTER LPAREN INTNUM RPAREN

State 333:
## Known stack suffix:
## parameter data_type
## LR(1) items:
parameter_def -> parameter data_type . [ SQLCODE SEMICOLON COLON ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production parameter_def -> parameter data_type
-- On SEMICOLON reduce production parameter_def -> parameter data_type
-- On COLON reduce production parameter_def -> parameter data_type

State 334:
## Known stack suffix:
## parameter_def
## LR(1) items:
parameter_def_list -> parameter_def . [ SQLCODE SEMICOLON COLON ]
## Transitions:
## Reductions:
-- On SQLCODE reduce production parameter_def_list -> parameter_def
-- On SEMICOLON reduce production parameter_def_list -> parameter_def
-- On COLON reduce production parameter_def_list -> parameter_def

State 335:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list . [ # ]
procedure_def_list -> procedure_def_list . procedure_def [ PROCEDURE # ]
## Transitions:
-- On PROCEDURE shift to state 247
-- On procedure_def shift to state 336
## Reductions:

State 336:
## Known stack suffix:
## procedure_def_list procedure_def
## LR(1) items:
procedure_def_list -> procedure_def_list procedure_def . [ SEMICOLON PROCEDURE EOF # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production procedure_def_list -> procedure_def_list procedure_def
-- On PROCEDURE reduce production procedure_def_list -> procedure_def_list procedure_def
-- On EOF reduce production procedure_def_list -> procedure_def_list procedure_def

State 337:
## Known stack suffix:
## procedure_def
## LR(1) items:
procedure_def_list -> procedure_def . [ SEMICOLON PROCEDURE EOF # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production procedure_def_list -> procedure_def
-- On PROCEDURE reduce production procedure_def_list -> procedure_def
-- On EOF reduce production procedure_def_list -> procedure_def

State 338:
## Known stack suffix:
## cursor_def_list
## LR(1) items:
cursor_def_list -> cursor_def_list . cursor_def [ PROCEDURE DECLARE ]
opt_cursor_def_list -> cursor_def_list . [ PROCEDURE ]
## Transitions:
-- On DECLARE shift to state 219
-- On cursor_def shift to state 339
## Reductions:
-- On PROCEDURE reduce production opt_cursor_def_list -> cursor_def_list

State 339:
## Known stack suffix:
## cursor_def_list cursor_def
## LR(1) items:
cursor_def_list -> cursor_def_list cursor_def . [ PROCEDURE DECLARE ]
## Transitions:
## Reductions:
-- On PROCEDURE reduce production cursor_def_list -> cursor_def_list cursor_def
-- On DECLARE reduce production cursor_def_list -> cursor_def_list cursor_def

State 340:
## Known stack suffix:
## cursor_def
## LR(1) items:
cursor_def_list -> cursor_def . [ PROCEDURE DECLARE ]
## Transitions:
## Reductions:
-- On PROCEDURE reduce production cursor_def_list -> cursor_def
-- On DECLARE reduce production cursor_def_list -> cursor_def

State 341:
## Known stack suffix:
## GRANT
## LR(1) items:
privilege_def -> GRANT . privileges ON table TO grantee_commalist opt_with_grant_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On UPDATE shift to state 342
-- On SELECT shift to state 344
-- On REFERENCES shift to state 345
-- On INSERT shift to state 347
-- On DELETE shift to state 348
-- On ALL shift to state 349
-- On privileges shift to state 351
-- On operation_commalist shift to state 365
-- On operation shift to state 368
## Reductions:

State 342:
## Known stack suffix:
## UPDATE
## LR(1) items:
operation -> UPDATE . opt_column_commalist [ ON COMMA ]
## Transitions:
-- On LPAREN shift to state 256
-- On opt_column_commalist shift to state 343
## Reductions:
-- On ON reduce production opt_column_commalist ->
-- On COMMA reduce production opt_column_commalist ->

State 343:
## Known stack suffix:
## UPDATE opt_column_commalist
## LR(1) items:
operation -> UPDATE opt_column_commalist . [ ON COMMA ]
## Transitions:
## Reductions:
-- On ON reduce production operation -> UPDATE opt_column_commalist
-- On COMMA reduce production operation -> UPDATE opt_column_commalist

State 344:
## Known stack suffix:
## SELECT
## LR(1) items:
operation -> SELECT . [ ON COMMA ]
## Transitions:
## Reductions:
-- On ON reduce production operation -> SELECT
-- On COMMA reduce production operation -> SELECT

State 345:
## Known stack suffix:
## REFERENCES
## LR(1) items:
operation -> REFERENCES . opt_column_commalist [ ON COMMA ]
## Transitions:
-- On LPAREN shift to state 256
-- On opt_column_commalist shift to state 346
## Reductions:
-- On ON reduce production opt_column_commalist ->
-- On COMMA reduce production opt_column_commalist ->

State 346:
## Known stack suffix:
## REFERENCES opt_column_commalist
## LR(1) items:
operation -> REFERENCES opt_column_commalist . [ ON COMMA ]
## Transitions:
## Reductions:
-- On ON reduce production operation -> REFERENCES opt_column_commalist
-- On COMMA reduce production operation -> REFERENCES opt_column_commalist

State 347:
## Known stack suffix:
## INSERT
## LR(1) items:
operation -> INSERT . [ ON COMMA ]
## Transitions:
## Reductions:
-- On ON reduce production operation -> INSERT
-- On COMMA reduce production operation -> INSERT

State 348:
## Known stack suffix:
## DELETE
## LR(1) items:
operation -> DELETE . [ ON COMMA ]
## Transitions:
## Reductions:
-- On ON reduce production operation -> DELETE
-- On COMMA reduce production operation -> DELETE

State 349:
## Known stack suffix:
## ALL
## LR(1) items:
privileges -> ALL . PRIVILEGES [ ON ]
privileges -> ALL . [ ON ]
## Transitions:
-- On PRIVILEGES shift to state 350
## Reductions:
-- On ON reduce production privileges -> ALL

State 350:
## Known stack suffix:
## ALL PRIVILEGES
## LR(1) items:
privileges -> ALL PRIVILEGES . [ ON ]
## Transitions:
## Reductions:
-- On ON reduce production privileges -> ALL PRIVILEGES

State 351:
## Known stack suffix:
## GRANT privileges
## LR(1) items:
privilege_def -> GRANT privileges . ON table TO grantee_commalist opt_with_grant_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On ON shift to state 352
## Reductions:

State 352:
## Known stack suffix:
## GRANT privileges ON
## LR(1) items:
privilege_def -> GRANT privileges ON . table TO grantee_commalist opt_with_grant_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On IDENT shift to state 11
-- On table shift to state 353
## Reductions:

State 353:
## Known stack suffix:
## GRANT privileges ON table
## LR(1) items:
privilege_def -> GRANT privileges ON table . TO grantee_commalist opt_with_grant_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On TO shift to state 354
## Reductions:

State 354:
## Known stack suffix:
## GRANT privileges ON table TO
## LR(1) items:
privilege_def -> GRANT privileges ON table TO . grantee_commalist opt_with_grant_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On PUBLIC shift to state 355
-- On IDENT shift to state 217
-- On user shift to state 356
-- On grantee_commalist shift to state 357
-- On grantee shift to state 364
## Reductions:

State 355:
## Known stack suffix:
## PUBLIC
## LR(1) items:
grantee -> PUBLIC . [ WITH SEMICOLON GRANT EOF CREATE COMMA # ]
## Transitions:
## Reductions:
-- On WITH reduce production grantee -> PUBLIC
-- On SEMICOLON reduce production grantee -> PUBLIC
-- On GRANT reduce production grantee -> PUBLIC
-- On EOF reduce production grantee -> PUBLIC
-- On CREATE reduce production grantee -> PUBLIC
-- On COMMA reduce production grantee -> PUBLIC

State 356:
## Known stack suffix:
## user
## LR(1) items:
grantee -> user . [ WITH SEMICOLON GRANT EOF CREATE COMMA # ]
## Transitions:
## Reductions:
-- On WITH reduce production grantee -> user
-- On SEMICOLON reduce production grantee -> user
-- On GRANT reduce production grantee -> user
-- On EOF reduce production grantee -> user
-- On CREATE reduce production grantee -> user
-- On COMMA reduce production grantee -> user

State 357:
## Known stack suffix:
## GRANT privileges ON table TO grantee_commalist
## LR(1) items:
grantee_commalist -> grantee_commalist . COMMA grantee [ WITH SEMICOLON GRANT EOF CREATE COMMA # ]
privilege_def -> GRANT privileges ON table TO grantee_commalist . opt_with_grant_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On WITH shift to state 358
-- On COMMA shift to state 361
-- On opt_with_grant_option shift to state 363
## Reductions:
-- On SEMICOLON reduce production opt_with_grant_option ->
-- On GRANT reduce production opt_with_grant_option ->
-- On EOF reduce production opt_with_grant_option ->
-- On CREATE reduce production opt_with_grant_option ->

State 358:
## Known stack suffix:
## WITH
## LR(1) items:
opt_with_grant_option -> WITH . GRANT OPTION [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On GRANT shift to state 359
## Reductions:

State 359:
## Known stack suffix:
## WITH GRANT
## LR(1) items:
opt_with_grant_option -> WITH GRANT . OPTION [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On OPTION shift to state 360
## Reductions:

State 360:
## Known stack suffix:
## WITH GRANT OPTION
## LR(1) items:
opt_with_grant_option -> WITH GRANT OPTION . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production opt_with_grant_option -> WITH GRANT OPTION
-- On GRANT reduce production opt_with_grant_option -> WITH GRANT OPTION
-- On EOF reduce production opt_with_grant_option -> WITH GRANT OPTION
-- On CREATE reduce production opt_with_grant_option -> WITH GRANT OPTION

State 361:
## Known stack suffix:
## grantee_commalist COMMA
## LR(1) items:
grantee_commalist -> grantee_commalist COMMA . grantee [ WITH SEMICOLON GRANT EOF CREATE COMMA # ]
## Transitions:
-- On PUBLIC shift to state 355
-- On IDENT shift to state 217
-- On user shift to state 356
-- On grantee shift to state 362
## Reductions:

State 362:
## Known stack suffix:
## grantee_commalist COMMA grantee
## LR(1) items:
grantee_commalist -> grantee_commalist COMMA grantee . [ WITH SEMICOLON GRANT EOF CREATE COMMA # ]
## Transitions:
## Reductions:
-- On WITH reduce production grantee_commalist -> grantee_commalist COMMA grantee
-- On SEMICOLON reduce production grantee_commalist -> grantee_commalist COMMA grantee
-- On GRANT reduce production grantee_commalist -> grantee_commalist COMMA grantee
-- On EOF reduce production grantee_commalist -> grantee_commalist COMMA grantee
-- On CREATE reduce production grantee_commalist -> grantee_commalist COMMA grantee
-- On COMMA reduce production grantee_commalist -> grantee_commalist COMMA grantee

State 363:
## Known stack suffix:
## GRANT privileges ON table TO grantee_commalist opt_with_grant_option
## LR(1) items:
privilege_def -> GRANT privileges ON table TO grantee_commalist opt_with_grant_option . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production privilege_def -> GRANT privileges ON table TO grantee_commalist opt_with_grant_option
-- On GRANT reduce production privilege_def -> GRANT privileges ON table TO grantee_commalist opt_with_grant_option
-- On EOF reduce production privilege_def -> GRANT privileges ON table TO grantee_commalist opt_with_grant_option
-- On CREATE reduce production privilege_def -> GRANT privileges ON table TO grantee_commalist opt_with_grant_option

State 364:
## Known stack suffix:
## grantee
## LR(1) items:
grantee_commalist -> grantee . [ WITH SEMICOLON GRANT EOF CREATE COMMA # ]
## Transitions:
## Reductions:
-- On WITH reduce production grantee_commalist -> grantee
-- On SEMICOLON reduce production grantee_commalist -> grantee
-- On GRANT reduce production grantee_commalist -> grantee
-- On EOF reduce production grantee_commalist -> grantee
-- On CREATE reduce production grantee_commalist -> grantee
-- On COMMA reduce production grantee_commalist -> grantee

State 365:
## Known stack suffix:
## operation_commalist
## LR(1) items:
operation_commalist -> operation_commalist . COMMA operation [ ON COMMA ]
privileges -> operation_commalist . [ ON ]
## Transitions:
-- On COMMA shift to state 366
## Reductions:
-- On ON reduce production privileges -> operation_commalist

State 366:
## Known stack suffix:
## operation_commalist COMMA
## LR(1) items:
operation_commalist -> operation_commalist COMMA . operation [ ON COMMA ]
## Transitions:
-- On UPDATE shift to state 342
-- On SELECT shift to state 344
-- On REFERENCES shift to state 345
-- On INSERT shift to state 347
-- On DELETE shift to state 348
-- On operation shift to state 367
## Reductions:

State 367:
## Known stack suffix:
## operation_commalist COMMA operation
## LR(1) items:
operation_commalist -> operation_commalist COMMA operation . [ ON COMMA ]
## Transitions:
## Reductions:
-- On ON reduce production operation_commalist -> operation_commalist COMMA operation
-- On COMMA reduce production operation_commalist -> operation_commalist COMMA operation

State 368:
## Known stack suffix:
## operation
## LR(1) items:
operation_commalist -> operation . [ ON COMMA ]
## Transitions:
## Reductions:
-- On ON reduce production operation_commalist -> operation
-- On COMMA reduce production operation_commalist -> operation

State 369:
## Known stack suffix:
## CREATE
## LR(1) items:
base_table_def -> CREATE . TABLE table LPAREN base_table_element_commalist RPAREN [ # ]
schema -> CREATE . SCHEMA AUTHORIZATION user opt_schema_element_list [ # ]
view_def -> CREATE . VIEW table opt_column_commalist AS select_exp opt_with_check_option [ # ]
## Transitions:
-- On VIEW shift to state 370
-- On TABLE shift to state 379
-- On SCHEMA shift to state 434
## Reductions:

State 370:
## Known stack suffix:
## CREATE VIEW
## LR(1) items:
view_def -> CREATE VIEW . table opt_column_commalist AS select_exp opt_with_check_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On IDENT shift to state 11
-- On table shift to state 371
## Reductions:

State 371:
## Known stack suffix:
## CREATE VIEW table
## LR(1) items:
view_def -> CREATE VIEW table . opt_column_commalist AS select_exp opt_with_check_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On LPAREN shift to state 256
-- On opt_column_commalist shift to state 372
## Reductions:
-- On AS reduce production opt_column_commalist ->

State 372:
## Known stack suffix:
## CREATE VIEW table opt_column_commalist
## LR(1) items:
view_def -> CREATE VIEW table opt_column_commalist . AS select_exp opt_with_check_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On AS shift to state 373
## Reductions:

State 373:
## Known stack suffix:
## CREATE VIEW table opt_column_commalist AS
## LR(1) items:
view_def -> CREATE VIEW table opt_column_commalist AS . select_exp opt_with_check_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On SELECT shift to state 79
-- On select_exp shift to state 374
## Reductions:

State 374:
## Known stack suffix:
## CREATE VIEW table opt_column_commalist AS select_exp
## LR(1) items:
view_def -> CREATE VIEW table opt_column_commalist AS select_exp . opt_with_check_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On WITH shift to state 375
-- On opt_with_check_option shift to state 378
## Reductions:
-- On SEMICOLON reduce production opt_with_check_option ->
-- On GRANT reduce production opt_with_check_option ->
-- On EOF reduce production opt_with_check_option ->
-- On CREATE reduce production opt_with_check_option ->

State 375:
## Known stack suffix:
## WITH
## LR(1) items:
opt_with_check_option -> WITH . CHECK OPTION [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On CHECK shift to state 376
## Reductions:

State 376:
## Known stack suffix:
## WITH CHECK
## LR(1) items:
opt_with_check_option -> WITH CHECK . OPTION [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On OPTION shift to state 377
## Reductions:

State 377:
## Known stack suffix:
## WITH CHECK OPTION
## LR(1) items:
opt_with_check_option -> WITH CHECK OPTION . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production opt_with_check_option -> WITH CHECK OPTION
-- On GRANT reduce production opt_with_check_option -> WITH CHECK OPTION
-- On EOF reduce production opt_with_check_option -> WITH CHECK OPTION
-- On CREATE reduce production opt_with_check_option -> WITH CHECK OPTION

State 378:
## Known stack suffix:
## CREATE VIEW table opt_column_commalist AS select_exp opt_with_check_option
## LR(1) items:
view_def -> CREATE VIEW table opt_column_commalist AS select_exp opt_with_check_option . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production view_def -> CREATE VIEW table opt_column_commalist AS select_exp opt_with_check_option
-- On GRANT reduce production view_def -> CREATE VIEW table opt_column_commalist AS select_exp opt_with_check_option
-- On EOF reduce production view_def -> CREATE VIEW table opt_column_commalist AS select_exp opt_with_check_option
-- On CREATE reduce production view_def -> CREATE VIEW table opt_column_commalist AS select_exp opt_with_check_option

State 379:
## Known stack suffix:
## CREATE TABLE
## LR(1) items:
base_table_def -> CREATE TABLE . table LPAREN base_table_element_commalist RPAREN [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On IDENT shift to state 11
-- On table shift to state 380
## Reductions:

State 380:
## Known stack suffix:
## CREATE TABLE table
## LR(1) items:
base_table_def -> CREATE TABLE table . LPAREN base_table_element_commalist RPAREN [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On LPAREN shift to state 381
## Reductions:

State 381:
## Known stack suffix:
## CREATE TABLE table LPAREN
## LR(1) items:
base_table_def -> CREATE TABLE table LPAREN . base_table_element_commalist RPAREN [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On UNIQUE shift to state 382
-- On PRIMARY shift to state 386
-- On IDENT shift to state 14
-- On FOREIGN shift to state 391
-- On CHECK shift to state 401
-- On table_constraint_def shift to state 405
-- On column_def shift to state 406
-- On column shift to state 407
-- On base_table_element_commalist shift to state 429
-- On base_table_element shift to state 433
## Reductions:

State 382:
## Known stack suffix:
## UNIQUE
## LR(1) items:
table_constraint_def -> UNIQUE . LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 383
## Reductions:

State 383:
## Known stack suffix:
## UNIQUE LPAREN
## LR(1) items:
table_constraint_def -> UNIQUE LPAREN . column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On IDENT shift to state 14
-- On column_commalist shift to state 384
-- On column shift to state 261
## Reductions:

State 384:
## Known stack suffix:
## UNIQUE LPAREN column_commalist
## LR(1) items:
column_commalist -> column_commalist . COMMA column [ RPAREN COMMA ]
table_constraint_def -> UNIQUE LPAREN column_commalist . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 385
-- On COMMA shift to state 259
## Reductions:

State 385:
## Known stack suffix:
## UNIQUE LPAREN column_commalist RPAREN
## LR(1) items:
table_constraint_def -> UNIQUE LPAREN column_commalist RPAREN . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production table_constraint_def -> UNIQUE LPAREN column_commalist RPAREN
-- On COMMA reduce production table_constraint_def -> UNIQUE LPAREN column_commalist RPAREN

State 386:
## Known stack suffix:
## PRIMARY
## LR(1) items:
table_constraint_def -> PRIMARY . KEY LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On KEY shift to state 387
## Reductions:

State 387:
## Known stack suffix:
## PRIMARY KEY
## LR(1) items:
table_constraint_def -> PRIMARY KEY . LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 388
## Reductions:

State 388:
## Known stack suffix:
## PRIMARY KEY LPAREN
## LR(1) items:
table_constraint_def -> PRIMARY KEY LPAREN . column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On IDENT shift to state 14
-- On column_commalist shift to state 389
-- On column shift to state 261
## Reductions:

State 389:
## Known stack suffix:
## PRIMARY KEY LPAREN column_commalist
## LR(1) items:
column_commalist -> column_commalist . COMMA column [ RPAREN COMMA ]
table_constraint_def -> PRIMARY KEY LPAREN column_commalist . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 390
-- On COMMA shift to state 259
## Reductions:

State 390:
## Known stack suffix:
## PRIMARY KEY LPAREN column_commalist RPAREN
## LR(1) items:
table_constraint_def -> PRIMARY KEY LPAREN column_commalist RPAREN . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production table_constraint_def -> PRIMARY KEY LPAREN column_commalist RPAREN
-- On COMMA reduce production table_constraint_def -> PRIMARY KEY LPAREN column_commalist RPAREN

State 391:
## Known stack suffix:
## FOREIGN
## LR(1) items:
table_constraint_def -> FOREIGN . KEY LPAREN column_commalist RPAREN REFERENCES table [ RPAREN COMMA ]
table_constraint_def -> FOREIGN . KEY LPAREN column_commalist RPAREN REFERENCES table LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On KEY shift to state 392
## Reductions:

State 392:
## Known stack suffix:
## FOREIGN KEY
## LR(1) items:
table_constraint_def -> FOREIGN KEY . LPAREN column_commalist RPAREN REFERENCES table [ RPAREN COMMA ]
table_constraint_def -> FOREIGN KEY . LPAREN column_commalist RPAREN REFERENCES table LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 393
## Reductions:

State 393:
## Known stack suffix:
## FOREIGN KEY LPAREN
## LR(1) items:
table_constraint_def -> FOREIGN KEY LPAREN . column_commalist RPAREN REFERENCES table [ RPAREN COMMA ]
table_constraint_def -> FOREIGN KEY LPAREN . column_commalist RPAREN REFERENCES table LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On IDENT shift to state 14
-- On column_commalist shift to state 394
-- On column shift to state 261
## Reductions:

State 394:
## Known stack suffix:
## FOREIGN KEY LPAREN column_commalist
## LR(1) items:
column_commalist -> column_commalist . COMMA column [ RPAREN COMMA ]
table_constraint_def -> FOREIGN KEY LPAREN column_commalist . RPAREN REFERENCES table [ RPAREN COMMA ]
table_constraint_def -> FOREIGN KEY LPAREN column_commalist . RPAREN REFERENCES table LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 395
-- On COMMA shift to state 259
## Reductions:

State 395:
## Known stack suffix:
## FOREIGN KEY LPAREN column_commalist RPAREN
## LR(1) items:
table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN . REFERENCES table [ RPAREN COMMA ]
table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN . REFERENCES table LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On REFERENCES shift to state 396
## Reductions:

State 396:
## Known stack suffix:
## FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES
## LR(1) items:
table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES . table [ RPAREN COMMA ]
table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES . table LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On IDENT shift to state 11
-- On table shift to state 397
## Reductions:

State 397:
## Known stack suffix:
## FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table
## LR(1) items:
table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table . [ RPAREN COMMA ]
table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table . LPAREN column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 398
## Reductions:
-- On RPAREN reduce production table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table
-- On COMMA reduce production table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table

State 398:
## Known stack suffix:
## FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table LPAREN
## LR(1) items:
table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table LPAREN . column_commalist RPAREN [ RPAREN COMMA ]
## Transitions:
-- On IDENT shift to state 14
-- On column_commalist shift to state 399
-- On column shift to state 261
## Reductions:

State 399:
## Known stack suffix:
## FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table LPAREN column_commalist
## LR(1) items:
column_commalist -> column_commalist . COMMA column [ RPAREN COMMA ]
table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table LPAREN column_commalist . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 400
-- On COMMA shift to state 259
## Reductions:

State 400:
## Known stack suffix:
## FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table LPAREN column_commalist RPAREN
## LR(1) items:
table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table LPAREN column_commalist RPAREN . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table LPAREN column_commalist RPAREN
-- On COMMA reduce production table_constraint_def -> FOREIGN KEY LPAREN column_commalist RPAREN REFERENCES table LPAREN column_commalist RPAREN

State 401:
## Known stack suffix:
## CHECK
## LR(1) items:
table_constraint_def -> CHECK . LPAREN search_condition RPAREN [ RPAREN COMMA ]
## Transitions:
-- On LPAREN shift to state 402
## Reductions:

State 402:
## Known stack suffix:
## CHECK LPAREN
## LR(1) items:
table_constraint_def -> CHECK LPAREN . search_condition RPAREN [ RPAREN COMMA ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 403
-- On scalar_exp shift to state 102
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 403:
## Known stack suffix:
## CHECK LPAREN search_condition
## LR(1) items:
search_condition -> search_condition . OR search_condition [ RPAREN OR AND ]
search_condition -> search_condition . AND search_condition [ RPAREN OR AND ]
table_constraint_def -> CHECK LPAREN search_condition . RPAREN [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 404
-- On OR shift to state 98
-- On AND shift to state 100
## Reductions:

State 404:
## Known stack suffix:
## CHECK LPAREN search_condition RPAREN
## LR(1) items:
table_constraint_def -> CHECK LPAREN search_condition RPAREN . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production table_constraint_def -> CHECK LPAREN search_condition RPAREN
-- On COMMA reduce production table_constraint_def -> CHECK LPAREN search_condition RPAREN

State 405:
## Known stack suffix:
## table_constraint_def
## LR(1) items:
base_table_element -> table_constraint_def . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production base_table_element -> table_constraint_def
-- On COMMA reduce production base_table_element -> table_constraint_def

State 406:
## Known stack suffix:
## column_def
## LR(1) items:
base_table_element -> column_def . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production base_table_element -> column_def
-- On COMMA reduce production base_table_element -> column_def

State 407:
## Known stack suffix:
## column
## LR(1) items:
column_def -> column . data_type column_def_opt_list [ RPAREN COMMA ]
## Transitions:
-- On SMALLINT shift to state 306
-- On REAL shift to state 307
-- On NUMERIC shift to state 308
-- On INTEGER shift to state 315
-- On FLOAT shift to state 316
-- On DOUBLE shift to state 320
-- On DECIMAL shift to state 322
-- On CHARACTER shift to state 329
-- On data_type shift to state 408
## Reductions:

State 408:
## Known stack suffix:
## column data_type
## LR(1) items:
column_def -> column data_type . column_def_opt_list [ RPAREN COMMA ]
## Transitions:
-- On column_def_opt_list shift to state 409
## Reductions:
-- On RPAREN reduce production column_def_opt_list ->
-- On REFERENCES reduce production column_def_opt_list ->
-- On NOT reduce production column_def_opt_list ->
-- On DEFAULT reduce production column_def_opt_list ->
-- On COMMA reduce production column_def_opt_list ->
-- On CHECK reduce production column_def_opt_list ->

State 409:
## Known stack suffix:
## column data_type column_def_opt_list
## LR(1) items:
column_def -> column data_type column_def_opt_list . [ RPAREN COMMA ]
column_def_opt_list -> column_def_opt_list . column_def_opt [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On REFERENCES shift to state 410
-- On NOT shift to state 415
-- On DEFAULT shift to state 420
-- On CHECK shift to state 424
-- On column_def_opt shift to state 428
## Reductions:
-- On RPAREN reduce production column_def -> column data_type column_def_opt_list
-- On COMMA reduce production column_def -> column data_type column_def_opt_list

State 410:
## Known stack suffix:
## REFERENCES
## LR(1) items:
column_def_opt -> REFERENCES . table [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
column_def_opt -> REFERENCES . table LPAREN column_commalist RPAREN [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On IDENT shift to state 11
-- On table shift to state 411
## Reductions:

State 411:
## Known stack suffix:
## REFERENCES table
## LR(1) items:
column_def_opt -> REFERENCES table . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
column_def_opt -> REFERENCES table . LPAREN column_commalist RPAREN [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On LPAREN shift to state 412
## Reductions:
-- On RPAREN reduce production column_def_opt -> REFERENCES table
-- On REFERENCES reduce production column_def_opt -> REFERENCES table
-- On NOT reduce production column_def_opt -> REFERENCES table
-- On DEFAULT reduce production column_def_opt -> REFERENCES table
-- On COMMA reduce production column_def_opt -> REFERENCES table
-- On CHECK reduce production column_def_opt -> REFERENCES table

State 412:
## Known stack suffix:
## REFERENCES table LPAREN
## LR(1) items:
column_def_opt -> REFERENCES table LPAREN . column_commalist RPAREN [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On IDENT shift to state 14
-- On column_commalist shift to state 413
-- On column shift to state 261
## Reductions:

State 413:
## Known stack suffix:
## REFERENCES table LPAREN column_commalist
## LR(1) items:
column_commalist -> column_commalist . COMMA column [ RPAREN COMMA ]
column_def_opt -> REFERENCES table LPAREN column_commalist . RPAREN [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On RPAREN shift to state 414
-- On COMMA shift to state 259
## Reductions:

State 414:
## Known stack suffix:
## REFERENCES table LPAREN column_commalist RPAREN
## LR(1) items:
column_def_opt -> REFERENCES table LPAREN column_commalist RPAREN . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_def_opt -> REFERENCES table LPAREN column_commalist RPAREN
-- On REFERENCES reduce production column_def_opt -> REFERENCES table LPAREN column_commalist RPAREN
-- On NOT reduce production column_def_opt -> REFERENCES table LPAREN column_commalist RPAREN
-- On DEFAULT reduce production column_def_opt -> REFERENCES table LPAREN column_commalist RPAREN
-- On COMMA reduce production column_def_opt -> REFERENCES table LPAREN column_commalist RPAREN
-- On CHECK reduce production column_def_opt -> REFERENCES table LPAREN column_commalist RPAREN

State 415:
## Known stack suffix:
## NOT
## LR(1) items:
column_def_opt -> NOT . NULL [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
column_def_opt -> NOT . NULL UNIQUE [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
column_def_opt -> NOT . NULL PRIMARY KEY [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On NULL shift to state 416
## Reductions:

State 416:
## Known stack suffix:
## NOT NULL
## LR(1) items:
column_def_opt -> NOT NULL . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
column_def_opt -> NOT NULL . UNIQUE [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
column_def_opt -> NOT NULL . PRIMARY KEY [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On UNIQUE shift to state 417
-- On PRIMARY shift to state 418
## Reductions:
-- On RPAREN reduce production column_def_opt -> NOT NULL
-- On REFERENCES reduce production column_def_opt -> NOT NULL
-- On NOT reduce production column_def_opt -> NOT NULL
-- On DEFAULT reduce production column_def_opt -> NOT NULL
-- On COMMA reduce production column_def_opt -> NOT NULL
-- On CHECK reduce production column_def_opt -> NOT NULL

State 417:
## Known stack suffix:
## NOT NULL UNIQUE
## LR(1) items:
column_def_opt -> NOT NULL UNIQUE . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_def_opt -> NOT NULL UNIQUE
-- On REFERENCES reduce production column_def_opt -> NOT NULL UNIQUE
-- On NOT reduce production column_def_opt -> NOT NULL UNIQUE
-- On DEFAULT reduce production column_def_opt -> NOT NULL UNIQUE
-- On COMMA reduce production column_def_opt -> NOT NULL UNIQUE
-- On CHECK reduce production column_def_opt -> NOT NULL UNIQUE

State 418:
## Known stack suffix:
## NOT NULL PRIMARY
## LR(1) items:
column_def_opt -> NOT NULL PRIMARY . KEY [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On KEY shift to state 419
## Reductions:

State 419:
## Known stack suffix:
## NOT NULL PRIMARY KEY
## LR(1) items:
column_def_opt -> NOT NULL PRIMARY KEY . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_def_opt -> NOT NULL PRIMARY KEY
-- On REFERENCES reduce production column_def_opt -> NOT NULL PRIMARY KEY
-- On NOT reduce production column_def_opt -> NOT NULL PRIMARY KEY
-- On DEFAULT reduce production column_def_opt -> NOT NULL PRIMARY KEY
-- On COMMA reduce production column_def_opt -> NOT NULL PRIMARY KEY
-- On CHECK reduce production column_def_opt -> NOT NULL PRIMARY KEY

State 420:
## Known stack suffix:
## DEFAULT
## LR(1) items:
column_def_opt -> DEFAULT . literal [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
column_def_opt -> DEFAULT . NULL [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
column_def_opt -> DEFAULT . USER [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On USER shift to state 421
-- On STRING shift to state 19
-- On NULL shift to state 422
-- On INTNUM shift to state 25
-- On literal shift to state 423
## Reductions:

State 421:
## Known stack suffix:
## DEFAULT USER
## LR(1) items:
column_def_opt -> DEFAULT USER . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_def_opt -> DEFAULT USER
-- On REFERENCES reduce production column_def_opt -> DEFAULT USER
-- On NOT reduce production column_def_opt -> DEFAULT USER
-- On DEFAULT reduce production column_def_opt -> DEFAULT USER
-- On COMMA reduce production column_def_opt -> DEFAULT USER
-- On CHECK reduce production column_def_opt -> DEFAULT USER

State 422:
## Known stack suffix:
## DEFAULT NULL
## LR(1) items:
column_def_opt -> DEFAULT NULL . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_def_opt -> DEFAULT NULL
-- On REFERENCES reduce production column_def_opt -> DEFAULT NULL
-- On NOT reduce production column_def_opt -> DEFAULT NULL
-- On DEFAULT reduce production column_def_opt -> DEFAULT NULL
-- On COMMA reduce production column_def_opt -> DEFAULT NULL
-- On CHECK reduce production column_def_opt -> DEFAULT NULL

State 423:
## Known stack suffix:
## DEFAULT literal
## LR(1) items:
column_def_opt -> DEFAULT literal . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_def_opt -> DEFAULT literal
-- On REFERENCES reduce production column_def_opt -> DEFAULT literal
-- On NOT reduce production column_def_opt -> DEFAULT literal
-- On DEFAULT reduce production column_def_opt -> DEFAULT literal
-- On COMMA reduce production column_def_opt -> DEFAULT literal
-- On CHECK reduce production column_def_opt -> DEFAULT literal

State 424:
## Known stack suffix:
## CHECK
## LR(1) items:
column_def_opt -> CHECK . LPAREN search_condition RPAREN [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On LPAREN shift to state 425
## Reductions:

State 425:
## Known stack suffix:
## CHECK LPAREN
## LR(1) items:
column_def_opt -> CHECK LPAREN . search_condition RPAREN [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
-- On USER shift to state 17
-- On SUM shift to state 18
-- On STRING shift to state 19
-- On PLUS shift to state 20
-- On NOT shift to state 75
-- On MINUS shift to state 21
-- On MIN shift to state 22
-- On MAX shift to state 23
-- On LPAREN shift to state 76
-- On INTNUM shift to state 25
-- On IDENT shift to state 26
-- On EXISTS shift to state 77
-- On COUNT shift to state 29
-- On COLON shift to state 30
-- On AVG shift to state 32
-- On test_for_null shift to state 96
-- On search_condition shift to state 426
-- On scalar_exp shift to state 102
-- On predicate shift to state 147
-- On parameter_ref shift to state 36
-- On parameter shift to state 37
-- On literal shift to state 45
-- On like_predicate shift to state 148
-- On in_predicate shift to state 149
-- On function_ref shift to state 46
-- On existence_test shift to state 150
-- On comparison_predicate shift to state 151
-- On column_ref shift to state 152
-- On between_predicate shift to state 157
-- On atom shift to state 48
-- On ammsc shift to state 49
-- On all_or_any_predicate shift to state 158
## Reductions:

State 426:
## Known stack suffix:
## CHECK LPAREN search_condition
## LR(1) items:
column_def_opt -> CHECK LPAREN search_condition . RPAREN [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
search_condition -> search_condition . OR search_condition [ RPAREN OR AND ]
search_condition -> search_condition . AND search_condition [ RPAREN OR AND ]
## Transitions:
-- On RPAREN shift to state 427
-- On OR shift to state 98
-- On AND shift to state 100
## Reductions:

State 427:
## Known stack suffix:
## CHECK LPAREN search_condition RPAREN
## LR(1) items:
column_def_opt -> CHECK LPAREN search_condition RPAREN . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_def_opt -> CHECK LPAREN search_condition RPAREN
-- On REFERENCES reduce production column_def_opt -> CHECK LPAREN search_condition RPAREN
-- On NOT reduce production column_def_opt -> CHECK LPAREN search_condition RPAREN
-- On DEFAULT reduce production column_def_opt -> CHECK LPAREN search_condition RPAREN
-- On COMMA reduce production column_def_opt -> CHECK LPAREN search_condition RPAREN
-- On CHECK reduce production column_def_opt -> CHECK LPAREN search_condition RPAREN

State 428:
## Known stack suffix:
## column_def_opt_list column_def_opt
## LR(1) items:
column_def_opt_list -> column_def_opt_list column_def_opt . [ RPAREN REFERENCES NOT DEFAULT COMMA CHECK ]
## Transitions:
## Reductions:
-- On RPAREN reduce production column_def_opt_list -> column_def_opt_list column_def_opt
-- On REFERENCES reduce production column_def_opt_list -> column_def_opt_list column_def_opt
-- On NOT reduce production column_def_opt_list -> column_def_opt_list column_def_opt
-- On DEFAULT reduce production column_def_opt_list -> column_def_opt_list column_def_opt
-- On COMMA reduce production column_def_opt_list -> column_def_opt_list column_def_opt
-- On CHECK reduce production column_def_opt_list -> column_def_opt_list column_def_opt

State 429:
## Known stack suffix:
## CREATE TABLE table LPAREN base_table_element_commalist
## LR(1) items:
base_table_def -> CREATE TABLE table LPAREN base_table_element_commalist . RPAREN [ SEMICOLON GRANT EOF CREATE # ]
base_table_element_commalist -> base_table_element_commalist . COMMA base_table_element [ RPAREN COMMA ]
## Transitions:
-- On RPAREN shift to state 430
-- On COMMA shift to state 431
## Reductions:

State 430:
## Known stack suffix:
## CREATE TABLE table LPAREN base_table_element_commalist RPAREN
## LR(1) items:
base_table_def -> CREATE TABLE table LPAREN base_table_element_commalist RPAREN . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production base_table_def -> CREATE TABLE table LPAREN base_table_element_commalist RPAREN
-- On GRANT reduce production base_table_def -> CREATE TABLE table LPAREN base_table_element_commalist RPAREN
-- On EOF reduce production base_table_def -> CREATE TABLE table LPAREN base_table_element_commalist RPAREN
-- On CREATE reduce production base_table_def -> CREATE TABLE table LPAREN base_table_element_commalist RPAREN

State 431:
## Known stack suffix:
## base_table_element_commalist COMMA
## LR(1) items:
base_table_element_commalist -> base_table_element_commalist COMMA . base_table_element [ RPAREN COMMA ]
## Transitions:
-- On UNIQUE shift to state 382
-- On PRIMARY shift to state 386
-- On IDENT shift to state 14
-- On FOREIGN shift to state 391
-- On CHECK shift to state 401
-- On table_constraint_def shift to state 405
-- On column_def shift to state 406
-- On column shift to state 407
-- On base_table_element shift to state 432
## Reductions:

State 432:
## Known stack suffix:
## base_table_element_commalist COMMA base_table_element
## LR(1) items:
base_table_element_commalist -> base_table_element_commalist COMMA base_table_element . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production base_table_element_commalist -> base_table_element_commalist COMMA base_table_element
-- On COMMA reduce production base_table_element_commalist -> base_table_element_commalist COMMA base_table_element

State 433:
## Known stack suffix:
## base_table_element
## LR(1) items:
base_table_element_commalist -> base_table_element . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production base_table_element_commalist -> base_table_element
-- On COMMA reduce production base_table_element_commalist -> base_table_element

State 434:
## Known stack suffix:
## CREATE SCHEMA
## LR(1) items:
schema -> CREATE SCHEMA . AUTHORIZATION user opt_schema_element_list [ # ]
## Transitions:
-- On AUTHORIZATION shift to state 435
## Reductions:

State 435:
## Known stack suffix:
## CREATE SCHEMA AUTHORIZATION
## LR(1) items:
schema -> CREATE SCHEMA AUTHORIZATION . user opt_schema_element_list [ # ]
## Transitions:
-- On IDENT shift to state 217
-- On user shift to state 436
## Reductions:

State 436:
## Known stack suffix:
## CREATE SCHEMA AUTHORIZATION user
## LR(1) items:
schema -> CREATE SCHEMA AUTHORIZATION user . opt_schema_element_list [ # ]
## Transitions:
-- On GRANT shift to state 341
-- On CREATE shift to state 437
-- On view_def shift to state 438
-- On schema_element shift to state 439
-- On rev_schema_element_list shift to state 440
-- On privilege_def shift to state 442
-- On opt_schema_element_list shift to state 444
-- On base_table_def shift to state 443
## Reductions:

State 437:
## Known stack suffix:
## CREATE
## LR(1) items:
base_table_def -> CREATE . TABLE table LPAREN base_table_element_commalist RPAREN [ SEMICOLON GRANT EOF CREATE # ]
view_def -> CREATE . VIEW table opt_column_commalist AS select_exp opt_with_check_option [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
-- On VIEW shift to state 370
-- On TABLE shift to state 379
## Reductions:

State 438:
## Known stack suffix:
## view_def
## LR(1) items:
schema_element -> view_def . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production schema_element -> view_def
-- On GRANT reduce production schema_element -> view_def
-- On EOF reduce production schema_element -> view_def
-- On CREATE reduce production schema_element -> view_def

State 439:
## Known stack suffix:
## schema_element
## LR(1) items:
rev_schema_element_list -> schema_element . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production rev_schema_element_list -> schema_element
-- On GRANT reduce production rev_schema_element_list -> schema_element
-- On EOF reduce production rev_schema_element_list -> schema_element
-- On CREATE reduce production rev_schema_element_list -> schema_element

State 440:
## Known stack suffix:
## rev_schema_element_list
## LR(1) items:
opt_schema_element_list -> rev_schema_element_list . [ # ]
rev_schema_element_list -> rev_schema_element_list . schema_element [ GRANT CREATE # ]
## Transitions:
-- On GRANT shift to state 341
-- On CREATE shift to state 437
-- On view_def shift to state 438
-- On schema_element shift to state 441
-- On privilege_def shift to state 442
-- On base_table_def shift to state 443
## Reductions:

State 441:
## Known stack suffix:
## rev_schema_element_list schema_element
## LR(1) items:
rev_schema_element_list -> rev_schema_element_list schema_element . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production rev_schema_element_list -> rev_schema_element_list schema_element
-- On GRANT reduce production rev_schema_element_list -> rev_schema_element_list schema_element
-- On EOF reduce production rev_schema_element_list -> rev_schema_element_list schema_element
-- On CREATE reduce production rev_schema_element_list -> rev_schema_element_list schema_element

State 442:
## Known stack suffix:
## privilege_def
## LR(1) items:
schema_element -> privilege_def . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production schema_element -> privilege_def
-- On GRANT reduce production schema_element -> privilege_def
-- On EOF reduce production schema_element -> privilege_def
-- On CREATE reduce production schema_element -> privilege_def

State 443:
## Known stack suffix:
## base_table_def
## LR(1) items:
schema_element -> base_table_def . [ SEMICOLON GRANT EOF CREATE # ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production schema_element -> base_table_def
-- On GRANT reduce production schema_element -> base_table_def
-- On EOF reduce production schema_element -> base_table_def
-- On CREATE reduce production schema_element -> base_table_def

State 444:
## Known stack suffix:
## CREATE SCHEMA AUTHORIZATION user opt_schema_element_list
## LR(1) items:
schema -> CREATE SCHEMA AUTHORIZATION user opt_schema_element_list . [ # ]
## Transitions:
## Reductions:
-- On # reduce production schema -> CREATE SCHEMA AUTHORIZATION user opt_schema_element_list

State 445:
## Known stack suffix:
## schema_element
## LR(1) items:
cmd -> schema_element . [ # ]
## Transitions:
## Reductions:
-- On # reduce production cmd -> schema_element

State 446:
## Known stack suffix:
## schema
## LR(1) items:
cmd -> schema . [ # ]
## Transitions:
## Reductions:
-- On # reduce production cmd -> schema

State 447:
## Known stack suffix:
## module_def
## LR(1) items:
cmd -> module_def . [ # ]
## Transitions:
## Reductions:
-- On # reduce production cmd -> module_def

State 448:
## Known stack suffix:
## manipulative_statement
## LR(1) items:
cmd -> manipulative_statement . [ # ]
## Transitions:
## Reductions:
-- On # reduce production cmd -> manipulative_statement

State 449:
## Known stack suffix:
## cmd
## LR(1) items:
cmd' -> cmd . [ # ]
## Transitions:
## Reductions:
-- On # accept cmd

State 450:
## Known stack suffix:
##
## LR(1) items:
full_select' -> . full_select [ # ]
## Transitions:
-- On SELECT shift to state 79
-- On select_exp shift to state 451
-- On full_select shift to state 456
## Reductions:

State 451:
## Known stack suffix:
## select_exp
## LR(1) items:
full_select -> select_exp . opt_order_by_clause endsql [ # ]
## Transitions:
-- On ORDER shift to state 233
-- On opt_order_by_clause shift to state 452
## Reductions:
-- On SEMICOLON reduce production opt_order_by_clause ->
-- On EOF reduce production opt_order_by_clause ->

State 452:
## Known stack suffix:
## select_exp opt_order_by_clause
## LR(1) items:
full_select -> select_exp opt_order_by_clause . endsql [ # ]
## Transitions:
-- On SEMICOLON shift to state 453
-- On EOF shift to state 454
-- On endsql shift to state 455
## Reductions:

State 453:
## Known stack suffix:
## SEMICOLON
## LR(1) items:
endsql -> SEMICOLON . [ # ]
## Transitions:
## Reductions:
-- On # reduce production endsql -> SEMICOLON

State 454:
## Known stack suffix:
## EOF
## LR(1) items:
endsql -> EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production endsql -> EOF

State 455:
## Known stack suffix:
## select_exp opt_order_by_clause endsql
## LR(1) items:
full_select -> select_exp opt_order_by_clause endsql . [ # ]
## Transitions:
## Reductions:
-- On # reduce production full_select -> select_exp opt_order_by_clause endsql

State 456:
## Known stack suffix:
## full_select
## LR(1) items:
full_select' -> full_select . [ # ]
## Transitions:
## Reductions:
-- On # accept full_select

State 457:
## Known stack suffix:
##
## LR(1) items:
query' -> . query [ # ]
## Transitions:
-- On SELECT shift to state 79
-- On LPAREN shift to state 223
-- On select_exp shift to state 224
-- On query_term shift to state 225
-- On query_exp shift to state 458
-- On query shift to state 461
## Reductions:

State 458:
## Known stack suffix:
## query_exp
## LR(1) items:
query -> query_exp . opt_order_by_clause endsql [ # ]
query_exp -> query_exp . UNION query_term [ UNION SEMICOLON ORDER EOF ]
query_exp -> query_exp . UNION ALL query_term [ UNION SEMICOLON ORDER EOF ]
## Transitions:
-- On UNION shift to state 227
-- On ORDER shift to state 233
-- On opt_order_by_clause shift to state 459
## Reductions:
-- On SEMICOLON reduce production opt_order_by_clause ->
-- On EOF reduce production opt_order_by_clause ->

State 459:
## Known stack suffix:
## query_exp opt_order_by_clause
## LR(1) items:
query -> query_exp opt_order_by_clause . endsql [ # ]
## Transitions:
-- On SEMICOLON shift to state 453
-- On EOF shift to state 454
-- On endsql shift to state 460
## Reductions:

State 460:
## Known stack suffix:
## query_exp opt_order_by_clause endsql
## LR(1) items:
query -> query_exp opt_order_by_clause endsql . [ # ]
## Transitions:
## Reductions:
-- On # reduce production query -> query_exp opt_order_by_clause endsql

State 461:
## Known stack suffix:
## query
## LR(1) items:
query' -> query . [ # ]
## Transitions:
## Reductions:
-- On # accept query

State 462:
## Known stack suffix:
##
## LR(1) items:
sql_cmd_list' -> . sql_cmd_list [ # ]
## Transitions:
-- On WHENEVER shift to state 463
-- On UPDATE shift to state 10
-- On SELECT shift to state 189
-- On ROLLBACK shift to state 199
-- On OPEN shift to state 201
-- On MODULE shift to state 472
-- On INSERT shift to state 253
-- On GRANT shift to state 341
-- On FETCH shift to state 274
-- On DELETE shift to state 278
-- On CREATE shift to state 480
-- On COMMIT shift to state 286
-- On CLOSE shift to state 288
-- On view_def shift to state 438
-- On update_statement_searched shift to state 290
-- On update_statement_positioned shift to state 291
-- On sql_cmd_list shift to state 486
-- On select_statement shift to state 292
-- On schema_element shift to state 487
-- On schema shift to state 488
-- On rollback_statement shift to state 293
-- On privilege_def shift to state 442
-- On open_statement shift to state 294
-- On module_def shift to state 489
-- On manipulative_statement shift to state 490
-- On insert_statement shift to state 297
-- On fetch_statement shift to state 298
-- On delete_statement_searched shift to state 299
-- On delete_statement_positioned shift to state 300
-- On commit_statement shift to state 301
-- On cmd shift to state 491
-- On close_statement shift to state 302
-- On base_table_def shift to state 443
## Reductions:

State 463:
## Known stack suffix:
## WHENEVER
## LR(1) items:
cmd -> WHENEVER . NOT FOUND when_action [ SEMICOLON EOF ]
cmd -> WHENEVER . SQLERROR when_action [ SEMICOLON EOF ]
## Transitions:
-- On SQLERROR shift to state 464
-- On NOT shift to state 469
## Reductions:

State 464:
## Known stack suffix:
## WHENEVER SQLERROR
## LR(1) items:
cmd -> WHENEVER SQLERROR . when_action [ SEMICOLON EOF ]
## Transitions:
-- On GOTO shift to state 465
-- On CONTINUE shift to state 467
-- On when_action shift to state 468
## Reductions:

State 465:
## Known stack suffix:
## GOTO
## LR(1) items:
when_action -> GOTO . IDENT [ SEMICOLON EOF ]
## Transitions:
-- On IDENT shift to state 466
## Reductions:

State 466:
## Known stack suffix:
## GOTO IDENT
## LR(1) items:
when_action -> GOTO IDENT . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production when_action -> GOTO IDENT
-- On EOF reduce production when_action -> GOTO IDENT

State 467:
## Known stack suffix:
## CONTINUE
## LR(1) items:
when_action -> CONTINUE . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production when_action -> CONTINUE
-- On EOF reduce production when_action -> CONTINUE

State 468:
## Known stack suffix:
## WHENEVER SQLERROR when_action
## LR(1) items:
cmd -> WHENEVER SQLERROR when_action . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production cmd -> WHENEVER SQLERROR when_action
-- On EOF reduce production cmd -> WHENEVER SQLERROR when_action

State 469:
## Known stack suffix:
## WHENEVER NOT
## LR(1) items:
cmd -> WHENEVER NOT . FOUND when_action [ SEMICOLON EOF ]
## Transitions:
-- On FOUND shift to state 470
## Reductions:

State 470:
## Known stack suffix:
## WHENEVER NOT FOUND
## LR(1) items:
cmd -> WHENEVER NOT FOUND . when_action [ SEMICOLON EOF ]
## Transitions:
-- On GOTO shift to state 465
-- On CONTINUE shift to state 467
-- On when_action shift to state 471
## Reductions:

State 471:
## Known stack suffix:
## WHENEVER NOT FOUND when_action
## LR(1) items:
cmd -> WHENEVER NOT FOUND when_action . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production cmd -> WHENEVER NOT FOUND when_action
-- On EOF reduce production cmd -> WHENEVER NOT FOUND when_action

State 472:
## Known stack suffix:
## MODULE
## LR(1) items:
module_def -> MODULE . opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list [ SEMICOLON EOF ]
## Transitions:
-- On IDENT shift to state 204
-- On sqlmodule shift to state 205
-- On opt_module shift to state 473
## Reductions:
-- On LANGUAGE reduce production opt_module ->

State 473:
## Known stack suffix:
## MODULE opt_module
## LR(1) items:
module_def -> MODULE opt_module . LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list [ SEMICOLON EOF ]
## Transitions:
-- On LANGUAGE shift to state 474
## Reductions:

State 474:
## Known stack suffix:
## MODULE opt_module LANGUAGE
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE . lang AUTHORIZATION user opt_cursor_def_list procedure_def_list [ SEMICOLON EOF ]
## Transitions:
-- On PLI shift to state 208
-- On PASCAL shift to state 209
-- On OCAML shift to state 210
-- On FORTRAN shift to state 211
-- On COBOL shift to state 212
-- On C shift to state 213
-- On ADA shift to state 214
-- On lang shift to state 475
## Reductions:

State 475:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang . AUTHORIZATION user opt_cursor_def_list procedure_def_list [ SEMICOLON EOF ]
## Transitions:
-- On AUTHORIZATION shift to state 476
## Reductions:

State 476:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang AUTHORIZATION
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION . user opt_cursor_def_list procedure_def_list [ SEMICOLON EOF ]
## Transitions:
-- On IDENT shift to state 217
-- On user shift to state 477
## Reductions:

State 477:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang AUTHORIZATION user
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION user . opt_cursor_def_list procedure_def_list [ SEMICOLON EOF ]
## Transitions:
-- On DECLARE shift to state 219
-- On opt_cursor_def_list shift to state 478
-- On cursor_def_list shift to state 338
-- On cursor_def shift to state 340
## Reductions:
-- On PROCEDURE reduce production opt_cursor_def_list ->

State 478:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list . procedure_def_list [ SEMICOLON EOF ]
## Transitions:
-- On PROCEDURE shift to state 247
-- On procedure_def_list shift to state 479
-- On procedure_def shift to state 337
## Reductions:

State 479:
## Known stack suffix:
## MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list
## LR(1) items:
module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list . [ SEMICOLON EOF ]
procedure_def_list -> procedure_def_list . procedure_def [ SEMICOLON PROCEDURE EOF ]
## Transitions:
-- On PROCEDURE shift to state 247
-- On procedure_def shift to state 336
## Reductions:
-- On SEMICOLON reduce production module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list
-- On EOF reduce production module_def -> MODULE opt_module LANGUAGE lang AUTHORIZATION user opt_cursor_def_list procedure_def_list

State 480:
## Known stack suffix:
## CREATE
## LR(1) items:
base_table_def -> CREATE . TABLE table LPAREN base_table_element_commalist RPAREN [ SEMICOLON EOF ]
schema -> CREATE . SCHEMA AUTHORIZATION user opt_schema_element_list [ SEMICOLON EOF ]
view_def -> CREATE . VIEW table opt_column_commalist AS select_exp opt_with_check_option [ SEMICOLON EOF ]
## Transitions:
-- On VIEW shift to state 370
-- On TABLE shift to state 379
-- On SCHEMA shift to state 481
## Reductions:

State 481:
## Known stack suffix:
## CREATE SCHEMA
## LR(1) items:
schema -> CREATE SCHEMA . AUTHORIZATION user opt_schema_element_list [ SEMICOLON EOF ]
## Transitions:
-- On AUTHORIZATION shift to state 482
## Reductions:

State 482:
## Known stack suffix:
## CREATE SCHEMA AUTHORIZATION
## LR(1) items:
schema -> CREATE SCHEMA AUTHORIZATION . user opt_schema_element_list [ SEMICOLON EOF ]
## Transitions:
-- On IDENT shift to state 217
-- On user shift to state 483
## Reductions:

State 483:
## Known stack suffix:
## CREATE SCHEMA AUTHORIZATION user
## LR(1) items:
schema -> CREATE SCHEMA AUTHORIZATION user . opt_schema_element_list [ SEMICOLON EOF ]
## Transitions:
-- On GRANT shift to state 341
-- On CREATE shift to state 437
-- On view_def shift to state 438
-- On schema_element shift to state 439
-- On rev_schema_element_list shift to state 484
-- On privilege_def shift to state 442
-- On opt_schema_element_list shift to state 485
-- On base_table_def shift to state 443
## Reductions:
-- On SEMICOLON reduce production opt_schema_element_list ->
-- On EOF reduce production opt_schema_element_list ->

State 484:
## Known stack suffix:
## rev_schema_element_list
## LR(1) items:
opt_schema_element_list -> rev_schema_element_list . [ SEMICOLON EOF ]
rev_schema_element_list -> rev_schema_element_list . schema_element [ SEMICOLON GRANT EOF CREATE ]
## Transitions:
-- On GRANT shift to state 341
-- On CREATE shift to state 437
-- On view_def shift to state 438
-- On schema_element shift to state 441
-- On privilege_def shift to state 442
-- On base_table_def shift to state 443
## Reductions:
-- On SEMICOLON reduce production opt_schema_element_list -> rev_schema_element_list
-- On EOF reduce production opt_schema_element_list -> rev_schema_element_list

State 485:
## Known stack suffix:
## CREATE SCHEMA AUTHORIZATION user opt_schema_element_list
## LR(1) items:
schema -> CREATE SCHEMA AUTHORIZATION user opt_schema_element_list . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production schema -> CREATE SCHEMA AUTHORIZATION user opt_schema_element_list
-- On EOF reduce production schema -> CREATE SCHEMA AUTHORIZATION user opt_schema_element_list

State 486:
## Known stack suffix:
## sql_cmd_list
## LR(1) items:
sql_cmd_list' -> sql_cmd_list . [ # ]
## Transitions:
## Reductions:
-- On # accept sql_cmd_list

State 487:
## Known stack suffix:
## schema_element
## LR(1) items:
cmd -> schema_element . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production cmd -> schema_element
-- On EOF reduce production cmd -> schema_element

State 488:
## Known stack suffix:
## schema
## LR(1) items:
cmd -> schema . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production cmd -> schema
-- On EOF reduce production cmd -> schema

State 489:
## Known stack suffix:
## module_def
## LR(1) items:
cmd -> module_def . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production cmd -> module_def
-- On EOF reduce production cmd -> module_def

State 490:
## Known stack suffix:
## manipulative_statement
## LR(1) items:
cmd -> manipulative_statement . [ SEMICOLON EOF ]
## Transitions:
## Reductions:
-- On SEMICOLON reduce production cmd -> manipulative_statement
-- On EOF reduce production cmd -> manipulative_statement

State 491:
## Known stack suffix:
## cmd
## LR(1) items:
sql_cmd_list -> cmd . endsql [ # ]
sql_cmd_list -> cmd . SEMICOLON sql_cmd_list [ # ]
## Transitions:
-- On SEMICOLON shift to state 492
-- On EOF shift to state 454
-- On endsql shift to state 494
## Reductions:

State 492:
## Known stack suffix:
## cmd SEMICOLON
## LR(1) items:
endsql -> SEMICOLON . [ # ]
sql_cmd_list -> cmd SEMICOLON . sql_cmd_list [ # ]
## Transitions:
-- On WHENEVER shift to state 463
-- On UPDATE shift to state 10
-- On SELECT shift to state 189
-- On ROLLBACK shift to state 199
-- On OPEN shift to state 201
-- On MODULE shift to state 472
-- On INSERT shift to state 253
-- On GRANT shift to state 341
-- On FETCH shift to state 274
-- On DELETE shift to state 278
-- On CREATE shift to state 480
-- On COMMIT shift to state 286
-- On CLOSE shift to state 288
-- On view_def shift to state 438
-- On update_statement_searched shift to state 290
-- On update_statement_positioned shift to state 291
-- On sql_cmd_list shift to state 493
-- On select_statement shift to state 292
-- On schema_element shift to state 487
-- On schema shift to state 488
-- On rollback_statement shift to state 293
-- On privilege_def shift to state 442
-- On open_statement shift to state 294
-- On module_def shift to state 489
-- On manipulative_statement shift to state 490
-- On insert_statement shift to state 297
-- On fetch_statement shift to state 298
-- On delete_statement_searched shift to state 299
-- On delete_statement_positioned shift to state 300
-- On commit_statement shift to state 301
-- On cmd shift to state 491
-- On close_statement shift to state 302
-- On base_table_def shift to state 443
## Reductions:

State 493:
## Known stack suffix:
## cmd SEMICOLON sql_cmd_list
## LR(1) items:
sql_cmd_list -> cmd SEMICOLON sql_cmd_list . [ # ]
## Transitions:
## Reductions:
-- On # reduce production sql_cmd_list -> cmd SEMICOLON sql_cmd_list

State 494:
## Known stack suffix:
## cmd endsql
## LR(1) items:
sql_cmd_list -> cmd endsql . [ # ]
## Transitions:
## Reductions:
-- On # reduce production sql_cmd_list -> cmd endsql

State 495:
## Known stack suffix:
##
## LR(1) items:
ugly_eof' -> . ugly_eof [ # ]
## Transitions:
-- On EOF shift to state 496
-- On ugly_eof shift to state 497
## Reductions:

State 496:
## Known stack suffix:
## EOF
## LR(1) items:
ugly_eof -> EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production ugly_eof -> EOF

State 497:
## Known stack suffix:
## ugly_eof
## LR(1) items:
ugly_eof' -> ugly_eof . [ # ]
## Transitions:
## Reductions:
-- On # accept ugly_eof

