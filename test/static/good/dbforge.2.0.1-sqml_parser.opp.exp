File "dbforge.2.0.1-sqml_parser.mly", line 43, characters 67-75:
Warning: the token FLOATNUM is unused.
%{
  open Sqml_sqlstx
  open Sqml_helper_lp
  open Printf
  open Parsing

  let parse_error s = (err ())#error s

  let normal_int = function `int i -> i | _ -> parse_error "absurd integer"

(* #load "parser.cmo" #load "lexer.cmo"; open Parser open Lexer;; *)
%}
%start cmd
%start full_select
%start query
%start sql_cmd_list
%start ugly_eof
%token ADA
%token ALL
%token AND
%token ANY
%token AS
%token ASC
%token AUTHORIZATION
%token AVG
%token BETWEEN
%token BY
%token C
%token CHARACTER
%token CHECK
%token CLOSE
%token COBOL
%token COLON
%token COMMA
%token COMMIT
%token < Sqml_sqlstx.comparison > COMPARISON
%token CONTINUE
%token COUNT
%token CREATE
%token CURRENT
%token CURSOR
%token DECIMAL
%token DECLARE
%token DEFAULT
%token DELETE
%token DESC
%token DISTINCT
%token DIV
%token DOT
%token DOUBLE
%token EOF
%token ESCAPE
%token EXISTS
%token FETCH
%token FLOAT
%token < [`float of int * int * float | `floattoomuch of string] > FLOATNUM
%token FOR
%token FOREIGN
%token FORTRAN
%token FOUND
%token FROM
%token GOTO
%token GRANT
%token GROUP
%token HAVING
%token < string > IDENT
%token IN
%token INDICATOR
%token INSERT
%token INTEGER
%token < [`int of int | `inttoomuch of string] > INTNUM
%token INTO
%token IS
%token KEY
%token LANGUAGE
%token LIKE
%token LPAREN
%token MAX
%token MIN
%token MINUS
%token MODULE
%token NOT
%token NULL
%token NUMERIC
%token OCAML
%token OF
%token ON
%token OPEN
%token OPTION
%token OR
%token ORDER
%token PASCAL
%token PLI
%token PLUS
%token PRECISION
%token PRIMARY
%token PRIVILEGES
%token PROCEDURE
%token PUBLIC
%token REAL
%token REFERENCES
%token ROLLBACK
%token RPAREN
%token SCHEMA
%token SELECT
%token SEMICOLON
%token SET
%token SMALLINT
%token SOME
%token SQLCODE
%token SQLERROR
%token < string > STRING
%token SUM
%token TABLE
%token TIMES
%token TO
%token UNION
%token UNIQUE
%token UPDATE
%token USER
%token VALUES
%token VIEW
%token WHENEVER
%token WHERE
%token WITH
%token WORK
%left OR
%left AND
%left NOT
%left COMPARISON
%left MINUS PLUS
%left DIV TIMES
%nonassoc UMINUS
%type < Sqml_sqlstx.cmd > cmd
%type < Sqml_sqlstx.select * Sqml_sqlstx.ordering list > full_select
%type < Sqml_sqlstx.query > query
%type < Sqml_sqlstx.cmd list > sql_cmd_list
%type < unit > ugly_eof
%%

ugly_eof:
  _1 = EOF
    {               ( () )}

query:
  _1 = query_exp _2 = opt_order_by_clause _3 = endsql
    {                                                    ( _1, _2 )}

full_select:
  _1 = select_exp _2 = opt_order_by_clause _3 = endsql
    {                                                         ( _1, _2 )}

endsql:
  _1 = EOF
    {                                                    ( )}
| _1 = SEMICOLON
    {                                                    ( )}

query_exp:
  _1 = query_term
    {                                      ( _1 )}
| _1 = query_exp _2 = UNION _3 = query_term
    {                                       ( `union (_1, _3) )}
| _1 = query_exp _2 = UNION _3 = ALL _4 = query_term
    {                                       ( `unionall (_1, _4) )}

query_term:
  _1 = select_exp
    {                                      ( `select _1 )}
| _1 = LPAREN _2 = query_exp _3 = RPAREN
    {                                       ( _2 )}

select_exp:
  _1 = SELECT _2 = opt_all_distinct _3 = selection _4 = table_exp
    {                                                 ( let a, b, c, d = _4 in _2, _3, a, b, c, d )}

selection:
  _1 = rev_scalar_exp_commalist
    {                                          ( `list (List.rev _1) )}
| _1 = TIMES
    {                                       ( `star )}

table_exp:
  _1 = from_clause _2 = opt_where_clause _3 = opt_group_by_clause _4 = opt_having_clause
    {                                                       ( _1, _2, _3, _4 )}

from_clause:
  _1 = FROM _2 = rev_table_ref_commalist
    {                                          ( List.rev _2 )}

rev_table_ref_commalist:
  _1 = table_ref
    {                                      ( [_1] )}
| _1 = rev_table_ref_commalist _2 = COMMA _3 = table_ref
    {                                           ( _3 :: _1 )}

table_ref:
  _1 = table
    {                                      ( `table _1 )}
| _1 = table _2 = AS _3 = IDENT
    {                                        ( `tableas (_1, _3) )}

table:
  _1 = IDENT
    {                                       ( _1 )}

where_clause:
  _1 = WHERE _2 = search_condition
    {                                      ( _2 )}

opt_where_clause:
  
    {                                      ( None )}
| _1 = where_clause
    {                                       ( Some _1 )}

opt_all_distinct:
  
    {                                      ( `nomod )}
| _1 = ALL
    {                                       ( `all )}
| _1 = DISTINCT
    {                                       ( `distinct )}

scalar_exp:
  _1 = scalar_exp _2 = PLUS _3 = scalar_exp
    {                                        ( `binop (`plus, _1, _3) )}
| _1 = scalar_exp _2 = MINUS _3 = scalar_exp
    {                                         ( `binop (`minus, _1, _3) )}
| _1 = scalar_exp _2 = TIMES _3 = scalar_exp
    {                                         ( `binop (`times, _1, _3) )}
| _1 = scalar_exp _2 = DIV _3 = scalar_exp
    {                                         ( `binop (`div, _1, _3) )}
| _1 = PLUS _2 = scalar_exp %prec UMINUS
    {                                         ( _2 )}
| _1 = MINUS _2 = scalar_exp %prec UMINUS
    {                                         ( `uminus _2 )}
| _1 = atom
    {                                         ( `atom _1 )}
| _1 = column_ref
    {                                         ( `column _1 )}
| _1 = function_ref
    {                                         ( `functioncall _1 )}
| _1 = LPAREN _2 = scalar_exp _3 = RPAREN
    {                                         ( _2 )}

rev_scalar_exp_commalist:
  _1 = scalar_exp
    {                                        ( [_1] )}
| _1 = rev_scalar_exp_commalist _2 = COMMA _3 = scalar_exp
    {                                             ( _3 :: _1 )}

atom:
  _1 = parameter_ref
    {                                        ( `parameter _1 )}
| _1 = literal
    {                                         ( (_1 :> atom) )}
| _1 = USER
    {                                         ( `user )}

parameter_ref:
  _1 = parameter
    {                                        ( `single _1 )}
| _1 = parameter _2 = COLON _3 = IDENT _4 = DOT _5 = IDENT
    {                                               ( `single_annotated (_1, _3, _5) )}
| _1 = parameter _2 = parameter
    {                                         ( `couple (_1, _2) )}
| _1 = parameter _2 = INDICATOR _3 = parameter
    {                                         ( `indicator (_1, _3) )}

function_ref:
  _1 = ammsc _2 = LPAREN _3 = TIMES _4 = RPAREN
    {                                            ( _1, `star )}
| _1 = ammsc _2 = LPAREN _3 = DISTINCT _4 = column_ref _5 = RPAREN
    {                                             ( _1, `distinct _4 )}
| _1 = ammsc _2 = LPAREN _3 = ALL _4 = scalar_exp _5 = RPAREN
    {                                             ( _1, `exp (`all, _4) )}
| _1 = ammsc _2 = LPAREN _3 = scalar_exp _4 = RPAREN
    {                                             ( _1, `exp (`nomod, _3) )}

ammsc:
  _1 = AVG
    {                       ( `avg )}
| _1 = MIN
    {                ( `min )}
| _1 = MAX
    {                ( `max )}
| _1 = SUM
    {                ( `sum )}
| _1 = COUNT
    {                ( `count )}
| _1 = IDENT
    {                ( `other _1 )}

literal:
  _1 = STRING
    {                  ( `string _1 )}
| _1 = INTNUM
    {                   ( _1 :> literal )}

opt_group_by_clause:
  
    {                                   ( None )}
| _1 = GROUP _2 = BY _3 = rev_column_ref_commalist
    {                                        ( Some (List.rev _3) )}

rev_column_ref_commalist:
  _1 = column_ref
    {                                         ( [_1] )}
| _1 = rev_column_ref_commalist _2 = COMMA _3 = column_ref
    {                                              ( _3 :: _1 )}

column_ref:
  _1 = IDENT
    {                      ( `ref _1 )}
| _1 = IDENT _2 = DOT _3 = IDENT
    {                      ( `refdotref (_1, _3) )}

opt_having_clause:
  
    {                            ( None )}
| _1 = HAVING _2 = search_condition
    {                             ( Some _2 )}

search_condition:
  _1 = search_condition _2 = OR _3 = search_condition
    {                                          ( `cor (_1, _3) )}
| _1 = search_condition _2 = AND _3 = search_condition
    {                                          ( `cand (_1, _3) )}
| _1 = NOT _2 = search_condition
    {                                          ( `cnot _2 )}
| _1 = LPAREN _2 = search_condition _3 = RPAREN
    {                                          ( _2 )}
| _1 = predicate
    {                                          ( `p _1 )}

predicate:
  _1 = comparison_predicate
    {                                         ( _1 )}
| _1 = between_predicate
    {                                          ( _1 )}
| _1 = like_predicate
    {                                          ( _1 )}
| _1 = test_for_null
    {                                          ( _1 )}
| _1 = in_predicate
    {                                          ( _1 )}
| _1 = all_or_any_predicate
    {                                          ( _1 )}
| _1 = existence_test
    {                                          ( _1 )}

comparison_predicate:
  _1 = scalar_exp _2 = COMPARISON _3 = scalar_exp
    {                                                         ( `comparisonexp (_1, _2, _3) )}
| _1 = scalar_exp _2 = COMPARISON _3 = LPAREN _4 = select_exp _5 = RPAREN
    {                                                              ( `comparisonselect (_1, _2, _4) )}

between_predicate:
  _1 = scalar_exp _2 = NOT _3 = BETWEEN _4 = scalar_exp _5 = AND _6 = scalar_exp
    {                                                         ( `between (true, _1, _4, _6) )}
| _1 = scalar_exp _2 = BETWEEN _3 = scalar_exp _4 = AND _5 = scalar_exp
    {                                                          ( `between (false, _1, _3, _5) )}

like_predicate:
  _1 = scalar_exp _2 = NOT _3 = LIKE _4 = atom _5 = opt_escape
    {                                                         ( `like (true, _1, _4, _5) )}
| _1 = scalar_exp _2 = LIKE _3 = atom _4 = opt_escape
    {                                                          ( `like (false, _1, _3, _4) )}

opt_escape:
  
    {                                                         ( None )}
| _1 = ESCAPE _2 = atom
    {                                                          ( Some _2 )}

test_for_null:
  _1 = column_ref _2 = IS _3 = NOT _4 = NULL
    {                                                         ( `iscolnull (true, _1) )}
| _1 = column_ref _2 = IS _3 = NULL
    {                                                          ( `iscolnull (false, _1) )}

in_predicate:
  _1 = scalar_exp _2 = NOT _3 = IN _4 = LPAREN _5 = select_exp _6 = RPAREN
    {                                                             ( `in_select (true, _1, _5) )}
| _1 = scalar_exp _2 = IN _3 = LPAREN _4 = select_exp _5 = RPAREN
    {                                                              ( `in_select (false, _1, _4) )}
| _1 = scalar_exp _2 = NOT _3 = IN _4 = LPAREN _5 = rev_atom_commalist _6 = RPAREN
    {                                                          ( `in_atom_list (true, _1, List.rev _5) )}
| _1 = scalar_exp _2 = IN _3 = LPAREN _4 = rev_atom_commalist _5 = RPAREN
    {                                                          ( `in_atom_list (false, _1, List.rev _4) )}

rev_atom_commalist:
  _1 = atom
    {                                                         ( [_1] )}
| _1 = rev_atom_commalist _2 = COMMA _3 = atom
    {                                                          ( _3 :: _1 )}

all_or_any_predicate:
  _1 = scalar_exp _2 = COMPARISON _3 = any_all_some _4 = LPAREN _5 = select_exp _6 = RPAREN
    {                                                              ( `allorany (_1, _2, _3, _5) )}

any_all_some:
  _1 = ANY
    {              ( `some )}
| _1 = ALL
    {               ( `all )}
| _1 = SOME
    {               ( `some )}

existence_test:
  _1 = EXISTS _2 = LPAREN _3 = select_exp _4 = RPAREN
    {                                                           ( `exists _3 )}

parameter:
  _1 = COLON _2 = IDENT
    {                                                           ( _2 )}

sql_cmd_list:
  _1 = cmd _2 = endsql
    {                                  ( [_1] )}
| _1 = cmd _2 = SEMICOLON _3 = sql_cmd_list
    {                                   ( _1 :: _3 )}

insert_statement:
  _1 = INSERT _2 = INTO _3 = table _4 = opt_column_commalist _5 = values_or_select_exp
    {                                                                  ( _3, _4, _5 )}

values_or_select_exp:
  _1 = VALUES _2 = LPAREN _3 = rev_insert_atom_commalist _4 = RPAREN
    {                                                                  ( `values (List.rev _3) )}
| _1 = select_exp
    {                                                                   ( `select _1 )}

rev_insert_atom_commalist:
  _1 = insert_atom
    {                                                                  ( [ _1 ] )}
| _1 = rev_insert_atom_commalist _2 = COMMA _3 = insert_atom
    {                                                                   ( _3 :: _1 )}

insert_atom:
  _1 = atom
    {                                                                  ( `atom _1 )}
| _1 = NULL
    {                                                                   ( `null )}

schema:
  _1 = CREATE _2 = SCHEMA _3 = AUTHORIZATION _4 = user _5 = opt_schema_element_list
    {                                                           ( _4, _5 )}

opt_schema_element_list:
  
    {              ( [] )}
| _1 = rev_schema_element_list
    {                           ( List.rev _1 )}

rev_schema_element_list:
  _1 = schema_element
    {                                         ( [ _1 ] )}
| _1 = rev_schema_element_list _2 = schema_element
    {                                          ( _2 :: _1 )}

schema_element:
  _1 = base_table_def
    {                        ( `tabledef _1 )}
| _1 = view_def
    {                         ( `viewdef _1 )}
| _1 = privilege_def
    {                         ( `privdef _1 )}

base_table_def:
  _1 = CREATE _2 = TABLE _3 = table _4 = LPAREN _5 = base_table_element_commalist _6 = RPAREN
    {                                                                ( _3, _5 )}

base_table_element_commalist:
  _1 = base_table_element
    {                     ( [ _1 ] )}
| _1 = base_table_element_commalist _2 = COMMA _3 = base_table_element
    {                                                         ( _1 @ [ _3 ] )}

base_table_element:
  _1 = column_def
    {                            ( `columndef _1 )}
| _1 = table_constraint_def
    {                             ( `tblcnstr _1 )}

column:
  _1 = IDENT
    {               ( _1 )}

column_def:
  _1 = column _2 = data_type _3 = column_def_opt_list
    {                                       ( _1, _2, _3 )}

data_type:
  _1 = CHARACTER
    {                                                              ( `char None)}
| _1 = CHARACTER _2 = LPAREN _3 = INTNUM _4 = RPAREN
    {                                                               ( `char (Some (normal_int _3)) )}
| _1 = NUMERIC
    {                                                               ( `numeric `default )}
| _1 = NUMERIC _2 = LPAREN _3 = INTNUM _4 = RPAREN
    {                                                               ( `numeric (`length (normal_int _3)) )}
| _1 = NUMERIC _2 = LPAREN _3 = INTNUM _4 = COMMA _5 = INTNUM _6 = RPAREN
    {                                                               ( `numeric (`lengthdec (normal_int _3, normal_int _5)) )}
| _1 = DECIMAL
    {                                                               ( `decimal `default )}
| _1 = DECIMAL _2 = LPAREN _3 = INTNUM _4 = RPAREN
    {                                                               ( `decimal (`length (normal_int _3)) )}
| _1 = DECIMAL _2 = LPAREN _3 = INTNUM _4 = COMMA _5 = INTNUM _6 = RPAREN
    {                                                               ( `decimal (`lengthdec (normal_int _3, normal_int _5)) )}
| _1 = INTEGER
    {                                                               ( `int )}
| _1 = SMALLINT
    {                                                               ( `smallint )}
| _1 = FLOAT
    {                                                               ( `float None )}
| _1 = FLOAT _2 = LPAREN _3 = INTNUM _4 = RPAREN
    {                                                               ( `float (Some (normal_int _3)) )}
| _1 = REAL
    {                                                               ( `real )}
| _1 = DOUBLE _2 = PRECISION
    {                                                               ( `doubleprecision )}

column_def_opt_list:
  
    {              ( [] )}
| _1 = column_def_opt_list _2 = column_def_opt
    {                                      ( _1 @ [_2] )}

column_def_opt:
  _1 = NOT _2 = NULL
    {                                                              ( `not_null )}
| _1 = NOT _2 = NULL _3 = UNIQUE
    {                                                               ( `not_null_unique )}
| _1 = NOT _2 = NULL _3 = PRIMARY _4 = KEY
    {                                                               ( `not_null_primary_key )}
| _1 = DEFAULT _2 = literal
    {                                                               ( `default _2 )}
| _1 = DEFAULT _2 = NULL
    {                                                               ( `default_null )}
| _1 = DEFAULT _2 = USER
    {                                                               ( `default_user )}
| _1 = CHECK _2 = LPAREN _3 = search_condition _4 = RPAREN
    {                                                               ( `check _3 )}
| _1 = REFERENCES _2 = table
    {                                                               ( `references (_2, []) )}
| _1 = REFERENCES _2 = table _3 = LPAREN _4 = column_commalist _5 = RPAREN
    {                                                               ( `references (_2, _4) )}

table_constraint_def:
  _1 = UNIQUE _2 = LPAREN _3 = column_commalist _4 = RPAREN
    {                                                              ( `unique _3 )}
| _1 = PRIMARY _2 = KEY _3 = LPAREN _4 = column_commalist _5 = RPAREN
    {                                                               ( `primkey _4 )}
| _1 = FOREIGN _2 = KEY _3 = LPAREN _4 = column_commalist _5 = RPAREN _6 = REFERENCES _7 = table
    {                                                       ( `foreignkey (_4, _7, []) )}
| _1 = FOREIGN _2 = KEY _3 = LPAREN _4 = column_commalist _5 = RPAREN _6 = REFERENCES _7 = table _8 = LPAREN _9 = column_commalist _10 = RPAREN
    {                                                       ( `foreignkey (_4, _7, _9) )}
| _1 = CHECK _2 = LPAREN _3 = search_condition _4 = RPAREN
    {                                                               ( `check _3 )}

column_commalist:
  _1 = column
    {                                                              ( [_1] )}
| _1 = column_commalist _2 = COMMA _3 = column
    {                                                               ( _1 @ [_3] )}

opt_column_commalist:
  
    {                                                              ( [] )}
| _1 = LPAREN _2 = column_commalist _3 = RPAREN
    {                                                               ( _2 )}

user:
  _1 = IDENT
    {                          ( _1 )}

view_def:
  _1 = CREATE _2 = VIEW _3 = table _4 = opt_column_commalist _5 = AS _6 = select_exp _7 = opt_with_check_option
    {                                                              ( _3, _4, _6, _7 )}

opt_with_check_option:
  
    {                                                              ( `nocheck )}
| _1 = WITH _2 = CHECK _3 = OPTION
    {                                                               ( `check )}

privilege_def:
  _1 = GRANT _2 = privileges _3 = ON _4 = table _5 = TO _6 = grantee_commalist _7 = opt_with_grant_option
    {                                                              ( _2, _4, _6, _7 )}

opt_with_grant_option:
  
    {                                                              ( `nograntoption )}
| _1 = WITH _2 = GRANT _3 = OPTION
    {                                                               ( `grantoption )}

privileges:
  _1 = ALL _2 = PRIVILEGES
    {                                                              ( `all )}
| _1 = ALL
    {                                                               ( `all )}
| _1 = operation_commalist
    {                                                               ( `some _1 )}

operation_commalist:
  _1 = operation
    {                                                              ( [_1] )}
| _1 = operation_commalist _2 = COMMA _3 = operation
    {                                                               ( _1 @ [_3] )}

operation:
  _1 = SELECT
    {                                                              ( `select )}
| _1 = INSERT
    {                                                               ( `insert )}
| _1 = DELETE
    {                                                               ( `delete )}
| _1 = UPDATE _2 = opt_column_commalist
    {                                                               ( `update _2 )}
| _1 = REFERENCES _2 = opt_column_commalist
    {                                                               ( `references _2 )}

grantee_commalist:
  _1 = grantee
    {                                                              ( [_1] )}
| _1 = grantee_commalist _2 = COMMA _3 = grantee
    {                                                               ( _1 @ [_3] )}

grantee:
  _1 = PUBLIC
    {                                                              ( `public )}
| _1 = user
    {                                                               ( `user _1 )}

module_def:
  _1 = MODULE _2 = opt_module _3 = LANGUAGE _4 = lang _5 = AUTHORIZATION _6 = user _7 = opt_cursor_def_list _8 = procedure_def_list
    {                                                              ( _2, _4, _6, _7, _8 )}

opt_module:
  
    {                                                              ( None )}
| _1 = sqlmodule
    {                                                               ( Some _1 )}

sqlmodule:
  _1 = IDENT
    {                  ( _1 )}

lang:
  _1 = COBOL
    {                                                              ( `cobol )}
| _1 = FORTRAN
    {                                                               ( `fortran )}
| _1 = PASCAL
    {                                                               ( `pascal )}
| _1 = PLI
    {                                                               ( `pli )}
| _1 = C
    {                                                               ( `c )}
| _1 = ADA
    {                                                               ( `ada )}
| _1 = OCAML
    {                                                                     ( `ocaml )}

opt_cursor_def_list:
  
    {                                                              ( [] )}
| _1 = cursor_def_list
    {                                                               ( _1 )}

cursor_def_list:
  _1 = cursor_def
    {                                                              ( [_1] )}
| _1 = cursor_def_list _2 = cursor_def
    {                                                               ( _1 @ [_2] )}

cursor_def:
  _1 = DECLARE _2 = cursor _3 = CURSOR _4 = FOR _5 = query_exp _6 = opt_order_by_clause
    {                                                              ( _2, _5, _6 )}

cursor:
  _1 = IDENT
    {               ( _1 )}

opt_order_by_clause:
  
    {                                                              ( [] )}
| _1 = ORDER _2 = BY _3 = ordering_spec_commalist
    {                                                               ( _3 )}

ordering_spec_commalist:
  _1 = ordering_spec
    {                                                              ( [_1] )}
| _1 = ordering_spec_commalist _2 = COMMA _3 = ordering_spec
    {                                                               ( _1 @ [_3] )}

ordering_spec:
  _1 = INTNUM _2 = opt_asc_desc
    {                                                              ( `numcolumn (normal_int _1), _2 )}
| _1 = column_ref _2 = opt_asc_desc
    {                                                               ( `column _1, _2 )}

opt_asc_desc:
  
    {                                                              ( None )}
| _1 = ASC
    {                                                               ( Some `asc )}
| _1 = DESC
    {                                                               ( Some `desc )}

procedure_def_list:
  _1 = procedure_def
    {                                                              ( [_1] )}
| _1 = procedure_def_list _2 = procedure_def
    {                                                               ( _1 @ [_2] )}

procedure_def:
  _1 = PROCEDURE _2 = procedure _3 = parameter_def_list _4 = SEMICOLON _5 = manipulative_statement_list
    {                                                              ( _2, _3, _5 )}

procedure:
  _1 = IDENT
    {                 ( _1 )}

manipulative_statement_list:
  _1 = manipulative_statement
    {                                                              ( [_1] )}
| _1 = manipulative_statement_list _2 = manipulative_statement
    {                                                               ( _1 @ [_2] )}

parameter_def_list:
  _1 = parameter_def
    {                                                              ( [_1] )}
| _1 = parameter_def_list _2 = parameter_def
    {                                                               ( _1 @ [_2] )}

parameter_def:
  _1 = parameter _2 = data_type
    {                                                              ( `par (_1, _2) )}
| _1 = SQLCODE
    {                                                               ( `sqlcode )}

manipulative_statement:
  _1 = close_statement
    {                                                              ( `close _1 )}
| _1 = commit_statement
    {                                                               ( `commit )}
| _1 = delete_statement_positioned
    {                                                               ( `delete_pos _1 )}
| _1 = delete_statement_searched
    {                                                               ( `delete_where _1 )}
| _1 = fetch_statement
    {                                                               ( `fetch _1 )}
| _1 = insert_statement
    {                                                               ( `insert _1 )}
| _1 = open_statement
    {                                                               ( `opencursor _1 )}
| _1 = rollback_statement
    {                                                               ( `rollback )}
| _1 = select_statement
    {                                                               ( `select _1 )}
| _1 = update_statement_positioned
    {                                                               ( `update_pos _1 )}
| _1 = update_statement_searched
    {                                                               ( `update_where _1 )}

close_statement:
  _1 = CLOSE _2 = cursor
    {                                                              ( _2 )}

commit_statement:
  _1 = COMMIT _2 = WORK
    {                                                              ( () )}

delete_statement_positioned:
  _1 = DELETE _2 = FROM _3 = table _4 = WHERE _5 = CURRENT _6 = OF _7 = cursor
    {                                                              ( _3, _7 )}

delete_statement_searched:
  _1 = DELETE _2 = FROM _3 = table _4 = opt_where_clause
    {                                                              ( _3, _4 )}

fetch_statement:
  _1 = FETCH _2 = cursor _3 = INTO _4 = target_commalist
    {                                                              ( _2, _4 )}

open_statement:
  _1 = OPEN _2 = cursor
    {                                                              ( _2 )}

rollback_statement:
  _1 = ROLLBACK _2 = WORK
    {                                                              ( () )}

select_statement:
  _1 = SELECT _2 = opt_all_distinct _3 = selection _4 = INTO _5 = target_commalist _6 = table_exp
    {                                                              ( let a, b, c, d = _6 in (_2, _3, a, b, c, d), _5 )}

update_statement_positioned:
  _1 = UPDATE _2 = table _3 = SET _4 = assignment_commalist _5 = WHERE _6 = CURRENT _7 = OF _8 = cursor
    {                                                              ( _2, _4, _8 )}

assignment_commalist:
  _1 = assignment
    {                                                               ( [_1] )}
| _1 = assignment_commalist _2 = COMMA _3 = assignment
    {                                                               ( _1 @ [_3] )}

assignment:
  _1 = column _2 = COMPARISON _3 = scalar_exp
    {                                                              ( if _2 <> `eq
									      then parse_error "assignment expected"
									      else `column_exp (_1, _3) )}
| _1 = column _2 = COMPARISON _3 = NULL
    {                                                               ( if _2 <> `eq
									      then parse_error "assignment expected"
									      else `column_null _1 )}

update_statement_searched:
  _1 = UPDATE _2 = table _3 = SET _4 = assignment_commalist _5 = opt_where_clause
    {                                                              ( _2, _4, _5 )}

target_commalist:
  _1 = target
    {                                                              ( [_1] )}
| _1 = target_commalist _2 = COMMA _3 = target
    {                                                               ( _1 @ [_3] )}

target:
  _1 = parameter_ref
    {                                                              ( _1 )}

cmd:
  _1 = WHENEVER _2 = NOT _3 = FOUND _4 = when_action
    {                                                                  ( `when_not_found _4 )}
| _1 = WHENEVER _2 = SQLERROR _3 = when_action
    {                                                               ( `whenever_sqlerror _3 )}
| _1 = manipulative_statement
    {                                                                  ( `manip _1 )}
| _1 = module_def
    {                                                                  ( `moduledef _1 )}
| _1 = schema_element
    {                               ( _1 :> cmd )}
| _1 = schema
    {             ( `schemadef _1 )}

when_action:
  _1 = GOTO _2 = IDENT
    {                                                                         ( `goto _2 )}
| _1 = CONTINUE
    {                                                               ( `continue )}

%%

(*


*)

