%{
open Basic
open Preterm
open Internals
open Scoping
open Reduction
open Signature
open Entry

let rec mk_lam : preterm -> (loc*ident*preterm) list -> preterm = fun te ps ->
  match ps with
  | []           -> te
  | (l,x,ty)::ps -> PreLam(l, x, Some ty, mk_lam te ps)

let rec mk_pi  : preterm -> (loc*ident*preterm) list -> preterm = fun ty ps ->
  match ps with
  | []           -> ty
  | (l,x,aa)::ps -> PrePi(l, Some x, aa, mk_pi ty ps)

let mk_config loc id1 id2_opt =
  try
    let open Env in
    let some i = Some(int_of_string i) in
    let config nb_steps strategy = {default_cfg with nb_steps; strategy} in
    match (id1, id2_opt) with
    | ("SNF" , None       ) -> config None     Snf
    | ("HNF" , None       ) -> config None     Hnf
    | ("WHNF", None       ) -> config None     Whnf
    | ("SNF" , Some i     ) -> config (some i) Snf
    | ("HNF" , Some i     ) -> config (some i) Hnf
    | ("WHNF", Some i     ) -> config (some i) Whnf
    | (i     , Some "SNF" ) -> config (some i) Snf
    | (i     , Some "HNF" ) -> config (some i) Hnf
    | (i     , Some "WHNF") -> config (some i) Whnf
    | (i     , None       ) -> {default_cfg with nb_steps = some i}
    | (_     , _          ) -> raise Exit (* captured bellow *)
  with _ -> raise (Parse_error(loc, "invalid command configuration"))
%}
%start line
%token ARROW
%token <Basic.loc> ASSERT
%token <Basic.loc> ASSERTNOT
%token <Basic.loc> CHECK
%token <Basic.loc> CHECKNOT
%token COLON
%token COMMA
%token DEF
%token DOT
%token EOF
%token EQUAL
%token <Basic.loc> EVAL
%token FATARROW
%token <Basic.loc> GDT
%token <Basic.loc*Basic.ident> ID
%token <Basic.loc> INFER
%token <Basic.loc> KW_DEF
%token <Basic.loc> KW_THM
%token LEFTBRA
%token LEFTPAR
%token LEFTSQU
%token LONGARROW
%token <Basic.loc*Basic.mident> NAME
%token <Basic.loc> PRINT
%token <Basic.loc*Basic.mident*Basic.ident> QID
%token <Basic.loc*Basic.mident> REQUIRE
%token RIGHTBRA
%token RIGHTPAR
%token RIGHTSQU
%token <string> STRING
%token <Basic.loc> TYPE
%token <Basic.loc> UNDERSCORE
%right ARROW FATARROW
%type <Preterm.pdecl list> context
%type <Preterm.pdecl> decl
%type <Basic.mident -> Entry.entry> line
%type <Basic.loc*Basic.ident*Preterm.preterm> param
%type <Preterm.prepattern> pattern
%type <Preterm.prepattern> pattern_wp
%type <Preterm.prule> rule
%type <Preterm.preterm> sterm
%type <Preterm.preterm> term
%type <Basic.loc*Basic.mident option*Basic.ident*Preterm.prepattern list> top_pattern
%%

list_param_:
  
    {    ( [] )}
| x = param xs = list_param_
    {    ( x :: xs )}

list_pattern_wp_:
  
    {    ( [] )}
| x = pattern_wp xs = list_pattern_wp_
    {    ( x :: xs )}

list_sterm_:
  
    {    ( [] )}
| x = sterm xs = list_sterm_
    {    ( x :: xs )}

nonempty_list_param_:
  x = param
    {    ( [ x ] )}
| x = param xs = nonempty_list_param_
    {    ( x :: xs )}

nonempty_list_pattern_wp_:
  x = pattern_wp
    {    ( [ x ] )}
| x = pattern_wp xs = nonempty_list_pattern_wp_
    {    ( x :: xs )}

nonempty_list_rule_:
  x = rule
    {    ( [ x ] )}
| x = rule xs = nonempty_list_rule_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_decl_:
  x = decl
    {    ( [ x ] )}
| x = decl _2 = COMMA xs = separated_nonempty_list_COMMA_decl_
    {    ( x :: xs )}

line:
  id = ID ps = list_param_ _3 = COLON ty = term _5 = DOT
    {      (fun md -> Decl(fst id, snd id, Static, scope_term md [] (mk_pi ty ps)))}
| _1 = KW_DEF id = ID _3 = COLON ty = term _5 = DOT
    {      (fun md -> Decl(fst id, snd id, Definable, scope_term md [] ty))}
| _1 = KW_DEF id = ID _3 = COLON ty = term _5 = DEF te = term _7 = DOT
    {      (fun md -> Def(fst id, snd id, false, Some(scope_term md [] ty), scope_term md [] te))}
| _1 = KW_DEF id = ID _3 = DEF te = term _5 = DOT
    {      (fun md -> Def(fst id, snd id, false, None, scope_term md [] te))}
| _1 = KW_DEF id = ID ps = nonempty_list_param_ _4 = COLON ty = term _6 = DEF te = term _8 = DOT
    {      (fun md -> Def(fst id, snd id, false, Some(scope_term md [] (mk_pi ty ps)),
                     scope_term md [] (mk_lam te ps)))}
| _1 = KW_DEF id = ID ps = nonempty_list_param_ _4 = DEF te = term _6 = DOT
    {      (fun md -> Def(fst id, snd id, false, None, scope_term md [] (mk_lam te ps)))}
| _1 = KW_THM id = ID _3 = COLON ty = term _5 = DEF te = term _7 = DOT
    {      (fun md -> Def(fst id, snd id, true, Some(scope_term md [] ty), scope_term md [] te))}
| _1 = KW_THM id = ID ps = nonempty_list_param_ _4 = COLON ty = term _6 = DEF te = term _8 = DOT
    {      (fun md -> Def(fst id, snd id, true, Some(scope_term md [] (mk_pi ty ps)),
                     scope_term md [] (mk_lam te ps)))}
| rs = nonempty_list_rule_ _2 = DOT
    {      (fun md -> Rules(List.map (scope_rule md) rs))}
| _1 = EVAL te = term _3 = DOT
    {      (fun md -> Eval(_1, default_cfg, scope_term md [] te))}
| _1 = EVAL cfg = eval_config te = term _4 = DOT
    {      (fun md -> Eval(_1, cfg, scope_term md [] te))}
| _1 = INFER te = term _3 = DOT
    {      (fun md -> Infer(_1, default_cfg, scope_term md [] te))}
| _1 = INFER cfg = eval_config te = term _4 = DOT
    {      (fun md -> Infer(_1, cfg, scope_term md [] te))}
| _1 = CHECK te = aterm _3 = COLON ty = term _5 = DOT
    {      (fun md -> Check(_1, false, false, HasType(scope_term md [] te, scope_term md [] ty)))}
| _1 = CHECKNOT te = aterm _3 = COLON ty = term _5 = DOT
    {      (fun md -> Check(_1, false, true , HasType(scope_term md [] te, scope_term md [] ty)))}
| _1 = ASSERT te = aterm _3 = COLON ty = term _5 = DOT
    {      (fun md -> Check(_1, true , false, HasType(scope_term md [] te, scope_term md [] ty)))}
| _1 = ASSERTNOT te = aterm _3 = COLON ty = term _5 = DOT
    {      (fun md -> Check(_1, true , true , HasType(scope_term md [] te, scope_term md [] ty)))}
| _1 = CHECK t1 = aterm _3 = EQUAL t2 = term _5 = DOT
    {      (fun md -> Check(_1, false, false, Convert(scope_term md [] t1, scope_term md [] t2)))}
| _1 = CHECKNOT t1 = aterm _3 = EQUAL t2 = term _5 = DOT
    {      (fun md -> Check(_1, false, true , Convert(scope_term md [] t1, scope_term md [] t2)))}
| _1 = ASSERT t1 = aterm _3 = EQUAL t2 = term _5 = DOT
    {      (fun md -> Check(_1, true , false, Convert(scope_term md [] t1, scope_term md [] t2)))}
| _1 = ASSERTNOT t1 = aterm _3 = EQUAL t2 = term _5 = DOT
    {      (fun md -> Check(_1, true , true , Convert(scope_term md [] t1, scope_term md [] t2)))}
| _1 = PRINT _2 = STRING _3 = DOT
    {                     (fun _ -> Print(_1, _2))}
| _1 = GDT _2 = ID _3 = DOT
    {                     (fun _ -> DTree(_1, None, snd _2))}
| _1 = GDT _2 = QID _3 = DOT
    {                     (fun _ -> let (_,m,v) = _2 in DTree(_1, Some m, v))}
| n = NAME _2 = DOT
    {                     (fun _ -> Name(fst n, snd n))}
| r = REQUIRE _2 = DOT
    {                     (fun _ -> Require(fst r,snd r))}
| _1 = EOF
    {                     (raise End_of_file)}

eval_config:
  _1 = LEFTSQU id = ID _3 = RIGHTSQU
    {let _startpos = _startpos__1_ in
      (mk_config (Lexer.loc_of_pos _startpos) (string_of_ident (snd id)) None)}
| _1 = LEFTSQU id1 = ID _3 = COMMA id2 = ID _5 = RIGHTSQU
    {let _startpos = _startpos__1_ in
      (mk_config (Lexer.loc_of_pos _startpos) (string_of_ident (snd id1))
        (Some(string_of_ident (snd id2))))}

param:
  _1 = LEFTPAR id = ID _3 = COLON te = term _5 = RIGHTPAR
    {      ((fst id, snd id, te))}

rule:
  _1 = LEFTSQU _2 = context _3 = RIGHTSQU _4 = top_pattern _5 = LONGARROW _6 = term
    {      ( let (l,md_opt,id,args) = _4 in
        ( l , None, _2 , md_opt, id , args , _6) )}
| _1 = LEFTBRA _2 = ID _3 = RIGHTBRA _4 = LEFTSQU _5 = context _6 = RIGHTSQU _7 = top_pattern _8 = LONGARROW _9 = term
    {      ( let (l,md_opt,id,args) = _7 in
        ( l , Some (None,snd _2), _5 , md_opt, id , args , _9))}
| _1 = LEFTBRA _2 = QID _3 = RIGHTBRA _4 = LEFTSQU _5 = context _6 = RIGHTSQU _7 = top_pattern _8 = LONGARROW _9 = term
    {      ( let (l,md_opt,id,args) = _7 in
        let (_,m,v) = _2 in
        ( l , Some (Some m,v), _5 , md_opt, id , args , _9))}

decl:
  _1 = ID _2 = COLON _3 = term
    {                  ( debug 1 "Ignoring type declaration in rule context."; _1 )}
| _1 = ID
    {                  ( _1 )}

context:
  
    {                                         ( [] )}
| _1 = separated_nonempty_list_COMMA_decl_
    {                                         ( _1 )}

top_pattern:
  _1 = ID _2 = list_pattern_wp_
    {                    ( (fst _1,None,snd _1,_2) )}
| _1 = QID _2 = list_pattern_wp_
    {                    ( let (l,md,id)=_1 in (l,Some md,id,_2) )}

pattern_wp:
  _1 = ID
    {                             ( PPattern (fst _1,None,snd _1,[]) )}
| _1 = QID
    {                             ( let (l,md,id)=_1 in PPattern (l,Some md,id,[]) )}
| _1 = UNDERSCORE
    {                             ( PJoker _1 )}
| _1 = LEFTBRA _2 = term _3 = RIGHTBRA
    {                             ( PCondition _2 )}
| _1 = LEFTPAR _2 = pattern _3 = RIGHTPAR
    {                             ( _2 )}

pattern:
  _1 = ID _2 = nonempty_list_pattern_wp_
    {                             ( PPattern (fst _1,None,snd _1,_2) )}
| _1 = QID _2 = nonempty_list_pattern_wp_
    {                             ( let (l,md,id)=_1 in PPattern (l,Some md,id,_2) )}
| _1 = ID _2 = FATARROW _3 = pattern
    {                             ( PLambda (fst _1,snd _1,_3) )}
| _1 = pattern_wp
    {                             ( _1 )}

sterm:
  _1 = QID
    {                             ( let (l,md,id)=_1 in PreQId(l,mk_name md id) )}
| _1 = UNDERSCORE
    {let _1 =                ( (_1, mk_ident "_") ) in
                             ( PreId (fst _1,snd _1) )}
| _1 = ID
    {let _1 =        ( _1 ) in
                             ( PreId (fst _1,snd _1) )}
| _1 = LEFTPAR _2 = term _3 = RIGHTPAR
    {                             ( _2 )}
| _1 = TYPE
    {                             ( PreType _1 )}

aterm:
  te = sterm ts = list_sterm_
    {      (match ts with [] -> te | a::args -> PreApp(te,a,args))}

term:
  t = aterm
    {      ( t )}
| _1 = UNDERSCORE _2 = COLON _3 = aterm _4 = ARROW _5 = term
    {let _1 =                ( (_1, mk_ident "_") ) in
      ( PrePi (fst _1,Some (snd _1), _3, _5) )}
| _1 = ID _2 = COLON _3 = aterm _4 = ARROW _5 = term
    {let _1 =        ( _1 ) in
      ( PrePi (fst _1,Some (snd _1), _3, _5) )}
| _1 = LEFTPAR _2 = ID _3 = COLON _4 = aterm _5 = RIGHTPAR _6 = ARROW _7 = term
    {      ( PrePi (fst _2,Some (snd _2), _4 ,_7) )}
| _1 = term _2 = ARROW _3 = term
    {let _startpos = _startpos__1_ in
      ( PrePi (Lexer.loc_of_pos _startpos,None,_1,_3) )}
| _1 = UNDERSCORE _2 = FATARROW _3 = term
    {let _1 =                ( (_1, mk_ident "_") ) in
      (PreLam (fst _1, snd _1, None, _3))}
| _1 = ID _2 = FATARROW _3 = term
    {let _1 =        ( _1 ) in
      (PreLam (fst _1, snd _1, None, _3))}
| _1 = UNDERSCORE _2 = COLON _3 = aterm _4 = FATARROW _5 = term
    {let _1 =                ( (_1, mk_ident "_") ) in
      (PreLam (fst _1, snd _1, Some _3, _5))}
| _1 = ID _2 = COLON _3 = aterm _4 = FATARROW _5 = term
    {let _1 =        ( _1 ) in
      (PreLam (fst _1, snd _1, Some _3, _5))}

%%


