Grammar has 10 nonterminal symbols, among which 1 start symbols.
Grammar has 44 terminal symbols.
Grammar has 68 productions.
nullable(semi_opt) = true
nullable(reg) = false
nullable(proc_list) = false
nullable(opt) = false
nullable(main) = false
nullable(k) = false
nullable(iol_list) = false
nullable(instr_option_list) = true
nullable(instr_option) = true
nullable(instr) = false
first(semi_opt) = SEMI
first(reg) = SYMB_REG ARCH_REG
first(proc_list) = PROC
first(opt) = I_SY I_ST I_OSHST I_OSH I_NSHST I_NSH I_ISHST I_ISH
first(main) = SEMI PROC
first(k) = NUM
first(iol_list) = SEMI PIPE NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD
first(instr_option_list) = PIPE NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD
first(instr_option) = NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD
first(instr) = I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD
minimal(semi_opt) = (* 0 *)
minimal(reg) = (* 1 *) SYMB_REG
minimal(proc_list) = (* 2 *) PROC SEMI
minimal(opt) = (* 1 *) I_SY
minimal(main) = (* 4 *) PROC SEMI SEMI EOF
minimal(k) = (* 1 *) NUM
minimal(iol_list) = (* 1 *) SEMI
minimal(instr_option_list) = (* 0 *)
minimal(instr_option) = (* 0 *)
minimal(instr) = (* 1 *) I_DMB
follow(semi_opt) = PROC
follow(reg) = SEMI RBRK PIPE COMMA
follow(proc_list) = SEMI PIPE NAME I_XORS I_XOR I_STRNE I_STREX I_STREQ I_STR I_MOVNE I_MOVEQ I_MOV I_LDRNE I_LDREX I_LDREQ I_LDR I_ISB I_DSB I_DMB I_CMP I_BNE I_BEQ I_B I_ANDS I_AND I_ADDS I_ADD
follow(opt) = SEMI PIPE
follow(main) = #
follow(k) = SEMI PIPE
follow(iol_list) = EOF
follow(instr_option_list) = SEMI
follow(instr_option) = SEMI PIPE
follow(instr) = SEMI PIPE
Built an LR(0) automaton with 176 states.
The grammar is SLR(1).
The construction mode is pager.
Built an LR(1) automaton with 176 states.
File "diy.5.01-ARMParser.mly", line 36, characters 0-9:
Warning: the precedence level assigned to SEMI is never useful.
63 out of 176 states have a default reduction.
64 out of 176 states are represented.
0 out of 57 symbols keep track of their start position.
0 out of 57 symbols keep track of their end position.
44 out of 69 productions exploit shiftreduce optimization.
260 functions before inlining, 50 functions after inlining.
