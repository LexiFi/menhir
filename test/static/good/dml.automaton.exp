State 0:
## Known stack suffix:
##
## LR(1) items:
top' -> . top [ # ]
## Transitions:
-- On VAL shift to state 1
-- On SORT shift to state 200
-- On FUN shift to state 205
-- On DATATYPE shift to state 282
-- On top shift to state 333
-- On decls shift to state 334
-- On decl shift to state 320
## Reductions:

State 1:
## Known stack suffix:
## VAL
## LR(1) items:
decl -> VAL . var_typ_decl [ VAL SORT IN FUN EOF DATATYPE ]
decl -> VAL . val_decls [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On OP shift to state 4
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 44
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On var_typ_decl shift to state 190
-- On val_decls shift to state 191
-- On val_decl shift to state 192
-- On simple_pattern shift to state 29
-- On pattern shift to state 195
-- On opname shift to state 330
-- On constant shift to state 32
## Reductions:

State 2:
## Known stack suffix:
## UNDERSCORE
## LR(1) items:
simple_pattern -> UNDERSCORE . [ UNDERSCORE TRUE RPAREN RBRACKET LPAREN LBRACKET IDENT FALSE EQGT EQ CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production simple_pattern -> UNDERSCORE
-- On TRUE reduce production simple_pattern -> UNDERSCORE
-- On RPAREN reduce production simple_pattern -> UNDERSCORE
-- On RBRACKET reduce production simple_pattern -> UNDERSCORE
-- On LPAREN reduce production simple_pattern -> UNDERSCORE
-- On LBRACKET reduce production simple_pattern -> UNDERSCORE
-- On IDENT reduce production simple_pattern -> UNDERSCORE
-- On FALSE reduce production simple_pattern -> UNDERSCORE
-- On EQGT reduce production simple_pattern -> UNDERSCORE
-- On EQ reduce production simple_pattern -> UNDERSCORE
-- On CONSTSTRING reduce production simple_pattern -> UNDERSCORE
-- On CONSTINT reduce production simple_pattern -> UNDERSCORE
-- On CONSTFLOAT reduce production simple_pattern -> UNDERSCORE
-- On CONSTCHAR reduce production simple_pattern -> UNDERSCORE
-- On COMMA reduce production simple_pattern -> UNDERSCORE
-- On COLONCOLON reduce production simple_pattern -> UNDERSCORE

State 3:
## Known stack suffix:
## TRUE
## LR(1) items:
constant -> TRUE . [ WITHTYPE VAL UNDERSCORE TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQGT EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production constant -> TRUE
-- On VAL reduce production constant -> TRUE
-- On UNDERSCORE reduce production constant -> TRUE
-- On TRUE reduce production constant -> TRUE
-- On TIMES reduce production constant -> TRUE
-- On TILDE reduce production constant -> TRUE
-- On THEN reduce production constant -> TRUE
-- On SORT reduce production constant -> TRUE
-- On RPAREN reduce production constant -> TRUE
-- On RBRACKET reduce production constant -> TRUE
-- On PLUS reduce production constant -> TRUE
-- On PERCENT reduce production constant -> TRUE
-- On OF reduce production constant -> TRUE
-- On MINUS reduce production constant -> TRUE
-- On LTGT reduce production constant -> TRUE
-- On LTEQ reduce production constant -> TRUE
-- On LT reduce production constant -> TRUE
-- On LPAREN reduce production constant -> TRUE
-- On LET reduce production constant -> TRUE
-- On LBRACKET reduce production constant -> TRUE
-- On IN reduce production constant -> TRUE
-- On IDENT reduce production constant -> TRUE
-- On GTEQ reduce production constant -> TRUE
-- On GT reduce production constant -> TRUE
-- On FUN reduce production constant -> TRUE
-- On FALSE reduce production constant -> TRUE
-- On EQGT reduce production constant -> TRUE
-- On EQ reduce production constant -> TRUE
-- On EOF reduce production constant -> TRUE
-- On END reduce production constant -> TRUE
-- On ELSE reduce production constant -> TRUE
-- On DIV reduce production constant -> TRUE
-- On DATATYPE reduce production constant -> TRUE
-- On CONSTSTRING reduce production constant -> TRUE
-- On CONSTINT reduce production constant -> TRUE
-- On CONSTFLOAT reduce production constant -> TRUE
-- On CONSTCHAR reduce production constant -> TRUE
-- On COMMA reduce production constant -> TRUE
-- On COLONCOLON reduce production constant -> TRUE
-- On COLON reduce production constant -> TRUE
-- On BARBAR reduce production constant -> TRUE
-- On BAR reduce production constant -> TRUE
-- On APPEND reduce production constant -> TRUE
-- On AND reduce production constant -> TRUE
-- On AMPERAMPER reduce production constant -> TRUE

State 4:
## Known stack suffix:
## OP
## LR(1) items:
opname -> OP . PLUS [ COLON ]
opname -> OP . MINUS [ COLON ]
opname -> OP . TIMES [ COLON ]
opname -> OP . DIV [ COLON ]
opname -> OP . PERCENT [ COLON ]
opname -> OP . GT [ COLON ]
opname -> OP . GTEQ [ COLON ]
opname -> OP . LT [ COLON ]
opname -> OP . LTEQ [ COLON ]
opname -> OP . EQ [ COLON ]
opname -> OP . LTGT [ COLON ]
opname -> OP . AMPERAMPER [ COLON ]
opname -> OP . BARBAR [ COLON ]
opname -> OP . APPEND [ COLON ]
## Transitions:
-- On TIMES shift to state 5
-- On PLUS shift to state 6
-- On PERCENT shift to state 7
-- On MINUS shift to state 8
-- On LTGT shift to state 9
-- On LTEQ shift to state 10
-- On LT shift to state 11
-- On GTEQ shift to state 12
-- On GT shift to state 13
-- On EQ shift to state 14
-- On DIV shift to state 15
-- On BARBAR shift to state 16
-- On APPEND shift to state 17
-- On AMPERAMPER shift to state 18
## Reductions:

State 5:
## Known stack suffix:
## OP TIMES
## LR(1) items:
opname -> OP TIMES . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP TIMES

State 6:
## Known stack suffix:
## OP PLUS
## LR(1) items:
opname -> OP PLUS . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP PLUS

State 7:
## Known stack suffix:
## OP PERCENT
## LR(1) items:
opname -> OP PERCENT . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP PERCENT

State 8:
## Known stack suffix:
## OP MINUS
## LR(1) items:
opname -> OP MINUS . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP MINUS

State 9:
## Known stack suffix:
## OP LTGT
## LR(1) items:
opname -> OP LTGT . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP LTGT

State 10:
## Known stack suffix:
## OP LTEQ
## LR(1) items:
opname -> OP LTEQ . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP LTEQ

State 11:
## Known stack suffix:
## OP LT
## LR(1) items:
opname -> OP LT . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP LT

State 12:
## Known stack suffix:
## OP GTEQ
## LR(1) items:
opname -> OP GTEQ . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP GTEQ

State 13:
## Known stack suffix:
## OP GT
## LR(1) items:
opname -> OP GT . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP GT

State 14:
## Known stack suffix:
## OP EQ
## LR(1) items:
opname -> OP EQ . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP EQ

State 15:
## Known stack suffix:
## OP DIV
## LR(1) items:
opname -> OP DIV . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP DIV

State 16:
## Known stack suffix:
## OP BARBAR
## LR(1) items:
opname -> OP BARBAR . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP BARBAR

State 17:
## Known stack suffix:
## OP APPEND
## LR(1) items:
opname -> OP APPEND . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP APPEND

State 18:
## Known stack suffix:
## OP AMPERAMPER
## LR(1) items:
opname -> OP AMPERAMPER . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production opname -> OP AMPERAMPER

State 19:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_pattern -> LPAREN . pattern_list RPAREN [ UNDERSCORE TRUE RPAREN RBRACKET LPAREN LBRACKET IDENT FALSE EQGT EQ CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 21
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 29
-- On pattern_list shift to state 42
-- On pattern shift to state 37
-- On constant shift to state 32
## Reductions:
-- On RPAREN reduce production pattern_list ->

State 20:
## Known stack suffix:
## LBRACKET
## LR(1) items:
simple_pattern -> LBRACKET . pattern_list RBRACKET [ UNDERSCORE TRUE RPAREN RBRACKET LPAREN LBRACKET IDENT FALSE EQGT EQ CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 21
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 29
-- On pattern_list shift to state 35
-- On pattern shift to state 37
-- On constant shift to state 32
## Reductions:
-- On RBRACKET reduce production pattern_list ->

State 21:
## Known stack suffix:
## IDENT
## LR(1) items:
pattern -> IDENT . simple_pattern [ RPAREN RBRACKET EQGT EQ COMMA ]
pattern -> IDENT . AS pattern [ RPAREN RBRACKET EQGT EQ COMMA ]
simple_pattern -> IDENT . [ RPAREN RBRACKET EQGT EQ COMMA COLONCOLON ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 22
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On AS shift to state 28
-- On simple_pattern shift to state 34
-- On constant shift to state 32
## Reductions:
-- On RPAREN reduce production simple_pattern -> IDENT
-- On RBRACKET reduce production simple_pattern -> IDENT
-- On EQGT reduce production simple_pattern -> IDENT
-- On EQ reduce production simple_pattern -> IDENT
-- On COMMA reduce production simple_pattern -> IDENT
-- On COLONCOLON reduce production simple_pattern -> IDENT

State 22:
## Known stack suffix:
## IDENT
## LR(1) items:
simple_pattern -> IDENT . [ UNDERSCORE TRUE RPAREN RBRACKET LPAREN LBRACKET IDENT FALSE EQGT EQ CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production simple_pattern -> IDENT
-- On TRUE reduce production simple_pattern -> IDENT
-- On RPAREN reduce production simple_pattern -> IDENT
-- On RBRACKET reduce production simple_pattern -> IDENT
-- On LPAREN reduce production simple_pattern -> IDENT
-- On LBRACKET reduce production simple_pattern -> IDENT
-- On IDENT reduce production simple_pattern -> IDENT
-- On FALSE reduce production simple_pattern -> IDENT
-- On EQGT reduce production simple_pattern -> IDENT
-- On EQ reduce production simple_pattern -> IDENT
-- On CONSTSTRING reduce production simple_pattern -> IDENT
-- On CONSTINT reduce production simple_pattern -> IDENT
-- On CONSTFLOAT reduce production simple_pattern -> IDENT
-- On CONSTCHAR reduce production simple_pattern -> IDENT
-- On COMMA reduce production simple_pattern -> IDENT

State 23:
## Known stack suffix:
## FALSE
## LR(1) items:
constant -> FALSE . [ WITHTYPE VAL UNDERSCORE TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQGT EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production constant -> FALSE
-- On VAL reduce production constant -> FALSE
-- On UNDERSCORE reduce production constant -> FALSE
-- On TRUE reduce production constant -> FALSE
-- On TIMES reduce production constant -> FALSE
-- On TILDE reduce production constant -> FALSE
-- On THEN reduce production constant -> FALSE
-- On SORT reduce production constant -> FALSE
-- On RPAREN reduce production constant -> FALSE
-- On RBRACKET reduce production constant -> FALSE
-- On PLUS reduce production constant -> FALSE
-- On PERCENT reduce production constant -> FALSE
-- On OF reduce production constant -> FALSE
-- On MINUS reduce production constant -> FALSE
-- On LTGT reduce production constant -> FALSE
-- On LTEQ reduce production constant -> FALSE
-- On LT reduce production constant -> FALSE
-- On LPAREN reduce production constant -> FALSE
-- On LET reduce production constant -> FALSE
-- On LBRACKET reduce production constant -> FALSE
-- On IN reduce production constant -> FALSE
-- On IDENT reduce production constant -> FALSE
-- On GTEQ reduce production constant -> FALSE
-- On GT reduce production constant -> FALSE
-- On FUN reduce production constant -> FALSE
-- On FALSE reduce production constant -> FALSE
-- On EQGT reduce production constant -> FALSE
-- On EQ reduce production constant -> FALSE
-- On EOF reduce production constant -> FALSE
-- On END reduce production constant -> FALSE
-- On ELSE reduce production constant -> FALSE
-- On DIV reduce production constant -> FALSE
-- On DATATYPE reduce production constant -> FALSE
-- On CONSTSTRING reduce production constant -> FALSE
-- On CONSTINT reduce production constant -> FALSE
-- On CONSTFLOAT reduce production constant -> FALSE
-- On CONSTCHAR reduce production constant -> FALSE
-- On COMMA reduce production constant -> FALSE
-- On COLONCOLON reduce production constant -> FALSE
-- On COLON reduce production constant -> FALSE
-- On BARBAR reduce production constant -> FALSE
-- On BAR reduce production constant -> FALSE
-- On APPEND reduce production constant -> FALSE
-- On AND reduce production constant -> FALSE
-- On AMPERAMPER reduce production constant -> FALSE

State 24:
## Known stack suffix:
## CONSTSTRING
## LR(1) items:
constant -> CONSTSTRING . [ WITHTYPE VAL UNDERSCORE TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQGT EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production constant -> CONSTSTRING
-- On VAL reduce production constant -> CONSTSTRING
-- On UNDERSCORE reduce production constant -> CONSTSTRING
-- On TRUE reduce production constant -> CONSTSTRING
-- On TIMES reduce production constant -> CONSTSTRING
-- On TILDE reduce production constant -> CONSTSTRING
-- On THEN reduce production constant -> CONSTSTRING
-- On SORT reduce production constant -> CONSTSTRING
-- On RPAREN reduce production constant -> CONSTSTRING
-- On RBRACKET reduce production constant -> CONSTSTRING
-- On PLUS reduce production constant -> CONSTSTRING
-- On PERCENT reduce production constant -> CONSTSTRING
-- On OF reduce production constant -> CONSTSTRING
-- On MINUS reduce production constant -> CONSTSTRING
-- On LTGT reduce production constant -> CONSTSTRING
-- On LTEQ reduce production constant -> CONSTSTRING
-- On LT reduce production constant -> CONSTSTRING
-- On LPAREN reduce production constant -> CONSTSTRING
-- On LET reduce production constant -> CONSTSTRING
-- On LBRACKET reduce production constant -> CONSTSTRING
-- On IN reduce production constant -> CONSTSTRING
-- On IDENT reduce production constant -> CONSTSTRING
-- On GTEQ reduce production constant -> CONSTSTRING
-- On GT reduce production constant -> CONSTSTRING
-- On FUN reduce production constant -> CONSTSTRING
-- On FALSE reduce production constant -> CONSTSTRING
-- On EQGT reduce production constant -> CONSTSTRING
-- On EQ reduce production constant -> CONSTSTRING
-- On EOF reduce production constant -> CONSTSTRING
-- On END reduce production constant -> CONSTSTRING
-- On ELSE reduce production constant -> CONSTSTRING
-- On DIV reduce production constant -> CONSTSTRING
-- On DATATYPE reduce production constant -> CONSTSTRING
-- On CONSTSTRING reduce production constant -> CONSTSTRING
-- On CONSTINT reduce production constant -> CONSTSTRING
-- On CONSTFLOAT reduce production constant -> CONSTSTRING
-- On CONSTCHAR reduce production constant -> CONSTSTRING
-- On COMMA reduce production constant -> CONSTSTRING
-- On COLONCOLON reduce production constant -> CONSTSTRING
-- On COLON reduce production constant -> CONSTSTRING
-- On BARBAR reduce production constant -> CONSTSTRING
-- On BAR reduce production constant -> CONSTSTRING
-- On APPEND reduce production constant -> CONSTSTRING
-- On AND reduce production constant -> CONSTSTRING
-- On AMPERAMPER reduce production constant -> CONSTSTRING

State 25:
## Known stack suffix:
## CONSTINT
## LR(1) items:
constant -> CONSTINT . [ WITHTYPE VAL UNDERSCORE TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQGT EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production constant -> CONSTINT
-- On VAL reduce production constant -> CONSTINT
-- On UNDERSCORE reduce production constant -> CONSTINT
-- On TRUE reduce production constant -> CONSTINT
-- On TIMES reduce production constant -> CONSTINT
-- On TILDE reduce production constant -> CONSTINT
-- On THEN reduce production constant -> CONSTINT
-- On SORT reduce production constant -> CONSTINT
-- On RPAREN reduce production constant -> CONSTINT
-- On RBRACKET reduce production constant -> CONSTINT
-- On PLUS reduce production constant -> CONSTINT
-- On PERCENT reduce production constant -> CONSTINT
-- On OF reduce production constant -> CONSTINT
-- On MINUS reduce production constant -> CONSTINT
-- On LTGT reduce production constant -> CONSTINT
-- On LTEQ reduce production constant -> CONSTINT
-- On LT reduce production constant -> CONSTINT
-- On LPAREN reduce production constant -> CONSTINT
-- On LET reduce production constant -> CONSTINT
-- On LBRACKET reduce production constant -> CONSTINT
-- On IN reduce production constant -> CONSTINT
-- On IDENT reduce production constant -> CONSTINT
-- On GTEQ reduce production constant -> CONSTINT
-- On GT reduce production constant -> CONSTINT
-- On FUN reduce production constant -> CONSTINT
-- On FALSE reduce production constant -> CONSTINT
-- On EQGT reduce production constant -> CONSTINT
-- On EQ reduce production constant -> CONSTINT
-- On EOF reduce production constant -> CONSTINT
-- On END reduce production constant -> CONSTINT
-- On ELSE reduce production constant -> CONSTINT
-- On DIV reduce production constant -> CONSTINT
-- On DATATYPE reduce production constant -> CONSTINT
-- On CONSTSTRING reduce production constant -> CONSTINT
-- On CONSTINT reduce production constant -> CONSTINT
-- On CONSTFLOAT reduce production constant -> CONSTINT
-- On CONSTCHAR reduce production constant -> CONSTINT
-- On COMMA reduce production constant -> CONSTINT
-- On COLONCOLON reduce production constant -> CONSTINT
-- On COLON reduce production constant -> CONSTINT
-- On BARBAR reduce production constant -> CONSTINT
-- On BAR reduce production constant -> CONSTINT
-- On APPEND reduce production constant -> CONSTINT
-- On AND reduce production constant -> CONSTINT
-- On AMPERAMPER reduce production constant -> CONSTINT

State 26:
## Known stack suffix:
## CONSTFLOAT
## LR(1) items:
constant -> CONSTFLOAT . [ WITHTYPE VAL UNDERSCORE TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQGT EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production constant -> CONSTFLOAT
-- On VAL reduce production constant -> CONSTFLOAT
-- On UNDERSCORE reduce production constant -> CONSTFLOAT
-- On TRUE reduce production constant -> CONSTFLOAT
-- On TIMES reduce production constant -> CONSTFLOAT
-- On TILDE reduce production constant -> CONSTFLOAT
-- On THEN reduce production constant -> CONSTFLOAT
-- On SORT reduce production constant -> CONSTFLOAT
-- On RPAREN reduce production constant -> CONSTFLOAT
-- On RBRACKET reduce production constant -> CONSTFLOAT
-- On PLUS reduce production constant -> CONSTFLOAT
-- On PERCENT reduce production constant -> CONSTFLOAT
-- On OF reduce production constant -> CONSTFLOAT
-- On MINUS reduce production constant -> CONSTFLOAT
-- On LTGT reduce production constant -> CONSTFLOAT
-- On LTEQ reduce production constant -> CONSTFLOAT
-- On LT reduce production constant -> CONSTFLOAT
-- On LPAREN reduce production constant -> CONSTFLOAT
-- On LET reduce production constant -> CONSTFLOAT
-- On LBRACKET reduce production constant -> CONSTFLOAT
-- On IN reduce production constant -> CONSTFLOAT
-- On IDENT reduce production constant -> CONSTFLOAT
-- On GTEQ reduce production constant -> CONSTFLOAT
-- On GT reduce production constant -> CONSTFLOAT
-- On FUN reduce production constant -> CONSTFLOAT
-- On FALSE reduce production constant -> CONSTFLOAT
-- On EQGT reduce production constant -> CONSTFLOAT
-- On EQ reduce production constant -> CONSTFLOAT
-- On EOF reduce production constant -> CONSTFLOAT
-- On END reduce production constant -> CONSTFLOAT
-- On ELSE reduce production constant -> CONSTFLOAT
-- On DIV reduce production constant -> CONSTFLOAT
-- On DATATYPE reduce production constant -> CONSTFLOAT
-- On CONSTSTRING reduce production constant -> CONSTFLOAT
-- On CONSTINT reduce production constant -> CONSTFLOAT
-- On CONSTFLOAT reduce production constant -> CONSTFLOAT
-- On CONSTCHAR reduce production constant -> CONSTFLOAT
-- On COMMA reduce production constant -> CONSTFLOAT
-- On COLONCOLON reduce production constant -> CONSTFLOAT
-- On COLON reduce production constant -> CONSTFLOAT
-- On BARBAR reduce production constant -> CONSTFLOAT
-- On BAR reduce production constant -> CONSTFLOAT
-- On APPEND reduce production constant -> CONSTFLOAT
-- On AND reduce production constant -> CONSTFLOAT
-- On AMPERAMPER reduce production constant -> CONSTFLOAT

State 27:
## Known stack suffix:
## CONSTCHAR
## LR(1) items:
constant -> CONSTCHAR . [ WITHTYPE VAL UNDERSCORE TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQGT EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production constant -> CONSTCHAR
-- On VAL reduce production constant -> CONSTCHAR
-- On UNDERSCORE reduce production constant -> CONSTCHAR
-- On TRUE reduce production constant -> CONSTCHAR
-- On TIMES reduce production constant -> CONSTCHAR
-- On TILDE reduce production constant -> CONSTCHAR
-- On THEN reduce production constant -> CONSTCHAR
-- On SORT reduce production constant -> CONSTCHAR
-- On RPAREN reduce production constant -> CONSTCHAR
-- On RBRACKET reduce production constant -> CONSTCHAR
-- On PLUS reduce production constant -> CONSTCHAR
-- On PERCENT reduce production constant -> CONSTCHAR
-- On OF reduce production constant -> CONSTCHAR
-- On MINUS reduce production constant -> CONSTCHAR
-- On LTGT reduce production constant -> CONSTCHAR
-- On LTEQ reduce production constant -> CONSTCHAR
-- On LT reduce production constant -> CONSTCHAR
-- On LPAREN reduce production constant -> CONSTCHAR
-- On LET reduce production constant -> CONSTCHAR
-- On LBRACKET reduce production constant -> CONSTCHAR
-- On IN reduce production constant -> CONSTCHAR
-- On IDENT reduce production constant -> CONSTCHAR
-- On GTEQ reduce production constant -> CONSTCHAR
-- On GT reduce production constant -> CONSTCHAR
-- On FUN reduce production constant -> CONSTCHAR
-- On FALSE reduce production constant -> CONSTCHAR
-- On EQGT reduce production constant -> CONSTCHAR
-- On EQ reduce production constant -> CONSTCHAR
-- On EOF reduce production constant -> CONSTCHAR
-- On END reduce production constant -> CONSTCHAR
-- On ELSE reduce production constant -> CONSTCHAR
-- On DIV reduce production constant -> CONSTCHAR
-- On DATATYPE reduce production constant -> CONSTCHAR
-- On CONSTSTRING reduce production constant -> CONSTCHAR
-- On CONSTINT reduce production constant -> CONSTCHAR
-- On CONSTFLOAT reduce production constant -> CONSTCHAR
-- On CONSTCHAR reduce production constant -> CONSTCHAR
-- On COMMA reduce production constant -> CONSTCHAR
-- On COLONCOLON reduce production constant -> CONSTCHAR
-- On COLON reduce production constant -> CONSTCHAR
-- On BARBAR reduce production constant -> CONSTCHAR
-- On BAR reduce production constant -> CONSTCHAR
-- On APPEND reduce production constant -> CONSTCHAR
-- On AND reduce production constant -> CONSTCHAR
-- On AMPERAMPER reduce production constant -> CONSTCHAR

State 28:
## Known stack suffix:
## IDENT AS
## LR(1) items:
pattern -> IDENT AS . pattern [ RPAREN RBRACKET EQGT EQ COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 21
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 29
-- On pattern shift to state 33
-- On constant shift to state 32
## Reductions:

State 29:
## Known stack suffix:
## simple_pattern
## LR(1) items:
pattern -> simple_pattern . [ RPAREN RBRACKET EQGT EQ COMMA ]
pattern -> simple_pattern . COLONCOLON pattern [ RPAREN RBRACKET EQGT EQ COMMA ]
## Transitions:
-- On COLONCOLON shift to state 30
## Reductions:
-- On RPAREN reduce production pattern -> simple_pattern
-- On RBRACKET reduce production pattern -> simple_pattern
-- On EQGT reduce production pattern -> simple_pattern
-- On EQ reduce production pattern -> simple_pattern
-- On COMMA reduce production pattern -> simple_pattern

State 30:
## Known stack suffix:
## simple_pattern COLONCOLON
## LR(1) items:
pattern -> simple_pattern COLONCOLON . pattern [ RPAREN RBRACKET EQGT EQ COMMA ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 21
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 29
-- On pattern shift to state 31
-- On constant shift to state 32
## Reductions:

State 31:
## Known stack suffix:
## simple_pattern COLONCOLON pattern
## LR(1) items:
pattern -> simple_pattern COLONCOLON pattern . [ RPAREN RBRACKET EQGT EQ COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production pattern -> simple_pattern COLONCOLON pattern
-- On RBRACKET reduce production pattern -> simple_pattern COLONCOLON pattern
-- On EQGT reduce production pattern -> simple_pattern COLONCOLON pattern
-- On EQ reduce production pattern -> simple_pattern COLONCOLON pattern
-- On COMMA reduce production pattern -> simple_pattern COLONCOLON pattern

State 32:
## Known stack suffix:
## constant
## LR(1) items:
simple_pattern -> constant . [ UNDERSCORE TRUE RPAREN RBRACKET LPAREN LBRACKET IDENT FALSE EQGT EQ CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production simple_pattern -> constant
-- On TRUE reduce production simple_pattern -> constant
-- On RPAREN reduce production simple_pattern -> constant
-- On RBRACKET reduce production simple_pattern -> constant
-- On LPAREN reduce production simple_pattern -> constant
-- On LBRACKET reduce production simple_pattern -> constant
-- On IDENT reduce production simple_pattern -> constant
-- On FALSE reduce production simple_pattern -> constant
-- On EQGT reduce production simple_pattern -> constant
-- On EQ reduce production simple_pattern -> constant
-- On CONSTSTRING reduce production simple_pattern -> constant
-- On CONSTINT reduce production simple_pattern -> constant
-- On CONSTFLOAT reduce production simple_pattern -> constant
-- On CONSTCHAR reduce production simple_pattern -> constant
-- On COMMA reduce production simple_pattern -> constant
-- On COLONCOLON reduce production simple_pattern -> constant

State 33:
## Known stack suffix:
## IDENT AS pattern
## LR(1) items:
pattern -> IDENT AS pattern . [ RPAREN RBRACKET EQGT EQ COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production pattern -> IDENT AS pattern
-- On RBRACKET reduce production pattern -> IDENT AS pattern
-- On EQGT reduce production pattern -> IDENT AS pattern
-- On EQ reduce production pattern -> IDENT AS pattern
-- On COMMA reduce production pattern -> IDENT AS pattern

State 34:
## Known stack suffix:
## IDENT simple_pattern
## LR(1) items:
pattern -> IDENT simple_pattern . [ RPAREN RBRACKET EQGT EQ COMMA ]
## Transitions:
## Reductions:
-- On RPAREN reduce production pattern -> IDENT simple_pattern
-- On RBRACKET reduce production pattern -> IDENT simple_pattern
-- On EQGT reduce production pattern -> IDENT simple_pattern
-- On EQ reduce production pattern -> IDENT simple_pattern
-- On COMMA reduce production pattern -> IDENT simple_pattern

State 35:
## Known stack suffix:
## LBRACKET pattern_list
## LR(1) items:
simple_pattern -> LBRACKET pattern_list . RBRACKET [ UNDERSCORE TRUE RPAREN RBRACKET LPAREN LBRACKET IDENT FALSE EQGT EQ CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON ]
## Transitions:
-- On RBRACKET shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LBRACKET pattern_list RBRACKET
## LR(1) items:
simple_pattern -> LBRACKET pattern_list RBRACKET . [ UNDERSCORE TRUE RPAREN RBRACKET LPAREN LBRACKET IDENT FALSE EQGT EQ CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On TRUE reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On RPAREN reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On RBRACKET reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On LPAREN reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On LBRACKET reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On IDENT reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On FALSE reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On EQGT reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On EQ reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On CONSTSTRING reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On CONSTINT reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On CONSTFLOAT reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On CONSTCHAR reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On COMMA reduce production simple_pattern -> LBRACKET pattern_list RBRACKET
-- On COLONCOLON reduce production simple_pattern -> LBRACKET pattern_list RBRACKET

State 37:
## Known stack suffix:
## pattern
## LR(1) items:
pattern_list -> pattern . comma_pattern_list [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 38
-- On comma_pattern_list shift to state 41
## Reductions:
-- On RPAREN reduce production comma_pattern_list ->
-- On RBRACKET reduce production comma_pattern_list ->

State 38:
## Known stack suffix:
## COMMA
## LR(1) items:
comma_pattern_list -> COMMA . pattern comma_pattern_list [ RPAREN RBRACKET ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 21
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 29
-- On pattern shift to state 39
-- On constant shift to state 32
## Reductions:

State 39:
## Known stack suffix:
## COMMA pattern
## LR(1) items:
comma_pattern_list -> COMMA pattern . comma_pattern_list [ RPAREN RBRACKET ]
## Transitions:
-- On COMMA shift to state 38
-- On comma_pattern_list shift to state 40
## Reductions:
-- On RPAREN reduce production comma_pattern_list ->
-- On RBRACKET reduce production comma_pattern_list ->

State 40:
## Known stack suffix:
## COMMA pattern comma_pattern_list
## LR(1) items:
comma_pattern_list -> COMMA pattern comma_pattern_list . [ RPAREN RBRACKET ]
## Transitions:
## Reductions:
-- On RPAREN reduce production comma_pattern_list -> COMMA pattern comma_pattern_list
-- On RBRACKET reduce production comma_pattern_list -> COMMA pattern comma_pattern_list

State 41:
## Known stack suffix:
## pattern comma_pattern_list
## LR(1) items:
pattern_list -> pattern comma_pattern_list . [ RPAREN RBRACKET ]
## Transitions:
## Reductions:
-- On RPAREN reduce production pattern_list -> pattern comma_pattern_list
-- On RBRACKET reduce production pattern_list -> pattern comma_pattern_list

State 42:
## Known stack suffix:
## LPAREN pattern_list
## LR(1) items:
simple_pattern -> LPAREN pattern_list . RPAREN [ UNDERSCORE TRUE RPAREN RBRACKET LPAREN LBRACKET IDENT FALSE EQGT EQ CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON ]
## Transitions:
-- On RPAREN shift to state 43
## Reductions:

State 43:
## Known stack suffix:
## LPAREN pattern_list RPAREN
## LR(1) items:
simple_pattern -> LPAREN pattern_list RPAREN . [ UNDERSCORE TRUE RPAREN RBRACKET LPAREN LBRACKET IDENT FALSE EQGT EQ CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON ]
## Transitions:
## Reductions:
-- On UNDERSCORE reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On TRUE reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On RPAREN reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On RBRACKET reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On LPAREN reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On LBRACKET reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On IDENT reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On FALSE reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On EQGT reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On EQ reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On CONSTSTRING reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On CONSTINT reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On CONSTFLOAT reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On CONSTCHAR reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On COMMA reduce production simple_pattern -> LPAREN pattern_list RPAREN
-- On COLONCOLON reduce production simple_pattern -> LPAREN pattern_list RPAREN

State 44:
## Known stack suffix:
## IDENT
## LR(1) items:
pattern -> IDENT . simple_pattern [ EQ ]
pattern -> IDENT . AS pattern [ EQ ]
simple_pattern -> IDENT . [ EQ COLONCOLON ]
var_typ_decl -> IDENT . COLON dtype [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 22
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On COLON shift to state 45
-- On AS shift to state 28
-- On simple_pattern shift to state 34
-- On constant shift to state 32
## Reductions:
-- On EQ reduce production simple_pattern -> IDENT
-- On COLONCOLON reduce production simple_pattern -> IDENT

State 45:
## Known stack suffix:
## IDENT COLON
## LR(1) items:
var_typ_decl -> IDENT COLON . dtype [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 189
## Reductions:
-- On DOT reduce production tvar_para ->

State 46:
## Known stack suffix:
## QUOTE
## LR(1) items:
tvar -> QUOTE . IDENT [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DOT DATATYPE COMMA BAR AND ]
## Transitions:
-- On IDENT shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## QUOTE IDENT
## LR(1) items:
tvar -> QUOTE IDENT . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DOT DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production tvar -> QUOTE IDENT
-- On TIMES reduce production tvar -> QUOTE IDENT
-- On SORT reduce production tvar -> QUOTE IDENT
-- On RPAREN reduce production tvar -> QUOTE IDENT
-- On MINUSGT reduce production tvar -> QUOTE IDENT
-- On LPAREN reduce production tvar -> QUOTE IDENT
-- On IN reduce production tvar -> QUOTE IDENT
-- On IDENT reduce production tvar -> QUOTE IDENT
-- On FUN reduce production tvar -> QUOTE IDENT
-- On EOF reduce production tvar -> QUOTE IDENT
-- On DOT reduce production tvar -> QUOTE IDENT
-- On DATATYPE reduce production tvar -> QUOTE IDENT
-- On COMMA reduce production tvar -> QUOTE IDENT
-- On BAR reduce production tvar -> QUOTE IDENT
-- On AND reduce production tvar -> QUOTE IDENT

State 48:
## Known stack suffix:
## NAT
## LR(1) items:
simple_dtype -> NAT . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> NAT
-- On TIMES reduce production simple_dtype -> NAT
-- On SORT reduce production simple_dtype -> NAT
-- On RPAREN reduce production simple_dtype -> NAT
-- On MINUSGT reduce production simple_dtype -> NAT
-- On LPAREN reduce production simple_dtype -> NAT
-- On IN reduce production simple_dtype -> NAT
-- On IDENT reduce production simple_dtype -> NAT
-- On FUN reduce production simple_dtype -> NAT
-- On EOF reduce production simple_dtype -> NAT
-- On DATATYPE reduce production simple_dtype -> NAT
-- On COMMA reduce production simple_dtype -> NAT
-- On BAR reduce production simple_dtype -> NAT
-- On AND reduce production simple_dtype -> NAT

State 49:
## Known stack suffix:
## LTGT
## LR(1) items:
metric -> LTGT . [ EQGT ]
## Transitions:
## Reductions:
-- On EQGT reduce production metric -> LTGT

State 50:
## Known stack suffix:
## LT
## LR(1) items:
metric -> LT . int_index_list GT [ EQGT ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 52
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index_list shift to state 98
-- On int_index shift to state 100
-- On ident shift to state 77
## Reductions:
-- On GT reduce production int_index_list ->

State 51:
## Known stack suffix:
## MINUS
## LR(1) items:
simple_index -> MINUS . simple_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 52
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 97
-- On ident shift to state 77
## Reductions:

State 52:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_index -> LPAREN . index RPAREN [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 57
-- On index shift to state 93
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 53:
## Known stack suffix:
## LPAREN
## LR(1) items:
bool_index -> LPAREN . bool_index RPAREN [ RPAREN RBRACKET RBRACE LOR LAND COMMA BAR ]
simple_index -> LPAREN . index RPAREN [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 57
-- On index shift to state 93
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 95
## Reductions:

State 54:
## Known stack suffix:
## IDENT
## LR(1) items:
ident -> IDENT . [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LPAREN LOR LAND GTEQ GT EQ DIV COMMA COLON BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On TIMES reduce production ident -> IDENT
-- On RPAREN reduce production ident -> IDENT
-- On RBRACKET reduce production ident -> IDENT
-- On RBRACE reduce production ident -> IDENT
-- On PLUS reduce production ident -> IDENT
-- On PERCENT reduce production ident -> IDENT
-- On MINUS reduce production ident -> IDENT
-- On LTGT reduce production ident -> IDENT
-- On LTEQ reduce production ident -> IDENT
-- On LT reduce production ident -> IDENT
-- On LPAREN reduce production ident -> IDENT
-- On LOR reduce production ident -> IDENT
-- On LAND reduce production ident -> IDENT
-- On GTEQ reduce production ident -> IDENT
-- On GT reduce production ident -> IDENT
-- On EQ reduce production ident -> IDENT
-- On DIV reduce production ident -> IDENT
-- On COMMA reduce production ident -> IDENT
-- On COLON reduce production ident -> IDENT
-- On BARBAR reduce production ident -> IDENT
-- On BAR reduce production ident -> IDENT
-- On AMPERAMPER reduce production ident -> IDENT

State 55:
## Known stack suffix:
## CONSTINT
## LR(1) items:
simple_index -> CONSTINT . [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On TIMES reduce production simple_index -> CONSTINT
-- On RPAREN reduce production simple_index -> CONSTINT
-- On RBRACKET reduce production simple_index -> CONSTINT
-- On RBRACE reduce production simple_index -> CONSTINT
-- On PLUS reduce production simple_index -> CONSTINT
-- On PERCENT reduce production simple_index -> CONSTINT
-- On MINUS reduce production simple_index -> CONSTINT
-- On LTGT reduce production simple_index -> CONSTINT
-- On LTEQ reduce production simple_index -> CONSTINT
-- On LT reduce production simple_index -> CONSTINT
-- On LOR reduce production simple_index -> CONSTINT
-- On LAND reduce production simple_index -> CONSTINT
-- On GTEQ reduce production simple_index -> CONSTINT
-- On GT reduce production simple_index -> CONSTINT
-- On EQ reduce production simple_index -> CONSTINT
-- On DIV reduce production simple_index -> CONSTINT
-- On COMMA reduce production simple_index -> CONSTINT
-- On BARBAR reduce production simple_index -> CONSTINT
-- On BAR reduce production simple_index -> CONSTINT
-- On AMPERAMPER reduce production simple_index -> CONSTINT

State 56:
## Known stack suffix:
## simple_index
## LR(1) items:
int_index -> simple_index . [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On TIMES reduce production int_index -> simple_index
-- On RPAREN reduce production int_index -> simple_index
-- On RBRACKET reduce production int_index -> simple_index
-- On RBRACE reduce production int_index -> simple_index
-- On PLUS reduce production int_index -> simple_index
-- On PERCENT reduce production int_index -> simple_index
-- On MINUS reduce production int_index -> simple_index
-- On LTGT reduce production int_index -> simple_index
-- On LTEQ reduce production int_index -> simple_index
-- On LT reduce production int_index -> simple_index
-- On LOR reduce production int_index -> simple_index
-- On LAND reduce production int_index -> simple_index
-- On GTEQ reduce production int_index -> simple_index
-- On GT reduce production int_index -> simple_index
-- On EQ reduce production int_index -> simple_index
-- On DIV reduce production int_index -> simple_index
-- On COMMA reduce production int_index -> simple_index
-- On BARBAR reduce production int_index -> simple_index
-- On BAR reduce production int_index -> simple_index
-- On AMPERAMPER reduce production int_index -> simple_index

State 57:
## Known stack suffix:
## int_index
## LR(1) items:
bool_index_seq -> int_index . ind_bop2 int_index [ RPAREN RBRACKET RBRACE LTGT LTEQ LT LOR LAND GTEQ GT EQ COMMA BAR ]
index -> int_index . [ RPAREN RBRACKET RBRACE COMMA BAR ]
int_index -> int_index . ind_aop1 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
int_index -> int_index . ind_aop2 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 58
-- On PLUS shift to state 59
-- On PERCENT shift to state 60
-- On MINUS shift to state 61
-- On LTGT shift to state 62
-- On LTEQ shift to state 63
-- On LT shift to state 64
-- On GTEQ shift to state 65
-- On GT shift to state 66
-- On EQ shift to state 67
-- On DIV shift to state 68
-- On BARBAR shift to state 69
-- On AMPERAMPER shift to state 70
-- On ind_bop2 shift to state 71
-- On ind_aop2 shift to state 73
-- On ind_aop1 shift to state 75
## Reductions:
-- On RPAREN reduce production index -> int_index
-- On RBRACKET reduce production index -> int_index
-- On RBRACE reduce production index -> int_index
-- On COMMA reduce production index -> int_index
-- On BAR reduce production index -> int_index

State 58:
## Known stack suffix:
## TIMES
## LR(1) items:
ind_aop2 -> TIMES . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_aop2 -> TIMES
-- On LPAREN reduce production ind_aop2 -> TIMES
-- On IDENT reduce production ind_aop2 -> TIMES
-- On CONSTINT reduce production ind_aop2 -> TIMES

State 59:
## Known stack suffix:
## PLUS
## LR(1) items:
ind_aop1 -> PLUS . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_aop1 -> PLUS
-- On LPAREN reduce production ind_aop1 -> PLUS
-- On IDENT reduce production ind_aop1 -> PLUS
-- On CONSTINT reduce production ind_aop1 -> PLUS

State 60:
## Known stack suffix:
## PERCENT
## LR(1) items:
ind_aop2 -> PERCENT . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_aop2 -> PERCENT
-- On LPAREN reduce production ind_aop2 -> PERCENT
-- On IDENT reduce production ind_aop2 -> PERCENT
-- On CONSTINT reduce production ind_aop2 -> PERCENT

State 61:
## Known stack suffix:
## MINUS
## LR(1) items:
ind_aop1 -> MINUS . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_aop1 -> MINUS
-- On LPAREN reduce production ind_aop1 -> MINUS
-- On IDENT reduce production ind_aop1 -> MINUS
-- On CONSTINT reduce production ind_aop1 -> MINUS

State 62:
## Known stack suffix:
## LTGT
## LR(1) items:
ind_bop2 -> LTGT . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_bop2 -> LTGT
-- On LPAREN reduce production ind_bop2 -> LTGT
-- On IDENT reduce production ind_bop2 -> LTGT
-- On CONSTINT reduce production ind_bop2 -> LTGT

State 63:
## Known stack suffix:
## LTEQ
## LR(1) items:
ind_bop2 -> LTEQ . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_bop2 -> LTEQ
-- On LPAREN reduce production ind_bop2 -> LTEQ
-- On IDENT reduce production ind_bop2 -> LTEQ
-- On CONSTINT reduce production ind_bop2 -> LTEQ

State 64:
## Known stack suffix:
## LT
## LR(1) items:
ind_bop2 -> LT . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_bop2 -> LT
-- On LPAREN reduce production ind_bop2 -> LT
-- On IDENT reduce production ind_bop2 -> LT
-- On CONSTINT reduce production ind_bop2 -> LT

State 65:
## Known stack suffix:
## GTEQ
## LR(1) items:
ind_bop2 -> GTEQ . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_bop2 -> GTEQ
-- On LPAREN reduce production ind_bop2 -> GTEQ
-- On IDENT reduce production ind_bop2 -> GTEQ
-- On CONSTINT reduce production ind_bop2 -> GTEQ

State 66:
## Known stack suffix:
## GT
## LR(1) items:
ind_bop2 -> GT . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_bop2 -> GT
-- On LPAREN reduce production ind_bop2 -> GT
-- On IDENT reduce production ind_bop2 -> GT
-- On CONSTINT reduce production ind_bop2 -> GT

State 67:
## Known stack suffix:
## EQ
## LR(1) items:
ind_bop2 -> EQ . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_bop2 -> EQ
-- On LPAREN reduce production ind_bop2 -> EQ
-- On IDENT reduce production ind_bop2 -> EQ
-- On CONSTINT reduce production ind_bop2 -> EQ

State 68:
## Known stack suffix:
## DIV
## LR(1) items:
ind_aop2 -> DIV . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_aop2 -> DIV
-- On LPAREN reduce production ind_aop2 -> DIV
-- On IDENT reduce production ind_aop2 -> DIV
-- On CONSTINT reduce production ind_aop2 -> DIV

State 69:
## Known stack suffix:
## BARBAR
## LR(1) items:
ind_aop1 -> BARBAR . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_aop1 -> BARBAR
-- On LPAREN reduce production ind_aop1 -> BARBAR
-- On IDENT reduce production ind_aop1 -> BARBAR
-- On CONSTINT reduce production ind_aop1 -> BARBAR

State 70:
## Known stack suffix:
## AMPERAMPER
## LR(1) items:
ind_aop2 -> AMPERAMPER . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_aop2 -> AMPERAMPER
-- On LPAREN reduce production ind_aop2 -> AMPERAMPER
-- On IDENT reduce production ind_aop2 -> AMPERAMPER
-- On CONSTINT reduce production ind_aop2 -> AMPERAMPER

State 71:
## Known stack suffix:
## int_index ind_bop2
## LR(1) items:
bool_index_seq -> int_index ind_bop2 . int_index [ RPAREN RBRACKET RBRACE LTGT LTEQ LT LOR LAND GTEQ GT EQ COMMA BAR ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 52
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 72
-- On ident shift to state 77
## Reductions:

State 72:
## Known stack suffix:
## int_index ind_bop2 int_index
## LR(1) items:
bool_index_seq -> int_index ind_bop2 int_index . [ RPAREN RBRACKET RBRACE LTGT LTEQ LT LOR LAND GTEQ GT EQ COMMA BAR ]
int_index -> int_index . ind_aop1 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
int_index -> int_index . ind_aop2 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 58
-- On PLUS shift to state 59
-- On PERCENT shift to state 60
-- On MINUS shift to state 61
-- On DIV shift to state 68
-- On BARBAR shift to state 69
-- On AMPERAMPER shift to state 70
-- On ind_aop2 shift to state 73
-- On ind_aop1 shift to state 75
## Reductions:
-- On RPAREN reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On RBRACKET reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On RBRACE reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On LTGT reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On LTEQ reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On LT reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On LOR reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On LAND reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On GTEQ reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On GT reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On EQ reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On COMMA reduce production bool_index_seq -> int_index ind_bop2 int_index
-- On BAR reduce production bool_index_seq -> int_index ind_bop2 int_index

State 73:
## Known stack suffix:
## int_index ind_aop2
## LR(1) items:
int_index -> int_index ind_aop2 . int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 52
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 74
-- On ident shift to state 77
## Reductions:

State 74:
## Known stack suffix:
## int_index ind_aop2 int_index
## LR(1) items:
int_index -> int_index . ind_aop1 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
int_index -> int_index . ind_aop2 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
int_index -> int_index ind_aop2 int_index . [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On ind_aop2 shift to state 73
-- On ind_aop1 shift to state 75
## Reductions:
-- On TIMES reduce production int_index -> int_index ind_aop2 int_index
-- On RPAREN reduce production int_index -> int_index ind_aop2 int_index
-- On RBRACKET reduce production int_index -> int_index ind_aop2 int_index
-- On RBRACE reduce production int_index -> int_index ind_aop2 int_index
-- On PLUS reduce production int_index -> int_index ind_aop2 int_index
-- On PERCENT reduce production int_index -> int_index ind_aop2 int_index
-- On MINUS reduce production int_index -> int_index ind_aop2 int_index
-- On LTGT reduce production int_index -> int_index ind_aop2 int_index
-- On LTEQ reduce production int_index -> int_index ind_aop2 int_index
-- On LT reduce production int_index -> int_index ind_aop2 int_index
-- On LOR reduce production int_index -> int_index ind_aop2 int_index
-- On LAND reduce production int_index -> int_index ind_aop2 int_index
-- On GTEQ reduce production int_index -> int_index ind_aop2 int_index
-- On GT reduce production int_index -> int_index ind_aop2 int_index
-- On EQ reduce production int_index -> int_index ind_aop2 int_index
-- On DIV reduce production int_index -> int_index ind_aop2 int_index
-- On COMMA reduce production int_index -> int_index ind_aop2 int_index
-- On BARBAR reduce production int_index -> int_index ind_aop2 int_index
-- On BAR reduce production int_index -> int_index ind_aop2 int_index
-- On AMPERAMPER reduce production int_index -> int_index ind_aop2 int_index

State 75:
## Known stack suffix:
## int_index ind_aop1
## LR(1) items:
int_index -> int_index ind_aop1 . int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 52
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 76
-- On ident shift to state 77
## Reductions:

State 76:
## Known stack suffix:
## int_index ind_aop1 int_index
## LR(1) items:
int_index -> int_index . ind_aop1 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
int_index -> int_index ind_aop1 int_index . [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
int_index -> int_index . ind_aop2 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 58
-- On PERCENT shift to state 60
-- On DIV shift to state 68
-- On ind_aop2 shift to state 73
-- On ind_aop1 shift to state 75
## Reductions:
-- On RPAREN reduce production int_index -> int_index ind_aop1 int_index
-- On RBRACKET reduce production int_index -> int_index ind_aop1 int_index
-- On RBRACE reduce production int_index -> int_index ind_aop1 int_index
-- On PLUS reduce production int_index -> int_index ind_aop1 int_index
-- On MINUS reduce production int_index -> int_index ind_aop1 int_index
-- On LTGT reduce production int_index -> int_index ind_aop1 int_index
-- On LTEQ reduce production int_index -> int_index ind_aop1 int_index
-- On LT reduce production int_index -> int_index ind_aop1 int_index
-- On LOR reduce production int_index -> int_index ind_aop1 int_index
-- On LAND reduce production int_index -> int_index ind_aop1 int_index
-- On GTEQ reduce production int_index -> int_index ind_aop1 int_index
-- On GT reduce production int_index -> int_index ind_aop1 int_index
-- On EQ reduce production int_index -> int_index ind_aop1 int_index
-- On COMMA reduce production int_index -> int_index ind_aop1 int_index
-- On BARBAR reduce production int_index -> int_index ind_aop1 int_index
-- On BAR reduce production int_index -> int_index ind_aop1 int_index
-- On AMPERAMPER reduce production int_index -> int_index ind_aop1 int_index

State 77:
## Known stack suffix:
## ident
## LR(1) items:
simple_index -> ident . [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
simple_index -> ident . LPAREN open_comma_index_list [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 78
## Reductions:
-- On TIMES reduce production simple_index -> ident
-- On RPAREN reduce production simple_index -> ident
-- On RBRACKET reduce production simple_index -> ident
-- On RBRACE reduce production simple_index -> ident
-- On PLUS reduce production simple_index -> ident
-- On PERCENT reduce production simple_index -> ident
-- On MINUS reduce production simple_index -> ident
-- On LTGT reduce production simple_index -> ident
-- On LTEQ reduce production simple_index -> ident
-- On LT reduce production simple_index -> ident
-- On LOR reduce production simple_index -> ident
-- On LAND reduce production simple_index -> ident
-- On GTEQ reduce production simple_index -> ident
-- On GT reduce production simple_index -> ident
-- On EQ reduce production simple_index -> ident
-- On DIV reduce production simple_index -> ident
-- On COMMA reduce production simple_index -> ident
-- On BARBAR reduce production simple_index -> ident
-- On BAR reduce production simple_index -> ident
-- On AMPERAMPER reduce production simple_index -> ident

State 78:
## Known stack suffix:
## ident LPAREN
## LR(1) items:
simple_index -> ident LPAREN . open_comma_index_list [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On open_comma_index_list shift to state 79
-- On int_index shift to state 57
-- On index shift to state 80
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 79:
## Known stack suffix:
## ident LPAREN open_comma_index_list
## LR(1) items:
simple_index -> ident LPAREN open_comma_index_list . [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On TIMES reduce production simple_index -> ident LPAREN open_comma_index_list
-- On RPAREN reduce production simple_index -> ident LPAREN open_comma_index_list
-- On RBRACKET reduce production simple_index -> ident LPAREN open_comma_index_list
-- On RBRACE reduce production simple_index -> ident LPAREN open_comma_index_list
-- On PLUS reduce production simple_index -> ident LPAREN open_comma_index_list
-- On PERCENT reduce production simple_index -> ident LPAREN open_comma_index_list
-- On MINUS reduce production simple_index -> ident LPAREN open_comma_index_list
-- On LTGT reduce production simple_index -> ident LPAREN open_comma_index_list
-- On LTEQ reduce production simple_index -> ident LPAREN open_comma_index_list
-- On LT reduce production simple_index -> ident LPAREN open_comma_index_list
-- On LOR reduce production simple_index -> ident LPAREN open_comma_index_list
-- On LAND reduce production simple_index -> ident LPAREN open_comma_index_list
-- On GTEQ reduce production simple_index -> ident LPAREN open_comma_index_list
-- On GT reduce production simple_index -> ident LPAREN open_comma_index_list
-- On EQ reduce production simple_index -> ident LPAREN open_comma_index_list
-- On DIV reduce production simple_index -> ident LPAREN open_comma_index_list
-- On COMMA reduce production simple_index -> ident LPAREN open_comma_index_list
-- On BARBAR reduce production simple_index -> ident LPAREN open_comma_index_list
-- On BAR reduce production simple_index -> ident LPAREN open_comma_index_list
-- On AMPERAMPER reduce production simple_index -> ident LPAREN open_comma_index_list

State 80:
## Known stack suffix:
## index
## LR(1) items:
open_comma_index_list -> index . COMMA open_comma_index_list [ VAL TIMES SORT RPAREN RBRACKET RBRACE PLUS PERCENT OF MINUSGT MINUS LTGT LTEQ LT LPAREN LOR LAND IN IDENT GTEQ GT FUN EQ EOF DIV DATATYPE COMMA BARBAR BAR AND AMPERAMPER ]
open_comma_index_list -> index . RPAREN [ VAL TIMES SORT RPAREN RBRACKET RBRACE PLUS PERCENT OF MINUSGT MINUS LTGT LTEQ LT LPAREN LOR LAND IN IDENT GTEQ GT FUN EQ EOF DIV DATATYPE COMMA BARBAR BAR AND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 81
-- On COMMA shift to state 82
## Reductions:

State 81:
## Known stack suffix:
## index RPAREN
## LR(1) items:
open_comma_index_list -> index RPAREN . [ VAL TIMES SORT RPAREN RBRACKET RBRACE PLUS PERCENT OF MINUSGT MINUS LTGT LTEQ LT LPAREN LOR LAND IN IDENT GTEQ GT FUN EQ EOF DIV DATATYPE COMMA BARBAR BAR AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On VAL reduce production open_comma_index_list -> index RPAREN
-- On TIMES reduce production open_comma_index_list -> index RPAREN
-- On SORT reduce production open_comma_index_list -> index RPAREN
-- On RPAREN reduce production open_comma_index_list -> index RPAREN
-- On RBRACKET reduce production open_comma_index_list -> index RPAREN
-- On RBRACE reduce production open_comma_index_list -> index RPAREN
-- On PLUS reduce production open_comma_index_list -> index RPAREN
-- On PERCENT reduce production open_comma_index_list -> index RPAREN
-- On OF reduce production open_comma_index_list -> index RPAREN
-- On MINUSGT reduce production open_comma_index_list -> index RPAREN
-- On MINUS reduce production open_comma_index_list -> index RPAREN
-- On LTGT reduce production open_comma_index_list -> index RPAREN
-- On LTEQ reduce production open_comma_index_list -> index RPAREN
-- On LT reduce production open_comma_index_list -> index RPAREN
-- On LPAREN reduce production open_comma_index_list -> index RPAREN
-- On LOR reduce production open_comma_index_list -> index RPAREN
-- On LAND reduce production open_comma_index_list -> index RPAREN
-- On IN reduce production open_comma_index_list -> index RPAREN
-- On IDENT reduce production open_comma_index_list -> index RPAREN
-- On GTEQ reduce production open_comma_index_list -> index RPAREN
-- On GT reduce production open_comma_index_list -> index RPAREN
-- On FUN reduce production open_comma_index_list -> index RPAREN
-- On EQ reduce production open_comma_index_list -> index RPAREN
-- On EOF reduce production open_comma_index_list -> index RPAREN
-- On DIV reduce production open_comma_index_list -> index RPAREN
-- On DATATYPE reduce production open_comma_index_list -> index RPAREN
-- On COMMA reduce production open_comma_index_list -> index RPAREN
-- On BARBAR reduce production open_comma_index_list -> index RPAREN
-- On BAR reduce production open_comma_index_list -> index RPAREN
-- On AND reduce production open_comma_index_list -> index RPAREN
-- On AMPERAMPER reduce production open_comma_index_list -> index RPAREN

State 82:
## Known stack suffix:
## index COMMA
## LR(1) items:
open_comma_index_list -> index COMMA . open_comma_index_list [ VAL TIMES SORT RPAREN RBRACKET RBRACE PLUS PERCENT OF MINUSGT MINUS LTGT LTEQ LT LPAREN LOR LAND IN IDENT GTEQ GT FUN EQ EOF DIV DATATYPE COMMA BARBAR BAR AND AMPERAMPER ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On open_comma_index_list shift to state 83
-- On int_index shift to state 57
-- On index shift to state 80
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 83:
## Known stack suffix:
## index COMMA open_comma_index_list
## LR(1) items:
open_comma_index_list -> index COMMA open_comma_index_list . [ VAL TIMES SORT RPAREN RBRACKET RBRACE PLUS PERCENT OF MINUSGT MINUS LTGT LTEQ LT LPAREN LOR LAND IN IDENT GTEQ GT FUN EQ EOF DIV DATATYPE COMMA BARBAR BAR AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On VAL reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On TIMES reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On SORT reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On RPAREN reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On RBRACKET reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On RBRACE reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On PLUS reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On PERCENT reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On OF reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On MINUSGT reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On MINUS reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On LTGT reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On LTEQ reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On LT reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On LPAREN reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On LOR reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On LAND reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On IN reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On IDENT reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On GTEQ reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On GT reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On FUN reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On EQ reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On EOF reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On DIV reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On DATATYPE reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On COMMA reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On BARBAR reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On BAR reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On AND reduce production open_comma_index_list -> index COMMA open_comma_index_list
-- On AMPERAMPER reduce production open_comma_index_list -> index COMMA open_comma_index_list

State 84:
## Known stack suffix:
## bool_index_seq
## LR(1) items:
bool_index -> bool_index_seq . [ RPAREN RBRACKET RBRACE LOR LAND COMMA BAR ]
bool_index_seq -> bool_index_seq . ind_bop2 int_index [ RPAREN RBRACKET RBRACE LTGT LTEQ LT LOR LAND GTEQ GT EQ COMMA BAR ]
## Transitions:
-- On LTGT shift to state 62
-- On LTEQ shift to state 63
-- On LT shift to state 64
-- On GTEQ shift to state 65
-- On GT shift to state 66
-- On EQ shift to state 67
-- On ind_bop2 shift to state 85
## Reductions:
-- On RPAREN reduce production bool_index -> bool_index_seq
-- On RBRACKET reduce production bool_index -> bool_index_seq
-- On RBRACE reduce production bool_index -> bool_index_seq
-- On LOR reduce production bool_index -> bool_index_seq
-- On LAND reduce production bool_index -> bool_index_seq
-- On COMMA reduce production bool_index -> bool_index_seq
-- On BAR reduce production bool_index -> bool_index_seq

State 85:
## Known stack suffix:
## bool_index_seq ind_bop2
## LR(1) items:
bool_index_seq -> bool_index_seq ind_bop2 . int_index [ RPAREN RBRACKET RBRACE LTGT LTEQ LT LOR LAND GTEQ GT EQ COMMA BAR ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 52
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 86
-- On ident shift to state 77
## Reductions:

State 86:
## Known stack suffix:
## bool_index_seq ind_bop2 int_index
## LR(1) items:
bool_index_seq -> bool_index_seq ind_bop2 int_index . [ RPAREN RBRACKET RBRACE LTGT LTEQ LT LOR LAND GTEQ GT EQ COMMA BAR ]
int_index -> int_index . ind_aop1 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
int_index -> int_index . ind_aop2 int_index [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 58
-- On PLUS shift to state 59
-- On PERCENT shift to state 60
-- On MINUS shift to state 61
-- On DIV shift to state 68
-- On BARBAR shift to state 69
-- On AMPERAMPER shift to state 70
-- On ind_aop2 shift to state 73
-- On ind_aop1 shift to state 75
## Reductions:
-- On RPAREN reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On RBRACKET reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On RBRACE reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On LTGT reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On LTEQ reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On LT reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On LOR reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On LAND reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On GTEQ reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On GT reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On EQ reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On COMMA reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index
-- On BAR reduce production bool_index_seq -> bool_index_seq ind_bop2 int_index

State 87:
## Known stack suffix:
## bool_index
## LR(1) items:
bool_index -> bool_index . ind_bop1 bool_index [ RPAREN RBRACKET RBRACE LOR LAND COMMA BAR ]
index -> bool_index . [ RPAREN RBRACKET RBRACE COMMA BAR ]
## Transitions:
-- On LOR shift to state 88
-- On LAND shift to state 89
-- On ind_bop1 shift to state 90
## Reductions:
-- On RPAREN reduce production index -> bool_index
-- On RBRACKET reduce production index -> bool_index
-- On RBRACE reduce production index -> bool_index
-- On COMMA reduce production index -> bool_index
-- On BAR reduce production index -> bool_index

State 88:
## Known stack suffix:
## LOR
## LR(1) items:
ind_bop1 -> LOR . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_bop1 -> LOR
-- On LPAREN reduce production ind_bop1 -> LOR
-- On IDENT reduce production ind_bop1 -> LOR
-- On CONSTINT reduce production ind_bop1 -> LOR

State 89:
## Known stack suffix:
## LAND
## LR(1) items:
ind_bop1 -> LAND . [ MINUS LPAREN IDENT CONSTINT ]
## Transitions:
## Reductions:
-- On MINUS reduce production ind_bop1 -> LAND
-- On LPAREN reduce production ind_bop1 -> LAND
-- On IDENT reduce production ind_bop1 -> LAND
-- On CONSTINT reduce production ind_bop1 -> LAND

State 90:
## Known stack suffix:
## bool_index ind_bop1
## LR(1) items:
bool_index -> bool_index ind_bop1 . bool_index [ RPAREN RBRACKET RBRACE LOR LAND COMMA BAR ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 91
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 92
## Reductions:

State 91:
## Known stack suffix:
## int_index
## LR(1) items:
bool_index_seq -> int_index . ind_bop2 int_index [ RPAREN RBRACKET RBRACE LTGT LTEQ LT LOR LAND GTEQ GT EQ COMMA BAR ]
int_index -> int_index . ind_aop1 int_index [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV BARBAR AMPERAMPER ]
int_index -> int_index . ind_aop2 int_index [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV BARBAR AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 58
-- On PLUS shift to state 59
-- On PERCENT shift to state 60
-- On MINUS shift to state 61
-- On LTGT shift to state 62
-- On LTEQ shift to state 63
-- On LT shift to state 64
-- On GTEQ shift to state 65
-- On GT shift to state 66
-- On EQ shift to state 67
-- On DIV shift to state 68
-- On BARBAR shift to state 69
-- On AMPERAMPER shift to state 70
-- On ind_bop2 shift to state 71
-- On ind_aop2 shift to state 73
-- On ind_aop1 shift to state 75
## Reductions:

State 92:
## Known stack suffix:
## bool_index ind_bop1 bool_index
## LR(1) items:
bool_index -> bool_index . ind_bop1 bool_index [ RPAREN RBRACKET RBRACE LOR LAND COMMA BAR ]
bool_index -> bool_index ind_bop1 bool_index . [ RPAREN RBRACKET RBRACE LOR LAND COMMA BAR ]
## Transitions:
-- On LOR shift to state 88
-- On LAND shift to state 89
-- On ind_bop1 shift to state 90
## Reductions:
-- On RPAREN reduce production bool_index -> bool_index ind_bop1 bool_index
-- On RBRACKET reduce production bool_index -> bool_index ind_bop1 bool_index
-- On RBRACE reduce production bool_index -> bool_index ind_bop1 bool_index
-- On LOR reduce production bool_index -> bool_index ind_bop1 bool_index
-- On LAND reduce production bool_index -> bool_index ind_bop1 bool_index
-- On COMMA reduce production bool_index -> bool_index ind_bop1 bool_index
-- On BAR reduce production bool_index -> bool_index ind_bop1 bool_index
** Conflict on LOR LAND

State 93:
## Known stack suffix:
## LPAREN index
## LR(1) items:
simple_index -> LPAREN index . RPAREN [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## LPAREN index RPAREN
## LR(1) items:
simple_index -> LPAREN index RPAREN . [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On TIMES reduce production simple_index -> LPAREN index RPAREN
-- On RPAREN reduce production simple_index -> LPAREN index RPAREN
-- On RBRACKET reduce production simple_index -> LPAREN index RPAREN
-- On RBRACE reduce production simple_index -> LPAREN index RPAREN
-- On PLUS reduce production simple_index -> LPAREN index RPAREN
-- On PERCENT reduce production simple_index -> LPAREN index RPAREN
-- On MINUS reduce production simple_index -> LPAREN index RPAREN
-- On LTGT reduce production simple_index -> LPAREN index RPAREN
-- On LTEQ reduce production simple_index -> LPAREN index RPAREN
-- On LT reduce production simple_index -> LPAREN index RPAREN
-- On LOR reduce production simple_index -> LPAREN index RPAREN
-- On LAND reduce production simple_index -> LPAREN index RPAREN
-- On GTEQ reduce production simple_index -> LPAREN index RPAREN
-- On GT reduce production simple_index -> LPAREN index RPAREN
-- On EQ reduce production simple_index -> LPAREN index RPAREN
-- On DIV reduce production simple_index -> LPAREN index RPAREN
-- On COMMA reduce production simple_index -> LPAREN index RPAREN
-- On BARBAR reduce production simple_index -> LPAREN index RPAREN
-- On BAR reduce production simple_index -> LPAREN index RPAREN
-- On AMPERAMPER reduce production simple_index -> LPAREN index RPAREN

State 95:
## Known stack suffix:
## LPAREN bool_index
## LR(1) items:
bool_index -> bool_index . ind_bop1 bool_index [ RPAREN LOR LAND ]
bool_index -> LPAREN bool_index . RPAREN [ RPAREN RBRACKET RBRACE LOR LAND COMMA BAR ]
index -> bool_index . [ RPAREN ]
## Transitions:
-- On RPAREN shift to state 96
-- On LOR shift to state 88
-- On LAND shift to state 89
-- On ind_bop1 shift to state 90
## Reductions:
-- On RPAREN reduce production index -> bool_index
** Conflict on RPAREN

State 96:
## Known stack suffix:
## LPAREN bool_index RPAREN
## LR(1) items:
bool_index -> LPAREN bool_index RPAREN . [ RPAREN RBRACKET RBRACE LOR LAND COMMA BAR ]
## Transitions:
## Reductions:
-- On RPAREN reduce production bool_index -> LPAREN bool_index RPAREN
-- On RBRACKET reduce production bool_index -> LPAREN bool_index RPAREN
-- On RBRACE reduce production bool_index -> LPAREN bool_index RPAREN
-- On LOR reduce production bool_index -> LPAREN bool_index RPAREN
-- On LAND reduce production bool_index -> LPAREN bool_index RPAREN
-- On COMMA reduce production bool_index -> LPAREN bool_index RPAREN
-- On BAR reduce production bool_index -> LPAREN bool_index RPAREN

State 97:
## Known stack suffix:
## MINUS simple_index
## LR(1) items:
simple_index -> MINUS simple_index . [ TIMES RPAREN RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT LOR LAND GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
## Reductions:
-- On TIMES reduce production simple_index -> MINUS simple_index
-- On RPAREN reduce production simple_index -> MINUS simple_index
-- On RBRACKET reduce production simple_index -> MINUS simple_index
-- On RBRACE reduce production simple_index -> MINUS simple_index
-- On PLUS reduce production simple_index -> MINUS simple_index
-- On PERCENT reduce production simple_index -> MINUS simple_index
-- On MINUS reduce production simple_index -> MINUS simple_index
-- On LTGT reduce production simple_index -> MINUS simple_index
-- On LTEQ reduce production simple_index -> MINUS simple_index
-- On LT reduce production simple_index -> MINUS simple_index
-- On LOR reduce production simple_index -> MINUS simple_index
-- On LAND reduce production simple_index -> MINUS simple_index
-- On GTEQ reduce production simple_index -> MINUS simple_index
-- On GT reduce production simple_index -> MINUS simple_index
-- On EQ reduce production simple_index -> MINUS simple_index
-- On DIV reduce production simple_index -> MINUS simple_index
-- On COMMA reduce production simple_index -> MINUS simple_index
-- On BARBAR reduce production simple_index -> MINUS simple_index
-- On BAR reduce production simple_index -> MINUS simple_index
-- On AMPERAMPER reduce production simple_index -> MINUS simple_index

State 98:
## Known stack suffix:
## LT int_index_list
## LR(1) items:
metric -> LT int_index_list . GT [ EQGT ]
## Transitions:
-- On GT shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## LT int_index_list GT
## LR(1) items:
metric -> LT int_index_list GT . [ EQGT ]
## Transitions:
## Reductions:
-- On EQGT reduce production metric -> LT int_index_list GT

State 100:
## Known stack suffix:
## int_index
## LR(1) items:
int_index -> int_index . ind_aop1 int_index [ TIMES PLUS PERCENT MINUS GT DIV COMMA BARBAR AMPERAMPER ]
int_index -> int_index . ind_aop2 int_index [ TIMES PLUS PERCENT MINUS GT DIV COMMA BARBAR AMPERAMPER ]
int_index_list -> int_index . comma_int_index_list [ GT ]
## Transitions:
-- On TIMES shift to state 58
-- On PLUS shift to state 59
-- On PERCENT shift to state 60
-- On MINUS shift to state 61
-- On DIV shift to state 68
-- On COMMA shift to state 101
-- On BARBAR shift to state 69
-- On AMPERAMPER shift to state 70
-- On ind_aop2 shift to state 73
-- On ind_aop1 shift to state 75
-- On comma_int_index_list shift to state 104
## Reductions:
-- On GT reduce production comma_int_index_list ->

State 101:
## Known stack suffix:
## COMMA
## LR(1) items:
comma_int_index_list -> COMMA . int_index comma_int_index_list [ GT ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 52
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 102
-- On ident shift to state 77
## Reductions:

State 102:
## Known stack suffix:
## COMMA int_index
## LR(1) items:
comma_int_index_list -> COMMA int_index . comma_int_index_list [ GT ]
int_index -> int_index . ind_aop1 int_index [ TIMES PLUS PERCENT MINUS GT DIV COMMA BARBAR AMPERAMPER ]
int_index -> int_index . ind_aop2 int_index [ TIMES PLUS PERCENT MINUS GT DIV COMMA BARBAR AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 58
-- On PLUS shift to state 59
-- On PERCENT shift to state 60
-- On MINUS shift to state 61
-- On DIV shift to state 68
-- On COMMA shift to state 101
-- On BARBAR shift to state 69
-- On AMPERAMPER shift to state 70
-- On ind_aop2 shift to state 73
-- On ind_aop1 shift to state 75
-- On comma_int_index_list shift to state 103
## Reductions:
-- On GT reduce production comma_int_index_list ->

State 103:
## Known stack suffix:
## COMMA int_index comma_int_index_list
## LR(1) items:
comma_int_index_list -> COMMA int_index comma_int_index_list . [ GT ]
## Transitions:
## Reductions:
-- On GT reduce production comma_int_index_list -> COMMA int_index comma_int_index_list

State 104:
## Known stack suffix:
## int_index comma_int_index_list
## LR(1) items:
int_index_list -> int_index comma_int_index_list . [ GT ]
## Transitions:
## Reductions:
-- On GT reduce production int_index_list -> int_index comma_int_index_list

State 105:
## Known stack suffix:
## LPAREN
## LR(1) items:
named_dtype -> LPAREN . dtype open_comma_dtype_list IDENT [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> LPAREN . dtype RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
tvar_para -> LPAREN . open_tvar_para [ DOT ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 183
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On open_tvar_para shift to state 188
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 171
## Reductions:
-- On DOT reduce production tvar_para ->

State 106:
## Known stack suffix:
## LBRACKET
## LR(1) items:
exi_ivar_decls -> LBRACKET . ivar_decls RBRACKET [ QUOTE NAT LPAREN LBRACKET INT IDENT BOOL ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On ivar_decls shift to state 107
-- On ivar_decl shift to state 109
-- On iprop shift to state 112
-- On int_index shift to state 57
-- On index shift to state 113
-- On ident shift to state 114
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 107:
## Known stack suffix:
## LBRACKET ivar_decls
## LR(1) items:
exi_ivar_decls -> LBRACKET ivar_decls . RBRACKET [ QUOTE NAT LPAREN LBRACKET INT IDENT BOOL ]
## Transitions:
-- On RBRACKET shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## LBRACKET ivar_decls RBRACKET
## LR(1) items:
exi_ivar_decls -> LBRACKET ivar_decls RBRACKET . [ QUOTE NAT LPAREN LBRACKET INT IDENT BOOL ]
## Transitions:
## Reductions:
-- On QUOTE reduce production exi_ivar_decls -> LBRACKET ivar_decls RBRACKET
-- On NAT reduce production exi_ivar_decls -> LBRACKET ivar_decls RBRACKET
-- On LPAREN reduce production exi_ivar_decls -> LBRACKET ivar_decls RBRACKET
-- On LBRACKET reduce production exi_ivar_decls -> LBRACKET ivar_decls RBRACKET
-- On INT reduce production exi_ivar_decls -> LBRACKET ivar_decls RBRACKET
-- On IDENT reduce production exi_ivar_decls -> LBRACKET ivar_decls RBRACKET
-- On BOOL reduce production exi_ivar_decls -> LBRACKET ivar_decls RBRACKET

State 109:
## Known stack suffix:
## ivar_decl
## LR(1) items:
ivar_decls -> ivar_decl . COMMA ivar_decls [ RBRACKET RBRACE ]
ivar_decls -> ivar_decl . BAR ivar_decls [ RBRACKET RBRACE ]
ivar_decls -> ivar_decl . [ RBRACKET RBRACE ]
## Transitions:
-- On COMMA shift to state 110
-- On BAR shift to state 127
## Reductions:
-- On RBRACKET reduce production ivar_decls -> ivar_decl
-- On RBRACE reduce production ivar_decls -> ivar_decl

State 110:
## Known stack suffix:
## ivar_decl COMMA
## LR(1) items:
ivar_decls -> ivar_decl COMMA . ivar_decls [ RBRACKET RBRACE ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On ivar_decls shift to state 111
-- On ivar_decl shift to state 109
-- On iprop shift to state 112
-- On int_index shift to state 57
-- On index shift to state 113
-- On ident shift to state 114
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 111:
## Known stack suffix:
## ivar_decl COMMA ivar_decls
## LR(1) items:
ivar_decls -> ivar_decl COMMA ivar_decls . [ RBRACKET RBRACE ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production ivar_decls -> ivar_decl COMMA ivar_decls
-- On RBRACE reduce production ivar_decls -> ivar_decl COMMA ivar_decls

State 112:
## Known stack suffix:
## iprop
## LR(1) items:
ivar_decl -> iprop . [ RBRACKET RBRACE COMMA BAR ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production ivar_decl -> iprop
-- On RBRACE reduce production ivar_decl -> iprop
-- On COMMA reduce production ivar_decl -> iprop
-- On BAR reduce production ivar_decl -> iprop

State 113:
## Known stack suffix:
## index
## LR(1) items:
iprop -> index . [ RBRACKET RBRACE COMMA BAR ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production iprop -> index
-- On RBRACE reduce production iprop -> index
-- On COMMA reduce production iprop -> index
-- On BAR reduce production iprop -> index

State 114:
## Known stack suffix:
## ident
## LR(1) items:
ivar_decl -> ident . COLON isort [ RBRACKET RBRACE COMMA BAR ]
simple_index -> ident . [ TIMES RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
simple_index -> ident . LPAREN open_comma_index_list [ TIMES RBRACKET RBRACE PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA BARBAR BAR AMPERAMPER ]
## Transitions:
-- On LPAREN shift to state 78
-- On COLON shift to state 115
## Reductions:
-- On TIMES reduce production simple_index -> ident
-- On RBRACKET reduce production simple_index -> ident
-- On RBRACE reduce production simple_index -> ident
-- On PLUS reduce production simple_index -> ident
-- On PERCENT reduce production simple_index -> ident
-- On MINUS reduce production simple_index -> ident
-- On LTGT reduce production simple_index -> ident
-- On LTEQ reduce production simple_index -> ident
-- On LT reduce production simple_index -> ident
-- On GTEQ reduce production simple_index -> ident
-- On GT reduce production simple_index -> ident
-- On EQ reduce production simple_index -> ident
-- On DIV reduce production simple_index -> ident
-- On COMMA reduce production simple_index -> ident
-- On BARBAR reduce production simple_index -> ident
-- On BAR reduce production simple_index -> ident
-- On AMPERAMPER reduce production simple_index -> ident

State 115:
## Known stack suffix:
## ident COLON
## LR(1) items:
ivar_decl -> ident COLON . isort [ RBRACKET RBRACE COMMA BAR ]
## Transitions:
-- On NAT shift to state 116
-- On LBRACE shift to state 117
-- On INT shift to state 120
-- On IDENT shift to state 121
-- On isort shift to state 126
## Reductions:

State 116:
## Known stack suffix:
## NAT
## LR(1) items:
isort -> NAT . [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
## Reductions:
-- On VAL reduce production isort -> NAT
-- On SORT reduce production isort -> NAT
-- On RPAREN reduce production isort -> NAT
-- On RBRACKET reduce production isort -> NAT
-- On RBRACE reduce production isort -> NAT
-- On IN reduce production isort -> NAT
-- On FUN reduce production isort -> NAT
-- On EQ reduce production isort -> NAT
-- On EOF reduce production isort -> NAT
-- On DATATYPE reduce production isort -> NAT
-- On COMMA reduce production isort -> NAT
-- On BAR reduce production isort -> NAT

State 117:
## Known stack suffix:
## LBRACE
## LR(1) items:
isort -> LBRACE . ident COLON isort BAR iprop RBRACE [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
-- On IDENT shift to state 54
-- On ident shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## LBRACE ident
## LR(1) items:
isort -> LBRACE ident . COLON isort BAR iprop RBRACE [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
-- On COLON shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## LBRACE ident COLON
## LR(1) items:
isort -> LBRACE ident COLON . isort BAR iprop RBRACE [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
-- On NAT shift to state 116
-- On LBRACE shift to state 117
-- On INT shift to state 120
-- On IDENT shift to state 121
-- On isort shift to state 122
## Reductions:

State 120:
## Known stack suffix:
## INT
## LR(1) items:
isort -> INT . [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
## Reductions:
-- On VAL reduce production isort -> INT
-- On SORT reduce production isort -> INT
-- On RPAREN reduce production isort -> INT
-- On RBRACKET reduce production isort -> INT
-- On RBRACE reduce production isort -> INT
-- On IN reduce production isort -> INT
-- On FUN reduce production isort -> INT
-- On EQ reduce production isort -> INT
-- On EOF reduce production isort -> INT
-- On DATATYPE reduce production isort -> INT
-- On COMMA reduce production isort -> INT
-- On BAR reduce production isort -> INT

State 121:
## Known stack suffix:
## IDENT
## LR(1) items:
isort -> IDENT . [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
## Reductions:
-- On VAL reduce production isort -> IDENT
-- On SORT reduce production isort -> IDENT
-- On RPAREN reduce production isort -> IDENT
-- On RBRACKET reduce production isort -> IDENT
-- On RBRACE reduce production isort -> IDENT
-- On IN reduce production isort -> IDENT
-- On FUN reduce production isort -> IDENT
-- On EQ reduce production isort -> IDENT
-- On EOF reduce production isort -> IDENT
-- On DATATYPE reduce production isort -> IDENT
-- On COMMA reduce production isort -> IDENT
-- On BAR reduce production isort -> IDENT

State 122:
## Known stack suffix:
## LBRACE ident COLON isort
## LR(1) items:
isort -> LBRACE ident COLON isort . BAR iprop RBRACE [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
-- On BAR shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## LBRACE ident COLON isort BAR
## LR(1) items:
isort -> LBRACE ident COLON isort BAR . iprop RBRACE [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On iprop shift to state 124
-- On int_index shift to state 57
-- On index shift to state 113
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 124:
## Known stack suffix:
## LBRACE ident COLON isort BAR iprop
## LR(1) items:
isort -> LBRACE ident COLON isort BAR iprop . RBRACE [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
-- On RBRACE shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## LBRACE ident COLON isort BAR iprop RBRACE
## LR(1) items:
isort -> LBRACE ident COLON isort BAR iprop RBRACE . [ VAL SORT RPAREN RBRACKET RBRACE IN FUN EQ EOF DATATYPE COMMA BAR ]
## Transitions:
## Reductions:
-- On VAL reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On SORT reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On RPAREN reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On RBRACKET reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On RBRACE reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On IN reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On FUN reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On EQ reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On EOF reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On DATATYPE reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On COMMA reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE
-- On BAR reduce production isort -> LBRACE ident COLON isort BAR iprop RBRACE

State 126:
## Known stack suffix:
## ident COLON isort
## LR(1) items:
ivar_decl -> ident COLON isort . [ RBRACKET RBRACE COMMA BAR ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production ivar_decl -> ident COLON isort
-- On RBRACE reduce production ivar_decl -> ident COLON isort
-- On COMMA reduce production ivar_decl -> ident COLON isort
-- On BAR reduce production ivar_decl -> ident COLON isort

State 127:
## Known stack suffix:
## ivar_decl BAR
## LR(1) items:
ivar_decls -> ivar_decl BAR . ivar_decls [ RBRACKET RBRACE ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On ivar_decls shift to state 128
-- On ivar_decl shift to state 109
-- On iprop shift to state 112
-- On int_index shift to state 57
-- On index shift to state 113
-- On ident shift to state 114
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 128:
## Known stack suffix:
## ivar_decl BAR ivar_decls
## LR(1) items:
ivar_decls -> ivar_decl BAR ivar_decls . [ RBRACKET RBRACE ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production ivar_decls -> ivar_decl BAR ivar_decls
-- On RBRACE reduce production ivar_decls -> ivar_decl BAR ivar_decls

State 129:
## Known stack suffix:
## LBRACE
## LR(1) items:
uni_ivar_decls -> LBRACE . ivar_decls RBRACE [ QUOTE NAT LTGT LT LPAREN LBRACKET LBRACE INT IDENT DOT BOOL ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On ivar_decls shift to state 130
-- On ivar_decl shift to state 109
-- On iprop shift to state 112
-- On int_index shift to state 57
-- On index shift to state 113
-- On ident shift to state 114
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 130:
## Known stack suffix:
## LBRACE ivar_decls
## LR(1) items:
uni_ivar_decls -> LBRACE ivar_decls . RBRACE [ QUOTE NAT LTGT LT LPAREN LBRACKET LBRACE INT IDENT DOT BOOL ]
## Transitions:
-- On RBRACE shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## LBRACE ivar_decls RBRACE
## LR(1) items:
uni_ivar_decls -> LBRACE ivar_decls RBRACE . [ QUOTE NAT LTGT LT LPAREN LBRACKET LBRACE INT IDENT DOT BOOL ]
## Transitions:
## Reductions:
-- On QUOTE reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On NAT reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On LTGT reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On LT reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On LPAREN reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On LBRACKET reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On LBRACE reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On INT reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On IDENT reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On DOT reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE
-- On BOOL reduce production uni_ivar_decls -> LBRACE ivar_decls RBRACE

State 132:
## Known stack suffix:
## INT
## LR(1) items:
simple_dtype -> INT . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT . LPAREN index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT . LPAREN index COMMA index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT . LPAREN index COMMA index RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT . LBRACKET index COMMA index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT . LBRACKET index COMMA index RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On LPAREN shift to state 133
-- On LBRACKET shift to state 140
## Reductions:
-- On VAL reduce production simple_dtype -> INT
-- On TIMES reduce production simple_dtype -> INT
-- On SORT reduce production simple_dtype -> INT
-- On RPAREN reduce production simple_dtype -> INT
-- On MINUSGT reduce production simple_dtype -> INT
-- On LPAREN reduce production simple_dtype -> INT
-- On IN reduce production simple_dtype -> INT
-- On IDENT reduce production simple_dtype -> INT
-- On FUN reduce production simple_dtype -> INT
-- On EOF reduce production simple_dtype -> INT
-- On DATATYPE reduce production simple_dtype -> INT
-- On COMMA reduce production simple_dtype -> INT
-- On BAR reduce production simple_dtype -> INT
-- On AND reduce production simple_dtype -> INT
** Conflict on LPAREN

State 133:
## Known stack suffix:
## INT LPAREN
## LR(1) items:
simple_dtype -> INT LPAREN . index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LPAREN . index COMMA index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LPAREN . index COMMA index RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 57
-- On index shift to state 134
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 134:
## Known stack suffix:
## INT LPAREN index
## LR(1) items:
simple_dtype -> INT LPAREN index . RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LPAREN index . COMMA index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LPAREN index . COMMA index RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On RPAREN shift to state 135
-- On COMMA shift to state 136
## Reductions:

State 135:
## Known stack suffix:
## INT LPAREN index RPAREN
## LR(1) items:
simple_dtype -> INT LPAREN index RPAREN . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> INT LPAREN index RPAREN
-- On TIMES reduce production simple_dtype -> INT LPAREN index RPAREN
-- On SORT reduce production simple_dtype -> INT LPAREN index RPAREN
-- On RPAREN reduce production simple_dtype -> INT LPAREN index RPAREN
-- On MINUSGT reduce production simple_dtype -> INT LPAREN index RPAREN
-- On LPAREN reduce production simple_dtype -> INT LPAREN index RPAREN
-- On IN reduce production simple_dtype -> INT LPAREN index RPAREN
-- On IDENT reduce production simple_dtype -> INT LPAREN index RPAREN
-- On FUN reduce production simple_dtype -> INT LPAREN index RPAREN
-- On EOF reduce production simple_dtype -> INT LPAREN index RPAREN
-- On DATATYPE reduce production simple_dtype -> INT LPAREN index RPAREN
-- On COMMA reduce production simple_dtype -> INT LPAREN index RPAREN
-- On BAR reduce production simple_dtype -> INT LPAREN index RPAREN
-- On AND reduce production simple_dtype -> INT LPAREN index RPAREN

State 136:
## Known stack suffix:
## INT LPAREN index COMMA
## LR(1) items:
simple_dtype -> INT LPAREN index COMMA . index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LPAREN index COMMA . index RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 57
-- On index shift to state 137
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 137:
## Known stack suffix:
## INT LPAREN index COMMA index
## LR(1) items:
simple_dtype -> INT LPAREN index COMMA index . RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LPAREN index COMMA index . RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On RPAREN shift to state 138
-- On RBRACKET shift to state 139
## Reductions:

State 138:
## Known stack suffix:
## INT LPAREN index COMMA index RPAREN
## LR(1) items:
simple_dtype -> INT LPAREN index COMMA index RPAREN . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On TIMES reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On SORT reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On RPAREN reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On MINUSGT reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On LPAREN reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On IN reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On IDENT reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On FUN reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On EOF reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On DATATYPE reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On COMMA reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On BAR reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN
-- On AND reduce production simple_dtype -> INT LPAREN index COMMA index RPAREN

State 139:
## Known stack suffix:
## INT LPAREN index COMMA index RBRACKET
## LR(1) items:
simple_dtype -> INT LPAREN index COMMA index RBRACKET . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On TIMES reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On SORT reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On RPAREN reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On MINUSGT reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On LPAREN reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On IN reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On IDENT reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On FUN reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On EOF reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On DATATYPE reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On COMMA reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On BAR reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET
-- On AND reduce production simple_dtype -> INT LPAREN index COMMA index RBRACKET

State 140:
## Known stack suffix:
## INT LBRACKET
## LR(1) items:
simple_dtype -> INT LBRACKET . index COMMA index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LBRACKET . index COMMA index RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 57
-- On index shift to state 141
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 141:
## Known stack suffix:
## INT LBRACKET index
## LR(1) items:
simple_dtype -> INT LBRACKET index . COMMA index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LBRACKET index . COMMA index RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On COMMA shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## INT LBRACKET index COMMA
## LR(1) items:
simple_dtype -> INT LBRACKET index COMMA . index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LBRACKET index COMMA . index RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 57
-- On index shift to state 143
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 143:
## Known stack suffix:
## INT LBRACKET index COMMA index
## LR(1) items:
simple_dtype -> INT LBRACKET index COMMA index . RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> INT LBRACKET index COMMA index . RBRACKET [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On RPAREN shift to state 144
-- On RBRACKET shift to state 145
## Reductions:

State 144:
## Known stack suffix:
## INT LBRACKET index COMMA index RPAREN
## LR(1) items:
simple_dtype -> INT LBRACKET index COMMA index RPAREN . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On TIMES reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On SORT reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On RPAREN reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On MINUSGT reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On LPAREN reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On IN reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On IDENT reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On FUN reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On EOF reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On DATATYPE reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On COMMA reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On BAR reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN
-- On AND reduce production simple_dtype -> INT LBRACKET index COMMA index RPAREN

State 145:
## Known stack suffix:
## INT LBRACKET index COMMA index RBRACKET
## LR(1) items:
simple_dtype -> INT LBRACKET index COMMA index RBRACKET . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On TIMES reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On SORT reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On RPAREN reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On MINUSGT reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On LPAREN reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On IN reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On IDENT reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On FUN reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On EOF reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On DATATYPE reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On COMMA reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On BAR reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET
-- On AND reduce production simple_dtype -> INT LBRACKET index COMMA index RBRACKET

State 146:
## Known stack suffix:
## IDENT
## LR(1) items:
named_dtype -> IDENT . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production named_dtype -> IDENT
-- On TIMES reduce production named_dtype -> IDENT
-- On SORT reduce production named_dtype -> IDENT
-- On RPAREN reduce production named_dtype -> IDENT
-- On MINUSGT reduce production named_dtype -> IDENT
-- On LPAREN reduce production named_dtype -> IDENT
-- On IN reduce production named_dtype -> IDENT
-- On IDENT reduce production named_dtype -> IDENT
-- On FUN reduce production named_dtype -> IDENT
-- On EOF reduce production named_dtype -> IDENT
-- On DATATYPE reduce production named_dtype -> IDENT
-- On COMMA reduce production named_dtype -> IDENT
-- On BAR reduce production named_dtype -> IDENT
-- On AND reduce production named_dtype -> IDENT

State 147:
## Known stack suffix:
## BOOL
## LR(1) items:
simple_dtype -> BOOL . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> BOOL . LPAREN index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On LPAREN shift to state 148
## Reductions:
-- On VAL reduce production simple_dtype -> BOOL
-- On TIMES reduce production simple_dtype -> BOOL
-- On SORT reduce production simple_dtype -> BOOL
-- On RPAREN reduce production simple_dtype -> BOOL
-- On MINUSGT reduce production simple_dtype -> BOOL
-- On LPAREN reduce production simple_dtype -> BOOL
-- On IN reduce production simple_dtype -> BOOL
-- On IDENT reduce production simple_dtype -> BOOL
-- On FUN reduce production simple_dtype -> BOOL
-- On EOF reduce production simple_dtype -> BOOL
-- On DATATYPE reduce production simple_dtype -> BOOL
-- On COMMA reduce production simple_dtype -> BOOL
-- On BAR reduce production simple_dtype -> BOOL
-- On AND reduce production simple_dtype -> BOOL
** Conflict on LPAREN

State 148:
## Known stack suffix:
## BOOL LPAREN
## LR(1) items:
simple_dtype -> BOOL LPAREN . index RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On int_index shift to state 57
-- On index shift to state 149
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 149:
## Known stack suffix:
## BOOL LPAREN index
## LR(1) items:
simple_dtype -> BOOL LPAREN index . RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On RPAREN shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## BOOL LPAREN index RPAREN
## LR(1) items:
simple_dtype -> BOOL LPAREN index RPAREN . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On TIMES reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On SORT reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On RPAREN reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On MINUSGT reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On LPAREN reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On IN reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On IDENT reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On FUN reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On EOF reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On DATATYPE reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On COMMA reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On BAR reduce production simple_dtype -> BOOL LPAREN index RPAREN
-- On AND reduce production simple_dtype -> BOOL LPAREN index RPAREN

State 151:
## Known stack suffix:
## uni_ivar_decls
## LR(1) items:
dtype -> uni_ivar_decls . dtype [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 182
## Reductions:
-- On DOT reduce production tvar_para ->

State 152:
## Known stack suffix:
## tvar_para
## LR(1) items:
dtype -> tvar_para . DOT dtype [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On DOT shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## tvar_para DOT
## LR(1) items:
dtype -> tvar_para DOT . dtype [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 181
## Reductions:
-- On DOT reduce production tvar_para ->

State 154:
## Known stack suffix:
## tvar
## LR(1) items:
simple_dtype -> tvar . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
tvar_para -> tvar . [ DOT ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> tvar
-- On TIMES reduce production simple_dtype -> tvar
-- On SORT reduce production simple_dtype -> tvar
-- On RPAREN reduce production simple_dtype -> tvar
-- On MINUSGT reduce production simple_dtype -> tvar
-- On LPAREN reduce production simple_dtype -> tvar
-- On IN reduce production simple_dtype -> tvar
-- On IDENT reduce production simple_dtype -> tvar
-- On FUN reduce production simple_dtype -> tvar
-- On EOF reduce production simple_dtype -> tvar
-- On DOT reduce production tvar_para -> tvar
-- On DATATYPE reduce production simple_dtype -> tvar
-- On COMMA reduce production simple_dtype -> tvar
-- On BAR reduce production simple_dtype -> tvar
-- On AND reduce production simple_dtype -> tvar

State 155:
## Known stack suffix:
## tuple_dtype
## LR(1) items:
dtype -> tuple_dtype . [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
dtype -> tuple_dtype . MINUSGT dtype [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On MINUSGT shift to state 156
## Reductions:
-- On VAL reduce production dtype -> tuple_dtype
-- On SORT reduce production dtype -> tuple_dtype
-- On RPAREN reduce production dtype -> tuple_dtype
-- On LPAREN reduce production dtype -> tuple_dtype
-- On IN reduce production dtype -> tuple_dtype
-- On FUN reduce production dtype -> tuple_dtype
-- On EOF reduce production dtype -> tuple_dtype
-- On DATATYPE reduce production dtype -> tuple_dtype
-- On COMMA reduce production dtype -> tuple_dtype
-- On BAR reduce production dtype -> tuple_dtype
-- On AND reduce production dtype -> tuple_dtype

State 156:
## Known stack suffix:
## tuple_dtype MINUSGT
## LR(1) items:
dtype -> tuple_dtype MINUSGT . dtype [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 180
## Reductions:
-- On DOT reduce production tvar_para ->

State 157:
## Known stack suffix:
## simple_dtype
## LR(1) items:
named_dtype -> simple_dtype . IDENT [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
rev_tuple_dtype -> simple_dtype . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On IDENT shift to state 158
## Reductions:
-- On VAL reduce production rev_tuple_dtype -> simple_dtype
-- On TIMES reduce production rev_tuple_dtype -> simple_dtype
-- On SORT reduce production rev_tuple_dtype -> simple_dtype
-- On RPAREN reduce production rev_tuple_dtype -> simple_dtype
-- On MINUSGT reduce production rev_tuple_dtype -> simple_dtype
-- On LPAREN reduce production rev_tuple_dtype -> simple_dtype
-- On IN reduce production rev_tuple_dtype -> simple_dtype
-- On FUN reduce production rev_tuple_dtype -> simple_dtype
-- On EOF reduce production rev_tuple_dtype -> simple_dtype
-- On DATATYPE reduce production rev_tuple_dtype -> simple_dtype
-- On COMMA reduce production rev_tuple_dtype -> simple_dtype
-- On BAR reduce production rev_tuple_dtype -> simple_dtype
-- On AND reduce production rev_tuple_dtype -> simple_dtype

State 158:
## Known stack suffix:
## simple_dtype IDENT
## LR(1) items:
named_dtype -> simple_dtype IDENT . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production named_dtype -> simple_dtype IDENT
-- On TIMES reduce production named_dtype -> simple_dtype IDENT
-- On SORT reduce production named_dtype -> simple_dtype IDENT
-- On RPAREN reduce production named_dtype -> simple_dtype IDENT
-- On MINUSGT reduce production named_dtype -> simple_dtype IDENT
-- On LPAREN reduce production named_dtype -> simple_dtype IDENT
-- On IN reduce production named_dtype -> simple_dtype IDENT
-- On IDENT reduce production named_dtype -> simple_dtype IDENT
-- On FUN reduce production named_dtype -> simple_dtype IDENT
-- On EOF reduce production named_dtype -> simple_dtype IDENT
-- On DATATYPE reduce production named_dtype -> simple_dtype IDENT
-- On COMMA reduce production named_dtype -> simple_dtype IDENT
-- On BAR reduce production named_dtype -> simple_dtype IDENT
-- On AND reduce production named_dtype -> simple_dtype IDENT

State 159:
## Known stack suffix:
## rev_tuple_dtype
## LR(1) items:
rev_tuple_dtype -> rev_tuple_dtype . TIMES simple_dtype [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
tuple_dtype -> rev_tuple_dtype . [ VAL SORT RPAREN MINUSGT LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On TIMES shift to state 160
## Reductions:
-- On VAL reduce production tuple_dtype -> rev_tuple_dtype
-- On SORT reduce production tuple_dtype -> rev_tuple_dtype
-- On RPAREN reduce production tuple_dtype -> rev_tuple_dtype
-- On MINUSGT reduce production tuple_dtype -> rev_tuple_dtype
-- On LPAREN reduce production tuple_dtype -> rev_tuple_dtype
-- On IN reduce production tuple_dtype -> rev_tuple_dtype
-- On FUN reduce production tuple_dtype -> rev_tuple_dtype
-- On EOF reduce production tuple_dtype -> rev_tuple_dtype
-- On DATATYPE reduce production tuple_dtype -> rev_tuple_dtype
-- On COMMA reduce production tuple_dtype -> rev_tuple_dtype
-- On BAR reduce production tuple_dtype -> rev_tuple_dtype
-- On AND reduce production tuple_dtype -> rev_tuple_dtype

State 160:
## Known stack suffix:
## rev_tuple_dtype TIMES
## LR(1) items:
rev_tuple_dtype -> rev_tuple_dtype TIMES . simple_dtype [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LPAREN shift to state 161
-- On LBRACKET shift to state 106
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On tvar shift to state 168
-- On simple_dtype shift to state 179
-- On named_dtype shift to state 162
-- On exi_ivar_decls shift to state 167
## Reductions:

State 161:
## Known stack suffix:
## LPAREN
## LR(1) items:
named_dtype -> LPAREN . dtype open_comma_dtype_list IDENT [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> LPAREN . dtype RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 171
## Reductions:
-- On DOT reduce production tvar_para ->

State 162:
## Known stack suffix:
## named_dtype
## LR(1) items:
simple_dtype -> named_dtype . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> named_dtype . LPAREN open_comma_index_list [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On LPAREN shift to state 163
## Reductions:
-- On VAL reduce production simple_dtype -> named_dtype
-- On TIMES reduce production simple_dtype -> named_dtype
-- On SORT reduce production simple_dtype -> named_dtype
-- On RPAREN reduce production simple_dtype -> named_dtype
-- On MINUSGT reduce production simple_dtype -> named_dtype
-- On LPAREN reduce production simple_dtype -> named_dtype
-- On IN reduce production simple_dtype -> named_dtype
-- On IDENT reduce production simple_dtype -> named_dtype
-- On FUN reduce production simple_dtype -> named_dtype
-- On EOF reduce production simple_dtype -> named_dtype
-- On DATATYPE reduce production simple_dtype -> named_dtype
-- On COMMA reduce production simple_dtype -> named_dtype
-- On BAR reduce production simple_dtype -> named_dtype
-- On AND reduce production simple_dtype -> named_dtype
** Conflict on LPAREN

State 163:
## Known stack suffix:
## named_dtype LPAREN
## LR(1) items:
simple_dtype -> named_dtype LPAREN . open_comma_index_list [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On open_comma_index_list shift to state 164
-- On int_index shift to state 57
-- On index shift to state 80
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 164:
## Known stack suffix:
## named_dtype LPAREN open_comma_index_list
## LR(1) items:
simple_dtype -> named_dtype LPAREN open_comma_index_list . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On TIMES reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On SORT reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On RPAREN reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On MINUSGT reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On LPAREN reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On IN reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On IDENT reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On FUN reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On EOF reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On DATATYPE reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On COMMA reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On BAR reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list
-- On AND reduce production simple_dtype -> named_dtype LPAREN open_comma_index_list

State 165:
## Known stack suffix:
## metric
## LR(1) items:
dtype -> metric . EQGT dtype [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On EQGT shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## metric EQGT
## LR(1) items:
dtype -> metric EQGT . dtype [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 170
## Reductions:
-- On DOT reduce production tvar_para ->

State 167:
## Known stack suffix:
## exi_ivar_decls
## LR(1) items:
simple_dtype -> exi_ivar_decls . simple_dtype [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LPAREN shift to state 161
-- On LBRACKET shift to state 106
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On tvar shift to state 168
-- On simple_dtype shift to state 169
-- On named_dtype shift to state 162
-- On exi_ivar_decls shift to state 167
## Reductions:

State 168:
## Known stack suffix:
## tvar
## LR(1) items:
simple_dtype -> tvar . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> tvar
-- On TIMES reduce production simple_dtype -> tvar
-- On SORT reduce production simple_dtype -> tvar
-- On RPAREN reduce production simple_dtype -> tvar
-- On MINUSGT reduce production simple_dtype -> tvar
-- On LPAREN reduce production simple_dtype -> tvar
-- On IN reduce production simple_dtype -> tvar
-- On IDENT reduce production simple_dtype -> tvar
-- On FUN reduce production simple_dtype -> tvar
-- On EOF reduce production simple_dtype -> tvar
-- On DATATYPE reduce production simple_dtype -> tvar
-- On COMMA reduce production simple_dtype -> tvar
-- On BAR reduce production simple_dtype -> tvar
-- On AND reduce production simple_dtype -> tvar

State 169:
## Known stack suffix:
## exi_ivar_decls simple_dtype
## LR(1) items:
named_dtype -> simple_dtype . IDENT [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> exi_ivar_decls simple_dtype . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On IDENT shift to state 158
## Reductions:
-- On VAL reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On TIMES reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On SORT reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On RPAREN reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On MINUSGT reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On LPAREN reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On IN reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On IDENT reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On FUN reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On EOF reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On DATATYPE reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On COMMA reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On BAR reduce production simple_dtype -> exi_ivar_decls simple_dtype
-- On AND reduce production simple_dtype -> exi_ivar_decls simple_dtype
** Conflict on IDENT

State 170:
## Known stack suffix:
## metric EQGT dtype
## LR(1) items:
dtype -> metric EQGT dtype . [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production dtype -> metric EQGT dtype
-- On SORT reduce production dtype -> metric EQGT dtype
-- On RPAREN reduce production dtype -> metric EQGT dtype
-- On LPAREN reduce production dtype -> metric EQGT dtype
-- On IN reduce production dtype -> metric EQGT dtype
-- On FUN reduce production dtype -> metric EQGT dtype
-- On EOF reduce production dtype -> metric EQGT dtype
-- On DATATYPE reduce production dtype -> metric EQGT dtype
-- On COMMA reduce production dtype -> metric EQGT dtype
-- On BAR reduce production dtype -> metric EQGT dtype
-- On AND reduce production dtype -> metric EQGT dtype

State 171:
## Known stack suffix:
## LPAREN dtype
## LR(1) items:
named_dtype -> LPAREN dtype . open_comma_dtype_list IDENT [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
simple_dtype -> LPAREN dtype . RPAREN [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On RPAREN shift to state 172
-- On COMMA shift to state 173
-- On open_comma_dtype_list shift to state 177
## Reductions:

State 172:
## Known stack suffix:
## LPAREN dtype RPAREN
## LR(1) items:
simple_dtype -> LPAREN dtype RPAREN . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production simple_dtype -> LPAREN dtype RPAREN
-- On TIMES reduce production simple_dtype -> LPAREN dtype RPAREN
-- On SORT reduce production simple_dtype -> LPAREN dtype RPAREN
-- On RPAREN reduce production simple_dtype -> LPAREN dtype RPAREN
-- On MINUSGT reduce production simple_dtype -> LPAREN dtype RPAREN
-- On LPAREN reduce production simple_dtype -> LPAREN dtype RPAREN
-- On IN reduce production simple_dtype -> LPAREN dtype RPAREN
-- On IDENT reduce production simple_dtype -> LPAREN dtype RPAREN
-- On FUN reduce production simple_dtype -> LPAREN dtype RPAREN
-- On EOF reduce production simple_dtype -> LPAREN dtype RPAREN
-- On DATATYPE reduce production simple_dtype -> LPAREN dtype RPAREN
-- On COMMA reduce production simple_dtype -> LPAREN dtype RPAREN
-- On BAR reduce production simple_dtype -> LPAREN dtype RPAREN
-- On AND reduce production simple_dtype -> LPAREN dtype RPAREN

State 173:
## Known stack suffix:
## COMMA
## LR(1) items:
open_comma_dtype_list -> COMMA . dtype open_comma_dtype_list [ IDENT ]
open_comma_dtype_list -> COMMA . dtype LPAREN [ IDENT ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 174
## Reductions:
-- On DOT reduce production tvar_para ->

State 174:
## Known stack suffix:
## COMMA dtype
## LR(1) items:
open_comma_dtype_list -> COMMA dtype . open_comma_dtype_list [ IDENT ]
open_comma_dtype_list -> COMMA dtype . LPAREN [ IDENT ]
## Transitions:
-- On LPAREN shift to state 175
-- On COMMA shift to state 173
-- On open_comma_dtype_list shift to state 176
## Reductions:

State 175:
## Known stack suffix:
## COMMA dtype LPAREN
## LR(1) items:
open_comma_dtype_list -> COMMA dtype LPAREN . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT reduce production open_comma_dtype_list -> COMMA dtype LPAREN

State 176:
## Known stack suffix:
## COMMA dtype open_comma_dtype_list
## LR(1) items:
open_comma_dtype_list -> COMMA dtype open_comma_dtype_list . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT reduce production open_comma_dtype_list -> COMMA dtype open_comma_dtype_list

State 177:
## Known stack suffix:
## LPAREN dtype open_comma_dtype_list
## LR(1) items:
named_dtype -> LPAREN dtype open_comma_dtype_list . IDENT [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On IDENT shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## LPAREN dtype open_comma_dtype_list IDENT
## LR(1) items:
named_dtype -> LPAREN dtype open_comma_dtype_list IDENT . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On TIMES reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On SORT reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On RPAREN reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On MINUSGT reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On LPAREN reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On IN reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On IDENT reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On FUN reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On EOF reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On DATATYPE reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On COMMA reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On BAR reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT
-- On AND reduce production named_dtype -> LPAREN dtype open_comma_dtype_list IDENT

State 179:
## Known stack suffix:
## rev_tuple_dtype TIMES simple_dtype
## LR(1) items:
named_dtype -> simple_dtype . IDENT [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN IDENT FUN EOF DATATYPE COMMA BAR AND ]
rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype . [ VAL TIMES SORT RPAREN MINUSGT LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
-- On IDENT shift to state 158
## Reductions:
-- On VAL reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On TIMES reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On SORT reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On RPAREN reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On MINUSGT reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On LPAREN reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On IN reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On FUN reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On EOF reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On DATATYPE reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On COMMA reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On BAR reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype
-- On AND reduce production rev_tuple_dtype -> rev_tuple_dtype TIMES simple_dtype

State 180:
## Known stack suffix:
## tuple_dtype MINUSGT dtype
## LR(1) items:
dtype -> tuple_dtype MINUSGT dtype . [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production dtype -> tuple_dtype MINUSGT dtype
-- On SORT reduce production dtype -> tuple_dtype MINUSGT dtype
-- On RPAREN reduce production dtype -> tuple_dtype MINUSGT dtype
-- On LPAREN reduce production dtype -> tuple_dtype MINUSGT dtype
-- On IN reduce production dtype -> tuple_dtype MINUSGT dtype
-- On FUN reduce production dtype -> tuple_dtype MINUSGT dtype
-- On EOF reduce production dtype -> tuple_dtype MINUSGT dtype
-- On DATATYPE reduce production dtype -> tuple_dtype MINUSGT dtype
-- On COMMA reduce production dtype -> tuple_dtype MINUSGT dtype
-- On BAR reduce production dtype -> tuple_dtype MINUSGT dtype
-- On AND reduce production dtype -> tuple_dtype MINUSGT dtype

State 181:
## Known stack suffix:
## tvar_para DOT dtype
## LR(1) items:
dtype -> tvar_para DOT dtype . [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production dtype -> tvar_para DOT dtype
-- On SORT reduce production dtype -> tvar_para DOT dtype
-- On RPAREN reduce production dtype -> tvar_para DOT dtype
-- On LPAREN reduce production dtype -> tvar_para DOT dtype
-- On IN reduce production dtype -> tvar_para DOT dtype
-- On FUN reduce production dtype -> tvar_para DOT dtype
-- On EOF reduce production dtype -> tvar_para DOT dtype
-- On DATATYPE reduce production dtype -> tvar_para DOT dtype
-- On COMMA reduce production dtype -> tvar_para DOT dtype
-- On BAR reduce production dtype -> tvar_para DOT dtype
-- On AND reduce production dtype -> tvar_para DOT dtype

State 182:
## Known stack suffix:
## uni_ivar_decls dtype
## LR(1) items:
dtype -> uni_ivar_decls dtype . [ VAL SORT RPAREN LPAREN IN FUN EOF DATATYPE COMMA BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production dtype -> uni_ivar_decls dtype
-- On SORT reduce production dtype -> uni_ivar_decls dtype
-- On RPAREN reduce production dtype -> uni_ivar_decls dtype
-- On LPAREN reduce production dtype -> uni_ivar_decls dtype
-- On IN reduce production dtype -> uni_ivar_decls dtype
-- On FUN reduce production dtype -> uni_ivar_decls dtype
-- On EOF reduce production dtype -> uni_ivar_decls dtype
-- On DATATYPE reduce production dtype -> uni_ivar_decls dtype
-- On COMMA reduce production dtype -> uni_ivar_decls dtype
-- On BAR reduce production dtype -> uni_ivar_decls dtype
-- On AND reduce production dtype -> uni_ivar_decls dtype

State 183:
## Known stack suffix:
## tvar
## LR(1) items:
open_tvar_para -> tvar . RPAREN [ DOT ]
open_tvar_para -> tvar . COMMA open_tvar_para [ DOT ]
simple_dtype -> tvar . [ TIMES RPAREN MINUSGT IDENT COMMA ]
tvar_para -> tvar . [ DOT ]
## Transitions:
-- On RPAREN shift to state 184
-- On COMMA shift to state 185
## Reductions:
-- On TIMES reduce production simple_dtype -> tvar
-- On RPAREN reduce production simple_dtype -> tvar
-- On MINUSGT reduce production simple_dtype -> tvar
-- On IDENT reduce production simple_dtype -> tvar
-- On DOT reduce production tvar_para -> tvar
-- On COMMA reduce production simple_dtype -> tvar
** Conflict on RPAREN COMMA

State 184:
## Known stack suffix:
## tvar RPAREN
## LR(1) items:
open_tvar_para -> tvar RPAREN . [ IDENT DOT ]
## Transitions:
## Reductions:
-- On IDENT reduce production open_tvar_para -> tvar RPAREN
-- On DOT reduce production open_tvar_para -> tvar RPAREN

State 185:
## Known stack suffix:
## tvar COMMA
## LR(1) items:
open_tvar_para -> tvar COMMA . open_tvar_para [ IDENT DOT ]
## Transitions:
-- On QUOTE shift to state 46
-- On tvar shift to state 186
-- On open_tvar_para shift to state 187
## Reductions:

State 186:
## Known stack suffix:
## tvar
## LR(1) items:
open_tvar_para -> tvar . RPAREN [ IDENT DOT ]
open_tvar_para -> tvar . COMMA open_tvar_para [ IDENT DOT ]
## Transitions:
-- On RPAREN shift to state 184
-- On COMMA shift to state 185
## Reductions:

State 187:
## Known stack suffix:
## tvar COMMA open_tvar_para
## LR(1) items:
open_tvar_para -> tvar COMMA open_tvar_para . [ IDENT DOT ]
## Transitions:
## Reductions:
-- On IDENT reduce production open_tvar_para -> tvar COMMA open_tvar_para
-- On DOT reduce production open_tvar_para -> tvar COMMA open_tvar_para

State 188:
## Known stack suffix:
## LPAREN open_tvar_para
## LR(1) items:
tvar_para -> LPAREN open_tvar_para . [ IDENT DOT ]
## Transitions:
## Reductions:
-- On IDENT reduce production tvar_para -> LPAREN open_tvar_para
-- On DOT reduce production tvar_para -> LPAREN open_tvar_para

State 189:
## Known stack suffix:
## IDENT COLON dtype
## LR(1) items:
var_typ_decl -> IDENT COLON dtype . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production var_typ_decl -> IDENT COLON dtype
-- On SORT reduce production var_typ_decl -> IDENT COLON dtype
-- On IN reduce production var_typ_decl -> IDENT COLON dtype
-- On FUN reduce production var_typ_decl -> IDENT COLON dtype
-- On EOF reduce production var_typ_decl -> IDENT COLON dtype
-- On DATATYPE reduce production var_typ_decl -> IDENT COLON dtype

State 190:
## Known stack suffix:
## VAL var_typ_decl
## LR(1) items:
decl -> VAL var_typ_decl . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production decl -> VAL var_typ_decl
-- On SORT reduce production decl -> VAL var_typ_decl
-- On IN reduce production decl -> VAL var_typ_decl
-- On FUN reduce production decl -> VAL var_typ_decl
-- On EOF reduce production decl -> VAL var_typ_decl
-- On DATATYPE reduce production decl -> VAL var_typ_decl

State 191:
## Known stack suffix:
## VAL val_decls
## LR(1) items:
decl -> VAL val_decls . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production decl -> VAL val_decls
-- On SORT reduce production decl -> VAL val_decls
-- On IN reduce production decl -> VAL val_decls
-- On FUN reduce production decl -> VAL val_decls
-- On EOF reduce production decl -> VAL val_decls
-- On DATATYPE reduce production decl -> VAL val_decls

State 192:
## Known stack suffix:
## val_decl
## LR(1) items:
val_decls -> val_decl . AND val_decls [ VAL SORT IN FUN EOF DATATYPE ]
val_decls -> val_decl . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On AND shift to state 193
## Reductions:
-- On VAL reduce production val_decls -> val_decl
-- On SORT reduce production val_decls -> val_decl
-- On IN reduce production val_decls -> val_decl
-- On FUN reduce production val_decls -> val_decl
-- On EOF reduce production val_decls -> val_decl
-- On DATATYPE reduce production val_decls -> val_decl

State 193:
## Known stack suffix:
## val_decl AND
## LR(1) items:
val_decls -> val_decl AND . val_decls [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 21
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On val_decls shift to state 194
-- On val_decl shift to state 192
-- On simple_pattern shift to state 29
-- On pattern shift to state 195
-- On constant shift to state 32
## Reductions:

State 194:
## Known stack suffix:
## val_decl AND val_decls
## LR(1) items:
val_decls -> val_decl AND val_decls . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production val_decls -> val_decl AND val_decls
-- On SORT reduce production val_decls -> val_decl AND val_decls
-- On IN reduce production val_decls -> val_decl AND val_decls
-- On FUN reduce production val_decls -> val_decl AND val_decls
-- On EOF reduce production val_decls -> val_decl AND val_decls
-- On DATATYPE reduce production val_decls -> val_decl AND val_decls

State 195:
## Known stack suffix:
## pattern
## LR(1) items:
val_decl -> pattern . EQ exp [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On EQ shift to state 196
## Reductions:

State 196:
## Known stack suffix:
## pattern EQ
## LR(1) items:
val_decl -> pattern EQ . exp [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 329
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 197:
## Known stack suffix:
## TILDE
## LR(1) items:
simple_exp -> TILDE . simple_exp [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IDENT shift to state 215
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_exp shift to state 328
-- On constant shift to state 252
## Reductions:

State 198:
## Known stack suffix:
## LPAREN
## LR(1) items:
simple_exp -> LPAREN . exp_list RPAREN [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
simple_exp -> LPAREN . exp COLON dtype RPAREN [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp_list shift to state 322
-- On exp shift to state 324
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:
-- On RPAREN reduce production exp_list ->

State 199:
## Known stack suffix:
## LET
## LR(1) items:
simple_exp -> LET . decls IN exp END [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On VAL shift to state 1
-- On SORT shift to state 200
-- On FUN shift to state 205
-- On DATATYPE shift to state 282
-- On decls shift to state 316
-- On decl shift to state 320
## Reductions:

State 200:
## Known stack suffix:
## SORT
## LR(1) items:
decl -> SORT . isort_decl [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On IDENT shift to state 201
-- On isort_decl shift to state 204
## Reductions:

State 201:
## Known stack suffix:
## IDENT
## LR(1) items:
isort_decl -> IDENT . EQ isort [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On EQ shift to state 202
## Reductions:

State 202:
## Known stack suffix:
## IDENT EQ
## LR(1) items:
isort_decl -> IDENT EQ . isort [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On NAT shift to state 116
-- On LBRACE shift to state 117
-- On INT shift to state 120
-- On IDENT shift to state 121
-- On isort shift to state 203
## Reductions:

State 203:
## Known stack suffix:
## IDENT EQ isort
## LR(1) items:
isort_decl -> IDENT EQ isort . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production isort_decl -> IDENT EQ isort
-- On SORT reduce production isort_decl -> IDENT EQ isort
-- On IN reduce production isort_decl -> IDENT EQ isort
-- On FUN reduce production isort_decl -> IDENT EQ isort
-- On EOF reduce production isort_decl -> IDENT EQ isort
-- On DATATYPE reduce production isort_decl -> IDENT EQ isort

State 204:
## Known stack suffix:
## SORT isort_decl
## LR(1) items:
decl -> SORT isort_decl . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production decl -> SORT isort_decl
-- On SORT reduce production decl -> SORT isort_decl
-- On IN reduce production decl -> SORT isort_decl
-- On FUN reduce production decl -> SORT isort_decl
-- On EOF reduce production decl -> SORT isort_decl
-- On DATATYPE reduce production decl -> SORT isort_decl

State 205:
## Known stack suffix:
## FUN
## LR(1) items:
decl -> FUN . fun_decls [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On QUOTE shift to state 46
-- On LPAREN shift to state 206
-- On tvar_para shift to state 207
-- On tvar shift to state 277
-- On fun_decls shift to state 278
-- On fun_decl shift to state 279
## Reductions:
-- On IDENT reduce production tvar_para ->

State 206:
## Known stack suffix:
## LPAREN
## LR(1) items:
tvar_para -> LPAREN . open_tvar_para [ IDENT ]
## Transitions:
-- On QUOTE shift to state 46
-- On tvar shift to state 186
-- On open_tvar_para shift to state 188
## Reductions:

State 207:
## Known stack suffix:
## tvar_para
## LR(1) items:
fun_decl -> tvar_para . fun_decl_clauses owithtype [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On IDENT shift to state 208
-- On fun_decl_clauses shift to state 270
-- On fun_decl_clause shift to state 274
## Reductions:

State 208:
## Known stack suffix:
## IDENT
## LR(1) items:
fun_decl_clause -> IDENT . fun_args EQ exp [ WITHTYPE VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 22
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 209
-- On fun_args shift to state 211
-- On constant shift to state 32
## Reductions:

State 209:
## Known stack suffix:
## simple_pattern
## LR(1) items:
fun_args -> simple_pattern . fun_args [ EQ ]
fun_args -> simple_pattern . [ EQ ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 22
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 209
-- On fun_args shift to state 210
-- On constant shift to state 32
## Reductions:
-- On EQ reduce production fun_args -> simple_pattern

State 210:
## Known stack suffix:
## simple_pattern fun_args
## LR(1) items:
fun_args -> simple_pattern fun_args . [ EQ ]
## Transitions:
## Reductions:
-- On EQ reduce production fun_args -> simple_pattern fun_args

State 211:
## Known stack suffix:
## IDENT fun_args
## LR(1) items:
fun_decl_clause -> IDENT fun_args . EQ exp [ WITHTYPE VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On EQ shift to state 212
## Reductions:

State 212:
## Known stack suffix:
## IDENT fun_args EQ
## LR(1) items:
fun_decl_clause -> IDENT fun_args EQ . exp [ WITHTYPE VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 269
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 213:
## Known stack suffix:
## LBRACKET
## LR(1) items:
simple_exp -> LBRACKET . exp_list RBRACKET [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp_list shift to state 262
-- On exp shift to state 264
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:
-- On RBRACKET reduce production exp_list ->

State 214:
## Known stack suffix:
## IF
## LR(1) items:
exp -> IF . exp THEN exp ELSE exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 257
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 215:
## Known stack suffix:
## IDENT
## LR(1) items:
simple_exp -> IDENT . [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production simple_exp -> IDENT
-- On VAL reduce production simple_exp -> IDENT
-- On TRUE reduce production simple_exp -> IDENT
-- On TIMES reduce production simple_exp -> IDENT
-- On TILDE reduce production simple_exp -> IDENT
-- On THEN reduce production simple_exp -> IDENT
-- On SORT reduce production simple_exp -> IDENT
-- On RPAREN reduce production simple_exp -> IDENT
-- On RBRACKET reduce production simple_exp -> IDENT
-- On PLUS reduce production simple_exp -> IDENT
-- On PERCENT reduce production simple_exp -> IDENT
-- On OF reduce production simple_exp -> IDENT
-- On MINUS reduce production simple_exp -> IDENT
-- On LTGT reduce production simple_exp -> IDENT
-- On LTEQ reduce production simple_exp -> IDENT
-- On LT reduce production simple_exp -> IDENT
-- On LPAREN reduce production simple_exp -> IDENT
-- On LET reduce production simple_exp -> IDENT
-- On LBRACKET reduce production simple_exp -> IDENT
-- On IN reduce production simple_exp -> IDENT
-- On IDENT reduce production simple_exp -> IDENT
-- On GTEQ reduce production simple_exp -> IDENT
-- On GT reduce production simple_exp -> IDENT
-- On FUN reduce production simple_exp -> IDENT
-- On FALSE reduce production simple_exp -> IDENT
-- On EQ reduce production simple_exp -> IDENT
-- On EOF reduce production simple_exp -> IDENT
-- On END reduce production simple_exp -> IDENT
-- On ELSE reduce production simple_exp -> IDENT
-- On DIV reduce production simple_exp -> IDENT
-- On DATATYPE reduce production simple_exp -> IDENT
-- On CONSTSTRING reduce production simple_exp -> IDENT
-- On CONSTINT reduce production simple_exp -> IDENT
-- On CONSTFLOAT reduce production simple_exp -> IDENT
-- On CONSTCHAR reduce production simple_exp -> IDENT
-- On COMMA reduce production simple_exp -> IDENT
-- On COLONCOLON reduce production simple_exp -> IDENT
-- On COLON reduce production simple_exp -> IDENT
-- On BARBAR reduce production simple_exp -> IDENT
-- On BAR reduce production simple_exp -> IDENT
-- On APPEND reduce production simple_exp -> IDENT
-- On AND reduce production simple_exp -> IDENT
-- On AMPERAMPER reduce production simple_exp -> IDENT

State 216:
## Known stack suffix:
## FN
## LR(1) items:
exp -> FN . case_clauses [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 21
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 29
-- On pattern shift to state 217
-- On constant shift to state 32
-- On case_clauses shift to state 256
-- On case_clause shift to state 227
## Reductions:

State 217:
## Known stack suffix:
## pattern
## LR(1) items:
case_clause -> pattern . EQGT exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On EQGT shift to state 218
## Reductions:

State 218:
## Known stack suffix:
## pattern EQGT
## LR(1) items:
case_clause -> pattern EQGT . exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 255
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 219:
## Known stack suffix:
## CASE
## LR(1) items:
exp -> CASE . exp OF case_clauses [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 221
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 220:
## Known stack suffix:
## simple_exp
## LR(1) items:
app_exp -> simple_exp . [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production app_exp -> simple_exp
-- On VAL reduce production app_exp -> simple_exp
-- On TRUE reduce production app_exp -> simple_exp
-- On TIMES reduce production app_exp -> simple_exp
-- On TILDE reduce production app_exp -> simple_exp
-- On THEN reduce production app_exp -> simple_exp
-- On SORT reduce production app_exp -> simple_exp
-- On RPAREN reduce production app_exp -> simple_exp
-- On RBRACKET reduce production app_exp -> simple_exp
-- On PLUS reduce production app_exp -> simple_exp
-- On PERCENT reduce production app_exp -> simple_exp
-- On OF reduce production app_exp -> simple_exp
-- On MINUS reduce production app_exp -> simple_exp
-- On LTGT reduce production app_exp -> simple_exp
-- On LTEQ reduce production app_exp -> simple_exp
-- On LT reduce production app_exp -> simple_exp
-- On LPAREN reduce production app_exp -> simple_exp
-- On LET reduce production app_exp -> simple_exp
-- On LBRACKET reduce production app_exp -> simple_exp
-- On IN reduce production app_exp -> simple_exp
-- On IDENT reduce production app_exp -> simple_exp
-- On GTEQ reduce production app_exp -> simple_exp
-- On GT reduce production app_exp -> simple_exp
-- On FUN reduce production app_exp -> simple_exp
-- On FALSE reduce production app_exp -> simple_exp
-- On EQ reduce production app_exp -> simple_exp
-- On EOF reduce production app_exp -> simple_exp
-- On END reduce production app_exp -> simple_exp
-- On ELSE reduce production app_exp -> simple_exp
-- On DIV reduce production app_exp -> simple_exp
-- On DATATYPE reduce production app_exp -> simple_exp
-- On CONSTSTRING reduce production app_exp -> simple_exp
-- On CONSTINT reduce production app_exp -> simple_exp
-- On CONSTFLOAT reduce production app_exp -> simple_exp
-- On CONSTCHAR reduce production app_exp -> simple_exp
-- On COMMA reduce production app_exp -> simple_exp
-- On COLONCOLON reduce production app_exp -> simple_exp
-- On COLON reduce production app_exp -> simple_exp
-- On BARBAR reduce production app_exp -> simple_exp
-- On BAR reduce production app_exp -> simple_exp
-- On APPEND reduce production app_exp -> simple_exp
-- On AND reduce production app_exp -> simple_exp
-- On AMPERAMPER reduce production app_exp -> simple_exp

State 221:
## Known stack suffix:
## CASE exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ TIMES PLUS PERCENT OF MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ TIMES PLUS PERCENT OF MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ TIMES PLUS PERCENT OF MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ TIMES PLUS PERCENT OF MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_lop exp [ TIMES PLUS PERCENT OF MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> CASE exp . OF case_clauses [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On OF shift to state 225
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On EQ shift to state 236
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:

State 222:
## Known stack suffix:
## TIMES
## LR(1) items:
exp_aop2 -> TIMES . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_aop2 -> TIMES
-- On TILDE reduce production exp_aop2 -> TIMES
-- On LPAREN reduce production exp_aop2 -> TIMES
-- On LET reduce production exp_aop2 -> TIMES
-- On LBRACKET reduce production exp_aop2 -> TIMES
-- On IF reduce production exp_aop2 -> TIMES
-- On IDENT reduce production exp_aop2 -> TIMES
-- On FN reduce production exp_aop2 -> TIMES
-- On FALSE reduce production exp_aop2 -> TIMES
-- On CONSTSTRING reduce production exp_aop2 -> TIMES
-- On CONSTINT reduce production exp_aop2 -> TIMES
-- On CONSTFLOAT reduce production exp_aop2 -> TIMES
-- On CONSTCHAR reduce production exp_aop2 -> TIMES
-- On CASE reduce production exp_aop2 -> TIMES

State 223:
## Known stack suffix:
## PLUS
## LR(1) items:
exp_aop1 -> PLUS . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_aop1 -> PLUS
-- On TILDE reduce production exp_aop1 -> PLUS
-- On LPAREN reduce production exp_aop1 -> PLUS
-- On LET reduce production exp_aop1 -> PLUS
-- On LBRACKET reduce production exp_aop1 -> PLUS
-- On IF reduce production exp_aop1 -> PLUS
-- On IDENT reduce production exp_aop1 -> PLUS
-- On FN reduce production exp_aop1 -> PLUS
-- On FALSE reduce production exp_aop1 -> PLUS
-- On CONSTSTRING reduce production exp_aop1 -> PLUS
-- On CONSTINT reduce production exp_aop1 -> PLUS
-- On CONSTFLOAT reduce production exp_aop1 -> PLUS
-- On CONSTCHAR reduce production exp_aop1 -> PLUS
-- On CASE reduce production exp_aop1 -> PLUS

State 224:
## Known stack suffix:
## PERCENT
## LR(1) items:
exp_aop2 -> PERCENT . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_aop2 -> PERCENT
-- On TILDE reduce production exp_aop2 -> PERCENT
-- On LPAREN reduce production exp_aop2 -> PERCENT
-- On LET reduce production exp_aop2 -> PERCENT
-- On LBRACKET reduce production exp_aop2 -> PERCENT
-- On IF reduce production exp_aop2 -> PERCENT
-- On IDENT reduce production exp_aop2 -> PERCENT
-- On FN reduce production exp_aop2 -> PERCENT
-- On FALSE reduce production exp_aop2 -> PERCENT
-- On CONSTSTRING reduce production exp_aop2 -> PERCENT
-- On CONSTINT reduce production exp_aop2 -> PERCENT
-- On CONSTFLOAT reduce production exp_aop2 -> PERCENT
-- On CONSTCHAR reduce production exp_aop2 -> PERCENT
-- On CASE reduce production exp_aop2 -> PERCENT

State 225:
## Known stack suffix:
## CASE exp OF
## LR(1) items:
exp -> CASE exp OF . case_clauses [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 21
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 29
-- On pattern shift to state 217
-- On constant shift to state 32
-- On case_clauses shift to state 226
-- On case_clause shift to state 227
## Reductions:

State 226:
## Known stack suffix:
## CASE exp OF case_clauses
## LR(1) items:
exp -> CASE exp OF case_clauses . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production exp -> CASE exp OF case_clauses
-- On VAL reduce production exp -> CASE exp OF case_clauses
-- On TIMES reduce production exp -> CASE exp OF case_clauses
-- On THEN reduce production exp -> CASE exp OF case_clauses
-- On SORT reduce production exp -> CASE exp OF case_clauses
-- On RPAREN reduce production exp -> CASE exp OF case_clauses
-- On RBRACKET reduce production exp -> CASE exp OF case_clauses
-- On PLUS reduce production exp -> CASE exp OF case_clauses
-- On PERCENT reduce production exp -> CASE exp OF case_clauses
-- On OF reduce production exp -> CASE exp OF case_clauses
-- On MINUS reduce production exp -> CASE exp OF case_clauses
-- On LTGT reduce production exp -> CASE exp OF case_clauses
-- On LTEQ reduce production exp -> CASE exp OF case_clauses
-- On LT reduce production exp -> CASE exp OF case_clauses
-- On IN reduce production exp -> CASE exp OF case_clauses
-- On GTEQ reduce production exp -> CASE exp OF case_clauses
-- On GT reduce production exp -> CASE exp OF case_clauses
-- On FUN reduce production exp -> CASE exp OF case_clauses
-- On EQ reduce production exp -> CASE exp OF case_clauses
-- On EOF reduce production exp -> CASE exp OF case_clauses
-- On END reduce production exp -> CASE exp OF case_clauses
-- On ELSE reduce production exp -> CASE exp OF case_clauses
-- On DIV reduce production exp -> CASE exp OF case_clauses
-- On DATATYPE reduce production exp -> CASE exp OF case_clauses
-- On COMMA reduce production exp -> CASE exp OF case_clauses
-- On COLONCOLON reduce production exp -> CASE exp OF case_clauses
-- On COLON reduce production exp -> CASE exp OF case_clauses
-- On BARBAR reduce production exp -> CASE exp OF case_clauses
-- On BAR reduce production exp -> CASE exp OF case_clauses
-- On APPEND reduce production exp -> CASE exp OF case_clauses
-- On AND reduce production exp -> CASE exp OF case_clauses
-- On AMPERAMPER reduce production exp -> CASE exp OF case_clauses

State 227:
## Known stack suffix:
## case_clause
## LR(1) items:
case_clauses -> case_clause . BAR case_clauses [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
case_clauses -> case_clause . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On BAR shift to state 228
## Reductions:
-- On WITHTYPE reduce production case_clauses -> case_clause
-- On VAL reduce production case_clauses -> case_clause
-- On TIMES reduce production case_clauses -> case_clause
-- On THEN reduce production case_clauses -> case_clause
-- On SORT reduce production case_clauses -> case_clause
-- On RPAREN reduce production case_clauses -> case_clause
-- On RBRACKET reduce production case_clauses -> case_clause
-- On PLUS reduce production case_clauses -> case_clause
-- On PERCENT reduce production case_clauses -> case_clause
-- On OF reduce production case_clauses -> case_clause
-- On MINUS reduce production case_clauses -> case_clause
-- On LTGT reduce production case_clauses -> case_clause
-- On LTEQ reduce production case_clauses -> case_clause
-- On LT reduce production case_clauses -> case_clause
-- On IN reduce production case_clauses -> case_clause
-- On GTEQ reduce production case_clauses -> case_clause
-- On GT reduce production case_clauses -> case_clause
-- On FUN reduce production case_clauses -> case_clause
-- On EQ reduce production case_clauses -> case_clause
-- On EOF reduce production case_clauses -> case_clause
-- On END reduce production case_clauses -> case_clause
-- On ELSE reduce production case_clauses -> case_clause
-- On DIV reduce production case_clauses -> case_clause
-- On DATATYPE reduce production case_clauses -> case_clause
-- On COMMA reduce production case_clauses -> case_clause
-- On COLONCOLON reduce production case_clauses -> case_clause
-- On COLON reduce production case_clauses -> case_clause
-- On BARBAR reduce production case_clauses -> case_clause
-- On BAR reduce production case_clauses -> case_clause
-- On APPEND reduce production case_clauses -> case_clause
-- On AND reduce production case_clauses -> case_clause
-- On AMPERAMPER reduce production case_clauses -> case_clause
** Conflict on BAR

State 228:
## Known stack suffix:
## case_clause BAR
## LR(1) items:
case_clauses -> case_clause BAR . case_clauses [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On UNDERSCORE shift to state 2
-- On TRUE shift to state 3
-- On LPAREN shift to state 19
-- On LBRACKET shift to state 20
-- On IDENT shift to state 21
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_pattern shift to state 29
-- On pattern shift to state 217
-- On constant shift to state 32
-- On case_clauses shift to state 229
-- On case_clause shift to state 227
## Reductions:

State 229:
## Known stack suffix:
## case_clause BAR case_clauses
## LR(1) items:
case_clauses -> case_clause BAR case_clauses . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production case_clauses -> case_clause BAR case_clauses
-- On VAL reduce production case_clauses -> case_clause BAR case_clauses
-- On TIMES reduce production case_clauses -> case_clause BAR case_clauses
-- On THEN reduce production case_clauses -> case_clause BAR case_clauses
-- On SORT reduce production case_clauses -> case_clause BAR case_clauses
-- On RPAREN reduce production case_clauses -> case_clause BAR case_clauses
-- On RBRACKET reduce production case_clauses -> case_clause BAR case_clauses
-- On PLUS reduce production case_clauses -> case_clause BAR case_clauses
-- On PERCENT reduce production case_clauses -> case_clause BAR case_clauses
-- On OF reduce production case_clauses -> case_clause BAR case_clauses
-- On MINUS reduce production case_clauses -> case_clause BAR case_clauses
-- On LTGT reduce production case_clauses -> case_clause BAR case_clauses
-- On LTEQ reduce production case_clauses -> case_clause BAR case_clauses
-- On LT reduce production case_clauses -> case_clause BAR case_clauses
-- On IN reduce production case_clauses -> case_clause BAR case_clauses
-- On GTEQ reduce production case_clauses -> case_clause BAR case_clauses
-- On GT reduce production case_clauses -> case_clause BAR case_clauses
-- On FUN reduce production case_clauses -> case_clause BAR case_clauses
-- On EQ reduce production case_clauses -> case_clause BAR case_clauses
-- On EOF reduce production case_clauses -> case_clause BAR case_clauses
-- On END reduce production case_clauses -> case_clause BAR case_clauses
-- On ELSE reduce production case_clauses -> case_clause BAR case_clauses
-- On DIV reduce production case_clauses -> case_clause BAR case_clauses
-- On DATATYPE reduce production case_clauses -> case_clause BAR case_clauses
-- On COMMA reduce production case_clauses -> case_clause BAR case_clauses
-- On COLONCOLON reduce production case_clauses -> case_clause BAR case_clauses
-- On COLON reduce production case_clauses -> case_clause BAR case_clauses
-- On BARBAR reduce production case_clauses -> case_clause BAR case_clauses
-- On BAR reduce production case_clauses -> case_clause BAR case_clauses
-- On APPEND reduce production case_clauses -> case_clause BAR case_clauses
-- On AND reduce production case_clauses -> case_clause BAR case_clauses
-- On AMPERAMPER reduce production case_clauses -> case_clause BAR case_clauses

State 230:
## Known stack suffix:
## MINUS
## LR(1) items:
exp_aop1 -> MINUS . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_aop1 -> MINUS
-- On TILDE reduce production exp_aop1 -> MINUS
-- On LPAREN reduce production exp_aop1 -> MINUS
-- On LET reduce production exp_aop1 -> MINUS
-- On LBRACKET reduce production exp_aop1 -> MINUS
-- On IF reduce production exp_aop1 -> MINUS
-- On IDENT reduce production exp_aop1 -> MINUS
-- On FN reduce production exp_aop1 -> MINUS
-- On FALSE reduce production exp_aop1 -> MINUS
-- On CONSTSTRING reduce production exp_aop1 -> MINUS
-- On CONSTINT reduce production exp_aop1 -> MINUS
-- On CONSTFLOAT reduce production exp_aop1 -> MINUS
-- On CONSTCHAR reduce production exp_aop1 -> MINUS
-- On CASE reduce production exp_aop1 -> MINUS

State 231:
## Known stack suffix:
## LTGT
## LR(1) items:
exp_bop2 -> LTGT . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_bop2 -> LTGT
-- On TILDE reduce production exp_bop2 -> LTGT
-- On LPAREN reduce production exp_bop2 -> LTGT
-- On LET reduce production exp_bop2 -> LTGT
-- On LBRACKET reduce production exp_bop2 -> LTGT
-- On IF reduce production exp_bop2 -> LTGT
-- On IDENT reduce production exp_bop2 -> LTGT
-- On FN reduce production exp_bop2 -> LTGT
-- On FALSE reduce production exp_bop2 -> LTGT
-- On CONSTSTRING reduce production exp_bop2 -> LTGT
-- On CONSTINT reduce production exp_bop2 -> LTGT
-- On CONSTFLOAT reduce production exp_bop2 -> LTGT
-- On CONSTCHAR reduce production exp_bop2 -> LTGT
-- On CASE reduce production exp_bop2 -> LTGT

State 232:
## Known stack suffix:
## LTEQ
## LR(1) items:
exp_bop2 -> LTEQ . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_bop2 -> LTEQ
-- On TILDE reduce production exp_bop2 -> LTEQ
-- On LPAREN reduce production exp_bop2 -> LTEQ
-- On LET reduce production exp_bop2 -> LTEQ
-- On LBRACKET reduce production exp_bop2 -> LTEQ
-- On IF reduce production exp_bop2 -> LTEQ
-- On IDENT reduce production exp_bop2 -> LTEQ
-- On FN reduce production exp_bop2 -> LTEQ
-- On FALSE reduce production exp_bop2 -> LTEQ
-- On CONSTSTRING reduce production exp_bop2 -> LTEQ
-- On CONSTINT reduce production exp_bop2 -> LTEQ
-- On CONSTFLOAT reduce production exp_bop2 -> LTEQ
-- On CONSTCHAR reduce production exp_bop2 -> LTEQ
-- On CASE reduce production exp_bop2 -> LTEQ

State 233:
## Known stack suffix:
## LT
## LR(1) items:
exp_bop2 -> LT . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_bop2 -> LT
-- On TILDE reduce production exp_bop2 -> LT
-- On LPAREN reduce production exp_bop2 -> LT
-- On LET reduce production exp_bop2 -> LT
-- On LBRACKET reduce production exp_bop2 -> LT
-- On IF reduce production exp_bop2 -> LT
-- On IDENT reduce production exp_bop2 -> LT
-- On FN reduce production exp_bop2 -> LT
-- On FALSE reduce production exp_bop2 -> LT
-- On CONSTSTRING reduce production exp_bop2 -> LT
-- On CONSTINT reduce production exp_bop2 -> LT
-- On CONSTFLOAT reduce production exp_bop2 -> LT
-- On CONSTCHAR reduce production exp_bop2 -> LT
-- On CASE reduce production exp_bop2 -> LT

State 234:
## Known stack suffix:
## GTEQ
## LR(1) items:
exp_bop2 -> GTEQ . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_bop2 -> GTEQ
-- On TILDE reduce production exp_bop2 -> GTEQ
-- On LPAREN reduce production exp_bop2 -> GTEQ
-- On LET reduce production exp_bop2 -> GTEQ
-- On LBRACKET reduce production exp_bop2 -> GTEQ
-- On IF reduce production exp_bop2 -> GTEQ
-- On IDENT reduce production exp_bop2 -> GTEQ
-- On FN reduce production exp_bop2 -> GTEQ
-- On FALSE reduce production exp_bop2 -> GTEQ
-- On CONSTSTRING reduce production exp_bop2 -> GTEQ
-- On CONSTINT reduce production exp_bop2 -> GTEQ
-- On CONSTFLOAT reduce production exp_bop2 -> GTEQ
-- On CONSTCHAR reduce production exp_bop2 -> GTEQ
-- On CASE reduce production exp_bop2 -> GTEQ

State 235:
## Known stack suffix:
## GT
## LR(1) items:
exp_bop2 -> GT . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_bop2 -> GT
-- On TILDE reduce production exp_bop2 -> GT
-- On LPAREN reduce production exp_bop2 -> GT
-- On LET reduce production exp_bop2 -> GT
-- On LBRACKET reduce production exp_bop2 -> GT
-- On IF reduce production exp_bop2 -> GT
-- On IDENT reduce production exp_bop2 -> GT
-- On FN reduce production exp_bop2 -> GT
-- On FALSE reduce production exp_bop2 -> GT
-- On CONSTSTRING reduce production exp_bop2 -> GT
-- On CONSTINT reduce production exp_bop2 -> GT
-- On CONSTFLOAT reduce production exp_bop2 -> GT
-- On CONSTCHAR reduce production exp_bop2 -> GT
-- On CASE reduce production exp_bop2 -> GT

State 236:
## Known stack suffix:
## EQ
## LR(1) items:
exp_bop2 -> EQ . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_bop2 -> EQ
-- On TILDE reduce production exp_bop2 -> EQ
-- On LPAREN reduce production exp_bop2 -> EQ
-- On LET reduce production exp_bop2 -> EQ
-- On LBRACKET reduce production exp_bop2 -> EQ
-- On IF reduce production exp_bop2 -> EQ
-- On IDENT reduce production exp_bop2 -> EQ
-- On FN reduce production exp_bop2 -> EQ
-- On FALSE reduce production exp_bop2 -> EQ
-- On CONSTSTRING reduce production exp_bop2 -> EQ
-- On CONSTINT reduce production exp_bop2 -> EQ
-- On CONSTFLOAT reduce production exp_bop2 -> EQ
-- On CONSTCHAR reduce production exp_bop2 -> EQ
-- On CASE reduce production exp_bop2 -> EQ

State 237:
## Known stack suffix:
## DIV
## LR(1) items:
exp_aop2 -> DIV . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_aop2 -> DIV
-- On TILDE reduce production exp_aop2 -> DIV
-- On LPAREN reduce production exp_aop2 -> DIV
-- On LET reduce production exp_aop2 -> DIV
-- On LBRACKET reduce production exp_aop2 -> DIV
-- On IF reduce production exp_aop2 -> DIV
-- On IDENT reduce production exp_aop2 -> DIV
-- On FN reduce production exp_aop2 -> DIV
-- On FALSE reduce production exp_aop2 -> DIV
-- On CONSTSTRING reduce production exp_aop2 -> DIV
-- On CONSTINT reduce production exp_aop2 -> DIV
-- On CONSTFLOAT reduce production exp_aop2 -> DIV
-- On CONSTCHAR reduce production exp_aop2 -> DIV
-- On CASE reduce production exp_aop2 -> DIV

State 238:
## Known stack suffix:
## COLONCOLON
## LR(1) items:
exp_lop -> COLONCOLON . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_lop -> COLONCOLON
-- On TILDE reduce production exp_lop -> COLONCOLON
-- On LPAREN reduce production exp_lop -> COLONCOLON
-- On LET reduce production exp_lop -> COLONCOLON
-- On LBRACKET reduce production exp_lop -> COLONCOLON
-- On IF reduce production exp_lop -> COLONCOLON
-- On IDENT reduce production exp_lop -> COLONCOLON
-- On FN reduce production exp_lop -> COLONCOLON
-- On FALSE reduce production exp_lop -> COLONCOLON
-- On CONSTSTRING reduce production exp_lop -> COLONCOLON
-- On CONSTINT reduce production exp_lop -> COLONCOLON
-- On CONSTFLOAT reduce production exp_lop -> COLONCOLON
-- On CONSTCHAR reduce production exp_lop -> COLONCOLON
-- On CASE reduce production exp_lop -> COLONCOLON

State 239:
## Known stack suffix:
## BARBAR
## LR(1) items:
exp_bop1 -> BARBAR . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_bop1 -> BARBAR
-- On TILDE reduce production exp_bop1 -> BARBAR
-- On LPAREN reduce production exp_bop1 -> BARBAR
-- On LET reduce production exp_bop1 -> BARBAR
-- On LBRACKET reduce production exp_bop1 -> BARBAR
-- On IF reduce production exp_bop1 -> BARBAR
-- On IDENT reduce production exp_bop1 -> BARBAR
-- On FN reduce production exp_bop1 -> BARBAR
-- On FALSE reduce production exp_bop1 -> BARBAR
-- On CONSTSTRING reduce production exp_bop1 -> BARBAR
-- On CONSTINT reduce production exp_bop1 -> BARBAR
-- On CONSTFLOAT reduce production exp_bop1 -> BARBAR
-- On CONSTCHAR reduce production exp_bop1 -> BARBAR
-- On CASE reduce production exp_bop1 -> BARBAR

State 240:
## Known stack suffix:
## APPEND
## LR(1) items:
exp_lop -> APPEND . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_lop -> APPEND
-- On TILDE reduce production exp_lop -> APPEND
-- On LPAREN reduce production exp_lop -> APPEND
-- On LET reduce production exp_lop -> APPEND
-- On LBRACKET reduce production exp_lop -> APPEND
-- On IF reduce production exp_lop -> APPEND
-- On IDENT reduce production exp_lop -> APPEND
-- On FN reduce production exp_lop -> APPEND
-- On FALSE reduce production exp_lop -> APPEND
-- On CONSTSTRING reduce production exp_lop -> APPEND
-- On CONSTINT reduce production exp_lop -> APPEND
-- On CONSTFLOAT reduce production exp_lop -> APPEND
-- On CONSTCHAR reduce production exp_lop -> APPEND
-- On CASE reduce production exp_lop -> APPEND

State 241:
## Known stack suffix:
## AMPERAMPER
## LR(1) items:
exp_bop1 -> AMPERAMPER . [ TRUE TILDE LPAREN LET LBRACKET IF IDENT FN FALSE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR CASE ]
## Transitions:
## Reductions:
-- On TRUE reduce production exp_bop1 -> AMPERAMPER
-- On TILDE reduce production exp_bop1 -> AMPERAMPER
-- On LPAREN reduce production exp_bop1 -> AMPERAMPER
-- On LET reduce production exp_bop1 -> AMPERAMPER
-- On LBRACKET reduce production exp_bop1 -> AMPERAMPER
-- On IF reduce production exp_bop1 -> AMPERAMPER
-- On IDENT reduce production exp_bop1 -> AMPERAMPER
-- On FN reduce production exp_bop1 -> AMPERAMPER
-- On FALSE reduce production exp_bop1 -> AMPERAMPER
-- On CONSTSTRING reduce production exp_bop1 -> AMPERAMPER
-- On CONSTINT reduce production exp_bop1 -> AMPERAMPER
-- On CONSTFLOAT reduce production exp_bop1 -> AMPERAMPER
-- On CONSTCHAR reduce production exp_bop1 -> AMPERAMPER
-- On CASE reduce production exp_bop1 -> AMPERAMPER

State 242:
## Known stack suffix:
## exp exp_lop
## LR(1) items:
exp -> exp exp_lop . exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 243
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 243:
## Known stack suffix:
## exp exp_lop exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_lop exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp exp_lop exp . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:
-- On WITHTYPE reduce production exp -> exp exp_lop exp
-- On VAL reduce production exp -> exp exp_lop exp
-- On THEN reduce production exp -> exp exp_lop exp
-- On SORT reduce production exp -> exp exp_lop exp
-- On RPAREN reduce production exp -> exp exp_lop exp
-- On RBRACKET reduce production exp -> exp exp_lop exp
-- On OF reduce production exp -> exp exp_lop exp
-- On IN reduce production exp -> exp exp_lop exp
-- On FUN reduce production exp -> exp exp_lop exp
-- On EQ reduce production exp -> exp exp_lop exp
-- On EOF reduce production exp -> exp exp_lop exp
-- On END reduce production exp -> exp exp_lop exp
-- On ELSE reduce production exp -> exp exp_lop exp
-- On DATATYPE reduce production exp -> exp exp_lop exp
-- On COMMA reduce production exp -> exp exp_lop exp
-- On COLONCOLON reduce production exp -> exp exp_lop exp
-- On COLON reduce production exp -> exp exp_lop exp
-- On BAR reduce production exp -> exp exp_lop exp
-- On APPEND reduce production exp -> exp exp_lop exp
-- On AND reduce production exp -> exp exp_lop exp
** Conflict on COLONCOLON APPEND

State 244:
## Known stack suffix:
## exp exp_bop2
## LR(1) items:
exp -> exp exp_bop2 . exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 245
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 245:
## Known stack suffix:
## exp exp_bop2 exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp exp_bop2 exp . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_lop exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On APPEND shift to state 240
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:
-- On WITHTYPE reduce production exp -> exp exp_bop2 exp
-- On VAL reduce production exp -> exp exp_bop2 exp
-- On THEN reduce production exp -> exp exp_bop2 exp
-- On SORT reduce production exp -> exp exp_bop2 exp
-- On RPAREN reduce production exp -> exp exp_bop2 exp
-- On RBRACKET reduce production exp -> exp exp_bop2 exp
-- On OF reduce production exp -> exp exp_bop2 exp
-- On LTGT reduce production exp -> exp exp_bop2 exp
-- On LTEQ reduce production exp -> exp exp_bop2 exp
-- On LT reduce production exp -> exp exp_bop2 exp
-- On IN reduce production exp -> exp exp_bop2 exp
-- On GTEQ reduce production exp -> exp exp_bop2 exp
-- On GT reduce production exp -> exp exp_bop2 exp
-- On FUN reduce production exp -> exp exp_bop2 exp
-- On EQ reduce production exp -> exp exp_bop2 exp
-- On EOF reduce production exp -> exp exp_bop2 exp
-- On END reduce production exp -> exp exp_bop2 exp
-- On ELSE reduce production exp -> exp exp_bop2 exp
-- On DATATYPE reduce production exp -> exp exp_bop2 exp
-- On COMMA reduce production exp -> exp exp_bop2 exp
-- On COLONCOLON reduce production exp -> exp exp_bop2 exp
-- On COLON reduce production exp -> exp exp_bop2 exp
-- On BARBAR reduce production exp -> exp exp_bop2 exp
-- On BAR reduce production exp -> exp exp_bop2 exp
-- On APPEND reduce production exp -> exp exp_bop2 exp
-- On AND reduce production exp -> exp exp_bop2 exp
-- On AMPERAMPER reduce production exp -> exp exp_bop2 exp
** Conflict on COLONCOLON APPEND

State 246:
## Known stack suffix:
## exp exp_bop1
## LR(1) items:
exp -> exp exp_bop1 . exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 247
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 247:
## Known stack suffix:
## exp exp_bop1 exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp exp_bop1 exp . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_lop exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On APPEND shift to state 240
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:
-- On WITHTYPE reduce production exp -> exp exp_bop1 exp
-- On VAL reduce production exp -> exp exp_bop1 exp
-- On THEN reduce production exp -> exp exp_bop1 exp
-- On SORT reduce production exp -> exp exp_bop1 exp
-- On RPAREN reduce production exp -> exp exp_bop1 exp
-- On RBRACKET reduce production exp -> exp exp_bop1 exp
-- On OF reduce production exp -> exp exp_bop1 exp
-- On IN reduce production exp -> exp exp_bop1 exp
-- On FUN reduce production exp -> exp exp_bop1 exp
-- On EQ reduce production exp -> exp exp_bop1 exp
-- On EOF reduce production exp -> exp exp_bop1 exp
-- On END reduce production exp -> exp exp_bop1 exp
-- On ELSE reduce production exp -> exp exp_bop1 exp
-- On DATATYPE reduce production exp -> exp exp_bop1 exp
-- On COMMA reduce production exp -> exp exp_bop1 exp
-- On COLONCOLON reduce production exp -> exp exp_bop1 exp
-- On COLON reduce production exp -> exp exp_bop1 exp
-- On BARBAR reduce production exp -> exp exp_bop1 exp
-- On BAR reduce production exp -> exp exp_bop1 exp
-- On APPEND reduce production exp -> exp exp_bop1 exp
-- On AND reduce production exp -> exp exp_bop1 exp
-- On AMPERAMPER reduce production exp -> exp exp_bop1 exp
** Conflict on COLONCOLON APPEND

State 248:
## Known stack suffix:
## exp exp_aop2
## LR(1) items:
exp -> exp exp_aop2 . exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 249
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 249:
## Known stack suffix:
## exp exp_aop2 exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp exp_aop2 exp . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_lop exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On COLONCOLON shift to state 238
-- On APPEND shift to state 240
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:
-- On WITHTYPE reduce production exp -> exp exp_aop2 exp
-- On VAL reduce production exp -> exp exp_aop2 exp
-- On TIMES reduce production exp -> exp exp_aop2 exp
-- On THEN reduce production exp -> exp exp_aop2 exp
-- On SORT reduce production exp -> exp exp_aop2 exp
-- On RPAREN reduce production exp -> exp exp_aop2 exp
-- On RBRACKET reduce production exp -> exp exp_aop2 exp
-- On PLUS reduce production exp -> exp exp_aop2 exp
-- On PERCENT reduce production exp -> exp exp_aop2 exp
-- On OF reduce production exp -> exp exp_aop2 exp
-- On MINUS reduce production exp -> exp exp_aop2 exp
-- On LTGT reduce production exp -> exp exp_aop2 exp
-- On LTEQ reduce production exp -> exp exp_aop2 exp
-- On LT reduce production exp -> exp exp_aop2 exp
-- On IN reduce production exp -> exp exp_aop2 exp
-- On GTEQ reduce production exp -> exp exp_aop2 exp
-- On GT reduce production exp -> exp exp_aop2 exp
-- On FUN reduce production exp -> exp exp_aop2 exp
-- On EQ reduce production exp -> exp exp_aop2 exp
-- On EOF reduce production exp -> exp exp_aop2 exp
-- On END reduce production exp -> exp exp_aop2 exp
-- On ELSE reduce production exp -> exp exp_aop2 exp
-- On DIV reduce production exp -> exp exp_aop2 exp
-- On DATATYPE reduce production exp -> exp exp_aop2 exp
-- On COMMA reduce production exp -> exp exp_aop2 exp
-- On COLONCOLON reduce production exp -> exp exp_aop2 exp
-- On COLON reduce production exp -> exp exp_aop2 exp
-- On BARBAR reduce production exp -> exp exp_aop2 exp
-- On BAR reduce production exp -> exp exp_aop2 exp
-- On APPEND reduce production exp -> exp exp_aop2 exp
-- On AND reduce production exp -> exp exp_aop2 exp
-- On AMPERAMPER reduce production exp -> exp exp_aop2 exp
** Conflict on COLONCOLON APPEND

State 250:
## Known stack suffix:
## exp exp_aop1
## LR(1) items:
exp -> exp exp_aop1 . exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 251
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 251:
## Known stack suffix:
## exp exp_aop1 exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp exp_aop1 exp . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_lop exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PERCENT shift to state 224
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On APPEND shift to state 240
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:
-- On WITHTYPE reduce production exp -> exp exp_aop1 exp
-- On VAL reduce production exp -> exp exp_aop1 exp
-- On THEN reduce production exp -> exp exp_aop1 exp
-- On SORT reduce production exp -> exp exp_aop1 exp
-- On RPAREN reduce production exp -> exp exp_aop1 exp
-- On RBRACKET reduce production exp -> exp exp_aop1 exp
-- On PLUS reduce production exp -> exp exp_aop1 exp
-- On OF reduce production exp -> exp exp_aop1 exp
-- On MINUS reduce production exp -> exp exp_aop1 exp
-- On LTGT reduce production exp -> exp exp_aop1 exp
-- On LTEQ reduce production exp -> exp exp_aop1 exp
-- On LT reduce production exp -> exp exp_aop1 exp
-- On IN reduce production exp -> exp exp_aop1 exp
-- On GTEQ reduce production exp -> exp exp_aop1 exp
-- On GT reduce production exp -> exp exp_aop1 exp
-- On FUN reduce production exp -> exp exp_aop1 exp
-- On EQ reduce production exp -> exp exp_aop1 exp
-- On EOF reduce production exp -> exp exp_aop1 exp
-- On END reduce production exp -> exp exp_aop1 exp
-- On ELSE reduce production exp -> exp exp_aop1 exp
-- On DATATYPE reduce production exp -> exp exp_aop1 exp
-- On COMMA reduce production exp -> exp exp_aop1 exp
-- On COLONCOLON reduce production exp -> exp exp_aop1 exp
-- On COLON reduce production exp -> exp exp_aop1 exp
-- On BARBAR reduce production exp -> exp exp_aop1 exp
-- On BAR reduce production exp -> exp exp_aop1 exp
-- On APPEND reduce production exp -> exp exp_aop1 exp
-- On AND reduce production exp -> exp exp_aop1 exp
-- On AMPERAMPER reduce production exp -> exp exp_aop1 exp
** Conflict on COLONCOLON APPEND

State 252:
## Known stack suffix:
## constant
## LR(1) items:
simple_exp -> constant . [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production simple_exp -> constant
-- On VAL reduce production simple_exp -> constant
-- On TRUE reduce production simple_exp -> constant
-- On TIMES reduce production simple_exp -> constant
-- On TILDE reduce production simple_exp -> constant
-- On THEN reduce production simple_exp -> constant
-- On SORT reduce production simple_exp -> constant
-- On RPAREN reduce production simple_exp -> constant
-- On RBRACKET reduce production simple_exp -> constant
-- On PLUS reduce production simple_exp -> constant
-- On PERCENT reduce production simple_exp -> constant
-- On OF reduce production simple_exp -> constant
-- On MINUS reduce production simple_exp -> constant
-- On LTGT reduce production simple_exp -> constant
-- On LTEQ reduce production simple_exp -> constant
-- On LT reduce production simple_exp -> constant
-- On LPAREN reduce production simple_exp -> constant
-- On LET reduce production simple_exp -> constant
-- On LBRACKET reduce production simple_exp -> constant
-- On IN reduce production simple_exp -> constant
-- On IDENT reduce production simple_exp -> constant
-- On GTEQ reduce production simple_exp -> constant
-- On GT reduce production simple_exp -> constant
-- On FUN reduce production simple_exp -> constant
-- On FALSE reduce production simple_exp -> constant
-- On EQ reduce production simple_exp -> constant
-- On EOF reduce production simple_exp -> constant
-- On END reduce production simple_exp -> constant
-- On ELSE reduce production simple_exp -> constant
-- On DIV reduce production simple_exp -> constant
-- On DATATYPE reduce production simple_exp -> constant
-- On CONSTSTRING reduce production simple_exp -> constant
-- On CONSTINT reduce production simple_exp -> constant
-- On CONSTFLOAT reduce production simple_exp -> constant
-- On CONSTCHAR reduce production simple_exp -> constant
-- On COMMA reduce production simple_exp -> constant
-- On COLONCOLON reduce production simple_exp -> constant
-- On COLON reduce production simple_exp -> constant
-- On BARBAR reduce production simple_exp -> constant
-- On BAR reduce production simple_exp -> constant
-- On APPEND reduce production simple_exp -> constant
-- On AND reduce production simple_exp -> constant
-- On AMPERAMPER reduce production simple_exp -> constant

State 253:
## Known stack suffix:
## app_exp
## LR(1) items:
app_exp -> app_exp . simple_exp [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> app_exp . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IDENT shift to state 215
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On simple_exp shift to state 254
-- On constant shift to state 252
## Reductions:
-- On WITHTYPE reduce production exp -> app_exp
-- On VAL reduce production exp -> app_exp
-- On TIMES reduce production exp -> app_exp
-- On THEN reduce production exp -> app_exp
-- On SORT reduce production exp -> app_exp
-- On RPAREN reduce production exp -> app_exp
-- On RBRACKET reduce production exp -> app_exp
-- On PLUS reduce production exp -> app_exp
-- On PERCENT reduce production exp -> app_exp
-- On OF reduce production exp -> app_exp
-- On MINUS reduce production exp -> app_exp
-- On LTGT reduce production exp -> app_exp
-- On LTEQ reduce production exp -> app_exp
-- On LT reduce production exp -> app_exp
-- On IN reduce production exp -> app_exp
-- On GTEQ reduce production exp -> app_exp
-- On GT reduce production exp -> app_exp
-- On FUN reduce production exp -> app_exp
-- On EQ reduce production exp -> app_exp
-- On EOF reduce production exp -> app_exp
-- On END reduce production exp -> app_exp
-- On ELSE reduce production exp -> app_exp
-- On DIV reduce production exp -> app_exp
-- On DATATYPE reduce production exp -> app_exp
-- On COMMA reduce production exp -> app_exp
-- On COLONCOLON reduce production exp -> app_exp
-- On COLON reduce production exp -> app_exp
-- On BARBAR reduce production exp -> app_exp
-- On BAR reduce production exp -> app_exp
-- On APPEND reduce production exp -> app_exp
-- On AND reduce production exp -> app_exp
-- On AMPERAMPER reduce production exp -> app_exp

State 254:
## Known stack suffix:
## app_exp simple_exp
## LR(1) items:
app_exp -> app_exp simple_exp . [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production app_exp -> app_exp simple_exp
-- On VAL reduce production app_exp -> app_exp simple_exp
-- On TRUE reduce production app_exp -> app_exp simple_exp
-- On TIMES reduce production app_exp -> app_exp simple_exp
-- On TILDE reduce production app_exp -> app_exp simple_exp
-- On THEN reduce production app_exp -> app_exp simple_exp
-- On SORT reduce production app_exp -> app_exp simple_exp
-- On RPAREN reduce production app_exp -> app_exp simple_exp
-- On RBRACKET reduce production app_exp -> app_exp simple_exp
-- On PLUS reduce production app_exp -> app_exp simple_exp
-- On PERCENT reduce production app_exp -> app_exp simple_exp
-- On OF reduce production app_exp -> app_exp simple_exp
-- On MINUS reduce production app_exp -> app_exp simple_exp
-- On LTGT reduce production app_exp -> app_exp simple_exp
-- On LTEQ reduce production app_exp -> app_exp simple_exp
-- On LT reduce production app_exp -> app_exp simple_exp
-- On LPAREN reduce production app_exp -> app_exp simple_exp
-- On LET reduce production app_exp -> app_exp simple_exp
-- On LBRACKET reduce production app_exp -> app_exp simple_exp
-- On IN reduce production app_exp -> app_exp simple_exp
-- On IDENT reduce production app_exp -> app_exp simple_exp
-- On GTEQ reduce production app_exp -> app_exp simple_exp
-- On GT reduce production app_exp -> app_exp simple_exp
-- On FUN reduce production app_exp -> app_exp simple_exp
-- On FALSE reduce production app_exp -> app_exp simple_exp
-- On EQ reduce production app_exp -> app_exp simple_exp
-- On EOF reduce production app_exp -> app_exp simple_exp
-- On END reduce production app_exp -> app_exp simple_exp
-- On ELSE reduce production app_exp -> app_exp simple_exp
-- On DIV reduce production app_exp -> app_exp simple_exp
-- On DATATYPE reduce production app_exp -> app_exp simple_exp
-- On CONSTSTRING reduce production app_exp -> app_exp simple_exp
-- On CONSTINT reduce production app_exp -> app_exp simple_exp
-- On CONSTFLOAT reduce production app_exp -> app_exp simple_exp
-- On CONSTCHAR reduce production app_exp -> app_exp simple_exp
-- On COMMA reduce production app_exp -> app_exp simple_exp
-- On COLONCOLON reduce production app_exp -> app_exp simple_exp
-- On COLON reduce production app_exp -> app_exp simple_exp
-- On BARBAR reduce production app_exp -> app_exp simple_exp
-- On BAR reduce production app_exp -> app_exp simple_exp
-- On APPEND reduce production app_exp -> app_exp simple_exp
-- On AND reduce production app_exp -> app_exp simple_exp
-- On AMPERAMPER reduce production app_exp -> app_exp simple_exp

State 255:
## Known stack suffix:
## pattern EQGT exp
## LR(1) items:
case_clause -> pattern EQGT exp . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_lop exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:
-- On WITHTYPE reduce production case_clause -> pattern EQGT exp
-- On VAL reduce production case_clause -> pattern EQGT exp
-- On THEN reduce production case_clause -> pattern EQGT exp
-- On SORT reduce production case_clause -> pattern EQGT exp
-- On RPAREN reduce production case_clause -> pattern EQGT exp
-- On RBRACKET reduce production case_clause -> pattern EQGT exp
-- On OF reduce production case_clause -> pattern EQGT exp
-- On IN reduce production case_clause -> pattern EQGT exp
-- On FUN reduce production case_clause -> pattern EQGT exp
-- On EQ reduce production case_clause -> pattern EQGT exp
-- On EOF reduce production case_clause -> pattern EQGT exp
-- On END reduce production case_clause -> pattern EQGT exp
-- On ELSE reduce production case_clause -> pattern EQGT exp
-- On DATATYPE reduce production case_clause -> pattern EQGT exp
-- On COMMA reduce production case_clause -> pattern EQGT exp
-- On COLONCOLON reduce production case_clause -> pattern EQGT exp
-- On COLON reduce production case_clause -> pattern EQGT exp
-- On BAR reduce production case_clause -> pattern EQGT exp
-- On APPEND reduce production case_clause -> pattern EQGT exp
-- On AND reduce production case_clause -> pattern EQGT exp
** Conflict on COLONCOLON APPEND

State 256:
## Known stack suffix:
## FN case_clauses
## LR(1) items:
exp -> FN case_clauses . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production exp -> FN case_clauses
-- On VAL reduce production exp -> FN case_clauses
-- On TIMES reduce production exp -> FN case_clauses
-- On THEN reduce production exp -> FN case_clauses
-- On SORT reduce production exp -> FN case_clauses
-- On RPAREN reduce production exp -> FN case_clauses
-- On RBRACKET reduce production exp -> FN case_clauses
-- On PLUS reduce production exp -> FN case_clauses
-- On PERCENT reduce production exp -> FN case_clauses
-- On OF reduce production exp -> FN case_clauses
-- On MINUS reduce production exp -> FN case_clauses
-- On LTGT reduce production exp -> FN case_clauses
-- On LTEQ reduce production exp -> FN case_clauses
-- On LT reduce production exp -> FN case_clauses
-- On IN reduce production exp -> FN case_clauses
-- On GTEQ reduce production exp -> FN case_clauses
-- On GT reduce production exp -> FN case_clauses
-- On FUN reduce production exp -> FN case_clauses
-- On EQ reduce production exp -> FN case_clauses
-- On EOF reduce production exp -> FN case_clauses
-- On END reduce production exp -> FN case_clauses
-- On ELSE reduce production exp -> FN case_clauses
-- On DIV reduce production exp -> FN case_clauses
-- On DATATYPE reduce production exp -> FN case_clauses
-- On COMMA reduce production exp -> FN case_clauses
-- On COLONCOLON reduce production exp -> FN case_clauses
-- On COLON reduce production exp -> FN case_clauses
-- On BARBAR reduce production exp -> FN case_clauses
-- On BAR reduce production exp -> FN case_clauses
-- On APPEND reduce production exp -> FN case_clauses
-- On AND reduce production exp -> FN case_clauses
-- On AMPERAMPER reduce production exp -> FN case_clauses

State 257:
## Known stack suffix:
## IF exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ TIMES THEN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ TIMES THEN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ TIMES THEN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ TIMES THEN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_lop exp [ TIMES THEN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> IF exp . THEN exp ELSE exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On THEN shift to state 258
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On EQ shift to state 236
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:

State 258:
## Known stack suffix:
## IF exp THEN
## LR(1) items:
exp -> IF exp THEN . exp ELSE exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 259
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 259:
## Known stack suffix:
## IF exp THEN exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ ELSE DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ ELSE DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ ELSE DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ ELSE DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_lop exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ ELSE DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> IF exp THEN exp . ELSE exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On EQ shift to state 236
-- On ELSE shift to state 260
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:

State 260:
## Known stack suffix:
## IF exp THEN exp ELSE
## LR(1) items:
exp -> IF exp THEN exp ELSE . exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 261
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 261:
## Known stack suffix:
## IF exp THEN exp ELSE exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_lop exp [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> IF exp THEN exp ELSE exp . [ WITHTYPE VAL TIMES THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF END ELSE DIV DATATYPE COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:
-- On WITHTYPE reduce production exp -> IF exp THEN exp ELSE exp
-- On VAL reduce production exp -> IF exp THEN exp ELSE exp
-- On THEN reduce production exp -> IF exp THEN exp ELSE exp
-- On SORT reduce production exp -> IF exp THEN exp ELSE exp
-- On RPAREN reduce production exp -> IF exp THEN exp ELSE exp
-- On RBRACKET reduce production exp -> IF exp THEN exp ELSE exp
-- On OF reduce production exp -> IF exp THEN exp ELSE exp
-- On IN reduce production exp -> IF exp THEN exp ELSE exp
-- On FUN reduce production exp -> IF exp THEN exp ELSE exp
-- On EQ reduce production exp -> IF exp THEN exp ELSE exp
-- On EOF reduce production exp -> IF exp THEN exp ELSE exp
-- On END reduce production exp -> IF exp THEN exp ELSE exp
-- On ELSE reduce production exp -> IF exp THEN exp ELSE exp
-- On DATATYPE reduce production exp -> IF exp THEN exp ELSE exp
-- On COMMA reduce production exp -> IF exp THEN exp ELSE exp
-- On COLONCOLON reduce production exp -> IF exp THEN exp ELSE exp
-- On COLON reduce production exp -> IF exp THEN exp ELSE exp
-- On BAR reduce production exp -> IF exp THEN exp ELSE exp
-- On APPEND reduce production exp -> IF exp THEN exp ELSE exp
-- On AND reduce production exp -> IF exp THEN exp ELSE exp
** Conflict on COLONCOLON APPEND

State 262:
## Known stack suffix:
## LBRACKET exp_list
## LR(1) items:
simple_exp -> LBRACKET exp_list . RBRACKET [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On RBRACKET shift to state 263
## Reductions:

State 263:
## Known stack suffix:
## LBRACKET exp_list RBRACKET
## LR(1) items:
simple_exp -> LBRACKET exp_list RBRACKET . [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On VAL reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On TRUE reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On TIMES reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On TILDE reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On THEN reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On SORT reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On RPAREN reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On RBRACKET reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On PLUS reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On PERCENT reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On OF reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On MINUS reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On LTGT reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On LTEQ reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On LT reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On LPAREN reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On LET reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On LBRACKET reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On IN reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On IDENT reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On GTEQ reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On GT reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On FUN reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On FALSE reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On EQ reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On EOF reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On END reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On ELSE reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On DIV reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On DATATYPE reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On CONSTSTRING reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On CONSTINT reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On CONSTFLOAT reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On CONSTCHAR reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On COMMA reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On COLONCOLON reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On COLON reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On BARBAR reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On BAR reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On APPEND reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On AND reduce production simple_exp -> LBRACKET exp_list RBRACKET
-- On AMPERAMPER reduce production simple_exp -> LBRACKET exp_list RBRACKET

State 264:
## Known stack suffix:
## exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ TIMES RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ TIMES RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ TIMES RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ TIMES RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_lop exp [ TIMES RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
exp_list -> exp . comma_exp_list [ RBRACKET ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On EQ shift to state 236
-- On DIV shift to state 237
-- On COMMA shift to state 265
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
-- On comma_exp_list shift to state 268
## Reductions:
-- On RBRACKET reduce production comma_exp_list ->

State 265:
## Known stack suffix:
## COMMA
## LR(1) items:
comma_exp_list -> COMMA . exp comma_exp_list [ RPAREN RBRACKET ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 266
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 266:
## Known stack suffix:
## COMMA exp
## LR(1) items:
comma_exp_list -> COMMA exp . comma_exp_list [ RPAREN RBRACKET ]
exp -> exp . exp_bop1 exp [ TIMES RPAREN RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ TIMES RPAREN RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ TIMES RPAREN RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ TIMES RPAREN RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_lop exp [ TIMES RPAREN RBRACKET PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON BARBAR APPEND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On EQ shift to state 236
-- On DIV shift to state 237
-- On COMMA shift to state 265
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
-- On comma_exp_list shift to state 267
## Reductions:
-- On RPAREN reduce production comma_exp_list ->
-- On RBRACKET reduce production comma_exp_list ->

State 267:
## Known stack suffix:
## COMMA exp comma_exp_list
## LR(1) items:
comma_exp_list -> COMMA exp comma_exp_list . [ RPAREN RBRACKET ]
## Transitions:
## Reductions:
-- On RPAREN reduce production comma_exp_list -> COMMA exp comma_exp_list
-- On RBRACKET reduce production comma_exp_list -> COMMA exp comma_exp_list

State 268:
## Known stack suffix:
## exp comma_exp_list
## LR(1) items:
exp_list -> exp comma_exp_list . [ RPAREN RBRACKET ]
## Transitions:
## Reductions:
-- On RPAREN reduce production exp_list -> exp comma_exp_list
-- On RBRACKET reduce production exp_list -> exp comma_exp_list

State 269:
## Known stack suffix:
## IDENT fun_args EQ exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ WITHTYPE VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ WITHTYPE VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ WITHTYPE VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ WITHTYPE VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR BAR APPEND AND AMPERAMPER ]
exp -> exp . exp_lop exp [ WITHTYPE VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR BAR APPEND AND AMPERAMPER ]
fun_decl_clause -> IDENT fun_args EQ exp . [ WITHTYPE VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On EQ shift to state 236
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:
-- On WITHTYPE reduce production fun_decl_clause -> IDENT fun_args EQ exp
-- On VAL reduce production fun_decl_clause -> IDENT fun_args EQ exp
-- On SORT reduce production fun_decl_clause -> IDENT fun_args EQ exp
-- On IN reduce production fun_decl_clause -> IDENT fun_args EQ exp
-- On FUN reduce production fun_decl_clause -> IDENT fun_args EQ exp
-- On EOF reduce production fun_decl_clause -> IDENT fun_args EQ exp
-- On DATATYPE reduce production fun_decl_clause -> IDENT fun_args EQ exp
-- On BAR reduce production fun_decl_clause -> IDENT fun_args EQ exp
-- On AND reduce production fun_decl_clause -> IDENT fun_args EQ exp

State 270:
## Known stack suffix:
## tvar_para fun_decl_clauses
## LR(1) items:
fun_decl -> tvar_para fun_decl_clauses . owithtype [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On WITHTYPE shift to state 271
-- On owithtype shift to state 273
## Reductions:
-- On VAL reduce production owithtype ->
-- On SORT reduce production owithtype ->
-- On IN reduce production owithtype ->
-- On FUN reduce production owithtype ->
-- On EOF reduce production owithtype ->
-- On DATATYPE reduce production owithtype ->
-- On AND reduce production owithtype ->

State 271:
## Known stack suffix:
## WITHTYPE
## LR(1) items:
owithtype -> WITHTYPE . dtype [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 272
## Reductions:
-- On DOT reduce production tvar_para ->

State 272:
## Known stack suffix:
## WITHTYPE dtype
## LR(1) items:
owithtype -> WITHTYPE dtype . [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
## Reductions:
-- On VAL reduce production owithtype -> WITHTYPE dtype
-- On SORT reduce production owithtype -> WITHTYPE dtype
-- On IN reduce production owithtype -> WITHTYPE dtype
-- On FUN reduce production owithtype -> WITHTYPE dtype
-- On EOF reduce production owithtype -> WITHTYPE dtype
-- On DATATYPE reduce production owithtype -> WITHTYPE dtype
-- On AND reduce production owithtype -> WITHTYPE dtype

State 273:
## Known stack suffix:
## tvar_para fun_decl_clauses owithtype
## LR(1) items:
fun_decl -> tvar_para fun_decl_clauses owithtype . [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
## Reductions:
-- On VAL reduce production fun_decl -> tvar_para fun_decl_clauses owithtype
-- On SORT reduce production fun_decl -> tvar_para fun_decl_clauses owithtype
-- On IN reduce production fun_decl -> tvar_para fun_decl_clauses owithtype
-- On FUN reduce production fun_decl -> tvar_para fun_decl_clauses owithtype
-- On EOF reduce production fun_decl -> tvar_para fun_decl_clauses owithtype
-- On DATATYPE reduce production fun_decl -> tvar_para fun_decl_clauses owithtype
-- On AND reduce production fun_decl -> tvar_para fun_decl_clauses owithtype

State 274:
## Known stack suffix:
## fun_decl_clause
## LR(1) items:
fun_decl_clauses -> fun_decl_clause . BAR fun_decl_clauses [ WITHTYPE VAL SORT IN FUN EOF DATATYPE AND ]
fun_decl_clauses -> fun_decl_clause . [ WITHTYPE VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On BAR shift to state 275
## Reductions:
-- On WITHTYPE reduce production fun_decl_clauses -> fun_decl_clause
-- On VAL reduce production fun_decl_clauses -> fun_decl_clause
-- On SORT reduce production fun_decl_clauses -> fun_decl_clause
-- On IN reduce production fun_decl_clauses -> fun_decl_clause
-- On FUN reduce production fun_decl_clauses -> fun_decl_clause
-- On EOF reduce production fun_decl_clauses -> fun_decl_clause
-- On DATATYPE reduce production fun_decl_clauses -> fun_decl_clause
-- On AND reduce production fun_decl_clauses -> fun_decl_clause

State 275:
## Known stack suffix:
## fun_decl_clause BAR
## LR(1) items:
fun_decl_clauses -> fun_decl_clause BAR . fun_decl_clauses [ WITHTYPE VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On IDENT shift to state 208
-- On fun_decl_clauses shift to state 276
-- On fun_decl_clause shift to state 274
## Reductions:

State 276:
## Known stack suffix:
## fun_decl_clause BAR fun_decl_clauses
## LR(1) items:
fun_decl_clauses -> fun_decl_clause BAR fun_decl_clauses . [ WITHTYPE VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production fun_decl_clauses -> fun_decl_clause BAR fun_decl_clauses
-- On VAL reduce production fun_decl_clauses -> fun_decl_clause BAR fun_decl_clauses
-- On SORT reduce production fun_decl_clauses -> fun_decl_clause BAR fun_decl_clauses
-- On IN reduce production fun_decl_clauses -> fun_decl_clause BAR fun_decl_clauses
-- On FUN reduce production fun_decl_clauses -> fun_decl_clause BAR fun_decl_clauses
-- On EOF reduce production fun_decl_clauses -> fun_decl_clause BAR fun_decl_clauses
-- On DATATYPE reduce production fun_decl_clauses -> fun_decl_clause BAR fun_decl_clauses
-- On AND reduce production fun_decl_clauses -> fun_decl_clause BAR fun_decl_clauses

State 277:
## Known stack suffix:
## tvar
## LR(1) items:
tvar_para -> tvar . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT reduce production tvar_para -> tvar

State 278:
## Known stack suffix:
## FUN fun_decls
## LR(1) items:
decl -> FUN fun_decls . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production decl -> FUN fun_decls
-- On SORT reduce production decl -> FUN fun_decls
-- On IN reduce production decl -> FUN fun_decls
-- On FUN reduce production decl -> FUN fun_decls
-- On EOF reduce production decl -> FUN fun_decls
-- On DATATYPE reduce production decl -> FUN fun_decls

State 279:
## Known stack suffix:
## fun_decl
## LR(1) items:
fun_decls -> fun_decl . AND fun_decls [ VAL SORT IN FUN EOF DATATYPE ]
fun_decls -> fun_decl . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On AND shift to state 280
## Reductions:
-- On VAL reduce production fun_decls -> fun_decl
-- On SORT reduce production fun_decls -> fun_decl
-- On IN reduce production fun_decls -> fun_decl
-- On FUN reduce production fun_decls -> fun_decl
-- On EOF reduce production fun_decls -> fun_decl
-- On DATATYPE reduce production fun_decls -> fun_decl

State 280:
## Known stack suffix:
## fun_decl AND
## LR(1) items:
fun_decls -> fun_decl AND . fun_decls [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On QUOTE shift to state 46
-- On LPAREN shift to state 206
-- On tvar_para shift to state 207
-- On tvar shift to state 277
-- On fun_decls shift to state 281
-- On fun_decl shift to state 279
## Reductions:
-- On IDENT reduce production tvar_para ->

State 281:
## Known stack suffix:
## fun_decl AND fun_decls
## LR(1) items:
fun_decls -> fun_decl AND fun_decls . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production fun_decls -> fun_decl AND fun_decls
-- On SORT reduce production fun_decls -> fun_decl AND fun_decls
-- On IN reduce production fun_decls -> fun_decl AND fun_decls
-- On FUN reduce production fun_decls -> fun_decl AND fun_decls
-- On EOF reduce production fun_decls -> fun_decl AND fun_decls
-- On DATATYPE reduce production fun_decls -> fun_decl AND fun_decls

State 282:
## Known stack suffix:
## DATATYPE
## LR(1) items:
decl -> DATATYPE . union_decls [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On QUOTE shift to state 46
-- On LPAREN shift to state 206
-- On union_decls shift to state 283
-- On union_decl shift to state 284
-- On tvar_para shift to state 287
-- On tvar shift to state 277
## Reductions:
-- On IDENT reduce production tvar_para ->

State 283:
## Known stack suffix:
## DATATYPE union_decls
## LR(1) items:
decl -> DATATYPE union_decls . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production decl -> DATATYPE union_decls
-- On SORT reduce production decl -> DATATYPE union_decls
-- On IN reduce production decl -> DATATYPE union_decls
-- On FUN reduce production decl -> DATATYPE union_decls
-- On EOF reduce production decl -> DATATYPE union_decls
-- On DATATYPE reduce production decl -> DATATYPE union_decls

State 284:
## Known stack suffix:
## union_decl
## LR(1) items:
union_decls -> union_decl . AND union_decls [ VAL SORT IN FUN EOF DATATYPE ]
union_decls -> union_decl . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On AND shift to state 285
## Reductions:
-- On VAL reduce production union_decls -> union_decl
-- On SORT reduce production union_decls -> union_decl
-- On IN reduce production union_decls -> union_decl
-- On FUN reduce production union_decls -> union_decl
-- On EOF reduce production union_decls -> union_decl
-- On DATATYPE reduce production union_decls -> union_decl

State 285:
## Known stack suffix:
## union_decl AND
## LR(1) items:
union_decls -> union_decl AND . union_decls [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On QUOTE shift to state 46
-- On LPAREN shift to state 206
-- On union_decls shift to state 286
-- On union_decl shift to state 284
-- On tvar_para shift to state 287
-- On tvar shift to state 277
## Reductions:
-- On IDENT reduce production tvar_para ->

State 286:
## Known stack suffix:
## union_decl AND union_decls
## LR(1) items:
union_decls -> union_decl AND union_decls . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production union_decls -> union_decl AND union_decls
-- On SORT reduce production union_decls -> union_decl AND union_decls
-- On IN reduce production union_decls -> union_decl AND union_decls
-- On FUN reduce production union_decls -> union_decl AND union_decls
-- On EOF reduce production union_decls -> union_decl AND union_decls
-- On DATATYPE reduce production union_decls -> union_decl AND union_decls

State 287:
## Known stack suffix:
## tvar_para
## LR(1) items:
union_decl -> tvar_para . IDENT ud_sorts EQ union_field_decls [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On IDENT shift to state 288
## Reductions:

State 288:
## Known stack suffix:
## tvar_para IDENT
## LR(1) items:
union_decl -> tvar_para IDENT . ud_sorts EQ union_field_decls [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On WITH shift to state 289
-- On ud_sorts shift to state 297
## Reductions:
-- On EQ reduce production ud_sorts ->

State 289:
## Known stack suffix:
## WITH
## LR(1) items:
ud_sorts -> WITH . isort [ EQ ]
ud_sorts -> WITH . LPAREN open_isort_list [ EQ ]
## Transitions:
-- On NAT shift to state 116
-- On LPAREN shift to state 290
-- On LBRACE shift to state 117
-- On INT shift to state 120
-- On IDENT shift to state 121
-- On isort shift to state 296
## Reductions:

State 290:
## Known stack suffix:
## WITH LPAREN
## LR(1) items:
ud_sorts -> WITH LPAREN . open_isort_list [ EQ ]
## Transitions:
-- On NAT shift to state 116
-- On LBRACE shift to state 117
-- On INT shift to state 120
-- On IDENT shift to state 121
-- On open_isort_list shift to state 291
-- On isort shift to state 292
## Reductions:

State 291:
## Known stack suffix:
## WITH LPAREN open_isort_list
## LR(1) items:
ud_sorts -> WITH LPAREN open_isort_list . [ EQ ]
## Transitions:
## Reductions:
-- On EQ reduce production ud_sorts -> WITH LPAREN open_isort_list

State 292:
## Known stack suffix:
## isort
## LR(1) items:
open_isort_list -> isort . RPAREN [ EQ ]
open_isort_list -> isort . COMMA open_isort_list [ EQ ]
## Transitions:
-- On RPAREN shift to state 293
-- On COMMA shift to state 294
## Reductions:

State 293:
## Known stack suffix:
## isort RPAREN
## LR(1) items:
open_isort_list -> isort RPAREN . [ EQ ]
## Transitions:
## Reductions:
-- On EQ reduce production open_isort_list -> isort RPAREN

State 294:
## Known stack suffix:
## isort COMMA
## LR(1) items:
open_isort_list -> isort COMMA . open_isort_list [ EQ ]
## Transitions:
-- On NAT shift to state 116
-- On LBRACE shift to state 117
-- On INT shift to state 120
-- On IDENT shift to state 121
-- On open_isort_list shift to state 295
-- On isort shift to state 292
## Reductions:

State 295:
## Known stack suffix:
## isort COMMA open_isort_list
## LR(1) items:
open_isort_list -> isort COMMA open_isort_list . [ EQ ]
## Transitions:
## Reductions:
-- On EQ reduce production open_isort_list -> isort COMMA open_isort_list

State 296:
## Known stack suffix:
## WITH isort
## LR(1) items:
ud_sorts -> WITH isort . [ EQ ]
## Transitions:
## Reductions:
-- On EQ reduce production ud_sorts -> WITH isort

State 297:
## Known stack suffix:
## tvar_para IDENT ud_sorts
## LR(1) items:
union_decl -> tvar_para IDENT ud_sorts . EQ union_field_decls [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On EQ shift to state 298
## Reductions:

State 298:
## Known stack suffix:
## tvar_para IDENT ud_sorts EQ
## LR(1) items:
union_decl -> tvar_para IDENT ud_sorts EQ . union_field_decls [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On LBRACE shift to state 129
-- On IDENT shift to state 299
-- On union_field_decls shift to state 306
-- On union_field_decl shift to state 307
-- On uni_ivar_decls shift to state 310
## Reductions:

State 299:
## Known stack suffix:
## IDENT
## LR(1) items:
union_field_decl -> IDENT . dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
union_field_decl -> IDENT . LPAREN open_comma_index_list dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On OF shift to state 300
-- On LPAREN shift to state 302
-- On dtype_opt shift to state 305
## Reductions:
-- On VAL reduce production dtype_opt ->
-- On SORT reduce production dtype_opt ->
-- On IN reduce production dtype_opt ->
-- On FUN reduce production dtype_opt ->
-- On EOF reduce production dtype_opt ->
-- On DATATYPE reduce production dtype_opt ->
-- On BAR reduce production dtype_opt ->
-- On AND reduce production dtype_opt ->

State 300:
## Known stack suffix:
## OF
## LR(1) items:
dtype_opt -> OF . dtype [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 301
## Reductions:
-- On DOT reduce production tvar_para ->

State 301:
## Known stack suffix:
## OF dtype
## LR(1) items:
dtype_opt -> OF dtype . [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production dtype_opt -> OF dtype
-- On SORT reduce production dtype_opt -> OF dtype
-- On IN reduce production dtype_opt -> OF dtype
-- On FUN reduce production dtype_opt -> OF dtype
-- On EOF reduce production dtype_opt -> OF dtype
-- On DATATYPE reduce production dtype_opt -> OF dtype
-- On BAR reduce production dtype_opt -> OF dtype
-- On AND reduce production dtype_opt -> OF dtype

State 302:
## Known stack suffix:
## IDENT LPAREN
## LR(1) items:
union_field_decl -> IDENT LPAREN . open_comma_index_list dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On open_comma_index_list shift to state 303
-- On int_index shift to state 57
-- On index shift to state 80
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 303:
## Known stack suffix:
## IDENT LPAREN open_comma_index_list
## LR(1) items:
union_field_decl -> IDENT LPAREN open_comma_index_list . dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On OF shift to state 300
-- On dtype_opt shift to state 304
## Reductions:
-- On VAL reduce production dtype_opt ->
-- On SORT reduce production dtype_opt ->
-- On IN reduce production dtype_opt ->
-- On FUN reduce production dtype_opt ->
-- On EOF reduce production dtype_opt ->
-- On DATATYPE reduce production dtype_opt ->
-- On BAR reduce production dtype_opt ->
-- On AND reduce production dtype_opt ->

State 304:
## Known stack suffix:
## IDENT LPAREN open_comma_index_list dtype_opt
## LR(1) items:
union_field_decl -> IDENT LPAREN open_comma_index_list dtype_opt . [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production union_field_decl -> IDENT LPAREN open_comma_index_list dtype_opt
-- On SORT reduce production union_field_decl -> IDENT LPAREN open_comma_index_list dtype_opt
-- On IN reduce production union_field_decl -> IDENT LPAREN open_comma_index_list dtype_opt
-- On FUN reduce production union_field_decl -> IDENT LPAREN open_comma_index_list dtype_opt
-- On EOF reduce production union_field_decl -> IDENT LPAREN open_comma_index_list dtype_opt
-- On DATATYPE reduce production union_field_decl -> IDENT LPAREN open_comma_index_list dtype_opt
-- On BAR reduce production union_field_decl -> IDENT LPAREN open_comma_index_list dtype_opt
-- On AND reduce production union_field_decl -> IDENT LPAREN open_comma_index_list dtype_opt

State 305:
## Known stack suffix:
## IDENT dtype_opt
## LR(1) items:
union_field_decl -> IDENT dtype_opt . [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production union_field_decl -> IDENT dtype_opt
-- On SORT reduce production union_field_decl -> IDENT dtype_opt
-- On IN reduce production union_field_decl -> IDENT dtype_opt
-- On FUN reduce production union_field_decl -> IDENT dtype_opt
-- On EOF reduce production union_field_decl -> IDENT dtype_opt
-- On DATATYPE reduce production union_field_decl -> IDENT dtype_opt
-- On BAR reduce production union_field_decl -> IDENT dtype_opt
-- On AND reduce production union_field_decl -> IDENT dtype_opt

State 306:
## Known stack suffix:
## tvar_para IDENT ud_sorts EQ union_field_decls
## LR(1) items:
union_decl -> tvar_para IDENT ud_sorts EQ union_field_decls . [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
## Reductions:
-- On VAL reduce production union_decl -> tvar_para IDENT ud_sorts EQ union_field_decls
-- On SORT reduce production union_decl -> tvar_para IDENT ud_sorts EQ union_field_decls
-- On IN reduce production union_decl -> tvar_para IDENT ud_sorts EQ union_field_decls
-- On FUN reduce production union_decl -> tvar_para IDENT ud_sorts EQ union_field_decls
-- On EOF reduce production union_decl -> tvar_para IDENT ud_sorts EQ union_field_decls
-- On DATATYPE reduce production union_decl -> tvar_para IDENT ud_sorts EQ union_field_decls
-- On AND reduce production union_decl -> tvar_para IDENT ud_sorts EQ union_field_decls

State 307:
## Known stack suffix:
## union_field_decl
## LR(1) items:
union_field_decls -> union_field_decl . BAR union_field_decls [ VAL SORT IN FUN EOF DATATYPE AND ]
union_field_decls -> union_field_decl . [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On BAR shift to state 308
## Reductions:
-- On VAL reduce production union_field_decls -> union_field_decl
-- On SORT reduce production union_field_decls -> union_field_decl
-- On IN reduce production union_field_decls -> union_field_decl
-- On FUN reduce production union_field_decls -> union_field_decl
-- On EOF reduce production union_field_decls -> union_field_decl
-- On DATATYPE reduce production union_field_decls -> union_field_decl
-- On AND reduce production union_field_decls -> union_field_decl

State 308:
## Known stack suffix:
## union_field_decl BAR
## LR(1) items:
union_field_decls -> union_field_decl BAR . union_field_decls [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On LBRACE shift to state 129
-- On IDENT shift to state 299
-- On union_field_decls shift to state 309
-- On union_field_decl shift to state 307
-- On uni_ivar_decls shift to state 310
## Reductions:

State 309:
## Known stack suffix:
## union_field_decl BAR union_field_decls
## LR(1) items:
union_field_decls -> union_field_decl BAR union_field_decls . [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
## Reductions:
-- On VAL reduce production union_field_decls -> union_field_decl BAR union_field_decls
-- On SORT reduce production union_field_decls -> union_field_decl BAR union_field_decls
-- On IN reduce production union_field_decls -> union_field_decl BAR union_field_decls
-- On FUN reduce production union_field_decls -> union_field_decl BAR union_field_decls
-- On EOF reduce production union_field_decls -> union_field_decl BAR union_field_decls
-- On DATATYPE reduce production union_field_decls -> union_field_decl BAR union_field_decls
-- On AND reduce production union_field_decls -> union_field_decl BAR union_field_decls

State 310:
## Known stack suffix:
## uni_ivar_decls
## LR(1) items:
union_field_decl -> uni_ivar_decls . IDENT dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
union_field_decl -> uni_ivar_decls . IDENT LPAREN open_comma_index_list dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On IDENT shift to state 311
## Reductions:

State 311:
## Known stack suffix:
## uni_ivar_decls IDENT
## LR(1) items:
union_field_decl -> uni_ivar_decls IDENT . dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
union_field_decl -> uni_ivar_decls IDENT . LPAREN open_comma_index_list dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On OF shift to state 300
-- On LPAREN shift to state 312
-- On dtype_opt shift to state 315
## Reductions:
-- On VAL reduce production dtype_opt ->
-- On SORT reduce production dtype_opt ->
-- On IN reduce production dtype_opt ->
-- On FUN reduce production dtype_opt ->
-- On EOF reduce production dtype_opt ->
-- On DATATYPE reduce production dtype_opt ->
-- On BAR reduce production dtype_opt ->
-- On AND reduce production dtype_opt ->

State 312:
## Known stack suffix:
## uni_ivar_decls IDENT LPAREN
## LR(1) items:
union_field_decl -> uni_ivar_decls IDENT LPAREN . open_comma_index_list dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On MINUS shift to state 51
-- On LPAREN shift to state 53
-- On IDENT shift to state 54
-- On CONSTINT shift to state 55
-- On simple_index shift to state 56
-- On open_comma_index_list shift to state 313
-- On int_index shift to state 57
-- On index shift to state 80
-- On ident shift to state 77
-- On bool_index_seq shift to state 84
-- On bool_index shift to state 87
## Reductions:

State 313:
## Known stack suffix:
## uni_ivar_decls IDENT LPAREN open_comma_index_list
## LR(1) items:
union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list . dtype_opt [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
-- On OF shift to state 300
-- On dtype_opt shift to state 314
## Reductions:
-- On VAL reduce production dtype_opt ->
-- On SORT reduce production dtype_opt ->
-- On IN reduce production dtype_opt ->
-- On FUN reduce production dtype_opt ->
-- On EOF reduce production dtype_opt ->
-- On DATATYPE reduce production dtype_opt ->
-- On BAR reduce production dtype_opt ->
-- On AND reduce production dtype_opt ->

State 314:
## Known stack suffix:
## uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt
## LR(1) items:
union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt . [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt
-- On SORT reduce production union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt
-- On IN reduce production union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt
-- On FUN reduce production union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt
-- On EOF reduce production union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt
-- On DATATYPE reduce production union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt
-- On BAR reduce production union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt
-- On AND reduce production union_field_decl -> uni_ivar_decls IDENT LPAREN open_comma_index_list dtype_opt

State 315:
## Known stack suffix:
## uni_ivar_decls IDENT dtype_opt
## LR(1) items:
union_field_decl -> uni_ivar_decls IDENT dtype_opt . [ VAL SORT IN FUN EOF DATATYPE BAR AND ]
## Transitions:
## Reductions:
-- On VAL reduce production union_field_decl -> uni_ivar_decls IDENT dtype_opt
-- On SORT reduce production union_field_decl -> uni_ivar_decls IDENT dtype_opt
-- On IN reduce production union_field_decl -> uni_ivar_decls IDENT dtype_opt
-- On FUN reduce production union_field_decl -> uni_ivar_decls IDENT dtype_opt
-- On EOF reduce production union_field_decl -> uni_ivar_decls IDENT dtype_opt
-- On DATATYPE reduce production union_field_decl -> uni_ivar_decls IDENT dtype_opt
-- On BAR reduce production union_field_decl -> uni_ivar_decls IDENT dtype_opt
-- On AND reduce production union_field_decl -> uni_ivar_decls IDENT dtype_opt

State 316:
## Known stack suffix:
## LET decls
## LR(1) items:
simple_exp -> LET decls . IN exp END [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On IN shift to state 317
## Reductions:

State 317:
## Known stack suffix:
## LET decls IN
## LR(1) items:
simple_exp -> LET decls IN . exp END [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TRUE shift to state 3
-- On TILDE shift to state 197
-- On LPAREN shift to state 198
-- On LET shift to state 199
-- On LBRACKET shift to state 213
-- On IF shift to state 214
-- On IDENT shift to state 215
-- On FN shift to state 216
-- On FALSE shift to state 23
-- On CONSTSTRING shift to state 24
-- On CONSTINT shift to state 25
-- On CONSTFLOAT shift to state 26
-- On CONSTCHAR shift to state 27
-- On CASE shift to state 219
-- On simple_exp shift to state 220
-- On exp shift to state 318
-- On constant shift to state 252
-- On app_exp shift to state 253
## Reductions:

State 318:
## Known stack suffix:
## LET decls IN exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ END DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ END DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ END DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ END DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_lop exp [ TIMES PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ END DIV COLONCOLON BARBAR APPEND AMPERAMPER ]
simple_exp -> LET decls IN exp . END [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On EQ shift to state 236
-- On END shift to state 319
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:

State 319:
## Known stack suffix:
## LET decls IN exp END
## LR(1) items:
simple_exp -> LET decls IN exp END . [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production simple_exp -> LET decls IN exp END
-- On VAL reduce production simple_exp -> LET decls IN exp END
-- On TRUE reduce production simple_exp -> LET decls IN exp END
-- On TIMES reduce production simple_exp -> LET decls IN exp END
-- On TILDE reduce production simple_exp -> LET decls IN exp END
-- On THEN reduce production simple_exp -> LET decls IN exp END
-- On SORT reduce production simple_exp -> LET decls IN exp END
-- On RPAREN reduce production simple_exp -> LET decls IN exp END
-- On RBRACKET reduce production simple_exp -> LET decls IN exp END
-- On PLUS reduce production simple_exp -> LET decls IN exp END
-- On PERCENT reduce production simple_exp -> LET decls IN exp END
-- On OF reduce production simple_exp -> LET decls IN exp END
-- On MINUS reduce production simple_exp -> LET decls IN exp END
-- On LTGT reduce production simple_exp -> LET decls IN exp END
-- On LTEQ reduce production simple_exp -> LET decls IN exp END
-- On LT reduce production simple_exp -> LET decls IN exp END
-- On LPAREN reduce production simple_exp -> LET decls IN exp END
-- On LET reduce production simple_exp -> LET decls IN exp END
-- On LBRACKET reduce production simple_exp -> LET decls IN exp END
-- On IN reduce production simple_exp -> LET decls IN exp END
-- On IDENT reduce production simple_exp -> LET decls IN exp END
-- On GTEQ reduce production simple_exp -> LET decls IN exp END
-- On GT reduce production simple_exp -> LET decls IN exp END
-- On FUN reduce production simple_exp -> LET decls IN exp END
-- On FALSE reduce production simple_exp -> LET decls IN exp END
-- On EQ reduce production simple_exp -> LET decls IN exp END
-- On EOF reduce production simple_exp -> LET decls IN exp END
-- On END reduce production simple_exp -> LET decls IN exp END
-- On ELSE reduce production simple_exp -> LET decls IN exp END
-- On DIV reduce production simple_exp -> LET decls IN exp END
-- On DATATYPE reduce production simple_exp -> LET decls IN exp END
-- On CONSTSTRING reduce production simple_exp -> LET decls IN exp END
-- On CONSTINT reduce production simple_exp -> LET decls IN exp END
-- On CONSTFLOAT reduce production simple_exp -> LET decls IN exp END
-- On CONSTCHAR reduce production simple_exp -> LET decls IN exp END
-- On COMMA reduce production simple_exp -> LET decls IN exp END
-- On COLONCOLON reduce production simple_exp -> LET decls IN exp END
-- On COLON reduce production simple_exp -> LET decls IN exp END
-- On BARBAR reduce production simple_exp -> LET decls IN exp END
-- On BAR reduce production simple_exp -> LET decls IN exp END
-- On APPEND reduce production simple_exp -> LET decls IN exp END
-- On AND reduce production simple_exp -> LET decls IN exp END
-- On AMPERAMPER reduce production simple_exp -> LET decls IN exp END

State 320:
## Known stack suffix:
## decl
## LR(1) items:
decls -> decl . decls [ IN EOF ]
decls -> decl . [ IN EOF ]
## Transitions:
-- On VAL shift to state 1
-- On SORT shift to state 200
-- On FUN shift to state 205
-- On DATATYPE shift to state 282
-- On decls shift to state 321
-- On decl shift to state 320
## Reductions:
-- On IN reduce production decls -> decl
-- On EOF reduce production decls -> decl

State 321:
## Known stack suffix:
## decl decls
## LR(1) items:
decls -> decl decls . [ IN EOF ]
## Transitions:
## Reductions:
-- On IN reduce production decls -> decl decls
-- On EOF reduce production decls -> decl decls

State 322:
## Known stack suffix:
## LPAREN exp_list
## LR(1) items:
simple_exp -> LPAREN exp_list . RPAREN [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 323
## Reductions:

State 323:
## Known stack suffix:
## LPAREN exp_list RPAREN
## LR(1) items:
simple_exp -> LPAREN exp_list RPAREN . [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production simple_exp -> LPAREN exp_list RPAREN
-- On VAL reduce production simple_exp -> LPAREN exp_list RPAREN
-- On TRUE reduce production simple_exp -> LPAREN exp_list RPAREN
-- On TIMES reduce production simple_exp -> LPAREN exp_list RPAREN
-- On TILDE reduce production simple_exp -> LPAREN exp_list RPAREN
-- On THEN reduce production simple_exp -> LPAREN exp_list RPAREN
-- On SORT reduce production simple_exp -> LPAREN exp_list RPAREN
-- On RPAREN reduce production simple_exp -> LPAREN exp_list RPAREN
-- On RBRACKET reduce production simple_exp -> LPAREN exp_list RPAREN
-- On PLUS reduce production simple_exp -> LPAREN exp_list RPAREN
-- On PERCENT reduce production simple_exp -> LPAREN exp_list RPAREN
-- On OF reduce production simple_exp -> LPAREN exp_list RPAREN
-- On MINUS reduce production simple_exp -> LPAREN exp_list RPAREN
-- On LTGT reduce production simple_exp -> LPAREN exp_list RPAREN
-- On LTEQ reduce production simple_exp -> LPAREN exp_list RPAREN
-- On LT reduce production simple_exp -> LPAREN exp_list RPAREN
-- On LPAREN reduce production simple_exp -> LPAREN exp_list RPAREN
-- On LET reduce production simple_exp -> LPAREN exp_list RPAREN
-- On LBRACKET reduce production simple_exp -> LPAREN exp_list RPAREN
-- On IN reduce production simple_exp -> LPAREN exp_list RPAREN
-- On IDENT reduce production simple_exp -> LPAREN exp_list RPAREN
-- On GTEQ reduce production simple_exp -> LPAREN exp_list RPAREN
-- On GT reduce production simple_exp -> LPAREN exp_list RPAREN
-- On FUN reduce production simple_exp -> LPAREN exp_list RPAREN
-- On FALSE reduce production simple_exp -> LPAREN exp_list RPAREN
-- On EQ reduce production simple_exp -> LPAREN exp_list RPAREN
-- On EOF reduce production simple_exp -> LPAREN exp_list RPAREN
-- On END reduce production simple_exp -> LPAREN exp_list RPAREN
-- On ELSE reduce production simple_exp -> LPAREN exp_list RPAREN
-- On DIV reduce production simple_exp -> LPAREN exp_list RPAREN
-- On DATATYPE reduce production simple_exp -> LPAREN exp_list RPAREN
-- On CONSTSTRING reduce production simple_exp -> LPAREN exp_list RPAREN
-- On CONSTINT reduce production simple_exp -> LPAREN exp_list RPAREN
-- On CONSTFLOAT reduce production simple_exp -> LPAREN exp_list RPAREN
-- On CONSTCHAR reduce production simple_exp -> LPAREN exp_list RPAREN
-- On COMMA reduce production simple_exp -> LPAREN exp_list RPAREN
-- On COLONCOLON reduce production simple_exp -> LPAREN exp_list RPAREN
-- On COLON reduce production simple_exp -> LPAREN exp_list RPAREN
-- On BARBAR reduce production simple_exp -> LPAREN exp_list RPAREN
-- On BAR reduce production simple_exp -> LPAREN exp_list RPAREN
-- On APPEND reduce production simple_exp -> LPAREN exp_list RPAREN
-- On AND reduce production simple_exp -> LPAREN exp_list RPAREN
-- On AMPERAMPER reduce production simple_exp -> LPAREN exp_list RPAREN

State 324:
## Known stack suffix:
## LPAREN exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ TIMES RPAREN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON COLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ TIMES RPAREN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON COLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ TIMES RPAREN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON COLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ TIMES RPAREN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON COLON BARBAR APPEND AMPERAMPER ]
exp -> exp . exp_lop exp [ TIMES RPAREN PLUS PERCENT MINUS LTGT LTEQ LT GTEQ GT EQ DIV COMMA COLONCOLON COLON BARBAR APPEND AMPERAMPER ]
exp_list -> exp . comma_exp_list [ RPAREN ]
simple_exp -> LPAREN exp . COLON dtype RPAREN [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On EQ shift to state 236
-- On DIV shift to state 237
-- On COMMA shift to state 265
-- On COLONCOLON shift to state 238
-- On COLON shift to state 325
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
-- On comma_exp_list shift to state 268
## Reductions:
-- On RPAREN reduce production comma_exp_list ->

State 325:
## Known stack suffix:
## LPAREN exp COLON
## LR(1) items:
simple_exp -> LPAREN exp COLON . dtype RPAREN [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 326
## Reductions:
-- On DOT reduce production tvar_para ->

State 326:
## Known stack suffix:
## LPAREN exp COLON dtype
## LR(1) items:
simple_exp -> LPAREN exp COLON dtype . RPAREN [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
-- On RPAREN shift to state 327
## Reductions:

State 327:
## Known stack suffix:
## LPAREN exp COLON dtype RPAREN
## LR(1) items:
simple_exp -> LPAREN exp COLON dtype RPAREN . [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On VAL reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On TRUE reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On TIMES reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On TILDE reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On THEN reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On SORT reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On RPAREN reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On RBRACKET reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On PLUS reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On PERCENT reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On OF reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On MINUS reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On LTGT reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On LTEQ reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On LT reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On LPAREN reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On LET reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On LBRACKET reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On IN reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On IDENT reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On GTEQ reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On GT reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On FUN reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On FALSE reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On EQ reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On EOF reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On END reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On ELSE reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On DIV reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On DATATYPE reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On CONSTSTRING reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On CONSTINT reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On CONSTFLOAT reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On CONSTCHAR reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On COMMA reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On COLONCOLON reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On COLON reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On BARBAR reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On BAR reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On APPEND reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On AND reduce production simple_exp -> LPAREN exp COLON dtype RPAREN
-- On AMPERAMPER reduce production simple_exp -> LPAREN exp COLON dtype RPAREN

State 328:
## Known stack suffix:
## TILDE simple_exp
## LR(1) items:
simple_exp -> TILDE simple_exp . [ WITHTYPE VAL TRUE TIMES TILDE THEN SORT RPAREN RBRACKET PLUS PERCENT OF MINUS LTGT LTEQ LT LPAREN LET LBRACKET IN IDENT GTEQ GT FUN FALSE EQ EOF END ELSE DIV DATATYPE CONSTSTRING CONSTINT CONSTFLOAT CONSTCHAR COMMA COLONCOLON COLON BARBAR BAR APPEND AND AMPERAMPER ]
## Transitions:
## Reductions:
-- On WITHTYPE reduce production simple_exp -> TILDE simple_exp
-- On VAL reduce production simple_exp -> TILDE simple_exp
-- On TRUE reduce production simple_exp -> TILDE simple_exp
-- On TIMES reduce production simple_exp -> TILDE simple_exp
-- On TILDE reduce production simple_exp -> TILDE simple_exp
-- On THEN reduce production simple_exp -> TILDE simple_exp
-- On SORT reduce production simple_exp -> TILDE simple_exp
-- On RPAREN reduce production simple_exp -> TILDE simple_exp
-- On RBRACKET reduce production simple_exp -> TILDE simple_exp
-- On PLUS reduce production simple_exp -> TILDE simple_exp
-- On PERCENT reduce production simple_exp -> TILDE simple_exp
-- On OF reduce production simple_exp -> TILDE simple_exp
-- On MINUS reduce production simple_exp -> TILDE simple_exp
-- On LTGT reduce production simple_exp -> TILDE simple_exp
-- On LTEQ reduce production simple_exp -> TILDE simple_exp
-- On LT reduce production simple_exp -> TILDE simple_exp
-- On LPAREN reduce production simple_exp -> TILDE simple_exp
-- On LET reduce production simple_exp -> TILDE simple_exp
-- On LBRACKET reduce production simple_exp -> TILDE simple_exp
-- On IN reduce production simple_exp -> TILDE simple_exp
-- On IDENT reduce production simple_exp -> TILDE simple_exp
-- On GTEQ reduce production simple_exp -> TILDE simple_exp
-- On GT reduce production simple_exp -> TILDE simple_exp
-- On FUN reduce production simple_exp -> TILDE simple_exp
-- On FALSE reduce production simple_exp -> TILDE simple_exp
-- On EQ reduce production simple_exp -> TILDE simple_exp
-- On EOF reduce production simple_exp -> TILDE simple_exp
-- On END reduce production simple_exp -> TILDE simple_exp
-- On ELSE reduce production simple_exp -> TILDE simple_exp
-- On DIV reduce production simple_exp -> TILDE simple_exp
-- On DATATYPE reduce production simple_exp -> TILDE simple_exp
-- On CONSTSTRING reduce production simple_exp -> TILDE simple_exp
-- On CONSTINT reduce production simple_exp -> TILDE simple_exp
-- On CONSTFLOAT reduce production simple_exp -> TILDE simple_exp
-- On CONSTCHAR reduce production simple_exp -> TILDE simple_exp
-- On COMMA reduce production simple_exp -> TILDE simple_exp
-- On COLONCOLON reduce production simple_exp -> TILDE simple_exp
-- On COLON reduce production simple_exp -> TILDE simple_exp
-- On BARBAR reduce production simple_exp -> TILDE simple_exp
-- On BAR reduce production simple_exp -> TILDE simple_exp
-- On APPEND reduce production simple_exp -> TILDE simple_exp
-- On AND reduce production simple_exp -> TILDE simple_exp
-- On AMPERAMPER reduce production simple_exp -> TILDE simple_exp

State 329:
## Known stack suffix:
## pattern EQ exp
## LR(1) items:
exp -> exp . exp_bop1 exp [ VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR APPEND AND AMPERAMPER ]
exp -> exp . exp_bop2 exp [ VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop1 exp [ VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR APPEND AND AMPERAMPER ]
exp -> exp . exp_aop2 exp [ VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR APPEND AND AMPERAMPER ]
exp -> exp . exp_lop exp [ VAL TIMES SORT PLUS PERCENT MINUS LTGT LTEQ LT IN GTEQ GT FUN EQ EOF DIV DATATYPE COLONCOLON BARBAR APPEND AND AMPERAMPER ]
val_decl -> pattern EQ exp . [ VAL SORT IN FUN EOF DATATYPE AND ]
## Transitions:
-- On TIMES shift to state 222
-- On PLUS shift to state 223
-- On PERCENT shift to state 224
-- On MINUS shift to state 230
-- On LTGT shift to state 231
-- On LTEQ shift to state 232
-- On LT shift to state 233
-- On GTEQ shift to state 234
-- On GT shift to state 235
-- On EQ shift to state 236
-- On DIV shift to state 237
-- On COLONCOLON shift to state 238
-- On BARBAR shift to state 239
-- On APPEND shift to state 240
-- On AMPERAMPER shift to state 241
-- On exp_lop shift to state 242
-- On exp_bop2 shift to state 244
-- On exp_bop1 shift to state 246
-- On exp_aop2 shift to state 248
-- On exp_aop1 shift to state 250
## Reductions:
-- On VAL reduce production val_decl -> pattern EQ exp
-- On SORT reduce production val_decl -> pattern EQ exp
-- On IN reduce production val_decl -> pattern EQ exp
-- On FUN reduce production val_decl -> pattern EQ exp
-- On EOF reduce production val_decl -> pattern EQ exp
-- On DATATYPE reduce production val_decl -> pattern EQ exp
-- On AND reduce production val_decl -> pattern EQ exp

State 330:
## Known stack suffix:
## opname
## LR(1) items:
var_typ_decl -> opname . COLON dtype [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On COLON shift to state 331
## Reductions:

State 331:
## Known stack suffix:
## opname COLON
## LR(1) items:
var_typ_decl -> opname COLON . dtype [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
-- On QUOTE shift to state 46
-- On NAT shift to state 48
-- On LTGT shift to state 49
-- On LT shift to state 50
-- On LPAREN shift to state 105
-- On LBRACKET shift to state 106
-- On LBRACE shift to state 129
-- On INT shift to state 132
-- On IDENT shift to state 146
-- On BOOL shift to state 147
-- On uni_ivar_decls shift to state 151
-- On tvar_para shift to state 152
-- On tvar shift to state 154
-- On tuple_dtype shift to state 155
-- On simple_dtype shift to state 157
-- On rev_tuple_dtype shift to state 159
-- On named_dtype shift to state 162
-- On metric shift to state 165
-- On exi_ivar_decls shift to state 167
-- On dtype shift to state 332
## Reductions:
-- On DOT reduce production tvar_para ->

State 332:
## Known stack suffix:
## opname COLON dtype
## LR(1) items:
var_typ_decl -> opname COLON dtype . [ VAL SORT IN FUN EOF DATATYPE ]
## Transitions:
## Reductions:
-- On VAL reduce production var_typ_decl -> opname COLON dtype
-- On SORT reduce production var_typ_decl -> opname COLON dtype
-- On IN reduce production var_typ_decl -> opname COLON dtype
-- On FUN reduce production var_typ_decl -> opname COLON dtype
-- On EOF reduce production var_typ_decl -> opname COLON dtype
-- On DATATYPE reduce production var_typ_decl -> opname COLON dtype

State 333:
## Known stack suffix:
## top
## LR(1) items:
top' -> top . [ # ]
## Transitions:
## Reductions:
-- On # accept top

State 334:
## Known stack suffix:
## decls
## LR(1) items:
top -> decls . EOF [ # ]
## Transitions:
-- On EOF shift to state 335
## Reductions:

State 335:
## Known stack suffix:
## decls EOF
## LR(1) items:
top -> decls EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production top -> decls EOF

