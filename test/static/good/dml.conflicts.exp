
** Conflict (shift/reduce) in state 261.
** Tokens involved: COLONCOLON APPEND
** The following explanations concentrate on token COLONCOLON.
** This state is reached from top after reading:

VAL pattern EQ IF exp THEN exp ELSE exp

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL val_decls 
    val_decl AND val_decls 
    pattern EQ exp 
               (?)

** In state 261, looking ahead at COLONCOLON, reducing production
** exp -> IF exp THEN exp ELSE exp
** is permitted because of the following sub-derivation:

exp exp_lop exp // lookahead token appears because exp_lop can begin with COLONCOLON
IF exp THEN exp ELSE exp . 

** In state 261, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

IF exp THEN exp ELSE exp 
                     exp exp_lop exp 
                         . COLONCOLON 

** Conflict (shift/reduce) in state 255.
** Tokens involved: COLONCOLON APPEND
** The following explanations concentrate on token COLONCOLON.
** This state is reached from top after reading:

VAL pattern EQ FN pattern EQGT exp

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL val_decls 
    val_decl AND val_decls 
    pattern EQ exp 
               (?)

** In state 255, looking ahead at COLONCOLON, reducing production
** case_clause -> pattern EQGT exp
** is permitted because of the following sub-derivation:

exp exp_lop exp // lookahead token appears because exp_lop can begin with COLONCOLON
FN case_clauses // lookahead token is inherited
   case_clause // lookahead token is inherited
   pattern EQGT exp . 

** In state 255, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

FN case_clauses 
   case_clause BAR case_clauses 
   pattern EQGT exp 
                exp exp_lop exp 
                    . COLONCOLON 

** Conflict (shift/reduce) in state 251.
** Tokens involved: COLONCOLON APPEND
** The following explanations concentrate on token COLONCOLON.
** This state is reached from top after reading:

VAL pattern EQ exp exp_aop1 exp

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL val_decls 
    val_decl AND val_decls 
    pattern EQ exp 
               (?)

** In state 251, looking ahead at COLONCOLON, reducing production
** exp -> exp exp_aop1 exp
** is permitted because of the following sub-derivation:

exp exp_lop exp // lookahead token appears because exp_lop can begin with COLONCOLON
exp exp_aop1 exp . 

** In state 251, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

exp exp_aop1 exp 
             exp exp_lop exp 
                 . COLONCOLON 

** Conflict (shift/reduce) in state 249.
** Tokens involved: COLONCOLON APPEND
** The following explanations concentrate on token COLONCOLON.
** This state is reached from top after reading:

VAL pattern EQ exp exp_aop2 exp

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL val_decls 
    val_decl AND val_decls 
    pattern EQ exp 
               (?)

** In state 249, looking ahead at COLONCOLON, reducing production
** exp -> exp exp_aop2 exp
** is permitted because of the following sub-derivation:

exp exp_lop exp // lookahead token appears because exp_lop can begin with COLONCOLON
exp exp_aop2 exp . 

** In state 249, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

exp exp_aop2 exp 
             exp exp_lop exp 
                 . COLONCOLON 

** Conflict (shift/reduce) in state 247.
** Tokens involved: COLONCOLON APPEND
** The following explanations concentrate on token COLONCOLON.
** This state is reached from top after reading:

VAL pattern EQ exp exp_bop1 exp

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL val_decls 
    val_decl AND val_decls 
    pattern EQ exp 
               (?)

** In state 247, looking ahead at COLONCOLON, reducing production
** exp -> exp exp_bop1 exp
** is permitted because of the following sub-derivation:

exp exp_lop exp // lookahead token appears because exp_lop can begin with COLONCOLON
exp exp_bop1 exp . 

** In state 247, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

exp exp_bop1 exp 
             exp exp_lop exp 
                 . COLONCOLON 

** Conflict (shift/reduce) in state 245.
** Tokens involved: COLONCOLON APPEND
** The following explanations concentrate on token COLONCOLON.
** This state is reached from top after reading:

VAL pattern EQ exp exp_bop2 exp

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL val_decls 
    val_decl AND val_decls 
    pattern EQ exp 
               (?)

** In state 245, looking ahead at COLONCOLON, reducing production
** exp -> exp exp_bop2 exp
** is permitted because of the following sub-derivation:

exp exp_lop exp // lookahead token appears because exp_lop can begin with COLONCOLON
exp exp_bop2 exp . 

** In state 245, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

exp exp_bop2 exp 
             exp exp_lop exp 
                 . COLONCOLON 

** Conflict (shift/reduce) in state 243.
** Tokens involved: COLONCOLON APPEND
** The following explanations concentrate on token COLONCOLON.
** This state is reached from top after reading:

VAL pattern EQ exp exp_lop exp

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL val_decls 
    val_decl AND val_decls 
    pattern EQ exp 
               (?)

** In state 243, looking ahead at COLONCOLON, reducing production
** exp -> exp exp_lop exp
** is permitted because of the following sub-derivation:

exp exp_lop exp // lookahead token appears because exp_lop can begin with COLONCOLON
exp exp_lop exp . 

** In state 243, looking ahead at COLONCOLON, shifting is permitted
** because of the following sub-derivation:

exp exp_lop exp 
            exp exp_lop exp 
                . COLONCOLON 

** Conflict (shift/reduce) in state 227.
** Token involved: BAR
** This state is reached from top after reading:

FUN tvar_para IDENT fun_args EQ FN case_clause

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
FUN fun_decls 
    fun_decl AND fun_decls 
    tvar_para fun_decl_clauses owithtype 
              (?)

** In state 227, looking ahead at BAR, shifting is permitted
** because of the following sub-derivation:

fun_decl_clause BAR fun_decl_clauses 
IDENT fun_args EQ exp 
                  FN case_clauses 
                     case_clause . BAR case_clauses 

** In state 227, looking ahead at BAR, reducing production
** case_clauses -> case_clause
** is permitted because of the following sub-derivation:

fun_decl_clause BAR fun_decl_clauses // lookahead token appears
IDENT fun_args EQ exp // lookahead token is inherited
                  FN case_clauses // lookahead token is inherited
                     case_clause . 

** Conflict (shift/reduce) in state 183.
** Tokens involved: RPAREN COMMA
** The following explanations concentrate on token RPAREN.
** This state is reached from top after reading:

VAL IDENT COLON LPAREN tvar

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL var_typ_decl 
    IDENT COLON dtype 
                (?)

** In state 183, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

tvar_para DOT dtype 
LPAREN open_tvar_para 
       tvar . RPAREN 

** In state 183, looking ahead at RPAREN, reducing production
** simple_dtype -> tvar
** is permitted because of the following sub-derivation:

tuple_dtype 
rev_tuple_dtype 
simple_dtype 
LPAREN dtype RPAREN // lookahead token appears
       tuple_dtype // lookahead token is inherited
       rev_tuple_dtype // lookahead token is inherited
       simple_dtype // lookahead token is inherited
       tvar . 

** Conflict (shift/reduce) in state 169.
** Token involved: IDENT
** This state is reached from top after reading:

VAL IDENT COLON exi_ivar_decls simple_dtype

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL var_typ_decl 
    IDENT COLON dtype 
                tuple_dtype 
                rev_tuple_dtype 
                simple_dtype 
                (?)

** In state 169, looking ahead at IDENT, shifting is permitted
** because of the following sub-derivation:

exi_ivar_decls simple_dtype 
               named_dtype 
               simple_dtype . IDENT 

** In state 169, looking ahead at IDENT, reducing production
** simple_dtype -> exi_ivar_decls simple_dtype
** is permitted because of the following sub-derivation:

named_dtype 
simple_dtype IDENT // lookahead token appears
exi_ivar_decls simple_dtype . 

** Conflict (shift/reduce) in state 162.
** Token involved: LPAREN
** This state is reached from top after reading:

VAL IDENT COLON LPAREN dtype COMMA named_dtype

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL var_typ_decl 
    IDENT COLON dtype 
                tuple_dtype 
                rev_tuple_dtype 
                simple_dtype 
                named_dtype 
                LPAREN dtype open_comma_dtype_list IDENT 
                             (?)

** In state 162, looking ahead at LPAREN, reducing production
** simple_dtype -> named_dtype
** is permitted because of the following sub-derivation:

COMMA dtype LPAREN // lookahead token appears
      tuple_dtype // lookahead token is inherited
      rev_tuple_dtype // lookahead token is inherited
      simple_dtype // lookahead token is inherited
      named_dtype . 

** In state 162, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

COMMA dtype open_comma_dtype_list 
      tuple_dtype 
      rev_tuple_dtype 
      simple_dtype 
      named_dtype . LPAREN open_comma_index_list 

** Conflict (shift/reduce) in state 147.
** Token involved: LPAREN
** This state is reached from top after reading:

VAL IDENT COLON LPAREN dtype COMMA BOOL

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL var_typ_decl 
    IDENT COLON dtype 
                tuple_dtype 
                rev_tuple_dtype 
                simple_dtype 
                named_dtype 
                LPAREN dtype open_comma_dtype_list IDENT 
                             (?)

** In state 147, looking ahead at LPAREN, reducing production
** simple_dtype -> BOOL
** is permitted because of the following sub-derivation:

COMMA dtype LPAREN // lookahead token appears
      tuple_dtype // lookahead token is inherited
      rev_tuple_dtype // lookahead token is inherited
      simple_dtype // lookahead token is inherited
      BOOL . 

** In state 147, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

COMMA dtype open_comma_dtype_list 
      tuple_dtype 
      rev_tuple_dtype 
      simple_dtype 
      BOOL . LPAREN index RPAREN 

** Conflict (shift/reduce) in state 132.
** Token involved: LPAREN
** This state is reached from top after reading:

VAL IDENT COLON LPAREN dtype COMMA INT

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL var_typ_decl 
    IDENT COLON dtype 
                tuple_dtype 
                rev_tuple_dtype 
                simple_dtype 
                named_dtype 
                LPAREN dtype open_comma_dtype_list IDENT 
                             (?)

** In state 132, looking ahead at LPAREN, reducing production
** simple_dtype -> INT
** is permitted because of the following sub-derivation:

COMMA dtype LPAREN // lookahead token appears
      tuple_dtype // lookahead token is inherited
      rev_tuple_dtype // lookahead token is inherited
      simple_dtype // lookahead token is inherited
      INT . 

** In state 132, looking ahead at LPAREN, shifting is permitted
** because of the following sub-derivation:

COMMA dtype open_comma_dtype_list 
      tuple_dtype 
      rev_tuple_dtype 
      simple_dtype 
      INT . LPAREN index RPAREN 

** Conflict (shift/reduce) in state 95.
** Token involved: RPAREN
** This state is reached from top after reading:

VAL IDENT COLON LBRACKET LPAREN bool_index

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL var_typ_decl 
    IDENT COLON dtype 
                tuple_dtype 
                rev_tuple_dtype 
                simple_dtype 
                exi_ivar_decls simple_dtype 
                LBRACKET ivar_decls RBRACKET 
                         ivar_decl COMMA ivar_decls 
                         iprop 
                         index 
                         (?)

** In state 95, looking ahead at RPAREN, shifting is permitted
** because of the following sub-derivation:

bool_index 
LPAREN bool_index . RPAREN 

** In state 95, looking ahead at RPAREN, reducing production
** index -> bool_index
** is permitted because of the following sub-derivation:

int_index 
simple_index 
LPAREN index RPAREN // lookahead token appears
       bool_index . 

** Conflict (shift/reduce) in state 92.
** Tokens involved: LOR LAND
** The following explanations concentrate on token LOR.
** This state is reached from top after reading:

VAL IDENT COLON LBRACKET bool_index ind_bop1 bool_index

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

top 
decls EOF 
decl decls 
VAL var_typ_decl 
    IDENT COLON dtype 
                tuple_dtype 
                rev_tuple_dtype 
                simple_dtype 
                exi_ivar_decls simple_dtype 
                LBRACKET ivar_decls RBRACKET 
                         ivar_decl COMMA ivar_decls 
                         iprop 
                         index 
                         bool_index 
                         (?)

** In state 92, looking ahead at LOR, reducing production
** bool_index -> bool_index ind_bop1 bool_index
** is permitted because of the following sub-derivation:

bool_index ind_bop1 bool_index // lookahead token appears because ind_bop1 can begin with LOR
bool_index ind_bop1 bool_index . 

** In state 92, looking ahead at LOR, shifting is permitted
** because of the following sub-derivation:

bool_index ind_bop1 bool_index 
                    bool_index ind_bop1 bool_index 
                               . LOR 
