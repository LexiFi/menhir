File "dml.mly", line 33, characters 7-12:
Warning: the token AMPER is unused.
File "dml.mly", line 63, characters 27-31:
Warning: the token BANG is unused.
File "dml.mly", line 29, characters 10-16:
Warning: the token BANGEQ is unused.
File "dml.mly", line 35, characters 26-31:
Warning: the token BREAK is unused.
File "dml.mly", line 35, characters 32-37:
Warning: the token CARET is unused.
File "dml.mly", line 35, characters 43-47:
Warning: the token CHAR is unused.
File "dml.mly", line 35, characters 48-56:
Warning: the token CONTINUE is unused.
File "dml.mly", line 52, characters 6-10:
Warning: the token EQEQ is unused.
File "dml.mly", line 51, characters 12-17:
Warning: the token GTDOT is unused.
File "dml.mly", line 51, characters 26-33:
Warning: the token GTEQDOT is unused.
File "dml.mly", line 51, characters 6-11:
Warning: the token LTDOT is unused.
File "dml.mly", line 51, characters 18-25:
Warning: the token LTEQDOT is unused.
File "dml.mly", line 34, characters 7-14:
Warning: the token LTMINUS is unused.
File "dml.mly", line 63, characters 16-26:
Warning: the token MINUSMINUS is unused.
File "dml.mly", line 63, characters 7-15:
Warning: the token PLUSPLUS is unused.
File "dml.mly", line 37, characters 7-13:
Warning: the token RETURN is unused.
File "dml.mly", line 32, characters 29-38:
Warning: the token SEMICOLON is unused.
File "dml.mly", line 37, characters 19-25:
Warning: the token STRING is unused.
File "dml.mly", line 37, characters 36-40:
Warning: the token TYPE is unused.
File "dml.mly", line 37, characters 52-56:
Warning: the token UNIT is unused.
File "dml.mly", line 48, characters 6-19:
Warning: the token prec_ind_bop1 is unused.
File "dml.mly", line 205, characters 0-15:
Warning: symbol open_tvar_decls is unreachable from any of the start symbol(s).
File "dml.mly", line 210, characters 0-10:
Warning: symbol tvar_decls is unreachable from any of the start symbol(s).
%{

open Dmlsyn

%}
%start top
%token AMPER
%token AMPERAMPER
%token AND
%token APPEND
%token AS
%token BANGEQ
%token BAR
%token BARBAR
%token BOOL
%token BREAK
%token CARET
%token CASE
%token CHAR
%token COLON
%token COLONCOLON
%token COMMA
%token <char> CONSTCHAR
%token <float> CONSTFLOAT
%token <int> CONSTINT
%token <string> CONSTSTRING
%token CONTINUE
%token DATATYPE
%token DIV
%token DOT
%token ELSE
%token END
%token EOF
%token EQ
%token EQGT
%token FALSE
%token FN
%token FUN
%token GT
%token GTEQ
%token <string> IDENT
%token IF
%token IN
%token INT
%token LAND
%token LBRACE
%token LBRACKET
%token LET
%token LOR
%token LPAREN
%token LT
%token LTEQ
%token LTGT
%token LTMINUS
%token MINUS
%token MINUSGT
%token NAT
%token OF
%token OP
%token PERCENT
%token PLUS
%token QUOTE
%token RBRACE
%token RBRACKET
%token RETURN
%token RPAREN
%token SEMICOLON
%token SORT
%token STRING
%token THEN
%token TILDE
%token TIMES
%token TRUE
%token TYPE
%token UNDERSCORE
%token UNIT
%token VAL
%token WITH
%token WITHTYPE
%left COMMA
%right EQ
%right prec_if
%right prec_case
%right MINUSGT
%right prec_exp_lop
%left BARBAR
%left AMPERAMPER
%left prec_ind_bop1
%left prec_exp_bop1
%left GT GTEQ LT LTEQ
%left GTDOT GTEQDOT LTDOT LTEQDOT
%left EQEQ LTGT
%left prec_ind_bop2
%left prec_exp_bop2
%left MINUS PLUS
%left prec_ind_aop1
%left prec_exp_aop1
%left DIV PERCENT TIMES
%left prec_ind_aop2
%left prec_exp_aop2
%left DOT
%right prec_exi
%right BANG MINUSMINUS PLUSPLUS
%left BAR
%left AMPER
%left CARET
%left LOR
%left LAND
%type <Dmlsyn.decl list> top
%%

top:
  _1 = decls _2 = EOF
    {                 ( _1 )}

decls:
  _1 = decl _2 = decls
    {                  ( _1 :: _2 )}
| _1 = decl
    {            ( [_1] )}

decl:
  _1 = FUN _2 = fun_decls
    {                    ( Fdecl _2 )}
| _1 = VAL _2 = var_typ_decl
    {                       ( VTdecl _2 )}
| _1 = VAL _2 = val_decls
    {                    ( Vdecl _2 )}
| _1 = SORT _2 = isort_decl
    {                      ( Sdecl _2 )}
| _1 = DATATYPE _2 = union_decls
    {                          ( Udecl _2 )}

ident:
  _1 = IDENT
    {             ( _1 )}

constant:
  _1 = TRUE
    {            ( Cboo true )}
| _1 = FALSE
    {             ( Cboo false)}
| _1 = CONSTCHAR
    {                 ( Ccha _1 )}
| _1 = CONSTFLOAT
    {                  ( Cflo _1 )}
| _1 = CONSTINT
    {                ( Cint _1 )}
| _1 = CONSTSTRING
    {                   ( Cstr _1 )}

opname:
  _1 = OP _2 = PLUS
    {               ( "+" )}
| _1 = OP _2 = MINUS
    {                ( "-" )}
| _1 = OP _2 = TIMES
    {                ( "*" )}
| _1 = OP _2 = DIV
    {              ( "/" )}
| _1 = OP _2 = PERCENT
    {                  ( "%" )}
| _1 = OP _2 = GT
    {             ( ">" )}
| _1 = OP _2 = GTEQ
    {               ( ">=" )}
| _1 = OP _2 = LT
    {             ( "<" )}
| _1 = OP _2 = LTEQ
    {               ( "<=" )}
| _1 = OP _2 = EQ
    {             ( "=" )}
| _1 = OP _2 = LTGT
    {               ( "<>" )}
| _1 = OP _2 = AMPERAMPER
    {                    ( "&&" )}
| _1 = OP _2 = BARBAR
    {                 ( "||" )}
| _1 = OP _2 = APPEND
    {                 ( "@" )}

var_typ_decl:
  _1 = IDENT _2 = COLON _3 = dtype
    {                        ( {var_nam = _1; var_typ = Some _3} )}
| _1 = opname _2 = COLON _3 = dtype
    {                         ( {var_nam = _1; var_typ = Some _3} )}

val_decl:
  _1 = pattern _2 = EQ _3 = exp
    {                     ( {vd_pat = _1; vd_exp = _3} )}

val_decls:
  _1 = val_decl _2 = AND _3 = val_decls
    {                                        ( _1 :: _3 )}
| _1 = val_decl
    {                                        ( [_1] )}

fun_args:
  _1 = simple_pattern _2 = fun_args
    {                             ( _1 :: _2 )}
| _1 = simple_pattern
    {                     ( [_1] )}

fun_decl_clause:
  _1 = IDENT _2 = fun_args _3 = EQ _4 = exp
    {                           ( (_1, (_2, _4)) )}

fun_decl_clauses:
  _1 = fun_decl_clause _2 = BAR _3 = fun_decl_clauses
    {     ( _1 :: _3 )}
| _1 = fun_decl_clause
    {                      ( [_1] )}

owithtype:
  _1 = WITHTYPE _2 = dtype
    {                     ( Some _2 )}
| 
    {                   ( None )}

fun_decl:
  _1 = tvar_para _2 = fun_decl_clauses _3 = owithtype
    {     ( mk_function_d _1 _2 _3 )}

fun_decls:
  _1 = fun_decl _2 = AND _3 = fun_decls
    {                            ( _1 :: _3 )}
| _1 = fun_decl
    {                ( [_1] )}

isort_decl:
  _1 = IDENT _2 = EQ _3 = isort
    {                     ( { sd_nam = _1; sd_def = _3 } )}

union_decl:
  _1 = tvar_para _2 = IDENT _3 = ud_sorts _4 = EQ _5 = union_field_decls
    {     ( { ud_nam = _2;
				            ud_tvs = _1;
				            ud_sts = _3;
					    ud_fds = _5 } )}

union_decls:
  _1 = union_decl _2 = AND _3 = union_decls
    {                                ( _1 :: _3 )}
| _1 = union_decl
    {                  ( [_1] )}

open_tvar_para:
  _1 = tvar _2 = RPAREN
    {                   ( [TDvar (to_btv _1)] )}
| _1 = tvar _2 = COMMA _3 = open_tvar_para
    {                               ( TDvar (to_btv _1) :: _3 )}

tvar_para:
  _1 = LPAREN _2 = open_tvar_para
    {                           ( _2 )}
| _1 = tvar
    {            ( [TDvar (to_btv _1)] )}
| 
    {                   ( [] )}

ud_sorts:
  _1 = WITH _2 = isort
    {                  ( [_2] )}
| _1 = WITH _2 = LPAREN _3 = open_isort_list
    {                                   ( _3 )}
| 
    {                   ( [] )}

open_isort_list:
  _1 = isort _2 = RPAREN
    {                   ( [_1] )}
| _1 = isort _2 = COMMA _3 = open_isort_list
    {                                 ( _1 :: _3 )}

tvar:
  _1 = QUOTE _2 = IDENT
    {                    ( _2 )}

ivar_decl:
  _1 = ident _2 = COLON _3 = isort
    {                        ( IDvar (to_ubiv _1 _3) )}
| _1 = iprop
    {             ( IDprop _1 )}

ivar_decls:
  _1 = ivar_decl _2 = COMMA _3 = ivar_decls
    {                                ( _1 :: _3 )}
| _1 = ivar_decl _2 = BAR _3 = ivar_decls
    {                              ( _1 :: _3 )}
| _1 = ivar_decl
    {                  ( [_1] )}

uni_ivar_decls:
  _1 = LBRACE _2 = ivar_decls _3 = RBRACE
    {                              ( _2 )}

exi_ivar_decls:
  _1 = LBRACKET _2 = ivar_decls _3 = RBRACKET
    {                                 ( _2 )}

ind_bop1:
  _1 = LAND
    {            ( INFop "/\\" )}
| _1 = LOR
    {            ( INFop "\\/" )}

ind_bop2:
  _1 = LT
    {           ( INFop "<" )}
| _1 = LTEQ
    {            ( INFop "<=" )}
| _1 = GT
    {           ( INFop ">" )}
| _1 = GTEQ
    {            ( INFop ">=" )}
| _1 = EQ
    {           ( INFop "=" )}
| _1 = LTGT
    {            ( INFop "<>" )}

ind_aop1:
  _1 = PLUS
    {            ( INFop "+" )}
| _1 = MINUS
    {             ( INFop "-" )}
| _1 = BARBAR
    {              ( INFop "||" )}

ind_aop2:
  _1 = TIMES
    {             ( INFop "*" )}
| _1 = DIV
    {            ( INFop "/" )}
| _1 = PERCENT
    {               ( INFop "mod" )}
| _1 = AMPERAMPER
    {                  ( INFop "&&" )}

simple_index:
  _1 = ident
    {             ( Ivar _1 )}
| _1 = CONSTINT
    {                ( Iint _1 )}
| _1 = MINUS _2 = simple_index
    {                                        ( Ifun("uminus", [_2]) )}
| _1 = ident _2 = LPAREN _3 = open_comma_index_list
    {                                        ( Ifun(_1, _3) )}
| _1 = LPAREN _2 = index _3 = RPAREN
    {                          ( _2 )}

int_index:
  _1 = simple_index
    {                   ( _1 )}
| _1 = int_index _2 = ind_aop1 _3 = int_index %prec prec_ind_aop1
    {     ( mk_infix_ind _1 _2 _3 )}
| _1 = int_index _2 = ind_aop2 _3 = int_index %prec prec_ind_aop2
    {     ( mk_infix_ind _1 _2 _3 )}

bool_index_seq:
  _1 = int_index _2 = ind_bop2 _3 = int_index
    {                                 ( (_2, _3, [mk_infix_ind _1 _2 _3]) )}
| _1 = bool_index_seq _2 = ind_bop2 _3 = int_index %prec prec_ind_bop2
    {                                        ( mk_infix_bool_ind_seq _1 _2 _3 )}

bool_index:
  _1 = bool_index_seq
    {                     ( ind_of_bool_ind_seq _1 )}
| _1 = bool_index _2 = ind_bop1 _3 = bool_index
    {                                   ( mk_infix_ind _1 _2 _3 )}
| _1 = LPAREN _2 = bool_index _3 = RPAREN
    {                              ( _2 )}

index:
  _1 = int_index
    {                 ( _1 )}
| _1 = bool_index
    {                  ( _1 )}

open_comma_index_list:
  _1 = index _2 = COMMA _3 = open_comma_index_list
    {                                      ( _1 :: _3 )}
| _1 = index _2 = RPAREN
    {                   ( [_1] )}

iprop:
  _1 = index
    {                ( ip_of_ind _1 )}

isort:
  _1 = INT
    {            ( ISint )}
| _1 = NAT
    {            ( isnat )}
| _1 = IDENT
    {             ( ISnam _1 )}
| _1 = LBRACE _2 = ident _3 = COLON _4 = isort _5 = BAR _6 = iprop _7 = RBRACE
    {                                        ( ISsub (to_ubiv _2 _4, _6) )}

named_dtype:
  _1 = IDENT
    {             ( ([], _1) )}
| _1 = simple_dtype _2 = IDENT
    {                         ( ([_1], _2) )}
| _1 = LPAREN _2 = dtype _3 = open_comma_dtype_list _4 = IDENT
    {     ( (_2 :: _3, _4) )}

open_comma_dtype_list:
  _1 = COMMA _2 = dtype _3 = open_comma_dtype_list
    {     ( _2 :: _3 )}
| _1 = COMMA _2 = dtype _3 = LPAREN
    {                                ( [_2] )}

simple_dtype:
  _1 = tvar
    {            ( mkdt (DTvar _1) )}
| _1 = BOOL
    {            ( mkdt (DTnam([], "bool", [])) )}
| _1 = BOOL _2 = LPAREN _3 = index _4 = RPAREN
    {                              ( mkdt (DTnam([], "bool", [_3])) )}
| _1 = INT
    {            ( mkdt (DTnam([], "int", [])) )}
| _1 = NAT
    {            ( mkdt dtnat_dsc )}
| _1 = INT _2 = LPAREN _3 = index _4 = RPAREN
    {                             ( mkdt (DTnam([], "int", [_3])) )}
| _1 = INT _2 = LPAREN _3 = index _4 = COMMA _5 = index _6 = RPAREN
    {                                        ( mkdt (dtint_lr_dsc _3 _5) )}
| _1 = INT _2 = LPAREN _3 = index _4 = COMMA _5 = index _6 = RBRACKET
    {     ( mkdt (dtint_lR_dsc _3 _5) )}
| _1 = INT _2 = LBRACKET _3 = index _4 = COMMA _5 = index _6 = RPAREN
    {     ( mkdt (dtint_Lr_dsc _3 _5) )}
| _1 = INT _2 = LBRACKET _3 = index _4 = COMMA _5 = index _6 = RBRACKET
    {     ( mkdt (dtint_LR_dsc _3 _5) )}
| _1 = named_dtype
    {                   ( let (dts, name) = _1
                                          in mkdt_nam (dts, name, []))}
| _1 = named_dtype _2 = LPAREN _3 = open_comma_index_list
    {     ( let (dts, name) = _1
                                          in mkdt_nam (dts, name, _3) )}
| _1 = exi_ivar_decls _2 = simple_dtype %prec prec_exi
    {     ( mkdt (DTexi (_1, _2)) )}
| _1 = LPAREN _2 = dtype _3 = RPAREN
    {                          ( _2 )}

tuple_dtype:
  _1 = rev_tuple_dtype
    {                      ( mkdt_tup (List.rev _1) )}

rev_tuple_dtype:
  _1 = simple_dtype
    {                   ( [_1] )}
| _1 = rev_tuple_dtype _2 = TIMES _3 = simple_dtype
    {     ( _3 :: _1 )}

metric:
  _1 = LT _2 = int_index_list _3 = GT
    {                         ( _2 )}
| _1 = LTGT
    {           ( [] )}

int_index_list:
  _1 = int_index _2 = comma_int_index_list
    {                                   ( _1 :: _2 )}
| 
    {                   ( [] )}

comma_int_index_list:
  _1 = COMMA _2 = int_index _3 = comma_int_index_list
    {     ( _2 :: _3 )}
| 
    {                   ( [] )}

dtype:
  _1 = tuple_dtype
    {                   ( _1 )}
| _1 = tuple_dtype _2 = MINUSGT _3 = dtype
    {                               ( mkdt (DTfun (_1, _3)) )}
| _1 = metric _2 = EQGT _3 = dtype
    {                        ( mkdt (DTmet (_1, _3)) )}
| _1 = uni_ivar_decls _2 = dtype
    {                               ( mkdt (DTuni (_1, _2)) )}
| _1 = tvar_para _2 = DOT _3 = dtype
    {                          ( mkdt (DTlam (_1, _3)) )}

dtype_opt:
  _1 = OF _2 = dtype
    {                ( Some _2 )}
| 
    {                   ( None )}

union_field_decl:
  _1 = IDENT _2 = dtype_opt
    {                      ( { uf_nam = _1;
					    uf_arg = _2;
                                            uf_res = [];
                                            uf_qua = [] } )}
| _1 = IDENT _2 = LPAREN _3 = open_comma_index_list _4 = dtype_opt
    {     ( { uf_nam = _1;
					    uf_arg = _4;
                                            uf_res = _3;
                                            uf_qua = [] } )}
| _1 = uni_ivar_decls _2 = IDENT _3 = dtype_opt
    {     ( { uf_nam = _2;
					    uf_arg = _3;
                                            uf_res = [];
                                            uf_qua = _1 } )}
| _1 = uni_ivar_decls _2 = IDENT _3 = LPAREN _4 = open_comma_index_list _5 = dtype_opt
    {     ( { uf_nam = _2;
					    uf_arg = _5;
                                            uf_res = _4;
                                            uf_qua = _1 } )}

union_field_decls:
  _1 = union_field_decl _2 = BAR _3 = union_field_decls
    {     ( _1 :: _3 )}
| _1 = union_field_decl
    {                       ( [_1] )}

exp_bop1:
  _1 = AMPERAMPER
    {                  ( INFop "&&" )}
| _1 = BARBAR
    {              ( INFop "||" )}

exp_bop2:
  _1 = LT
    {           ( INFop "<" )}
| _1 = LTEQ
    {            ( INFop "<=" )}
| _1 = GT
    {           ( INFop ">" )}
| _1 = GTEQ
    {            ( INFop ">=" )}
| _1 = LTGT
    {            ( INFop "<>" )}
| _1 = EQ
    {           ( INFop "=" )}

exp_aop1:
  _1 = PLUS
    {            ( INFop "+" )}
| _1 = MINUS
    {             ( INFop "-" )}

exp_aop2:
  _1 = TIMES
    {             ( INFop "*" )}
| _1 = DIV
    {            ( INFop "/" )}
| _1 = PERCENT
    {               ( INFop "%" )}

exp_lop:
  _1 = COLONCOLON
    {                  ( INFop "cons" )}
| _1 = APPEND
    {              ( INFop "@" )}

simple_exp:
  _1 = IDENT
    {             ( mkexp (Evar _1) )}
| _1 = constant
    {                ( mkexp (Ecst _1) )}
| _1 = TILDE _2 = simple_exp
    {                       ( mkexp (Eapp (mkexp (Evar "uminus"),
					               _2)) )}
| _1 = LET _2 = decls _3 = IN _4 = exp _5 = END
    {                          ( mkexp (Elet (_2, _4)) )}
| _1 = LPAREN _2 = exp_list _3 = RPAREN
    {                            ( mkexp_tup _2 )}
| _1 = LPAREN _2 = exp _3 = COLON _4 = dtype _5 = RPAREN
    {                                  ( mkexp (Eann (_2, _4)) )}
| _1 = LBRACKET _2 = exp_list _3 = RBRACKET
    {                                ( mkexp_list _2 )}

app_exp:
  _1 = app_exp _2 = simple_exp
    {                         ( mkexp (Eapp (_1, _2)) )}
| _1 = simple_exp
    {                  ( _1 )}

exp:
  _1 = app_exp
    {               ( _1 )}
| _1 = exp _2 = exp_bop1 _3 = exp %prec prec_exp_bop1
    {                                        ( mk_infix_exp _1 _2 _3 )}
| _1 = exp _2 = exp_bop2 _3 = exp %prec prec_exp_bop2
    {     ( mk_infix_exp _1 _2 _3 )}
| _1 = exp _2 = exp_aop1 _3 = exp %prec prec_exp_aop1
    {     ( mk_infix_exp _1 _2 _3 )}
| _1 = exp _2 = exp_aop2 _3 = exp %prec prec_exp_aop2
    {     ( mk_infix_exp _1 _2 _3 )}
| _1 = exp _2 = exp_lop _3 = exp %prec prec_exp_lop
    {     ( mk_infix_exp _1 _2 _3 )}
| _1 = IF _2 = exp _3 = THEN _4 = exp _5 = ELSE _6 = exp %prec prec_if
    {     ( mkexp_if (_2, _4, _6) )}
| _1 = CASE _2 = exp _3 = OF _4 = case_clauses
    {                              ( mkexp (Ecas (_2, _4)) )}
| _1 = FN _2 = case_clauses
    {                      ( mkexp (Efn _2) )}

exp_list:
  _1 = exp _2 = comma_exp_list
    {                         ( _1 :: _2 )}
| 
    {                   ( [] )}

comma_exp_list:
  _1 = COMMA _2 = exp _3 = comma_exp_list
    {                              ( _2 :: _3 )}
| 
    {                   ( [] )}

pattern:
  _1 = simple_pattern
    {                     ( _1 )}
| _1 = simple_pattern _2 = COLONCOLON _3 = pattern
    {                                      ( mkpat (Pcstr ("cons",
                                                        mkpat_tup [_1; _3])) )}
| _1 = IDENT _2 = simple_pattern
    {                          ( mkpat (Pcstr (_1, _2)) )}
| _1 = IDENT _2 = AS _3 = pattern
    {                       ( mkpat (Pas (_1, _3)) )}

simple_pattern:
  _1 = IDENT
    {             ( mkpat (Pvar _1) )}
| _1 = UNDERSCORE
    {                  ( mkpat (Pany) )}
| _1 = constant
    {                ( mkpat (Pcst _1) )}
| _1 = LPAREN _2 = pattern_list _3 = RPAREN
    {                                ( mkpat_tup _2 )}
| _1 = LBRACKET _2 = pattern_list _3 = RBRACKET
    {                                   ( mkpat_list _2 )}

pattern_list:
  _1 = pattern _2 = comma_pattern_list
    {                                ( _1 :: _2 )}
| 
    {                   ( [] )}

comma_pattern_list:
  _1 = COMMA _2 = pattern _3 = comma_pattern_list
    {                                     ( _2 :: _3 )}
| 
    {                                 ( [] )}

case_clause:
  _1 = pattern _2 = EQGT _3 = exp %prec prec_case
    {                                     ( (_1, _3) )}

case_clauses:
  _1 = case_clause _2 = BAR _3 = case_clauses
    {                                   ( _1 :: _3 )}
| _1 = case_clause
    {                     ( [_1] )}

%%
