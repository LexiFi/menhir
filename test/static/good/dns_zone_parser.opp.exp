%{

open Dns_zone_state
open Dns

let parse_error s = raise (Zone_parse_problem s)

(* Parsers for numbers *)
let parse_uint8 s =
  try let d = int_of_string s in
  if d < 0 || d > 255 then raise Parsing.Parse_error;
  d
  with Failure _ -> raise Parsing.Parse_error

let parse_uint16 s =
  try
    let n = int_of_string s in
    if n > 65535 then raise Parsing.Parse_error;
    n
  with Failure _ -> raise Parsing.Parse_error

let parse_uint32 s =
  try
    let n = Int64.of_string s in
    if n >= 4294967296L then raise Parsing.Parse_error;
    Int64.to_int32 n
  with Failure _ -> raise Parsing.Parse_error

(* Parse an IPv6 address.  (RFC 3513 section 2.2) *)
let parse_ipv6 s =
  Ipaddr.V6.of_string_exn s

let add_to_map name (Rr_map.B (k, v)) = Name_rr_map.add name k v
%}
%start zfile
%token AT
%token <string> CHARSTRING
%token <string> CLASS_CH
%token <string> CLASS_CS
%token <string> CLASS_HS
%token <string> CLASS_IN
%token DOT
%token EOF
%token EOL
%token GENERIC
%token <string> NUMBER
%token SORIGIN
%token SPACE
%token STTL
%token <string> TYPE_A
%token <string> TYPE_AAAA
%token <string> TYPE_CAA
%token <string> TYPE_CNAME
%token <string> TYPE_DNSKEY
%token <string> TYPE_GENERIC
%token <string> TYPE_MX
%token <string> TYPE_NS
%token <string> TYPE_PTR
%token <string> TYPE_SOA
%token <string> TYPE_SRV
%token <string> TYPE_SSHFP
%token <string> TYPE_TLSA
%token <string> TYPE_TXT
%type <Dns.Name_rr_map.t> zfile
%%

zfile:
  _1 = lines _2 = EOF
    {                 ( state.zone )}

lines:
  
    {                 ( )}
| _1 = lines _2 = EOL
    {             ( )}
| _1 = lines _2 = origin _3 = EOL
    {                    ( )}
| _1 = lines _2 = ttl _3 = EOL
    {                 ( )}
| _1 = lines _2 = rrline _3 = EOL
    {                    ( )}

s:
  _1 = SPACE
    {         ()}
| _1 = s _2 = SPACE
    {                      ()}

origin:
  _1 = SORIGIN _2 = s _3 = domain
    {                         ( state.origin <- _3 )}

ttl:
  _1 = STTL _2 = s _3 = int32
    {                  ( state.ttl <- _3 )}

rrline:
  _1 = owner _2 = s _3 = int32 _4 = s _5 = rrclass _6 = s _7 = rr
    {                                ( state.zone <- add_to_map _1 (Rr_map.with_ttl _7 _3) state.zone )}
| _1 = owner _2 = s _3 = rrclass _4 = s _5 = int32 _6 = s _7 = rr
    {                                ( state.zone <- add_to_map _1 (Rr_map.with_ttl _7 _5) state.zone  )}
| _1 = owner _2 = s _3 = rrclass _4 = s _5 = rr
    {                        ( state.zone <- add_to_map _1 (Rr_map.with_ttl _5 state.ttl) state.zone )}
| _1 = owner _2 = s _3 = int32 _4 = s _5 = rr
    {                      ( state.zone <- add_to_map _1 (Rr_map.with_ttl _5 _3) state.zone )}
| _1 = owner _2 = s _3 = rr
    {              ( state.zone <- add_to_map _1 (Rr_map.with_ttl _3 state.ttl) state.zone )}

rrclass:
  _1 = CLASS_IN
    {            ()}
| _1 = CLASS_CS
    {            ( parse_error "class must be \"IN\"" )}
| _1 = CLASS_CH
    {            ( parse_error "class must be \"IN\"" )}
| _1 = CLASS_HS
    {            ( parse_error "class must be \"IN\"" )}

rr:
  _1 = generic_type _2 = s _3 = generic_rdata
    {                             (
  match Rr_map.I.of_int _1 with
  | Ok i -> B (Unknown i, (0l, Rr_map.Txt_set.singleton _3))
  | Error _ -> parse_error "type code reserved, not generic"
)}
| _1 = TYPE_A _2 = s _3 = ipv4
    {                 ( B (A, (0l, Rr_map.Ipv4_set.singleton _3)) )}
| _1 = TYPE_NS _2 = s _3 = hostname
    {                      ( B (Ns, (0l, Domain_name.Host_set.singleton _3)) )}
| _1 = TYPE_CNAME _2 = s _3 = domain
    {                       ( B (Cname, (0l, _3)) )}
| _1 = TYPE_SOA _2 = s _3 = domain _4 = s _5 = domain _6 = s _7 = int32 _8 = s _9 = int32 _10 = s _11 = int32 _12 = s _13 = int32 _14 = s _15 = int32
    {     ( B (Soa, { Soa.nameserver = _3 ; hostmaster = _5 ; serial = _7 ;
                 refresh = _9 ; retry = _11 ; expiry = _13 ; minimum = _15 }) )}
| _1 = TYPE_PTR _2 = s _3 = hostname
    {                       ( B (Ptr, (0l, _3)) )}
| _1 = TYPE_MX _2 = s _3 = int16 _4 = s _5 = hostname
    {                              ( B (Mx, (0l, Rr_map.Mx_set.singleton { Mx.preference = _3 ; mail_exchange = _5 })) )}
| _1 = TYPE_TXT _2 = s _3 = charstrings
    {                          ( B (Txt, (0l, Rr_map.Txt_set.of_list _3)) )}
| _1 = TYPE_SRV _2 = s _3 = int16 _4 = s _5 = int16 _6 = s _7 = int16 _8 = s _9 = hostname
    {     ( B (Srv, (0l, Rr_map.Srv_set.singleton { Srv.priority = _3 ; weight = _5 ; port = _7 ; target = _9 })) )}
| _1 = TYPE_TLSA _2 = s _3 = int8 _4 = s _5 = int8 _6 = s _7 = int8 _8 = s _9 = hex
    {     ( match
         Tlsa.int_to_cert_usage _3,
         Tlsa.int_to_selector _5,
         Tlsa.int_to_matching_type _7
       with
       | Ok cert_usage, Ok selector, Ok matching_type ->
          let tlsa = { Tlsa.cert_usage ; selector ; matching_type ; data = _9 } in
          B (Tlsa, (0l, Rr_map.Tlsa_set.singleton tlsa ))
       | _ -> raise Parsing.Parse_error
     )}
| _1 = TYPE_SSHFP _2 = s _3 = int8 _4 = s _5 = int8 _6 = s _7 = hex
    {     ( match
         Sshfp.int_to_algorithm _3,
         Sshfp.int_to_typ _5
       with
       | Ok algorithm, Ok typ ->
          let sshfp = { Sshfp.algorithm ; typ ; fingerprint = _7 } in
          B (Sshfp, (0l, Rr_map.Sshfp_set.singleton sshfp))
       | _ -> raise Parsing.Parse_error
     )}
| _1 = TYPE_AAAA _2 = s _3 = ipv6
    {                    ( B (Aaaa, (0l, Rr_map.Ipv6_set.singleton _3)) )}
| _1 = TYPE_DNSKEY _2 = s _3 = int16 _4 = s _5 = int16 _6 = s _7 = int16 _8 = s _9 = charstring
    {     ( if not (_5 = 3) then
           parse_error ("DNSKEY protocol is not 3, but " ^ string_of_int _5) ;
       match Dnskey.int_to_algorithm _7 with
       | Error _ -> parse_error ("DNSKEY algorithm not supported " ^ string_of_int _7)
       | Ok x ->
          let dnskey = { Dnskey.flags = _3 ; algorithm = x ; key = Cstruct.of_string _9 } in
          B (Dnskey, (0l, Rr_map.Dnskey_set.singleton dnskey))
     )}
| _1 = TYPE_CAA _2 = s _3 = int16 _4 = s _5 = charstring _6 = s _7 = charstrings
    {     ( let critical = if _3 = 0x80 then true else false in
       let caa = { Caa.critical ; tag = _5 ; value = _7 } in
       B (Caa, (0l, Rr_map.Caa_set.singleton caa)) )}
| _1 = CHARSTRING _2 = s
    {                ( parse_error ("TYPE " ^ _1 ^ " not supported") )}

single_hex:
  _1 = charstring
    {  ( Cstruct.of_hex _1 )}

hex:
  _1 = single_hex
    {              ( _1 )}
| _1 = hex _2 = s _3 = single_hex
    {                    ( Cstruct.append _1 _3 )}

generic_type:
  _1 = TYPE_GENERIC
    {     ( try parse_uint16 (String.sub _1 4 (String.length _1 - 4))
       with Parsing.Parse_error -> parse_error (_1 ^ " is not a 16-bit number")
     )}

generic_rdata:
  _1 = GENERIC _2 = s _3 = NUMBER _4 = s _5 = hex
    {     ( try
         let len = int_of_string _3
         and data = Cstruct.to_string _5
         in
         if not (String.length data = len) then
           parse_error ("generic data length field is "
			   ^ _3 ^ " but actual length is "
			      ^ string_of_int (String.length data));
	 data
       with Failure _ ->
	 parse_error ("\\# should be followed by a number")
     )}

ipv4:
  _1 = NUMBER _2 = DOT _3 = NUMBER _4 = DOT _5 = NUMBER _6 = DOT _7 = NUMBER
    {     ( try
	 let a = parse_uint8 _1 in
	 let b = parse_uint8 _3 in
	 let c = parse_uint8 _5 in
	 let d = parse_uint8 _7 in
         Ipaddr.V4.make a b c d
       with Failure _ | Parsing.Parse_error ->
	 parse_error ("invalid IPv4 address " ^ _1 ^ "." ^ _3 ^ "." ^ _5 ^ "." ^ _7)
     )}

ipv6:
  _1 = charstring
    {     ( try parse_ipv6 _1 with
       | Failure _ | Parsing.Parse_error ->
	  parse_error ("invalid IPv6 address " ^ _1)
     )}

int8:
  _1 = NUMBER
    {     ( try parse_uint8 _1
       with Parsing.Parse_error ->
	 parse_error (_1 ^ " is not a 8-bit number") )}

int16:
  _1 = NUMBER
    {     ( try parse_uint16 _1
       with Parsing.Parse_error ->
	 parse_error (_1 ^ " is not a 16-bit number") )}

int32:
  _1 = NUMBER
    {     ( try parse_uint32 _1
       with Failure _ ->
	 parse_error (_1 ^ " is not a 32-bit number") )}

owner:
  
    {                 ( state.owner )}
| _1 = domain
    {          ( state.owner <- _1 ; state.owner )}

domain:
  _1 = DOT
    {       ( Domain_name.root )}
| _1 = AT
    {      ( state.origin )}
| _1 = label_except_at
    {                   ( Domain_name.prepend_label_exn state.origin _1 )}
| _1 = label _2 = DOT
    {             ( Domain_name.of_strings_exn [_1] )}
| _1 = label _2 = DOT _3 = domain_labels
    {                           ( Domain_name.of_strings_exn (_1 :: _3 @ (Domain_name.to_strings state.origin)) )}
| _1 = label _2 = DOT _3 = domain_labels _4 = DOT
    {                               ( Domain_name.of_strings_exn (_1 :: _3) )}

domain_labels:
  _1 = label
    {         ( [_1] )}
| _1 = domain_labels _2 = DOT _3 = label
    {                           ( _1 @ [_3] )}

hostname:
  _1 = domain
    {                 ( Domain_name.host_exn _1 )}

charstrings:
  _1 = charstring
    {                        ( [_1] )}
| _1 = charstrings _2 = s _3 = charstring
    {                                                            ( _1 @ [_3] )}

charstring:
  _1 = CHARSTRING
    {                       ( _1 )}
| _1 = keyword_or_number
    {                                                  ( _1 )}
| _1 = AT
    {                                                              ( "@" )}

label_except_specials:
  _1 = CHARSTRING
    {    ( if String.length _1 > 63 then
        parse_error "label is longer than 63 bytes";
      _1 )}

label_except_at:
  _1 = label_except_specials
    {                                       ( _1 )}
| _1 = keyword_or_number
    {                                                                  ( _1 )}

label:
  _1 = label_except_at
    {                       ( _1 )}
| _1 = AT
    {                                   ( "@" )}

keyword_or_number:
  _1 = NUMBER
    {          ( _1 )}
| _1 = TYPE_A
    {          ( _1 )}
| _1 = TYPE_NS
    {           ( _1 )}
| _1 = TYPE_CNAME
    {              ( _1 )}
| _1 = TYPE_SOA
    {            ( _1 )}
| _1 = TYPE_PTR
    {            ( _1 )}
| _1 = TYPE_MX
    {           ( _1 )}
| _1 = TYPE_TXT
    {            ( _1 )}
| _1 = TYPE_AAAA
    {             ( _1 )}
| _1 = TYPE_SRV
    {            ( _1 )}
| _1 = TYPE_DNSKEY
    {               ( _1 )}
| _1 = TYPE_TLSA
    {             ( _1 )}
| _1 = TYPE_SSHFP
    {              ( _1 )}
| _1 = CLASS_IN
    {            ( _1 )}
| _1 = CLASS_CS
    {            ( _1 )}
| _1 = CLASS_CH
    {            ( _1 )}
| _1 = CLASS_HS
    {            ( _1 )}

%%


