State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On NEWLINE shift to state 1
-- On list(NEWLINE) shift to state 3
-- On file shift to state 22
## Reductions:
-- On P
--   reduce production list(NEWLINE) ->

State 1:
## Known stack suffix:
## NEWLINE
## LR(1) items:
list(NEWLINE) -> NEWLINE . list(NEWLINE) [ P ]
## Transitions:
-- On NEWLINE shift to state 1
-- On list(NEWLINE) shift to state 2
## Reductions:
-- On P
--   reduce production list(NEWLINE) ->

State 2:
## Known stack suffix:
## NEWLINE list(NEWLINE)
## LR(1) items:
list(NEWLINE) -> NEWLINE list(NEWLINE) . [ P ]
## Transitions:
## Reductions:
-- On P
--   reduce production list(NEWLINE) -> NEWLINE list(NEWLINE)

State 3:
## Known stack suffix:
## list(NEWLINE)
## LR(1) items:
file -> list(NEWLINE) . start cnf [ # ]
## Transitions:
-- On P shift to state 4
-- On start shift to state 9
## Reductions:

State 4:
## Known stack suffix:
## P
## LR(1) items:
start -> P . CNF INT INT NEWLINE [ NEWLINE INT EOF ]
## Transitions:
-- On CNF shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## P CNF
## LR(1) items:
start -> P CNF . INT INT NEWLINE [ NEWLINE INT EOF ]
## Transitions:
-- On INT shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## P CNF INT
## LR(1) items:
start -> P CNF INT . INT NEWLINE [ NEWLINE INT EOF ]
## Transitions:
-- On INT shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## P CNF INT INT
## LR(1) items:
start -> P CNF INT INT . NEWLINE [ NEWLINE INT EOF ]
## Transitions:
-- On NEWLINE shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## P CNF INT INT NEWLINE
## LR(1) items:
start -> P CNF INT INT NEWLINE . [ NEWLINE INT EOF ]
## Transitions:
## Reductions:
-- On NEWLINE INT EOF
--   reduce production start -> P CNF INT INT NEWLINE

State 9:
## Known stack suffix:
## list(NEWLINE) start
## LR(1) items:
file -> list(NEWLINE) start . cnf [ # ]
## Transitions:
-- On NEWLINE shift to state 10
-- On INT shift to state 11
-- On EOF shift to state 12
-- On nonempty_list(atom) shift to state 13
-- On cnf shift to state 21
-- On clause shift to state 17
-- On atom shift to state 19
## Reductions:

State 10:
## Known stack suffix:
## NEWLINE
## LR(1) items:
cnf -> NEWLINE . cnf [ # ]
## Transitions:
-- On NEWLINE shift to state 10
-- On INT shift to state 11
-- On EOF shift to state 12
-- On nonempty_list(atom) shift to state 13
-- On cnf shift to state 16
-- On clause shift to state 17
-- On atom shift to state 19
## Reductions:

State 11:
## Known stack suffix:
## INT
## LR(1) items:
atom -> INT . [ ZERO INT ]
## Transitions:
## Reductions:
-- On ZERO INT
--   reduce production atom -> INT

State 12:
## Known stack suffix:
## EOF
## LR(1) items:
cnf -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cnf -> EOF

State 13:
## Known stack suffix:
## nonempty_list(atom)
## LR(1) items:
clause -> nonempty_list(atom) . ZERO NEWLINE [ NEWLINE INT EOF ]
## Transitions:
-- On ZERO shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## nonempty_list(atom) ZERO
## LR(1) items:
clause -> nonempty_list(atom) ZERO . NEWLINE [ NEWLINE INT EOF ]
## Transitions:
-- On NEWLINE shift to state 15
## Reductions:

State 15:
## Known stack suffix:
## nonempty_list(atom) ZERO NEWLINE
## LR(1) items:
clause -> nonempty_list(atom) ZERO NEWLINE . [ NEWLINE INT EOF ]
## Transitions:
## Reductions:
-- On NEWLINE INT EOF
--   reduce production clause -> nonempty_list(atom) ZERO NEWLINE

State 16:
## Known stack suffix:
## NEWLINE cnf
## LR(1) items:
cnf -> NEWLINE cnf . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cnf -> NEWLINE cnf

State 17:
## Known stack suffix:
## clause
## LR(1) items:
cnf -> clause . cnf [ # ]
## Transitions:
-- On NEWLINE shift to state 10
-- On INT shift to state 11
-- On EOF shift to state 12
-- On nonempty_list(atom) shift to state 13
-- On cnf shift to state 18
-- On clause shift to state 17
-- On atom shift to state 19
## Reductions:

State 18:
## Known stack suffix:
## clause cnf
## LR(1) items:
cnf -> clause cnf . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production cnf -> clause cnf

State 19:
## Known stack suffix:
## atom
## LR(1) items:
nonempty_list(atom) -> atom . [ ZERO ]
nonempty_list(atom) -> atom . nonempty_list(atom) [ ZERO ]
## Transitions:
-- On INT shift to state 11
-- On nonempty_list(atom) shift to state 20
-- On atom shift to state 19
## Reductions:
-- On ZERO
--   reduce production nonempty_list(atom) -> atom

State 20:
## Known stack suffix:
## atom nonempty_list(atom)
## LR(1) items:
nonempty_list(atom) -> atom nonempty_list(atom) . [ ZERO ]
## Transitions:
## Reductions:
-- On ZERO
--   reduce production nonempty_list(atom) -> atom nonempty_list(atom)

State 21:
## Known stack suffix:
## list(NEWLINE) start cnf
## LR(1) items:
file -> list(NEWLINE) start cnf . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> list(NEWLINE) start cnf

State 22:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

State 23:
## Known stack suffix:
##
## LR(1) items:
input' -> . input [ # ]
## Transitions:
-- On P shift to state 24
-- On NEWLINE shift to state 29
-- On INT shift to state 11
-- On EOF shift to state 30
-- On start shift to state 31
-- On nonempty_list(atom) shift to state 32
-- On input shift to state 37
-- On clause shift to state 36
-- On atom shift to state 19
## Reductions:

State 24:
## Known stack suffix:
## P
## LR(1) items:
start -> P . CNF INT INT NEWLINE [ # ]
## Transitions:
-- On CNF shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## P CNF
## LR(1) items:
start -> P CNF . INT INT NEWLINE [ # ]
## Transitions:
-- On INT shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## P CNF INT
## LR(1) items:
start -> P CNF INT . INT NEWLINE [ # ]
## Transitions:
-- On INT shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## P CNF INT INT
## LR(1) items:
start -> P CNF INT INT . NEWLINE [ # ]
## Transitions:
-- On NEWLINE shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## P CNF INT INT NEWLINE
## LR(1) items:
start -> P CNF INT INT NEWLINE . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production start -> P CNF INT INT NEWLINE

State 29:
## Known stack suffix:
## NEWLINE
## LR(1) items:
input -> NEWLINE . input [ # ]
## Transitions:
-- On P shift to state 24
-- On NEWLINE shift to state 29
-- On INT shift to state 11
-- On EOF shift to state 30
-- On start shift to state 31
-- On nonempty_list(atom) shift to state 32
-- On input shift to state 35
-- On clause shift to state 36
-- On atom shift to state 19
## Reductions:

State 30:
## Known stack suffix:
## EOF
## LR(1) items:
input -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production input -> EOF

State 31:
## Known stack suffix:
## start
## LR(1) items:
input -> start . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production input -> start

State 32:
## Known stack suffix:
## nonempty_list(atom)
## LR(1) items:
clause -> nonempty_list(atom) . ZERO NEWLINE [ # ]
## Transitions:
-- On ZERO shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## nonempty_list(atom) ZERO
## LR(1) items:
clause -> nonempty_list(atom) ZERO . NEWLINE [ # ]
## Transitions:
-- On NEWLINE shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## nonempty_list(atom) ZERO NEWLINE
## LR(1) items:
clause -> nonempty_list(atom) ZERO NEWLINE . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production clause -> nonempty_list(atom) ZERO NEWLINE

State 35:
## Known stack suffix:
## NEWLINE input
## LR(1) items:
input -> NEWLINE input . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production input -> NEWLINE input

State 36:
## Known stack suffix:
## clause
## LR(1) items:
input -> clause . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production input -> clause

State 37:
## Known stack suffix:
## input
## LR(1) items:
input' -> input . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept input

