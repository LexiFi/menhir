%parameter<L : ParseLocation.S>
%parameter<T : Ast_dimacs.Term with type location := L.t>
%parameter<S : Ast_dimacs.Statement with type location := L.t and type term := T.t>
%start file
%start input
%token CNF
%token EOF
%token <int> INT
%token NEWLINE
%token P
%token ZERO
%type <S.t list> file
%type <S.t option> input
%%

list_NEWLINE_:
  
    {    ( [] )} [@name nil_NEWLINE]
| x = NEWLINE xs = list_NEWLINE_
    {    ( x :: xs )} [@name cons_NEWLINE]

nonempty_list_atom_:
  x = atom
    {    ( [ x ] )} [@name one_atom]
| x = atom xs = nonempty_list_atom_
    {    ( x :: xs )} [@name more_atom]

input:
  _1 = NEWLINE i = input
    {    ( i )}
| p = start
    {    ( Some p )}
| c = clause
    {    ( Some c )}
| _1 = EOF
    {    ( None )}

file:
  _1 = list_NEWLINE_ h = start l = cnf
    {    ( h :: l )}

start:
  _1 = P _2 = CNF nbvar = INT nbclause = INT _5 = NEWLINE
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.p_cnf ~loc nbvar nbclause )}

cnf:
  _1 = EOF
    {    ( [] )}
| _1 = NEWLINE l = cnf
    {    ( l )}
| c = clause l = cnf
    {    ( c :: l )}

clause:
  c = nonempty_list_atom_ _2 = ZERO _3 = NEWLINE
    {let _endpos = _endpos__3_ in
let _startpos = _startpos_c_ in
    ( let loc = L.mk_pos _startpos _endpos in S.clause ~loc c )}

atom:
  i = INT
    {let _endpos = _endpos_i_ in
let _startpos = _startpos_i_ in
    ( let loc = L.mk_pos _startpos _endpos in T.atom ~loc i )}

%%
