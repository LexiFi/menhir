State 0:
file' -> . file [ # ]
-- On TPI shift to state 1
-- On THF shift to state 497
-- On TFF shift to state 507
-- On INCLUDE shift to state 517
-- On FOF shift to state 531
-- On CNF shift to state 541
-- On tptp_input shift to state 551
-- On tptp_include shift to state 552
-- On tpi_annotated shift to state 553
-- On thf_annotated shift to state 554
-- On tff_annotated shift to state 555
-- On list(tptp_input) shift to state 560
-- On fof_annotated shift to state 557
-- On file shift to state 562
-- On cnf_annotated shift to state 558
-- On annotated_formula shift to state 559
-- On EOF reduce production list(tptp_input) ->

State 1:
tpi_annotated -> TPI . LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LEFT_PAREN shift to state 2

State 2:
tpi_annotated -> TPI LEFT_PAREN . name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 6

State 3:
name -> SINGLE_QUOTED . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production name -> SINGLE_QUOTED
-- On COMMA reduce production name -> SINGLE_QUOTED

State 4:
name -> LOWER_WORD . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production name -> LOWER_WORD
-- On COMMA reduce production name -> LOWER_WORD

State 5:
name -> INTEGER . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production name -> INTEGER
-- On COMMA reduce production name -> INTEGER

State 6:
tpi_annotated -> TPI LEFT_PAREN name . COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 7

State 7:
tpi_annotated -> TPI LEFT_PAREN name COMMA . formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 9

State 8:
formula_role -> LOWER_WORD . [ COMMA ]
-- On COMMA reduce production formula_role -> LOWER_WORD

State 9:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role . COMMA tpi_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 10

State 10:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA . tpi_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 251
-- On LEFT_BRACKET shift to state 252
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On tpi_formula shift to state 298
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 270
-- On fof_unary_formula shift to state 266
-- On fof_tuple shift to state 293
-- On fof_sequent shift to state 450
-- On fof_quantified_formula shift to state 267
-- On fof_or_formula shift to state 277
-- On fof_logic_formula shift to state 451
-- On fof_formula shift to state 496
-- On fof_binary_nonassoc shift to state 282
-- On fof_binary_formula shift to state 283
-- On fof_binary_assoc shift to state 284
-- On fof_and_formula shift to state 285
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 11:
variable -> UPPER_WORD . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production variable -> UPPER_WORD
-- On VLINE reduce production variable -> UPPER_WORD
-- On STAR reduce production variable -> UPPER_WORD
-- On RIGHT_PAREN reduce production variable -> UPPER_WORD
-- On RIGHT_BRACKET reduce production variable -> UPPER_WORD
-- On PLUS reduce production variable -> UPPER_WORD
-- On NOT_EQUAL reduce production variable -> UPPER_WORD
-- On NOTVLINE reduce production variable -> UPPER_WORD
-- On NOTAND reduce production variable -> UPPER_WORD
-- On LEFT_IMPLY reduce production variable -> UPPER_WORD
-- On IMPLY reduce production variable -> UPPER_WORD
-- On EQUIV reduce production variable -> UPPER_WORD
-- On EQUAL reduce production variable -> UPPER_WORD
-- On COMMA reduce production variable -> UPPER_WORD
-- On COLON reduce production variable -> UPPER_WORD
-- On ARROW reduce production variable -> UPPER_WORD
-- On APPLY reduce production variable -> UPPER_WORD
-- On AND reduce production variable -> UPPER_WORD

State 12:
atomic_word -> SINGLE_QUOTED . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LESS LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production atomic_word -> SINGLE_QUOTED
-- On VLINE reduce production atomic_word -> SINGLE_QUOTED
-- On STAR reduce production atomic_word -> SINGLE_QUOTED
-- On RIGHT_PAREN reduce production atomic_word -> SINGLE_QUOTED
-- On RIGHT_BRACKET reduce production atomic_word -> SINGLE_QUOTED
-- On PLUS reduce production atomic_word -> SINGLE_QUOTED
-- On NOT_EQUAL reduce production atomic_word -> SINGLE_QUOTED
-- On NOTVLINE reduce production atomic_word -> SINGLE_QUOTED
-- On NOTAND reduce production atomic_word -> SINGLE_QUOTED
-- On LESS reduce production atomic_word -> SINGLE_QUOTED
-- On LEFT_PAREN reduce production atomic_word -> SINGLE_QUOTED
-- On LEFT_IMPLY reduce production atomic_word -> SINGLE_QUOTED
-- On IMPLY reduce production atomic_word -> SINGLE_QUOTED
-- On EQUIV reduce production atomic_word -> SINGLE_QUOTED
-- On EQUAL reduce production atomic_word -> SINGLE_QUOTED
-- On COMMA reduce production atomic_word -> SINGLE_QUOTED
-- On COLON reduce production atomic_word -> SINGLE_QUOTED
-- On ARROW reduce production atomic_word -> SINGLE_QUOTED
-- On APPLY reduce production atomic_word -> SINGLE_QUOTED
-- On AND reduce production atomic_word -> SINGLE_QUOTED

State 13:
real -> REAL . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production real -> REAL
-- On VLINE reduce production real -> REAL
-- On STAR reduce production real -> REAL
-- On RIGHT_PAREN reduce production real -> REAL
-- On RIGHT_BRACKET reduce production real -> REAL
-- On PLUS reduce production real -> REAL
-- On NOT_EQUAL reduce production real -> REAL
-- On NOTVLINE reduce production real -> REAL
-- On NOTAND reduce production real -> REAL
-- On LEFT_IMPLY reduce production real -> REAL
-- On IMPLY reduce production real -> REAL
-- On EQUIV reduce production real -> REAL
-- On EQUAL reduce production real -> REAL
-- On COMMA reduce production real -> REAL
-- On COLON reduce production real -> REAL
-- On ARROW reduce production real -> REAL
-- On APPLY reduce production real -> REAL
-- On AND reduce production real -> REAL

State 14:
rational -> RATIONAL . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production rational -> RATIONAL
-- On VLINE reduce production rational -> RATIONAL
-- On STAR reduce production rational -> RATIONAL
-- On RIGHT_PAREN reduce production rational -> RATIONAL
-- On RIGHT_BRACKET reduce production rational -> RATIONAL
-- On PLUS reduce production rational -> RATIONAL
-- On NOT_EQUAL reduce production rational -> RATIONAL
-- On NOTVLINE reduce production rational -> RATIONAL
-- On NOTAND reduce production rational -> RATIONAL
-- On LEFT_IMPLY reduce production rational -> RATIONAL
-- On IMPLY reduce production rational -> RATIONAL
-- On EQUIV reduce production rational -> RATIONAL
-- On EQUAL reduce production rational -> RATIONAL
-- On COMMA reduce production rational -> RATIONAL
-- On COLON reduce production rational -> RATIONAL
-- On ARROW reduce production rational -> RATIONAL
-- On APPLY reduce production rational -> RATIONAL
-- On AND reduce production rational -> RATIONAL

State 15:
unary_negation -> NOT . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY ITE_T ITE_F INTEGER IMPLY FORALL EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production unary_negation -> NOT
-- On VLINE reduce production unary_negation -> NOT
-- On UPPER_WORD reduce production unary_negation -> NOT
-- On STAR reduce production unary_negation -> NOT
-- On SINGLE_QUOTED reduce production unary_negation -> NOT
-- On RIGHT_PAREN reduce production unary_negation -> NOT
-- On RIGHT_BRACKET reduce production unary_negation -> NOT
-- On REAL reduce production unary_negation -> NOT
-- On RATIONAL reduce production unary_negation -> NOT
-- On PLUS reduce production unary_negation -> NOT
-- On NOT_EQUAL reduce production unary_negation -> NOT
-- On NOTVLINE reduce production unary_negation -> NOT
-- On NOTAND reduce production unary_negation -> NOT
-- On NOT reduce production unary_negation -> NOT
-- On LOWER_WORD reduce production unary_negation -> NOT
-- On LET_TT reduce production unary_negation -> NOT
-- On LET_TF reduce production unary_negation -> NOT
-- On LET_FT reduce production unary_negation -> NOT
-- On LET_FF reduce production unary_negation -> NOT
-- On LEFT_PAREN reduce production unary_negation -> NOT
-- On LEFT_IMPLY reduce production unary_negation -> NOT
-- On ITE_T reduce production unary_negation -> NOT
-- On ITE_F reduce production unary_negation -> NOT
-- On INTEGER reduce production unary_negation -> NOT
-- On IMPLY reduce production unary_negation -> NOT
-- On FORALL reduce production unary_negation -> NOT
-- On EXISTS reduce production unary_negation -> NOT
-- On EQUIV reduce production unary_negation -> NOT
-- On EQUAL reduce production unary_negation -> NOT
-- On DOLLAR_WORD reduce production unary_negation -> NOT
-- On DOLLAR_DOLLAR_WORD reduce production unary_negation -> NOT
-- On DISTINCT_OBJECT reduce production unary_negation -> NOT
-- On COMMA reduce production unary_negation -> NOT
-- On COLON reduce production unary_negation -> NOT
-- On ARROW reduce production unary_negation -> NOT
-- On APPLY reduce production unary_negation -> NOT
-- On AND reduce production unary_negation -> NOT

State 16:
atomic_word -> LOWER_WORD . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LESS LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production atomic_word -> LOWER_WORD
-- On VLINE reduce production atomic_word -> LOWER_WORD
-- On STAR reduce production atomic_word -> LOWER_WORD
-- On RIGHT_PAREN reduce production atomic_word -> LOWER_WORD
-- On RIGHT_BRACKET reduce production atomic_word -> LOWER_WORD
-- On PLUS reduce production atomic_word -> LOWER_WORD
-- On NOT_EQUAL reduce production atomic_word -> LOWER_WORD
-- On NOTVLINE reduce production atomic_word -> LOWER_WORD
-- On NOTAND reduce production atomic_word -> LOWER_WORD
-- On LESS reduce production atomic_word -> LOWER_WORD
-- On LEFT_PAREN reduce production atomic_word -> LOWER_WORD
-- On LEFT_IMPLY reduce production atomic_word -> LOWER_WORD
-- On IMPLY reduce production atomic_word -> LOWER_WORD
-- On EQUIV reduce production atomic_word -> LOWER_WORD
-- On EQUAL reduce production atomic_word -> LOWER_WORD
-- On COMMA reduce production atomic_word -> LOWER_WORD
-- On COLON reduce production atomic_word -> LOWER_WORD
-- On ARROW reduce production atomic_word -> LOWER_WORD
-- On APPLY reduce production atomic_word -> LOWER_WORD
-- On AND reduce production atomic_word -> LOWER_WORD

State 17:
let_term -> LET_TT . LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 18

State 18:
let_term -> LET_TT LEFT_PAREN . tff_let_term_defn COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 26
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 72
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On tff_let_term_defn shift to state 247
-- On tff_let_term_binding shift to state 91
-- On term shift to state 69
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 19:
let_term -> LET_FT . LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 20

State 20:
let_term -> LET_FT LEFT_PAREN . tff_let_formula_defn COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 21
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 100
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On tff_let_formula_defn shift to state 243
-- On tff_let_formula_binding shift to state 106
-- On term shift to state 107
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 120
-- On atomic_defined_word shift to state 59

State 21:
tff_let_formula_binding -> LEFT_PAREN . tff_let_formula_binding RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 21
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On tff_let_formula_binding shift to state 241
-- On term shift to state 107
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 120
-- On atomic_defined_word shift to state 59

State 22:
conditional_term -> ITE_T . LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 23

State 23:
conditional_term -> ITE_T LEFT_PAREN . tff_logic_formula COMMA term COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 235
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 24:
tff_let -> LET_TF . LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On LEFT_PAREN shift to state 25

State 25:
tff_let -> LET_TF LEFT_PAREN . tff_let_term_defn COMMA tff_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 26
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 72
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On tff_let_term_defn shift to state 96
-- On tff_let_term_binding shift to state 91
-- On term shift to state 69
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 26:
tff_let_term_binding -> LEFT_PAREN . tff_let_term_binding RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 26
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On tff_let_term_binding shift to state 67
-- On term shift to state 69
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 27:
integer -> INTEGER . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production integer -> INTEGER
-- On VLINE reduce production integer -> INTEGER
-- On STAR reduce production integer -> INTEGER
-- On RIGHT_PAREN reduce production integer -> INTEGER
-- On RIGHT_BRACKET reduce production integer -> INTEGER
-- On PLUS reduce production integer -> INTEGER
-- On NOT_EQUAL reduce production integer -> INTEGER
-- On NOTVLINE reduce production integer -> INTEGER
-- On NOTAND reduce production integer -> INTEGER
-- On LEFT_IMPLY reduce production integer -> INTEGER
-- On IMPLY reduce production integer -> INTEGER
-- On EQUIV reduce production integer -> INTEGER
-- On EQUAL reduce production integer -> INTEGER
-- On COMMA reduce production integer -> INTEGER
-- On COLON reduce production integer -> INTEGER
-- On ARROW reduce production integer -> INTEGER
-- On APPLY reduce production integer -> INTEGER
-- On AND reduce production integer -> INTEGER

State 28:
atomic_defined_word -> DOLLAR_WORD . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production atomic_defined_word -> DOLLAR_WORD
-- On VLINE reduce production atomic_defined_word -> DOLLAR_WORD
-- On STAR reduce production atomic_defined_word -> DOLLAR_WORD
-- On RIGHT_PAREN reduce production atomic_defined_word -> DOLLAR_WORD
-- On RIGHT_BRACKET reduce production atomic_defined_word -> DOLLAR_WORD
-- On PLUS reduce production atomic_defined_word -> DOLLAR_WORD
-- On NOT_EQUAL reduce production atomic_defined_word -> DOLLAR_WORD
-- On NOTVLINE reduce production atomic_defined_word -> DOLLAR_WORD
-- On NOTAND reduce production atomic_defined_word -> DOLLAR_WORD
-- On LEFT_PAREN reduce production atomic_defined_word -> DOLLAR_WORD
-- On LEFT_IMPLY reduce production atomic_defined_word -> DOLLAR_WORD
-- On IMPLY reduce production atomic_defined_word -> DOLLAR_WORD
-- On EQUIV reduce production atomic_defined_word -> DOLLAR_WORD
-- On EQUAL reduce production atomic_defined_word -> DOLLAR_WORD
-- On COMMA reduce production atomic_defined_word -> DOLLAR_WORD
-- On COLON reduce production atomic_defined_word -> DOLLAR_WORD
-- On ARROW reduce production atomic_defined_word -> DOLLAR_WORD
-- On APPLY reduce production atomic_defined_word -> DOLLAR_WORD
-- On AND reduce production atomic_defined_word -> DOLLAR_WORD

State 29:
atomic_system_word -> DOLLAR_DOLLAR_WORD . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On VLINE reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On STAR reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On RIGHT_PAREN reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On RIGHT_BRACKET reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On PLUS reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On NOT_EQUAL reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On NOTVLINE reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On NOTAND reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On LEFT_PAREN reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On LEFT_IMPLY reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On IMPLY reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On EQUIV reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On EQUAL reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On COMMA reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On COLON reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On ARROW reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On APPLY reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD
-- On AND reduce production atomic_system_word -> DOLLAR_DOLLAR_WORD

State 30:
distinct_object -> DISTINCT_OBJECT . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production distinct_object -> DISTINCT_OBJECT
-- On VLINE reduce production distinct_object -> DISTINCT_OBJECT
-- On STAR reduce production distinct_object -> DISTINCT_OBJECT
-- On RIGHT_PAREN reduce production distinct_object -> DISTINCT_OBJECT
-- On RIGHT_BRACKET reduce production distinct_object -> DISTINCT_OBJECT
-- On PLUS reduce production distinct_object -> DISTINCT_OBJECT
-- On NOT_EQUAL reduce production distinct_object -> DISTINCT_OBJECT
-- On NOTVLINE reduce production distinct_object -> DISTINCT_OBJECT
-- On NOTAND reduce production distinct_object -> DISTINCT_OBJECT
-- On LEFT_IMPLY reduce production distinct_object -> DISTINCT_OBJECT
-- On IMPLY reduce production distinct_object -> DISTINCT_OBJECT
-- On EQUIV reduce production distinct_object -> DISTINCT_OBJECT
-- On EQUAL reduce production distinct_object -> DISTINCT_OBJECT
-- On COMMA reduce production distinct_object -> DISTINCT_OBJECT
-- On COLON reduce production distinct_object -> DISTINCT_OBJECT
-- On ARROW reduce production distinct_object -> DISTINCT_OBJECT
-- On APPLY reduce production distinct_object -> DISTINCT_OBJECT
-- On AND reduce production distinct_object -> DISTINCT_OBJECT

State 31:
term -> variable . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production term -> variable
-- On VLINE reduce production term -> variable
-- On STAR reduce production term -> variable
-- On RIGHT_PAREN reduce production term -> variable
-- On RIGHT_BRACKET reduce production term -> variable
-- On PLUS reduce production term -> variable
-- On NOT_EQUAL reduce production term -> variable
-- On NOTVLINE reduce production term -> variable
-- On NOTAND reduce production term -> variable
-- On LEFT_IMPLY reduce production term -> variable
-- On IMPLY reduce production term -> variable
-- On EQUIV reduce production term -> variable
-- On EQUAL reduce production term -> variable
-- On COMMA reduce production term -> variable
-- On COLON reduce production term -> variable
-- On ARROW reduce production term -> variable
-- On APPLY reduce production term -> variable
-- On AND reduce production term -> variable

State 32:
constant -> tptp_functor . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LESS LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
plain_term -> tptp_functor . LEFT_PAREN arguments RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 33
-- On XOR reduce production constant -> tptp_functor
-- On VLINE reduce production constant -> tptp_functor
-- On STAR reduce production constant -> tptp_functor
-- On RIGHT_PAREN reduce production constant -> tptp_functor
-- On RIGHT_BRACKET reduce production constant -> tptp_functor
-- On PLUS reduce production constant -> tptp_functor
-- On NOT_EQUAL reduce production constant -> tptp_functor
-- On NOTVLINE reduce production constant -> tptp_functor
-- On NOTAND reduce production constant -> tptp_functor
-- On LESS reduce production constant -> tptp_functor
-- On LEFT_IMPLY reduce production constant -> tptp_functor
-- On IMPLY reduce production constant -> tptp_functor
-- On EQUIV reduce production constant -> tptp_functor
-- On EQUAL reduce production constant -> tptp_functor
-- On COMMA reduce production constant -> tptp_functor
-- On COLON reduce production constant -> tptp_functor
-- On ARROW reduce production constant -> tptp_functor
-- On APPLY reduce production constant -> tptp_functor
-- On AND reduce production constant -> tptp_functor

State 33:
plain_term -> tptp_functor LEFT_PAREN . arguments RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 34
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On arguments shift to state 65

State 34:
arguments -> term . [ RIGHT_PAREN ]
arguments -> term . COMMA arguments [ RIGHT_PAREN ]
-- On COMMA shift to state 35
-- On RIGHT_PAREN reduce production arguments -> term

State 35:
arguments -> term COMMA . arguments [ RIGHT_PAREN ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 34
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On arguments shift to state 64

State 36:
function_term -> system_term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production function_term -> system_term
-- On VLINE reduce production function_term -> system_term
-- On STAR reduce production function_term -> system_term
-- On RIGHT_PAREN reduce production function_term -> system_term
-- On RIGHT_BRACKET reduce production function_term -> system_term
-- On PLUS reduce production function_term -> system_term
-- On NOT_EQUAL reduce production function_term -> system_term
-- On NOTVLINE reduce production function_term -> system_term
-- On NOTAND reduce production function_term -> system_term
-- On LEFT_IMPLY reduce production function_term -> system_term
-- On IMPLY reduce production function_term -> system_term
-- On EQUIV reduce production function_term -> system_term
-- On EQUAL reduce production function_term -> system_term
-- On COMMA reduce production function_term -> system_term
-- On COLON reduce production function_term -> system_term
-- On ARROW reduce production function_term -> system_term
-- On APPLY reduce production function_term -> system_term
-- On AND reduce production function_term -> system_term

State 37:
system_constant -> system_functor . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
system_term -> system_functor . LEFT_PAREN arguments RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 38
-- On XOR reduce production system_constant -> system_functor
-- On VLINE reduce production system_constant -> system_functor
-- On STAR reduce production system_constant -> system_functor
-- On RIGHT_PAREN reduce production system_constant -> system_functor
-- On RIGHT_BRACKET reduce production system_constant -> system_functor
-- On PLUS reduce production system_constant -> system_functor
-- On NOT_EQUAL reduce production system_constant -> system_functor
-- On NOTVLINE reduce production system_constant -> system_functor
-- On NOTAND reduce production system_constant -> system_functor
-- On LEFT_IMPLY reduce production system_constant -> system_functor
-- On IMPLY reduce production system_constant -> system_functor
-- On EQUIV reduce production system_constant -> system_functor
-- On EQUAL reduce production system_constant -> system_functor
-- On COMMA reduce production system_constant -> system_functor
-- On COLON reduce production system_constant -> system_functor
-- On ARROW reduce production system_constant -> system_functor
-- On APPLY reduce production system_constant -> system_functor
-- On AND reduce production system_constant -> system_functor

State 38:
system_term -> system_functor LEFT_PAREN . arguments RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 34
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On arguments shift to state 62

State 39:
system_term -> system_constant . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production system_term -> system_constant
-- On VLINE reduce production system_term -> system_constant
-- On STAR reduce production system_term -> system_constant
-- On RIGHT_PAREN reduce production system_term -> system_constant
-- On RIGHT_BRACKET reduce production system_term -> system_constant
-- On PLUS reduce production system_term -> system_constant
-- On NOT_EQUAL reduce production system_term -> system_constant
-- On NOTVLINE reduce production system_term -> system_constant
-- On NOTAND reduce production system_term -> system_constant
-- On LEFT_IMPLY reduce production system_term -> system_constant
-- On IMPLY reduce production system_term -> system_constant
-- On EQUIV reduce production system_term -> system_constant
-- On EQUAL reduce production system_term -> system_constant
-- On COMMA reduce production system_term -> system_constant
-- On COLON reduce production system_term -> system_constant
-- On ARROW reduce production system_term -> system_constant
-- On APPLY reduce production system_term -> system_constant
-- On AND reduce production system_term -> system_constant

State 40:
number -> real . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production number -> real
-- On VLINE reduce production number -> real
-- On STAR reduce production number -> real
-- On RIGHT_PAREN reduce production number -> real
-- On RIGHT_BRACKET reduce production number -> real
-- On PLUS reduce production number -> real
-- On NOT_EQUAL reduce production number -> real
-- On NOTVLINE reduce production number -> real
-- On NOTAND reduce production number -> real
-- On LEFT_IMPLY reduce production number -> real
-- On IMPLY reduce production number -> real
-- On EQUIV reduce production number -> real
-- On EQUAL reduce production number -> real
-- On COMMA reduce production number -> real
-- On COLON reduce production number -> real
-- On ARROW reduce production number -> real
-- On APPLY reduce production number -> real
-- On AND reduce production number -> real

State 41:
number -> rational . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production number -> rational
-- On VLINE reduce production number -> rational
-- On STAR reduce production number -> rational
-- On RIGHT_PAREN reduce production number -> rational
-- On RIGHT_BRACKET reduce production number -> rational
-- On PLUS reduce production number -> rational
-- On NOT_EQUAL reduce production number -> rational
-- On NOTVLINE reduce production number -> rational
-- On NOTAND reduce production number -> rational
-- On LEFT_IMPLY reduce production number -> rational
-- On IMPLY reduce production number -> rational
-- On EQUIV reduce production number -> rational
-- On EQUAL reduce production number -> rational
-- On COMMA reduce production number -> rational
-- On COLON reduce production number -> rational
-- On ARROW reduce production number -> rational
-- On APPLY reduce production number -> rational
-- On AND reduce production number -> rational

State 42:
function_term -> plain_term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production function_term -> plain_term
-- On VLINE reduce production function_term -> plain_term
-- On STAR reduce production function_term -> plain_term
-- On RIGHT_PAREN reduce production function_term -> plain_term
-- On RIGHT_BRACKET reduce production function_term -> plain_term
-- On PLUS reduce production function_term -> plain_term
-- On NOT_EQUAL reduce production function_term -> plain_term
-- On NOTVLINE reduce production function_term -> plain_term
-- On NOTAND reduce production function_term -> plain_term
-- On LEFT_IMPLY reduce production function_term -> plain_term
-- On IMPLY reduce production function_term -> plain_term
-- On EQUIV reduce production function_term -> plain_term
-- On EQUAL reduce production function_term -> plain_term
-- On COMMA reduce production function_term -> plain_term
-- On COLON reduce production function_term -> plain_term
-- On ARROW reduce production function_term -> plain_term
-- On APPLY reduce production function_term -> plain_term
-- On AND reduce production function_term -> plain_term

State 43:
defined_atom -> number . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production defined_atom -> number
-- On VLINE reduce production defined_atom -> number
-- On STAR reduce production defined_atom -> number
-- On RIGHT_PAREN reduce production defined_atom -> number
-- On RIGHT_BRACKET reduce production defined_atom -> number
-- On PLUS reduce production defined_atom -> number
-- On NOT_EQUAL reduce production defined_atom -> number
-- On NOTVLINE reduce production defined_atom -> number
-- On NOTAND reduce production defined_atom -> number
-- On LEFT_IMPLY reduce production defined_atom -> number
-- On IMPLY reduce production defined_atom -> number
-- On EQUIV reduce production defined_atom -> number
-- On EQUAL reduce production defined_atom -> number
-- On COMMA reduce production defined_atom -> number
-- On COLON reduce production defined_atom -> number
-- On ARROW reduce production defined_atom -> number
-- On APPLY reduce production defined_atom -> number
-- On AND reduce production defined_atom -> number

State 44:
term -> let_term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production term -> let_term
-- On VLINE reduce production term -> let_term
-- On STAR reduce production term -> let_term
-- On RIGHT_PAREN reduce production term -> let_term
-- On RIGHT_BRACKET reduce production term -> let_term
-- On PLUS reduce production term -> let_term
-- On NOT_EQUAL reduce production term -> let_term
-- On NOTVLINE reduce production term -> let_term
-- On NOTAND reduce production term -> let_term
-- On LEFT_IMPLY reduce production term -> let_term
-- On IMPLY reduce production term -> let_term
-- On EQUIV reduce production term -> let_term
-- On EQUAL reduce production term -> let_term
-- On COMMA reduce production term -> let_term
-- On COLON reduce production term -> let_term
-- On ARROW reduce production term -> let_term
-- On APPLY reduce production term -> let_term
-- On AND reduce production term -> let_term

State 45:
number -> integer . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production number -> integer
-- On VLINE reduce production number -> integer
-- On STAR reduce production number -> integer
-- On RIGHT_PAREN reduce production number -> integer
-- On RIGHT_BRACKET reduce production number -> integer
-- On PLUS reduce production number -> integer
-- On NOT_EQUAL reduce production number -> integer
-- On NOTVLINE reduce production number -> integer
-- On NOTAND reduce production number -> integer
-- On LEFT_IMPLY reduce production number -> integer
-- On IMPLY reduce production number -> integer
-- On EQUIV reduce production number -> integer
-- On EQUAL reduce production number -> integer
-- On COMMA reduce production number -> integer
-- On COLON reduce production number -> integer
-- On ARROW reduce production number -> integer
-- On APPLY reduce production number -> integer
-- On AND reduce production number -> integer

State 46:
term -> function_term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production term -> function_term
-- On VLINE reduce production term -> function_term
-- On STAR reduce production term -> function_term
-- On RIGHT_PAREN reduce production term -> function_term
-- On RIGHT_BRACKET reduce production term -> function_term
-- On PLUS reduce production term -> function_term
-- On NOT_EQUAL reduce production term -> function_term
-- On NOTVLINE reduce production term -> function_term
-- On NOTAND reduce production term -> function_term
-- On LEFT_IMPLY reduce production term -> function_term
-- On IMPLY reduce production term -> function_term
-- On EQUIV reduce production term -> function_term
-- On EQUAL reduce production term -> function_term
-- On COMMA reduce production term -> function_term
-- On COLON reduce production term -> function_term
-- On ARROW reduce production term -> function_term
-- On APPLY reduce production term -> function_term
-- On AND reduce production term -> function_term

State 47:
defined_atom -> distinct_object . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production defined_atom -> distinct_object
-- On VLINE reduce production defined_atom -> distinct_object
-- On STAR reduce production defined_atom -> distinct_object
-- On RIGHT_PAREN reduce production defined_atom -> distinct_object
-- On RIGHT_BRACKET reduce production defined_atom -> distinct_object
-- On PLUS reduce production defined_atom -> distinct_object
-- On NOT_EQUAL reduce production defined_atom -> distinct_object
-- On NOTVLINE reduce production defined_atom -> distinct_object
-- On NOTAND reduce production defined_atom -> distinct_object
-- On LEFT_IMPLY reduce production defined_atom -> distinct_object
-- On IMPLY reduce production defined_atom -> distinct_object
-- On EQUIV reduce production defined_atom -> distinct_object
-- On EQUAL reduce production defined_atom -> distinct_object
-- On COMMA reduce production defined_atom -> distinct_object
-- On COLON reduce production defined_atom -> distinct_object
-- On ARROW reduce production defined_atom -> distinct_object
-- On APPLY reduce production defined_atom -> distinct_object
-- On AND reduce production defined_atom -> distinct_object

State 48:
function_term -> defined_term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production function_term -> defined_term
-- On VLINE reduce production function_term -> defined_term
-- On STAR reduce production function_term -> defined_term
-- On RIGHT_PAREN reduce production function_term -> defined_term
-- On RIGHT_BRACKET reduce production function_term -> defined_term
-- On PLUS reduce production function_term -> defined_term
-- On NOT_EQUAL reduce production function_term -> defined_term
-- On NOTVLINE reduce production function_term -> defined_term
-- On NOTAND reduce production function_term -> defined_term
-- On LEFT_IMPLY reduce production function_term -> defined_term
-- On IMPLY reduce production function_term -> defined_term
-- On EQUIV reduce production function_term -> defined_term
-- On EQUAL reduce production function_term -> defined_term
-- On COMMA reduce production function_term -> defined_term
-- On COLON reduce production function_term -> defined_term
-- On ARROW reduce production function_term -> defined_term
-- On APPLY reduce production function_term -> defined_term
-- On AND reduce production function_term -> defined_term

State 49:
defined_atomic_term -> defined_plain_term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production defined_atomic_term -> defined_plain_term
-- On VLINE reduce production defined_atomic_term -> defined_plain_term
-- On STAR reduce production defined_atomic_term -> defined_plain_term
-- On RIGHT_PAREN reduce production defined_atomic_term -> defined_plain_term
-- On RIGHT_BRACKET reduce production defined_atomic_term -> defined_plain_term
-- On PLUS reduce production defined_atomic_term -> defined_plain_term
-- On NOT_EQUAL reduce production defined_atomic_term -> defined_plain_term
-- On NOTVLINE reduce production defined_atomic_term -> defined_plain_term
-- On NOTAND reduce production defined_atomic_term -> defined_plain_term
-- On LEFT_IMPLY reduce production defined_atomic_term -> defined_plain_term
-- On IMPLY reduce production defined_atomic_term -> defined_plain_term
-- On EQUIV reduce production defined_atomic_term -> defined_plain_term
-- On EQUAL reduce production defined_atomic_term -> defined_plain_term
-- On COMMA reduce production defined_atomic_term -> defined_plain_term
-- On COLON reduce production defined_atomic_term -> defined_plain_term
-- On ARROW reduce production defined_atomic_term -> defined_plain_term
-- On APPLY reduce production defined_atomic_term -> defined_plain_term
-- On AND reduce production defined_atomic_term -> defined_plain_term

State 50:
defined_constant -> defined_functor . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
defined_plain_term -> defined_functor . LEFT_PAREN arguments RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 51
-- On XOR reduce production defined_constant -> defined_functor
-- On VLINE reduce production defined_constant -> defined_functor
-- On STAR reduce production defined_constant -> defined_functor
-- On RIGHT_PAREN reduce production defined_constant -> defined_functor
-- On RIGHT_BRACKET reduce production defined_constant -> defined_functor
-- On PLUS reduce production defined_constant -> defined_functor
-- On NOT_EQUAL reduce production defined_constant -> defined_functor
-- On NOTVLINE reduce production defined_constant -> defined_functor
-- On NOTAND reduce production defined_constant -> defined_functor
-- On LEFT_IMPLY reduce production defined_constant -> defined_functor
-- On IMPLY reduce production defined_constant -> defined_functor
-- On EQUIV reduce production defined_constant -> defined_functor
-- On EQUAL reduce production defined_constant -> defined_functor
-- On COMMA reduce production defined_constant -> defined_functor
-- On COLON reduce production defined_constant -> defined_functor
-- On ARROW reduce production defined_constant -> defined_functor
-- On APPLY reduce production defined_constant -> defined_functor
-- On AND reduce production defined_constant -> defined_functor

State 51:
defined_plain_term -> defined_functor LEFT_PAREN . arguments RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 34
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On arguments shift to state 60

State 52:
defined_plain_term -> defined_constant . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production defined_plain_term -> defined_constant
-- On VLINE reduce production defined_plain_term -> defined_constant
-- On STAR reduce production defined_plain_term -> defined_constant
-- On RIGHT_PAREN reduce production defined_plain_term -> defined_constant
-- On RIGHT_BRACKET reduce production defined_plain_term -> defined_constant
-- On PLUS reduce production defined_plain_term -> defined_constant
-- On NOT_EQUAL reduce production defined_plain_term -> defined_constant
-- On NOTVLINE reduce production defined_plain_term -> defined_constant
-- On NOTAND reduce production defined_plain_term -> defined_constant
-- On LEFT_IMPLY reduce production defined_plain_term -> defined_constant
-- On IMPLY reduce production defined_plain_term -> defined_constant
-- On EQUIV reduce production defined_plain_term -> defined_constant
-- On EQUAL reduce production defined_plain_term -> defined_constant
-- On COMMA reduce production defined_plain_term -> defined_constant
-- On COLON reduce production defined_plain_term -> defined_constant
-- On ARROW reduce production defined_plain_term -> defined_constant
-- On APPLY reduce production defined_plain_term -> defined_constant
-- On AND reduce production defined_plain_term -> defined_constant

State 53:
defined_term -> defined_atomic_term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production defined_term -> defined_atomic_term
-- On VLINE reduce production defined_term -> defined_atomic_term
-- On STAR reduce production defined_term -> defined_atomic_term
-- On RIGHT_PAREN reduce production defined_term -> defined_atomic_term
-- On RIGHT_BRACKET reduce production defined_term -> defined_atomic_term
-- On PLUS reduce production defined_term -> defined_atomic_term
-- On NOT_EQUAL reduce production defined_term -> defined_atomic_term
-- On NOTVLINE reduce production defined_term -> defined_atomic_term
-- On NOTAND reduce production defined_term -> defined_atomic_term
-- On LEFT_IMPLY reduce production defined_term -> defined_atomic_term
-- On IMPLY reduce production defined_term -> defined_atomic_term
-- On EQUIV reduce production defined_term -> defined_atomic_term
-- On EQUAL reduce production defined_term -> defined_atomic_term
-- On COMMA reduce production defined_term -> defined_atomic_term
-- On COLON reduce production defined_term -> defined_atomic_term
-- On ARROW reduce production defined_term -> defined_atomic_term
-- On APPLY reduce production defined_term -> defined_atomic_term
-- On AND reduce production defined_term -> defined_atomic_term

State 54:
defined_term -> defined_atom . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production defined_term -> defined_atom
-- On VLINE reduce production defined_term -> defined_atom
-- On STAR reduce production defined_term -> defined_atom
-- On RIGHT_PAREN reduce production defined_term -> defined_atom
-- On RIGHT_BRACKET reduce production defined_term -> defined_atom
-- On PLUS reduce production defined_term -> defined_atom
-- On NOT_EQUAL reduce production defined_term -> defined_atom
-- On NOTVLINE reduce production defined_term -> defined_atom
-- On NOTAND reduce production defined_term -> defined_atom
-- On LEFT_IMPLY reduce production defined_term -> defined_atom
-- On IMPLY reduce production defined_term -> defined_atom
-- On EQUIV reduce production defined_term -> defined_atom
-- On EQUAL reduce production defined_term -> defined_atom
-- On COMMA reduce production defined_term -> defined_atom
-- On COLON reduce production defined_term -> defined_atom
-- On ARROW reduce production defined_term -> defined_atom
-- On APPLY reduce production defined_term -> defined_atom
-- On AND reduce production defined_term -> defined_atom

State 55:
plain_term -> constant . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production plain_term -> constant
-- On VLINE reduce production plain_term -> constant
-- On STAR reduce production plain_term -> constant
-- On RIGHT_PAREN reduce production plain_term -> constant
-- On RIGHT_BRACKET reduce production plain_term -> constant
-- On PLUS reduce production plain_term -> constant
-- On NOT_EQUAL reduce production plain_term -> constant
-- On NOTVLINE reduce production plain_term -> constant
-- On NOTAND reduce production plain_term -> constant
-- On LEFT_IMPLY reduce production plain_term -> constant
-- On IMPLY reduce production plain_term -> constant
-- On EQUIV reduce production plain_term -> constant
-- On EQUAL reduce production plain_term -> constant
-- On COMMA reduce production plain_term -> constant
-- On ARROW reduce production plain_term -> constant
-- On APPLY reduce production plain_term -> constant
-- On AND reduce production plain_term -> constant

State 56:
term -> conditional_term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production term -> conditional_term
-- On VLINE reduce production term -> conditional_term
-- On STAR reduce production term -> conditional_term
-- On RIGHT_PAREN reduce production term -> conditional_term
-- On RIGHT_BRACKET reduce production term -> conditional_term
-- On PLUS reduce production term -> conditional_term
-- On NOT_EQUAL reduce production term -> conditional_term
-- On NOTVLINE reduce production term -> conditional_term
-- On NOTAND reduce production term -> conditional_term
-- On LEFT_IMPLY reduce production term -> conditional_term
-- On IMPLY reduce production term -> conditional_term
-- On EQUIV reduce production term -> conditional_term
-- On EQUAL reduce production term -> conditional_term
-- On COMMA reduce production term -> conditional_term
-- On COLON reduce production term -> conditional_term
-- On ARROW reduce production term -> conditional_term
-- On APPLY reduce production term -> conditional_term
-- On AND reduce production term -> conditional_term

State 57:
tptp_functor -> atomic_word . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LESS LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production tptp_functor -> atomic_word
-- On VLINE reduce production tptp_functor -> atomic_word
-- On STAR reduce production tptp_functor -> atomic_word
-- On RIGHT_PAREN reduce production tptp_functor -> atomic_word
-- On RIGHT_BRACKET reduce production tptp_functor -> atomic_word
-- On PLUS reduce production tptp_functor -> atomic_word
-- On NOT_EQUAL reduce production tptp_functor -> atomic_word
-- On NOTVLINE reduce production tptp_functor -> atomic_word
-- On NOTAND reduce production tptp_functor -> atomic_word
-- On LESS reduce production tptp_functor -> atomic_word
-- On LEFT_PAREN reduce production tptp_functor -> atomic_word
-- On LEFT_IMPLY reduce production tptp_functor -> atomic_word
-- On IMPLY reduce production tptp_functor -> atomic_word
-- On EQUIV reduce production tptp_functor -> atomic_word
-- On EQUAL reduce production tptp_functor -> atomic_word
-- On COMMA reduce production tptp_functor -> atomic_word
-- On COLON reduce production tptp_functor -> atomic_word
-- On ARROW reduce production tptp_functor -> atomic_word
-- On APPLY reduce production tptp_functor -> atomic_word
-- On AND reduce production tptp_functor -> atomic_word

State 58:
system_functor -> atomic_system_word . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production system_functor -> atomic_system_word
-- On VLINE reduce production system_functor -> atomic_system_word
-- On STAR reduce production system_functor -> atomic_system_word
-- On RIGHT_PAREN reduce production system_functor -> atomic_system_word
-- On RIGHT_BRACKET reduce production system_functor -> atomic_system_word
-- On PLUS reduce production system_functor -> atomic_system_word
-- On NOT_EQUAL reduce production system_functor -> atomic_system_word
-- On NOTVLINE reduce production system_functor -> atomic_system_word
-- On NOTAND reduce production system_functor -> atomic_system_word
-- On LEFT_PAREN reduce production system_functor -> atomic_system_word
-- On LEFT_IMPLY reduce production system_functor -> atomic_system_word
-- On IMPLY reduce production system_functor -> atomic_system_word
-- On EQUIV reduce production system_functor -> atomic_system_word
-- On EQUAL reduce production system_functor -> atomic_system_word
-- On COMMA reduce production system_functor -> atomic_system_word
-- On COLON reduce production system_functor -> atomic_system_word
-- On ARROW reduce production system_functor -> atomic_system_word
-- On APPLY reduce production system_functor -> atomic_system_word
-- On AND reduce production system_functor -> atomic_system_word

State 59:
defined_functor -> atomic_defined_word . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production defined_functor -> atomic_defined_word
-- On VLINE reduce production defined_functor -> atomic_defined_word
-- On STAR reduce production defined_functor -> atomic_defined_word
-- On RIGHT_PAREN reduce production defined_functor -> atomic_defined_word
-- On RIGHT_BRACKET reduce production defined_functor -> atomic_defined_word
-- On PLUS reduce production defined_functor -> atomic_defined_word
-- On NOT_EQUAL reduce production defined_functor -> atomic_defined_word
-- On NOTVLINE reduce production defined_functor -> atomic_defined_word
-- On NOTAND reduce production defined_functor -> atomic_defined_word
-- On LEFT_PAREN reduce production defined_functor -> atomic_defined_word
-- On LEFT_IMPLY reduce production defined_functor -> atomic_defined_word
-- On IMPLY reduce production defined_functor -> atomic_defined_word
-- On EQUIV reduce production defined_functor -> atomic_defined_word
-- On EQUAL reduce production defined_functor -> atomic_defined_word
-- On COMMA reduce production defined_functor -> atomic_defined_word
-- On COLON reduce production defined_functor -> atomic_defined_word
-- On ARROW reduce production defined_functor -> atomic_defined_word
-- On APPLY reduce production defined_functor -> atomic_defined_word
-- On AND reduce production defined_functor -> atomic_defined_word

State 60:
defined_plain_term -> defined_functor LEFT_PAREN arguments . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 61

State 61:
defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On VLINE reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On STAR reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On PLUS reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTVLINE reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTAND reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On IMPLY reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUIV reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUAL reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On COMMA reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On COLON reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On ARROW reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On APPLY reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN
-- On AND reduce production defined_plain_term -> defined_functor LEFT_PAREN arguments RIGHT_PAREN

State 62:
system_term -> system_functor LEFT_PAREN arguments . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 63

State 63:
system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On VLINE reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On STAR reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On PLUS reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTVLINE reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTAND reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On IMPLY reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUIV reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUAL reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On COMMA reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On COLON reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On ARROW reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On APPLY reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN
-- On AND reduce production system_term -> system_functor LEFT_PAREN arguments RIGHT_PAREN

State 64:
arguments -> term COMMA arguments . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production arguments -> term COMMA arguments

State 65:
plain_term -> tptp_functor LEFT_PAREN arguments . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 66

State 66:
plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On VLINE reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On STAR reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On PLUS reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOT_EQUAL reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTVLINE reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On NOTAND reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On LEFT_IMPLY reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On IMPLY reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUIV reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On EQUAL reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On COMMA reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On COLON reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On ARROW reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On APPLY reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN
-- On AND reduce production plain_term -> tptp_functor LEFT_PAREN arguments RIGHT_PAREN

State 67:
tff_let_term_binding -> LEFT_PAREN tff_let_term_binding . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 68

State 68:
tff_let_term_binding -> LEFT_PAREN tff_let_term_binding RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_let_term_binding -> LEFT_PAREN tff_let_term_binding RIGHT_PAREN
-- On COMMA reduce production tff_let_term_binding -> LEFT_PAREN tff_let_term_binding RIGHT_PAREN

State 69:
tff_let_term_binding -> term . EQUAL term [ RIGHT_PAREN COMMA ]
-- On EQUAL shift to state 70

State 70:
tff_let_term_binding -> term EQUAL . term [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 71
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 71:
tff_let_term_binding -> term EQUAL term . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_let_term_binding -> term EQUAL term
-- On COMMA reduce production tff_let_term_binding -> term EQUAL term

State 72:
tff_let_term_defn -> FORALL . LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_let_term_defn [ COMMA ]
-- On LEFT_BRACKET shift to state 73

State 73:
tff_let_term_defn -> FORALL LEFT_BRACKET . tff_variable_list RIGHT_BRACKET COLON tff_let_term_defn [ COMMA ]
-- On UPPER_WORD shift to state 11
-- On variable shift to state 74
-- On tff_variable_list shift to state 87
-- On tff_variable shift to state 92
-- On tff_typed_variable shift to state 95

State 74:
tff_typed_variable -> variable . COLON tff_atomic_type [ RIGHT_BRACKET COMMA ]
tff_variable -> variable . [ RIGHT_BRACKET COMMA ]
-- On COLON shift to state 75
-- On RIGHT_BRACKET reduce production tff_variable -> variable
-- On COMMA reduce production tff_variable -> variable

State 75:
tff_typed_variable -> variable COLON . tff_atomic_type [ RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_atomic_type shift to state 77
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 76:
tff_atomic_type -> variable . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On STAR reduce production tff_atomic_type -> variable
-- On RIGHT_PAREN reduce production tff_atomic_type -> variable
-- On RIGHT_BRACKET reduce production tff_atomic_type -> variable
-- On COMMA reduce production tff_atomic_type -> variable
-- On ARROW reduce production tff_atomic_type -> variable

State 77:
tff_typed_variable -> variable COLON tff_atomic_type . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production tff_typed_variable -> variable COLON tff_atomic_type
-- On COMMA reduce production tff_typed_variable -> variable COLON tff_atomic_type

State 78:
tff_atomic_type -> defined_type . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On STAR reduce production tff_atomic_type -> defined_type
-- On RIGHT_PAREN reduce production tff_atomic_type -> defined_type
-- On RIGHT_BRACKET reduce production tff_atomic_type -> defined_type
-- On COMMA reduce production tff_atomic_type -> defined_type
-- On ARROW reduce production tff_atomic_type -> defined_type

State 79:
tff_atomic_type -> atomic_word . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
tff_atomic_type -> atomic_word . LEFT_PAREN tff_type_arguments RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On LEFT_PAREN shift to state 80
-- On STAR reduce production tff_atomic_type -> atomic_word
-- On RIGHT_PAREN reduce production tff_atomic_type -> atomic_word
-- On RIGHT_BRACKET reduce production tff_atomic_type -> atomic_word
-- On COMMA reduce production tff_atomic_type -> atomic_word
-- On ARROW reduce production tff_atomic_type -> atomic_word

State 80:
tff_atomic_type -> atomic_word LEFT_PAREN . tff_type_arguments RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_type_arguments shift to state 81
-- On tff_atomic_type shift to state 83
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 81:
tff_atomic_type -> atomic_word LEFT_PAREN tff_type_arguments . RIGHT_PAREN [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On RIGHT_PAREN shift to state 82

State 82:
tff_atomic_type -> atomic_word LEFT_PAREN tff_type_arguments RIGHT_PAREN . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On STAR reduce production tff_atomic_type -> atomic_word LEFT_PAREN tff_type_arguments RIGHT_PAREN
-- On RIGHT_PAREN reduce production tff_atomic_type -> atomic_word LEFT_PAREN tff_type_arguments RIGHT_PAREN
-- On RIGHT_BRACKET reduce production tff_atomic_type -> atomic_word LEFT_PAREN tff_type_arguments RIGHT_PAREN
-- On COMMA reduce production tff_atomic_type -> atomic_word LEFT_PAREN tff_type_arguments RIGHT_PAREN
-- On ARROW reduce production tff_atomic_type -> atomic_word LEFT_PAREN tff_type_arguments RIGHT_PAREN

State 83:
tff_type_arguments -> tff_atomic_type . [ RIGHT_PAREN ]
tff_type_arguments -> tff_atomic_type . COMMA tff_type_arguments [ RIGHT_PAREN ]
-- On COMMA shift to state 84
-- On RIGHT_PAREN reduce production tff_type_arguments -> tff_atomic_type

State 84:
tff_type_arguments -> tff_atomic_type COMMA . tff_type_arguments [ RIGHT_PAREN ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_type_arguments shift to state 85
-- On tff_atomic_type shift to state 83
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 85:
tff_type_arguments -> tff_atomic_type COMMA tff_type_arguments . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production tff_type_arguments -> tff_atomic_type COMMA tff_type_arguments

State 86:
defined_type -> atomic_defined_word . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ARROW ]
-- On STAR reduce production defined_type -> atomic_defined_word
-- On RIGHT_PAREN reduce production defined_type -> atomic_defined_word
-- On RIGHT_BRACKET reduce production defined_type -> atomic_defined_word
-- On COMMA reduce production defined_type -> atomic_defined_word
-- On ARROW reduce production defined_type -> atomic_defined_word

State 87:
tff_let_term_defn -> FORALL LEFT_BRACKET tff_variable_list . RIGHT_BRACKET COLON tff_let_term_defn [ COMMA ]
-- On RIGHT_BRACKET shift to state 88

State 88:
tff_let_term_defn -> FORALL LEFT_BRACKET tff_variable_list RIGHT_BRACKET . COLON tff_let_term_defn [ COMMA ]
-- On COLON shift to state 89

State 89:
tff_let_term_defn -> FORALL LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON . tff_let_term_defn [ COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 26
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 72
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On tff_let_term_defn shift to state 90
-- On tff_let_term_binding shift to state 91
-- On term shift to state 69
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 90:
tff_let_term_defn -> FORALL LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_let_term_defn . [ COMMA ]
-- On COMMA reduce production tff_let_term_defn -> FORALL LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_let_term_defn

State 91:
tff_let_term_defn -> tff_let_term_binding . [ COMMA ]
-- On COMMA reduce production tff_let_term_defn -> tff_let_term_binding

State 92:
tff_variable_list -> tff_variable . [ RIGHT_BRACKET ]
tff_variable_list -> tff_variable . COMMA tff_variable_list [ RIGHT_BRACKET ]
-- On COMMA shift to state 93
-- On RIGHT_BRACKET reduce production tff_variable_list -> tff_variable

State 93:
tff_variable_list -> tff_variable COMMA . tff_variable_list [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 11
-- On variable shift to state 74
-- On tff_variable_list shift to state 94
-- On tff_variable shift to state 92
-- On tff_typed_variable shift to state 95

State 94:
tff_variable_list -> tff_variable COMMA tff_variable_list . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production tff_variable_list -> tff_variable COMMA tff_variable_list

State 95:
tff_variable -> tff_typed_variable . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production tff_variable -> tff_typed_variable
-- On COMMA reduce production tff_variable -> tff_typed_variable

State 96:
tff_let -> LET_TF LEFT_PAREN tff_let_term_defn . COMMA tff_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On COMMA shift to state 97

State 97:
tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA . tff_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 179
-- On LEFT_BRACKET shift to state 180
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 187
-- On tff_untyped_atom shift to state 188
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_typed_atom shift to state 228
-- On tff_tuple shift to state 222
-- On tff_sequent shift to state 229
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 230
-- On tff_let shift to state 132
-- On tff_formula shift to state 233
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 227
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 98:
tff_let -> LET_FF . LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On LEFT_PAREN shift to state 99

State 99:
tff_let -> LET_FF LEFT_PAREN . tff_let_formula_defn COMMA tff_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 21
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 100
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On tff_let_formula_defn shift to state 177
-- On tff_let_formula_binding shift to state 106
-- On term shift to state 107
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 120
-- On atomic_defined_word shift to state 59

State 100:
tff_let_formula_defn -> FORALL . LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_let_formula_defn [ COMMA ]
-- On LEFT_BRACKET shift to state 101

State 101:
tff_let_formula_defn -> FORALL LEFT_BRACKET . tff_variable_list RIGHT_BRACKET COLON tff_let_formula_defn [ COMMA ]
-- On UPPER_WORD shift to state 11
-- On variable shift to state 74
-- On tff_variable_list shift to state 102
-- On tff_variable shift to state 92
-- On tff_typed_variable shift to state 95

State 102:
tff_let_formula_defn -> FORALL LEFT_BRACKET tff_variable_list . RIGHT_BRACKET COLON tff_let_formula_defn [ COMMA ]
-- On RIGHT_BRACKET shift to state 103

State 103:
tff_let_formula_defn -> FORALL LEFT_BRACKET tff_variable_list RIGHT_BRACKET . COLON tff_let_formula_defn [ COMMA ]
-- On COLON shift to state 104

State 104:
tff_let_formula_defn -> FORALL LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON . tff_let_formula_defn [ COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 21
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 100
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On tff_let_formula_defn shift to state 105
-- On tff_let_formula_binding shift to state 106
-- On term shift to state 107
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 120
-- On atomic_defined_word shift to state 59

State 105:
tff_let_formula_defn -> FORALL LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_let_formula_defn . [ COMMA ]
-- On COMMA reduce production tff_let_formula_defn -> FORALL LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_let_formula_defn

State 106:
tff_let_formula_defn -> tff_let_formula_binding . [ COMMA ]
-- On COMMA reduce production tff_let_formula_defn -> tff_let_formula_binding

State 107:
defined_infix_formula -> term . defined_infix_pred term [ VLINE RIGHT_PAREN EQUIV COMMA ]
-- On EQUAL shift to state 108
-- On infix_equality shift to state 109
-- On defined_infix_pred shift to state 110

State 108:
infix_equality -> EQUAL . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production infix_equality -> EQUAL
-- On VLINE reduce production infix_equality -> EQUAL
-- On UPPER_WORD reduce production infix_equality -> EQUAL
-- On STAR reduce production infix_equality -> EQUAL
-- On SINGLE_QUOTED reduce production infix_equality -> EQUAL
-- On SIGMA reduce production infix_equality -> EQUAL
-- On RIGHT_PAREN reduce production infix_equality -> EQUAL
-- On RIGHT_BRACKET reduce production infix_equality -> EQUAL
-- On REAL reduce production infix_equality -> EQUAL
-- On RATIONAL reduce production infix_equality -> EQUAL
-- On PLUS reduce production infix_equality -> EQUAL
-- On PI reduce production infix_equality -> EQUAL
-- On NOT_EQUAL reduce production infix_equality -> EQUAL
-- On NOTVLINE reduce production infix_equality -> EQUAL
-- On NOTAND reduce production infix_equality -> EQUAL
-- On NOT reduce production infix_equality -> EQUAL
-- On LOWER_WORD reduce production infix_equality -> EQUAL
-- On LET_TT reduce production infix_equality -> EQUAL
-- On LET_TF reduce production infix_equality -> EQUAL
-- On LET_FT reduce production infix_equality -> EQUAL
-- On LET_FF reduce production infix_equality -> EQUAL
-- On LEFT_PAREN reduce production infix_equality -> EQUAL
-- On LEFT_IMPLY reduce production infix_equality -> EQUAL
-- On LAMBDA reduce production infix_equality -> EQUAL
-- On ITE_T reduce production infix_equality -> EQUAL
-- On ITE_F reduce production infix_equality -> EQUAL
-- On INTEGER reduce production infix_equality -> EQUAL
-- On INDEFINITE_DESCRIPTION reduce production infix_equality -> EQUAL
-- On IMPLY reduce production infix_equality -> EQUAL
-- On FORALL_TY reduce production infix_equality -> EQUAL
-- On FORALL reduce production infix_equality -> EQUAL
-- On EXISTS_TY reduce production infix_equality -> EQUAL
-- On EXISTS reduce production infix_equality -> EQUAL
-- On EQUIV reduce production infix_equality -> EQUAL
-- On EQUAL reduce production infix_equality -> EQUAL
-- On DOLLAR_WORD reduce production infix_equality -> EQUAL
-- On DOLLAR_DOLLAR_WORD reduce production infix_equality -> EQUAL
-- On DISTINCT_OBJECT reduce production infix_equality -> EQUAL
-- On DEFINITE_DESCRIPTION reduce production infix_equality -> EQUAL
-- On COMMA reduce production infix_equality -> EQUAL
-- On COLON reduce production infix_equality -> EQUAL
-- On ARROW reduce production infix_equality -> EQUAL
-- On APPLY reduce production infix_equality -> EQUAL
-- On AND reduce production infix_equality -> EQUAL

State 109:
defined_infix_pred -> infix_equality . [ UPPER_WORD SINGLE_QUOTED REAL RATIONAL LOWER_WORD LET_TT LET_FT ITE_T INTEGER DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT ]
-- On UPPER_WORD reduce production defined_infix_pred -> infix_equality
-- On SINGLE_QUOTED reduce production defined_infix_pred -> infix_equality
-- On REAL reduce production defined_infix_pred -> infix_equality
-- On RATIONAL reduce production defined_infix_pred -> infix_equality
-- On LOWER_WORD reduce production defined_infix_pred -> infix_equality
-- On LET_TT reduce production defined_infix_pred -> infix_equality
-- On LET_FT reduce production defined_infix_pred -> infix_equality
-- On ITE_T reduce production defined_infix_pred -> infix_equality
-- On INTEGER reduce production defined_infix_pred -> infix_equality
-- On DOLLAR_WORD reduce production defined_infix_pred -> infix_equality
-- On DOLLAR_DOLLAR_WORD reduce production defined_infix_pred -> infix_equality
-- On DISTINCT_OBJECT reduce production defined_infix_pred -> infix_equality

State 110:
defined_infix_formula -> term defined_infix_pred . term [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 111
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 111:
defined_infix_formula -> term defined_infix_pred term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production defined_infix_formula -> term defined_infix_pred term
-- On VLINE reduce production defined_infix_formula -> term defined_infix_pred term
-- On RIGHT_PAREN reduce production defined_infix_formula -> term defined_infix_pred term
-- On RIGHT_BRACKET reduce production defined_infix_formula -> term defined_infix_pred term
-- On NOTVLINE reduce production defined_infix_formula -> term defined_infix_pred term
-- On NOTAND reduce production defined_infix_formula -> term defined_infix_pred term
-- On LEFT_IMPLY reduce production defined_infix_formula -> term defined_infix_pred term
-- On IMPLY reduce production defined_infix_formula -> term defined_infix_pred term
-- On EQUIV reduce production defined_infix_formula -> term defined_infix_pred term
-- On COMMA reduce production defined_infix_formula -> term defined_infix_pred term
-- On AND reduce production defined_infix_formula -> term defined_infix_pred term

State 112:
function_term -> system_term . [ NOT_EQUAL EQUAL ]
system_atomic_formula -> system_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production system_atomic_formula -> system_term
-- On VLINE reduce production system_atomic_formula -> system_term
-- On RIGHT_PAREN reduce production system_atomic_formula -> system_term
-- On RIGHT_BRACKET reduce production system_atomic_formula -> system_term
-- On NOT_EQUAL reduce production function_term -> system_term
-- On NOTVLINE reduce production system_atomic_formula -> system_term
-- On NOTAND reduce production system_atomic_formula -> system_term
-- On LEFT_IMPLY reduce production system_atomic_formula -> system_term
-- On IMPLY reduce production system_atomic_formula -> system_term
-- On EQUIV reduce production system_atomic_formula -> system_term
-- On EQUAL reduce production function_term -> system_term
-- On COMMA reduce production system_atomic_formula -> system_term
-- On AND reduce production system_atomic_formula -> system_term

State 113:
atomic_formula -> system_atomic_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production atomic_formula -> system_atomic_formula
-- On VLINE reduce production atomic_formula -> system_atomic_formula
-- On RIGHT_PAREN reduce production atomic_formula -> system_atomic_formula
-- On RIGHT_BRACKET reduce production atomic_formula -> system_atomic_formula
-- On NOTVLINE reduce production atomic_formula -> system_atomic_formula
-- On NOTAND reduce production atomic_formula -> system_atomic_formula
-- On LEFT_IMPLY reduce production atomic_formula -> system_atomic_formula
-- On IMPLY reduce production atomic_formula -> system_atomic_formula
-- On EQUIV reduce production atomic_formula -> system_atomic_formula
-- On COMMA reduce production atomic_formula -> system_atomic_formula
-- On AND reduce production atomic_formula -> system_atomic_formula

State 114:
function_term -> plain_term . [ NOT_EQUAL EQUAL ]
plain_atomic_formula -> plain_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production plain_atomic_formula -> plain_term
-- On VLINE reduce production plain_atomic_formula -> plain_term
-- On RIGHT_PAREN reduce production plain_atomic_formula -> plain_term
-- On RIGHT_BRACKET reduce production plain_atomic_formula -> plain_term
-- On NOT_EQUAL reduce production function_term -> plain_term
-- On NOTVLINE reduce production plain_atomic_formula -> plain_term
-- On NOTAND reduce production plain_atomic_formula -> plain_term
-- On LEFT_IMPLY reduce production plain_atomic_formula -> plain_term
-- On IMPLY reduce production plain_atomic_formula -> plain_term
-- On EQUIV reduce production plain_atomic_formula -> plain_term
-- On EQUAL reduce production function_term -> plain_term
-- On COMMA reduce production plain_atomic_formula -> plain_term
-- On AND reduce production plain_atomic_formula -> plain_term

State 115:
atomic_formula -> plain_atomic_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production atomic_formula -> plain_atomic_formula
-- On VLINE reduce production atomic_formula -> plain_atomic_formula
-- On RIGHT_PAREN reduce production atomic_formula -> plain_atomic_formula
-- On RIGHT_BRACKET reduce production atomic_formula -> plain_atomic_formula
-- On NOTVLINE reduce production atomic_formula -> plain_atomic_formula
-- On NOTAND reduce production atomic_formula -> plain_atomic_formula
-- On LEFT_IMPLY reduce production atomic_formula -> plain_atomic_formula
-- On IMPLY reduce production atomic_formula -> plain_atomic_formula
-- On EQUIV reduce production atomic_formula -> plain_atomic_formula
-- On COMMA reduce production atomic_formula -> plain_atomic_formula
-- On AND reduce production atomic_formula -> plain_atomic_formula

State 116:
defined_atomic_term -> defined_plain_term . [ NOT_EQUAL EQUAL ]
defined_plain_formula -> defined_plain_term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production defined_plain_formula -> defined_plain_term
-- On VLINE reduce production defined_plain_formula -> defined_plain_term
-- On RIGHT_PAREN reduce production defined_plain_formula -> defined_plain_term
-- On RIGHT_BRACKET reduce production defined_plain_formula -> defined_plain_term
-- On NOT_EQUAL reduce production defined_atomic_term -> defined_plain_term
-- On NOTVLINE reduce production defined_plain_formula -> defined_plain_term
-- On NOTAND reduce production defined_plain_formula -> defined_plain_term
-- On LEFT_IMPLY reduce production defined_plain_formula -> defined_plain_term
-- On IMPLY reduce production defined_plain_formula -> defined_plain_term
-- On EQUIV reduce production defined_plain_formula -> defined_plain_term
-- On EQUAL reduce production defined_atomic_term -> defined_plain_term
-- On COMMA reduce production defined_plain_formula -> defined_plain_term
-- On AND reduce production defined_plain_formula -> defined_plain_term

State 117:
defined_atomic_formula -> defined_plain_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production defined_atomic_formula -> defined_plain_formula
-- On VLINE reduce production defined_atomic_formula -> defined_plain_formula
-- On RIGHT_PAREN reduce production defined_atomic_formula -> defined_plain_formula
-- On RIGHT_BRACKET reduce production defined_atomic_formula -> defined_plain_formula
-- On NOTVLINE reduce production defined_atomic_formula -> defined_plain_formula
-- On NOTAND reduce production defined_atomic_formula -> defined_plain_formula
-- On LEFT_IMPLY reduce production defined_atomic_formula -> defined_plain_formula
-- On IMPLY reduce production defined_atomic_formula -> defined_plain_formula
-- On EQUIV reduce production defined_atomic_formula -> defined_plain_formula
-- On COMMA reduce production defined_atomic_formula -> defined_plain_formula
-- On AND reduce production defined_atomic_formula -> defined_plain_formula

State 118:
defined_atomic_formula -> defined_infix_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production defined_atomic_formula -> defined_infix_formula
-- On VLINE reduce production defined_atomic_formula -> defined_infix_formula
-- On RIGHT_PAREN reduce production defined_atomic_formula -> defined_infix_formula
-- On RIGHT_BRACKET reduce production defined_atomic_formula -> defined_infix_formula
-- On NOTVLINE reduce production defined_atomic_formula -> defined_infix_formula
-- On NOTAND reduce production defined_atomic_formula -> defined_infix_formula
-- On LEFT_IMPLY reduce production defined_atomic_formula -> defined_infix_formula
-- On IMPLY reduce production defined_atomic_formula -> defined_infix_formula
-- On EQUIV reduce production defined_atomic_formula -> defined_infix_formula
-- On COMMA reduce production defined_atomic_formula -> defined_infix_formula
-- On AND reduce production defined_atomic_formula -> defined_infix_formula

State 119:
atomic_formula -> defined_atomic_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production atomic_formula -> defined_atomic_formula
-- On VLINE reduce production atomic_formula -> defined_atomic_formula
-- On RIGHT_PAREN reduce production atomic_formula -> defined_atomic_formula
-- On RIGHT_BRACKET reduce production atomic_formula -> defined_atomic_formula
-- On NOTVLINE reduce production atomic_formula -> defined_atomic_formula
-- On NOTAND reduce production atomic_formula -> defined_atomic_formula
-- On LEFT_IMPLY reduce production atomic_formula -> defined_atomic_formula
-- On IMPLY reduce production atomic_formula -> defined_atomic_formula
-- On EQUIV reduce production atomic_formula -> defined_atomic_formula
-- On COMMA reduce production atomic_formula -> defined_atomic_formula
-- On AND reduce production atomic_formula -> defined_atomic_formula

State 120:
tff_let_formula_binding -> atomic_formula . EQUIV tff_unitary_formula [ RIGHT_PAREN COMMA ]
-- On EQUIV shift to state 121

State 121:
tff_let_formula_binding -> atomic_formula EQUIV . tff_unitary_formula [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 176
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 122:
tff_unitary_formula -> LEFT_PAREN . tff_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 174
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 123:
tff_conditional -> ITE_F . LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On LEFT_PAREN shift to state 124

State 124:
tff_conditional -> ITE_F LEFT_PAREN . tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 162
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 125:
fol_quantifier -> FORALL . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production fol_quantifier -> FORALL

State 126:
fol_quantifier -> EXISTS . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production fol_quantifier -> EXISTS

State 127:
unary_connective -> unary_negation . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY ITE_T ITE_F INTEGER IMPLY FORALL EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production unary_connective -> unary_negation
-- On VLINE reduce production unary_connective -> unary_negation
-- On UPPER_WORD reduce production unary_connective -> unary_negation
-- On STAR reduce production unary_connective -> unary_negation
-- On SINGLE_QUOTED reduce production unary_connective -> unary_negation
-- On RIGHT_PAREN reduce production unary_connective -> unary_negation
-- On RIGHT_BRACKET reduce production unary_connective -> unary_negation
-- On REAL reduce production unary_connective -> unary_negation
-- On RATIONAL reduce production unary_connective -> unary_negation
-- On PLUS reduce production unary_connective -> unary_negation
-- On NOT_EQUAL reduce production unary_connective -> unary_negation
-- On NOTVLINE reduce production unary_connective -> unary_negation
-- On NOTAND reduce production unary_connective -> unary_negation
-- On NOT reduce production unary_connective -> unary_negation
-- On LOWER_WORD reduce production unary_connective -> unary_negation
-- On LET_TT reduce production unary_connective -> unary_negation
-- On LET_TF reduce production unary_connective -> unary_negation
-- On LET_FT reduce production unary_connective -> unary_negation
-- On LET_FF reduce production unary_connective -> unary_negation
-- On LEFT_PAREN reduce production unary_connective -> unary_negation
-- On LEFT_IMPLY reduce production unary_connective -> unary_negation
-- On ITE_T reduce production unary_connective -> unary_negation
-- On ITE_F reduce production unary_connective -> unary_negation
-- On INTEGER reduce production unary_connective -> unary_negation
-- On IMPLY reduce production unary_connective -> unary_negation
-- On FORALL reduce production unary_connective -> unary_negation
-- On EXISTS reduce production unary_connective -> unary_negation
-- On EQUIV reduce production unary_connective -> unary_negation
-- On EQUAL reduce production unary_connective -> unary_negation
-- On DOLLAR_WORD reduce production unary_connective -> unary_negation
-- On DOLLAR_DOLLAR_WORD reduce production unary_connective -> unary_negation
-- On DISTINCT_OBJECT reduce production unary_connective -> unary_negation
-- On COMMA reduce production unary_connective -> unary_negation
-- On COLON reduce production unary_connective -> unary_negation
-- On ARROW reduce production unary_connective -> unary_negation
-- On APPLY reduce production unary_connective -> unary_negation
-- On AND reduce production unary_connective -> unary_negation

State 128:
tff_unary_formula -> unary_connective . tff_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 129
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 129:
tff_unary_formula -> unary_connective tff_unitary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On VLINE reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On RIGHT_PAREN reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On RIGHT_BRACKET reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On NOTVLINE reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On NOTAND reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On LEFT_IMPLY reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On IMPLY reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On EQUIV reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On COMMA reduce production tff_unary_formula -> unary_connective tff_unitary_formula
-- On AND reduce production tff_unary_formula -> unary_connective tff_unitary_formula

State 130:
tff_unitary_formula -> tff_unary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_unitary_formula -> tff_unary_formula
-- On VLINE reduce production tff_unitary_formula -> tff_unary_formula
-- On RIGHT_PAREN reduce production tff_unitary_formula -> tff_unary_formula
-- On RIGHT_BRACKET reduce production tff_unitary_formula -> tff_unary_formula
-- On NOTVLINE reduce production tff_unitary_formula -> tff_unary_formula
-- On NOTAND reduce production tff_unitary_formula -> tff_unary_formula
-- On LEFT_IMPLY reduce production tff_unitary_formula -> tff_unary_formula
-- On IMPLY reduce production tff_unitary_formula -> tff_unary_formula
-- On EQUIV reduce production tff_unitary_formula -> tff_unary_formula
-- On COMMA reduce production tff_unitary_formula -> tff_unary_formula
-- On AND reduce production tff_unitary_formula -> tff_unary_formula

State 131:
tff_unitary_formula -> tff_quantified_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_unitary_formula -> tff_quantified_formula
-- On VLINE reduce production tff_unitary_formula -> tff_quantified_formula
-- On RIGHT_PAREN reduce production tff_unitary_formula -> tff_quantified_formula
-- On RIGHT_BRACKET reduce production tff_unitary_formula -> tff_quantified_formula
-- On NOTVLINE reduce production tff_unitary_formula -> tff_quantified_formula
-- On NOTAND reduce production tff_unitary_formula -> tff_quantified_formula
-- On LEFT_IMPLY reduce production tff_unitary_formula -> tff_quantified_formula
-- On IMPLY reduce production tff_unitary_formula -> tff_quantified_formula
-- On EQUIV reduce production tff_unitary_formula -> tff_quantified_formula
-- On COMMA reduce production tff_unitary_formula -> tff_quantified_formula
-- On AND reduce production tff_unitary_formula -> tff_quantified_formula

State 132:
tff_unitary_formula -> tff_let . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_unitary_formula -> tff_let
-- On VLINE reduce production tff_unitary_formula -> tff_let
-- On RIGHT_PAREN reduce production tff_unitary_formula -> tff_let
-- On RIGHT_BRACKET reduce production tff_unitary_formula -> tff_let
-- On NOTVLINE reduce production tff_unitary_formula -> tff_let
-- On NOTAND reduce production tff_unitary_formula -> tff_let
-- On LEFT_IMPLY reduce production tff_unitary_formula -> tff_let
-- On IMPLY reduce production tff_unitary_formula -> tff_let
-- On EQUIV reduce production tff_unitary_formula -> tff_let
-- On COMMA reduce production tff_unitary_formula -> tff_let
-- On AND reduce production tff_unitary_formula -> tff_let

State 133:
tff_unitary_formula -> tff_conditional . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_unitary_formula -> tff_conditional
-- On VLINE reduce production tff_unitary_formula -> tff_conditional
-- On RIGHT_PAREN reduce production tff_unitary_formula -> tff_conditional
-- On RIGHT_BRACKET reduce production tff_unitary_formula -> tff_conditional
-- On NOTVLINE reduce production tff_unitary_formula -> tff_conditional
-- On NOTAND reduce production tff_unitary_formula -> tff_conditional
-- On LEFT_IMPLY reduce production tff_unitary_formula -> tff_conditional
-- On IMPLY reduce production tff_unitary_formula -> tff_conditional
-- On EQUIV reduce production tff_unitary_formula -> tff_conditional
-- On COMMA reduce production tff_unitary_formula -> tff_conditional
-- On AND reduce production tff_unitary_formula -> tff_conditional

State 134:
defined_infix_formula -> term . defined_infix_pred term [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
fol_infix_unary -> term . infix_inequality term [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On NOT_EQUAL shift to state 135
-- On EQUAL shift to state 108
-- On infix_inequality shift to state 136
-- On infix_equality shift to state 109
-- On defined_infix_pred shift to state 110

State 135:
infix_inequality -> NOT_EQUAL . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production infix_inequality -> NOT_EQUAL
-- On VLINE reduce production infix_inequality -> NOT_EQUAL
-- On UPPER_WORD reduce production infix_inequality -> NOT_EQUAL
-- On STAR reduce production infix_inequality -> NOT_EQUAL
-- On SINGLE_QUOTED reduce production infix_inequality -> NOT_EQUAL
-- On SIGMA reduce production infix_inequality -> NOT_EQUAL
-- On RIGHT_PAREN reduce production infix_inequality -> NOT_EQUAL
-- On RIGHT_BRACKET reduce production infix_inequality -> NOT_EQUAL
-- On REAL reduce production infix_inequality -> NOT_EQUAL
-- On RATIONAL reduce production infix_inequality -> NOT_EQUAL
-- On PLUS reduce production infix_inequality -> NOT_EQUAL
-- On PI reduce production infix_inequality -> NOT_EQUAL
-- On NOT_EQUAL reduce production infix_inequality -> NOT_EQUAL
-- On NOTVLINE reduce production infix_inequality -> NOT_EQUAL
-- On NOTAND reduce production infix_inequality -> NOT_EQUAL
-- On NOT reduce production infix_inequality -> NOT_EQUAL
-- On LOWER_WORD reduce production infix_inequality -> NOT_EQUAL
-- On LET_TT reduce production infix_inequality -> NOT_EQUAL
-- On LET_TF reduce production infix_inequality -> NOT_EQUAL
-- On LET_FT reduce production infix_inequality -> NOT_EQUAL
-- On LET_FF reduce production infix_inequality -> NOT_EQUAL
-- On LEFT_PAREN reduce production infix_inequality -> NOT_EQUAL
-- On LEFT_IMPLY reduce production infix_inequality -> NOT_EQUAL
-- On LAMBDA reduce production infix_inequality -> NOT_EQUAL
-- On ITE_T reduce production infix_inequality -> NOT_EQUAL
-- On ITE_F reduce production infix_inequality -> NOT_EQUAL
-- On INTEGER reduce production infix_inequality -> NOT_EQUAL
-- On INDEFINITE_DESCRIPTION reduce production infix_inequality -> NOT_EQUAL
-- On IMPLY reduce production infix_inequality -> NOT_EQUAL
-- On FORALL_TY reduce production infix_inequality -> NOT_EQUAL
-- On FORALL reduce production infix_inequality -> NOT_EQUAL
-- On EXISTS_TY reduce production infix_inequality -> NOT_EQUAL
-- On EXISTS reduce production infix_inequality -> NOT_EQUAL
-- On EQUIV reduce production infix_inequality -> NOT_EQUAL
-- On EQUAL reduce production infix_inequality -> NOT_EQUAL
-- On DOLLAR_WORD reduce production infix_inequality -> NOT_EQUAL
-- On DOLLAR_DOLLAR_WORD reduce production infix_inequality -> NOT_EQUAL
-- On DISTINCT_OBJECT reduce production infix_inequality -> NOT_EQUAL
-- On DEFINITE_DESCRIPTION reduce production infix_inequality -> NOT_EQUAL
-- On COMMA reduce production infix_inequality -> NOT_EQUAL
-- On COLON reduce production infix_inequality -> NOT_EQUAL
-- On ARROW reduce production infix_inequality -> NOT_EQUAL
-- On APPLY reduce production infix_inequality -> NOT_EQUAL
-- On AND reduce production infix_inequality -> NOT_EQUAL

State 136:
fol_infix_unary -> term infix_inequality . term [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 137
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 137:
fol_infix_unary -> term infix_inequality term . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production fol_infix_unary -> term infix_inequality term
-- On VLINE reduce production fol_infix_unary -> term infix_inequality term
-- On RIGHT_PAREN reduce production fol_infix_unary -> term infix_inequality term
-- On RIGHT_BRACKET reduce production fol_infix_unary -> term infix_inequality term
-- On NOTVLINE reduce production fol_infix_unary -> term infix_inequality term
-- On NOTAND reduce production fol_infix_unary -> term infix_inequality term
-- On LEFT_IMPLY reduce production fol_infix_unary -> term infix_inequality term
-- On IMPLY reduce production fol_infix_unary -> term infix_inequality term
-- On EQUIV reduce production fol_infix_unary -> term infix_inequality term
-- On COMMA reduce production fol_infix_unary -> term infix_inequality term
-- On AND reduce production fol_infix_unary -> term infix_inequality term

State 138:
tff_quantified_formula -> fol_quantifier . LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On LEFT_BRACKET shift to state 139

State 139:
tff_quantified_formula -> fol_quantifier LEFT_BRACKET . tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On variable shift to state 74
-- On tff_variable_list shift to state 140
-- On tff_variable shift to state 92
-- On tff_typed_variable shift to state 95

State 140:
tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list . RIGHT_BRACKET COLON tff_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On RIGHT_BRACKET shift to state 141

State 141:
tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET . COLON tff_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On COLON shift to state 142

State 142:
tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON . tff_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 143
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 143:
tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On VLINE reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On RIGHT_PAREN reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On RIGHT_BRACKET reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On NOTVLINE reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On NOTAND reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On LEFT_IMPLY reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On IMPLY reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On EQUIV reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On COMMA reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula
-- On AND reduce production tff_quantified_formula -> fol_quantifier LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_unitary_formula

State 144:
tff_unary_formula -> fol_infix_unary . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_unary_formula -> fol_infix_unary
-- On VLINE reduce production tff_unary_formula -> fol_infix_unary
-- On RIGHT_PAREN reduce production tff_unary_formula -> fol_infix_unary
-- On RIGHT_BRACKET reduce production tff_unary_formula -> fol_infix_unary
-- On NOTVLINE reduce production tff_unary_formula -> fol_infix_unary
-- On NOTAND reduce production tff_unary_formula -> fol_infix_unary
-- On LEFT_IMPLY reduce production tff_unary_formula -> fol_infix_unary
-- On IMPLY reduce production tff_unary_formula -> fol_infix_unary
-- On EQUIV reduce production tff_unary_formula -> fol_infix_unary
-- On COMMA reduce production tff_unary_formula -> fol_infix_unary
-- On AND reduce production tff_unary_formula -> fol_infix_unary

State 145:
tff_unitary_formula -> atomic_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_unitary_formula -> atomic_formula
-- On VLINE reduce production tff_unitary_formula -> atomic_formula
-- On RIGHT_PAREN reduce production tff_unitary_formula -> atomic_formula
-- On RIGHT_BRACKET reduce production tff_unitary_formula -> atomic_formula
-- On NOTVLINE reduce production tff_unitary_formula -> atomic_formula
-- On NOTAND reduce production tff_unitary_formula -> atomic_formula
-- On LEFT_IMPLY reduce production tff_unitary_formula -> atomic_formula
-- On IMPLY reduce production tff_unitary_formula -> atomic_formula
-- On EQUIV reduce production tff_unitary_formula -> atomic_formula
-- On COMMA reduce production tff_unitary_formula -> atomic_formula
-- On AND reduce production tff_unitary_formula -> atomic_formula

State 146:
tff_and_formula -> tff_unitary_formula . AND tff_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
tff_binary_nonassoc -> tff_unitary_formula . binary_connective tff_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
tff_logic_formula -> tff_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
tff_or_formula -> tff_unitary_formula . VLINE tff_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 148
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On LEFT_IMPLY shift to state 152
-- On IMPLY shift to state 153
-- On EQUIV shift to state 154
-- On AND shift to state 155
-- On binary_connective shift to state 157
-- On RIGHT_PAREN reduce production tff_logic_formula -> tff_unitary_formula
-- On RIGHT_BRACKET reduce production tff_logic_formula -> tff_unitary_formula
-- On COMMA reduce production tff_logic_formula -> tff_unitary_formula

State 147:
binary_connective -> XOR . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production binary_connective -> XOR
-- On VLINE reduce production binary_connective -> XOR
-- On UPPER_WORD reduce production binary_connective -> XOR
-- On STAR reduce production binary_connective -> XOR
-- On SINGLE_QUOTED reduce production binary_connective -> XOR
-- On SIGMA reduce production binary_connective -> XOR
-- On RIGHT_PAREN reduce production binary_connective -> XOR
-- On RIGHT_BRACKET reduce production binary_connective -> XOR
-- On REAL reduce production binary_connective -> XOR
-- On RATIONAL reduce production binary_connective -> XOR
-- On PLUS reduce production binary_connective -> XOR
-- On PI reduce production binary_connective -> XOR
-- On NOT_EQUAL reduce production binary_connective -> XOR
-- On NOTVLINE reduce production binary_connective -> XOR
-- On NOTAND reduce production binary_connective -> XOR
-- On NOT reduce production binary_connective -> XOR
-- On LOWER_WORD reduce production binary_connective -> XOR
-- On LET_TT reduce production binary_connective -> XOR
-- On LET_TF reduce production binary_connective -> XOR
-- On LET_FT reduce production binary_connective -> XOR
-- On LET_FF reduce production binary_connective -> XOR
-- On LEFT_PAREN reduce production binary_connective -> XOR
-- On LEFT_IMPLY reduce production binary_connective -> XOR
-- On LAMBDA reduce production binary_connective -> XOR
-- On ITE_T reduce production binary_connective -> XOR
-- On ITE_F reduce production binary_connective -> XOR
-- On INTEGER reduce production binary_connective -> XOR
-- On INDEFINITE_DESCRIPTION reduce production binary_connective -> XOR
-- On IMPLY reduce production binary_connective -> XOR
-- On FORALL_TY reduce production binary_connective -> XOR
-- On FORALL reduce production binary_connective -> XOR
-- On EXISTS_TY reduce production binary_connective -> XOR
-- On EXISTS reduce production binary_connective -> XOR
-- On EQUIV reduce production binary_connective -> XOR
-- On EQUAL reduce production binary_connective -> XOR
-- On DOLLAR_WORD reduce production binary_connective -> XOR
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> XOR
-- On DISTINCT_OBJECT reduce production binary_connective -> XOR
-- On DEFINITE_DESCRIPTION reduce production binary_connective -> XOR
-- On COMMA reduce production binary_connective -> XOR
-- On COLON reduce production binary_connective -> XOR
-- On ARROW reduce production binary_connective -> XOR
-- On APPLY reduce production binary_connective -> XOR
-- On AND reduce production binary_connective -> XOR

State 148:
tff_or_formula -> tff_unitary_formula VLINE . tff_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 149
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 149:
tff_or_formula -> tff_unitary_formula VLINE tff_unitary_formula . [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On VLINE reduce production tff_or_formula -> tff_unitary_formula VLINE tff_unitary_formula
-- On RIGHT_PAREN reduce production tff_or_formula -> tff_unitary_formula VLINE tff_unitary_formula
-- On RIGHT_BRACKET reduce production tff_or_formula -> tff_unitary_formula VLINE tff_unitary_formula
-- On COMMA reduce production tff_or_formula -> tff_unitary_formula VLINE tff_unitary_formula

State 150:
binary_connective -> NOTVLINE . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production binary_connective -> NOTVLINE
-- On VLINE reduce production binary_connective -> NOTVLINE
-- On UPPER_WORD reduce production binary_connective -> NOTVLINE
-- On STAR reduce production binary_connective -> NOTVLINE
-- On SINGLE_QUOTED reduce production binary_connective -> NOTVLINE
-- On SIGMA reduce production binary_connective -> NOTVLINE
-- On RIGHT_PAREN reduce production binary_connective -> NOTVLINE
-- On RIGHT_BRACKET reduce production binary_connective -> NOTVLINE
-- On REAL reduce production binary_connective -> NOTVLINE
-- On RATIONAL reduce production binary_connective -> NOTVLINE
-- On PLUS reduce production binary_connective -> NOTVLINE
-- On PI reduce production binary_connective -> NOTVLINE
-- On NOT_EQUAL reduce production binary_connective -> NOTVLINE
-- On NOTVLINE reduce production binary_connective -> NOTVLINE
-- On NOTAND reduce production binary_connective -> NOTVLINE
-- On NOT reduce production binary_connective -> NOTVLINE
-- On LOWER_WORD reduce production binary_connective -> NOTVLINE
-- On LET_TT reduce production binary_connective -> NOTVLINE
-- On LET_TF reduce production binary_connective -> NOTVLINE
-- On LET_FT reduce production binary_connective -> NOTVLINE
-- On LET_FF reduce production binary_connective -> NOTVLINE
-- On LEFT_PAREN reduce production binary_connective -> NOTVLINE
-- On LEFT_IMPLY reduce production binary_connective -> NOTVLINE
-- On LAMBDA reduce production binary_connective -> NOTVLINE
-- On ITE_T reduce production binary_connective -> NOTVLINE
-- On ITE_F reduce production binary_connective -> NOTVLINE
-- On INTEGER reduce production binary_connective -> NOTVLINE
-- On INDEFINITE_DESCRIPTION reduce production binary_connective -> NOTVLINE
-- On IMPLY reduce production binary_connective -> NOTVLINE
-- On FORALL_TY reduce production binary_connective -> NOTVLINE
-- On FORALL reduce production binary_connective -> NOTVLINE
-- On EXISTS_TY reduce production binary_connective -> NOTVLINE
-- On EXISTS reduce production binary_connective -> NOTVLINE
-- On EQUIV reduce production binary_connective -> NOTVLINE
-- On EQUAL reduce production binary_connective -> NOTVLINE
-- On DOLLAR_WORD reduce production binary_connective -> NOTVLINE
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> NOTVLINE
-- On DISTINCT_OBJECT reduce production binary_connective -> NOTVLINE
-- On DEFINITE_DESCRIPTION reduce production binary_connective -> NOTVLINE
-- On COMMA reduce production binary_connective -> NOTVLINE
-- On COLON reduce production binary_connective -> NOTVLINE
-- On ARROW reduce production binary_connective -> NOTVLINE
-- On APPLY reduce production binary_connective -> NOTVLINE
-- On AND reduce production binary_connective -> NOTVLINE

State 151:
binary_connective -> NOTAND . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production binary_connective -> NOTAND
-- On VLINE reduce production binary_connective -> NOTAND
-- On UPPER_WORD reduce production binary_connective -> NOTAND
-- On STAR reduce production binary_connective -> NOTAND
-- On SINGLE_QUOTED reduce production binary_connective -> NOTAND
-- On SIGMA reduce production binary_connective -> NOTAND
-- On RIGHT_PAREN reduce production binary_connective -> NOTAND
-- On RIGHT_BRACKET reduce production binary_connective -> NOTAND
-- On REAL reduce production binary_connective -> NOTAND
-- On RATIONAL reduce production binary_connective -> NOTAND
-- On PLUS reduce production binary_connective -> NOTAND
-- On PI reduce production binary_connective -> NOTAND
-- On NOT_EQUAL reduce production binary_connective -> NOTAND
-- On NOTVLINE reduce production binary_connective -> NOTAND
-- On NOTAND reduce production binary_connective -> NOTAND
-- On NOT reduce production binary_connective -> NOTAND
-- On LOWER_WORD reduce production binary_connective -> NOTAND
-- On LET_TT reduce production binary_connective -> NOTAND
-- On LET_TF reduce production binary_connective -> NOTAND
-- On LET_FT reduce production binary_connective -> NOTAND
-- On LET_FF reduce production binary_connective -> NOTAND
-- On LEFT_PAREN reduce production binary_connective -> NOTAND
-- On LEFT_IMPLY reduce production binary_connective -> NOTAND
-- On LAMBDA reduce production binary_connective -> NOTAND
-- On ITE_T reduce production binary_connective -> NOTAND
-- On ITE_F reduce production binary_connective -> NOTAND
-- On INTEGER reduce production binary_connective -> NOTAND
-- On INDEFINITE_DESCRIPTION reduce production binary_connective -> NOTAND
-- On IMPLY reduce production binary_connective -> NOTAND
-- On FORALL_TY reduce production binary_connective -> NOTAND
-- On FORALL reduce production binary_connective -> NOTAND
-- On EXISTS_TY reduce production binary_connective -> NOTAND
-- On EXISTS reduce production binary_connective -> NOTAND
-- On EQUIV reduce production binary_connective -> NOTAND
-- On EQUAL reduce production binary_connective -> NOTAND
-- On DOLLAR_WORD reduce production binary_connective -> NOTAND
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> NOTAND
-- On DISTINCT_OBJECT reduce production binary_connective -> NOTAND
-- On DEFINITE_DESCRIPTION reduce production binary_connective -> NOTAND
-- On COMMA reduce production binary_connective -> NOTAND
-- On COLON reduce production binary_connective -> NOTAND
-- On ARROW reduce production binary_connective -> NOTAND
-- On APPLY reduce production binary_connective -> NOTAND
-- On AND reduce production binary_connective -> NOTAND

State 152:
binary_connective -> LEFT_IMPLY . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production binary_connective -> LEFT_IMPLY
-- On VLINE reduce production binary_connective -> LEFT_IMPLY
-- On UPPER_WORD reduce production binary_connective -> LEFT_IMPLY
-- On STAR reduce production binary_connective -> LEFT_IMPLY
-- On SINGLE_QUOTED reduce production binary_connective -> LEFT_IMPLY
-- On SIGMA reduce production binary_connective -> LEFT_IMPLY
-- On RIGHT_PAREN reduce production binary_connective -> LEFT_IMPLY
-- On RIGHT_BRACKET reduce production binary_connective -> LEFT_IMPLY
-- On REAL reduce production binary_connective -> LEFT_IMPLY
-- On RATIONAL reduce production binary_connective -> LEFT_IMPLY
-- On PLUS reduce production binary_connective -> LEFT_IMPLY
-- On PI reduce production binary_connective -> LEFT_IMPLY
-- On NOT_EQUAL reduce production binary_connective -> LEFT_IMPLY
-- On NOTVLINE reduce production binary_connective -> LEFT_IMPLY
-- On NOTAND reduce production binary_connective -> LEFT_IMPLY
-- On NOT reduce production binary_connective -> LEFT_IMPLY
-- On LOWER_WORD reduce production binary_connective -> LEFT_IMPLY
-- On LET_TT reduce production binary_connective -> LEFT_IMPLY
-- On LET_TF reduce production binary_connective -> LEFT_IMPLY
-- On LET_FT reduce production binary_connective -> LEFT_IMPLY
-- On LET_FF reduce production binary_connective -> LEFT_IMPLY
-- On LEFT_PAREN reduce production binary_connective -> LEFT_IMPLY
-- On LEFT_IMPLY reduce production binary_connective -> LEFT_IMPLY
-- On LAMBDA reduce production binary_connective -> LEFT_IMPLY
-- On ITE_T reduce production binary_connective -> LEFT_IMPLY
-- On ITE_F reduce production binary_connective -> LEFT_IMPLY
-- On INTEGER reduce production binary_connective -> LEFT_IMPLY
-- On INDEFINITE_DESCRIPTION reduce production binary_connective -> LEFT_IMPLY
-- On IMPLY reduce production binary_connective -> LEFT_IMPLY
-- On FORALL_TY reduce production binary_connective -> LEFT_IMPLY
-- On FORALL reduce production binary_connective -> LEFT_IMPLY
-- On EXISTS_TY reduce production binary_connective -> LEFT_IMPLY
-- On EXISTS reduce production binary_connective -> LEFT_IMPLY
-- On EQUIV reduce production binary_connective -> LEFT_IMPLY
-- On EQUAL reduce production binary_connective -> LEFT_IMPLY
-- On DOLLAR_WORD reduce production binary_connective -> LEFT_IMPLY
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> LEFT_IMPLY
-- On DISTINCT_OBJECT reduce production binary_connective -> LEFT_IMPLY
-- On DEFINITE_DESCRIPTION reduce production binary_connective -> LEFT_IMPLY
-- On COMMA reduce production binary_connective -> LEFT_IMPLY
-- On COLON reduce production binary_connective -> LEFT_IMPLY
-- On ARROW reduce production binary_connective -> LEFT_IMPLY
-- On APPLY reduce production binary_connective -> LEFT_IMPLY
-- On AND reduce production binary_connective -> LEFT_IMPLY

State 153:
binary_connective -> IMPLY . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production binary_connective -> IMPLY
-- On VLINE reduce production binary_connective -> IMPLY
-- On UPPER_WORD reduce production binary_connective -> IMPLY
-- On STAR reduce production binary_connective -> IMPLY
-- On SINGLE_QUOTED reduce production binary_connective -> IMPLY
-- On SIGMA reduce production binary_connective -> IMPLY
-- On RIGHT_PAREN reduce production binary_connective -> IMPLY
-- On RIGHT_BRACKET reduce production binary_connective -> IMPLY
-- On REAL reduce production binary_connective -> IMPLY
-- On RATIONAL reduce production binary_connective -> IMPLY
-- On PLUS reduce production binary_connective -> IMPLY
-- On PI reduce production binary_connective -> IMPLY
-- On NOT_EQUAL reduce production binary_connective -> IMPLY
-- On NOTVLINE reduce production binary_connective -> IMPLY
-- On NOTAND reduce production binary_connective -> IMPLY
-- On NOT reduce production binary_connective -> IMPLY
-- On LOWER_WORD reduce production binary_connective -> IMPLY
-- On LET_TT reduce production binary_connective -> IMPLY
-- On LET_TF reduce production binary_connective -> IMPLY
-- On LET_FT reduce production binary_connective -> IMPLY
-- On LET_FF reduce production binary_connective -> IMPLY
-- On LEFT_PAREN reduce production binary_connective -> IMPLY
-- On LEFT_IMPLY reduce production binary_connective -> IMPLY
-- On LAMBDA reduce production binary_connective -> IMPLY
-- On ITE_T reduce production binary_connective -> IMPLY
-- On ITE_F reduce production binary_connective -> IMPLY
-- On INTEGER reduce production binary_connective -> IMPLY
-- On INDEFINITE_DESCRIPTION reduce production binary_connective -> IMPLY
-- On IMPLY reduce production binary_connective -> IMPLY
-- On FORALL_TY reduce production binary_connective -> IMPLY
-- On FORALL reduce production binary_connective -> IMPLY
-- On EXISTS_TY reduce production binary_connective -> IMPLY
-- On EXISTS reduce production binary_connective -> IMPLY
-- On EQUIV reduce production binary_connective -> IMPLY
-- On EQUAL reduce production binary_connective -> IMPLY
-- On DOLLAR_WORD reduce production binary_connective -> IMPLY
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> IMPLY
-- On DISTINCT_OBJECT reduce production binary_connective -> IMPLY
-- On DEFINITE_DESCRIPTION reduce production binary_connective -> IMPLY
-- On COMMA reduce production binary_connective -> IMPLY
-- On COLON reduce production binary_connective -> IMPLY
-- On ARROW reduce production binary_connective -> IMPLY
-- On APPLY reduce production binary_connective -> IMPLY
-- On AND reduce production binary_connective -> IMPLY

State 154:
binary_connective -> EQUIV . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production binary_connective -> EQUIV
-- On VLINE reduce production binary_connective -> EQUIV
-- On UPPER_WORD reduce production binary_connective -> EQUIV
-- On STAR reduce production binary_connective -> EQUIV
-- On SINGLE_QUOTED reduce production binary_connective -> EQUIV
-- On SIGMA reduce production binary_connective -> EQUIV
-- On RIGHT_PAREN reduce production binary_connective -> EQUIV
-- On RIGHT_BRACKET reduce production binary_connective -> EQUIV
-- On REAL reduce production binary_connective -> EQUIV
-- On RATIONAL reduce production binary_connective -> EQUIV
-- On PLUS reduce production binary_connective -> EQUIV
-- On PI reduce production binary_connective -> EQUIV
-- On NOT_EQUAL reduce production binary_connective -> EQUIV
-- On NOTVLINE reduce production binary_connective -> EQUIV
-- On NOTAND reduce production binary_connective -> EQUIV
-- On NOT reduce production binary_connective -> EQUIV
-- On LOWER_WORD reduce production binary_connective -> EQUIV
-- On LET_TT reduce production binary_connective -> EQUIV
-- On LET_TF reduce production binary_connective -> EQUIV
-- On LET_FT reduce production binary_connective -> EQUIV
-- On LET_FF reduce production binary_connective -> EQUIV
-- On LEFT_PAREN reduce production binary_connective -> EQUIV
-- On LEFT_IMPLY reduce production binary_connective -> EQUIV
-- On LAMBDA reduce production binary_connective -> EQUIV
-- On ITE_T reduce production binary_connective -> EQUIV
-- On ITE_F reduce production binary_connective -> EQUIV
-- On INTEGER reduce production binary_connective -> EQUIV
-- On INDEFINITE_DESCRIPTION reduce production binary_connective -> EQUIV
-- On IMPLY reduce production binary_connective -> EQUIV
-- On FORALL_TY reduce production binary_connective -> EQUIV
-- On FORALL reduce production binary_connective -> EQUIV
-- On EXISTS_TY reduce production binary_connective -> EQUIV
-- On EXISTS reduce production binary_connective -> EQUIV
-- On EQUIV reduce production binary_connective -> EQUIV
-- On EQUAL reduce production binary_connective -> EQUIV
-- On DOLLAR_WORD reduce production binary_connective -> EQUIV
-- On DOLLAR_DOLLAR_WORD reduce production binary_connective -> EQUIV
-- On DISTINCT_OBJECT reduce production binary_connective -> EQUIV
-- On DEFINITE_DESCRIPTION reduce production binary_connective -> EQUIV
-- On COMMA reduce production binary_connective -> EQUIV
-- On COLON reduce production binary_connective -> EQUIV
-- On ARROW reduce production binary_connective -> EQUIV
-- On APPLY reduce production binary_connective -> EQUIV
-- On AND reduce production binary_connective -> EQUIV

State 155:
tff_and_formula -> tff_unitary_formula AND . tff_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 156
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 156:
tff_and_formula -> tff_unitary_formula AND tff_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On RIGHT_PAREN reduce production tff_and_formula -> tff_unitary_formula AND tff_unitary_formula
-- On RIGHT_BRACKET reduce production tff_and_formula -> tff_unitary_formula AND tff_unitary_formula
-- On COMMA reduce production tff_and_formula -> tff_unitary_formula AND tff_unitary_formula
-- On AND reduce production tff_and_formula -> tff_unitary_formula AND tff_unitary_formula

State 157:
tff_binary_nonassoc -> tff_unitary_formula binary_connective . tff_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 158
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 158:
tff_binary_nonassoc -> tff_unitary_formula binary_connective tff_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production tff_binary_nonassoc -> tff_unitary_formula binary_connective tff_unitary_formula
-- On RIGHT_BRACKET reduce production tff_binary_nonassoc -> tff_unitary_formula binary_connective tff_unitary_formula
-- On COMMA reduce production tff_binary_nonassoc -> tff_unitary_formula binary_connective tff_unitary_formula

State 159:
tff_binary_assoc -> tff_or_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
tff_or_formula -> tff_or_formula . VLINE tff_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On VLINE shift to state 160
-- On RIGHT_PAREN reduce production tff_binary_assoc -> tff_or_formula
-- On RIGHT_BRACKET reduce production tff_binary_assoc -> tff_or_formula
-- On COMMA reduce production tff_binary_assoc -> tff_or_formula

State 160:
tff_or_formula -> tff_or_formula VLINE . tff_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 161
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 161:
tff_or_formula -> tff_or_formula VLINE tff_unitary_formula . [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On VLINE reduce production tff_or_formula -> tff_or_formula VLINE tff_unitary_formula
-- On RIGHT_PAREN reduce production tff_or_formula -> tff_or_formula VLINE tff_unitary_formula
-- On RIGHT_BRACKET reduce production tff_or_formula -> tff_or_formula VLINE tff_unitary_formula
-- On COMMA reduce production tff_or_formula -> tff_or_formula VLINE tff_unitary_formula

State 162:
tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula . COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On COMMA shift to state 163

State 163:
tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA . tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 164
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 164:
tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula . COMMA tff_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On COMMA shift to state 165

State 165:
tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA . tff_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 166
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 166:
tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On RIGHT_PAREN shift to state 167

State 167:
tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On VLINE reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On NOTVLINE reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On NOTAND reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On IMPLY reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On EQUIV reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On COMMA reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN
-- On AND reduce production tff_conditional -> ITE_F LEFT_PAREN tff_logic_formula COMMA tff_logic_formula COMMA tff_logic_formula RIGHT_PAREN

State 168:
tff_binary_formula -> tff_binary_nonassoc . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production tff_binary_formula -> tff_binary_nonassoc
-- On RIGHT_BRACKET reduce production tff_binary_formula -> tff_binary_nonassoc
-- On COMMA reduce production tff_binary_formula -> tff_binary_nonassoc

State 169:
tff_logic_formula -> tff_binary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production tff_logic_formula -> tff_binary_formula
-- On RIGHT_BRACKET reduce production tff_logic_formula -> tff_binary_formula
-- On COMMA reduce production tff_logic_formula -> tff_binary_formula

State 170:
tff_binary_formula -> tff_binary_assoc . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production tff_binary_formula -> tff_binary_assoc
-- On RIGHT_BRACKET reduce production tff_binary_formula -> tff_binary_assoc
-- On COMMA reduce production tff_binary_formula -> tff_binary_assoc

State 171:
tff_and_formula -> tff_and_formula . AND tff_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
tff_binary_assoc -> tff_and_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On AND shift to state 172
-- On RIGHT_PAREN reduce production tff_binary_assoc -> tff_and_formula
-- On RIGHT_BRACKET reduce production tff_binary_assoc -> tff_and_formula
-- On COMMA reduce production tff_binary_assoc -> tff_and_formula

State 172:
tff_and_formula -> tff_and_formula AND . tff_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 173
-- On tff_unary_formula shift to state 130
-- On tff_quantified_formula shift to state 131
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 173:
tff_and_formula -> tff_and_formula AND tff_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On RIGHT_PAREN reduce production tff_and_formula -> tff_and_formula AND tff_unitary_formula
-- On RIGHT_BRACKET reduce production tff_and_formula -> tff_and_formula AND tff_unitary_formula
-- On COMMA reduce production tff_and_formula -> tff_and_formula AND tff_unitary_formula
-- On AND reduce production tff_and_formula -> tff_and_formula AND tff_unitary_formula

State 174:
tff_unitary_formula -> LEFT_PAREN tff_logic_formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On RIGHT_PAREN shift to state 175

State 175:
tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On VLINE reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On NOTVLINE reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On NOTAND reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On IMPLY reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On EQUIV reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On COMMA reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN
-- On AND reduce production tff_unitary_formula -> LEFT_PAREN tff_logic_formula RIGHT_PAREN

State 176:
tff_let_formula_binding -> atomic_formula EQUIV tff_unitary_formula . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_let_formula_binding -> atomic_formula EQUIV tff_unitary_formula
-- On COMMA reduce production tff_let_formula_binding -> atomic_formula EQUIV tff_unitary_formula

State 177:
tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn . COMMA tff_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On COMMA shift to state 178

State 178:
tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA . tff_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 179
-- On LEFT_BRACKET shift to state 180
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 187
-- On tff_untyped_atom shift to state 188
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_typed_atom shift to state 228
-- On tff_tuple shift to state 222
-- On tff_sequent shift to state 229
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 230
-- On tff_let shift to state 132
-- On tff_formula shift to state 231
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 227
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 179:
tff_sequent -> LEFT_PAREN . tff_sequent RIGHT_PAREN [ RIGHT_PAREN COMMA ]
tff_typed_atom -> LEFT_PAREN . tff_typed_atom RIGHT_PAREN [ RIGHT_PAREN COMMA ]
tff_unitary_formula -> LEFT_PAREN . tff_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 179
-- On LEFT_BRACKET shift to state 180
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 187
-- On tff_untyped_atom shift to state 188
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_typed_atom shift to state 220
-- On tff_tuple shift to state 222
-- On tff_sequent shift to state 225
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 174
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 227
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 180:
tff_tuple -> LEFT_BRACKET . RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
tff_tuple -> LEFT_BRACKET . tff_tuple_list RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On RIGHT_BRACKET shift to state 181
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_tuple_list shift to state 182
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 184
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 181:
tff_tuple -> LEFT_BRACKET RIGHT_BRACKET . [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On RIGHT_PAREN reduce production tff_tuple -> LEFT_BRACKET RIGHT_BRACKET
-- On GENTZEN_ARROW reduce production tff_tuple -> LEFT_BRACKET RIGHT_BRACKET
-- On COMMA reduce production tff_tuple -> LEFT_BRACKET RIGHT_BRACKET

State 182:
tff_tuple -> LEFT_BRACKET tff_tuple_list . RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On RIGHT_BRACKET shift to state 183

State 183:
tff_tuple -> LEFT_BRACKET tff_tuple_list RIGHT_BRACKET . [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On RIGHT_PAREN reduce production tff_tuple -> LEFT_BRACKET tff_tuple_list RIGHT_BRACKET
-- On GENTZEN_ARROW reduce production tff_tuple -> LEFT_BRACKET tff_tuple_list RIGHT_BRACKET
-- On COMMA reduce production tff_tuple -> LEFT_BRACKET tff_tuple_list RIGHT_BRACKET

State 184:
tff_tuple_list -> tff_logic_formula . [ RIGHT_BRACKET ]
tff_tuple_list -> tff_logic_formula . COMMA tff_tuple_list [ RIGHT_BRACKET ]
-- On COMMA shift to state 185
-- On RIGHT_BRACKET reduce production tff_tuple_list -> tff_logic_formula

State 185:
tff_tuple_list -> tff_logic_formula COMMA . tff_tuple_list [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 122
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 32
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_tuple_list shift to state 186
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 184
-- On tff_let shift to state 132
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 186:
tff_tuple_list -> tff_logic_formula COMMA tff_tuple_list . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production tff_tuple_list -> tff_logic_formula COMMA tff_tuple_list

State 187:
constant -> tptp_functor . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
plain_term -> tptp_functor . LEFT_PAREN arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
tff_untyped_atom -> tptp_functor . [ COLON ]
-- On LEFT_PAREN shift to state 33
-- On XOR reduce production constant -> tptp_functor
-- On VLINE reduce production constant -> tptp_functor
-- On RIGHT_PAREN reduce production constant -> tptp_functor
-- On NOT_EQUAL reduce production constant -> tptp_functor
-- On NOTVLINE reduce production constant -> tptp_functor
-- On NOTAND reduce production constant -> tptp_functor
-- On LEFT_IMPLY reduce production constant -> tptp_functor
-- On IMPLY reduce production constant -> tptp_functor
-- On EQUIV reduce production constant -> tptp_functor
-- On EQUAL reduce production constant -> tptp_functor
-- On COMMA reduce production constant -> tptp_functor
-- On COLON reduce production tff_untyped_atom -> tptp_functor
-- On AND reduce production constant -> tptp_functor

State 188:
tff_typed_atom -> tff_untyped_atom . COLON tff_top_level_type [ RIGHT_PAREN COMMA ]
-- On COLON shift to state 189

State 189:
tff_typed_atom -> tff_untyped_atom COLON . tff_top_level_type [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On LEFT_PAREN shift to state 190
-- On FORALL_TY shift to state 191
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_unitary_type shift to state 206
-- On tff_top_level_type shift to state 219
-- On tff_quantified_type shift to state 216
-- On tff_mapping_type shift to state 217
-- On tff_atomic_type shift to state 218
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 190:
tff_top_level_type -> LEFT_PAREN . tff_top_level_type RIGHT_PAREN [ RIGHT_PAREN COMMA ]
tff_unitary_type -> LEFT_PAREN . tff_xprod_type RIGHT_PAREN [ STAR ARROW ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On LEFT_PAREN shift to state 190
-- On FORALL_TY shift to state 191
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_xprod_type shift to state 198
-- On tff_unitary_type shift to state 213
-- On tff_top_level_type shift to state 214
-- On tff_quantified_type shift to state 216
-- On tff_mapping_type shift to state 217
-- On tff_atomic_type shift to state 218
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 191:
tff_quantified_type -> FORALL_TY . LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_monotype [ RIGHT_PAREN COMMA ]
-- On LEFT_BRACKET shift to state 192

State 192:
tff_quantified_type -> FORALL_TY LEFT_BRACKET . tff_variable_list RIGHT_BRACKET COLON tff_monotype [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On variable shift to state 74
-- On tff_variable_list shift to state 193
-- On tff_variable shift to state 92
-- On tff_typed_variable shift to state 95

State 193:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_variable_list . RIGHT_BRACKET COLON tff_monotype [ RIGHT_PAREN COMMA ]
-- On RIGHT_BRACKET shift to state 194

State 194:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_variable_list RIGHT_BRACKET . COLON tff_monotype [ RIGHT_PAREN COMMA ]
-- On COLON shift to state 195

State 195:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON . tff_monotype [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On LEFT_PAREN shift to state 196
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_monotype shift to state 211
-- On tff_atomic_type shift to state 212
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 196:
tff_monotype -> LEFT_PAREN . tff_mapping_type RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On LEFT_PAREN shift to state 197
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_unitary_type shift to state 206
-- On tff_mapping_type shift to state 209
-- On tff_atomic_type shift to state 205
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 197:
tff_unitary_type -> LEFT_PAREN . tff_xprod_type RIGHT_PAREN [ STAR ARROW ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On LEFT_PAREN shift to state 197
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_xprod_type shift to state 198
-- On tff_unitary_type shift to state 202
-- On tff_atomic_type shift to state 205
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 198:
tff_unitary_type -> LEFT_PAREN tff_xprod_type . RIGHT_PAREN [ STAR ARROW ]
tff_xprod_type -> tff_xprod_type . STAR tff_atomic_type [ STAR RIGHT_PAREN ]
-- On STAR shift to state 199
-- On RIGHT_PAREN shift to state 201

State 199:
tff_xprod_type -> tff_xprod_type STAR . tff_atomic_type [ STAR RIGHT_PAREN ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_atomic_type shift to state 200
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 200:
tff_xprod_type -> tff_xprod_type STAR tff_atomic_type . [ STAR RIGHT_PAREN ]
-- On STAR reduce production tff_xprod_type -> tff_xprod_type STAR tff_atomic_type
-- On RIGHT_PAREN reduce production tff_xprod_type -> tff_xprod_type STAR tff_atomic_type

State 201:
tff_unitary_type -> LEFT_PAREN tff_xprod_type RIGHT_PAREN . [ STAR ARROW ]
-- On STAR reduce production tff_unitary_type -> LEFT_PAREN tff_xprod_type RIGHT_PAREN
-- On ARROW reduce production tff_unitary_type -> LEFT_PAREN tff_xprod_type RIGHT_PAREN

State 202:
tff_xprod_type -> tff_unitary_type . STAR tff_atomic_type [ STAR RIGHT_PAREN ]
-- On STAR shift to state 203

State 203:
tff_xprod_type -> tff_unitary_type STAR . tff_atomic_type [ STAR RIGHT_PAREN ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_atomic_type shift to state 204
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 204:
tff_xprod_type -> tff_unitary_type STAR tff_atomic_type . [ STAR RIGHT_PAREN ]
-- On STAR reduce production tff_xprod_type -> tff_unitary_type STAR tff_atomic_type
-- On RIGHT_PAREN reduce production tff_xprod_type -> tff_unitary_type STAR tff_atomic_type

State 205:
tff_unitary_type -> tff_atomic_type . [ STAR ARROW ]
-- On STAR reduce production tff_unitary_type -> tff_atomic_type
-- On ARROW reduce production tff_unitary_type -> tff_atomic_type

State 206:
tff_mapping_type -> tff_unitary_type . ARROW tff_atomic_type [ RIGHT_PAREN COMMA ]
-- On ARROW shift to state 207

State 207:
tff_mapping_type -> tff_unitary_type ARROW . tff_atomic_type [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On DOLLAR_WORD shift to state 28
-- On variable shift to state 76
-- On tff_atomic_type shift to state 208
-- On defined_type shift to state 78
-- On atomic_word shift to state 79
-- On atomic_defined_word shift to state 86

State 208:
tff_mapping_type -> tff_unitary_type ARROW tff_atomic_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_mapping_type -> tff_unitary_type ARROW tff_atomic_type
-- On COMMA reduce production tff_mapping_type -> tff_unitary_type ARROW tff_atomic_type

State 209:
tff_monotype -> LEFT_PAREN tff_mapping_type . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 210

State 210:
tff_monotype -> LEFT_PAREN tff_mapping_type RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_monotype -> LEFT_PAREN tff_mapping_type RIGHT_PAREN
-- On COMMA reduce production tff_monotype -> LEFT_PAREN tff_mapping_type RIGHT_PAREN

State 211:
tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_monotype . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_monotype
-- On COMMA reduce production tff_quantified_type -> FORALL_TY LEFT_BRACKET tff_variable_list RIGHT_BRACKET COLON tff_monotype

State 212:
tff_monotype -> tff_atomic_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_monotype -> tff_atomic_type
-- On COMMA reduce production tff_monotype -> tff_atomic_type

State 213:
tff_mapping_type -> tff_unitary_type . ARROW tff_atomic_type [ RIGHT_PAREN ]
tff_xprod_type -> tff_unitary_type . STAR tff_atomic_type [ STAR RIGHT_PAREN ]
-- On STAR shift to state 203
-- On ARROW shift to state 207

State 214:
tff_top_level_type -> LEFT_PAREN tff_top_level_type . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 215

State 215:
tff_top_level_type -> LEFT_PAREN tff_top_level_type RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_top_level_type -> LEFT_PAREN tff_top_level_type RIGHT_PAREN
-- On COMMA reduce production tff_top_level_type -> LEFT_PAREN tff_top_level_type RIGHT_PAREN

State 216:
tff_top_level_type -> tff_quantified_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_top_level_type -> tff_quantified_type
-- On COMMA reduce production tff_top_level_type -> tff_quantified_type

State 217:
tff_top_level_type -> tff_mapping_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_top_level_type -> tff_mapping_type
-- On COMMA reduce production tff_top_level_type -> tff_mapping_type

State 218:
tff_top_level_type -> tff_atomic_type . [ RIGHT_PAREN COMMA ]
tff_unitary_type -> tff_atomic_type . [ STAR ARROW ]
-- On STAR reduce production tff_unitary_type -> tff_atomic_type
-- On RIGHT_PAREN reduce production tff_top_level_type -> tff_atomic_type
-- On COMMA reduce production tff_top_level_type -> tff_atomic_type
-- On ARROW reduce production tff_unitary_type -> tff_atomic_type

State 219:
tff_typed_atom -> tff_untyped_atom COLON tff_top_level_type . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_typed_atom -> tff_untyped_atom COLON tff_top_level_type
-- On COMMA reduce production tff_typed_atom -> tff_untyped_atom COLON tff_top_level_type

State 220:
tff_typed_atom -> LEFT_PAREN tff_typed_atom . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 221

State 221:
tff_typed_atom -> LEFT_PAREN tff_typed_atom RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_typed_atom -> LEFT_PAREN tff_typed_atom RIGHT_PAREN
-- On COMMA reduce production tff_typed_atom -> LEFT_PAREN tff_typed_atom RIGHT_PAREN

State 222:
tff_sequent -> tff_tuple . GENTZEN_ARROW tff_tuple [ RIGHT_PAREN COMMA ]
-- On GENTZEN_ARROW shift to state 223

State 223:
tff_sequent -> tff_tuple GENTZEN_ARROW . tff_tuple [ RIGHT_PAREN COMMA ]
-- On LEFT_BRACKET shift to state 180
-- On tff_tuple shift to state 224

State 224:
tff_sequent -> tff_tuple GENTZEN_ARROW tff_tuple . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_sequent -> tff_tuple GENTZEN_ARROW tff_tuple
-- On COMMA reduce production tff_sequent -> tff_tuple GENTZEN_ARROW tff_tuple

State 225:
tff_sequent -> LEFT_PAREN tff_sequent . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 226

State 226:
tff_sequent -> LEFT_PAREN tff_sequent RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_sequent -> LEFT_PAREN tff_sequent RIGHT_PAREN
-- On COMMA reduce production tff_sequent -> LEFT_PAREN tff_sequent RIGHT_PAREN

State 227:
system_constant -> system_functor . [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
system_term -> system_functor . LEFT_PAREN arguments RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA AND ]
tff_untyped_atom -> system_functor . [ COLON ]
-- On LEFT_PAREN shift to state 38
-- On XOR reduce production system_constant -> system_functor
-- On VLINE reduce production system_constant -> system_functor
-- On RIGHT_PAREN reduce production system_constant -> system_functor
-- On NOT_EQUAL reduce production system_constant -> system_functor
-- On NOTVLINE reduce production system_constant -> system_functor
-- On NOTAND reduce production system_constant -> system_functor
-- On LEFT_IMPLY reduce production system_constant -> system_functor
-- On IMPLY reduce production system_constant -> system_functor
-- On EQUIV reduce production system_constant -> system_functor
-- On EQUAL reduce production system_constant -> system_functor
-- On COMMA reduce production system_constant -> system_functor
-- On COLON reduce production tff_untyped_atom -> system_functor
-- On AND reduce production system_constant -> system_functor

State 228:
tff_formula -> tff_typed_atom . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_formula -> tff_typed_atom
-- On COMMA reduce production tff_formula -> tff_typed_atom

State 229:
tff_formula -> tff_sequent . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_formula -> tff_sequent
-- On COMMA reduce production tff_formula -> tff_sequent

State 230:
tff_formula -> tff_logic_formula . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_formula -> tff_logic_formula
-- On COMMA reduce production tff_formula -> tff_logic_formula

State 231:
tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On RIGHT_PAREN shift to state 232

State 232:
tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On VLINE reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On NOTVLINE reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On NOTAND reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On IMPLY reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On EQUIV reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On COMMA reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN
-- On AND reduce production tff_let -> LET_FF LEFT_PAREN tff_let_formula_defn COMMA tff_formula RIGHT_PAREN

State 233:
tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On RIGHT_PAREN shift to state 234

State 234:
tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On VLINE reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On NOTVLINE reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On NOTAND reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On IMPLY reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On EQUIV reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On COMMA reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN
-- On AND reduce production tff_let -> LET_TF LEFT_PAREN tff_let_term_defn COMMA tff_formula RIGHT_PAREN

State 235:
conditional_term -> ITE_T LEFT_PAREN tff_logic_formula . COMMA term COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On COMMA shift to state 236

State 236:
conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA . term COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 237
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 237:
conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term . COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On COMMA shift to state 238

State 238:
conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA . term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 239
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 239:
conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 240

State 240:
conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On VLINE reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On STAR reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On RIGHT_PAREN reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On RIGHT_BRACKET reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On PLUS reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On NOT_EQUAL reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On NOTVLINE reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On NOTAND reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On LEFT_IMPLY reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On IMPLY reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On EQUIV reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On EQUAL reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On COMMA reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On COLON reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On ARROW reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On APPLY reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN
-- On AND reduce production conditional_term -> ITE_T LEFT_PAREN tff_logic_formula COMMA term COMMA term RIGHT_PAREN

State 241:
tff_let_formula_binding -> LEFT_PAREN tff_let_formula_binding . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 242

State 242:
tff_let_formula_binding -> LEFT_PAREN tff_let_formula_binding RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tff_let_formula_binding -> LEFT_PAREN tff_let_formula_binding RIGHT_PAREN
-- On COMMA reduce production tff_let_formula_binding -> LEFT_PAREN tff_let_formula_binding RIGHT_PAREN

State 243:
let_term -> LET_FT LEFT_PAREN tff_let_formula_defn . COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On COMMA shift to state 244

State 244:
let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA . term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 245
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 245:
let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 246

State 246:
let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On VLINE reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On STAR reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On RIGHT_PAREN reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On RIGHT_BRACKET reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On PLUS reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On NOT_EQUAL reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On NOTVLINE reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On NOTAND reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On LEFT_IMPLY reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On IMPLY reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On EQUIV reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On EQUAL reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On COMMA reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On COLON reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On ARROW reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On APPLY reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN
-- On AND reduce production let_term -> LET_FT LEFT_PAREN tff_let_formula_defn COMMA term RIGHT_PAREN

State 247:
let_term -> LET_TT LEFT_PAREN tff_let_term_defn . COMMA term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On COMMA shift to state 248

State 248:
let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA . term RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 249
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 249:
let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 250

State 250:
let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On VLINE reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On STAR reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On RIGHT_PAREN reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On RIGHT_BRACKET reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On PLUS reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On NOT_EQUAL reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On NOTVLINE reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On NOTAND reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On LEFT_IMPLY reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On IMPLY reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On EQUIV reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On EQUAL reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On COMMA reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On COLON reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On ARROW reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On APPLY reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN
-- On AND reduce production let_term -> LET_TT LEFT_PAREN tff_let_term_defn COMMA term RIGHT_PAREN

State 251:
fof_sequent -> LEFT_PAREN . fof_sequent RIGHT_PAREN [ RIGHT_PAREN COMMA ]
fof_unitary_formula -> LEFT_PAREN . fof_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 251
-- On LEFT_BRACKET shift to state 252
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 270
-- On fof_unary_formula shift to state 266
-- On fof_tuple shift to state 293
-- On fof_sequent shift to state 296
-- On fof_quantified_formula shift to state 267
-- On fof_or_formula shift to state 277
-- On fof_logic_formula shift to state 280
-- On fof_binary_nonassoc shift to state 282
-- On fof_binary_formula shift to state 283
-- On fof_binary_assoc shift to state 284
-- On fof_and_formula shift to state 285
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 252:
fof_tuple -> LEFT_BRACKET . RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
fof_tuple -> LEFT_BRACKET . fof_tuple_list RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On RIGHT_BRACKET shift to state 253
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 270
-- On fof_unary_formula shift to state 266
-- On fof_tuple_list shift to state 288
-- On fof_quantified_formula shift to state 267
-- On fof_or_formula shift to state 277
-- On fof_logic_formula shift to state 290
-- On fof_binary_nonassoc shift to state 282
-- On fof_binary_formula shift to state 283
-- On fof_binary_assoc shift to state 284
-- On fof_and_formula shift to state 285
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 253:
fof_tuple -> LEFT_BRACKET RIGHT_BRACKET . [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On RIGHT_PAREN reduce production fof_tuple -> LEFT_BRACKET RIGHT_BRACKET
-- On GENTZEN_ARROW reduce production fof_tuple -> LEFT_BRACKET RIGHT_BRACKET
-- On COMMA reduce production fof_tuple -> LEFT_BRACKET RIGHT_BRACKET

State 254:
fof_unitary_formula -> LEFT_PAREN . fof_logic_formula RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 270
-- On fof_unary_formula shift to state 266
-- On fof_quantified_formula shift to state 267
-- On fof_or_formula shift to state 277
-- On fof_logic_formula shift to state 280
-- On fof_binary_nonassoc shift to state 282
-- On fof_binary_formula shift to state 283
-- On fof_binary_assoc shift to state 284
-- On fof_and_formula shift to state 285
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 255:
fof_unary_formula -> unary_connective . fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 269
-- On fof_unary_formula shift to state 266
-- On fof_quantified_formula shift to state 267
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 256:
fof_quantified_formula -> fol_quantifier . LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On LEFT_BRACKET shift to state 257

State 257:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET . fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On variable shift to state 258
-- On fof_variable_list shift to state 261

State 258:
fof_variable_list -> variable . [ RIGHT_BRACKET ]
fof_variable_list -> variable . COMMA fof_variable_list [ RIGHT_BRACKET ]
-- On COMMA shift to state 259
-- On RIGHT_BRACKET reduce production fof_variable_list -> variable

State 259:
fof_variable_list -> variable COMMA . fof_variable_list [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 11
-- On variable shift to state 258
-- On fof_variable_list shift to state 260

State 260:
fof_variable_list -> variable COMMA fof_variable_list . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production fof_variable_list -> variable COMMA fof_variable_list

State 261:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list . RIGHT_BRACKET COLON fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On RIGHT_BRACKET shift to state 262

State 262:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET . COLON fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On COLON shift to state 263

State 263:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON . fof_unitary_formula [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 265
-- On fof_unary_formula shift to state 266
-- On fof_quantified_formula shift to state 267
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 264:
fof_unary_formula -> fol_infix_unary . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production fof_unary_formula -> fol_infix_unary
-- On VLINE reduce production fof_unary_formula -> fol_infix_unary
-- On RIGHT_PAREN reduce production fof_unary_formula -> fol_infix_unary
-- On RIGHT_BRACKET reduce production fof_unary_formula -> fol_infix_unary
-- On NOTVLINE reduce production fof_unary_formula -> fol_infix_unary
-- On NOTAND reduce production fof_unary_formula -> fol_infix_unary
-- On LEFT_IMPLY reduce production fof_unary_formula -> fol_infix_unary
-- On IMPLY reduce production fof_unary_formula -> fol_infix_unary
-- On EQUIV reduce production fof_unary_formula -> fol_infix_unary
-- On COMMA reduce production fof_unary_formula -> fol_infix_unary
-- On AND reduce production fof_unary_formula -> fol_infix_unary

State 265:
fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On VLINE reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On RIGHT_PAREN reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On NOTVLINE reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On NOTAND reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On LEFT_IMPLY reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On IMPLY reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On EQUIV reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On COMMA reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula
-- On AND reduce production fof_quantified_formula -> fol_quantifier LEFT_BRACKET fof_variable_list RIGHT_BRACKET COLON fof_unitary_formula

State 266:
fof_unitary_formula -> fof_unary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production fof_unitary_formula -> fof_unary_formula
-- On VLINE reduce production fof_unitary_formula -> fof_unary_formula
-- On RIGHT_PAREN reduce production fof_unitary_formula -> fof_unary_formula
-- On RIGHT_BRACKET reduce production fof_unitary_formula -> fof_unary_formula
-- On NOTVLINE reduce production fof_unitary_formula -> fof_unary_formula
-- On NOTAND reduce production fof_unitary_formula -> fof_unary_formula
-- On LEFT_IMPLY reduce production fof_unitary_formula -> fof_unary_formula
-- On IMPLY reduce production fof_unitary_formula -> fof_unary_formula
-- On EQUIV reduce production fof_unitary_formula -> fof_unary_formula
-- On COMMA reduce production fof_unitary_formula -> fof_unary_formula
-- On AND reduce production fof_unitary_formula -> fof_unary_formula

State 267:
fof_unitary_formula -> fof_quantified_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production fof_unitary_formula -> fof_quantified_formula
-- On VLINE reduce production fof_unitary_formula -> fof_quantified_formula
-- On RIGHT_PAREN reduce production fof_unitary_formula -> fof_quantified_formula
-- On RIGHT_BRACKET reduce production fof_unitary_formula -> fof_quantified_formula
-- On NOTVLINE reduce production fof_unitary_formula -> fof_quantified_formula
-- On NOTAND reduce production fof_unitary_formula -> fof_quantified_formula
-- On LEFT_IMPLY reduce production fof_unitary_formula -> fof_quantified_formula
-- On IMPLY reduce production fof_unitary_formula -> fof_quantified_formula
-- On EQUIV reduce production fof_unitary_formula -> fof_quantified_formula
-- On COMMA reduce production fof_unitary_formula -> fof_quantified_formula
-- On AND reduce production fof_unitary_formula -> fof_quantified_formula

State 268:
fof_unitary_formula -> atomic_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production fof_unitary_formula -> atomic_formula
-- On VLINE reduce production fof_unitary_formula -> atomic_formula
-- On RIGHT_PAREN reduce production fof_unitary_formula -> atomic_formula
-- On RIGHT_BRACKET reduce production fof_unitary_formula -> atomic_formula
-- On NOTVLINE reduce production fof_unitary_formula -> atomic_formula
-- On NOTAND reduce production fof_unitary_formula -> atomic_formula
-- On LEFT_IMPLY reduce production fof_unitary_formula -> atomic_formula
-- On IMPLY reduce production fof_unitary_formula -> atomic_formula
-- On EQUIV reduce production fof_unitary_formula -> atomic_formula
-- On COMMA reduce production fof_unitary_formula -> atomic_formula
-- On AND reduce production fof_unitary_formula -> atomic_formula

State 269:
fof_unary_formula -> unary_connective fof_unitary_formula . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On VLINE reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On RIGHT_PAREN reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On NOTVLINE reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On NOTAND reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On LEFT_IMPLY reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On IMPLY reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On EQUIV reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On COMMA reduce production fof_unary_formula -> unary_connective fof_unitary_formula
-- On AND reduce production fof_unary_formula -> unary_connective fof_unitary_formula

State 270:
fof_and_formula -> fof_unitary_formula . AND fof_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
fof_binary_nonassoc -> fof_unitary_formula . binary_connective fof_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
fof_logic_formula -> fof_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
fof_or_formula -> fof_unitary_formula . VLINE fof_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 271
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On LEFT_IMPLY shift to state 152
-- On IMPLY shift to state 153
-- On EQUIV shift to state 154
-- On AND shift to state 273
-- On binary_connective shift to state 275
-- On RIGHT_PAREN reduce production fof_logic_formula -> fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_logic_formula -> fof_unitary_formula
-- On COMMA reduce production fof_logic_formula -> fof_unitary_formula

State 271:
fof_or_formula -> fof_unitary_formula VLINE . fof_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 272
-- On fof_unary_formula shift to state 266
-- On fof_quantified_formula shift to state 267
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 272:
fof_or_formula -> fof_unitary_formula VLINE fof_unitary_formula . [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On VLINE reduce production fof_or_formula -> fof_unitary_formula VLINE fof_unitary_formula
-- On RIGHT_PAREN reduce production fof_or_formula -> fof_unitary_formula VLINE fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_or_formula -> fof_unitary_formula VLINE fof_unitary_formula
-- On COMMA reduce production fof_or_formula -> fof_unitary_formula VLINE fof_unitary_formula

State 273:
fof_and_formula -> fof_unitary_formula AND . fof_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 274
-- On fof_unary_formula shift to state 266
-- On fof_quantified_formula shift to state 267
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 274:
fof_and_formula -> fof_unitary_formula AND fof_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On RIGHT_PAREN reduce production fof_and_formula -> fof_unitary_formula AND fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_and_formula -> fof_unitary_formula AND fof_unitary_formula
-- On COMMA reduce production fof_and_formula -> fof_unitary_formula AND fof_unitary_formula
-- On AND reduce production fof_and_formula -> fof_unitary_formula AND fof_unitary_formula

State 275:
fof_binary_nonassoc -> fof_unitary_formula binary_connective . fof_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 276
-- On fof_unary_formula shift to state 266
-- On fof_quantified_formula shift to state 267
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 276:
fof_binary_nonassoc -> fof_unitary_formula binary_connective fof_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production fof_binary_nonassoc -> fof_unitary_formula binary_connective fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_binary_nonassoc -> fof_unitary_formula binary_connective fof_unitary_formula
-- On COMMA reduce production fof_binary_nonassoc -> fof_unitary_formula binary_connective fof_unitary_formula

State 277:
fof_binary_assoc -> fof_or_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
fof_or_formula -> fof_or_formula . VLINE fof_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On VLINE shift to state 278
-- On RIGHT_PAREN reduce production fof_binary_assoc -> fof_or_formula
-- On RIGHT_BRACKET reduce production fof_binary_assoc -> fof_or_formula
-- On COMMA reduce production fof_binary_assoc -> fof_or_formula

State 278:
fof_or_formula -> fof_or_formula VLINE . fof_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 279
-- On fof_unary_formula shift to state 266
-- On fof_quantified_formula shift to state 267
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 279:
fof_or_formula -> fof_or_formula VLINE fof_unitary_formula . [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On VLINE reduce production fof_or_formula -> fof_or_formula VLINE fof_unitary_formula
-- On RIGHT_PAREN reduce production fof_or_formula -> fof_or_formula VLINE fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_or_formula -> fof_or_formula VLINE fof_unitary_formula
-- On COMMA reduce production fof_or_formula -> fof_or_formula VLINE fof_unitary_formula

State 280:
fof_unitary_formula -> LEFT_PAREN fof_logic_formula . RIGHT_PAREN [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On RIGHT_PAREN shift to state 281

State 281:
fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN . [ XOR VLINE RIGHT_PAREN RIGHT_BRACKET NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV COMMA AND ]
-- On XOR reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On VLINE reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On NOTVLINE reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On NOTAND reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On IMPLY reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On EQUIV reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On COMMA reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN
-- On AND reduce production fof_unitary_formula -> LEFT_PAREN fof_logic_formula RIGHT_PAREN

State 282:
fof_binary_formula -> fof_binary_nonassoc . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production fof_binary_formula -> fof_binary_nonassoc
-- On RIGHT_BRACKET reduce production fof_binary_formula -> fof_binary_nonassoc
-- On COMMA reduce production fof_binary_formula -> fof_binary_nonassoc

State 283:
fof_logic_formula -> fof_binary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production fof_logic_formula -> fof_binary_formula
-- On RIGHT_BRACKET reduce production fof_logic_formula -> fof_binary_formula
-- On COMMA reduce production fof_logic_formula -> fof_binary_formula

State 284:
fof_binary_formula -> fof_binary_assoc . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production fof_binary_formula -> fof_binary_assoc
-- On RIGHT_BRACKET reduce production fof_binary_formula -> fof_binary_assoc
-- On COMMA reduce production fof_binary_formula -> fof_binary_assoc

State 285:
fof_and_formula -> fof_and_formula . AND fof_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
fof_binary_assoc -> fof_and_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On AND shift to state 286
-- On RIGHT_PAREN reduce production fof_binary_assoc -> fof_and_formula
-- On RIGHT_BRACKET reduce production fof_binary_assoc -> fof_and_formula
-- On COMMA reduce production fof_binary_assoc -> fof_and_formula

State 286:
fof_and_formula -> fof_and_formula AND . fof_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 287
-- On fof_unary_formula shift to state 266
-- On fof_quantified_formula shift to state 267
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 287:
fof_and_formula -> fof_and_formula AND fof_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On RIGHT_PAREN reduce production fof_and_formula -> fof_and_formula AND fof_unitary_formula
-- On RIGHT_BRACKET reduce production fof_and_formula -> fof_and_formula AND fof_unitary_formula
-- On COMMA reduce production fof_and_formula -> fof_and_formula AND fof_unitary_formula
-- On AND reduce production fof_and_formula -> fof_and_formula AND fof_unitary_formula

State 288:
fof_tuple -> LEFT_BRACKET fof_tuple_list . RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On RIGHT_BRACKET shift to state 289

State 289:
fof_tuple -> LEFT_BRACKET fof_tuple_list RIGHT_BRACKET . [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On RIGHT_PAREN reduce production fof_tuple -> LEFT_BRACKET fof_tuple_list RIGHT_BRACKET
-- On GENTZEN_ARROW reduce production fof_tuple -> LEFT_BRACKET fof_tuple_list RIGHT_BRACKET
-- On COMMA reduce production fof_tuple -> LEFT_BRACKET fof_tuple_list RIGHT_BRACKET

State 290:
fof_tuple_list -> fof_logic_formula . [ RIGHT_BRACKET ]
fof_tuple_list -> fof_logic_formula . COMMA fof_tuple_list [ RIGHT_BRACKET ]
-- On COMMA shift to state 291
-- On RIGHT_BRACKET reduce production fof_tuple_list -> fof_logic_formula

State 291:
fof_tuple_list -> fof_logic_formula COMMA . fof_tuple_list [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 254
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 270
-- On fof_unary_formula shift to state 266
-- On fof_tuple_list shift to state 292
-- On fof_quantified_formula shift to state 267
-- On fof_or_formula shift to state 277
-- On fof_logic_formula shift to state 290
-- On fof_binary_nonassoc shift to state 282
-- On fof_binary_formula shift to state 283
-- On fof_binary_assoc shift to state 284
-- On fof_and_formula shift to state 285
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 292:
fof_tuple_list -> fof_logic_formula COMMA fof_tuple_list . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production fof_tuple_list -> fof_logic_formula COMMA fof_tuple_list

State 293:
fof_sequent -> fof_tuple . GENTZEN_ARROW fof_tuple [ RIGHT_PAREN COMMA ]
-- On GENTZEN_ARROW shift to state 294

State 294:
fof_sequent -> fof_tuple GENTZEN_ARROW . fof_tuple [ RIGHT_PAREN COMMA ]
-- On LEFT_BRACKET shift to state 252
-- On fof_tuple shift to state 295

State 295:
fof_sequent -> fof_tuple GENTZEN_ARROW fof_tuple . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production fof_sequent -> fof_tuple GENTZEN_ARROW fof_tuple
-- On COMMA reduce production fof_sequent -> fof_tuple GENTZEN_ARROW fof_tuple

State 296:
fof_sequent -> LEFT_PAREN fof_sequent . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 297

State 297:
fof_sequent -> LEFT_PAREN fof_sequent RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production fof_sequent -> LEFT_PAREN fof_sequent RIGHT_PAREN
-- On COMMA reduce production fof_sequent -> LEFT_PAREN fof_sequent RIGHT_PAREN

State 298:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula . annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 299
-- On annotations shift to state 493
-- On RIGHT_PAREN reduce production annotations ->

State 299:
annotations -> COMMA . source optional_info [ RIGHT_PAREN ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LEFT_BRACKET shift to state 300
-- On INTEGER shift to state 27
-- On DOLLAR_THF shift to state 302
-- On DOLLAR_TFF shift to state 440
-- On DOLLAR_FOT shift to state 444
-- On DOLLAR_FOF shift to state 448
-- On DOLLAR_CNF shift to state 454
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 469
-- On source shift to state 487
-- On real shift to state 40
-- On rational shift to state 41
-- On number shift to state 470
-- On integer shift to state 45
-- On general_term shift to state 492
-- On general_list shift to state 476
-- On general_function shift to state 477
-- On general_data shift to state 478
-- On formula_data shift to state 481
-- On distinct_object shift to state 482
-- On atomic_word shift to state 483

State 300:
general_list -> LEFT_BRACKET . RIGHT_BRACKET [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
general_list -> LEFT_BRACKET . general_terms RIGHT_BRACKET [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On RIGHT_BRACKET shift to state 301
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LEFT_BRACKET shift to state 300
-- On INTEGER shift to state 27
-- On DOLLAR_THF shift to state 302
-- On DOLLAR_TFF shift to state 440
-- On DOLLAR_FOT shift to state 444
-- On DOLLAR_FOF shift to state 448
-- On DOLLAR_CNF shift to state 454
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 469
-- On real shift to state 40
-- On rational shift to state 41
-- On number shift to state 470
-- On integer shift to state 45
-- On general_terms shift to state 471
-- On general_term shift to state 473
-- On general_list shift to state 476
-- On general_function shift to state 477
-- On general_data shift to state 478
-- On formula_data shift to state 481
-- On distinct_object shift to state 482
-- On atomic_word shift to state 483

State 301:
general_list -> LEFT_BRACKET RIGHT_BRACKET . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_list -> LEFT_BRACKET RIGHT_BRACKET
-- On RIGHT_BRACKET reduce production general_list -> LEFT_BRACKET RIGHT_BRACKET
-- On COMMA reduce production general_list -> LEFT_BRACKET RIGHT_BRACKET

State 302:
formula_data -> DOLLAR_THF . LEFT_PAREN thf_formula RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On LEFT_PAREN shift to state 303

State 303:
formula_data -> DOLLAR_THF LEFT_PAREN . thf_formula RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 323
-- On LEFT_IMPLY shift to state 152
-- On LEFT_BRACKET shift to state 324
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_tuple shift to state 415
-- On thf_subtype shift to state 369
-- On thf_sequent shift to state 420
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 421
-- On thf_let shift to state 346
-- On thf_formula shift to state 438
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 304:
assoc_connective -> VLINE . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production assoc_connective -> VLINE
-- On VLINE reduce production assoc_connective -> VLINE
-- On STAR reduce production assoc_connective -> VLINE
-- On RIGHT_PAREN reduce production assoc_connective -> VLINE
-- On RIGHT_BRACKET reduce production assoc_connective -> VLINE
-- On PLUS reduce production assoc_connective -> VLINE
-- On NOT_EQUAL reduce production assoc_connective -> VLINE
-- On NOTVLINE reduce production assoc_connective -> VLINE
-- On NOTAND reduce production assoc_connective -> VLINE
-- On LEFT_IMPLY reduce production assoc_connective -> VLINE
-- On IMPLY reduce production assoc_connective -> VLINE
-- On EQUIV reduce production assoc_connective -> VLINE
-- On EQUAL reduce production assoc_connective -> VLINE
-- On COMMA reduce production assoc_connective -> VLINE
-- On COLON reduce production assoc_connective -> VLINE
-- On ARROW reduce production assoc_connective -> VLINE
-- On APPLY reduce production assoc_connective -> VLINE
-- On AND reduce production assoc_connective -> VLINE

State 305:
thf_unary_connective -> SIGMA . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_unary_connective -> SIGMA
-- On VLINE reduce production thf_unary_connective -> SIGMA
-- On STAR reduce production thf_unary_connective -> SIGMA
-- On RIGHT_PAREN reduce production thf_unary_connective -> SIGMA
-- On RIGHT_BRACKET reduce production thf_unary_connective -> SIGMA
-- On PLUS reduce production thf_unary_connective -> SIGMA
-- On NOT_EQUAL reduce production thf_unary_connective -> SIGMA
-- On NOTVLINE reduce production thf_unary_connective -> SIGMA
-- On NOTAND reduce production thf_unary_connective -> SIGMA
-- On LEFT_PAREN reduce production thf_unary_connective -> SIGMA
-- On LEFT_IMPLY reduce production thf_unary_connective -> SIGMA
-- On IMPLY reduce production thf_unary_connective -> SIGMA
-- On EQUIV reduce production thf_unary_connective -> SIGMA
-- On EQUAL reduce production thf_unary_connective -> SIGMA
-- On COMMA reduce production thf_unary_connective -> SIGMA
-- On COLON reduce production thf_unary_connective -> SIGMA
-- On ARROW reduce production thf_unary_connective -> SIGMA
-- On APPLY reduce production thf_unary_connective -> SIGMA
-- On AND reduce production thf_unary_connective -> SIGMA

State 306:
thf_unary_connective -> PI . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_unary_connective -> PI
-- On VLINE reduce production thf_unary_connective -> PI
-- On STAR reduce production thf_unary_connective -> PI
-- On RIGHT_PAREN reduce production thf_unary_connective -> PI
-- On RIGHT_BRACKET reduce production thf_unary_connective -> PI
-- On PLUS reduce production thf_unary_connective -> PI
-- On NOT_EQUAL reduce production thf_unary_connective -> PI
-- On NOTVLINE reduce production thf_unary_connective -> PI
-- On NOTAND reduce production thf_unary_connective -> PI
-- On LEFT_PAREN reduce production thf_unary_connective -> PI
-- On LEFT_IMPLY reduce production thf_unary_connective -> PI
-- On IMPLY reduce production thf_unary_connective -> PI
-- On EQUIV reduce production thf_unary_connective -> PI
-- On EQUAL reduce production thf_unary_connective -> PI
-- On COMMA reduce production thf_unary_connective -> PI
-- On COLON reduce production thf_unary_connective -> PI
-- On ARROW reduce production thf_unary_connective -> PI
-- On APPLY reduce production thf_unary_connective -> PI
-- On AND reduce production thf_unary_connective -> PI

State 307:
thf_let -> LET_TF . LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 308

State 308:
thf_let -> LET_TF LEFT_PAREN . thf_let_term_defn COMMA thf_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On LAMBDA shift to state 309
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On DEFINITE_DESCRIPTION shift to state 313
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 433
-- On thf_let_term_defn shift to state 434
-- On fol_quantifier shift to state 353

State 309:
thf_quantifier -> LAMBDA . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production thf_quantifier -> LAMBDA

State 310:
thf_quantifier -> INDEFINITE_DESCRIPTION . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production thf_quantifier -> INDEFINITE_DESCRIPTION

State 311:
thf_quantifier -> FORALL_TY . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production thf_quantifier -> FORALL_TY

State 312:
thf_quantifier -> EXISTS_TY . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production thf_quantifier -> EXISTS_TY

State 313:
thf_quantifier -> DEFINITE_DESCRIPTION . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production thf_quantifier -> DEFINITE_DESCRIPTION

State 314:
thf_quantified_formula -> thf_quantifier . LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On LEFT_BRACKET shift to state 315

State 315:
thf_quantified_formula -> thf_quantifier LEFT_BRACKET . thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On UPPER_WORD shift to state 11
-- On variable shift to state 316
-- On thf_variable_list shift to state 425
-- On thf_variable shift to state 429
-- On thf_typed_variable shift to state 432

State 316:
thf_typed_variable -> variable . COLON thf_top_level_type [ RIGHT_BRACKET COMMA ]
thf_variable -> variable . [ RIGHT_BRACKET COMMA ]
-- On COLON shift to state 317
-- On RIGHT_BRACKET reduce production thf_variable -> variable
-- On COMMA reduce production thf_variable -> variable

State 317:
thf_typed_variable -> variable COLON . thf_top_level_type [ RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_top_level_type shift to state 424
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 374
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 318:
thf_let -> LET_FF . LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 319

State 319:
thf_let -> LET_FF LEFT_PAREN . thf_let_formula_defn COMMA thf_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On LAMBDA shift to state 309
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On DEFINITE_DESCRIPTION shift to state 313
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 320
-- On thf_let_formula_defn shift to state 321
-- On fol_quantifier shift to state 353

State 320:
thf_let_formula_defn -> thf_quantified_formula . [ COMMA ]
-- On COMMA reduce production thf_let_formula_defn -> thf_quantified_formula

State 321:
thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn . COMMA thf_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On COMMA shift to state 322

State 322:
thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA . thf_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 323
-- On LEFT_IMPLY shift to state 152
-- On LEFT_BRACKET shift to state 324
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_tuple shift to state 415
-- On thf_subtype shift to state 369
-- On thf_sequent shift to state 420
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 421
-- On thf_let shift to state 346
-- On thf_formula shift to state 422
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 323:
thf_sequent -> LEFT_PAREN . thf_sequent RIGHT_PAREN [ RIGHT_PAREN COMMA ]
thf_typeable_formula -> LEFT_PAREN . thf_logic_formula RIGHT_PAREN [ COLON ]
thf_unitary_formula -> LEFT_PAREN . thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 323
-- On LEFT_IMPLY shift to state 152
-- On LEFT_BRACKET shift to state 324
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_tuple shift to state 415
-- On thf_subtype shift to state 369
-- On thf_sequent shift to state 418
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 408
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 324:
thf_tuple -> LEFT_BRACKET . RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
thf_tuple -> LEFT_BRACKET . thf_tuple_list RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On RIGHT_BRACKET shift to state 325
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_tuple_list shift to state 410
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 412
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 325:
thf_tuple -> LEFT_BRACKET RIGHT_BRACKET . [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On RIGHT_PAREN reduce production thf_tuple -> LEFT_BRACKET RIGHT_BRACKET
-- On GENTZEN_ARROW reduce production thf_tuple -> LEFT_BRACKET RIGHT_BRACKET
-- On COMMA reduce production thf_tuple -> LEFT_BRACKET RIGHT_BRACKET

State 326:
thf_typeable_formula -> LEFT_PAREN . thf_logic_formula RIGHT_PAREN [ COLON ]
thf_unitary_formula -> LEFT_PAREN . thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 408
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 327:
thf_conditional -> ITE_F . LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 328

State 328:
thf_conditional -> ITE_F LEFT_PAREN . thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 402
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 329:
assoc_connective -> AND . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production assoc_connective -> AND
-- On VLINE reduce production assoc_connective -> AND
-- On STAR reduce production assoc_connective -> AND
-- On RIGHT_PAREN reduce production assoc_connective -> AND
-- On RIGHT_BRACKET reduce production assoc_connective -> AND
-- On PLUS reduce production assoc_connective -> AND
-- On NOT_EQUAL reduce production assoc_connective -> AND
-- On NOTVLINE reduce production assoc_connective -> AND
-- On NOTAND reduce production assoc_connective -> AND
-- On LEFT_IMPLY reduce production assoc_connective -> AND
-- On IMPLY reduce production assoc_connective -> AND
-- On EQUIV reduce production assoc_connective -> AND
-- On EQUAL reduce production assoc_connective -> AND
-- On COMMA reduce production assoc_connective -> AND
-- On COLON reduce production assoc_connective -> AND
-- On ARROW reduce production assoc_connective -> AND
-- On APPLY reduce production assoc_connective -> AND
-- On AND reduce production assoc_connective -> AND

State 330:
thf_unary_connective -> unary_connective . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_PAREN LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_unary_connective -> unary_connective
-- On VLINE reduce production thf_unary_connective -> unary_connective
-- On STAR reduce production thf_unary_connective -> unary_connective
-- On RIGHT_PAREN reduce production thf_unary_connective -> unary_connective
-- On RIGHT_BRACKET reduce production thf_unary_connective -> unary_connective
-- On PLUS reduce production thf_unary_connective -> unary_connective
-- On NOT_EQUAL reduce production thf_unary_connective -> unary_connective
-- On NOTVLINE reduce production thf_unary_connective -> unary_connective
-- On NOTAND reduce production thf_unary_connective -> unary_connective
-- On LEFT_PAREN reduce production thf_unary_connective -> unary_connective
-- On LEFT_IMPLY reduce production thf_unary_connective -> unary_connective
-- On IMPLY reduce production thf_unary_connective -> unary_connective
-- On EQUIV reduce production thf_unary_connective -> unary_connective
-- On EQUAL reduce production thf_unary_connective -> unary_connective
-- On COMMA reduce production thf_unary_connective -> unary_connective
-- On COLON reduce production thf_unary_connective -> unary_connective
-- On ARROW reduce production thf_unary_connective -> unary_connective
-- On APPLY reduce production thf_unary_connective -> unary_connective
-- On AND reduce production thf_unary_connective -> unary_connective

State 331:
thf_binary_type -> thf_xprod_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_xprod_type -> thf_xprod_type . STAR thf_unitary_type [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On STAR shift to state 332
-- On RIGHT_PAREN reduce production thf_binary_type -> thf_xprod_type
-- On RIGHT_BRACKET reduce production thf_binary_type -> thf_xprod_type
-- On COMMA reduce production thf_binary_type -> thf_xprod_type

State 332:
thf_xprod_type -> thf_xprod_type STAR . thf_unitary_type [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_type shift to state 401
-- On thf_unitary_formula shift to state 337
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 333:
thf_unitary_formula -> LEFT_PAREN . thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 399
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 334:
thf_mapping_type -> thf_unitary_type . ARROW thf_unitary_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_mapping_type -> thf_unitary_type . ARROW thf_mapping_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_union_type -> thf_unitary_type . PLUS thf_unitary_type [ RIGHT_PAREN RIGHT_BRACKET PLUS COMMA ]
thf_xprod_type -> thf_unitary_type . STAR thf_unitary_type [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On STAR shift to state 335
-- On PLUS shift to state 394
-- On ARROW shift to state 396

State 335:
thf_xprod_type -> thf_unitary_type STAR . thf_unitary_type [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_type shift to state 336
-- On thf_unitary_formula shift to state 337
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 336:
thf_xprod_type -> thf_unitary_type STAR thf_unitary_type . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On STAR reduce production thf_xprod_type -> thf_unitary_type STAR thf_unitary_type
-- On RIGHT_PAREN reduce production thf_xprod_type -> thf_unitary_type STAR thf_unitary_type
-- On RIGHT_BRACKET reduce production thf_xprod_type -> thf_unitary_type STAR thf_unitary_type
-- On COMMA reduce production thf_xprod_type -> thf_unitary_type STAR thf_unitary_type

State 337:
thf_unitary_type -> thf_unitary_formula . [ STAR RIGHT_PAREN RIGHT_BRACKET PLUS COMMA ARROW ]
-- On STAR reduce production thf_unitary_type -> thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_unitary_type -> thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_unitary_type -> thf_unitary_formula
-- On PLUS reduce production thf_unitary_type -> thf_unitary_formula
-- On COMMA reduce production thf_unitary_type -> thf_unitary_formula
-- On ARROW reduce production thf_unitary_type -> thf_unitary_formula

State 338:
thf_unitary_formula -> thf_unary_formula . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_unitary_formula -> thf_unary_formula
-- On VLINE reduce production thf_unitary_formula -> thf_unary_formula
-- On STAR reduce production thf_unitary_formula -> thf_unary_formula
-- On RIGHT_PAREN reduce production thf_unitary_formula -> thf_unary_formula
-- On RIGHT_BRACKET reduce production thf_unitary_formula -> thf_unary_formula
-- On PLUS reduce production thf_unitary_formula -> thf_unary_formula
-- On NOT_EQUAL reduce production thf_unitary_formula -> thf_unary_formula
-- On NOTVLINE reduce production thf_unitary_formula -> thf_unary_formula
-- On NOTAND reduce production thf_unitary_formula -> thf_unary_formula
-- On LEFT_IMPLY reduce production thf_unitary_formula -> thf_unary_formula
-- On IMPLY reduce production thf_unitary_formula -> thf_unary_formula
-- On EQUIV reduce production thf_unitary_formula -> thf_unary_formula
-- On EQUAL reduce production thf_unitary_formula -> thf_unary_formula
-- On COMMA reduce production thf_unitary_formula -> thf_unary_formula
-- On ARROW reduce production thf_unitary_formula -> thf_unary_formula
-- On APPLY reduce production thf_unitary_formula -> thf_unary_formula
-- On AND reduce production thf_unitary_formula -> thf_unary_formula

State 339:
thf_conn_term -> thf_unary_connective . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
thf_unary_formula -> thf_unary_connective . LEFT_PAREN thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On LEFT_PAREN shift to state 340
-- On XOR reduce production thf_conn_term -> thf_unary_connective
-- On VLINE reduce production thf_conn_term -> thf_unary_connective
-- On STAR reduce production thf_conn_term -> thf_unary_connective
-- On RIGHT_PAREN reduce production thf_conn_term -> thf_unary_connective
-- On RIGHT_BRACKET reduce production thf_conn_term -> thf_unary_connective
-- On PLUS reduce production thf_conn_term -> thf_unary_connective
-- On NOT_EQUAL reduce production thf_conn_term -> thf_unary_connective
-- On NOTVLINE reduce production thf_conn_term -> thf_unary_connective
-- On NOTAND reduce production thf_conn_term -> thf_unary_connective
-- On LEFT_IMPLY reduce production thf_conn_term -> thf_unary_connective
-- On IMPLY reduce production thf_conn_term -> thf_unary_connective
-- On EQUIV reduce production thf_conn_term -> thf_unary_connective
-- On EQUAL reduce production thf_conn_term -> thf_unary_connective
-- On COMMA reduce production thf_conn_term -> thf_unary_connective
-- On COLON reduce production thf_conn_term -> thf_unary_connective
-- On ARROW reduce production thf_conn_term -> thf_unary_connective
-- On APPLY reduce production thf_conn_term -> thf_unary_connective
-- On AND reduce production thf_conn_term -> thf_unary_connective

State 340:
thf_unary_formula -> thf_unary_connective LEFT_PAREN . thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 392
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 341:
thf_and_formula -> thf_unitary_formula . AND thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
thf_apply_formula -> thf_unitary_formula . APPLY thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA APPLY ]
thf_binary_pair -> thf_unitary_formula . thf_pair_connective thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_logic_formula -> thf_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_or_formula -> thf_unitary_formula . VLINE thf_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_unitary_type -> thf_unitary_formula . [ STAR PLUS ARROW ]
-- On XOR shift to state 147
-- On VLINE shift to state 342
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On LEFT_IMPLY shift to state 152
-- On IMPLY shift to state 153
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On APPLY shift to state 356
-- On AND shift to state 358
-- On thf_pair_connective shift to state 360
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On binary_connective shift to state 354
-- On STAR reduce production thf_unitary_type -> thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_logic_formula -> thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_logic_formula -> thf_unitary_formula
-- On PLUS reduce production thf_unitary_type -> thf_unitary_formula
-- On COMMA reduce production thf_logic_formula -> thf_unitary_formula
-- On ARROW reduce production thf_unitary_type -> thf_unitary_formula

State 342:
thf_or_formula -> thf_unitary_formula VLINE . thf_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_formula shift to state 343
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 343:
thf_or_formula -> thf_unitary_formula VLINE thf_unitary_formula . [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On VLINE reduce production thf_or_formula -> thf_unitary_formula VLINE thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_or_formula -> thf_unitary_formula VLINE thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_or_formula -> thf_unitary_formula VLINE thf_unitary_formula
-- On COMMA reduce production thf_or_formula -> thf_unitary_formula VLINE thf_unitary_formula

State 344:
thf_unitary_formula -> thf_quantified_formula . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_unitary_formula -> thf_quantified_formula
-- On VLINE reduce production thf_unitary_formula -> thf_quantified_formula
-- On STAR reduce production thf_unitary_formula -> thf_quantified_formula
-- On RIGHT_PAREN reduce production thf_unitary_formula -> thf_quantified_formula
-- On RIGHT_BRACKET reduce production thf_unitary_formula -> thf_quantified_formula
-- On PLUS reduce production thf_unitary_formula -> thf_quantified_formula
-- On NOT_EQUAL reduce production thf_unitary_formula -> thf_quantified_formula
-- On NOTVLINE reduce production thf_unitary_formula -> thf_quantified_formula
-- On NOTAND reduce production thf_unitary_formula -> thf_quantified_formula
-- On LEFT_IMPLY reduce production thf_unitary_formula -> thf_quantified_formula
-- On IMPLY reduce production thf_unitary_formula -> thf_quantified_formula
-- On EQUIV reduce production thf_unitary_formula -> thf_quantified_formula
-- On EQUAL reduce production thf_unitary_formula -> thf_quantified_formula
-- On COMMA reduce production thf_unitary_formula -> thf_quantified_formula
-- On ARROW reduce production thf_unitary_formula -> thf_quantified_formula
-- On APPLY reduce production thf_unitary_formula -> thf_quantified_formula
-- On AND reduce production thf_unitary_formula -> thf_quantified_formula

State 345:
thf_conn_term -> thf_pair_connective . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_conn_term -> thf_pair_connective
-- On VLINE reduce production thf_conn_term -> thf_pair_connective
-- On STAR reduce production thf_conn_term -> thf_pair_connective
-- On RIGHT_PAREN reduce production thf_conn_term -> thf_pair_connective
-- On RIGHT_BRACKET reduce production thf_conn_term -> thf_pair_connective
-- On PLUS reduce production thf_conn_term -> thf_pair_connective
-- On NOT_EQUAL reduce production thf_conn_term -> thf_pair_connective
-- On NOTVLINE reduce production thf_conn_term -> thf_pair_connective
-- On NOTAND reduce production thf_conn_term -> thf_pair_connective
-- On LEFT_IMPLY reduce production thf_conn_term -> thf_pair_connective
-- On IMPLY reduce production thf_conn_term -> thf_pair_connective
-- On EQUIV reduce production thf_conn_term -> thf_pair_connective
-- On EQUAL reduce production thf_conn_term -> thf_pair_connective
-- On COMMA reduce production thf_conn_term -> thf_pair_connective
-- On COLON reduce production thf_conn_term -> thf_pair_connective
-- On ARROW reduce production thf_conn_term -> thf_pair_connective
-- On APPLY reduce production thf_conn_term -> thf_pair_connective
-- On AND reduce production thf_conn_term -> thf_pair_connective

State 346:
thf_unitary_formula -> thf_let . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_unitary_formula -> thf_let
-- On VLINE reduce production thf_unitary_formula -> thf_let
-- On STAR reduce production thf_unitary_formula -> thf_let
-- On RIGHT_PAREN reduce production thf_unitary_formula -> thf_let
-- On RIGHT_BRACKET reduce production thf_unitary_formula -> thf_let
-- On PLUS reduce production thf_unitary_formula -> thf_let
-- On NOT_EQUAL reduce production thf_unitary_formula -> thf_let
-- On NOTVLINE reduce production thf_unitary_formula -> thf_let
-- On NOTAND reduce production thf_unitary_formula -> thf_let
-- On LEFT_IMPLY reduce production thf_unitary_formula -> thf_let
-- On IMPLY reduce production thf_unitary_formula -> thf_let
-- On EQUIV reduce production thf_unitary_formula -> thf_let
-- On EQUAL reduce production thf_unitary_formula -> thf_let
-- On COMMA reduce production thf_unitary_formula -> thf_let
-- On ARROW reduce production thf_unitary_formula -> thf_let
-- On APPLY reduce production thf_unitary_formula -> thf_let
-- On AND reduce production thf_unitary_formula -> thf_let

State 347:
thf_atom -> thf_conn_term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_atom -> thf_conn_term
-- On VLINE reduce production thf_atom -> thf_conn_term
-- On STAR reduce production thf_atom -> thf_conn_term
-- On RIGHT_PAREN reduce production thf_atom -> thf_conn_term
-- On RIGHT_BRACKET reduce production thf_atom -> thf_conn_term
-- On PLUS reduce production thf_atom -> thf_conn_term
-- On NOT_EQUAL reduce production thf_atom -> thf_conn_term
-- On NOTVLINE reduce production thf_atom -> thf_conn_term
-- On NOTAND reduce production thf_atom -> thf_conn_term
-- On LEFT_IMPLY reduce production thf_atom -> thf_conn_term
-- On IMPLY reduce production thf_atom -> thf_conn_term
-- On EQUIV reduce production thf_atom -> thf_conn_term
-- On EQUAL reduce production thf_atom -> thf_conn_term
-- On COMMA reduce production thf_atom -> thf_conn_term
-- On COLON reduce production thf_atom -> thf_conn_term
-- On ARROW reduce production thf_atom -> thf_conn_term
-- On APPLY reduce production thf_atom -> thf_conn_term
-- On AND reduce production thf_atom -> thf_conn_term

State 348:
thf_unitary_formula -> thf_conditional . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_unitary_formula -> thf_conditional
-- On VLINE reduce production thf_unitary_formula -> thf_conditional
-- On STAR reduce production thf_unitary_formula -> thf_conditional
-- On RIGHT_PAREN reduce production thf_unitary_formula -> thf_conditional
-- On RIGHT_BRACKET reduce production thf_unitary_formula -> thf_conditional
-- On PLUS reduce production thf_unitary_formula -> thf_conditional
-- On NOT_EQUAL reduce production thf_unitary_formula -> thf_conditional
-- On NOTVLINE reduce production thf_unitary_formula -> thf_conditional
-- On NOTAND reduce production thf_unitary_formula -> thf_conditional
-- On LEFT_IMPLY reduce production thf_unitary_formula -> thf_conditional
-- On IMPLY reduce production thf_unitary_formula -> thf_conditional
-- On EQUIV reduce production thf_unitary_formula -> thf_conditional
-- On EQUAL reduce production thf_unitary_formula -> thf_conditional
-- On COMMA reduce production thf_unitary_formula -> thf_conditional
-- On ARROW reduce production thf_unitary_formula -> thf_conditional
-- On APPLY reduce production thf_unitary_formula -> thf_conditional
-- On AND reduce production thf_unitary_formula -> thf_conditional

State 349:
thf_unitary_formula -> thf_atom . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_unitary_formula -> thf_atom
-- On VLINE reduce production thf_unitary_formula -> thf_atom
-- On STAR reduce production thf_unitary_formula -> thf_atom
-- On RIGHT_PAREN reduce production thf_unitary_formula -> thf_atom
-- On RIGHT_BRACKET reduce production thf_unitary_formula -> thf_atom
-- On PLUS reduce production thf_unitary_formula -> thf_atom
-- On NOT_EQUAL reduce production thf_unitary_formula -> thf_atom
-- On NOTVLINE reduce production thf_unitary_formula -> thf_atom
-- On NOTAND reduce production thf_unitary_formula -> thf_atom
-- On LEFT_IMPLY reduce production thf_unitary_formula -> thf_atom
-- On IMPLY reduce production thf_unitary_formula -> thf_atom
-- On EQUIV reduce production thf_unitary_formula -> thf_atom
-- On EQUAL reduce production thf_unitary_formula -> thf_atom
-- On COMMA reduce production thf_unitary_formula -> thf_atom
-- On ARROW reduce production thf_unitary_formula -> thf_atom
-- On APPLY reduce production thf_unitary_formula -> thf_atom
-- On AND reduce production thf_unitary_formula -> thf_atom

State 350:
thf_atom -> term . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_atom -> term
-- On VLINE reduce production thf_atom -> term
-- On STAR reduce production thf_atom -> term
-- On RIGHT_PAREN reduce production thf_atom -> term
-- On RIGHT_BRACKET reduce production thf_atom -> term
-- On PLUS reduce production thf_atom -> term
-- On NOT_EQUAL reduce production thf_atom -> term
-- On NOTVLINE reduce production thf_atom -> term
-- On NOTAND reduce production thf_atom -> term
-- On LEFT_IMPLY reduce production thf_atom -> term
-- On IMPLY reduce production thf_atom -> term
-- On EQUIV reduce production thf_atom -> term
-- On EQUAL reduce production thf_atom -> term
-- On COMMA reduce production thf_atom -> term
-- On COLON reduce production thf_atom -> term
-- On ARROW reduce production thf_atom -> term
-- On APPLY reduce production thf_atom -> term
-- On AND reduce production thf_atom -> term

State 351:
thf_pair_connective -> infix_inequality . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_pair_connective -> infix_inequality
-- On VLINE reduce production thf_pair_connective -> infix_inequality
-- On UPPER_WORD reduce production thf_pair_connective -> infix_inequality
-- On STAR reduce production thf_pair_connective -> infix_inequality
-- On SINGLE_QUOTED reduce production thf_pair_connective -> infix_inequality
-- On SIGMA reduce production thf_pair_connective -> infix_inequality
-- On RIGHT_PAREN reduce production thf_pair_connective -> infix_inequality
-- On RIGHT_BRACKET reduce production thf_pair_connective -> infix_inequality
-- On REAL reduce production thf_pair_connective -> infix_inequality
-- On RATIONAL reduce production thf_pair_connective -> infix_inequality
-- On PLUS reduce production thf_pair_connective -> infix_inequality
-- On PI reduce production thf_pair_connective -> infix_inequality
-- On NOT_EQUAL reduce production thf_pair_connective -> infix_inequality
-- On NOTVLINE reduce production thf_pair_connective -> infix_inequality
-- On NOTAND reduce production thf_pair_connective -> infix_inequality
-- On NOT reduce production thf_pair_connective -> infix_inequality
-- On LOWER_WORD reduce production thf_pair_connective -> infix_inequality
-- On LET_TT reduce production thf_pair_connective -> infix_inequality
-- On LET_TF reduce production thf_pair_connective -> infix_inequality
-- On LET_FT reduce production thf_pair_connective -> infix_inequality
-- On LET_FF reduce production thf_pair_connective -> infix_inequality
-- On LEFT_PAREN reduce production thf_pair_connective -> infix_inequality
-- On LEFT_IMPLY reduce production thf_pair_connective -> infix_inequality
-- On LAMBDA reduce production thf_pair_connective -> infix_inequality
-- On ITE_T reduce production thf_pair_connective -> infix_inequality
-- On ITE_F reduce production thf_pair_connective -> infix_inequality
-- On INTEGER reduce production thf_pair_connective -> infix_inequality
-- On INDEFINITE_DESCRIPTION reduce production thf_pair_connective -> infix_inequality
-- On IMPLY reduce production thf_pair_connective -> infix_inequality
-- On FORALL_TY reduce production thf_pair_connective -> infix_inequality
-- On FORALL reduce production thf_pair_connective -> infix_inequality
-- On EXISTS_TY reduce production thf_pair_connective -> infix_inequality
-- On EXISTS reduce production thf_pair_connective -> infix_inequality
-- On EQUIV reduce production thf_pair_connective -> infix_inequality
-- On EQUAL reduce production thf_pair_connective -> infix_inequality
-- On DOLLAR_WORD reduce production thf_pair_connective -> infix_inequality
-- On DOLLAR_DOLLAR_WORD reduce production thf_pair_connective -> infix_inequality
-- On DISTINCT_OBJECT reduce production thf_pair_connective -> infix_inequality
-- On DEFINITE_DESCRIPTION reduce production thf_pair_connective -> infix_inequality
-- On COMMA reduce production thf_pair_connective -> infix_inequality
-- On COLON reduce production thf_pair_connective -> infix_inequality
-- On ARROW reduce production thf_pair_connective -> infix_inequality
-- On APPLY reduce production thf_pair_connective -> infix_inequality
-- On AND reduce production thf_pair_connective -> infix_inequality

State 352:
thf_pair_connective -> infix_equality . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_pair_connective -> infix_equality
-- On VLINE reduce production thf_pair_connective -> infix_equality
-- On UPPER_WORD reduce production thf_pair_connective -> infix_equality
-- On STAR reduce production thf_pair_connective -> infix_equality
-- On SINGLE_QUOTED reduce production thf_pair_connective -> infix_equality
-- On SIGMA reduce production thf_pair_connective -> infix_equality
-- On RIGHT_PAREN reduce production thf_pair_connective -> infix_equality
-- On RIGHT_BRACKET reduce production thf_pair_connective -> infix_equality
-- On REAL reduce production thf_pair_connective -> infix_equality
-- On RATIONAL reduce production thf_pair_connective -> infix_equality
-- On PLUS reduce production thf_pair_connective -> infix_equality
-- On PI reduce production thf_pair_connective -> infix_equality
-- On NOT_EQUAL reduce production thf_pair_connective -> infix_equality
-- On NOTVLINE reduce production thf_pair_connective -> infix_equality
-- On NOTAND reduce production thf_pair_connective -> infix_equality
-- On NOT reduce production thf_pair_connective -> infix_equality
-- On LOWER_WORD reduce production thf_pair_connective -> infix_equality
-- On LET_TT reduce production thf_pair_connective -> infix_equality
-- On LET_TF reduce production thf_pair_connective -> infix_equality
-- On LET_FT reduce production thf_pair_connective -> infix_equality
-- On LET_FF reduce production thf_pair_connective -> infix_equality
-- On LEFT_PAREN reduce production thf_pair_connective -> infix_equality
-- On LEFT_IMPLY reduce production thf_pair_connective -> infix_equality
-- On LAMBDA reduce production thf_pair_connective -> infix_equality
-- On ITE_T reduce production thf_pair_connective -> infix_equality
-- On ITE_F reduce production thf_pair_connective -> infix_equality
-- On INTEGER reduce production thf_pair_connective -> infix_equality
-- On INDEFINITE_DESCRIPTION reduce production thf_pair_connective -> infix_equality
-- On IMPLY reduce production thf_pair_connective -> infix_equality
-- On FORALL_TY reduce production thf_pair_connective -> infix_equality
-- On FORALL reduce production thf_pair_connective -> infix_equality
-- On EXISTS_TY reduce production thf_pair_connective -> infix_equality
-- On EXISTS reduce production thf_pair_connective -> infix_equality
-- On EQUIV reduce production thf_pair_connective -> infix_equality
-- On EQUAL reduce production thf_pair_connective -> infix_equality
-- On DOLLAR_WORD reduce production thf_pair_connective -> infix_equality
-- On DOLLAR_DOLLAR_WORD reduce production thf_pair_connective -> infix_equality
-- On DISTINCT_OBJECT reduce production thf_pair_connective -> infix_equality
-- On DEFINITE_DESCRIPTION reduce production thf_pair_connective -> infix_equality
-- On COMMA reduce production thf_pair_connective -> infix_equality
-- On COLON reduce production thf_pair_connective -> infix_equality
-- On ARROW reduce production thf_pair_connective -> infix_equality
-- On APPLY reduce production thf_pair_connective -> infix_equality
-- On AND reduce production thf_pair_connective -> infix_equality

State 353:
thf_quantifier -> fol_quantifier . [ LEFT_BRACKET ]
-- On LEFT_BRACKET reduce production thf_quantifier -> fol_quantifier

State 354:
thf_pair_connective -> binary_connective . [ XOR VLINE UPPER_WORD STAR SINGLE_QUOTED SIGMA RIGHT_PAREN RIGHT_BRACKET REAL RATIONAL PLUS PI NOT_EQUAL NOTVLINE NOTAND NOT LOWER_WORD LET_TT LET_TF LET_FT LET_FF LEFT_PAREN LEFT_IMPLY LAMBDA ITE_T ITE_F INTEGER INDEFINITE_DESCRIPTION IMPLY FORALL_TY FORALL EXISTS_TY EXISTS EQUIV EQUAL DOLLAR_WORD DOLLAR_DOLLAR_WORD DISTINCT_OBJECT DEFINITE_DESCRIPTION COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_pair_connective -> binary_connective
-- On VLINE reduce production thf_pair_connective -> binary_connective
-- On UPPER_WORD reduce production thf_pair_connective -> binary_connective
-- On STAR reduce production thf_pair_connective -> binary_connective
-- On SINGLE_QUOTED reduce production thf_pair_connective -> binary_connective
-- On SIGMA reduce production thf_pair_connective -> binary_connective
-- On RIGHT_PAREN reduce production thf_pair_connective -> binary_connective
-- On RIGHT_BRACKET reduce production thf_pair_connective -> binary_connective
-- On REAL reduce production thf_pair_connective -> binary_connective
-- On RATIONAL reduce production thf_pair_connective -> binary_connective
-- On PLUS reduce production thf_pair_connective -> binary_connective
-- On PI reduce production thf_pair_connective -> binary_connective
-- On NOT_EQUAL reduce production thf_pair_connective -> binary_connective
-- On NOTVLINE reduce production thf_pair_connective -> binary_connective
-- On NOTAND reduce production thf_pair_connective -> binary_connective
-- On NOT reduce production thf_pair_connective -> binary_connective
-- On LOWER_WORD reduce production thf_pair_connective -> binary_connective
-- On LET_TT reduce production thf_pair_connective -> binary_connective
-- On LET_TF reduce production thf_pair_connective -> binary_connective
-- On LET_FT reduce production thf_pair_connective -> binary_connective
-- On LET_FF reduce production thf_pair_connective -> binary_connective
-- On LEFT_PAREN reduce production thf_pair_connective -> binary_connective
-- On LEFT_IMPLY reduce production thf_pair_connective -> binary_connective
-- On LAMBDA reduce production thf_pair_connective -> binary_connective
-- On ITE_T reduce production thf_pair_connective -> binary_connective
-- On ITE_F reduce production thf_pair_connective -> binary_connective
-- On INTEGER reduce production thf_pair_connective -> binary_connective
-- On INDEFINITE_DESCRIPTION reduce production thf_pair_connective -> binary_connective
-- On IMPLY reduce production thf_pair_connective -> binary_connective
-- On FORALL_TY reduce production thf_pair_connective -> binary_connective
-- On FORALL reduce production thf_pair_connective -> binary_connective
-- On EXISTS_TY reduce production thf_pair_connective -> binary_connective
-- On EXISTS reduce production thf_pair_connective -> binary_connective
-- On EQUIV reduce production thf_pair_connective -> binary_connective
-- On EQUAL reduce production thf_pair_connective -> binary_connective
-- On DOLLAR_WORD reduce production thf_pair_connective -> binary_connective
-- On DOLLAR_DOLLAR_WORD reduce production thf_pair_connective -> binary_connective
-- On DISTINCT_OBJECT reduce production thf_pair_connective -> binary_connective
-- On DEFINITE_DESCRIPTION reduce production thf_pair_connective -> binary_connective
-- On COMMA reduce production thf_pair_connective -> binary_connective
-- On COLON reduce production thf_pair_connective -> binary_connective
-- On ARROW reduce production thf_pair_connective -> binary_connective
-- On APPLY reduce production thf_pair_connective -> binary_connective
-- On AND reduce production thf_pair_connective -> binary_connective

State 355:
thf_conn_term -> assoc_connective . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
-- On XOR reduce production thf_conn_term -> assoc_connective
-- On VLINE reduce production thf_conn_term -> assoc_connective
-- On STAR reduce production thf_conn_term -> assoc_connective
-- On RIGHT_PAREN reduce production thf_conn_term -> assoc_connective
-- On RIGHT_BRACKET reduce production thf_conn_term -> assoc_connective
-- On PLUS reduce production thf_conn_term -> assoc_connective
-- On NOT_EQUAL reduce production thf_conn_term -> assoc_connective
-- On NOTVLINE reduce production thf_conn_term -> assoc_connective
-- On NOTAND reduce production thf_conn_term -> assoc_connective
-- On LEFT_IMPLY reduce production thf_conn_term -> assoc_connective
-- On IMPLY reduce production thf_conn_term -> assoc_connective
-- On EQUIV reduce production thf_conn_term -> assoc_connective
-- On EQUAL reduce production thf_conn_term -> assoc_connective
-- On COMMA reduce production thf_conn_term -> assoc_connective
-- On COLON reduce production thf_conn_term -> assoc_connective
-- On ARROW reduce production thf_conn_term -> assoc_connective
-- On APPLY reduce production thf_conn_term -> assoc_connective
-- On AND reduce production thf_conn_term -> assoc_connective

State 356:
thf_apply_formula -> thf_unitary_formula APPLY . thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA APPLY ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_formula shift to state 357
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 357:
thf_apply_formula -> thf_unitary_formula APPLY thf_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA APPLY ]
-- On RIGHT_PAREN reduce production thf_apply_formula -> thf_unitary_formula APPLY thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_apply_formula -> thf_unitary_formula APPLY thf_unitary_formula
-- On COMMA reduce production thf_apply_formula -> thf_unitary_formula APPLY thf_unitary_formula
-- On APPLY reduce production thf_apply_formula -> thf_unitary_formula APPLY thf_unitary_formula

State 358:
thf_and_formula -> thf_unitary_formula AND . thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_formula shift to state 359
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 359:
thf_and_formula -> thf_unitary_formula AND thf_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On RIGHT_PAREN reduce production thf_and_formula -> thf_unitary_formula AND thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_and_formula -> thf_unitary_formula AND thf_unitary_formula
-- On COMMA reduce production thf_and_formula -> thf_unitary_formula AND thf_unitary_formula
-- On AND reduce production thf_and_formula -> thf_unitary_formula AND thf_unitary_formula

State 360:
thf_binary_pair -> thf_unitary_formula thf_pair_connective . thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_formula shift to state 361
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 361:
thf_binary_pair -> thf_unitary_formula thf_pair_connective thf_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_binary_pair -> thf_unitary_formula thf_pair_connective thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_binary_pair -> thf_unitary_formula thf_pair_connective thf_unitary_formula
-- On COMMA reduce production thf_binary_pair -> thf_unitary_formula thf_pair_connective thf_unitary_formula

State 362:
thf_binary_type -> thf_union_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_union_type -> thf_union_type . PLUS thf_unitary_type [ RIGHT_PAREN RIGHT_BRACKET PLUS COMMA ]
-- On PLUS shift to state 363
-- On RIGHT_PAREN reduce production thf_binary_type -> thf_union_type
-- On RIGHT_BRACKET reduce production thf_binary_type -> thf_union_type
-- On COMMA reduce production thf_binary_type -> thf_union_type

State 363:
thf_union_type -> thf_union_type PLUS . thf_unitary_type [ RIGHT_PAREN RIGHT_BRACKET PLUS COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_type shift to state 364
-- On thf_unitary_formula shift to state 337
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 364:
thf_union_type -> thf_union_type PLUS thf_unitary_type . [ RIGHT_PAREN RIGHT_BRACKET PLUS COMMA ]
-- On RIGHT_PAREN reduce production thf_union_type -> thf_union_type PLUS thf_unitary_type
-- On RIGHT_BRACKET reduce production thf_union_type -> thf_union_type PLUS thf_unitary_type
-- On PLUS reduce production thf_union_type -> thf_union_type PLUS thf_unitary_type
-- On COMMA reduce production thf_union_type -> thf_union_type PLUS thf_unitary_type

State 365:
thf_type_formula -> thf_typeable_formula . COLON thf_top_level_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On COLON shift to state 366

State 366:
thf_type_formula -> thf_typeable_formula COLON . thf_top_level_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_top_level_type shift to state 368
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 374
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 367:
thf_logic_formula -> thf_type_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_logic_formula -> thf_type_formula
-- On RIGHT_BRACKET reduce production thf_logic_formula -> thf_type_formula
-- On COMMA reduce production thf_logic_formula -> thf_type_formula

State 368:
thf_type_formula -> thf_typeable_formula COLON thf_top_level_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_type_formula -> thf_typeable_formula COLON thf_top_level_type
-- On RIGHT_BRACKET reduce production thf_type_formula -> thf_typeable_formula COLON thf_top_level_type
-- On COMMA reduce production thf_type_formula -> thf_typeable_formula COLON thf_top_level_type

State 369:
thf_logic_formula -> thf_subtype . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_logic_formula -> thf_subtype
-- On RIGHT_BRACKET reduce production thf_logic_formula -> thf_subtype
-- On COMMA reduce production thf_logic_formula -> thf_subtype

State 370:
thf_binary_tuple -> thf_or_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_or_formula -> thf_or_formula . VLINE thf_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On VLINE shift to state 371
-- On RIGHT_PAREN reduce production thf_binary_tuple -> thf_or_formula
-- On RIGHT_BRACKET reduce production thf_binary_tuple -> thf_or_formula
-- On COMMA reduce production thf_binary_tuple -> thf_or_formula

State 371:
thf_or_formula -> thf_or_formula VLINE . thf_unitary_formula [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_formula shift to state 372
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 372:
thf_or_formula -> thf_or_formula VLINE thf_unitary_formula . [ VLINE RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On VLINE reduce production thf_or_formula -> thf_or_formula VLINE thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_or_formula -> thf_or_formula VLINE thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_or_formula -> thf_or_formula VLINE thf_unitary_formula
-- On COMMA reduce production thf_or_formula -> thf_or_formula VLINE thf_unitary_formula

State 373:
thf_binary_type -> thf_mapping_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_binary_type -> thf_mapping_type
-- On RIGHT_BRACKET reduce production thf_binary_type -> thf_mapping_type
-- On COMMA reduce production thf_binary_type -> thf_mapping_type

State 374:
thf_top_level_type -> thf_logic_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_top_level_type -> thf_logic_formula
-- On RIGHT_BRACKET reduce production thf_top_level_type -> thf_logic_formula
-- On COMMA reduce production thf_top_level_type -> thf_logic_formula

State 375:
thf_binary_formula -> thf_binary_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_binary_formula -> thf_binary_type
-- On RIGHT_BRACKET reduce production thf_binary_formula -> thf_binary_type
-- On COMMA reduce production thf_binary_formula -> thf_binary_type

State 376:
thf_binary_formula -> thf_binary_tuple . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_binary_formula -> thf_binary_tuple
-- On RIGHT_BRACKET reduce production thf_binary_formula -> thf_binary_tuple
-- On COMMA reduce production thf_binary_formula -> thf_binary_tuple

State 377:
thf_binary_formula -> thf_binary_pair . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_binary_formula -> thf_binary_pair
-- On RIGHT_BRACKET reduce production thf_binary_formula -> thf_binary_pair
-- On COMMA reduce production thf_binary_formula -> thf_binary_pair

State 378:
thf_logic_formula -> thf_binary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_logic_formula -> thf_binary_formula
-- On RIGHT_BRACKET reduce production thf_logic_formula -> thf_binary_formula
-- On COMMA reduce production thf_logic_formula -> thf_binary_formula

State 379:
thf_typeable_formula -> thf_atom . [ COLON ]
thf_unitary_formula -> thf_atom . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_unitary_formula -> thf_atom
-- On VLINE reduce production thf_unitary_formula -> thf_atom
-- On STAR reduce production thf_unitary_formula -> thf_atom
-- On RIGHT_PAREN reduce production thf_unitary_formula -> thf_atom
-- On RIGHT_BRACKET reduce production thf_unitary_formula -> thf_atom
-- On PLUS reduce production thf_unitary_formula -> thf_atom
-- On NOT_EQUAL reduce production thf_unitary_formula -> thf_atom
-- On NOTVLINE reduce production thf_unitary_formula -> thf_atom
-- On NOTAND reduce production thf_unitary_formula -> thf_atom
-- On LEFT_IMPLY reduce production thf_unitary_formula -> thf_atom
-- On IMPLY reduce production thf_unitary_formula -> thf_atom
-- On EQUIV reduce production thf_unitary_formula -> thf_atom
-- On EQUAL reduce production thf_unitary_formula -> thf_atom
-- On COMMA reduce production thf_unitary_formula -> thf_atom
-- On COLON reduce production thf_typeable_formula -> thf_atom
-- On ARROW reduce production thf_unitary_formula -> thf_atom
-- On APPLY reduce production thf_unitary_formula -> thf_atom
-- On AND reduce production thf_unitary_formula -> thf_atom

State 380:
thf_apply_formula -> thf_apply_formula . APPLY thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA APPLY ]
thf_binary_tuple -> thf_apply_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On APPLY shift to state 381
-- On RIGHT_PAREN reduce production thf_binary_tuple -> thf_apply_formula
-- On RIGHT_BRACKET reduce production thf_binary_tuple -> thf_apply_formula
-- On COMMA reduce production thf_binary_tuple -> thf_apply_formula

State 381:
thf_apply_formula -> thf_apply_formula APPLY . thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA APPLY ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_formula shift to state 382
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 382:
thf_apply_formula -> thf_apply_formula APPLY thf_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA APPLY ]
-- On RIGHT_PAREN reduce production thf_apply_formula -> thf_apply_formula APPLY thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_apply_formula -> thf_apply_formula APPLY thf_unitary_formula
-- On COMMA reduce production thf_apply_formula -> thf_apply_formula APPLY thf_unitary_formula
-- On APPLY reduce production thf_apply_formula -> thf_apply_formula APPLY thf_unitary_formula

State 383:
thf_and_formula -> thf_and_formula . AND thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
thf_binary_tuple -> thf_and_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On AND shift to state 384
-- On RIGHT_PAREN reduce production thf_binary_tuple -> thf_and_formula
-- On RIGHT_BRACKET reduce production thf_binary_tuple -> thf_and_formula
-- On COMMA reduce production thf_binary_tuple -> thf_and_formula

State 384:
thf_and_formula -> thf_and_formula AND . thf_unitary_formula [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_formula shift to state 385
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 385:
thf_and_formula -> thf_and_formula AND thf_unitary_formula . [ RIGHT_PAREN RIGHT_BRACKET COMMA AND ]
-- On RIGHT_PAREN reduce production thf_and_formula -> thf_and_formula AND thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_and_formula -> thf_and_formula AND thf_unitary_formula
-- On COMMA reduce production thf_and_formula -> thf_and_formula AND thf_unitary_formula
-- On AND reduce production thf_and_formula -> thf_and_formula AND thf_unitary_formula

State 386:
plain_term -> constant . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA COLON ARROW APPLY AND ]
thf_subtype -> constant . subtype_sign constant [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On LESS shift to state 387
-- On subtype_sign shift to state 389
-- On XOR reduce production plain_term -> constant
-- On VLINE reduce production plain_term -> constant
-- On STAR reduce production plain_term -> constant
-- On RIGHT_PAREN reduce production plain_term -> constant
-- On RIGHT_BRACKET reduce production plain_term -> constant
-- On PLUS reduce production plain_term -> constant
-- On NOT_EQUAL reduce production plain_term -> constant
-- On NOTVLINE reduce production plain_term -> constant
-- On NOTAND reduce production plain_term -> constant
-- On LEFT_IMPLY reduce production plain_term -> constant
-- On IMPLY reduce production plain_term -> constant
-- On EQUIV reduce production plain_term -> constant
-- On EQUAL reduce production plain_term -> constant
-- On COMMA reduce production plain_term -> constant
-- On COLON reduce production plain_term -> constant
-- On ARROW reduce production plain_term -> constant
-- On APPLY reduce production plain_term -> constant
-- On AND reduce production plain_term -> constant

State 387:
subtype_sign -> LESS . LESS [ SINGLE_QUOTED LOWER_WORD ]
-- On LESS shift to state 388

State 388:
subtype_sign -> LESS LESS . [ SINGLE_QUOTED LOWER_WORD ]
-- On SINGLE_QUOTED reduce production subtype_sign -> LESS LESS
-- On LOWER_WORD reduce production subtype_sign -> LESS LESS

State 389:
thf_subtype -> constant subtype_sign . constant [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On SINGLE_QUOTED shift to state 12
-- On LOWER_WORD shift to state 16
-- On tptp_functor shift to state 390
-- On constant shift to state 391
-- On atomic_word shift to state 57

State 390:
constant -> tptp_functor . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production constant -> tptp_functor
-- On RIGHT_BRACKET reduce production constant -> tptp_functor
-- On COMMA reduce production constant -> tptp_functor

State 391:
thf_subtype -> constant subtype_sign constant . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_subtype -> constant subtype_sign constant
-- On RIGHT_BRACKET reduce production thf_subtype -> constant subtype_sign constant
-- On COMMA reduce production thf_subtype -> constant subtype_sign constant

State 392:
thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 393

State 393:
thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On VLINE reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On STAR reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On PLUS reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On NOT_EQUAL reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On NOTVLINE reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On NOTAND reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On IMPLY reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On EQUIV reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On EQUAL reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On COMMA reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On ARROW reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On APPLY reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On AND reduce production thf_unary_formula -> thf_unary_connective LEFT_PAREN thf_logic_formula RIGHT_PAREN

State 394:
thf_union_type -> thf_unitary_type PLUS . thf_unitary_type [ RIGHT_PAREN RIGHT_BRACKET PLUS COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_type shift to state 395
-- On thf_unitary_formula shift to state 337
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 395:
thf_union_type -> thf_unitary_type PLUS thf_unitary_type . [ RIGHT_PAREN RIGHT_BRACKET PLUS COMMA ]
-- On RIGHT_PAREN reduce production thf_union_type -> thf_unitary_type PLUS thf_unitary_type
-- On RIGHT_BRACKET reduce production thf_union_type -> thf_unitary_type PLUS thf_unitary_type
-- On PLUS reduce production thf_union_type -> thf_unitary_type PLUS thf_unitary_type
-- On COMMA reduce production thf_union_type -> thf_unitary_type PLUS thf_unitary_type

State 396:
thf_mapping_type -> thf_unitary_type ARROW . thf_unitary_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_mapping_type -> thf_unitary_type ARROW . thf_mapping_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_type shift to state 397
-- On thf_unitary_formula shift to state 337
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_mapping_type shift to state 398
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 397:
thf_mapping_type -> thf_unitary_type . ARROW thf_unitary_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_mapping_type -> thf_unitary_type ARROW thf_unitary_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
thf_mapping_type -> thf_unitary_type . ARROW thf_mapping_type [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On ARROW shift to state 396
-- On RIGHT_PAREN reduce production thf_mapping_type -> thf_unitary_type ARROW thf_unitary_type
-- On RIGHT_BRACKET reduce production thf_mapping_type -> thf_unitary_type ARROW thf_unitary_type
-- On COMMA reduce production thf_mapping_type -> thf_unitary_type ARROW thf_unitary_type

State 398:
thf_mapping_type -> thf_unitary_type ARROW thf_mapping_type . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production thf_mapping_type -> thf_unitary_type ARROW thf_mapping_type
-- On RIGHT_BRACKET reduce production thf_mapping_type -> thf_unitary_type ARROW thf_mapping_type
-- On COMMA reduce production thf_mapping_type -> thf_unitary_type ARROW thf_mapping_type

State 399:
thf_unitary_formula -> LEFT_PAREN thf_logic_formula . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 400

State 400:
thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On VLINE reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On STAR reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On PLUS reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On NOT_EQUAL reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On NOTVLINE reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On NOTAND reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On IMPLY reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On EQUIV reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On EQUAL reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On COMMA reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On ARROW reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On APPLY reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On AND reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN

State 401:
thf_xprod_type -> thf_xprod_type STAR thf_unitary_type . [ STAR RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On STAR reduce production thf_xprod_type -> thf_xprod_type STAR thf_unitary_type
-- On RIGHT_PAREN reduce production thf_xprod_type -> thf_xprod_type STAR thf_unitary_type
-- On RIGHT_BRACKET reduce production thf_xprod_type -> thf_xprod_type STAR thf_unitary_type
-- On COMMA reduce production thf_xprod_type -> thf_xprod_type STAR thf_unitary_type

State 402:
thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula . COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On COMMA shift to state 403

State 403:
thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA . thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 404
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 404:
thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula . COMMA thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On COMMA shift to state 405

State 405:
thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA . thf_logic_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 406
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 406:
thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 407

State 407:
thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On VLINE reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On STAR reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On PLUS reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On NOT_EQUAL reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On NOTVLINE reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On NOTAND reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On IMPLY reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On EQUIV reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On EQUAL reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On COMMA reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On ARROW reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On APPLY reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN
-- On AND reduce production thf_conditional -> ITE_F LEFT_PAREN thf_logic_formula COMMA thf_logic_formula COMMA thf_logic_formula RIGHT_PAREN

State 408:
thf_typeable_formula -> LEFT_PAREN thf_logic_formula . RIGHT_PAREN [ COLON ]
thf_unitary_formula -> LEFT_PAREN thf_logic_formula . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 409

State 409:
thf_typeable_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN . [ COLON ]
thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On VLINE reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On STAR reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On PLUS reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On NOT_EQUAL reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On NOTVLINE reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On NOTAND reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On IMPLY reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On EQUIV reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On EQUAL reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On COMMA reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On COLON reduce production thf_typeable_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On ARROW reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On APPLY reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN
-- On AND reduce production thf_unitary_formula -> LEFT_PAREN thf_logic_formula RIGHT_PAREN

State 410:
thf_tuple -> LEFT_BRACKET thf_tuple_list . RIGHT_BRACKET [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On RIGHT_BRACKET shift to state 411

State 411:
thf_tuple -> LEFT_BRACKET thf_tuple_list RIGHT_BRACKET . [ RIGHT_PAREN GENTZEN_ARROW COMMA ]
-- On RIGHT_PAREN reduce production thf_tuple -> LEFT_BRACKET thf_tuple_list RIGHT_BRACKET
-- On GENTZEN_ARROW reduce production thf_tuple -> LEFT_BRACKET thf_tuple_list RIGHT_BRACKET
-- On COMMA reduce production thf_tuple -> LEFT_BRACKET thf_tuple_list RIGHT_BRACKET

State 412:
thf_tuple_list -> thf_logic_formula . [ RIGHT_BRACKET ]
thf_tuple_list -> thf_logic_formula . COMMA thf_tuple_list [ RIGHT_BRACKET ]
-- On COMMA shift to state 413
-- On RIGHT_BRACKET reduce production thf_tuple_list -> thf_logic_formula

State 413:
thf_tuple_list -> thf_logic_formula COMMA . thf_tuple_list [ RIGHT_BRACKET ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 326
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_tuple_list shift to state 414
-- On thf_subtype shift to state 369
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 412
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 414:
thf_tuple_list -> thf_logic_formula COMMA thf_tuple_list . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production thf_tuple_list -> thf_logic_formula COMMA thf_tuple_list

State 415:
thf_sequent -> thf_tuple . GENTZEN_ARROW thf_tuple [ RIGHT_PAREN COMMA ]
-- On GENTZEN_ARROW shift to state 416

State 416:
thf_sequent -> thf_tuple GENTZEN_ARROW . thf_tuple [ RIGHT_PAREN COMMA ]
-- On LEFT_BRACKET shift to state 324
-- On thf_tuple shift to state 417

State 417:
thf_sequent -> thf_tuple GENTZEN_ARROW thf_tuple . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production thf_sequent -> thf_tuple GENTZEN_ARROW thf_tuple
-- On COMMA reduce production thf_sequent -> thf_tuple GENTZEN_ARROW thf_tuple

State 418:
thf_sequent -> LEFT_PAREN thf_sequent . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN shift to state 419

State 419:
thf_sequent -> LEFT_PAREN thf_sequent RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production thf_sequent -> LEFT_PAREN thf_sequent RIGHT_PAREN
-- On COMMA reduce production thf_sequent -> LEFT_PAREN thf_sequent RIGHT_PAREN

State 420:
thf_formula -> thf_sequent . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production thf_formula -> thf_sequent
-- On COMMA reduce production thf_formula -> thf_sequent

State 421:
thf_formula -> thf_logic_formula . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production thf_formula -> thf_logic_formula
-- On COMMA reduce production thf_formula -> thf_logic_formula

State 422:
thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 423

State 423:
thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On VLINE reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On STAR reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On PLUS reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On NOT_EQUAL reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On NOTVLINE reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On NOTAND reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On IMPLY reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On EQUIV reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On EQUAL reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On COMMA reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On ARROW reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On APPLY reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN
-- On AND reduce production thf_let -> LET_FF LEFT_PAREN thf_let_formula_defn COMMA thf_formula RIGHT_PAREN

State 424:
thf_typed_variable -> variable COLON thf_top_level_type . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production thf_typed_variable -> variable COLON thf_top_level_type
-- On COMMA reduce production thf_typed_variable -> variable COLON thf_top_level_type

State 425:
thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list . RIGHT_BRACKET COLON thf_unitary_formula [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On RIGHT_BRACKET shift to state 426

State 426:
thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET . COLON thf_unitary_formula [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On COLON shift to state 427

State 427:
thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON . thf_unitary_formula [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 333
-- On LEFT_IMPLY shift to state 152
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_unitary_formula shift to state 428
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_let shift to state 346
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_atom shift to state 349
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 428:
thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On VLINE reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On STAR reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On RIGHT_PAREN reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On RIGHT_BRACKET reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On PLUS reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On NOT_EQUAL reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On NOTVLINE reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On NOTAND reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On LEFT_IMPLY reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On IMPLY reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On EQUIV reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On EQUAL reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On COMMA reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On ARROW reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On APPLY reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula
-- On AND reduce production thf_quantified_formula -> thf_quantifier LEFT_BRACKET thf_variable_list RIGHT_BRACKET COLON thf_unitary_formula

State 429:
thf_variable_list -> thf_variable . [ RIGHT_BRACKET ]
thf_variable_list -> thf_variable . COMMA thf_variable_list [ RIGHT_BRACKET ]
-- On COMMA shift to state 430
-- On RIGHT_BRACKET reduce production thf_variable_list -> thf_variable

State 430:
thf_variable_list -> thf_variable COMMA . thf_variable_list [ RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 11
-- On variable shift to state 316
-- On thf_variable_list shift to state 431
-- On thf_variable shift to state 429
-- On thf_typed_variable shift to state 432

State 431:
thf_variable_list -> thf_variable COMMA thf_variable_list . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production thf_variable_list -> thf_variable COMMA thf_variable_list

State 432:
thf_variable -> thf_typed_variable . [ RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET reduce production thf_variable -> thf_typed_variable
-- On COMMA reduce production thf_variable -> thf_typed_variable

State 433:
thf_let_term_defn -> thf_quantified_formula . [ COMMA ]
-- On COMMA reduce production thf_let_term_defn -> thf_quantified_formula

State 434:
thf_let -> LET_TF LEFT_PAREN thf_let_term_defn . COMMA thf_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On COMMA shift to state 435

State 435:
thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA . thf_formula RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 323
-- On LEFT_IMPLY shift to state 152
-- On LEFT_BRACKET shift to state 324
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_tuple shift to state 415
-- On thf_subtype shift to state 369
-- On thf_sequent shift to state 420
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 421
-- On thf_let shift to state 346
-- On thf_formula shift to state 436
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 436:
thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula . RIGHT_PAREN [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On RIGHT_PAREN shift to state 437

State 437:
thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN . [ XOR VLINE STAR RIGHT_PAREN RIGHT_BRACKET PLUS NOT_EQUAL NOTVLINE NOTAND LEFT_IMPLY IMPLY EQUIV EQUAL COMMA ARROW APPLY AND ]
-- On XOR reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On VLINE reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On STAR reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On RIGHT_PAREN reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On PLUS reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On NOT_EQUAL reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On NOTVLINE reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On NOTAND reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On LEFT_IMPLY reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On IMPLY reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On EQUIV reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On EQUAL reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On COMMA reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On ARROW reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On APPLY reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN
-- On AND reduce production thf_let -> LET_TF LEFT_PAREN thf_let_term_defn COMMA thf_formula RIGHT_PAREN

State 438:
formula_data -> DOLLAR_THF LEFT_PAREN thf_formula . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN shift to state 439

State 439:
formula_data -> DOLLAR_THF LEFT_PAREN thf_formula RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production formula_data -> DOLLAR_THF LEFT_PAREN thf_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production formula_data -> DOLLAR_THF LEFT_PAREN thf_formula RIGHT_PAREN
-- On COMMA reduce production formula_data -> DOLLAR_THF LEFT_PAREN thf_formula RIGHT_PAREN
-- On COLON reduce production formula_data -> DOLLAR_THF LEFT_PAREN thf_formula RIGHT_PAREN

State 440:
formula_data -> DOLLAR_TFF . LEFT_PAREN tff_formula RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On LEFT_PAREN shift to state 441

State 441:
formula_data -> DOLLAR_TFF LEFT_PAREN . tff_formula RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 179
-- On LEFT_BRACKET shift to state 180
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 187
-- On tff_untyped_atom shift to state 188
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_typed_atom shift to state 228
-- On tff_tuple shift to state 222
-- On tff_sequent shift to state 229
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 230
-- On tff_let shift to state 132
-- On tff_formula shift to state 442
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 227
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 442:
formula_data -> DOLLAR_TFF LEFT_PAREN tff_formula . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN shift to state 443

State 443:
formula_data -> DOLLAR_TFF LEFT_PAREN tff_formula RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production formula_data -> DOLLAR_TFF LEFT_PAREN tff_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production formula_data -> DOLLAR_TFF LEFT_PAREN tff_formula RIGHT_PAREN
-- On COMMA reduce production formula_data -> DOLLAR_TFF LEFT_PAREN tff_formula RIGHT_PAREN
-- On COLON reduce production formula_data -> DOLLAR_TFF LEFT_PAREN tff_formula RIGHT_PAREN

State 444:
formula_data -> DOLLAR_FOT . LEFT_PAREN term RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On LEFT_PAREN shift to state 445

State 445:
formula_data -> DOLLAR_FOT LEFT_PAREN . term RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 446
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59

State 446:
formula_data -> DOLLAR_FOT LEFT_PAREN term . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN shift to state 447

State 447:
formula_data -> DOLLAR_FOT LEFT_PAREN term RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production formula_data -> DOLLAR_FOT LEFT_PAREN term RIGHT_PAREN
-- On RIGHT_BRACKET reduce production formula_data -> DOLLAR_FOT LEFT_PAREN term RIGHT_PAREN
-- On COMMA reduce production formula_data -> DOLLAR_FOT LEFT_PAREN term RIGHT_PAREN
-- On COLON reduce production formula_data -> DOLLAR_FOT LEFT_PAREN term RIGHT_PAREN

State 448:
formula_data -> DOLLAR_FOF . LEFT_PAREN fof_formula RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On LEFT_PAREN shift to state 449

State 449:
formula_data -> DOLLAR_FOF LEFT_PAREN . fof_formula RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 251
-- On LEFT_BRACKET shift to state 252
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 270
-- On fof_unary_formula shift to state 266
-- On fof_tuple shift to state 293
-- On fof_sequent shift to state 450
-- On fof_quantified_formula shift to state 267
-- On fof_or_formula shift to state 277
-- On fof_logic_formula shift to state 451
-- On fof_formula shift to state 452
-- On fof_binary_nonassoc shift to state 282
-- On fof_binary_formula shift to state 283
-- On fof_binary_assoc shift to state 284
-- On fof_and_formula shift to state 285
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 450:
fof_formula -> fof_sequent . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production fof_formula -> fof_sequent
-- On COMMA reduce production fof_formula -> fof_sequent

State 451:
fof_formula -> fof_logic_formula . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production fof_formula -> fof_logic_formula
-- On COMMA reduce production fof_formula -> fof_logic_formula

State 452:
formula_data -> DOLLAR_FOF LEFT_PAREN fof_formula . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN shift to state 453

State 453:
formula_data -> DOLLAR_FOF LEFT_PAREN fof_formula RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production formula_data -> DOLLAR_FOF LEFT_PAREN fof_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production formula_data -> DOLLAR_FOF LEFT_PAREN fof_formula RIGHT_PAREN
-- On COMMA reduce production formula_data -> DOLLAR_FOF LEFT_PAREN fof_formula RIGHT_PAREN
-- On COLON reduce production formula_data -> DOLLAR_FOF LEFT_PAREN fof_formula RIGHT_PAREN

State 454:
formula_data -> DOLLAR_CNF . LEFT_PAREN cnf_formula RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On LEFT_PAREN shift to state 455

State 455:
formula_data -> DOLLAR_CNF LEFT_PAREN . cnf_formula RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 456
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 457
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On literal shift to state 459
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_infix_unary shift to state 460
-- On distinct_object shift to state 47
-- On disjunction shift to state 466
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On cnf_formula shift to state 467
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 464
-- On atomic_defined_word shift to state 59

State 456:
cnf_formula -> LEFT_PAREN . disjunction RIGHT_PAREN [ RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 457
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On literal shift to state 459
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_infix_unary shift to state 460
-- On distinct_object shift to state 47
-- On disjunction shift to state 461
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 464
-- On atomic_defined_word shift to state 59

State 457:
literal -> unary_negation . atomic_formula [ VLINE RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On tptp_functor shift to state 32
-- On term shift to state 107
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 458
-- On atomic_defined_word shift to state 59

State 458:
literal -> unary_negation atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production literal -> unary_negation atomic_formula
-- On RIGHT_PAREN reduce production literal -> unary_negation atomic_formula
-- On COMMA reduce production literal -> unary_negation atomic_formula

State 459:
disjunction -> literal . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production disjunction -> literal
-- On RIGHT_PAREN reduce production disjunction -> literal
-- On COMMA reduce production disjunction -> literal

State 460:
literal -> fol_infix_unary . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production literal -> fol_infix_unary
-- On RIGHT_PAREN reduce production literal -> fol_infix_unary
-- On COMMA reduce production literal -> fol_infix_unary

State 461:
cnf_formula -> LEFT_PAREN disjunction . RIGHT_PAREN [ RIGHT_PAREN COMMA ]
disjunction -> disjunction . VLINE literal [ VLINE RIGHT_PAREN ]
-- On VLINE shift to state 462
-- On RIGHT_PAREN shift to state 465

State 462:
disjunction -> disjunction VLINE . literal [ VLINE RIGHT_PAREN COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 457
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On literal shift to state 463
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_infix_unary shift to state 460
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 464
-- On atomic_defined_word shift to state 59

State 463:
disjunction -> disjunction VLINE literal . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production disjunction -> disjunction VLINE literal
-- On RIGHT_PAREN reduce production disjunction -> disjunction VLINE literal
-- On COMMA reduce production disjunction -> disjunction VLINE literal

State 464:
literal -> atomic_formula . [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE reduce production literal -> atomic_formula
-- On RIGHT_PAREN reduce production literal -> atomic_formula
-- On COMMA reduce production literal -> atomic_formula

State 465:
cnf_formula -> LEFT_PAREN disjunction RIGHT_PAREN . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production cnf_formula -> LEFT_PAREN disjunction RIGHT_PAREN
-- On COMMA reduce production cnf_formula -> LEFT_PAREN disjunction RIGHT_PAREN

State 466:
cnf_formula -> disjunction . [ RIGHT_PAREN COMMA ]
disjunction -> disjunction . VLINE literal [ VLINE RIGHT_PAREN COMMA ]
-- On VLINE shift to state 462
-- On RIGHT_PAREN reduce production cnf_formula -> disjunction
-- On COMMA reduce production cnf_formula -> disjunction

State 467:
formula_data -> DOLLAR_CNF LEFT_PAREN cnf_formula . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN shift to state 468

State 468:
formula_data -> DOLLAR_CNF LEFT_PAREN cnf_formula RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production formula_data -> DOLLAR_CNF LEFT_PAREN cnf_formula RIGHT_PAREN
-- On RIGHT_BRACKET reduce production formula_data -> DOLLAR_CNF LEFT_PAREN cnf_formula RIGHT_PAREN
-- On COMMA reduce production formula_data -> DOLLAR_CNF LEFT_PAREN cnf_formula RIGHT_PAREN
-- On COLON reduce production formula_data -> DOLLAR_CNF LEFT_PAREN cnf_formula RIGHT_PAREN

State 469:
general_data -> variable . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production general_data -> variable
-- On RIGHT_BRACKET reduce production general_data -> variable
-- On COMMA reduce production general_data -> variable
-- On COLON reduce production general_data -> variable

State 470:
general_data -> number . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production general_data -> number
-- On RIGHT_BRACKET reduce production general_data -> number
-- On COMMA reduce production general_data -> number
-- On COLON reduce production general_data -> number

State 471:
general_list -> LEFT_BRACKET general_terms . RIGHT_BRACKET [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_BRACKET shift to state 472

State 472:
general_list -> LEFT_BRACKET general_terms RIGHT_BRACKET . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_list -> LEFT_BRACKET general_terms RIGHT_BRACKET
-- On RIGHT_BRACKET reduce production general_list -> LEFT_BRACKET general_terms RIGHT_BRACKET
-- On COMMA reduce production general_list -> LEFT_BRACKET general_terms RIGHT_BRACKET

State 473:
general_terms -> general_term . [ RIGHT_PAREN RIGHT_BRACKET ]
general_terms -> general_term . COMMA general_terms [ RIGHT_PAREN RIGHT_BRACKET ]
-- On COMMA shift to state 474
-- On RIGHT_PAREN reduce production general_terms -> general_term
-- On RIGHT_BRACKET reduce production general_terms -> general_term

State 474:
general_terms -> general_term COMMA . general_terms [ RIGHT_PAREN RIGHT_BRACKET ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LEFT_BRACKET shift to state 300
-- On INTEGER shift to state 27
-- On DOLLAR_THF shift to state 302
-- On DOLLAR_TFF shift to state 440
-- On DOLLAR_FOT shift to state 444
-- On DOLLAR_FOF shift to state 448
-- On DOLLAR_CNF shift to state 454
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 469
-- On real shift to state 40
-- On rational shift to state 41
-- On number shift to state 470
-- On integer shift to state 45
-- On general_terms shift to state 475
-- On general_term shift to state 473
-- On general_list shift to state 476
-- On general_function shift to state 477
-- On general_data shift to state 478
-- On formula_data shift to state 481
-- On distinct_object shift to state 482
-- On atomic_word shift to state 483

State 475:
general_terms -> general_term COMMA general_terms . [ RIGHT_PAREN RIGHT_BRACKET ]
-- On RIGHT_PAREN reduce production general_terms -> general_term COMMA general_terms
-- On RIGHT_BRACKET reduce production general_terms -> general_term COMMA general_terms

State 476:
general_term -> general_list . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_term -> general_list
-- On RIGHT_BRACKET reduce production general_term -> general_list
-- On COMMA reduce production general_term -> general_list

State 477:
general_data -> general_function . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production general_data -> general_function
-- On RIGHT_BRACKET reduce production general_data -> general_function
-- On COMMA reduce production general_data -> general_function
-- On COLON reduce production general_data -> general_function

State 478:
general_term -> general_data . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
general_term -> general_data . COLON general_term [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On COLON shift to state 479
-- On RIGHT_PAREN reduce production general_term -> general_data
-- On RIGHT_BRACKET reduce production general_term -> general_data
-- On COMMA reduce production general_term -> general_data

State 479:
general_term -> general_data COLON . general_term [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LEFT_BRACKET shift to state 300
-- On INTEGER shift to state 27
-- On DOLLAR_THF shift to state 302
-- On DOLLAR_TFF shift to state 440
-- On DOLLAR_FOT shift to state 444
-- On DOLLAR_FOF shift to state 448
-- On DOLLAR_CNF shift to state 454
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 469
-- On real shift to state 40
-- On rational shift to state 41
-- On number shift to state 470
-- On integer shift to state 45
-- On general_term shift to state 480
-- On general_list shift to state 476
-- On general_function shift to state 477
-- On general_data shift to state 478
-- On formula_data shift to state 481
-- On distinct_object shift to state 482
-- On atomic_word shift to state 483

State 480:
general_term -> general_data COLON general_term . [ RIGHT_PAREN RIGHT_BRACKET COMMA ]
-- On RIGHT_PAREN reduce production general_term -> general_data COLON general_term
-- On RIGHT_BRACKET reduce production general_term -> general_data COLON general_term
-- On COMMA reduce production general_term -> general_data COLON general_term

State 481:
general_data -> formula_data . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production general_data -> formula_data
-- On RIGHT_BRACKET reduce production general_data -> formula_data
-- On COMMA reduce production general_data -> formula_data
-- On COLON reduce production general_data -> formula_data

State 482:
general_data -> distinct_object . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production general_data -> distinct_object
-- On RIGHT_BRACKET reduce production general_data -> distinct_object
-- On COMMA reduce production general_data -> distinct_object
-- On COLON reduce production general_data -> distinct_object

State 483:
general_data -> atomic_word . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
general_function -> atomic_word . LEFT_PAREN general_terms RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On LEFT_PAREN shift to state 484
-- On RIGHT_PAREN reduce production general_data -> atomic_word
-- On RIGHT_BRACKET reduce production general_data -> atomic_word
-- On COMMA reduce production general_data -> atomic_word
-- On COLON reduce production general_data -> atomic_word

State 484:
general_function -> atomic_word LEFT_PAREN . general_terms RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On LOWER_WORD shift to state 16
-- On LEFT_BRACKET shift to state 300
-- On INTEGER shift to state 27
-- On DOLLAR_THF shift to state 302
-- On DOLLAR_TFF shift to state 440
-- On DOLLAR_FOT shift to state 444
-- On DOLLAR_FOF shift to state 448
-- On DOLLAR_CNF shift to state 454
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 469
-- On real shift to state 40
-- On rational shift to state 41
-- On number shift to state 470
-- On integer shift to state 45
-- On general_terms shift to state 485
-- On general_term shift to state 473
-- On general_list shift to state 476
-- On general_function shift to state 477
-- On general_data shift to state 478
-- On formula_data shift to state 481
-- On distinct_object shift to state 482
-- On atomic_word shift to state 483

State 485:
general_function -> atomic_word LEFT_PAREN general_terms . RIGHT_PAREN [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN shift to state 486

State 486:
general_function -> atomic_word LEFT_PAREN general_terms RIGHT_PAREN . [ RIGHT_PAREN RIGHT_BRACKET COMMA COLON ]
-- On RIGHT_PAREN reduce production general_function -> atomic_word LEFT_PAREN general_terms RIGHT_PAREN
-- On RIGHT_BRACKET reduce production general_function -> atomic_word LEFT_PAREN general_terms RIGHT_PAREN
-- On COMMA reduce production general_function -> atomic_word LEFT_PAREN general_terms RIGHT_PAREN
-- On COLON reduce production general_function -> atomic_word LEFT_PAREN general_terms RIGHT_PAREN

State 487:
annotations -> COMMA source . optional_info [ RIGHT_PAREN ]
-- On COMMA shift to state 488
-- On optional_info shift to state 491
-- On RIGHT_PAREN reduce production optional_info ->

State 488:
optional_info -> COMMA . useful_info [ RIGHT_PAREN ]
-- On LEFT_BRACKET shift to state 300
-- On useful_info shift to state 489
-- On general_list shift to state 490

State 489:
optional_info -> COMMA useful_info . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production optional_info -> COMMA useful_info

State 490:
useful_info -> general_list . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production useful_info -> general_list

State 491:
annotations -> COMMA source optional_info . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production annotations -> COMMA source optional_info

State 492:
source -> general_term . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production source -> general_term
-- On COMMA reduce production source -> general_term

State 493:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations . RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On RIGHT_PAREN shift to state 494

State 494:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN . DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On DOT shift to state 495

State 495:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT
-- On THF reduce production tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT
-- On EOF reduce production tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT

State 496:
tpi_formula -> fof_formula . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production tpi_formula -> fof_formula
-- On COMMA reduce production tpi_formula -> fof_formula

State 497:
thf_annotated -> THF . LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LEFT_PAREN shift to state 498

State 498:
thf_annotated -> THF LEFT_PAREN . name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 499

State 499:
thf_annotated -> THF LEFT_PAREN name . COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 500

State 500:
thf_annotated -> THF LEFT_PAREN name COMMA . formula_role COMMA thf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 501

State 501:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role . COMMA thf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 502

State 502:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA . thf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 323
-- On LEFT_IMPLY shift to state 152
-- On LEFT_BRACKET shift to state 324
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_tuple shift to state 415
-- On thf_subtype shift to state 369
-- On thf_sequent shift to state 420
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 421
-- On thf_let shift to state 346
-- On thf_formula shift to state 503
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 503:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula . annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 299
-- On annotations shift to state 504
-- On RIGHT_PAREN reduce production annotations ->

State 504:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations . RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On RIGHT_PAREN shift to state 505

State 505:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN . DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On DOT shift to state 506

State 506:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT
-- On THF reduce production thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT
-- On EOF reduce production thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT

State 507:
tff_annotated -> TFF . LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LEFT_PAREN shift to state 508

State 508:
tff_annotated -> TFF LEFT_PAREN . name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 509

State 509:
tff_annotated -> TFF LEFT_PAREN name . COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 510

State 510:
tff_annotated -> TFF LEFT_PAREN name COMMA . formula_role COMMA tff_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 511

State 511:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role . COMMA tff_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 512

State 512:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA . tff_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 179
-- On LEFT_BRACKET shift to state 180
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 187
-- On tff_untyped_atom shift to state 188
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_typed_atom shift to state 228
-- On tff_tuple shift to state 222
-- On tff_sequent shift to state 229
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 230
-- On tff_let shift to state 132
-- On tff_formula shift to state 513
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 227
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 513:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula . annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 299
-- On annotations shift to state 514
-- On RIGHT_PAREN reduce production annotations ->

State 514:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations . RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On RIGHT_PAREN shift to state 515

State 515:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN . DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On DOT shift to state 516

State 516:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT
-- On THF reduce production tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT
-- On EOF reduce production tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT

State 517:
tptp_include -> INCLUDE . LEFT_PAREN file_name formula_section RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LEFT_PAREN shift to state 518

State 518:
tptp_include -> INCLUDE LEFT_PAREN . file_name formula_section RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On SINGLE_QUOTED shift to state 519
-- On file_name shift to state 520

State 519:
file_name -> SINGLE_QUOTED . [ RIGHT_PAREN COMMA ]
-- On RIGHT_PAREN reduce production file_name -> SINGLE_QUOTED
-- On COMMA reduce production file_name -> SINGLE_QUOTED

State 520:
tptp_include -> INCLUDE LEFT_PAREN file_name . formula_section RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 521
-- On formula_section shift to state 528
-- On RIGHT_PAREN reduce production formula_section ->

State 521:
formula_section -> COMMA . LEFT_BRACKET name_list RIGHT_BRACKET [ RIGHT_PAREN ]
-- On LEFT_BRACKET shift to state 522

State 522:
formula_section -> COMMA LEFT_BRACKET . name_list RIGHT_BRACKET [ RIGHT_PAREN ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name_list shift to state 523
-- On name shift to state 525

State 523:
formula_section -> COMMA LEFT_BRACKET name_list . RIGHT_BRACKET [ RIGHT_PAREN ]
-- On RIGHT_BRACKET shift to state 524

State 524:
formula_section -> COMMA LEFT_BRACKET name_list RIGHT_BRACKET . [ RIGHT_PAREN ]
-- On RIGHT_PAREN reduce production formula_section -> COMMA LEFT_BRACKET name_list RIGHT_BRACKET

State 525:
name_list -> name . [ RIGHT_BRACKET ]
name_list -> name . COMMA name_list [ RIGHT_BRACKET ]
-- On COMMA shift to state 526
-- On RIGHT_BRACKET reduce production name_list -> name

State 526:
name_list -> name COMMA . name_list [ RIGHT_BRACKET ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name_list shift to state 527
-- On name shift to state 525

State 527:
name_list -> name COMMA name_list . [ RIGHT_BRACKET ]
-- On RIGHT_BRACKET reduce production name_list -> name COMMA name_list

State 528:
tptp_include -> INCLUDE LEFT_PAREN file_name formula_section . RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On RIGHT_PAREN shift to state 529

State 529:
tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN . DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On DOT shift to state 530

State 530:
tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT
-- On THF reduce production tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT
-- On TFF reduce production tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT
-- On INCLUDE reduce production tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT
-- On FOF reduce production tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT
-- On EOF reduce production tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT
-- On CNF reduce production tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT

State 531:
fof_annotated -> FOF . LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LEFT_PAREN shift to state 532

State 532:
fof_annotated -> FOF LEFT_PAREN . name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 533

State 533:
fof_annotated -> FOF LEFT_PAREN name . COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 534

State 534:
fof_annotated -> FOF LEFT_PAREN name COMMA . formula_role COMMA fof_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 535

State 535:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role . COMMA fof_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 536

State 536:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA . fof_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 251
-- On LEFT_BRACKET shift to state 252
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 270
-- On fof_unary_formula shift to state 266
-- On fof_tuple shift to state 293
-- On fof_sequent shift to state 450
-- On fof_quantified_formula shift to state 267
-- On fof_or_formula shift to state 277
-- On fof_logic_formula shift to state 451
-- On fof_formula shift to state 537
-- On fof_binary_nonassoc shift to state 282
-- On fof_binary_formula shift to state 283
-- On fof_binary_assoc shift to state 284
-- On fof_and_formula shift to state 285
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 537:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula . annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 299
-- On annotations shift to state 538
-- On RIGHT_PAREN reduce production annotations ->

State 538:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations . RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On RIGHT_PAREN shift to state 539

State 539:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN . DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On DOT shift to state 540

State 540:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT
-- On THF reduce production fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT
-- On EOF reduce production fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT

State 541:
cnf_annotated -> CNF . LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LEFT_PAREN shift to state 542

State 542:
cnf_annotated -> CNF LEFT_PAREN . name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 543

State 543:
cnf_annotated -> CNF LEFT_PAREN name . COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 544

State 544:
cnf_annotated -> CNF LEFT_PAREN name COMMA . formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 545

State 545:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role . COMMA cnf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 546

State 546:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA . cnf_formula annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 456
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 457
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On literal shift to state 459
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_infix_unary shift to state 460
-- On distinct_object shift to state 47
-- On disjunction shift to state 466
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On cnf_formula shift to state 547
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 464
-- On atomic_defined_word shift to state 59

State 547:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula . annotations RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On COMMA shift to state 299
-- On annotations shift to state 548
-- On RIGHT_PAREN reduce production annotations ->

State 548:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations . RIGHT_PAREN DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On RIGHT_PAREN shift to state 549

State 549:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN . DOT [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On DOT shift to state 550

State 550:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On THF reduce production cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On TFF reduce production cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On INCLUDE reduce production cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On FOF reduce production cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On EOF reduce production cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT
-- On CNF reduce production cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT

State 551:
list(tptp_input) -> tptp_input . list(tptp_input) [ EOF ]
-- On TPI shift to state 1
-- On THF shift to state 497
-- On TFF shift to state 507
-- On INCLUDE shift to state 517
-- On FOF shift to state 531
-- On CNF shift to state 541
-- On tptp_input shift to state 551
-- On tptp_include shift to state 552
-- On tpi_annotated shift to state 553
-- On thf_annotated shift to state 554
-- On tff_annotated shift to state 555
-- On list(tptp_input) shift to state 556
-- On fof_annotated shift to state 557
-- On cnf_annotated shift to state 558
-- On annotated_formula shift to state 559
-- On EOF reduce production list(tptp_input) ->

State 552:
tptp_input -> tptp_include . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production tptp_input -> tptp_include
-- On THF reduce production tptp_input -> tptp_include
-- On TFF reduce production tptp_input -> tptp_include
-- On INCLUDE reduce production tptp_input -> tptp_include
-- On FOF reduce production tptp_input -> tptp_include
-- On EOF reduce production tptp_input -> tptp_include
-- On CNF reduce production tptp_input -> tptp_include

State 553:
annotated_formula -> tpi_annotated . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production annotated_formula -> tpi_annotated
-- On THF reduce production annotated_formula -> tpi_annotated
-- On TFF reduce production annotated_formula -> tpi_annotated
-- On INCLUDE reduce production annotated_formula -> tpi_annotated
-- On FOF reduce production annotated_formula -> tpi_annotated
-- On EOF reduce production annotated_formula -> tpi_annotated
-- On CNF reduce production annotated_formula -> tpi_annotated

State 554:
annotated_formula -> thf_annotated . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production annotated_formula -> thf_annotated
-- On THF reduce production annotated_formula -> thf_annotated
-- On TFF reduce production annotated_formula -> thf_annotated
-- On INCLUDE reduce production annotated_formula -> thf_annotated
-- On FOF reduce production annotated_formula -> thf_annotated
-- On EOF reduce production annotated_formula -> thf_annotated
-- On CNF reduce production annotated_formula -> thf_annotated

State 555:
annotated_formula -> tff_annotated . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production annotated_formula -> tff_annotated
-- On THF reduce production annotated_formula -> tff_annotated
-- On TFF reduce production annotated_formula -> tff_annotated
-- On INCLUDE reduce production annotated_formula -> tff_annotated
-- On FOF reduce production annotated_formula -> tff_annotated
-- On EOF reduce production annotated_formula -> tff_annotated
-- On CNF reduce production annotated_formula -> tff_annotated

State 556:
list(tptp_input) -> tptp_input list(tptp_input) . [ EOF ]
-- On EOF reduce production list(tptp_input) -> tptp_input list(tptp_input)

State 557:
annotated_formula -> fof_annotated . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production annotated_formula -> fof_annotated
-- On THF reduce production annotated_formula -> fof_annotated
-- On TFF reduce production annotated_formula -> fof_annotated
-- On INCLUDE reduce production annotated_formula -> fof_annotated
-- On FOF reduce production annotated_formula -> fof_annotated
-- On EOF reduce production annotated_formula -> fof_annotated
-- On CNF reduce production annotated_formula -> fof_annotated

State 558:
annotated_formula -> cnf_annotated . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production annotated_formula -> cnf_annotated
-- On THF reduce production annotated_formula -> cnf_annotated
-- On TFF reduce production annotated_formula -> cnf_annotated
-- On INCLUDE reduce production annotated_formula -> cnf_annotated
-- On FOF reduce production annotated_formula -> cnf_annotated
-- On EOF reduce production annotated_formula -> cnf_annotated
-- On CNF reduce production annotated_formula -> cnf_annotated

State 559:
tptp_input -> annotated_formula . [ TPI THF TFF INCLUDE FOF EOF CNF ]
-- On TPI reduce production tptp_input -> annotated_formula
-- On THF reduce production tptp_input -> annotated_formula
-- On TFF reduce production tptp_input -> annotated_formula
-- On INCLUDE reduce production tptp_input -> annotated_formula
-- On FOF reduce production tptp_input -> annotated_formula
-- On EOF reduce production tptp_input -> annotated_formula
-- On CNF reduce production tptp_input -> annotated_formula

State 560:
file -> list(tptp_input) . EOF [ # ]
-- On EOF shift to state 561

State 561:
file -> list(tptp_input) EOF . [ # ]
-- On # reduce production file -> list(tptp_input) EOF

State 562:
file' -> file . [ # ]
-- On # accept file

State 563:
input' -> . input [ # ]
-- On TPI shift to state 564
-- On THF shift to state 574
-- On TFF shift to state 584
-- On INCLUDE shift to state 594
-- On FOF shift to state 600
-- On EOF shift to state 610
-- On CNF shift to state 611
-- On tptp_input shift to state 621
-- On tptp_include shift to state 622
-- On tpi_annotated shift to state 623
-- On thf_annotated shift to state 624
-- On tff_annotated shift to state 625
-- On input shift to state 626
-- On fof_annotated shift to state 627
-- On cnf_annotated shift to state 628
-- On annotated_formula shift to state 629

State 564:
tpi_annotated -> TPI . LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT [ # ]
-- On LEFT_PAREN shift to state 565

State 565:
tpi_annotated -> TPI LEFT_PAREN . name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT [ # ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 566

State 566:
tpi_annotated -> TPI LEFT_PAREN name . COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 567

State 567:
tpi_annotated -> TPI LEFT_PAREN name COMMA . formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT [ # ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 568

State 568:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role . COMMA tpi_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 569

State 569:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA . tpi_formula annotations RIGHT_PAREN DOT [ # ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 251
-- On LEFT_BRACKET shift to state 252
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On tpi_formula shift to state 570
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 270
-- On fof_unary_formula shift to state 266
-- On fof_tuple shift to state 293
-- On fof_sequent shift to state 450
-- On fof_quantified_formula shift to state 267
-- On fof_or_formula shift to state 277
-- On fof_logic_formula shift to state 451
-- On fof_formula shift to state 496
-- On fof_binary_nonassoc shift to state 282
-- On fof_binary_formula shift to state 283
-- On fof_binary_assoc shift to state 284
-- On fof_and_formula shift to state 285
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 570:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula . annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 299
-- On annotations shift to state 571
-- On RIGHT_PAREN reduce production annotations ->

State 571:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations . RIGHT_PAREN DOT [ # ]
-- On RIGHT_PAREN shift to state 572

State 572:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN . DOT [ # ]
-- On DOT shift to state 573

State 573:
tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT . [ # ]
-- On # reduce production tpi_annotated -> TPI LEFT_PAREN name COMMA formula_role COMMA tpi_formula annotations RIGHT_PAREN DOT

State 574:
thf_annotated -> THF . LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT [ # ]
-- On LEFT_PAREN shift to state 575

State 575:
thf_annotated -> THF LEFT_PAREN . name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT [ # ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 576

State 576:
thf_annotated -> THF LEFT_PAREN name . COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 577

State 577:
thf_annotated -> THF LEFT_PAREN name COMMA . formula_role COMMA thf_formula annotations RIGHT_PAREN DOT [ # ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 578

State 578:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role . COMMA thf_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 579

State 579:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA . thf_formula annotations RIGHT_PAREN DOT [ # ]
-- On XOR shift to state 147
-- On VLINE shift to state 304
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On SIGMA shift to state 305
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On PI shift to state 306
-- On NOT_EQUAL shift to state 135
-- On NOTVLINE shift to state 150
-- On NOTAND shift to state 151
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 307
-- On LET_FT shift to state 19
-- On LET_FF shift to state 318
-- On LEFT_PAREN shift to state 323
-- On LEFT_IMPLY shift to state 152
-- On LEFT_BRACKET shift to state 324
-- On LAMBDA shift to state 309
-- On ITE_T shift to state 22
-- On ITE_F shift to state 327
-- On INTEGER shift to state 27
-- On INDEFINITE_DESCRIPTION shift to state 310
-- On IMPLY shift to state 153
-- On FORALL_TY shift to state 311
-- On FORALL shift to state 125
-- On EXISTS_TY shift to state 312
-- On EXISTS shift to state 126
-- On EQUIV shift to state 154
-- On EQUAL shift to state 108
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On DEFINITE_DESCRIPTION shift to state 313
-- On AND shift to state 329
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 330
-- On tptp_functor shift to state 32
-- On thf_xprod_type shift to state 331
-- On thf_unitary_type shift to state 334
-- On thf_unitary_formula shift to state 341
-- On thf_union_type shift to state 362
-- On thf_unary_formula shift to state 338
-- On thf_unary_connective shift to state 339
-- On thf_typeable_formula shift to state 365
-- On thf_type_formula shift to state 367
-- On thf_tuple shift to state 415
-- On thf_subtype shift to state 369
-- On thf_sequent shift to state 420
-- On thf_quantifier shift to state 314
-- On thf_quantified_formula shift to state 344
-- On thf_pair_connective shift to state 345
-- On thf_or_formula shift to state 370
-- On thf_mapping_type shift to state 373
-- On thf_logic_formula shift to state 421
-- On thf_let shift to state 346
-- On thf_formula shift to state 580
-- On thf_conn_term shift to state 347
-- On thf_conditional shift to state 348
-- On thf_binary_type shift to state 375
-- On thf_binary_tuple shift to state 376
-- On thf_binary_pair shift to state 377
-- On thf_binary_formula shift to state 378
-- On thf_atom shift to state 379
-- On thf_apply_formula shift to state 380
-- On thf_and_formula shift to state 383
-- On term shift to state 350
-- On system_term shift to state 36
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 42
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On infix_inequality shift to state 351
-- On infix_equality shift to state 352
-- On function_term shift to state 46
-- On fol_quantifier shift to state 353
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 49
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atom shift to state 54
-- On constant shift to state 386
-- On conditional_term shift to state 56
-- On binary_connective shift to state 354
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_defined_word shift to state 59
-- On assoc_connective shift to state 355

State 580:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula . annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 299
-- On annotations shift to state 581
-- On RIGHT_PAREN reduce production annotations ->

State 581:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations . RIGHT_PAREN DOT [ # ]
-- On RIGHT_PAREN shift to state 582

State 582:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN . DOT [ # ]
-- On DOT shift to state 583

State 583:
thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT . [ # ]
-- On # reduce production thf_annotated -> THF LEFT_PAREN name COMMA formula_role COMMA thf_formula annotations RIGHT_PAREN DOT

State 584:
tff_annotated -> TFF . LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT [ # ]
-- On LEFT_PAREN shift to state 585

State 585:
tff_annotated -> TFF LEFT_PAREN . name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT [ # ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 586

State 586:
tff_annotated -> TFF LEFT_PAREN name . COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 587

State 587:
tff_annotated -> TFF LEFT_PAREN name COMMA . formula_role COMMA tff_formula annotations RIGHT_PAREN DOT [ # ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 588

State 588:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role . COMMA tff_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 589

State 589:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA . tff_formula annotations RIGHT_PAREN DOT [ # ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_TF shift to state 24
-- On LET_FT shift to state 19
-- On LET_FF shift to state 98
-- On LEFT_PAREN shift to state 179
-- On LEFT_BRACKET shift to state 180
-- On ITE_T shift to state 22
-- On ITE_F shift to state 123
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 128
-- On tptp_functor shift to state 187
-- On tff_untyped_atom shift to state 188
-- On tff_unitary_formula shift to state 146
-- On tff_unary_formula shift to state 130
-- On tff_typed_atom shift to state 228
-- On tff_tuple shift to state 222
-- On tff_sequent shift to state 229
-- On tff_quantified_formula shift to state 131
-- On tff_or_formula shift to state 159
-- On tff_logic_formula shift to state 230
-- On tff_let shift to state 132
-- On tff_formula shift to state 590
-- On tff_conditional shift to state 133
-- On tff_binary_nonassoc shift to state 168
-- On tff_binary_formula shift to state 169
-- On tff_binary_assoc shift to state 170
-- On tff_and_formula shift to state 171
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 227
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 138
-- On fol_infix_unary shift to state 144
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 145
-- On atomic_defined_word shift to state 59

State 590:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula . annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 299
-- On annotations shift to state 591
-- On RIGHT_PAREN reduce production annotations ->

State 591:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations . RIGHT_PAREN DOT [ # ]
-- On RIGHT_PAREN shift to state 592

State 592:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN . DOT [ # ]
-- On DOT shift to state 593

State 593:
tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT . [ # ]
-- On # reduce production tff_annotated -> TFF LEFT_PAREN name COMMA formula_role COMMA tff_formula annotations RIGHT_PAREN DOT

State 594:
tptp_include -> INCLUDE . LEFT_PAREN file_name formula_section RIGHT_PAREN DOT [ # ]
-- On LEFT_PAREN shift to state 595

State 595:
tptp_include -> INCLUDE LEFT_PAREN . file_name formula_section RIGHT_PAREN DOT [ # ]
-- On SINGLE_QUOTED shift to state 519
-- On file_name shift to state 596

State 596:
tptp_include -> INCLUDE LEFT_PAREN file_name . formula_section RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 521
-- On formula_section shift to state 597
-- On RIGHT_PAREN reduce production formula_section ->

State 597:
tptp_include -> INCLUDE LEFT_PAREN file_name formula_section . RIGHT_PAREN DOT [ # ]
-- On RIGHT_PAREN shift to state 598

State 598:
tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN . DOT [ # ]
-- On DOT shift to state 599

State 599:
tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT . [ # ]
-- On # reduce production tptp_include -> INCLUDE LEFT_PAREN file_name formula_section RIGHT_PAREN DOT

State 600:
fof_annotated -> FOF . LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT [ # ]
-- On LEFT_PAREN shift to state 601

State 601:
fof_annotated -> FOF LEFT_PAREN . name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT [ # ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 602

State 602:
fof_annotated -> FOF LEFT_PAREN name . COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 603

State 603:
fof_annotated -> FOF LEFT_PAREN name COMMA . formula_role COMMA fof_formula annotations RIGHT_PAREN DOT [ # ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 604

State 604:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role . COMMA fof_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 605

State 605:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA . fof_formula annotations RIGHT_PAREN DOT [ # ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 251
-- On LEFT_BRACKET shift to state 252
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On FORALL shift to state 125
-- On EXISTS shift to state 126
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 127
-- On unary_connective shift to state 255
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_quantifier shift to state 256
-- On fol_infix_unary shift to state 264
-- On fof_unitary_formula shift to state 270
-- On fof_unary_formula shift to state 266
-- On fof_tuple shift to state 293
-- On fof_sequent shift to state 450
-- On fof_quantified_formula shift to state 267
-- On fof_or_formula shift to state 277
-- On fof_logic_formula shift to state 451
-- On fof_formula shift to state 606
-- On fof_binary_nonassoc shift to state 282
-- On fof_binary_formula shift to state 283
-- On fof_binary_assoc shift to state 284
-- On fof_and_formula shift to state 285
-- On distinct_object shift to state 47
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 268
-- On atomic_defined_word shift to state 59

State 606:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula . annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 299
-- On annotations shift to state 607
-- On RIGHT_PAREN reduce production annotations ->

State 607:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations . RIGHT_PAREN DOT [ # ]
-- On RIGHT_PAREN shift to state 608

State 608:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN . DOT [ # ]
-- On DOT shift to state 609

State 609:
fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT . [ # ]
-- On # reduce production fof_annotated -> FOF LEFT_PAREN name COMMA formula_role COMMA fof_formula annotations RIGHT_PAREN DOT

State 610:
input -> EOF . [ # ]
-- On # reduce production input -> EOF

State 611:
cnf_annotated -> CNF . LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT [ # ]
-- On LEFT_PAREN shift to state 612

State 612:
cnf_annotated -> CNF LEFT_PAREN . name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT [ # ]
-- On SINGLE_QUOTED shift to state 3
-- On LOWER_WORD shift to state 4
-- On INTEGER shift to state 5
-- On name shift to state 613

State 613:
cnf_annotated -> CNF LEFT_PAREN name . COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 614

State 614:
cnf_annotated -> CNF LEFT_PAREN name COMMA . formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT [ # ]
-- On LOWER_WORD shift to state 8
-- On formula_role shift to state 615

State 615:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role . COMMA cnf_formula annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 616

State 616:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA . cnf_formula annotations RIGHT_PAREN DOT [ # ]
-- On UPPER_WORD shift to state 11
-- On SINGLE_QUOTED shift to state 12
-- On REAL shift to state 13
-- On RATIONAL shift to state 14
-- On NOT shift to state 15
-- On LOWER_WORD shift to state 16
-- On LET_TT shift to state 17
-- On LET_FT shift to state 19
-- On LEFT_PAREN shift to state 456
-- On ITE_T shift to state 22
-- On INTEGER shift to state 27
-- On DOLLAR_WORD shift to state 28
-- On DOLLAR_DOLLAR_WORD shift to state 29
-- On DISTINCT_OBJECT shift to state 30
-- On variable shift to state 31
-- On unary_negation shift to state 457
-- On tptp_functor shift to state 32
-- On term shift to state 134
-- On system_term shift to state 112
-- On system_functor shift to state 37
-- On system_constant shift to state 39
-- On system_atomic_formula shift to state 113
-- On real shift to state 40
-- On rational shift to state 41
-- On plain_term shift to state 114
-- On plain_atomic_formula shift to state 115
-- On number shift to state 43
-- On literal shift to state 459
-- On let_term shift to state 44
-- On integer shift to state 45
-- On function_term shift to state 46
-- On fol_infix_unary shift to state 460
-- On distinct_object shift to state 47
-- On disjunction shift to state 466
-- On defined_term shift to state 48
-- On defined_plain_term shift to state 116
-- On defined_plain_formula shift to state 117
-- On defined_infix_formula shift to state 118
-- On defined_functor shift to state 50
-- On defined_constant shift to state 52
-- On defined_atomic_term shift to state 53
-- On defined_atomic_formula shift to state 119
-- On defined_atom shift to state 54
-- On constant shift to state 55
-- On conditional_term shift to state 56
-- On cnf_formula shift to state 617
-- On atomic_word shift to state 57
-- On atomic_system_word shift to state 58
-- On atomic_formula shift to state 464
-- On atomic_defined_word shift to state 59

State 617:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula . annotations RIGHT_PAREN DOT [ # ]
-- On COMMA shift to state 299
-- On annotations shift to state 618
-- On RIGHT_PAREN reduce production annotations ->

State 618:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations . RIGHT_PAREN DOT [ # ]
-- On RIGHT_PAREN shift to state 619

State 619:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN . DOT [ # ]
-- On DOT shift to state 620

State 620:
cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT . [ # ]
-- On # reduce production cnf_annotated -> CNF LEFT_PAREN name COMMA formula_role COMMA cnf_formula annotations RIGHT_PAREN DOT

State 621:
input -> tptp_input . [ # ]
-- On # reduce production input -> tptp_input

State 622:
tptp_input -> tptp_include . [ # ]
-- On # reduce production tptp_input -> tptp_include

State 623:
annotated_formula -> tpi_annotated . [ # ]
-- On # reduce production annotated_formula -> tpi_annotated

State 624:
annotated_formula -> thf_annotated . [ # ]
-- On # reduce production annotated_formula -> thf_annotated

State 625:
annotated_formula -> tff_annotated . [ # ]
-- On # reduce production annotated_formula -> tff_annotated

State 626:
input' -> input . [ # ]
-- On # accept input

State 627:
annotated_formula -> fof_annotated . [ # ]
-- On # reduce production annotated_formula -> fof_annotated

State 628:
annotated_formula -> cnf_annotated . [ # ]
-- On # reduce production annotated_formula -> cnf_annotated

State 629:
tptp_input -> annotated_formula . [ # ]
-- On # reduce production tptp_input -> annotated_formula

