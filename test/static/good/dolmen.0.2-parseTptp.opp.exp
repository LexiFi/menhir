%parameter<L : ParseLocation.S>
%parameter<I : Ast_tptp.Id>
%parameter<T : Ast_tptp.Term
  with type location := L.t and type id := I.t>
%parameter<S : Ast_tptp.Statement
  with type location := L.t  and type id := I.t and type term := T.t>
%start file
%start input
%token AND
%token APPLY
%token ARROW
%token CNF
%token COLON
%token COMMA
%token DEFINITE_DESCRIPTION
%token <string> DISTINCT_OBJECT
%token DOLLAR_CNF
%token <string> DOLLAR_DOLLAR_WORD
%token DOLLAR_FOF
%token DOLLAR_FOT
%token DOLLAR_TFF
%token DOLLAR_THF
%token <string> DOLLAR_WORD
%token DOT
%token EOF
%token EQUAL
%token EQUIV
%token EXISTS
%token EXISTS_TY
%token FOF
%token FORALL
%token FORALL_TY
%token GENTZEN_ARROW
%token IMPLY
%token INCLUDE
%token INDEFINITE_DESCRIPTION
%token <string> INTEGER
%token ITE_F
%token ITE_T
%token LAMBDA
%token LEFT_BRACKET
%token LEFT_IMPLY
%token LEFT_PAREN
%token LESS
%token LET_FF
%token LET_FT
%token LET_TF
%token LET_TT
%token <string> LOWER_WORD
%token NOT
%token NOTAND
%token NOTVLINE
%token NOT_EQUAL
%token PI
%token PLUS
%token <string> RATIONAL
%token <string> REAL
%token RIGHT_BRACKET
%token RIGHT_PAREN
%token SIGMA
%token <string> SINGLE_QUOTED
%token STAR
%token TFF
%token THF
%token TPI
%token <string> UPPER_WORD
%token VLINE
%token XOR
%type <S.t list> file
%type <S.t option> input
%%

list_tptp_input_:
  
    {    ( [] )} [@name nil_tptp_input]
| x = tptp_input xs = list_tptp_input_
    {    ( x :: xs )} [@name cons_tptp_input]

file:
  l = list_tptp_input_ _2 = EOF
    {                      ( l )}

input:
  i = tptp_input
    {    ( Some i )}
| _1 = EOF
    {    ( None )}

tptp_input:
  i = annotated_formula
    {    ( i )}
| i = tptp_include
    {    ( i )}

annotated_formula:
  f = thf_annotated
    {    ( f )}
| f = tff_annotated
    {    ( f )}
| f = fof_annotated
    {    ( f )}
| f = cnf_annotated
    {    ( f )}
| f = tpi_annotated
    {    ( f )}

tpi_annotated:
  _1 = TPI _2 = LEFT_PAREN s = name _4 = COMMA r = formula_role _6 = COMMA f = tpi_formula annot = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in S.tpi ~loc ?annot s r f )}

thf_annotated:
  _1 = THF _2 = LEFT_PAREN s = name _4 = COMMA r = formula_role _6 = COMMA f = thf_formula annot = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in S.thf ~loc ?annot s r f )}

tff_annotated:
  _1 = TFF _2 = LEFT_PAREN s = name _4 = COMMA r = formula_role _6 = COMMA f = tff_formula annot = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in S.tff ~loc ?annot s r f )}

fof_annotated:
  _1 = FOF _2 = LEFT_PAREN s = name _4 = COMMA r = formula_role _6 = COMMA f = fof_formula annot = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in S.fof ~loc ?annot s r f )}

cnf_annotated:
  _1 = CNF _2 = LEFT_PAREN s = name _4 = COMMA r = formula_role _6 = COMMA f = cnf_formula annot = annotations _9 = RIGHT_PAREN _10 = DOT
    {let _endpos = _endpos__10_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in S.cnf ~loc ?annot s r f )}

annotations:
  _1 = COMMA s = source i = optional_info
    {let _endpos = _endpos_i_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in Some (S.annot ~loc s i) )}
| 
    {    ( None )}

tpi_formula:
  f = fof_formula
    {                  ( f )}

formula_role:
  s = LOWER_WORD
    {                 ( s )}

thf_formula:
  f = thf_sequent
    {    ( f )}
| f = thf_logic_formula
    {    ( f )}

thf_logic_formula:
  f = thf_binary_formula
    {    ( f )}
| f = thf_unitary_formula
    {    ( f )}
| f = thf_type_formula
    {    ( f )}
| f = thf_subtype
    {    ( f )}

thf_binary_formula:
  f = thf_binary_pair
    {    ( f )}
| f = thf_binary_tuple
    {    ( f )}
| f = thf_binary_type
    {    ( f )}

thf_binary_pair:
  f = thf_unitary_formula c = thf_pair_connective g = thf_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc c [f; g] )}

thf_binary_tuple:
  f = thf_or_formula
    {    ( f )}
| f = thf_and_formula
    {    ( f )}
| f = thf_apply_formula
    {    ( f )}

thf_or_formula:
  f = thf_unitary_formula _2 = VLINE g = thf_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.or_t [f; g] )}
| f = thf_or_formula _2 = VLINE g = thf_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.or_t [f; g] )}

thf_and_formula:
  f = thf_unitary_formula _2 = AND g = thf_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.and_t [f; g] )}
| f = thf_and_formula _2 = AND g = thf_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.and_t [f; g] )}

thf_apply_formula:
  f = thf_unitary_formula _2 = APPLY g = thf_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc f [g] )}
| f = thf_apply_formula _2 = APPLY g = thf_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc f [g] )}

thf_unitary_formula:
  f = thf_quantified_formula
    {    ( f )}
| f = thf_unary_formula
    {    ( f )}
| f = thf_atom
    {    ( f )}
| f = thf_conditional
    {    ( f )}
| f = thf_let
    {    ( f )}
| _1 = LEFT_PAREN f = thf_logic_formula _3 = RIGHT_PAREN
    {    ( f )}

thf_quantified_formula:
  q = thf_quantifier _2 = LEFT_BRACKET l = thf_variable_list _4 = RIGHT_BRACKET _5 = COLON f = thf_unitary_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    ( let loc = L.mk_pos _startpos _endpos in q ~loc l f )}

thf_variable_list:
  v = thf_variable
    {   ( [ v ] )}
| v = thf_variable _2 = COMMA l = thf_variable_list
    {   ( v :: l )}

thf_variable:
  v = thf_typed_variable
    {    ( v )}
| v = variable
    {    ( v )}

thf_typed_variable:
  c = variable _2 = COLON ty = thf_top_level_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos_c_ in
    ( let loc = L.mk_pos _startpos _endpos in T.colon ~loc c ty )}

thf_unary_formula:
  c = thf_unary_connective _2 = LEFT_PAREN f = thf_logic_formula _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_c_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc c [f] )}

thf_atom:
  t = term
    {    ( t )}
| t = thf_conn_term
    {    ( t )}

thf_conditional:
  _1 = ITE_F _2 = LEFT_PAREN cond = thf_logic_formula _4 = COMMA if_then = thf_logic_formula _6 = COMMA if_else = thf_logic_formula _8 = RIGHT_PAREN
    {let _endpos = _endpos__8_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.ite ~loc cond if_then if_else )}

thf_let:
  _1 = LET_TF _2 = LEFT_PAREN l = thf_let_term_defn _4 = COMMA f = thf_formula _6 = RIGHT_PAREN
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.letin ~loc [l] f )}
| _1 = LET_FF _2 = LEFT_PAREN l = thf_let_formula_defn _4 = COMMA f = thf_formula _6 = RIGHT_PAREN
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.letin ~loc [l] f )}

thf_let_term_defn:
  f = thf_quantified_formula
    {                             ( f )}

thf_let_formula_defn:
  f = thf_quantified_formula
    {                             ( f )}

thf_type_formula:
  f = thf_typeable_formula _2 = COLON ty = thf_top_level_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.colon ~loc f ty )}

thf_typeable_formula:
  f = thf_atom
    {    ( f )}
| _1 = LEFT_PAREN f = thf_logic_formula _3 = RIGHT_PAREN
    {    ( f )}

thf_subtype:
  t = constant _2 = subtype_sign u = constant
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    ( let loc = L.mk_pos _startpos _endpos in T.subtype ~loc t u )}

thf_top_level_type:
  f = thf_logic_formula
    {                        ( f )}

thf_unitary_type:
  f = thf_unitary_formula
    {                          ( f )}

thf_binary_type:
  t = thf_mapping_type
    {    ( t )}
| t = thf_xprod_type
    {    ( t )}
| t = thf_union_type
    {    ( t )}

thf_mapping_type:
  arg = thf_unitary_type _2 = ARROW ret = thf_unitary_type
    {let _endpos = _endpos_ret_ in
let _startpos = _startpos_arg_ in
    ( let loc = L.mk_pos _startpos _endpos in T.arrow ~loc arg ret )}
| arg = thf_unitary_type _2 = ARROW ret = thf_mapping_type
    {let _endpos = _endpos_ret_ in
let _startpos = _startpos_arg_ in
    ( let loc = L.mk_pos _startpos _endpos in T.arrow ~loc arg ret )}

thf_xprod_type:
  left = thf_unitary_type _2 = STAR right = thf_unitary_type
    {let _endpos = _endpos_right_ in
let _startpos = _startpos_left_ in
    ( let loc = L.mk_pos _startpos _endpos in T.product ~loc left right )}
| left = thf_xprod_type _2 = STAR right = thf_unitary_type
    {let _endpos = _endpos_right_ in
let _startpos = _startpos_left_ in
    ( let loc = L.mk_pos _startpos _endpos in T.product ~loc left right )}

thf_union_type:
  left = thf_unitary_type _2 = PLUS right = thf_unitary_type
    {let _endpos = _endpos_right_ in
let _startpos = _startpos_left_ in
    ( let loc = L.mk_pos _startpos _endpos in T.union ~loc left right )}
| left = thf_union_type _2 = PLUS right = thf_unitary_type
    {let _endpos = _endpos_right_ in
let _startpos = _startpos_left_ in
    ( let loc = L.mk_pos _startpos _endpos in T.union ~loc left right )}

thf_sequent:
  _1 = LEFT_PAREN s = thf_sequent _3 = RIGHT_PAREN
    {    ( s )}
| hyp = thf_tuple _2 = GENTZEN_ARROW goal = thf_tuple
    {let _endpos = _endpos_goal_ in
let _startpos = _startpos_hyp_ in
    ( let loc = L.mk_pos _startpos _endpos in T.sequent ~loc hyp goal )}

thf_tuple:
  _1 = LEFT_BRACKET _2 = RIGHT_BRACKET
    {    ( [] )}
| _1 = LEFT_BRACKET l = thf_tuple_list _3 = RIGHT_BRACKET
    {    ( l )}

thf_tuple_list:
  f = thf_logic_formula
    {    ( [ f ] )}
| f = thf_logic_formula _2 = COMMA l = thf_tuple_list
    {    ( f :: l )}

tff_formula:
  f = tff_logic_formula
    {    ( f )}
| f = tff_typed_atom
    {    ( f )}
| f = tff_sequent
    {    ( f )}

tff_logic_formula:
  f = tff_binary_formula
    {    ( f )}
| f = tff_unitary_formula
    {    ( f )}

tff_binary_formula:
  f = tff_binary_nonassoc
    {    ( f )}
| f = tff_binary_assoc
    {    ( f )}

tff_binary_nonassoc:
  f = tff_unitary_formula c = binary_connective g = tff_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc c [f; g] )}

tff_binary_assoc:
  f = tff_or_formula
    {    ( f )}
| f = tff_and_formula
    {    ( f )}

tff_or_formula:
  f = tff_unitary_formula _2 = VLINE g = tff_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.or_t [f; g] )}
| f = tff_or_formula _2 = VLINE g = tff_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.or_t [f; g] )}

tff_and_formula:
  f = tff_unitary_formula _2 = AND g = tff_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.and_t [f; g] )}
| f = tff_and_formula _2 = AND g = tff_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.and_t [f; g] )}

tff_unitary_formula:
  f = tff_quantified_formula
    {    ( f )}
| f = tff_unary_formula
    {    ( f )}
| f = atomic_formula
    {    ( f )}
| f = tff_conditional
    {    ( f )}
| f = tff_let
    {    ( f )}
| _1 = LEFT_PAREN f = tff_logic_formula _3 = RIGHT_PAREN
    {    ( f )}

tff_quantified_formula:
  q = fol_quantifier _2 = LEFT_BRACKET l = tff_variable_list _4 = RIGHT_BRACKET _5 = COLON f = tff_unitary_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    ( let loc = L.mk_pos _startpos _endpos in q ~loc l f )}

tff_variable_list:
  v = tff_variable
    {    ( [ v ] )}
| v = tff_variable _2 = COMMA l = tff_variable_list
    {    ( v :: l )}

tff_variable:
  v = tff_typed_variable
    {    ( v )}
| v = variable
    {    ( v )}

tff_typed_variable:
  v = variable _2 = COLON ty = tff_atomic_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos_v_ in
    ( let loc = L.mk_pos _startpos _endpos in T.colon ~loc v ty )}

tff_unary_formula:
  u = unary_connective f = tff_unitary_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_u_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc u [f] )}
| f = fol_infix_unary
    {    ( f )}

tff_conditional:
  _1 = ITE_F _2 = LEFT_PAREN cond = tff_logic_formula _4 = COMMA if_then = tff_logic_formula _6 = COMMA if_else = tff_logic_formula _8 = RIGHT_PAREN
    {let _endpos = _endpos__8_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.ite ~loc cond if_then if_else )}

tff_let:
  _1 = LET_TF _2 = LEFT_PAREN l = tff_let_term_defn _4 = COMMA f = tff_formula _6 = RIGHT_PAREN
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.letin ~loc [l] f )}
| _1 = LET_FF _2 = LEFT_PAREN l = tff_let_formula_defn _4 = COMMA f = tff_formula _6 = RIGHT_PAREN
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.letin ~loc [l] f )}

tff_let_term_defn:
  _1 = FORALL _2 = LEFT_BRACKET l = tff_variable_list _4 = RIGHT_BRACKET _5 = COLON t = tff_let_term_defn
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.forall ~loc l t )}
| t = tff_let_term_binding
    {    ( t )}

tff_let_term_binding:
  t = term _2 = EQUAL u = term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.eq_t [t; u] )}
| _1 = LEFT_PAREN t = tff_let_term_binding _3 = RIGHT_PAREN
    {    ( t )}

tff_let_formula_defn:
  _1 = FORALL _2 = LEFT_BRACKET l = tff_variable_list _4 = RIGHT_BRACKET _5 = COLON t = tff_let_formula_defn
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.forall ~loc l t )}
| t = tff_let_formula_binding
    {    ( t )}

tff_let_formula_binding:
  t = atomic_formula _2 = EQUIV u = tff_unitary_formula
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.equiv_t [t; u] )}
| _1 = LEFT_PAREN t = tff_let_formula_binding _3 = RIGHT_PAREN
    {    ( t )}

tff_sequent:
  hyp = tff_tuple _2 = GENTZEN_ARROW goal = tff_tuple
    {let _endpos = _endpos_goal_ in
let _startpos = _startpos_hyp_ in
    ( let loc = L.mk_pos _startpos _endpos in T.sequent ~loc hyp goal )}
| _1 = LEFT_PAREN t = tff_sequent _3 = RIGHT_PAREN
    {    ( t )}

tff_tuple:
  _1 = LEFT_BRACKET _2 = RIGHT_BRACKET
    {    ( [] )}
| _1 = LEFT_BRACKET l = tff_tuple_list _3 = RIGHT_BRACKET
    {    ( l )}

tff_tuple_list:
  f = tff_logic_formula
    {    ( [ f ] )}
| f = tff_logic_formula _2 = COMMA l = tff_tuple_list
    {    ( f :: l )}

tff_typed_atom:
  t = tff_untyped_atom _2 = COLON ty = tff_top_level_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos_t_ in
    ( let loc = L.mk_pos _startpos _endpos in T.colon ~loc t ty )}
| _1 = LEFT_PAREN t = tff_typed_atom _3 = RIGHT_PAREN
    {    ( t )}

tff_untyped_atom:
  f = tptp_functor
    {    ( f )}
| f = system_functor
    {    ( f )}

tff_top_level_type:
  t = tff_atomic_type
    {    ( t )}
| t = tff_mapping_type
    {    ( t )}
| t = tff_quantified_type
    {    ( t )}
| _1 = LEFT_PAREN t = tff_top_level_type _3 = RIGHT_PAREN
    {    ( t )}

tff_quantified_type:
  _1 = FORALL_TY _2 = LEFT_BRACKET l = tff_variable_list _4 = RIGHT_BRACKET _5 = COLON t = tff_monotype
    {let _endpos = _endpos_t_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.pi ~loc l t )}

tff_monotype:
  t = tff_atomic_type
    {    ( t )}
| _1 = LEFT_PAREN t = tff_mapping_type _3 = RIGHT_PAREN
    {    ( t )}

tff_unitary_type:
  t = tff_atomic_type
    {    ( t )}
| _1 = LEFT_PAREN t = tff_xprod_type _3 = RIGHT_PAREN
    {    ( t )}

tff_atomic_type:
  t = atomic_word
    {    ( t )}
| t = defined_type
    {    ( t )}
| t = variable
    {    ( t )}
| f = atomic_word _2 = LEFT_PAREN l = tff_type_arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc f l )}

tff_type_arguments:
  t = tff_atomic_type
    {    ( [ t ] )}
| t = tff_atomic_type _2 = COMMA l = tff_type_arguments
    {    ( t :: l )}

tff_mapping_type:
  arg = tff_unitary_type _2 = ARROW ret = tff_atomic_type
    {let _endpos = _endpos_ret_ in
let _startpos = _startpos_arg_ in
    ( let loc = L.mk_pos _startpos _endpos in T.arrow ~loc arg ret )}

tff_xprod_type:
  t = tff_unitary_type _2 = STAR u = tff_atomic_type
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    ( let loc = L.mk_pos _startpos _endpos in T.product ~loc t u )}
| t = tff_xprod_type _2 = STAR u = tff_atomic_type
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    ( let loc = L.mk_pos _startpos _endpos in T.product ~loc t u )}

fof_formula:
  f = fof_logic_formula
    {    ( f )}
| f = fof_sequent
    {    ( f )}

fof_logic_formula:
  f = fof_binary_formula
    {    ( f )}
| f = fof_unitary_formula
    {    ( f )}

fof_binary_formula:
  f = fof_binary_nonassoc
    {    ( f )}
| f = fof_binary_assoc
    {    ( f )}

fof_binary_nonassoc:
  f = fof_unitary_formula c = binary_connective g = fof_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc c [f; g] )}

fof_binary_assoc:
  f = fof_or_formula
    {    ( f )}
| f = fof_and_formula
    {    ( f )}

fof_or_formula:
  f = fof_unitary_formula _2 = VLINE g = fof_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.or_t [f; g] )}
| f = fof_or_formula _2 = VLINE g = fof_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.or_t [f; g] )}

fof_and_formula:
  f = fof_unitary_formula _2 = AND g = fof_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.and_t [f; g] )}
| f = fof_and_formula _2 = AND g = fof_unitary_formula
    {let _endpos = _endpos_g_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.and_t [f; g] )}

fof_unitary_formula:
  f = fof_quantified_formula
    {    ( f )}
| f = fof_unary_formula
    {    ( f )}
| f = atomic_formula
    {    ( f )}
| _1 = LEFT_PAREN f = fof_logic_formula _3 = RIGHT_PAREN
    {    ( f )}

fof_quantified_formula:
  q = fol_quantifier _2 = LEFT_BRACKET l = fof_variable_list _4 = RIGHT_BRACKET _5 = COLON f = fof_unitary_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_q_ in
    ( let loc = L.mk_pos _startpos _endpos in q ~loc l f )}

fof_variable_list:
  v = variable
    {    ( [ v ] )}
| v = variable _2 = COMMA l = fof_variable_list
    {    ( v :: l )}

fof_unary_formula:
  c = unary_connective f = fof_unitary_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_c_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc c [f] )}
| f = fol_infix_unary
    {    ( f )}

fof_sequent:
  hyp = fof_tuple _2 = GENTZEN_ARROW goal = fof_tuple
    {let _endpos = _endpos_goal_ in
let _startpos = _startpos_hyp_ in
    ( let loc = L.mk_pos _startpos _endpos in T.sequent ~loc hyp goal )}
| _1 = LEFT_PAREN t = fof_sequent _3 = RIGHT_PAREN
    {    ( t )}

fof_tuple:
  _1 = LEFT_BRACKET _2 = RIGHT_BRACKET
    {    ( [] )}
| _1 = LEFT_BRACKET l = fof_tuple_list _3 = RIGHT_BRACKET
    {    ( l )}

fof_tuple_list:
  f = fof_logic_formula
    {    ( [ f ] )}
| f = fof_logic_formula _2 = COMMA l = fof_tuple_list
    {    ( f :: l )}

cnf_formula:
  _1 = LEFT_PAREN f = disjunction _3 = RIGHT_PAREN
    {    ( f )}
| f = disjunction
    {    ( f )}

disjunction:
  x = literal
    {    ( x )}
| f = disjunction _2 = VLINE x = literal
    {let _endpos = _endpos_x_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.or_t [f; x] )}

literal:
  f = atomic_formula
    {    ( f )}
| c = unary_negation f = atomic_formula
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_c_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc c [f] )}
| f = fol_infix_unary
    {    ( f )}

thf_conn_term:
  t = thf_pair_connective
    {    ( t )}
| t = assoc_connective
    {    ( t )}
| t = thf_unary_connective
    {    ( t )}

fol_infix_unary:
  t = term f = infix_inequality u = term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc f [t; u] )}

thf_quantifier:
  q = fol_quantifier
    {    ( q )}
| _1 = LAMBDA
    {    ( T.lambda )}
| _1 = FORALL_TY
    {    ( T.forall )}
| _1 = EXISTS_TY
    {    ( T.exists )}
| _1 = DEFINITE_DESCRIPTION
    {    ( T.description )}
| _1 = INDEFINITE_DESCRIPTION
    {    ( T.choice )}

thf_pair_connective:
  t = infix_equality
    {    ( t )}
| t = infix_inequality
    {    ( t )}
| t = binary_connective
    {    ( t )}

thf_unary_connective:
  c = unary_connective
    {    ( c )}
| _1 = PI
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.const ~loc (I.mk I.term "$pi") )}
| _1 = SIGMA
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.const ~loc (I.mk I.term "$sigma") )}

subtype_sign:
  _1 = LESS _2 = LESS
    {              ( () )}

fol_quantifier:
  _1 = FORALL
    {    ( T.forall )}
| _1 = EXISTS
    {    ( T.exists )}

binary_connective:
  _1 = EQUIV
    {    ( T.equiv_t )}
| _1 = IMPLY
    {    ( T.implies_t )}
| _1 = LEFT_IMPLY
    {    ( T.implied_t )}
| _1 = XOR
    {    ( T.xor_t )}
| _1 = NOTVLINE
    {    ( T.nor_t )}
| _1 = NOTAND
    {    ( T.nand_t )}

assoc_connective:
  _1 = VLINE
    {    ( T.or_t )}
| _1 = AND
    {    ( T.and_t )}

unary_connective:
  c = unary_negation
    {    ( c )}

unary_negation:
  _1 = NOT
    {    ( T.not_t )}

defined_type:
  t = atomic_defined_word
    {    ( t )}

atomic_formula:
  f = plain_atomic_formula
    {    ( f )}
| f = defined_atomic_formula
    {    ( f )}
| f = system_atomic_formula
    {    ( f )}

plain_atomic_formula:
  t = plain_term
    {    ( t )}

defined_atomic_formula:
  f = defined_plain_formula
    {    ( f )}
| f = defined_infix_formula
    {    ( f )}

defined_plain_formula:
  f = defined_plain_term
    {    ( f )}

defined_infix_formula:
  t = term c = defined_infix_pred u = term
    {let _endpos = _endpos_u_ in
let _startpos = _startpos_t_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc c [t; u] )}

defined_infix_pred:
  t = infix_equality
    {    ( t )}

infix_equality:
  _1 = EQUAL
    {    ( T.eq_t )}

infix_inequality:
  _1 = NOT_EQUAL
    {    ( T.neq_t )}

system_atomic_formula:
  t = system_term
    {    ( t )}

term:
  t = function_term
    {    ( t )}
| t = variable
    {    ( t )}
| t = conditional_term
    {    ( t )}
| t = let_term
    {    ( t )}

function_term:
  t = plain_term
    {    ( t )}
| t = defined_term
    {    ( t )}
| t = system_term
    {    ( t )}

plain_term:
  c = constant
    {    ( c )}
| f = tptp_functor _2 = LEFT_PAREN l = arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc f l )}

constant:
  c = tptp_functor
    {    ( c )}

tptp_functor:
  w = atomic_word
    {    ( w )}

defined_term:
  t = defined_atom
    {    ( t )}
| t = defined_atomic_term
    {    ( t )}

defined_atom:
  a = number
    {    ( a )}
| a = distinct_object
    {    ( a )}

defined_atomic_term:
  t = defined_plain_term
    {    ( t )}

defined_plain_term:
  c = defined_constant
    {    ( c )}
| f = defined_functor _2 = LEFT_PAREN l = arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc f l )}

defined_constant:
  c = defined_functor
    {    ( c )}

defined_functor:
  f = atomic_defined_word
    {    ( f )}

system_term:
  c = system_constant
    {    ( c )}
| f = system_functor _2 = LEFT_PAREN l = arguments _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc f l )}

system_constant:
  f = system_functor
    {    ( f )}

system_functor:
  f = atomic_system_word
    {    ( f )}

variable:
  s = UPPER_WORD
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.var ~loc (I.mk I.term s) )}

arguments:
  t = term
    {    ( [ t ] )}
| t = term _2 = COMMA l = arguments
    {    ( t :: l )}

conditional_term:
  _1 = ITE_T _2 = LEFT_PAREN cond = tff_logic_formula _4 = COMMA if_then = term _6 = COMMA if_else = term _8 = RIGHT_PAREN
    {let _endpos = _endpos__8_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.ite ~loc cond if_then if_else )}

let_term:
  _1 = LET_FT _2 = LEFT_PAREN l = tff_let_formula_defn _4 = COMMA t = term _6 = RIGHT_PAREN
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.letin ~loc [l] t )}
| _1 = LET_TT _2 = LEFT_PAREN l = tff_let_term_defn _4 = COMMA t = term _6 = RIGHT_PAREN
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in T.letin ~loc [l] t )}

source:
  t = general_term
    {    ( t )}

optional_info:
  _1 = COMMA i = useful_info
    {    ( i )}
| 
    {    ( [] )}

useful_info:
  l = general_list
    {    ( l )}

tptp_include:
  _1 = INCLUDE _2 = LEFT_PAREN f = file_name g = formula_section _5 = RIGHT_PAREN _6 = DOT
    {let _endpos = _endpos__6_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in S.include_ ~loc f g )}

formula_section:
  _1 = COMMA _2 = LEFT_BRACKET l = name_list _4 = RIGHT_BRACKET
    {    ( l )}
| 
    {    ( [] )}

name_list:
  n = name
    {    ( [ n ] )}
| n = name _2 = COMMA l = name_list
    {    ( n :: l )}

general_term:
  d = general_data
    {    ( d )}
| l = general_list
    {let _endpos = _endpos_l_ in
let _startpos = _startpos_l_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc T.data_t l )}
| d = general_data _2 = COLON t = general_term
    {let _endpos = _endpos_t_ in
let _startpos = _startpos_d_ in
    ( let loc = L.mk_pos _startpos _endpos in T.colon ~loc d t )}

general_data:
  d = atomic_word
    {    ( d )}
| d = general_function
    {    ( d )}
| d = variable
    {    ( d )}
| d = number
    {    ( d )}
| d = distinct_object
    {    ( d )}
| d = formula_data
    {    ( d )}

general_function:
  f = atomic_word _2 = LEFT_PAREN l = general_terms _4 = RIGHT_PAREN
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in T.apply ~loc f l )}

formula_data:
  _1 = DOLLAR_THF _2 = LEFT_PAREN f = thf_formula _4 = RIGHT_PAREN
    {    ( f )}
| _1 = DOLLAR_TFF _2 = LEFT_PAREN f = tff_formula _4 = RIGHT_PAREN
    {    ( f )}
| _1 = DOLLAR_FOF _2 = LEFT_PAREN f = fof_formula _4 = RIGHT_PAREN
    {    ( f )}
| _1 = DOLLAR_CNF _2 = LEFT_PAREN f = cnf_formula _4 = RIGHT_PAREN
    {    ( f )}
| _1 = DOLLAR_FOT _2 = LEFT_PAREN f = term _4 = RIGHT_PAREN
    {    ( f )}

general_list:
  _1 = LEFT_BRACKET _2 = RIGHT_BRACKET
    {    ( [] )}
| _1 = LEFT_BRACKET l = general_terms _3 = RIGHT_BRACKET
    {    ( l )}

general_terms:
  t = general_term
    {    ( [ t ] )}
| t = general_term _2 = COMMA l = general_terms
    {    ( t :: l )}

name:
  s = LOWER_WORD
    {    ( I.mk I.decl s )}
| s = SINGLE_QUOTED
    {    ( I.mk I.decl s )}
| s = INTEGER
    {    ( I.mk I.decl s )}

atomic_word:
  s = LOWER_WORD
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.const ~loc (I.mk I.term s) )}
| s = SINGLE_QUOTED
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.const ~loc (I.mk I.term s) )}

atomic_defined_word:
  s = DOLLAR_WORD
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.const ~loc (I.mk I.term s) )}

atomic_system_word:
  s = DOLLAR_DOLLAR_WORD
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.const ~loc (I.mk I.term s) )}

number:
  n = integer
    {    ( n )}
| n = rational
    {    ( n )}
| n = real
    {    ( n )}

file_name:
  s = SINGLE_QUOTED
    {    ( let n = String.length s in String.sub s 1 (n - 2) )}

distinct_object:
  s = DISTINCT_OBJECT
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.distinct ~loc (I.mk I.term s) )}

integer:
  n = INTEGER
    {let _endpos = _endpos_n_ in
let _startpos = _startpos_n_ in
    ( let loc = L.mk_pos _startpos _endpos in T.int ~loc n )}

rational:
  n = RATIONAL
    {let _endpos = _endpos_n_ in
let _startpos = _startpos_n_ in
    ( let loc = L.mk_pos _startpos _endpos in T.rat ~loc n )}

real:
  n = REAL
    {let _endpos = _endpos_n_ in
let _startpos = _startpos_n_ in
    ( let loc = L.mk_pos _startpos _endpos in T.real ~loc n )}

%%
