State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On TYPE shift to state 1
-- On THEORY shift to state 67
-- On REWRITING shift to state 300
-- On PRED shift to state 307
-- On LOGIC shift to state 323
-- On GOAL shift to state 340
-- On FUNC shift to state 344
-- On AXIOM shift to state 353
-- On list(decl) shift to state 357
-- On file shift to state 359
-- On decl shift to state 360
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 1:
## Known stack suffix:
## TYPE
## LR(1) items:
decl -> TYPE . type_vars raw_ident [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
decl -> TYPE . separated_nonempty_list(AND,algebraic_typedef) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
decl -> TYPE . type_vars raw_ident EQUAL record_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 4
-- On type_vars shift to state 10
-- On type_var shift to state 59
-- On separated_nonempty_list(AND,algebraic_typedef) shift to state 60
-- On algebraic_typedef shift to state 61
## Reductions:
-- On ID
--   reduce production type_vars ->

State 2:
## Known stack suffix:
## QUOTE
## LR(1) items:
type_var -> QUOTE . ID [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## QUOTE ID
## LR(1) items:
type_var -> QUOTE ID . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production type_var -> QUOTE ID

State 4:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
type_vars -> LEFTPAR . separated_nonempty_list(COMMA,type_var) RIGHTPAR [ ID ]
## Transitions:
-- On QUOTE shift to state 2
-- On type_var shift to state 5
-- On separated_nonempty_list(COMMA,type_var) shift to state 8
## Reductions:

State 5:
## Known stack suffix:
## type_var
## LR(1) items:
separated_nonempty_list(COMMA,type_var) -> type_var . [ RIGHTPAR ]
separated_nonempty_list(COMMA,type_var) -> type_var . COMMA separated_nonempty_list(COMMA,type_var) [ RIGHTPAR ]
## Transitions:
-- On COMMA shift to state 6
## Reductions:
-- On RIGHTPAR
--   reduce production separated_nonempty_list(COMMA,type_var) -> type_var

State 6:
## Known stack suffix:
## type_var COMMA
## LR(1) items:
separated_nonempty_list(COMMA,type_var) -> type_var COMMA . separated_nonempty_list(COMMA,type_var) [ RIGHTPAR ]
## Transitions:
-- On QUOTE shift to state 2
-- On type_var shift to state 5
-- On separated_nonempty_list(COMMA,type_var) shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## type_var COMMA separated_nonempty_list(COMMA,type_var)
## LR(1) items:
separated_nonempty_list(COMMA,type_var) -> type_var COMMA separated_nonempty_list(COMMA,type_var) . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production separated_nonempty_list(COMMA,type_var) -> type_var COMMA separated_nonempty_list(COMMA,type_var)

State 8:
## Known stack suffix:
## LEFTPAR separated_nonempty_list(COMMA,type_var)
## LR(1) items:
type_vars -> LEFTPAR separated_nonempty_list(COMMA,type_var) . RIGHTPAR [ ID ]
## Transitions:
-- On RIGHTPAR shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## LEFTPAR separated_nonempty_list(COMMA,type_var) RIGHTPAR
## LR(1) items:
type_vars -> LEFTPAR separated_nonempty_list(COMMA,type_var) RIGHTPAR . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production type_vars -> LEFTPAR separated_nonempty_list(COMMA,type_var) RIGHTPAR

State 10:
## Known stack suffix:
## TYPE type_vars
## LR(1) items:
algebraic_typedef -> type_vars . raw_ident EQUAL separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
decl -> TYPE type_vars . raw_ident [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
decl -> TYPE type_vars . raw_ident EQUAL record_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 12
## Reductions:

State 11:
## Known stack suffix:
## ID
## LR(1) items:
raw_ident -> ID . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR OF NOTEQ MINUS MAPS_TO LT LRARROW LOGIC LEFTSQ LEFTPAR LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EXTENDS EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR OF NOTEQ MINUS MAPS_TO LT LRARROW LOGIC LEFTSQ LEFTPAR LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EXTENDS EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production raw_ident -> ID

State 12:
## Known stack suffix:
## TYPE type_vars raw_ident
## LR(1) items:
algebraic_typedef -> type_vars raw_ident . EQUAL separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
decl -> TYPE type_vars raw_ident . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
decl -> TYPE type_vars raw_ident . EQUAL record_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On EQUAL shift to state 13
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> TYPE type_vars raw_ident

State 13:
## Known stack suffix:
## TYPE type_vars raw_ident EQUAL
## LR(1) items:
algebraic_typedef -> type_vars raw_ident EQUAL . separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
decl -> TYPE type_vars raw_ident EQUAL . record_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On LEFTBR shift to state 14
-- On ID shift to state 11
-- On separated_nonempty_list(BAR,algebraic_constructor) shift to state 42
-- On record_type shift to state 43
-- On raw_ident shift to state 44
-- On algebraic_constructor shift to state 56
## Reductions:

State 14:
## Known stack suffix:
## LEFTBR
## LR(1) items:
record_type -> LEFTBR . separated_nonempty_list(PV,record_label_with_type) RIGHTBR [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(PV,record_label_with_type) shift to state 15
-- On record_label_with_type shift to state 17
-- On raw_ident shift to state 20
## Reductions:

State 15:
## Known stack suffix:
## LEFTBR separated_nonempty_list(PV,record_label_with_type)
## LR(1) items:
record_type -> LEFTBR separated_nonempty_list(PV,record_label_with_type) . RIGHTBR [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On RIGHTBR shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## LEFTBR separated_nonempty_list(PV,record_label_with_type) RIGHTBR
## LR(1) items:
record_type -> LEFTBR separated_nonempty_list(PV,record_label_with_type) RIGHTBR . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production record_type -> LEFTBR separated_nonempty_list(PV,record_label_with_type) RIGHTBR

State 17:
## Known stack suffix:
## record_label_with_type
## LR(1) items:
separated_nonempty_list(PV,record_label_with_type) -> record_label_with_type . [ RIGHTBR ]
separated_nonempty_list(PV,record_label_with_type) -> record_label_with_type . PV separated_nonempty_list(PV,record_label_with_type) [ RIGHTBR ]
## Transitions:
-- On PV shift to state 18
## Reductions:
-- On RIGHTBR
--   reduce production separated_nonempty_list(PV,record_label_with_type) -> record_label_with_type

State 18:
## Known stack suffix:
## record_label_with_type PV
## LR(1) items:
separated_nonempty_list(PV,record_label_with_type) -> record_label_with_type PV . separated_nonempty_list(PV,record_label_with_type) [ RIGHTBR ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(PV,record_label_with_type) shift to state 19
-- On record_label_with_type shift to state 17
-- On raw_ident shift to state 20
## Reductions:

State 19:
## Known stack suffix:
## record_label_with_type PV separated_nonempty_list(PV,record_label_with_type)
## LR(1) items:
separated_nonempty_list(PV,record_label_with_type) -> record_label_with_type PV separated_nonempty_list(PV,record_label_with_type) . [ RIGHTBR ]
## Transitions:
## Reductions:
-- On RIGHTBR
--   reduce production separated_nonempty_list(PV,record_label_with_type) -> record_label_with_type PV separated_nonempty_list(PV,record_label_with_type)

State 20:
## Known stack suffix:
## raw_ident
## LR(1) items:
record_label_with_type -> raw_ident . COLON primitive_type [ RIGHTBR PV ]
## Transitions:
-- On COLON shift to state 21
## Reductions:

State 21:
## Known stack suffix:
## raw_ident COLON
## LR(1) items:
record_label_with_type -> raw_ident COLON . primitive_type [ RIGHTBR PV ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On raw_ident shift to state 34
-- On primitive_type shift to state 41
-- On ident shift to state 39
## Reductions:

State 22:
## Known stack suffix:
## UNIT
## LR(1) items:
primitive_type -> UNIT . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production primitive_type -> UNIT

State 23:
## Known stack suffix:
## REAL
## LR(1) items:
primitive_type -> REAL . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production primitive_type -> REAL

State 24:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
primitive_type -> LEFTPAR . separated_nonempty_list(COMMA,primitive_type) RIGHTPAR ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On separated_nonempty_list(COMMA,primitive_type) shift to state 32
-- On raw_ident shift to state 34
-- On primitive_type shift to state 36
-- On ident shift to state 39
## Reductions:

State 25:
## Known stack suffix:
## INT
## LR(1) items:
primitive_type -> INT . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production primitive_type -> INT

State 26:
## Known stack suffix:
## BOOL
## LR(1) items:
primitive_type -> BOOL . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production primitive_type -> BOOL

State 27:
## Known stack suffix:
## BITV
## LR(1) items:
primitive_type -> BITV . LEFTSQ INTEGER RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On LEFTSQ shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## BITV LEFTSQ
## LR(1) items:
primitive_type -> BITV LEFTSQ . INTEGER RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On INTEGER shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## BITV LEFTSQ INTEGER
## LR(1) items:
primitive_type -> BITV LEFTSQ INTEGER . RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On RIGHTSQ shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## BITV LEFTSQ INTEGER RIGHTSQ
## LR(1) items:
primitive_type -> BITV LEFTSQ INTEGER RIGHTSQ . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production primitive_type -> BITV LEFTSQ INTEGER RIGHTSQ

State 31:
## Known stack suffix:
## type_var
## LR(1) items:
primitive_type -> type_var . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production primitive_type -> type_var

State 32:
## Known stack suffix:
## LEFTPAR separated_nonempty_list(COMMA,primitive_type)
## LR(1) items:
primitive_type -> LEFTPAR separated_nonempty_list(COMMA,primitive_type) . RIGHTPAR ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On RIGHTPAR shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## LEFTPAR separated_nonempty_list(COMMA,primitive_type) RIGHTPAR
## LR(1) items:
primitive_type -> LEFTPAR separated_nonempty_list(COMMA,primitive_type) RIGHTPAR . ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 34
-- On ident shift to state 35
## Reductions:

State 34:
## Known stack suffix:
## raw_ident
## LR(1) items:
ident -> raw_ident . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTPAR LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTPAR LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production ident -> raw_ident

State 35:
## Known stack suffix:
## LEFTPAR separated_nonempty_list(COMMA,primitive_type) RIGHTPAR ident
## LR(1) items:
primitive_type -> LEFTPAR separated_nonempty_list(COMMA,primitive_type) RIGHTPAR ident . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production primitive_type -> LEFTPAR separated_nonempty_list(COMMA,primitive_type) RIGHTPAR ident

State 36:
## Known stack suffix:
## primitive_type
## LR(1) items:
primitive_type -> primitive_type . ident [ RIGHTPAR RIGHTARROW ID COMMA ]
separated_nonempty_list(COMMA,primitive_type) -> primitive_type . [ RIGHTPAR RIGHTARROW ]
separated_nonempty_list(COMMA,primitive_type) -> primitive_type . COMMA separated_nonempty_list(COMMA,primitive_type) [ RIGHTPAR RIGHTARROW ]
## Transitions:
-- On ID shift to state 11
-- On COMMA shift to state 37
-- On raw_ident shift to state 34
-- On ident shift to state 40
## Reductions:
-- On RIGHTPAR RIGHTARROW
--   reduce production separated_nonempty_list(COMMA,primitive_type) -> primitive_type

State 37:
## Known stack suffix:
## primitive_type COMMA
## LR(1) items:
separated_nonempty_list(COMMA,primitive_type) -> primitive_type COMMA . separated_nonempty_list(COMMA,primitive_type) [ RIGHTPAR RIGHTARROW ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On separated_nonempty_list(COMMA,primitive_type) shift to state 38
-- On raw_ident shift to state 34
-- On primitive_type shift to state 36
-- On ident shift to state 39
## Reductions:

State 38:
## Known stack suffix:
## primitive_type COMMA separated_nonempty_list(COMMA,primitive_type)
## LR(1) items:
separated_nonempty_list(COMMA,primitive_type) -> primitive_type COMMA separated_nonempty_list(COMMA,primitive_type) . [ RIGHTPAR RIGHTARROW ]
## Transitions:
## Reductions:
-- On RIGHTPAR RIGHTARROW
--   reduce production separated_nonempty_list(COMMA,primitive_type) -> primitive_type COMMA separated_nonempty_list(COMMA,primitive_type)

State 39:
## Known stack suffix:
## ident
## LR(1) items:
primitive_type -> ident . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production primitive_type -> ident

State 40:
## Known stack suffix:
## primitive_type ident
## LR(1) items:
primitive_type -> primitive_type ident . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTBR LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production primitive_type -> primitive_type ident

State 41:
## Known stack suffix:
## raw_ident COLON primitive_type
## LR(1) items:
primitive_type -> primitive_type . ident [ RIGHTBR PV ID ]
record_label_with_type -> raw_ident COLON primitive_type . [ RIGHTBR PV ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 34
-- On ident shift to state 40
## Reductions:
-- On RIGHTBR PV
--   reduce production record_label_with_type -> raw_ident COLON primitive_type

State 42:
## Known stack suffix:
## type_vars raw_ident EQUAL separated_nonempty_list(BAR,algebraic_constructor)
## LR(1) items:
algebraic_typedef -> type_vars raw_ident EQUAL separated_nonempty_list(BAR,algebraic_constructor) . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND
--   reduce production algebraic_typedef -> type_vars raw_ident EQUAL separated_nonempty_list(BAR,algebraic_constructor)

State 43:
## Known stack suffix:
## TYPE type_vars raw_ident EQUAL record_type
## LR(1) items:
decl -> TYPE type_vars raw_ident EQUAL record_type . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> TYPE type_vars raw_ident EQUAL record_type

State 44:
## Known stack suffix:
## raw_ident
## LR(1) items:
algebraic_constructor -> raw_ident . algebraic_args [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND ]
## Transitions:
-- On OF shift to state 45
-- On algebraic_args shift to state 55
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND
--   reduce production algebraic_args ->

State 45:
## Known stack suffix:
## OF
## LR(1) items:
algebraic_args -> OF . LEFTBR separated_nonempty_list(PV,algebraic_label_with_type) RIGHTBR [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND ]
## Transitions:
-- On LEFTBR shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## OF LEFTBR
## LR(1) items:
algebraic_args -> OF LEFTBR . separated_nonempty_list(PV,algebraic_label_with_type) RIGHTBR [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(PV,algebraic_label_with_type) shift to state 47
-- On raw_ident shift to state 34
-- On ident shift to state 49
-- On algebraic_label_with_type shift to state 52
## Reductions:

State 47:
## Known stack suffix:
## OF LEFTBR separated_nonempty_list(PV,algebraic_label_with_type)
## LR(1) items:
algebraic_args -> OF LEFTBR separated_nonempty_list(PV,algebraic_label_with_type) . RIGHTBR [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND ]
## Transitions:
-- On RIGHTBR shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## OF LEFTBR separated_nonempty_list(PV,algebraic_label_with_type) RIGHTBR
## LR(1) items:
algebraic_args -> OF LEFTBR separated_nonempty_list(PV,algebraic_label_with_type) RIGHTBR . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND
--   reduce production algebraic_args -> OF LEFTBR separated_nonempty_list(PV,algebraic_label_with_type) RIGHTBR

State 49:
## Known stack suffix:
## ident
## LR(1) items:
algebraic_label_with_type -> ident . COLON primitive_type [ RIGHTBR PV ]
## Transitions:
-- On COLON shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## ident COLON
## LR(1) items:
algebraic_label_with_type -> ident COLON . primitive_type [ RIGHTBR PV ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On raw_ident shift to state 34
-- On primitive_type shift to state 51
-- On ident shift to state 39
## Reductions:

State 51:
## Known stack suffix:
## ident COLON primitive_type
## LR(1) items:
algebraic_label_with_type -> ident COLON primitive_type . [ RIGHTBR PV ]
primitive_type -> primitive_type . ident [ RIGHTBR PV ID ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 34
-- On ident shift to state 40
## Reductions:
-- On RIGHTBR PV
--   reduce production algebraic_label_with_type -> ident COLON primitive_type

State 52:
## Known stack suffix:
## algebraic_label_with_type
## LR(1) items:
separated_nonempty_list(PV,algebraic_label_with_type) -> algebraic_label_with_type . [ RIGHTBR ]
separated_nonempty_list(PV,algebraic_label_with_type) -> algebraic_label_with_type . PV separated_nonempty_list(PV,algebraic_label_with_type) [ RIGHTBR ]
## Transitions:
-- On PV shift to state 53
## Reductions:
-- On RIGHTBR
--   reduce production separated_nonempty_list(PV,algebraic_label_with_type) -> algebraic_label_with_type

State 53:
## Known stack suffix:
## algebraic_label_with_type PV
## LR(1) items:
separated_nonempty_list(PV,algebraic_label_with_type) -> algebraic_label_with_type PV . separated_nonempty_list(PV,algebraic_label_with_type) [ RIGHTBR ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(PV,algebraic_label_with_type) shift to state 54
-- On raw_ident shift to state 34
-- On ident shift to state 49
-- On algebraic_label_with_type shift to state 52
## Reductions:

State 54:
## Known stack suffix:
## algebraic_label_with_type PV separated_nonempty_list(PV,algebraic_label_with_type)
## LR(1) items:
separated_nonempty_list(PV,algebraic_label_with_type) -> algebraic_label_with_type PV separated_nonempty_list(PV,algebraic_label_with_type) . [ RIGHTBR ]
## Transitions:
## Reductions:
-- On RIGHTBR
--   reduce production separated_nonempty_list(PV,algebraic_label_with_type) -> algebraic_label_with_type PV separated_nonempty_list(PV,algebraic_label_with_type)

State 55:
## Known stack suffix:
## raw_ident algebraic_args
## LR(1) items:
algebraic_constructor -> raw_ident algebraic_args . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF BAR AXIOM AND
--   reduce production algebraic_constructor -> raw_ident algebraic_args

State 56:
## Known stack suffix:
## algebraic_constructor
## LR(1) items:
separated_nonempty_list(BAR,algebraic_constructor) -> algebraic_constructor . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
separated_nonempty_list(BAR,algebraic_constructor) -> algebraic_constructor . BAR separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## Transitions:
-- On BAR shift to state 57
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND
--   reduce production separated_nonempty_list(BAR,algebraic_constructor) -> algebraic_constructor

State 57:
## Known stack suffix:
## algebraic_constructor BAR
## LR(1) items:
separated_nonempty_list(BAR,algebraic_constructor) -> algebraic_constructor BAR . separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(BAR,algebraic_constructor) shift to state 58
-- On raw_ident shift to state 44
-- On algebraic_constructor shift to state 56
## Reductions:

State 58:
## Known stack suffix:
## algebraic_constructor BAR separated_nonempty_list(BAR,algebraic_constructor)
## LR(1) items:
separated_nonempty_list(BAR,algebraic_constructor) -> algebraic_constructor BAR separated_nonempty_list(BAR,algebraic_constructor) . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND
--   reduce production separated_nonempty_list(BAR,algebraic_constructor) -> algebraic_constructor BAR separated_nonempty_list(BAR,algebraic_constructor)

State 59:
## Known stack suffix:
## type_var
## LR(1) items:
type_vars -> type_var . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production type_vars -> type_var

State 60:
## Known stack suffix:
## TYPE separated_nonempty_list(AND,algebraic_typedef)
## LR(1) items:
decl -> TYPE separated_nonempty_list(AND,algebraic_typedef) . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> TYPE separated_nonempty_list(AND,algebraic_typedef)

State 61:
## Known stack suffix:
## algebraic_typedef
## LR(1) items:
separated_nonempty_list(AND,algebraic_typedef) -> algebraic_typedef . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
separated_nonempty_list(AND,algebraic_typedef) -> algebraic_typedef . AND separated_nonempty_list(AND,algebraic_typedef) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On AND shift to state 62
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production separated_nonempty_list(AND,algebraic_typedef) -> algebraic_typedef

State 62:
## Known stack suffix:
## algebraic_typedef AND
## LR(1) items:
separated_nonempty_list(AND,algebraic_typedef) -> algebraic_typedef AND . separated_nonempty_list(AND,algebraic_typedef) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 4
-- On type_vars shift to state 63
-- On type_var shift to state 59
-- On separated_nonempty_list(AND,algebraic_typedef) shift to state 66
-- On algebraic_typedef shift to state 61
## Reductions:
-- On ID
--   reduce production type_vars ->

State 63:
## Known stack suffix:
## type_vars
## LR(1) items:
algebraic_typedef -> type_vars . raw_ident EQUAL separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## type_vars raw_ident
## LR(1) items:
algebraic_typedef -> type_vars raw_ident . EQUAL separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## Transitions:
-- On EQUAL shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## type_vars raw_ident EQUAL
## LR(1) items:
algebraic_typedef -> type_vars raw_ident EQUAL . separated_nonempty_list(BAR,algebraic_constructor) [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM AND ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(BAR,algebraic_constructor) shift to state 42
-- On raw_ident shift to state 44
-- On algebraic_constructor shift to state 56
## Reductions:

State 66:
## Known stack suffix:
## algebraic_typedef AND separated_nonempty_list(AND,algebraic_typedef)
## LR(1) items:
separated_nonempty_list(AND,algebraic_typedef) -> algebraic_typedef AND separated_nonempty_list(AND,algebraic_typedef) . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production separated_nonempty_list(AND,algebraic_typedef) -> algebraic_typedef AND separated_nonempty_list(AND,algebraic_typedef)

State 67:
## Known stack suffix:
## THEORY
## LR(1) items:
decl -> THEORY . decl_ident EXTENDS decl_ident EQUAL list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 68
-- On decl_ident shift to state 69
## Reductions:

State 68:
## Known stack suffix:
## raw_ident
## LR(1) items:
decl_ident -> raw_ident . [ EXTENDS EQUAL COLON ]
## Transitions:
## Reductions:
-- On EXTENDS EQUAL COLON
--   reduce production decl_ident -> raw_ident

State 69:
## Known stack suffix:
## THEORY decl_ident
## LR(1) items:
decl -> THEORY decl_ident . EXTENDS decl_ident EQUAL list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On EXTENDS shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## THEORY decl_ident EXTENDS
## LR(1) items:
decl -> THEORY decl_ident EXTENDS . decl_ident EQUAL list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 68
-- On decl_ident shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## THEORY decl_ident EXTENDS decl_ident
## LR(1) items:
decl -> THEORY decl_ident EXTENDS decl_ident . EQUAL list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On EQUAL shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## THEORY decl_ident EXTENDS decl_ident EQUAL
## LR(1) items:
decl -> THEORY decl_ident EXTENDS decl_ident EQUAL . list(theory_elt) END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On CASESPLIT shift to state 73
-- On AXIOM shift to state 292
-- On theory_elt shift to state 296
-- On list(theory_elt) shift to state 298
## Reductions:
-- On END
--   reduce production list(theory_elt) ->

State 73:
## Known stack suffix:
## CASESPLIT
## LR(1) items:
theory_elt -> CASESPLIT . decl_ident COLON lexpr [ END CASESPLIT AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 68
-- On decl_ident shift to state 74
## Reductions:

State 74:
## Known stack suffix:
## CASESPLIT decl_ident
## LR(1) items:
theory_elt -> CASESPLIT decl_ident . COLON lexpr [ END CASESPLIT AXIOM ]
## Transitions:
-- On COLON shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## CASESPLIT decl_ident COLON
## LR(1) items:
theory_elt -> CASESPLIT decl_ident COLON . lexpr [ END CASESPLIT AXIOM ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 291
-- On ident shift to state 143
## Reductions:

State 76:
## Known stack suffix:
## VOID
## LR(1) items:
simple_expr -> VOID . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> VOID

State 77:
## Known stack suffix:
## TRUE
## LR(1) items:
simple_expr -> TRUE . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> TRUE

State 78:
## Known stack suffix:
## STRING
## LR(1) items:
lexpr -> STRING . COLON lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On COLON shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## STRING COLON
## LR(1) items:
lexpr -> STRING COLON . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 290
-- On ident shift to state 143
## Reductions:

State 80:
## Known stack suffix:
## NOT
## LR(1) items:
lexpr -> NOT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 289
-- On ident shift to state 143
## Reductions:

State 81:
## Known stack suffix:
## MINUS
## LR(1) items:
lexpr -> MINUS . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 288
-- On ident shift to state 143
## Reductions:

State 82:
## Known stack suffix:
## MATCH
## LR(1) items:
lexpr -> MATCH . lexpr WITH match_cases END [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 269
-- On ident shift to state 143
## Reductions:

State 83:
## Known stack suffix:
## LET
## LR(1) items:
lexpr -> LET . separated_nonempty_list(COMMA,let_binder) IN lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(COMMA,let_binder) shift to state 84
-- On raw_ident shift to state 34
-- On let_binder shift to state 263
-- On ident shift to state 266
## Reductions:

State 84:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_binder)
## LR(1) items:
lexpr -> LET separated_nonempty_list(COMMA,let_binder) . IN lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On IN shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_binder) IN
## LR(1) items:
lexpr -> LET separated_nonempty_list(COMMA,let_binder) IN . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 262
-- On ident shift to state 143
## Reductions:

State 86:
## Known stack suffix:
## LEFTSQ
## LR(1) items:
lexpr -> LEFTSQ . BAR INTEGER BAR RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On BAR shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## LEFTSQ BAR
## LR(1) items:
lexpr -> LEFTSQ BAR . INTEGER BAR RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On INTEGER shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## LEFTSQ BAR INTEGER
## LR(1) items:
lexpr -> LEFTSQ BAR INTEGER . BAR RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On BAR shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## LEFTSQ BAR INTEGER BAR
## LR(1) items:
lexpr -> LEFTSQ BAR INTEGER BAR . RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On RIGHTSQ shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## LEFTSQ BAR INTEGER BAR RIGHTSQ
## LR(1) items:
lexpr -> LEFTSQ BAR INTEGER BAR RIGHTSQ . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> LEFTSQ BAR INTEGER BAR RIGHTSQ

State 91:
## Known stack suffix:
## LEFTPAR
## LR(1) items:
simple_expr -> LEFTPAR . lexpr RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 260
-- On ident shift to state 143
## Reductions:

State 92:
## Known stack suffix:
## LEFTBR
## LR(1) items:
simple_expr -> LEFTBR . separated_nonempty_list(PV,label_expr) RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> LEFTBR . simple_expr WITH separated_nonempty_list(PV,label_expr) RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FALSE shift to state 95
-- On DECIMAL shift to state 96
-- On simple_expr shift to state 97
-- On separated_nonempty_list(PV,label_expr) shift to state 257
-- On raw_ident shift to state 34
-- On label_expr shift to state 101
-- On ident shift to state 259
## Reductions:

State 93:
## Known stack suffix:
## INTEGER
## LR(1) items:
simple_expr -> INTEGER . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> INTEGER

State 94:
## Known stack suffix:
## HEXADECIMAL
## LR(1) items:
simple_expr -> HEXADECIMAL . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> HEXADECIMAL

State 95:
## Known stack suffix:
## FALSE
## LR(1) items:
simple_expr -> FALSE . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> FALSE

State 96:
## Known stack suffix:
## DECIMAL
## LR(1) items:
simple_expr -> DECIMAL . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> DECIMAL

State 97:
## Known stack suffix:
## LEFTBR simple_expr
## LR(1) items:
simple_expr -> LEFTBR simple_expr . WITH separated_nonempty_list(PV,label_expr) RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr . DOT raw_ident [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
simple_expr -> simple_expr . LEFTSQ lexpr RIGHTSQ [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
simple_expr -> simple_expr . LEFTSQ separated_nonempty_list(COMMA,array_assignment) RIGHTSQ [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
simple_expr -> simple_expr . COLON primitive_type [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
simple_expr -> simple_expr . QM raw_ident [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
simple_expr -> simple_expr . QM_ID [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
simple_expr -> simple_expr . SHARP raw_ident [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
## Transitions:
-- On WITH shift to state 98
-- On SHARP shift to state 124
-- On QM_ID shift to state 126
-- On QM shift to state 127
-- On LEFTSQ shift to state 129
-- On DOT shift to state 192
-- On COLON shift to state 194
## Reductions:

State 98:
## Known stack suffix:
## LEFTBR simple_expr WITH
## LR(1) items:
simple_expr -> LEFTBR simple_expr WITH . separated_nonempty_list(PV,label_expr) RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(PV,label_expr) shift to state 99
-- On raw_ident shift to state 34
-- On label_expr shift to state 101
-- On ident shift to state 104
## Reductions:

State 99:
## Known stack suffix:
## LEFTBR simple_expr WITH separated_nonempty_list(PV,label_expr)
## LR(1) items:
simple_expr -> LEFTBR simple_expr WITH separated_nonempty_list(PV,label_expr) . RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On RIGHTBR shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## LEFTBR simple_expr WITH separated_nonempty_list(PV,label_expr) RIGHTBR
## LR(1) items:
simple_expr -> LEFTBR simple_expr WITH separated_nonempty_list(PV,label_expr) RIGHTBR . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> LEFTBR simple_expr WITH separated_nonempty_list(PV,label_expr) RIGHTBR

State 101:
## Known stack suffix:
## label_expr
## LR(1) items:
separated_nonempty_list(PV,label_expr) -> label_expr . [ RIGHTBR ]
separated_nonempty_list(PV,label_expr) -> label_expr . PV separated_nonempty_list(PV,label_expr) [ RIGHTBR ]
## Transitions:
-- On PV shift to state 102
## Reductions:
-- On RIGHTBR
--   reduce production separated_nonempty_list(PV,label_expr) -> label_expr

State 102:
## Known stack suffix:
## label_expr PV
## LR(1) items:
separated_nonempty_list(PV,label_expr) -> label_expr PV . separated_nonempty_list(PV,label_expr) [ RIGHTBR ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(PV,label_expr) shift to state 103
-- On raw_ident shift to state 34
-- On label_expr shift to state 101
-- On ident shift to state 104
## Reductions:

State 103:
## Known stack suffix:
## label_expr PV separated_nonempty_list(PV,label_expr)
## LR(1) items:
separated_nonempty_list(PV,label_expr) -> label_expr PV separated_nonempty_list(PV,label_expr) . [ RIGHTBR ]
## Transitions:
## Reductions:
-- On RIGHTBR
--   reduce production separated_nonempty_list(PV,label_expr) -> label_expr PV separated_nonempty_list(PV,label_expr)

State 104:
## Known stack suffix:
## ident
## LR(1) items:
label_expr -> ident . EQUAL lexpr [ RIGHTBR PV ]
## Transitions:
-- On EQUAL shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## ident EQUAL
## LR(1) items:
label_expr -> ident EQUAL . lexpr [ RIGHTBR PV ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 256
-- On ident shift to state 143
## Reductions:

State 106:
## Known stack suffix:
## IF
## LR(1) items:
lexpr -> IF . lexpr THEN lexpr ELSE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 251
-- On ident shift to state 143
## Reductions:

State 107:
## Known stack suffix:
## FORALL
## LR(1) items:
lexpr -> FORALL . separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 108
-- On separated_nonempty_list(COMMA,named_ident) shift to state 110
-- On separated_nonempty_list(COMMA,multi_logic_binder) shift to state 113
-- On raw_named_ident shift to state 209
-- On named_ident shift to state 210
-- On multi_logic_binder shift to state 213
## Reductions:

State 108:
## Known stack suffix:
## ID
## LR(1) items:
raw_named_ident -> ID . [ LEFTPAR EQUAL COMMA COLON ]
raw_named_ident -> ID . STRING [ LEFTPAR EQUAL COMMA COLON ]
## Transitions:
-- On STRING shift to state 109
## Reductions:
-- On LEFTPAR EQUAL COMMA COLON
--   reduce production raw_named_ident -> ID

State 109:
## Known stack suffix:
## ID STRING
## LR(1) items:
raw_named_ident -> ID STRING . [ LEFTPAR EQUAL COMMA COLON ]
## Transitions:
## Reductions:
-- On LEFTPAR EQUAL COMMA COLON
--   reduce production raw_named_ident -> ID STRING

State 110:
## Known stack suffix:
## separated_nonempty_list(COMMA,named_ident)
## LR(1) items:
multi_logic_binder -> separated_nonempty_list(COMMA,named_ident) . COLON primitive_type [ LEFTSQ LEFTBR DOT COMMA ]
## Transitions:
-- On COLON shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## separated_nonempty_list(COMMA,named_ident) COLON
## LR(1) items:
multi_logic_binder -> separated_nonempty_list(COMMA,named_ident) COLON . primitive_type [ LEFTSQ LEFTBR DOT COMMA ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On raw_ident shift to state 34
-- On primitive_type shift to state 112
-- On ident shift to state 39
## Reductions:

State 112:
## Known stack suffix:
## separated_nonempty_list(COMMA,named_ident) COLON primitive_type
## LR(1) items:
multi_logic_binder -> separated_nonempty_list(COMMA,named_ident) COLON primitive_type . [ LEFTSQ LEFTBR DOT COMMA ]
primitive_type -> primitive_type . ident [ LEFTSQ LEFTBR ID DOT COMMA ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 34
-- On ident shift to state 40
## Reductions:
-- On LEFTSQ LEFTBR DOT COMMA
--   reduce production multi_logic_binder -> separated_nonempty_list(COMMA,named_ident) COLON primitive_type

State 113:
## Known stack suffix:
## FORALL separated_nonempty_list(COMMA,multi_logic_binder)
## LR(1) items:
lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) . triggers filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On LEFTSQ shift to state 114
-- On triggers shift to state 247
## Reductions:
-- On LEFTBR DOT
--   reduce production triggers ->

State 114:
## Known stack suffix:
## LEFTSQ
## LR(1) items:
triggers -> LEFTSQ . separated_nonempty_list(BAR,trigger) RIGHTSQ [ LEFTBR DOT ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On trigger shift to state 216
-- On simple_expr shift to state 123
-- On separated_nonempty_list(COMMA,lexpr_or_dom) shift to state 218
-- On separated_nonempty_list(BAR,trigger) shift to state 245
-- On raw_ident shift to state 220
-- On lexpr_or_dom shift to state 223
-- On lexpr shift to state 226
-- On ident shift to state 143
## Reductions:

State 115:
## Known stack suffix:
## EXISTS
## LR(1) items:
lexpr -> EXISTS . separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 108
-- On separated_nonempty_list(COMMA,named_ident) shift to state 110
-- On separated_nonempty_list(COMMA,multi_logic_binder) shift to state 116
-- On raw_named_ident shift to state 209
-- On named_ident shift to state 210
-- On multi_logic_binder shift to state 213
## Reductions:

State 116:
## Known stack suffix:
## EXISTS separated_nonempty_list(COMMA,multi_logic_binder)
## LR(1) items:
lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) . triggers filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On LEFTSQ shift to state 114
-- On triggers shift to state 117
## Reductions:
-- On LEFTBR DOT
--   reduce production triggers ->

State 117:
## Known stack suffix:
## EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers
## LR(1) items:
lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers . filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On LEFTBR shift to state 118
-- On filters shift to state 206
## Reductions:
-- On DOT
--   reduce production filters ->

State 118:
## Known stack suffix:
## LEFTBR
## LR(1) items:
filters -> LEFTBR . separated_nonempty_list(COMMA,lexpr) RIGHTBR [ DOT ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On separated_nonempty_list(COMMA,lexpr) shift to state 204
-- On raw_ident shift to state 34
-- On lexpr shift to state 148
-- On ident shift to state 143
## Reductions:

State 119:
## Known stack suffix:
## DISTINCT
## LR(1) items:
lexpr -> DISTINCT . LEFTPAR list2_lexpr_sep_comma RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On LEFTPAR shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## DISTINCT LEFTPAR
## LR(1) items:
lexpr -> DISTINCT LEFTPAR . list2_lexpr_sep_comma RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On list2_lexpr_sep_comma shift to state 198
-- On lexpr shift to state 200
-- On ident shift to state 143
## Reductions:

State 121:
## Known stack suffix:
## CUT
## LR(1) items:
lexpr -> CUT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 197
-- On ident shift to state 143
## Reductions:

State 122:
## Known stack suffix:
## CHECK
## LR(1) items:
lexpr -> CHECK . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 196
-- On ident shift to state 143
## Reductions:

State 123:
## Known stack suffix:
## simple_expr
## LR(1) items:
lexpr -> simple_expr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr . DOT raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr . LEFTSQ lexpr RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr . LEFTSQ separated_nonempty_list(COMMA,array_assignment) RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr . COLON primitive_type [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr . QM raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr . QM_ID [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr . SHARP raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On SHARP shift to state 124
-- On QM_ID shift to state 126
-- On QM shift to state 127
-- On LEFTSQ shift to state 129
-- On DOT shift to state 192
-- On COLON shift to state 194
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> simple_expr

State 124:
## Known stack suffix:
## simple_expr SHARP
## LR(1) items:
simple_expr -> simple_expr SHARP . raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## simple_expr SHARP raw_ident
## LR(1) items:
simple_expr -> simple_expr SHARP raw_ident . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> simple_expr SHARP raw_ident

State 126:
## Known stack suffix:
## simple_expr QM_ID
## LR(1) items:
simple_expr -> simple_expr QM_ID . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> simple_expr QM_ID

State 127:
## Known stack suffix:
## simple_expr QM
## LR(1) items:
simple_expr -> simple_expr QM . raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## simple_expr QM raw_ident
## LR(1) items:
simple_expr -> simple_expr QM raw_ident . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> simple_expr QM raw_ident

State 129:
## Known stack suffix:
## simple_expr LEFTSQ
## LR(1) items:
simple_expr -> simple_expr LEFTSQ . lexpr RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr LEFTSQ . separated_nonempty_list(COMMA,array_assignment) RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On separated_nonempty_list(COMMA,array_assignment) shift to state 130
-- On raw_ident shift to state 34
-- On lexpr shift to state 132
-- On ident shift to state 143
-- On array_assignment shift to state 188
## Reductions:

State 130:
## Known stack suffix:
## simple_expr LEFTSQ separated_nonempty_list(COMMA,array_assignment)
## LR(1) items:
simple_expr -> simple_expr LEFTSQ separated_nonempty_list(COMMA,array_assignment) . RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On RIGHTSQ shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## simple_expr LEFTSQ separated_nonempty_list(COMMA,array_assignment) RIGHTSQ
## LR(1) items:
simple_expr -> simple_expr LEFTSQ separated_nonempty_list(COMMA,array_assignment) RIGHTSQ . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> simple_expr LEFTSQ separated_nonempty_list(COMMA,array_assignment) RIGHTSQ

State 132:
## Known stack suffix:
## simple_expr LEFTSQ lexpr
## LR(1) items:
array_assignment -> lexpr . LEFTARROW lexpr [ RIGHTSQ COMMA ]
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
simple_expr -> simple_expr LEFTSQ lexpr . RIGHTSQ [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTSQ shift to state 185
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LEFTARROW shift to state 186
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:

State 133:
## Known stack suffix:
## lexpr XOR
## LR(1) items:
lexpr -> lexpr XOR . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 134
-- On ident shift to state 143
## Reductions:

State 134:
## Known stack suffix:
## lexpr XOR lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr XOR lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR REWRITING PV PRED LOGIC LEFTARROW IN GOAL FUNC EOF END ELSE COMMA CASESPLIT BAR AXIOM
--   reduce production lexpr -> lexpr XOR lexpr

State 135:
## Known stack suffix:
## lexpr TIMES
## LR(1) items:
lexpr -> lexpr TIMES . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 136
-- On ident shift to state 143
## Reductions:

State 136:
## Known stack suffix:
## lexpr TIMES lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr TIMES lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On HAT shift to state 137
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> lexpr TIMES lexpr

State 137:
## Known stack suffix:
## lexpr HAT
## LR(1) items:
lexpr -> lexpr HAT . LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On LEFTBR shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## lexpr HAT LEFTBR
## LR(1) items:
lexpr -> lexpr HAT LEFTBR . INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On INTEGER shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## lexpr HAT LEFTBR INTEGER
## LR(1) items:
lexpr -> lexpr HAT LEFTBR INTEGER . COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On COMMA shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## lexpr HAT LEFTBR INTEGER COMMA
## LR(1) items:
lexpr -> lexpr HAT LEFTBR INTEGER COMMA . INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On INTEGER shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## lexpr HAT LEFTBR INTEGER COMMA INTEGER
## LR(1) items:
lexpr -> lexpr HAT LEFTBR INTEGER COMMA INTEGER . RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On RIGHTBR shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## lexpr HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR
## LR(1) items:
lexpr -> lexpr HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> lexpr HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR

State 143:
## Known stack suffix:
## ident
## LR(1) items:
simple_expr -> ident . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,lexpr)) RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On LEFTPAR shift to state 144
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> ident

State 144:
## Known stack suffix:
## ident LEFTPAR
## LR(1) items:
simple_expr -> ident LEFTPAR . loption(separated_nonempty_list(COMMA,lexpr)) RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On separated_nonempty_list(COMMA,lexpr) shift to state 145
-- On raw_ident shift to state 34
-- On loption(separated_nonempty_list(COMMA,lexpr)) shift to state 146
-- On lexpr shift to state 148
-- On ident shift to state 143
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,lexpr)) ->

State 145:
## Known stack suffix:
## separated_nonempty_list(COMMA,lexpr)
## LR(1) items:
loption(separated_nonempty_list(COMMA,lexpr)) -> separated_nonempty_list(COMMA,lexpr) . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,lexpr)) -> separated_nonempty_list(COMMA,lexpr)

State 146:
## Known stack suffix:
## ident LEFTPAR loption(separated_nonempty_list(COMMA,lexpr))
## LR(1) items:
simple_expr -> ident LEFTPAR loption(separated_nonempty_list(COMMA,lexpr)) . RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On RIGHTPAR shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## ident LEFTPAR loption(separated_nonempty_list(COMMA,lexpr)) RIGHTPAR
## LR(1) items:
simple_expr -> ident LEFTPAR loption(separated_nonempty_list(COMMA,lexpr)) RIGHTPAR . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> ident LEFTPAR loption(separated_nonempty_list(COMMA,lexpr)) RIGHTPAR

State 148:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTBR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
separated_nonempty_list(COMMA,lexpr) -> lexpr . [ RIGHTPAR RIGHTBR ]
separated_nonempty_list(COMMA,lexpr) -> lexpr . COMMA separated_nonempty_list(COMMA,lexpr) [ RIGHTPAR RIGHTBR ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On COMMA shift to state 183
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On RIGHTPAR RIGHTBR
--   reduce production separated_nonempty_list(COMMA,lexpr) -> lexpr

State 149:
## Known stack suffix:
## lexpr SLASH
## LR(1) items:
lexpr -> lexpr SLASH . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 150
-- On ident shift to state 143
## Reductions:

State 150:
## Known stack suffix:
## lexpr SLASH lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr SLASH lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On HAT shift to state 137
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> lexpr SLASH lexpr

State 151:
## Known stack suffix:
## lexpr RIGHTARROW
## LR(1) items:
lexpr -> lexpr RIGHTARROW . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 152
-- On ident shift to state 143
## Reductions:

State 152:
## Known stack suffix:
## lexpr RIGHTARROW lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr RIGHTARROW lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR REWRITING PV PRED LOGIC LEFTARROW IN GOAL FUNC EOF END ELSE COMMA CASESPLIT BAR AXIOM
--   reduce production lexpr -> lexpr RIGHTARROW lexpr

State 153:
## Known stack suffix:
## lexpr POWDOT
## LR(1) items:
lexpr -> lexpr POWDOT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 154
-- On ident shift to state 143
## Reductions:

State 154:
## Known stack suffix:
## lexpr POWDOT lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr POWDOT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On HAT shift to state 137
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> lexpr POWDOT lexpr

State 155:
## Known stack suffix:
## lexpr POW
## LR(1) items:
lexpr -> lexpr POW . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 156
-- On ident shift to state 143
## Reductions:

State 156:
## Known stack suffix:
## lexpr POW lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr POW lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On HAT shift to state 137
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> lexpr POW lexpr

State 157:
## Known stack suffix:
## lexpr PLUS
## LR(1) items:
lexpr -> lexpr PLUS . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 158
-- On ident shift to state 143
## Reductions:

State 158:
## Known stack suffix:
## lexpr PLUS lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr PLUS lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PERCENT shift to state 159
-- On HAT shift to state 137
-- On AT shift to state 161
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED PLUS OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AND
--   reduce production lexpr -> lexpr PLUS lexpr

State 159:
## Known stack suffix:
## lexpr PERCENT
## LR(1) items:
lexpr -> lexpr PERCENT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 160
-- On ident shift to state 143
## Reductions:

State 160:
## Known stack suffix:
## lexpr PERCENT lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr PERCENT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On HAT shift to state 137
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> lexpr PERCENT lexpr

State 161:
## Known stack suffix:
## lexpr AT
## LR(1) items:
lexpr -> lexpr AT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 162
-- On ident shift to state 143
## Reductions:

State 162:
## Known stack suffix:
## lexpr AT lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr AT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On HAT shift to state 137
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> lexpr AT lexpr

State 163:
## Known stack suffix:
## lexpr OR
## LR(1) items:
lexpr -> lexpr OR . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 164
-- On ident shift to state 143
## Reductions:

State 164:
## Known stack suffix:
## lexpr OR lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr OR lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED LRARROW LOGIC LEFTARROW IN GOAL FUNC EOF END ELSE COMMA CASESPLIT BAR AXIOM
--   reduce production lexpr -> lexpr OR lexpr

State 165:
## Known stack suffix:
## lexpr NOTEQ
## LR(1) items:
lexpr -> lexpr NOTEQ . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 166
-- On ident shift to state 143
## Reductions:

State 166:
## Known stack suffix:
## lexpr NOTEQ lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr NOTEQ lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On MINUS shift to state 167
-- On HAT shift to state 137
-- On AT shift to state 161
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED OR NOTEQ LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AND
--   reduce production lexpr -> lexpr NOTEQ lexpr

State 167:
## Known stack suffix:
## lexpr MINUS
## LR(1) items:
lexpr -> lexpr MINUS . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 168
-- On ident shift to state 143
## Reductions:

State 168:
## Known stack suffix:
## lexpr MINUS lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr MINUS lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PERCENT shift to state 159
-- On HAT shift to state 137
-- On AT shift to state 161
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED PLUS OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AND
--   reduce production lexpr -> lexpr MINUS lexpr

State 169:
## Known stack suffix:
## lexpr LT
## LR(1) items:
lexpr -> lexpr LT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 170
-- On ident shift to state 143
## Reductions:

State 170:
## Known stack suffix:
## lexpr LT lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr LT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On MINUS shift to state 167
-- On HAT shift to state 137
-- On AT shift to state 161
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED OR NOTEQ LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AND
--   reduce production lexpr -> lexpr LT lexpr

State 171:
## Known stack suffix:
## lexpr LE
## LR(1) items:
lexpr -> lexpr LE . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 172
-- On ident shift to state 143
## Reductions:

State 172:
## Known stack suffix:
## lexpr LE lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr LE lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On MINUS shift to state 167
-- On HAT shift to state 137
-- On AT shift to state 161
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED OR NOTEQ LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AND
--   reduce production lexpr -> lexpr LE lexpr

State 173:
## Known stack suffix:
## lexpr GT
## LR(1) items:
lexpr -> lexpr GT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 174
-- On ident shift to state 143
## Reductions:

State 174:
## Known stack suffix:
## lexpr GT lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr GT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On MINUS shift to state 167
-- On HAT shift to state 137
-- On AT shift to state 161
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED OR NOTEQ LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AND
--   reduce production lexpr -> lexpr GT lexpr

State 175:
## Known stack suffix:
## lexpr GE
## LR(1) items:
lexpr -> lexpr GE . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 176
-- On ident shift to state 143
## Reductions:

State 176:
## Known stack suffix:
## lexpr GE lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr GE lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On MINUS shift to state 167
-- On HAT shift to state 137
-- On AT shift to state 161
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED OR NOTEQ LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AND
--   reduce production lexpr -> lexpr GE lexpr

State 177:
## Known stack suffix:
## lexpr EQUAL
## LR(1) items:
lexpr -> lexpr EQUAL . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 178
-- On ident shift to state 143
## Reductions:

State 178:
## Known stack suffix:
## lexpr EQUAL lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr EQUAL lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On MINUS shift to state 167
-- On HAT shift to state 137
-- On AT shift to state 161
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED OR NOTEQ LT LRARROW LOGIC LEFTARROW LE IN GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AND
--   reduce production lexpr -> lexpr EQUAL lexpr

State 179:
## Known stack suffix:
## lexpr AND
## LR(1) items:
lexpr -> lexpr AND . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 180
-- On ident shift to state 143
## Reductions:

State 180:
## Known stack suffix:
## lexpr AND lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr AND lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED OR LRARROW LOGIC LEFTARROW IN GOAL FUNC EOF END ELSE COMMA CASESPLIT BAR AXIOM
--   reduce production lexpr -> lexpr AND lexpr

State 181:
## Known stack suffix:
## lexpr LRARROW
## LR(1) items:
lexpr -> lexpr LRARROW . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 182
-- On ident shift to state 143
## Reductions:

State 182:
## Known stack suffix:
## lexpr LRARROW lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr LRARROW lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR REWRITING PV PRED LOGIC LEFTARROW IN GOAL FUNC EOF END ELSE COMMA CASESPLIT BAR AXIOM
--   reduce production lexpr -> lexpr LRARROW lexpr

State 183:
## Known stack suffix:
## lexpr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,lexpr) -> lexpr COMMA . separated_nonempty_list(COMMA,lexpr) [ RIGHTPAR RIGHTBR ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On separated_nonempty_list(COMMA,lexpr) shift to state 184
-- On raw_ident shift to state 34
-- On lexpr shift to state 148
-- On ident shift to state 143
## Reductions:

State 184:
## Known stack suffix:
## lexpr COMMA separated_nonempty_list(COMMA,lexpr)
## LR(1) items:
separated_nonempty_list(COMMA,lexpr) -> lexpr COMMA separated_nonempty_list(COMMA,lexpr) . [ RIGHTPAR RIGHTBR ]
## Transitions:
## Reductions:
-- On RIGHTPAR RIGHTBR
--   reduce production separated_nonempty_list(COMMA,lexpr) -> lexpr COMMA separated_nonempty_list(COMMA,lexpr)

State 185:
## Known stack suffix:
## simple_expr LEFTSQ lexpr RIGHTSQ
## LR(1) items:
simple_expr -> simple_expr LEFTSQ lexpr RIGHTSQ . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> simple_expr LEFTSQ lexpr RIGHTSQ

State 186:
## Known stack suffix:
## lexpr LEFTARROW
## LR(1) items:
array_assignment -> lexpr LEFTARROW . lexpr [ RIGHTSQ COMMA ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 187
-- On ident shift to state 143
## Reductions:

State 187:
## Known stack suffix:
## lexpr LEFTARROW lexpr
## LR(1) items:
array_assignment -> lexpr LEFTARROW lexpr . [ RIGHTSQ COMMA ]
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On RIGHTSQ COMMA
--   reduce production array_assignment -> lexpr LEFTARROW lexpr

State 188:
## Known stack suffix:
## array_assignment
## LR(1) items:
separated_nonempty_list(COMMA,array_assignment) -> array_assignment . [ RIGHTSQ ]
separated_nonempty_list(COMMA,array_assignment) -> array_assignment . COMMA separated_nonempty_list(COMMA,array_assignment) [ RIGHTSQ ]
## Transitions:
-- On COMMA shift to state 189
## Reductions:
-- On RIGHTSQ
--   reduce production separated_nonempty_list(COMMA,array_assignment) -> array_assignment

State 189:
## Known stack suffix:
## array_assignment COMMA
## LR(1) items:
separated_nonempty_list(COMMA,array_assignment) -> array_assignment COMMA . separated_nonempty_list(COMMA,array_assignment) [ RIGHTSQ ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On separated_nonempty_list(COMMA,array_assignment) shift to state 190
-- On raw_ident shift to state 34
-- On lexpr shift to state 191
-- On ident shift to state 143
-- On array_assignment shift to state 188
## Reductions:

State 190:
## Known stack suffix:
## array_assignment COMMA separated_nonempty_list(COMMA,array_assignment)
## LR(1) items:
separated_nonempty_list(COMMA,array_assignment) -> array_assignment COMMA separated_nonempty_list(COMMA,array_assignment) . [ RIGHTSQ ]
## Transitions:
## Reductions:
-- On RIGHTSQ
--   reduce production separated_nonempty_list(COMMA,array_assignment) -> array_assignment COMMA separated_nonempty_list(COMMA,array_assignment)

State 191:
## Known stack suffix:
## lexpr
## LR(1) items:
array_assignment -> lexpr . LEFTARROW lexpr [ RIGHTSQ COMMA ]
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTARROW LE HAT GT GE EQUAL AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LEFTARROW shift to state 186
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:

State 192:
## Known stack suffix:
## simple_expr DOT
## LR(1) items:
simple_expr -> simple_expr DOT . raw_ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 193
## Reductions:

State 193:
## Known stack suffix:
## simple_expr DOT raw_ident
## LR(1) items:
simple_expr -> simple_expr DOT raw_ident . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> simple_expr DOT raw_ident

State 194:
## Known stack suffix:
## simple_expr COLON
## LR(1) items:
simple_expr -> simple_expr COLON . primitive_type [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On raw_ident shift to state 34
-- On primitive_type shift to state 195
-- On ident shift to state 39
## Reductions:

State 195:
## Known stack suffix:
## simple_expr COLON primitive_type
## LR(1) items:
primitive_type -> primitive_type . ident [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN ID HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
simple_expr -> simple_expr COLON primitive_type . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 34
-- On ident shift to state 40
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> simple_expr COLON primitive_type

State 196:
## Known stack suffix:
## CHECK lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> CHECK lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> CHECK lexpr

State 197:
## Known stack suffix:
## CUT lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> CUT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> CUT lexpr

State 198:
## Known stack suffix:
## DISTINCT LEFTPAR list2_lexpr_sep_comma
## LR(1) items:
lexpr -> DISTINCT LEFTPAR list2_lexpr_sep_comma . RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On RIGHTPAR shift to state 199
## Reductions:

State 199:
## Known stack suffix:
## DISTINCT LEFTPAR list2_lexpr_sep_comma RIGHTPAR
## LR(1) items:
lexpr -> DISTINCT LEFTPAR list2_lexpr_sep_comma RIGHTPAR . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> DISTINCT LEFTPAR list2_lexpr_sep_comma RIGHTPAR

State 200:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
list2_lexpr_sep_comma -> lexpr . COMMA lexpr [ RIGHTPAR ]
list2_lexpr_sep_comma -> lexpr . COMMA list2_lexpr_sep_comma [ RIGHTPAR ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On COMMA shift to state 201
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:

State 201:
## Known stack suffix:
## lexpr COMMA
## LR(1) items:
list2_lexpr_sep_comma -> lexpr COMMA . lexpr [ RIGHTPAR ]
list2_lexpr_sep_comma -> lexpr COMMA . list2_lexpr_sep_comma [ RIGHTPAR ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On list2_lexpr_sep_comma shift to state 202
-- On lexpr shift to state 203
-- On ident shift to state 143
## Reductions:

State 202:
## Known stack suffix:
## lexpr COMMA list2_lexpr_sep_comma
## LR(1) items:
list2_lexpr_sep_comma -> lexpr COMMA list2_lexpr_sep_comma . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production list2_lexpr_sep_comma -> lexpr COMMA list2_lexpr_sep_comma

State 203:
## Known stack suffix:
## lexpr COMMA lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA AT AND ]
list2_lexpr_sep_comma -> lexpr . COMMA lexpr [ RIGHTPAR ]
list2_lexpr_sep_comma -> lexpr COMMA lexpr . [ RIGHTPAR ]
list2_lexpr_sep_comma -> lexpr . COMMA list2_lexpr_sep_comma [ RIGHTPAR ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On COMMA shift to state 201
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On RIGHTPAR
--   reduce production list2_lexpr_sep_comma -> lexpr COMMA lexpr

State 204:
## Known stack suffix:
## LEFTBR separated_nonempty_list(COMMA,lexpr)
## LR(1) items:
filters -> LEFTBR separated_nonempty_list(COMMA,lexpr) . RIGHTBR [ DOT ]
## Transitions:
-- On RIGHTBR shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## LEFTBR separated_nonempty_list(COMMA,lexpr) RIGHTBR
## LR(1) items:
filters -> LEFTBR separated_nonempty_list(COMMA,lexpr) RIGHTBR . [ DOT ]
## Transitions:
## Reductions:
-- On DOT
--   reduce production filters -> LEFTBR separated_nonempty_list(COMMA,lexpr) RIGHTBR

State 206:
## Known stack suffix:
## EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters
## LR(1) items:
lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters . DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On DOT shift to state 207
## Reductions:

State 207:
## Known stack suffix:
## EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT
## LR(1) items:
lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 208
-- On ident shift to state 143
## Reductions:

State 208:
## Known stack suffix:
## EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR REWRITING PV PRED LOGIC LEFTARROW IN GOAL FUNC EOF END ELSE COMMA CASESPLIT BAR AXIOM
--   reduce production lexpr -> EXISTS separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr

State 209:
## Known stack suffix:
## raw_named_ident
## LR(1) items:
named_ident -> raw_named_ident . [ COMMA COLON ]
## Transitions:
## Reductions:
-- On COMMA COLON
--   reduce production named_ident -> raw_named_ident

State 210:
## Known stack suffix:
## named_ident
## LR(1) items:
separated_nonempty_list(COMMA,named_ident) -> named_ident . [ COLON ]
separated_nonempty_list(COMMA,named_ident) -> named_ident . COMMA separated_nonempty_list(COMMA,named_ident) [ COLON ]
## Transitions:
-- On COMMA shift to state 211
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,named_ident) -> named_ident

State 211:
## Known stack suffix:
## named_ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,named_ident) -> named_ident COMMA . separated_nonempty_list(COMMA,named_ident) [ COLON ]
## Transitions:
-- On ID shift to state 108
-- On separated_nonempty_list(COMMA,named_ident) shift to state 212
-- On raw_named_ident shift to state 209
-- On named_ident shift to state 210
## Reductions:

State 212:
## Known stack suffix:
## named_ident COMMA separated_nonempty_list(COMMA,named_ident)
## LR(1) items:
separated_nonempty_list(COMMA,named_ident) -> named_ident COMMA separated_nonempty_list(COMMA,named_ident) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,named_ident) -> named_ident COMMA separated_nonempty_list(COMMA,named_ident)

State 213:
## Known stack suffix:
## multi_logic_binder
## LR(1) items:
separated_nonempty_list(COMMA,multi_logic_binder) -> multi_logic_binder . [ LEFTSQ LEFTBR DOT ]
separated_nonempty_list(COMMA,multi_logic_binder) -> multi_logic_binder . COMMA separated_nonempty_list(COMMA,multi_logic_binder) [ LEFTSQ LEFTBR DOT ]
## Transitions:
-- On COMMA shift to state 214
## Reductions:
-- On LEFTSQ LEFTBR DOT
--   reduce production separated_nonempty_list(COMMA,multi_logic_binder) -> multi_logic_binder

State 214:
## Known stack suffix:
## multi_logic_binder COMMA
## LR(1) items:
separated_nonempty_list(COMMA,multi_logic_binder) -> multi_logic_binder COMMA . separated_nonempty_list(COMMA,multi_logic_binder) [ LEFTSQ LEFTBR DOT ]
## Transitions:
-- On ID shift to state 108
-- On separated_nonempty_list(COMMA,named_ident) shift to state 110
-- On separated_nonempty_list(COMMA,multi_logic_binder) shift to state 215
-- On raw_named_ident shift to state 209
-- On named_ident shift to state 210
-- On multi_logic_binder shift to state 213
## Reductions:

State 215:
## Known stack suffix:
## multi_logic_binder COMMA separated_nonempty_list(COMMA,multi_logic_binder)
## LR(1) items:
separated_nonempty_list(COMMA,multi_logic_binder) -> multi_logic_binder COMMA separated_nonempty_list(COMMA,multi_logic_binder) . [ LEFTSQ LEFTBR DOT ]
## Transitions:
## Reductions:
-- On LEFTSQ LEFTBR DOT
--   reduce production separated_nonempty_list(COMMA,multi_logic_binder) -> multi_logic_binder COMMA separated_nonempty_list(COMMA,multi_logic_binder)

State 216:
## Known stack suffix:
## trigger
## LR(1) items:
separated_nonempty_list(BAR,trigger) -> trigger . [ RIGHTSQ ]
separated_nonempty_list(BAR,trigger) -> trigger . BAR separated_nonempty_list(BAR,trigger) [ RIGHTSQ ]
## Transitions:
-- On BAR shift to state 217
## Reductions:
-- On RIGHTSQ
--   reduce production separated_nonempty_list(BAR,trigger) -> trigger

State 217:
## Known stack suffix:
## trigger BAR
## LR(1) items:
separated_nonempty_list(BAR,trigger) -> trigger BAR . separated_nonempty_list(BAR,trigger) [ RIGHTSQ ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On trigger shift to state 216
-- On simple_expr shift to state 123
-- On separated_nonempty_list(COMMA,lexpr_or_dom) shift to state 218
-- On separated_nonempty_list(BAR,trigger) shift to state 219
-- On raw_ident shift to state 220
-- On lexpr_or_dom shift to state 223
-- On lexpr shift to state 226
-- On ident shift to state 143
## Reductions:

State 218:
## Known stack suffix:
## separated_nonempty_list(COMMA,lexpr_or_dom)
## LR(1) items:
trigger -> separated_nonempty_list(COMMA,lexpr_or_dom) . [ RIGHTSQ BAR ]
## Transitions:
## Reductions:
-- On RIGHTSQ BAR
--   reduce production trigger -> separated_nonempty_list(COMMA,lexpr_or_dom)

State 219:
## Known stack suffix:
## trigger BAR separated_nonempty_list(BAR,trigger)
## LR(1) items:
separated_nonempty_list(BAR,trigger) -> trigger BAR separated_nonempty_list(BAR,trigger) . [ RIGHTSQ ]
## Transitions:
## Reductions:
-- On RIGHTSQ
--   reduce production separated_nonempty_list(BAR,trigger) -> trigger BAR separated_nonempty_list(BAR,trigger)

State 220:
## Known stack suffix:
## raw_ident
## LR(1) items:
ident -> raw_ident . [ XOR TIMES SLASH SHARP RIGHTSQ RIGHTARROW QM_ID QM POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTSQ LEFTPAR LE IN HAT GT GE EQUAL DOT COMMA COLON BAR AT AND ]
lexpr_or_dom -> raw_ident . MAPS_TO lexpr [ RIGHTSQ COMMA BAR ]
## Transitions:
-- On MAPS_TO shift to state 221
## Reductions:
-- On XOR TIMES SLASH SHARP RIGHTSQ RIGHTARROW QM_ID QM POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LEFTSQ LEFTPAR LE IN HAT GT GE EQUAL DOT COMMA COLON BAR AT AND
--   reduce production ident -> raw_ident

State 221:
## Known stack suffix:
## raw_ident MAPS_TO
## LR(1) items:
lexpr_or_dom -> raw_ident MAPS_TO . lexpr [ RIGHTSQ COMMA BAR ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 222
-- On ident shift to state 143
## Reductions:

State 222:
## Known stack suffix:
## raw_ident MAPS_TO lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr_or_dom -> raw_ident MAPS_TO lexpr . [ RIGHTSQ COMMA BAR ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On RIGHTSQ COMMA BAR
--   reduce production lexpr_or_dom -> raw_ident MAPS_TO lexpr

State 223:
## Known stack suffix:
## lexpr_or_dom
## LR(1) items:
separated_nonempty_list(COMMA,lexpr_or_dom) -> lexpr_or_dom . [ RIGHTSQ BAR ]
separated_nonempty_list(COMMA,lexpr_or_dom) -> lexpr_or_dom . COMMA separated_nonempty_list(COMMA,lexpr_or_dom) [ RIGHTSQ BAR ]
## Transitions:
-- On COMMA shift to state 224
## Reductions:
-- On RIGHTSQ BAR
--   reduce production separated_nonempty_list(COMMA,lexpr_or_dom) -> lexpr_or_dom

State 224:
## Known stack suffix:
## lexpr_or_dom COMMA
## LR(1) items:
separated_nonempty_list(COMMA,lexpr_or_dom) -> lexpr_or_dom COMMA . separated_nonempty_list(COMMA,lexpr_or_dom) [ RIGHTSQ BAR ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On separated_nonempty_list(COMMA,lexpr_or_dom) shift to state 225
-- On raw_ident shift to state 220
-- On lexpr_or_dom shift to state 223
-- On lexpr shift to state 226
-- On ident shift to state 143
## Reductions:

State 225:
## Known stack suffix:
## lexpr_or_dom COMMA separated_nonempty_list(COMMA,lexpr_or_dom)
## LR(1) items:
separated_nonempty_list(COMMA,lexpr_or_dom) -> lexpr_or_dom COMMA separated_nonempty_list(COMMA,lexpr_or_dom) . [ RIGHTSQ BAR ]
## Transitions:
## Reductions:
-- On RIGHTSQ BAR
--   reduce production separated_nonempty_list(COMMA,lexpr_or_dom) -> lexpr_or_dom COMMA separated_nonempty_list(COMMA,lexpr_or_dom)

State 226:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTSQ RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA BAR AT AND ]
lexpr_or_dom -> lexpr . [ RIGHTSQ COMMA BAR ]
lexpr_or_dom -> lexpr . IN sq bound COMMA bound sq [ RIGHTSQ COMMA BAR ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On IN shift to state 227
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On RIGHTSQ COMMA BAR
--   reduce production lexpr_or_dom -> lexpr

State 227:
## Known stack suffix:
## lexpr IN
## LR(1) items:
lexpr_or_dom -> lexpr IN . sq bound COMMA bound sq [ RIGHTSQ COMMA BAR ]
## Transitions:
-- On RIGHTSQ shift to state 228
-- On LEFTSQ shift to state 229
-- On sq shift to state 230
## Reductions:

State 228:
## Known stack suffix:
## RIGHTSQ
## LR(1) items:
sq -> RIGHTSQ . [ RIGHTSQ QM_ID QM MINUS INTEGER ID HEXADECIMAL DECIMAL COMMA BAR ]
## Transitions:
## Reductions:
-- On RIGHTSQ QM_ID QM MINUS INTEGER ID HEXADECIMAL DECIMAL COMMA BAR
--   reduce production sq -> RIGHTSQ

State 229:
## Known stack suffix:
## LEFTSQ
## LR(1) items:
sq -> LEFTSQ . [ RIGHTSQ QM_ID QM MINUS INTEGER ID HEXADECIMAL DECIMAL COMMA BAR ]
## Transitions:
## Reductions:
-- On RIGHTSQ QM_ID QM MINUS INTEGER ID HEXADECIMAL DECIMAL COMMA BAR
--   reduce production sq -> LEFTSQ

State 230:
## Known stack suffix:
## lexpr IN sq
## LR(1) items:
lexpr_or_dom -> lexpr IN sq . bound COMMA bound sq [ RIGHTSQ COMMA BAR ]
## Transitions:
-- On QM_ID shift to state 231
-- On QM shift to state 232
-- On MINUS shift to state 233
-- On INTEGER shift to state 237
-- On ID shift to state 238
-- On HEXADECIMAL shift to state 239
-- On DECIMAL shift to state 240
-- On bound shift to state 241
## Reductions:

State 231:
## Known stack suffix:
## QM_ID
## LR(1) items:
bound -> QM_ID . [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
## Reductions:
-- On RIGHTSQ LEFTSQ COMMA
--   reduce production bound -> QM_ID

State 232:
## Known stack suffix:
## QM
## LR(1) items:
bound -> QM . [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
## Reductions:
-- On RIGHTSQ LEFTSQ COMMA
--   reduce production bound -> QM

State 233:
## Known stack suffix:
## MINUS
## LR(1) items:
bound -> MINUS . INTEGER [ RIGHTSQ LEFTSQ COMMA ]
bound -> MINUS . DECIMAL [ RIGHTSQ LEFTSQ COMMA ]
bound -> MINUS . HEXADECIMAL [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
-- On INTEGER shift to state 234
-- On HEXADECIMAL shift to state 235
-- On DECIMAL shift to state 236
## Reductions:

State 234:
## Known stack suffix:
## MINUS INTEGER
## LR(1) items:
bound -> MINUS INTEGER . [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
## Reductions:
-- On RIGHTSQ LEFTSQ COMMA
--   reduce production bound -> MINUS INTEGER

State 235:
## Known stack suffix:
## MINUS HEXADECIMAL
## LR(1) items:
bound -> MINUS HEXADECIMAL . [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
## Reductions:
-- On RIGHTSQ LEFTSQ COMMA
--   reduce production bound -> MINUS HEXADECIMAL

State 236:
## Known stack suffix:
## MINUS DECIMAL
## LR(1) items:
bound -> MINUS DECIMAL . [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
## Reductions:
-- On RIGHTSQ LEFTSQ COMMA
--   reduce production bound -> MINUS DECIMAL

State 237:
## Known stack suffix:
## INTEGER
## LR(1) items:
bound -> INTEGER . [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
## Reductions:
-- On RIGHTSQ LEFTSQ COMMA
--   reduce production bound -> INTEGER

State 238:
## Known stack suffix:
## ID
## LR(1) items:
bound -> ID . [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
## Reductions:
-- On RIGHTSQ LEFTSQ COMMA
--   reduce production bound -> ID

State 239:
## Known stack suffix:
## HEXADECIMAL
## LR(1) items:
bound -> HEXADECIMAL . [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
## Reductions:
-- On RIGHTSQ LEFTSQ COMMA
--   reduce production bound -> HEXADECIMAL

State 240:
## Known stack suffix:
## DECIMAL
## LR(1) items:
bound -> DECIMAL . [ RIGHTSQ LEFTSQ COMMA ]
## Transitions:
## Reductions:
-- On RIGHTSQ LEFTSQ COMMA
--   reduce production bound -> DECIMAL

State 241:
## Known stack suffix:
## lexpr IN sq bound
## LR(1) items:
lexpr_or_dom -> lexpr IN sq bound . COMMA bound sq [ RIGHTSQ COMMA BAR ]
## Transitions:
-- On COMMA shift to state 242
## Reductions:

State 242:
## Known stack suffix:
## lexpr IN sq bound COMMA
## LR(1) items:
lexpr_or_dom -> lexpr IN sq bound COMMA . bound sq [ RIGHTSQ COMMA BAR ]
## Transitions:
-- On QM_ID shift to state 231
-- On QM shift to state 232
-- On MINUS shift to state 233
-- On INTEGER shift to state 237
-- On ID shift to state 238
-- On HEXADECIMAL shift to state 239
-- On DECIMAL shift to state 240
-- On bound shift to state 243
## Reductions:

State 243:
## Known stack suffix:
## lexpr IN sq bound COMMA bound
## LR(1) items:
lexpr_or_dom -> lexpr IN sq bound COMMA bound . sq [ RIGHTSQ COMMA BAR ]
## Transitions:
-- On RIGHTSQ shift to state 228
-- On LEFTSQ shift to state 229
-- On sq shift to state 244
## Reductions:

State 244:
## Known stack suffix:
## lexpr IN sq bound COMMA bound sq
## LR(1) items:
lexpr_or_dom -> lexpr IN sq bound COMMA bound sq . [ RIGHTSQ COMMA BAR ]
## Transitions:
## Reductions:
-- On RIGHTSQ COMMA BAR
--   reduce production lexpr_or_dom -> lexpr IN sq bound COMMA bound sq

State 245:
## Known stack suffix:
## LEFTSQ separated_nonempty_list(BAR,trigger)
## LR(1) items:
triggers -> LEFTSQ separated_nonempty_list(BAR,trigger) . RIGHTSQ [ LEFTBR DOT ]
## Transitions:
-- On RIGHTSQ shift to state 246
## Reductions:

State 246:
## Known stack suffix:
## LEFTSQ separated_nonempty_list(BAR,trigger) RIGHTSQ
## LR(1) items:
triggers -> LEFTSQ separated_nonempty_list(BAR,trigger) RIGHTSQ . [ LEFTBR DOT ]
## Transitions:
## Reductions:
-- On LEFTBR DOT
--   reduce production triggers -> LEFTSQ separated_nonempty_list(BAR,trigger) RIGHTSQ

State 247:
## Known stack suffix:
## FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers
## LR(1) items:
lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers . filters DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On LEFTBR shift to state 118
-- On filters shift to state 248
## Reductions:
-- On DOT
--   reduce production filters ->

State 248:
## Known stack suffix:
## FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters
## LR(1) items:
lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters . DOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On DOT shift to state 249
## Reductions:

State 249:
## Known stack suffix:
## FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT
## LR(1) items:
lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 250
-- On ident shift to state 143
## Reductions:

State 250:
## Known stack suffix:
## FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR REWRITING PV PRED LOGIC LEFTARROW IN GOAL FUNC EOF END ELSE COMMA CASESPLIT BAR AXIOM
--   reduce production lexpr -> FORALL separated_nonempty_list(COMMA,multi_logic_binder) triggers filters DOT lexpr

State 251:
## Known stack suffix:
## IF lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES THEN SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> IF lexpr . THEN lexpr ELSE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On THEN shift to state 252
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:

State 252:
## Known stack suffix:
## IF lexpr THEN
## LR(1) items:
lexpr -> IF lexpr THEN . lexpr ELSE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 253
-- On ident shift to state 143
## Reductions:

State 253:
## Known stack suffix:
## IF lexpr THEN lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL ELSE AT AND ]
lexpr -> IF lexpr THEN lexpr . ELSE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On ELSE shift to state 254
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:

State 254:
## Known stack suffix:
## IF lexpr THEN lexpr ELSE
## LR(1) items:
lexpr -> IF lexpr THEN lexpr ELSE . lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 255
-- On ident shift to state 143
## Reductions:

State 255:
## Known stack suffix:
## IF lexpr THEN lexpr ELSE lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> IF lexpr THEN lexpr ELSE lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
## Reductions:
-- On XOR WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED OR LRARROW LOGIC LEFTARROW IN GOAL FUNC EOF END ELSE COMMA CASESPLIT BAR AXIOM AND
--   reduce production lexpr -> IF lexpr THEN lexpr ELSE lexpr

State 256:
## Known stack suffix:
## ident EQUAL lexpr
## LR(1) items:
label_expr -> ident EQUAL lexpr . [ RIGHTBR PV ]
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTBR RIGHTARROW PV POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On RIGHTBR PV
--   reduce production label_expr -> ident EQUAL lexpr

State 257:
## Known stack suffix:
## LEFTBR separated_nonempty_list(PV,label_expr)
## LR(1) items:
simple_expr -> LEFTBR separated_nonempty_list(PV,label_expr) . RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On RIGHTBR shift to state 258
## Reductions:

State 258:
## Known stack suffix:
## LEFTBR separated_nonempty_list(PV,label_expr) RIGHTBR
## LR(1) items:
simple_expr -> LEFTBR separated_nonempty_list(PV,label_expr) RIGHTBR . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> LEFTBR separated_nonempty_list(PV,label_expr) RIGHTBR

State 259:
## Known stack suffix:
## ident
## LR(1) items:
label_expr -> ident . EQUAL lexpr [ RIGHTBR PV ]
simple_expr -> ident . [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
simple_expr -> ident . LEFTPAR loption(separated_nonempty_list(COMMA,lexpr)) RIGHTPAR [ WITH SHARP QM_ID QM LEFTSQ DOT COLON ]
## Transitions:
-- On LEFTPAR shift to state 144
-- On EQUAL shift to state 105
## Reductions:
-- On WITH SHARP QM_ID QM LEFTSQ DOT COLON
--   reduce production simple_expr -> ident

State 260:
## Known stack suffix:
## LEFTPAR lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTPAR RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
simple_expr -> LEFTPAR lexpr . RIGHTPAR [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTPAR shift to state 261
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:

State 261:
## Known stack suffix:
## LEFTPAR lexpr RIGHTPAR
## LR(1) items:
simple_expr -> LEFTPAR lexpr RIGHTPAR . [ XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH SHARP RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING QM_ID QM PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTSQ LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE DOT COMMA COLON CASESPLIT BAR AXIOM AT AND
--   reduce production simple_expr -> LEFTPAR lexpr RIGHTPAR

State 262:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_binder) IN lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> LET separated_nonempty_list(COMMA,let_binder) IN lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On WITH TYPE THEORY THEN RIGHTSQ RIGHTPAR RIGHTBR REWRITING PV PRED LOGIC LEFTARROW IN GOAL FUNC EOF END ELSE COMMA CASESPLIT BAR AXIOM
--   reduce production lexpr -> LET separated_nonempty_list(COMMA,let_binder) IN lexpr

State 263:
## Known stack suffix:
## let_binder
## LR(1) items:
separated_nonempty_list(COMMA,let_binder) -> let_binder . [ IN ]
separated_nonempty_list(COMMA,let_binder) -> let_binder . COMMA separated_nonempty_list(COMMA,let_binder) [ IN ]
## Transitions:
-- On COMMA shift to state 264
## Reductions:
-- On IN
--   reduce production separated_nonempty_list(COMMA,let_binder) -> let_binder

State 264:
## Known stack suffix:
## let_binder COMMA
## LR(1) items:
separated_nonempty_list(COMMA,let_binder) -> let_binder COMMA . separated_nonempty_list(COMMA,let_binder) [ IN ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(COMMA,let_binder) shift to state 265
-- On raw_ident shift to state 34
-- On let_binder shift to state 263
-- On ident shift to state 266
## Reductions:

State 265:
## Known stack suffix:
## let_binder COMMA separated_nonempty_list(COMMA,let_binder)
## LR(1) items:
separated_nonempty_list(COMMA,let_binder) -> let_binder COMMA separated_nonempty_list(COMMA,let_binder) . [ IN ]
## Transitions:
## Reductions:
-- On IN
--   reduce production separated_nonempty_list(COMMA,let_binder) -> let_binder COMMA separated_nonempty_list(COMMA,let_binder)

State 266:
## Known stack suffix:
## ident
## LR(1) items:
let_binder -> ident . EQUAL lexpr [ IN COMMA ]
## Transitions:
-- On EQUAL shift to state 267
## Reductions:

State 267:
## Known stack suffix:
## ident EQUAL
## LR(1) items:
let_binder -> ident EQUAL . lexpr [ IN COMMA ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 268
-- On ident shift to state 143
## Reductions:

State 268:
## Known stack suffix:
## ident EQUAL lexpr
## LR(1) items:
let_binder -> ident EQUAL lexpr . [ IN COMMA ]
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE IN HAT GT GE EQUAL COMMA AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On IN COMMA
--   reduce production let_binder -> ident EQUAL lexpr

State 269:
## Known stack suffix:
## MATCH lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL AT AND ]
lexpr -> MATCH lexpr . WITH match_cases END [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On WITH shift to state 270
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:

State 270:
## Known stack suffix:
## MATCH lexpr WITH
## LR(1) items:
lexpr -> MATCH lexpr WITH . match_cases END [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
-- On ID shift to state 11
-- On BAR shift to state 271
-- On simple_pattern shift to state 272
-- On raw_ident shift to state 34
-- On match_cases shift to state 283
-- On match_case shift to state 287
-- On ident shift to state 276
## Reductions:

State 271:
## Known stack suffix:
## BAR
## LR(1) items:
match_cases -> BAR . match_case [ END BAR ]
## Transitions:
-- On ID shift to state 11
-- On simple_pattern shift to state 272
-- On raw_ident shift to state 34
-- On match_case shift to state 275
-- On ident shift to state 276
## Reductions:

State 272:
## Known stack suffix:
## simple_pattern
## LR(1) items:
match_case -> simple_pattern . RIGHTARROW lexpr [ END BAR ]
## Transitions:
-- On RIGHTARROW shift to state 273
## Reductions:

State 273:
## Known stack suffix:
## simple_pattern RIGHTARROW
## LR(1) items:
match_case -> simple_pattern RIGHTARROW . lexpr [ END BAR ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 274
-- On ident shift to state 143
## Reductions:

State 274:
## Known stack suffix:
## simple_pattern RIGHTARROW lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END BAR AT AND ]
match_case -> simple_pattern RIGHTARROW lexpr . [ END BAR ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On END BAR
--   reduce production match_case -> simple_pattern RIGHTARROW lexpr

State 275:
## Known stack suffix:
## BAR match_case
## LR(1) items:
match_cases -> BAR match_case . [ END BAR ]
## Transitions:
## Reductions:
-- On END BAR
--   reduce production match_cases -> BAR match_case

State 276:
## Known stack suffix:
## ident
## LR(1) items:
simple_pattern -> ident . [ RIGHTARROW ]
simple_pattern -> ident . LEFTPAR separated_nonempty_list(COMMA,ident) RIGHTPAR [ RIGHTARROW ]
## Transitions:
-- On LEFTPAR shift to state 277
## Reductions:
-- On RIGHTARROW
--   reduce production simple_pattern -> ident

State 277:
## Known stack suffix:
## ident LEFTPAR
## LR(1) items:
simple_pattern -> ident LEFTPAR . separated_nonempty_list(COMMA,ident) RIGHTPAR [ RIGHTARROW ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(COMMA,ident) shift to state 278
-- On raw_ident shift to state 34
-- On ident shift to state 280
## Reductions:

State 278:
## Known stack suffix:
## ident LEFTPAR separated_nonempty_list(COMMA,ident)
## LR(1) items:
simple_pattern -> ident LEFTPAR separated_nonempty_list(COMMA,ident) . RIGHTPAR [ RIGHTARROW ]
## Transitions:
-- On RIGHTPAR shift to state 279
## Reductions:

State 279:
## Known stack suffix:
## ident LEFTPAR separated_nonempty_list(COMMA,ident) RIGHTPAR
## LR(1) items:
simple_pattern -> ident LEFTPAR separated_nonempty_list(COMMA,ident) RIGHTPAR . [ RIGHTARROW ]
## Transitions:
## Reductions:
-- On RIGHTARROW
--   reduce production simple_pattern -> ident LEFTPAR separated_nonempty_list(COMMA,ident) RIGHTPAR

State 280:
## Known stack suffix:
## ident
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident . [ RIGHTPAR ]
separated_nonempty_list(COMMA,ident) -> ident . COMMA separated_nonempty_list(COMMA,ident) [ RIGHTPAR ]
## Transitions:
-- On COMMA shift to state 281
## Reductions:
-- On RIGHTPAR
--   reduce production separated_nonempty_list(COMMA,ident) -> ident

State 281:
## Known stack suffix:
## ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA . separated_nonempty_list(COMMA,ident) [ RIGHTPAR ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(COMMA,ident) shift to state 282
-- On raw_ident shift to state 34
-- On ident shift to state 280
## Reductions:

State 282:
## Known stack suffix:
## ident COMMA separated_nonempty_list(COMMA,ident)
## LR(1) items:
separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident) . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production separated_nonempty_list(COMMA,ident) -> ident COMMA separated_nonempty_list(COMMA,ident)

State 283:
## Known stack suffix:
## MATCH lexpr WITH match_cases
## LR(1) items:
lexpr -> MATCH lexpr WITH match_cases . END [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
match_cases -> match_cases . BAR match_case [ END BAR ]
## Transitions:
-- On END shift to state 284
-- On BAR shift to state 285
## Reductions:

State 284:
## Known stack suffix:
## MATCH lexpr WITH match_cases END
## LR(1) items:
lexpr -> MATCH lexpr WITH match_cases END . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> MATCH lexpr WITH match_cases END

State 285:
## Known stack suffix:
## match_cases BAR
## LR(1) items:
match_cases -> match_cases BAR . match_case [ END BAR ]
## Transitions:
-- On ID shift to state 11
-- On simple_pattern shift to state 272
-- On raw_ident shift to state 34
-- On match_case shift to state 286
-- On ident shift to state 276
## Reductions:

State 286:
## Known stack suffix:
## match_cases BAR match_case
## LR(1) items:
match_cases -> match_cases BAR match_case . [ END BAR ]
## Transitions:
## Reductions:
-- On END BAR
--   reduce production match_cases -> match_cases BAR match_case

State 287:
## Known stack suffix:
## match_case
## LR(1) items:
match_cases -> match_case . [ END BAR ]
## Transitions:
## Reductions:
-- On END BAR
--   reduce production match_cases -> match_case

State 288:
## Known stack suffix:
## MINUS lexpr
## LR(1) items:
lexpr -> MINUS lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> MINUS lexpr

State 289:
## Known stack suffix:
## NOT lexpr
## LR(1) items:
lexpr -> NOT lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> NOT lexpr

State 290:
## Known stack suffix:
## STRING COLON lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
lexpr -> STRING COLON lexpr . [ XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND ]
## Transitions:
## Reductions:
-- On XOR WITH TYPE TIMES THEORY THEN SLASH RIGHTSQ RIGHTPAR RIGHTBR RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LEFTARROW LE IN HAT GT GOAL GE FUNC EQUAL EOF END ELSE COMMA CASESPLIT BAR AXIOM AT AND
--   reduce production lexpr -> STRING COLON lexpr

State 291:
## Known stack suffix:
## CASESPLIT decl_ident COLON lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
theory_elt -> CASESPLIT decl_ident COLON lexpr . [ END CASESPLIT AXIOM ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On END CASESPLIT AXIOM
--   reduce production theory_elt -> CASESPLIT decl_ident COLON lexpr

State 292:
## Known stack suffix:
## AXIOM
## LR(1) items:
theory_elt -> AXIOM . decl_ident COLON lexpr [ END CASESPLIT AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 68
-- On decl_ident shift to state 293
## Reductions:

State 293:
## Known stack suffix:
## AXIOM decl_ident
## LR(1) items:
theory_elt -> AXIOM decl_ident . COLON lexpr [ END CASESPLIT AXIOM ]
## Transitions:
-- On COLON shift to state 294
## Reductions:

State 294:
## Known stack suffix:
## AXIOM decl_ident COLON
## LR(1) items:
theory_elt -> AXIOM decl_ident COLON . lexpr [ END CASESPLIT AXIOM ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 295
-- On ident shift to state 143
## Reductions:

State 295:
## Known stack suffix:
## AXIOM decl_ident COLON lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TIMES SLASH RIGHTARROW POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LE HAT GT GE EQUAL END CASESPLIT AXIOM AT AND ]
theory_elt -> AXIOM decl_ident COLON lexpr . [ END CASESPLIT AXIOM ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On END CASESPLIT AXIOM
--   reduce production theory_elt -> AXIOM decl_ident COLON lexpr

State 296:
## Known stack suffix:
## theory_elt
## LR(1) items:
list(theory_elt) -> theory_elt . list(theory_elt) [ END ]
## Transitions:
-- On CASESPLIT shift to state 73
-- On AXIOM shift to state 292
-- On theory_elt shift to state 296
-- On list(theory_elt) shift to state 297
## Reductions:
-- On END
--   reduce production list(theory_elt) ->

State 297:
## Known stack suffix:
## theory_elt list(theory_elt)
## LR(1) items:
list(theory_elt) -> theory_elt list(theory_elt) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(theory_elt) -> theory_elt list(theory_elt)

State 298:
## Known stack suffix:
## THEORY decl_ident EXTENDS decl_ident EQUAL list(theory_elt)
## LR(1) items:
decl -> THEORY decl_ident EXTENDS decl_ident EQUAL list(theory_elt) . END [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On END shift to state 299
## Reductions:

State 299:
## Known stack suffix:
## THEORY decl_ident EXTENDS decl_ident EQUAL list(theory_elt) END
## LR(1) items:
decl -> THEORY decl_ident EXTENDS decl_ident EQUAL list(theory_elt) END . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> THEORY decl_ident EXTENDS decl_ident EQUAL list(theory_elt) END

State 300:
## Known stack suffix:
## REWRITING
## LR(1) items:
decl -> REWRITING . decl_ident COLON rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 68
-- On decl_ident shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## REWRITING decl_ident
## LR(1) items:
decl -> REWRITING decl_ident . COLON rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On COLON shift to state 302
## Reductions:

State 302:
## Known stack suffix:
## REWRITING decl_ident COLON
## LR(1) items:
decl -> REWRITING decl_ident COLON . rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On rewriting_list shift to state 303
-- On raw_ident shift to state 34
-- On lexpr shift to state 304
-- On ident shift to state 143
## Reductions:

State 303:
## Known stack suffix:
## REWRITING decl_ident COLON rewriting_list
## LR(1) items:
decl -> REWRITING decl_ident COLON rewriting_list . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> REWRITING decl_ident COLON rewriting_list

State 304:
## Known stack suffix:
## lexpr
## LR(1) items:
lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PV PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
rewriting_list -> lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
rewriting_list -> lexpr . PV [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
rewriting_list -> lexpr . PV rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On PV shift to state 305
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production rewriting_list -> lexpr

State 305:
## Known stack suffix:
## lexpr PV
## LR(1) items:
rewriting_list -> lexpr PV . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
rewriting_list -> lexpr PV . rewriting_list [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On rewriting_list shift to state 306
-- On raw_ident shift to state 34
-- On lexpr shift to state 304
-- On ident shift to state 143
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production rewriting_list -> lexpr PV

State 306:
## Known stack suffix:
## lexpr PV rewriting_list
## LR(1) items:
rewriting_list -> lexpr PV rewriting_list . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production rewriting_list -> lexpr PV rewriting_list

State 307:
## Known stack suffix:
## PRED
## LR(1) items:
decl -> PRED . raw_named_ident EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
decl -> PRED . raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 108
-- On raw_named_ident shift to state 308
## Reductions:

State 308:
## Known stack suffix:
## PRED raw_named_ident
## LR(1) items:
decl -> PRED raw_named_ident . EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
decl -> PRED raw_named_ident . LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On LEFTPAR shift to state 309
-- On EQUAL shift to state 321
## Reductions:

State 309:
## Known stack suffix:
## PRED raw_named_ident LEFTPAR
## LR(1) items:
decl -> PRED raw_named_ident LEFTPAR . loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(COMMA,logic_binder) shift to state 310
-- On raw_ident shift to state 34
-- On loption(separated_nonempty_list(COMMA,logic_binder)) shift to state 311
-- On logic_binder shift to state 315
-- On ident shift to state 318
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,logic_binder)) ->

State 310:
## Known stack suffix:
## separated_nonempty_list(COMMA,logic_binder)
## LR(1) items:
loption(separated_nonempty_list(COMMA,logic_binder)) -> separated_nonempty_list(COMMA,logic_binder) . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,logic_binder)) -> separated_nonempty_list(COMMA,logic_binder)

State 311:
## Known stack suffix:
## PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder))
## LR(1) items:
decl -> PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) . RIGHTPAR EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On RIGHTPAR shift to state 312
## Reductions:

State 312:
## Known stack suffix:
## PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR
## LR(1) items:
decl -> PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR . EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On EQUAL shift to state 313
## Reductions:

State 313:
## Known stack suffix:
## PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL
## LR(1) items:
decl -> PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 314
-- On ident shift to state 143
## Reductions:

State 314:
## Known stack suffix:
## PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr
## LR(1) items:
decl -> PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> PRED raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR EQUAL lexpr

State 315:
## Known stack suffix:
## logic_binder
## LR(1) items:
separated_nonempty_list(COMMA,logic_binder) -> logic_binder . [ RIGHTPAR ]
separated_nonempty_list(COMMA,logic_binder) -> logic_binder . COMMA separated_nonempty_list(COMMA,logic_binder) [ RIGHTPAR ]
## Transitions:
-- On COMMA shift to state 316
## Reductions:
-- On RIGHTPAR
--   reduce production separated_nonempty_list(COMMA,logic_binder) -> logic_binder

State 316:
## Known stack suffix:
## logic_binder COMMA
## LR(1) items:
separated_nonempty_list(COMMA,logic_binder) -> logic_binder COMMA . separated_nonempty_list(COMMA,logic_binder) [ RIGHTPAR ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(COMMA,logic_binder) shift to state 317
-- On raw_ident shift to state 34
-- On logic_binder shift to state 315
-- On ident shift to state 318
## Reductions:

State 317:
## Known stack suffix:
## logic_binder COMMA separated_nonempty_list(COMMA,logic_binder)
## LR(1) items:
separated_nonempty_list(COMMA,logic_binder) -> logic_binder COMMA separated_nonempty_list(COMMA,logic_binder) . [ RIGHTPAR ]
## Transitions:
## Reductions:
-- On RIGHTPAR
--   reduce production separated_nonempty_list(COMMA,logic_binder) -> logic_binder COMMA separated_nonempty_list(COMMA,logic_binder)

State 318:
## Known stack suffix:
## ident
## LR(1) items:
logic_binder -> ident . COLON primitive_type [ RIGHTPAR COMMA ]
## Transitions:
-- On COLON shift to state 319
## Reductions:

State 319:
## Known stack suffix:
## ident COLON
## LR(1) items:
logic_binder -> ident COLON . primitive_type [ RIGHTPAR COMMA ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On raw_ident shift to state 34
-- On primitive_type shift to state 320
-- On ident shift to state 39
## Reductions:

State 320:
## Known stack suffix:
## ident COLON primitive_type
## LR(1) items:
logic_binder -> ident COLON primitive_type . [ RIGHTPAR COMMA ]
primitive_type -> primitive_type . ident [ RIGHTPAR ID COMMA ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 34
-- On ident shift to state 40
## Reductions:
-- On RIGHTPAR COMMA
--   reduce production logic_binder -> ident COLON primitive_type

State 321:
## Known stack suffix:
## PRED raw_named_ident EQUAL
## LR(1) items:
decl -> PRED raw_named_ident EQUAL . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 322
-- On ident shift to state 143
## Reductions:

State 322:
## Known stack suffix:
## PRED raw_named_ident EQUAL lexpr
## LR(1) items:
decl -> PRED raw_named_ident EQUAL lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> PRED raw_named_ident EQUAL lexpr

State 323:
## Known stack suffix:
## LOGIC
## LR(1) items:
decl -> LOGIC . ac_modifier separated_nonempty_list(COMMA,raw_named_ident) COLON logic_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On AC shift to state 324
-- On ac_modifier shift to state 325
## Reductions:
-- On ID
--   reduce production ac_modifier ->

State 324:
## Known stack suffix:
## AC
## LR(1) items:
ac_modifier -> AC . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production ac_modifier -> AC

State 325:
## Known stack suffix:
## LOGIC ac_modifier
## LR(1) items:
decl -> LOGIC ac_modifier . separated_nonempty_list(COMMA,raw_named_ident) COLON logic_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 108
-- On separated_nonempty_list(COMMA,raw_named_ident) shift to state 326
-- On raw_named_ident shift to state 337
## Reductions:

State 326:
## Known stack suffix:
## LOGIC ac_modifier separated_nonempty_list(COMMA,raw_named_ident)
## LR(1) items:
decl -> LOGIC ac_modifier separated_nonempty_list(COMMA,raw_named_ident) . COLON logic_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On COLON shift to state 327
## Reductions:

State 327:
## Known stack suffix:
## LOGIC ac_modifier separated_nonempty_list(COMMA,raw_named_ident) COLON
## LR(1) items:
decl -> LOGIC ac_modifier separated_nonempty_list(COMMA,raw_named_ident) COLON . logic_type [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On PROP shift to state 328
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On separated_nonempty_list(COMMA,primitive_type) shift to state 329
-- On raw_ident shift to state 34
-- On primitive_type_or_prop shift to state 330
-- On primitive_type shift to state 331
-- On loption(separated_nonempty_list(COMMA,primitive_type)) shift to state 332
-- On logic_type shift to state 336
-- On ident shift to state 39
## Reductions:
-- On RIGHTARROW
--   reduce production loption(separated_nonempty_list(COMMA,primitive_type)) ->

State 328:
## Known stack suffix:
## PROP
## LR(1) items:
primitive_type_or_prop -> PROP . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production primitive_type_or_prop -> PROP

State 329:
## Known stack suffix:
## separated_nonempty_list(COMMA,primitive_type)
## LR(1) items:
loption(separated_nonempty_list(COMMA,primitive_type)) -> separated_nonempty_list(COMMA,primitive_type) . [ RIGHTARROW ]
## Transitions:
## Reductions:
-- On RIGHTARROW
--   reduce production loption(separated_nonempty_list(COMMA,primitive_type)) -> separated_nonempty_list(COMMA,primitive_type)

State 330:
## Known stack suffix:
## primitive_type_or_prop
## LR(1) items:
logic_type -> primitive_type_or_prop . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production logic_type -> primitive_type_or_prop

State 331:
## Known stack suffix:
## primitive_type
## LR(1) items:
primitive_type -> primitive_type . ident [ TYPE THEORY RIGHTARROW REWRITING PRED LOGIC ID GOAL FUNC EOF COMMA AXIOM ]
primitive_type_or_prop -> primitive_type . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
separated_nonempty_list(COMMA,primitive_type) -> primitive_type . [ RIGHTARROW ]
separated_nonempty_list(COMMA,primitive_type) -> primitive_type . COMMA separated_nonempty_list(COMMA,primitive_type) [ RIGHTARROW ]
## Transitions:
-- On ID shift to state 11
-- On COMMA shift to state 37
-- On raw_ident shift to state 34
-- On ident shift to state 40
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production primitive_type_or_prop -> primitive_type
-- On RIGHTARROW
--   reduce production separated_nonempty_list(COMMA,primitive_type) -> primitive_type

State 332:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,primitive_type))
## LR(1) items:
logic_type -> loption(separated_nonempty_list(COMMA,primitive_type)) . RIGHTARROW primitive_type_or_prop [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On RIGHTARROW shift to state 333
## Reductions:

State 333:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,primitive_type)) RIGHTARROW
## LR(1) items:
logic_type -> loption(separated_nonempty_list(COMMA,primitive_type)) RIGHTARROW . primitive_type_or_prop [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On PROP shift to state 328
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On raw_ident shift to state 34
-- On primitive_type_or_prop shift to state 334
-- On primitive_type shift to state 335
-- On ident shift to state 39
## Reductions:

State 334:
## Known stack suffix:
## loption(separated_nonempty_list(COMMA,primitive_type)) RIGHTARROW primitive_type_or_prop
## LR(1) items:
logic_type -> loption(separated_nonempty_list(COMMA,primitive_type)) RIGHTARROW primitive_type_or_prop . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production logic_type -> loption(separated_nonempty_list(COMMA,primitive_type)) RIGHTARROW primitive_type_or_prop

State 335:
## Known stack suffix:
## primitive_type
## LR(1) items:
primitive_type -> primitive_type . ident [ TYPE THEORY REWRITING PRED LOGIC ID GOAL FUNC EOF AXIOM ]
primitive_type_or_prop -> primitive_type . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 34
-- On ident shift to state 40
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production primitive_type_or_prop -> primitive_type

State 336:
## Known stack suffix:
## LOGIC ac_modifier separated_nonempty_list(COMMA,raw_named_ident) COLON logic_type
## LR(1) items:
decl -> LOGIC ac_modifier separated_nonempty_list(COMMA,raw_named_ident) COLON logic_type . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> LOGIC ac_modifier separated_nonempty_list(COMMA,raw_named_ident) COLON logic_type

State 337:
## Known stack suffix:
## raw_named_ident
## LR(1) items:
separated_nonempty_list(COMMA,raw_named_ident) -> raw_named_ident . [ COLON ]
separated_nonempty_list(COMMA,raw_named_ident) -> raw_named_ident . COMMA separated_nonempty_list(COMMA,raw_named_ident) [ COLON ]
## Transitions:
-- On COMMA shift to state 338
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,raw_named_ident) -> raw_named_ident

State 338:
## Known stack suffix:
## raw_named_ident COMMA
## LR(1) items:
separated_nonempty_list(COMMA,raw_named_ident) -> raw_named_ident COMMA . separated_nonempty_list(COMMA,raw_named_ident) [ COLON ]
## Transitions:
-- On ID shift to state 108
-- On separated_nonempty_list(COMMA,raw_named_ident) shift to state 339
-- On raw_named_ident shift to state 337
## Reductions:

State 339:
## Known stack suffix:
## raw_named_ident COMMA separated_nonempty_list(COMMA,raw_named_ident)
## LR(1) items:
separated_nonempty_list(COMMA,raw_named_ident) -> raw_named_ident COMMA separated_nonempty_list(COMMA,raw_named_ident) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,raw_named_ident) -> raw_named_ident COMMA separated_nonempty_list(COMMA,raw_named_ident)

State 340:
## Known stack suffix:
## GOAL
## LR(1) items:
decl -> GOAL . decl_ident COLON lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 68
-- On decl_ident shift to state 341
## Reductions:

State 341:
## Known stack suffix:
## GOAL decl_ident
## LR(1) items:
decl -> GOAL decl_ident . COLON lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On COLON shift to state 342
## Reductions:

State 342:
## Known stack suffix:
## GOAL decl_ident COLON
## LR(1) items:
decl -> GOAL decl_ident COLON . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 343
-- On ident shift to state 143
## Reductions:

State 343:
## Known stack suffix:
## GOAL decl_ident COLON lexpr
## LR(1) items:
decl -> GOAL decl_ident COLON lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> GOAL decl_ident COLON lexpr

State 344:
## Known stack suffix:
## FUNC
## LR(1) items:
decl -> FUNC . raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 108
-- On raw_named_ident shift to state 345
## Reductions:

State 345:
## Known stack suffix:
## FUNC raw_named_ident
## LR(1) items:
decl -> FUNC raw_named_ident . LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On LEFTPAR shift to state 346
## Reductions:

State 346:
## Known stack suffix:
## FUNC raw_named_ident LEFTPAR
## LR(1) items:
decl -> FUNC raw_named_ident LEFTPAR . loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On separated_nonempty_list(COMMA,logic_binder) shift to state 310
-- On raw_ident shift to state 34
-- On loption(separated_nonempty_list(COMMA,logic_binder)) shift to state 347
-- On logic_binder shift to state 315
-- On ident shift to state 318
## Reductions:
-- On RIGHTPAR
--   reduce production loption(separated_nonempty_list(COMMA,logic_binder)) ->

State 347:
## Known stack suffix:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder))
## LR(1) items:
decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) . RIGHTPAR COLON primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On RIGHTPAR shift to state 348
## Reductions:

State 348:
## Known stack suffix:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR
## LR(1) items:
decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR . COLON primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On COLON shift to state 349
## Reductions:

State 349:
## Known stack suffix:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON
## LR(1) items:
decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON . primitive_type EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On UNIT shift to state 22
-- On REAL shift to state 23
-- On QUOTE shift to state 2
-- On LEFTPAR shift to state 24
-- On INT shift to state 25
-- On ID shift to state 11
-- On BOOL shift to state 26
-- On BITV shift to state 27
-- On type_var shift to state 31
-- On raw_ident shift to state 34
-- On primitive_type shift to state 350
-- On ident shift to state 39
## Reductions:

State 350:
## Known stack suffix:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type
## LR(1) items:
decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type . EQUAL lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
primitive_type -> primitive_type . ident [ ID EQUAL ]
## Transitions:
-- On ID shift to state 11
-- On EQUAL shift to state 351
-- On raw_ident shift to state 34
-- On ident shift to state 40
## Reductions:

State 351:
## Known stack suffix:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL
## LR(1) items:
decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 352
-- On ident shift to state 143
## Reductions:

State 352:
## Known stack suffix:
## FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr
## LR(1) items:
decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> FUNC raw_named_ident LEFTPAR loption(separated_nonempty_list(COMMA,logic_binder)) RIGHTPAR COLON primitive_type EQUAL lexpr

State 353:
## Known stack suffix:
## AXIOM
## LR(1) items:
decl -> AXIOM . decl_ident COLON lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On ID shift to state 11
-- On raw_ident shift to state 68
-- On decl_ident shift to state 354
## Reductions:

State 354:
## Known stack suffix:
## AXIOM decl_ident
## LR(1) items:
decl -> AXIOM decl_ident . COLON lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On COLON shift to state 355
## Reductions:

State 355:
## Known stack suffix:
## AXIOM decl_ident COLON
## LR(1) items:
decl -> AXIOM decl_ident COLON . lexpr [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
## Transitions:
-- On VOID shift to state 76
-- On TRUE shift to state 77
-- On STRING shift to state 78
-- On NOT shift to state 80
-- On MINUS shift to state 81
-- On MATCH shift to state 82
-- On LET shift to state 83
-- On LEFTSQ shift to state 86
-- On LEFTPAR shift to state 91
-- On LEFTBR shift to state 92
-- On INTEGER shift to state 93
-- On IF shift to state 106
-- On ID shift to state 11
-- On HEXADECIMAL shift to state 94
-- On FORALL shift to state 107
-- On FALSE shift to state 95
-- On EXISTS shift to state 115
-- On DISTINCT shift to state 119
-- On DECIMAL shift to state 96
-- On CUT shift to state 121
-- On CHECK shift to state 122
-- On simple_expr shift to state 123
-- On raw_ident shift to state 34
-- On lexpr shift to state 356
-- On ident shift to state 143
## Reductions:

State 356:
## Known stack suffix:
## AXIOM decl_ident COLON lexpr
## LR(1) items:
decl -> AXIOM decl_ident COLON lexpr . [ TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM ]
lexpr -> lexpr . PLUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . MINUS lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . TIMES lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . SLASH lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . PERCENT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . POWDOT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AND lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . OR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . XOR lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LRARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . RIGHTARROW lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . LE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . GE lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . EQUAL lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . NOTEQ lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . HAT LEFTBR INTEGER COMMA INTEGER RIGHTBR [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
lexpr -> lexpr . AT lexpr [ XOR TYPE TIMES THEORY SLASH RIGHTARROW REWRITING PRED POWDOT POW PLUS PERCENT OR NOTEQ MINUS LT LRARROW LOGIC LE HAT GT GOAL GE FUNC EQUAL EOF AXIOM AT AND ]
## Transitions:
-- On XOR shift to state 133
-- On TIMES shift to state 135
-- On SLASH shift to state 149
-- On RIGHTARROW shift to state 151
-- On POWDOT shift to state 153
-- On POW shift to state 155
-- On PLUS shift to state 157
-- On PERCENT shift to state 159
-- On OR shift to state 163
-- On NOTEQ shift to state 165
-- On MINUS shift to state 167
-- On LT shift to state 169
-- On LRARROW shift to state 181
-- On LE shift to state 171
-- On HAT shift to state 137
-- On GT shift to state 173
-- On GE shift to state 175
-- On EQUAL shift to state 177
-- On AT shift to state 161
-- On AND shift to state 179
## Reductions:
-- On TYPE THEORY REWRITING PRED LOGIC GOAL FUNC EOF AXIOM
--   reduce production decl -> AXIOM decl_ident COLON lexpr

State 357:
## Known stack suffix:
## list(decl)
## LR(1) items:
file -> list(decl) . EOF [ # ]
## Transitions:
-- On EOF shift to state 358
## Reductions:

State 358:
## Known stack suffix:
## list(decl) EOF
## LR(1) items:
file -> list(decl) EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> list(decl) EOF

State 359:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

State 360:
## Known stack suffix:
## decl
## LR(1) items:
list(decl) -> decl . list(decl) [ EOF ]
## Transitions:
-- On TYPE shift to state 1
-- On THEORY shift to state 67
-- On REWRITING shift to state 300
-- On PRED shift to state 307
-- On LOGIC shift to state 323
-- On GOAL shift to state 340
-- On FUNC shift to state 344
-- On AXIOM shift to state 353
-- On list(decl) shift to state 361
-- On decl shift to state 360
## Reductions:
-- On EOF
--   reduce production list(decl) ->

State 361:
## Known stack suffix:
## decl list(decl)
## LR(1) items:
list(decl) -> decl list(decl) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production list(decl) -> decl list(decl)

State 362:
## Known stack suffix:
##
## LR(1) items:
input' -> . input [ # ]
## Transitions:
-- On EOF shift to state 363
-- On input shift to state 364
## Reductions:

State 363:
## Known stack suffix:
## EOF
## LR(1) items:
input -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production input -> EOF

State 364:
## Known stack suffix:
## input
## LR(1) items:
input' -> input . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept input

