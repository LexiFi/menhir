%parameter<L : Dolmen_intf.Location.S>
%parameter<I : Ast.Id>
%parameter<T : Ast.Term
  with type location := L.t and type id := I.t>
%parameter<S : Ast.Statement
  with type location := L.t  and type id := I.t and type term := T.t>
%start file
%start input
%token AC
%token AND
%token AT
%token AXIOM
%token BAR
%token BITV
%token BOOL
%token CASESPLIT
%token CHECK
%token COLON
%token COMMA
%token CUT
%token <string> DECIMAL
%token DISTINCT
%token DOT
%token ELSE
%token END
%token EOF
%token EQUAL
%token EXISTS
%token EXTENDS
%token FALSE
%token FORALL
%token FUNC
%token GE
%token GOAL
%token GT
%token HAT
%token <string> HEXADECIMAL
%token <string> ID
%token IF
%token IN
%token INT
%token <string> INTEGER
%token LE
%token LEFTARROW
%token LEFTBR
%token LEFTPAR
%token LEFTSQ
%token LET
%token LOGIC
%token LRARROW
%token LT
%token MAPS_TO
%token MATCH
%token MINUS
%token NOT
%token NOTEQ
%token OF
%token OR
%token PERCENT
%token PLUS
%token POW
%token POWDOT
%token PRED
%token PROP
%token PV
%token QM
%token <string> QM_ID
%token QUOTE
%token REAL
%token REWRITING
%token RIGHTARROW
%token RIGHTBR
%token RIGHTPAR
%token RIGHTSQ
%token SHARP
%token SLASH
%token <string> STRING
%token THEN
%token THEORY
%token TIMES
%token TRUE
%token TYPE
%token UNIT
%token VOID
%token WITH
%token XOR
%nonassoc IN
%nonassoc prec_exists prec_forall
%right LRARROW RIGHTARROW XOR
%right OR
%right AND
%nonassoc prec_ite
%left EQUAL GE GT LE LT NOTEQ prec_relation
%left MINUS PLUS
%left AT PERCENT POW POWDOT SLASH TIMES
%nonassoc HAT
%nonassoc uminus
%nonassoc NOT
%right prec_named
%nonassoc CHECK CUT
%type <S.t list> file
%type <S.t option> input
%%

loption_separated_nonempty_list_COMMA_lexpr__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_lexpr_
    {    ( x )}

loption_separated_nonempty_list_COMMA_logic_binder__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_logic_binder_
    {    ( x )}

loption_separated_nonempty_list_COMMA_primitive_type__:
  
    {    ( [] )}
| x = separated_nonempty_list_COMMA_primitive_type_
    {    ( x )}

list_decl_:
  
    {    ( [] )}
| x = decl xs = list_decl_
    {    ( x :: xs )}

list_theory_elt_:
  
    {    ( [] )}
| x = theory_elt xs = list_theory_elt_
    {    ( x :: xs )}

separated_nonempty_list_AND_algebraic_typedef_:
  x = algebraic_typedef
    {    ( [ x ] )}
| x = algebraic_typedef _2 = AND xs = separated_nonempty_list_AND_algebraic_typedef_
    {    ( x :: xs )}

separated_nonempty_list_BAR_algebraic_constructor_:
  x = algebraic_constructor
    {    ( [ x ] )}
| x = algebraic_constructor _2 = BAR xs = separated_nonempty_list_BAR_algebraic_constructor_
    {    ( x :: xs )}

separated_nonempty_list_BAR_trigger_:
  x = trigger
    {    ( [ x ] )}
| x = trigger _2 = BAR xs = separated_nonempty_list_BAR_trigger_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_array_assignment_:
  x = array_assignment
    {    ( [ x ] )}
| x = array_assignment _2 = COMMA xs = separated_nonempty_list_COMMA_array_assignment_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_ident_:
  x = ident
    {    ( [ x ] )}
| x = ident _2 = COMMA xs = separated_nonempty_list_COMMA_ident_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_let_binder_:
  x = let_binder
    {    ( [ x ] )}
| x = let_binder _2 = COMMA xs = separated_nonempty_list_COMMA_let_binder_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_lexpr_:
  x = lexpr
    {    ( [ x ] )}
| x = lexpr _2 = COMMA xs = separated_nonempty_list_COMMA_lexpr_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_lexpr_or_dom_:
  x = lexpr_or_dom
    {    ( [ x ] )}
| x = lexpr_or_dom _2 = COMMA xs = separated_nonempty_list_COMMA_lexpr_or_dom_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_logic_binder_:
  x = logic_binder
    {    ( [ x ] )}
| x = logic_binder _2 = COMMA xs = separated_nonempty_list_COMMA_logic_binder_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_multi_logic_binder_:
  x = multi_logic_binder
    {    ( [ x ] )}
| x = multi_logic_binder _2 = COMMA xs = separated_nonempty_list_COMMA_multi_logic_binder_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_named_ident_:
  x = named_ident
    {    ( [ x ] )}
| x = named_ident _2 = COMMA xs = separated_nonempty_list_COMMA_named_ident_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_primitive_type_:
  x = primitive_type
    {    ( [ x ] )}
| x = primitive_type _2 = COMMA xs = separated_nonempty_list_COMMA_primitive_type_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_raw_named_ident_:
  x = raw_named_ident
    {    ( [ x ] )}
| x = raw_named_ident _2 = COMMA xs = separated_nonempty_list_COMMA_raw_named_ident_
    {    ( x :: xs )}

separated_nonempty_list_COMMA_type_var_:
  x = type_var
    {    ( [ x ] )}
| x = type_var _2 = COMMA xs = separated_nonempty_list_COMMA_type_var_
    {    ( x :: xs )}

separated_nonempty_list_PV_algebraic_label_with_type_:
  x = algebraic_label_with_type
    {    ( [ x ] )}
| x = algebraic_label_with_type _2 = PV xs = separated_nonempty_list_PV_algebraic_label_with_type_
    {    ( x :: xs )}

separated_nonempty_list_PV_label_expr_:
  x = label_expr
    {    ( [ x ] )}
| x = label_expr _2 = PV xs = separated_nonempty_list_PV_label_expr_
    {    ( x :: xs )}

separated_nonempty_list_PV_record_label_with_type_:
  x = record_label_with_type
    {    ( [ x ] )}
| x = record_label_with_type _2 = PV xs = separated_nonempty_list_PV_record_label_with_type_
    {    ( x :: xs )}

file:
  l = list_decl_ _2 = EOF
    {                ( l )}

input:
  _1 = EOF
    {        ( assert false )}

raw_ident:
  id = ID
    {    ( (fun ns -> I.mk ns id) )}

decl_ident:
  id = raw_ident
    {    ( id I.decl )}

ident:
  id = raw_ident
    {let _endpos = _endpos_id_ in
let _startpos = _startpos_id_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.const ~loc (id I.term) )}

raw_named_ident:
  id = ID
    {    ( I.mk I.term id )}
| id = ID str = STRING
    {    ( let track = I.mk I.track str in
      I.tracked ~track I.term id )}

named_ident:
  id = raw_named_ident
    {let _endpos = _endpos_id_ in
let _startpos = _startpos_id_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.const ~loc id )}

logic_binder:
  v = ident _2 = COLON ty = primitive_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos_v_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.colon ~loc v ty )}

multi_logic_binder:
  vars = separated_nonempty_list_COMMA_named_ident_ _2 = COLON ty = primitive_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos_vars_ in
    ( let loc = L.mk_pos _startpos _endpos in
      List.map (fun x -> T.colon ~loc x ty) vars )}

type_var:
  _1 = QUOTE id = ID
    {let _endpos = _endpos_id_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      let v = I.mk I.var ("'" ^ id) in
      T.const ~loc v )}

type_vars:
  
    {    ( [] )}
| v = type_var
    {    ( [v] )}
| _1 = LEFTPAR l = separated_nonempty_list_COMMA_type_var_ _3 = RIGHTPAR
    {    ( l )}

primitive_type:
  _1 = BOOL
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.bool ~loc () )}
| _1 = UNIT
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.ty_unit ~loc () )}
| _1 = INT
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.ty_int ~loc () )}
| _1 = REAL
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.ty_real ~loc () )}
| _1 = BITV _2 = LEFTSQ sz = INTEGER _4 = RIGHTSQ
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      let n =
        (* The lexer should guarantee that the length of a bitv is
         * a syntactically correct integer. *)
        match int_of_string sz with
        | i -> i
        | exception Invalid_argument _ -> assert false
      in
      T.ty_bitv ~loc n )}
| c = ident
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_c_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.apply ~loc c [] )}
| v = type_var
    {    ( v )}
| arg = primitive_type c = ident
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_arg_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.apply ~loc c [arg] )}
| _1 = LEFTPAR args = separated_nonempty_list_COMMA_primitive_type_ _3 = RIGHTPAR c = ident
    {let _endpos = _endpos_c_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.apply ~loc c args )}

primitive_type_or_prop:
  ty = primitive_type
    {    ( ty )}
| _1 = PROP
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.prop ~loc () )}

logic_type:
  ty = primitive_type_or_prop
    {    ( ty )}
| xs = loption_separated_nonempty_list_COMMA_primitive_type__ _2 = RIGHTARROW ret = primitive_type_or_prop
    {let l =     ( xs ) in
let _startpos_l_ = _startpos_xs_ in
let _endpos = _endpos_ret_ in
let _startpos = _startpos_l_ in
    ( let loc = L.mk_pos _startpos _endpos in
      List.fold_right (T.arrow ~loc) l ret )}

lexpr:
  e = simple_expr
    {    ( e )}
| _1 = NOT p = lexpr
    {let _endpos = _endpos_p_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.not_ ~loc p )}
| _1 = MINUS x = lexpr %prec uminus
    {let _endpos = _endpos_x_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.uminus ~loc x )}
| a = lexpr _2 = PLUS b = lexpr
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.add ~loc a b )}
| a = lexpr _2 = MINUS b = lexpr
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.sub ~loc a b )}
| a = lexpr _2 = TIMES b = lexpr
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.mult ~loc a b )}
| a = lexpr _2 = SLASH b = lexpr
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.div ~loc a b )}
| a = lexpr _2 = PERCENT b = lexpr
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.mod_ ~loc a b )}
| a = lexpr _2 = POW b = lexpr
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.int_pow ~loc a b )}
| a = lexpr _2 = POWDOT b = lexpr
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.real_pow ~loc a b )}
| p = lexpr _2 = AND q = lexpr
    {let _endpos = _endpos_q_ in
let _startpos = _startpos_p_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.and_ ~loc [p; q] )}
| p = lexpr _2 = OR q = lexpr
    {let _endpos = _endpos_q_ in
let _startpos = _startpos_p_ in
    ( let loc = L.mk_pos _startpos _endpos in
    T.or_ ~loc [p; q] )}
| p = lexpr _2 = XOR q = lexpr
    {let _endpos = _endpos_q_ in
let _startpos = _startpos_p_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.xor ~loc p q )}
| p = lexpr _2 = LRARROW q = lexpr
    {let _endpos = _endpos_q_ in
let _startpos = _startpos_p_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.equiv ~loc p q )}
| p = lexpr _2 = RIGHTARROW q = lexpr
    {let _endpos = _endpos_q_ in
let _startpos = _startpos_p_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.imply ~loc p q )}
| a = lexpr _2 = LT b = lexpr %prec prec_relation
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.lt ~loc a b )}
| a = lexpr _2 = LE b = lexpr %prec prec_relation
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.leq ~loc a b )}
| a = lexpr _2 = GT b = lexpr %prec prec_relation
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.gt ~loc a b )}
| a = lexpr _2 = GE b = lexpr %prec prec_relation
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.geq ~loc a b )}
| a = lexpr _2 = EQUAL b = lexpr %prec prec_relation
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.eq ~loc a b )}
| a = lexpr _2 = NOTEQ b = lexpr %prec prec_relation
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.neq ~loc [a; b] )}
| _1 = LEFTSQ _2 = BAR c = INTEGER _4 = BAR _5 = RIGHTSQ
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.bitv ~loc c )}
| e = lexpr _2 = HAT _3 = LEFTBR i = INTEGER _5 = COMMA j = INTEGER _7 = RIGHTBR
    {let _endpos = _endpos__7_ in
let _startpos = _startpos_e_ in
    ( let loc = L.mk_pos _startpos _endpos in
      let i, j =
        match int_of_string i, int_of_string j with
        | i, j -> i, j
        | exception Invalid_argument _ -> assert false
      in
      T.bitv_extract ~loc e i j )}
| e = lexpr _2 = AT f = lexpr
    {let _endpos = _endpos_f_ in
let _startpos = _startpos_e_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.bitv_concat ~loc e f )}
| _1 = DISTINCT _2 = LEFTPAR l = list2_lexpr_sep_comma _4 = RIGHTPAR
    {let _endpos = _endpos__4_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.neq ~loc l )}
| _1 = IF cond = lexpr _3 = THEN then_t = lexpr _5 = ELSE else_t = lexpr %prec prec_ite
    {let _endpos = _endpos_else_t_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.ite ~loc cond then_t else_t )}
| _1 = FORALL vars = separated_nonempty_list_COMMA_multi_logic_binder_ triggers = triggers filters = filters _5 = DOT body = lexpr %prec prec_forall
    {let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      let f = T.forall ~loc (List.flatten vars) body in
      let f = T.triggers ~loc f triggers in
      let f = T.filters ~loc f filters in
      f )}
| _1 = EXISTS vars = separated_nonempty_list_COMMA_multi_logic_binder_ triggers = triggers filters = filters _5 = DOT body = lexpr %prec prec_exists
    {let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      let f = T.exists ~loc (List.flatten vars) body in
      let f = T.triggers ~loc f triggers in
      let f = T.filters ~loc f filters in
      f )}
| name = STRING _2 = COLON e = lexpr %prec prec_named
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_name_ in
   ( let loc = L.mk_pos _startpos _endpos in
     let id = I.mk I.track name in
     T.tracked ~loc id e )}
| _1 = LET l = separated_nonempty_list_COMMA_let_binder_ _3 = IN body = lexpr
    {let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.letin ~loc l body )}
| _1 = CHECK e = lexpr
    {let _endpos = _endpos_e_ in
let _startpos = _startpos__1_ in
   ( let loc = L.mk_pos _startpos _endpos in
     T.check ~loc e )}
| _1 = CUT e = lexpr
    {let _endpos = _endpos_e_ in
let _startpos = _startpos__1_ in
   ( let loc = L.mk_pos _startpos _endpos in
     T.cut ~loc e )}
| _1 = MATCH e = lexpr _3 = WITH cases = match_cases _5 = END
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.match_ ~loc e (List.rev cases) )}

match_case:
  p = simple_pattern _2 = RIGHTARROW e = lexpr
    {    ( p, e )}

match_cases:
  c = match_case
    {    ( [c] )}
| _1 = BAR c = match_case
    {    ( [c] )}
| l = match_cases _2 = BAR c = match_case
    {    ( c :: l )}

simple_pattern:
  t = ident
    {    ( t )}
| f = ident _2 = LEFTPAR args = separated_nonempty_list_COMMA_ident_ _4 = RIGHTPAR
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
   ( let loc = L.mk_pos _startpos _endpos in
     T.apply ~loc f args )}

let_binder:
  a = ident _2 = EQUAL b = lexpr
    {let _endpos = _endpos_b_ in
let _startpos = _startpos_a_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.eq ~loc a b )}

simple_expr:
  t = ident
    {    ( t )}
| _1 = LEFTPAR e = lexpr _3 = RIGHTPAR
    {    ( e )}
| s = INTEGER
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.int ~loc s )}
| s = DECIMAL
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.real ~loc s )}
| s = HEXADECIMAL
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.hexa ~loc s )}
| _1 = TRUE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.true_ ~loc () )}
| _1 = FALSE
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.false_ ~loc () )}
| _1 = VOID
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.void ~loc () )}
| _1 = LEFTBR l = separated_nonempty_list_PV_label_expr_ _3 = RIGHTBR
    {let _endpos = _endpos__3_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.record ~loc l )}
| _1 = LEFTBR s = simple_expr _3 = WITH l = separated_nonempty_list_PV_label_expr_ _5 = RIGHTBR
    {let _endpos = _endpos__5_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.record_with ~loc s l )}
| s = simple_expr _2 = DOT label = raw_ident
    {let _endpos = _endpos_label_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.record_access ~loc s (label I.term) )}
| f = ident _2 = LEFTPAR xs = loption_separated_nonempty_list_COMMA_lexpr__ _4 = RIGHTPAR
    {let args =     ( xs ) in
let _endpos = _endpos__4_ in
let _startpos = _startpos_f_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.apply ~loc f args )}
| s = simple_expr _2 = LEFTSQ e = lexpr _4 = RIGHTSQ
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.array_get ~loc s e )}
| s = simple_expr _2 = LEFTSQ l = separated_nonempty_list_COMMA_array_assignment_ _4 = RIGHTSQ
    {let _endpos = _endpos__4_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      List.fold_left (fun acc (idx, value) ->
        T.array_set ~loc acc idx value
      ) s l )}
| s = simple_expr _2 = COLON ty = primitive_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.colon ~loc s ty )}
| s = simple_expr _2 = QM id = raw_ident
    {let _endpos = _endpos_id_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.adt_check ~loc s (id I.term) )}
| s = simple_expr c = QM_ID
    {let _endpos = _endpos_c_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.adt_check ~loc s (I.mk I.term c) )}
| s = simple_expr _2 = SHARP label = raw_ident
    {let _endpos = _endpos_label_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.adt_project ~loc s (label I.term) )}

array_assignment:
  e1 = lexpr _2 = LEFTARROW e2 = lexpr
    {    ( (e1, e2) )}

triggers:
  
    {    ( [] )}
| _1 = LEFTSQ l = separated_nonempty_list_BAR_trigger_ _3 = RIGHTSQ
    {    ( l )}

filters:
  
    {    ( [] )}
| _1 = LEFTBR l = separated_nonempty_list_COMMA_lexpr_ _3 = RIGHTBR
    {   ( l )}

trigger:
  l = separated_nonempty_list_COMMA_lexpr_or_dom_
    {let _endpos = _endpos_l_ in
let _startpos = _startpos_l_ in
   ( let loc = L.mk_pos _startpos _endpos in
     T.trigger ~loc l )}

lexpr_or_dom:
  e = lexpr
    {    ( e )}
| e = lexpr _2 = IN ls = sq lb = bound _5 = COMMA rb = bound rs = sq
    {let _endpos = _endpos_rs_ in
let _startpos = _startpos_e_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.in_interval ~loc e (lb, not ls) (rb, rs) )}
| id = raw_ident _2 = MAPS_TO e = lexpr
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_id_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.maps_to ~loc (id I.term) e )}

sq:
  _1 = LEFTSQ
    {    ( true )}
| _1 = RIGHTSQ
    {    ( false )}

bound:
  _1 = QM
    {let _endpos = _endpos__1_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      let v = I.mk I.term "?" in
      T.const ~loc v )}
| s = ID
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.const ~loc (I.mk I.term s) )}
| s = QM_ID
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.const ~loc (I.mk I.term s) )}
| s = INTEGER
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.int ~loc s )}
| s = DECIMAL
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.real ~loc s )}
| s = HEXADECIMAL
    {let _endpos = _endpos_s_ in
let _startpos = _startpos_s_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.hexa ~loc s )}
| _1 = MINUS s = INTEGER
    {let _endpos = _endpos_s_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.int ~loc ("-" ^ s) )}
| _1 = MINUS s = DECIMAL
    {let _endpos = _endpos_s_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.real ~loc ("-" ^ s) )}
| _1 = MINUS s = HEXADECIMAL
    {let _endpos = _endpos_s_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.hexa ~loc ("-" ^ s) )}

list2_lexpr_sep_comma:
  e1 = lexpr _2 = COMMA e2 = lexpr
    {    ( [e1; e2] )}
| e = lexpr _2 = COMMA l = list2_lexpr_sep_comma
    {    ( e :: l )}

label_expr:
  id = ident _2 = EQUAL e = lexpr
    {let _endpos = _endpos_e_ in
let _startpos = _startpos_id_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.eq ~loc id e )}

record_label_with_type:
  id = raw_ident _2 = COLON ty = primitive_type
    {    ( id I.term, ty )}

record_type:
  _1 = LEFTBR l = separated_nonempty_list_PV_record_label_with_type_ _3 = RIGHTBR
    {    ( l )}

algebraic_label_with_type:
  id = ident _2 = COLON ty = primitive_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos_id_ in
    ( let loc = L.mk_pos _startpos _endpos in
      T.colon ~loc id ty )}

algebraic_args:
  
    {    ( [] )}
| _1 = OF _2 = LEFTBR l = separated_nonempty_list_PV_algebraic_label_with_type_ _4 = RIGHTBR
    {    ( l )}

algebraic_constructor:
  c = raw_ident l = algebraic_args
    {    ( c I.term, l )}

algebraic_typedef:
  vars = type_vars c = raw_ident _3 = EQUAL l = separated_nonempty_list_BAR_algebraic_constructor_
    {let _endpos = _endpos_l_ in
let _startpos = _startpos_vars_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.algebraic_type ~loc (c I.term) vars l )}

ac_modifier:
  
    {    ( false )}
| _1 = AC
    {    ( true )}

theory_elt:
  _1 = AXIOM name = decl_ident _3 = COLON body = lexpr
    {let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.axiom ~loc name body )}
| _1 = CASESPLIT name = decl_ident _3 = COLON body = lexpr
    {let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.case_split ~loc name body )}

rewriting_list:
  e = lexpr
    {    ( [e] )}
| e = lexpr _2 = PV
    {    ( [e] )}
| e = lexpr _2 = PV l = rewriting_list
    {    ( e :: l )}

decl:
  _1 = THEORY id = decl_ident _3 = EXTENDS ext = decl_ident _5 = EQUAL l = list_theory_elt_ _7 = END
    {let _endpos = _endpos__7_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.theory ~loc id ext l )}
| _1 = TYPE vars = type_vars id = raw_ident
    {let _endpos = _endpos_id_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.abstract_type ~loc (id I.term) vars )}
| _1 = TYPE l = separated_nonempty_list_AND_algebraic_typedef_
    {let _endpos = _endpos_l_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.rec_types ~loc l )}
| _1 = TYPE vars = type_vars id = raw_ident _4 = EQUAL r = record_type
    {let _endpos = _endpos_r_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.record_type ~loc (id I.term) vars r )}
| _1 = LOGIC ac = ac_modifier args = separated_nonempty_list_COMMA_raw_named_ident_ _4 = COLON ty = logic_type
    {let _endpos = _endpos_ty_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.logic ~loc ~ac args ty )}
| _1 = FUNC f = raw_named_ident _3 = LEFTPAR xs = loption_separated_nonempty_list_COMMA_logic_binder__ _5 = RIGHTPAR _6 = COLON ret_ty = primitive_type _8 = EQUAL body = lexpr
    {let args =     ( xs ) in
let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.fun_def ~loc f [] args ret_ty body )}
| _1 = PRED p = raw_named_ident _3 = EQUAL body = lexpr
    {let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      let ret_ty = T.prop ~loc () in
      S.fun_def ~loc p [] [] ret_ty body )}
| _1 = PRED p = raw_named_ident _3 = LEFTPAR xs = loption_separated_nonempty_list_COMMA_logic_binder__ _5 = RIGHTPAR _6 = EQUAL body = lexpr
    {let args =     ( xs ) in
let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      let ret_ty = T.prop ~loc () in
      S.fun_def ~loc p [] args ret_ty body )}
| _1 = AXIOM name = decl_ident _3 = COLON body = lexpr
    {let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.axiom ~loc name body )}
| _1 = REWRITING name = decl_ident _3 = COLON l = rewriting_list
    {let _endpos = _endpos_l_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.rewriting ~loc name l )}
| _1 = GOAL name = decl_ident _3 = COLON body = lexpr
    {let _endpos = _endpos_body_ in
let _startpos = _startpos__1_ in
    ( let loc = L.mk_pos _startpos _endpos in
      S.prove_goal ~loc name body )}

%%


