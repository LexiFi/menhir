File "dune.1.4.0-opamBaseParser.mly", line 49, characters 10-16:
Warning: the token URELOP is unused.
%{

open OpamParserTypes

(** OPAM config file generic type parser *)

let get_pos n =
  let pos = Parsing.rhs_start_pos n in
  Lexing.(pos.pos_fname,
          pos.pos_lnum,
          pos.pos_cnum - pos.pos_bol)

%}
%start main
%start value
%token AND
%token <bool> BOOL
%token COLON
%token <OpamParserTypes.env_update_op> ENVOP
%token EOF
%token <string> IDENT
%token <int> INT
%token LBRACE
%token LBRACKET
%token LPAR
%token OR
%token <OpamParserTypes.pfxop> PFXOP
%token RBRACE
%token RBRACKET
%token <OpamParserTypes.relop> RELOP
%token RPAR
%token <string> STRING
%left COLON
%left ATOM
%left AND
%left OR
%nonassoc ENVOP
%nonassoc PFXOP
%left LBRACE RBRACE
%nonassoc RELOP
%nonassoc URELOP
%type <string -> OpamParserTypes.opamfile> main
%type <OpamParserTypes.value> value
%%

main:
  _1 = items _2 = EOF
    {            ( fun file_name ->
        { file_contents = _1; file_name } )}

items:
  _1 = item _2 = items
    {             ( _1 :: _2 )}
| 
    {             ( [] )}

item:
  _1 = IDENT _2 = COLON _3 = value
    {                                   ( Variable (get_pos 1, _1, _3) )}
| _1 = IDENT _2 = LBRACE _3 = items _4 = RBRACE
    {                            (
  Section (get_pos 1,
           {section_kind=_1; section_name=None; section_items= _3})
)}
| _1 = IDENT _2 = STRING _3 = LBRACE _4 = items _5 = RBRACE
    {                                   (
  Section (get_pos 1,
           {section_kind=_1; section_name=Some _2; section_items= _4})
)}

value:
  _1 = atom %prec ATOM
    {                             ( _1 )}
| _1 = LPAR _2 = values _3 = RPAR
    {                             ( Group (get_pos 1,_2) )}
| _1 = LBRACKET _2 = values _3 = RBRACKET
    {                             ( List (get_pos 1,_2) )}
| _1 = value _2 = LBRACE _3 = values _4 = RBRACE
    {                             ( Option (get_pos 2,_1, _3) )}
| _1 = value _2 = AND _3 = value
    {                             ( Logop (get_pos 2,`And,_1,_3) )}
| _1 = value _2 = OR _3 = value
    {                             ( Logop (get_pos 2,`Or,_1,_3) )}
| _1 = atom _2 = RELOP _3 = atom
    {                             ( Relop (get_pos 2,_2,_1,_3) )}
| _1 = atom _2 = ENVOP _3 = atom
    {                             ( Env_binding (get_pos 1,_1,_2,_3) )}
| _1 = PFXOP _2 = value
    {                             ( Pfxop (get_pos 1,_1,_2) )}
| _1 = RELOP _2 = atom
    {                             ( Prefix_relop (get_pos 1,_1,_2) )}

values:
  
    {                             ( [] )}
| _1 = value _2 = values
    {                             ( _1 :: _2 )}

atom:
  _1 = IDENT
    {                             ( Ident (get_pos 1,_1) )}
| _1 = BOOL
    {                             ( Bool (get_pos 1,_1) )}
| _1 = INT
    {                             ( Int (get_pos 1,_1) )}
| _1 = STRING
    {                             ( String (get_pos 1,_1) )}

%%


let main t l f =
  try
    let r = main t l f in
    Parsing.clear_parser ();
    r
  with
  | e ->
    Parsing.clear_parser ();
    raise e

