;; This file has been auto-generated. Please do not edit it.
;; Instead, edit [test.ml] and run [make depend].

;; 402 distinct tests.

(rule (target JSParse.opp.out) (deps JSParse.mly)
  (action
    (with-outputs-to JSParse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff JSParse.opp.exp JSParse.opp.out)))

(rule
  (targets JSParse.out JSParse.automaton JSParse.automaton.resolved
    JSParse.conflicts JSParse.timings)
  (deps JSParse.mly)
  (action
    (with-outputs-to JSParse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to JSParse.timings %{deps})))))

(rule (alias quick) (action (diff JSParse.exp JSParse.out)))

(rule (alias quick) (action (diff JSParse.automaton.exp JSParse.automaton)))

(rule (alias quick)
  (action (diff JSParse.automaton.resolved.exp JSParse.automaton.resolved)))

(rule (alias quick) (action (diff JSParse.conflicts.exp JSParse.conflicts)))

(rule (target JSParse_stripped.mly) (deps JSParse.mly)
  (action
    (with-stderr-to JSParse_stripped.ignored
      (with-stdout-to JSParse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets JSParse_stripped.log JSParse_stripped.mli JSParse_stripped.ml
    JSParse_stripped.stacklang JSParse_stripped.timings
    JSParse_stripped.scount JSParse_stripped.dcount)
  (deps JSParse_stripped.mly)
  (action
    (with-outputs-to JSParse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to JSParse_stripped.timings %{deps})))))

(alias (name quick) (deps
                      JSParse_stripped.stacklang))

(rule (targets JSParse_stripped.cmi JSParse_stripped.mli.log)
  (deps JSParse_stripped.mli)
  (action
    (with-stdout-to JSParse_stripped.mli.dtimings
      (with-stderr-to JSParse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c JSParse_stripped.mli)))))

(rule (targets JSParse_stripped.cmo JSParse_stripped.ml.log)
  (deps JSParse_stripped.ml JSParse_stripped.cmi)
  (action
    (with-stdout-to JSParse_stripped.ml.dtimings
      (with-stderr-to JSParse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c JSParse_stripped.ml)))))

(rule (alias test)
  (action (diff JSParse_stripped.ml.log.exp JSParse_stripped.ml.log)))

(rule (target K3Parser.opp.out) (deps K3Parser.mly)
  (action
    (with-outputs-to K3Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff K3Parser.opp.exp K3Parser.opp.out)))

(rule
  (targets K3Parser.out K3Parser.automaton K3Parser.automaton.resolved
    K3Parser.conflicts K3Parser.timings)
  (deps K3Parser.mly)
  (action
    (with-outputs-to K3Parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to K3Parser.timings %{deps})))))

(rule (alias quick) (action (diff K3Parser.exp K3Parser.out)))

(rule (alias quick)
  (action (diff K3Parser.automaton.exp K3Parser.automaton)))

(rule (alias quick)
  (action (diff K3Parser.automaton.resolved.exp K3Parser.automaton.resolved)))

(rule (alias quick)
  (action (diff K3Parser.conflicts.exp K3Parser.conflicts)))

(rule (target K3Parser_stripped.mly) (deps K3Parser.mly)
  (action
    (with-stderr-to K3Parser_stripped.ignored
      (with-stdout-to K3Parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets K3Parser_stripped.log K3Parser_stripped.mli K3Parser_stripped.ml
    K3Parser_stripped.stacklang K3Parser_stripped.timings
    K3Parser_stripped.scount K3Parser_stripped.dcount)
  (deps K3Parser_stripped.mly)
  (action
    (with-outputs-to K3Parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to K3Parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      K3Parser_stripped.stacklang))

(rule (targets K3Parser_stripped.cmi K3Parser_stripped.mli.log)
  (deps K3Parser_stripped.mli)
  (action
    (with-stdout-to K3Parser_stripped.mli.dtimings
      (with-stderr-to K3Parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c K3Parser_stripped.mli)))))

(rule (targets K3Parser_stripped.cmo K3Parser_stripped.ml.log)
  (deps K3Parser_stripped.ml K3Parser_stripped.cmi)
  (action
    (with-stdout-to K3Parser_stripped.ml.dtimings
      (with-stderr-to K3Parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c K3Parser_stripped.ml)))))

(rule (alias test)
  (action (diff K3Parser_stripped.ml.log.exp K3Parser_stripped.ml.log)))

(rule (target KaSim.4.0.0-kappaParser.opp.out)
  (deps KaSim.4.0.0-kappaParser.mly)
  (action
    (with-outputs-to KaSim.4.0.0-kappaParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff KaSim.4.0.0-kappaParser.opp.exp KaSim.4.0.0-kappaParser.opp.out)))

(rule
  (targets KaSim.4.0.0-kappaParser.out KaSim.4.0.0-kappaParser.automaton
    KaSim.4.0.0-kappaParser.automaton.resolved
    KaSim.4.0.0-kappaParser.conflicts KaSim.4.0.0-kappaParser.timings)
  (deps KaSim.4.0.0-kappaParser.mly)
  (action
    (with-outputs-to KaSim.4.0.0-kappaParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to KaSim.4.0.0-kappaParser.timings %{deps})))))

(rule (alias quick)
  (action (diff KaSim.4.0.0-kappaParser.exp KaSim.4.0.0-kappaParser.out)))

(rule (alias quick)
  (action
    (diff KaSim.4.0.0-kappaParser.automaton.exp
      KaSim.4.0.0-kappaParser.automaton)))

(rule (alias quick)
  (action
    (diff KaSim.4.0.0-kappaParser.automaton.resolved.exp
      KaSim.4.0.0-kappaParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff KaSim.4.0.0-kappaParser.conflicts.exp
      KaSim.4.0.0-kappaParser.conflicts)))

(rule (target KaSim_4_0_0-kappaParser_stripped.mly)
  (deps KaSim.4.0.0-kappaParser.mly)
  (action
    (with-stderr-to KaSim_4_0_0-kappaParser_stripped.ignored
      (with-stdout-to KaSim_4_0_0-kappaParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets KaSim_4_0_0-kappaParser_stripped.log
    KaSim_4_0_0-kappaParser_stripped.mli KaSim_4_0_0-kappaParser_stripped.ml
    KaSim_4_0_0-kappaParser_stripped.stacklang
    KaSim_4_0_0-kappaParser_stripped.timings
    KaSim_4_0_0-kappaParser_stripped.scount
    KaSim_4_0_0-kappaParser_stripped.dcount)
  (deps KaSim_4_0_0-kappaParser_stripped.mly)
  (action
    (with-outputs-to KaSim_4_0_0-kappaParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to KaSim_4_0_0-kappaParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      KaSim_4_0_0-kappaParser_stripped.stacklang))

(rule
  (targets KaSim_4_0_0-kappaParser_stripped.cmi
    KaSim_4_0_0-kappaParser_stripped.mli.log)
  (deps KaSim_4_0_0-kappaParser_stripped.mli)
  (action
    (with-stdout-to KaSim_4_0_0-kappaParser_stripped.mli.dtimings
      (with-stderr-to KaSim_4_0_0-kappaParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          KaSim_4_0_0-kappaParser_stripped.mli)))))

(rule
  (targets KaSim_4_0_0-kappaParser_stripped.cmo
    KaSim_4_0_0-kappaParser_stripped.ml.log)
  (deps KaSim_4_0_0-kappaParser_stripped.ml
    KaSim_4_0_0-kappaParser_stripped.cmi)
  (action
    (with-stdout-to KaSim_4_0_0-kappaParser_stripped.ml.dtimings
      (with-stderr-to KaSim_4_0_0-kappaParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          KaSim_4_0_0-kappaParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff KaSim_4_0_0-kappaParser_stripped.ml.log.exp
      KaSim_4_0_0-kappaParser_stripped.ml.log)))

(rule (target KaSim.4.0.0-kparser4.opp.out) (deps KaSim.4.0.0-kparser4.mly)
  (action
    (with-outputs-to KaSim.4.0.0-kparser4.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff KaSim.4.0.0-kparser4.opp.exp KaSim.4.0.0-kparser4.opp.out)))

(rule
  (targets KaSim.4.0.0-kparser4.out KaSim.4.0.0-kparser4.automaton
    KaSim.4.0.0-kparser4.automaton.resolved KaSim.4.0.0-kparser4.conflicts
    KaSim.4.0.0-kparser4.timings)
  (deps KaSim.4.0.0-kparser4.mly)
  (action
    (with-outputs-to KaSim.4.0.0-kparser4.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to KaSim.4.0.0-kparser4.timings %{deps})))))

(rule (alias quick)
  (action (diff KaSim.4.0.0-kparser4.exp KaSim.4.0.0-kparser4.out)))

(rule (alias quick)
  (action
    (diff KaSim.4.0.0-kparser4.automaton.exp KaSim.4.0.0-kparser4.automaton)))

(rule (alias quick)
  (action
    (diff KaSim.4.0.0-kparser4.automaton.resolved.exp
      KaSim.4.0.0-kparser4.automaton.resolved)))

(rule (alias quick)
  (action
    (diff KaSim.4.0.0-kparser4.conflicts.exp KaSim.4.0.0-kparser4.conflicts)))

(rule (target KaSim_4_0_0-kparser4_stripped.mly)
  (deps KaSim.4.0.0-kparser4.mly)
  (action
    (with-stderr-to KaSim_4_0_0-kparser4_stripped.ignored
      (with-stdout-to KaSim_4_0_0-kparser4_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets KaSim_4_0_0-kparser4_stripped.log
    KaSim_4_0_0-kparser4_stripped.mli KaSim_4_0_0-kparser4_stripped.ml
    KaSim_4_0_0-kparser4_stripped.stacklang
    KaSim_4_0_0-kparser4_stripped.timings
    KaSim_4_0_0-kparser4_stripped.scount
    KaSim_4_0_0-kparser4_stripped.dcount)
  (deps KaSim_4_0_0-kparser4_stripped.mly)
  (action
    (with-outputs-to KaSim_4_0_0-kparser4_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to KaSim_4_0_0-kparser4_stripped.timings %{deps})))))

(alias (name quick) (deps
                      KaSim_4_0_0-kparser4_stripped.stacklang))

(rule
  (targets KaSim_4_0_0-kparser4_stripped.cmi
    KaSim_4_0_0-kparser4_stripped.mli.log)
  (deps KaSim_4_0_0-kparser4_stripped.mli)
  (action
    (with-stdout-to KaSim_4_0_0-kparser4_stripped.mli.dtimings
      (with-stderr-to KaSim_4_0_0-kparser4_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          KaSim_4_0_0-kparser4_stripped.mli)))))

(rule
  (targets KaSim_4_0_0-kparser4_stripped.cmo
    KaSim_4_0_0-kparser4_stripped.ml.log)
  (deps KaSim_4_0_0-kparser4_stripped.ml KaSim_4_0_0-kparser4_stripped.cmi)
  (action
    (with-stdout-to KaSim_4_0_0-kparser4_stripped.ml.dtimings
      (with-stderr-to KaSim_4_0_0-kparser4_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          KaSim_4_0_0-kparser4_stripped.ml)))))

(rule (alias test)
  (action
    (diff KaSim_4_0_0-kparser4_stripped.ml.log.exp
      KaSim_4_0_0-kparser4_stripped.ml.log)))

(rule (target RedTT.opp.out) (deps RedTT.mly)
  (action
    (with-outputs-to RedTT.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff RedTT.opp.exp RedTT.opp.out)))

(rule
  (targets RedTT.out RedTT.automaton RedTT.automaton.resolved RedTT.conflicts
    RedTT.timings)
  (deps RedTT.mly)
  (action
    (with-outputs-to RedTT.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to RedTT.timings %{deps})))))

(rule (alias quick) (action (diff RedTT.exp RedTT.out)))

(rule (alias quick) (action (diff RedTT.automaton.exp RedTT.automaton)))

(rule (alias quick)
  (action (diff RedTT.automaton.resolved.exp RedTT.automaton.resolved)))

(rule (alias quick) (action (diff RedTT.conflicts.exp RedTT.conflicts)))

(rule (target RedTT_stripped.mly) (deps RedTT.mly)
  (action
    (with-stderr-to RedTT_stripped.ignored
      (with-stdout-to RedTT_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets RedTT_stripped.log RedTT_stripped.mli RedTT_stripped.ml
    RedTT_stripped.stacklang RedTT_stripped.timings RedTT_stripped.scount
    RedTT_stripped.dcount)
  (deps RedTT_stripped.mly)
  (action
    (with-outputs-to RedTT_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to RedTT_stripped.timings %{deps})))))

(alias (name quick) (deps
                      RedTT_stripped.stacklang))

(rule (targets RedTT_stripped.cmi RedTT_stripped.mli.log)
  (deps RedTT_stripped.mli)
  (action
    (with-stdout-to RedTT_stripped.mli.dtimings
      (with-stderr-to RedTT_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c RedTT_stripped.mli)))))

(rule (targets RedTT_stripped.cmo RedTT_stripped.ml.log)
  (deps RedTT_stripped.ml RedTT_stripped.cmi)
  (action
    (with-stdout-to RedTT_stripped.ml.dtimings
      (with-stderr-to RedTT_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c RedTT_stripped.ml)))))

(rule (alias test)
  (action (diff RedTT_stripped.ml.log.exp RedTT_stripped.ml.log)))

(rule (target acgtk1.opp.out)
  (deps acgtk1.mly acgtk2.mly acgtk3.mly acgtk4.mly acgtk5.mly)
  (action
    (with-outputs-to acgtk1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base acgtk1 --only-preprocess %{deps})))))

(rule (alias quick) (action (diff acgtk1.opp.exp acgtk1.opp.out)))

(rule
  (targets acgtk1.out acgtk1.automaton acgtk1.automaton.resolved
    acgtk1.conflicts acgtk1.timings)
  (deps acgtk1.mly acgtk2.mly acgtk3.mly acgtk4.mly acgtk5.mly)
  (action
    (with-outputs-to acgtk1.out
      (with-accepted-exit-codes 0
        (run menhir --base acgtk1 --table --dump --dump-resolved --explain
          -lg 2 -la 2 -lc 2 --timings-to acgtk1.timings %{deps})))))

(rule (alias quick) (action (diff acgtk1.exp acgtk1.out)))

(rule (alias quick) (action (diff acgtk1.automaton.exp acgtk1.automaton)))

(rule (alias quick)
  (action (diff acgtk1.automaton.resolved.exp acgtk1.automaton.resolved)))

(rule (alias quick) (action (diff acgtk1.conflicts.exp acgtk1.conflicts)))

(rule (target acgtk1_stripped.mly)
  (deps acgtk1.mly acgtk2.mly acgtk3.mly acgtk4.mly acgtk5.mly)
  (action
    (with-stderr-to acgtk1_stripped.ignored
      (with-stdout-to acgtk1_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base acgtk1 --only-preprocess-uu %{deps}))))))

(rule
  (targets acgtk1_stripped.log acgtk1_stripped.mli acgtk1_stripped.ml
    acgtk1_stripped.stacklang acgtk1_stripped.timings acgtk1_stripped.scount
    acgtk1_stripped.dcount)
  (deps acgtk1_stripped.mly)
  (action
    (with-outputs-to acgtk1_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to acgtk1_stripped.timings %{deps})))))

(alias (name quick) (deps
                      acgtk1_stripped.stacklang))

(rule (targets acgtk1_stripped.cmi acgtk1_stripped.mli.log)
  (deps acgtk1_stripped.mli)
  (action
    (with-stdout-to acgtk1_stripped.mli.dtimings
      (with-stderr-to acgtk1_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c acgtk1_stripped.mli)))))

(rule (targets acgtk1_stripped.cmo acgtk1_stripped.ml.log)
  (deps acgtk1_stripped.ml acgtk1_stripped.cmi)
  (action
    (with-stdout-to acgtk1_stripped.ml.dtimings
      (with-stderr-to acgtk1_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c acgtk1_stripped.ml)))))

(rule (alias test)
  (action (diff acgtk1_stripped.ml.log.exp acgtk1_stripped.ml.log)))

(rule (target albatross.opp.out) (deps albatross.mly)
  (action
    (with-outputs-to albatross.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff albatross.opp.exp albatross.opp.out)))

(rule
  (targets albatross.out albatross.automaton albatross.automaton.resolved
    albatross.conflicts albatross.timings)
  (deps albatross.mly)
  (action
    (with-outputs-to albatross.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to albatross.timings %{deps})))))

(rule (alias quick) (action (diff albatross.exp albatross.out)))

(rule (alias quick)
  (action (diff albatross.automaton.exp albatross.automaton)))

(rule (alias quick)
  (action
    (diff albatross.automaton.resolved.exp albatross.automaton.resolved)))

(rule (alias quick)
  (action (diff albatross.conflicts.exp albatross.conflicts)))

(rule (target albatross_stripped.mly) (deps albatross.mly)
  (action
    (with-stderr-to albatross_stripped.ignored
      (with-stdout-to albatross_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets albatross_stripped.log albatross_stripped.mli
    albatross_stripped.ml albatross_stripped.stacklang
    albatross_stripped.timings albatross_stripped.scount
    albatross_stripped.dcount)
  (deps albatross_stripped.mly)
  (action
    (with-outputs-to albatross_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to albatross_stripped.timings %{deps})))))

(alias (name quick) (deps
                      albatross_stripped.stacklang))

(rule (targets albatross_stripped.cmi albatross_stripped.mli.log)
  (deps albatross_stripped.mli)
  (action
    (with-stdout-to albatross_stripped.mli.dtimings
      (with-stderr-to albatross_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c albatross_stripped.mli)))))

(rule (targets albatross_stripped.cmo albatross_stripped.ml.log)
  (deps albatross_stripped.ml albatross_stripped.cmi)
  (action
    (with-stdout-to albatross_stripped.ml.dtimings
      (with-stderr-to albatross_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c albatross_stripped.ml)))))

(rule (alias test)
  (action (diff albatross_stripped.ml.log.exp albatross_stripped.ml.log)))

(rule (target alphaCaml.opp.out) (deps alphaCaml.mly)
  (action
    (with-outputs-to alphaCaml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff alphaCaml.opp.exp alphaCaml.opp.out)))

(rule
  (targets alphaCaml.out alphaCaml.automaton alphaCaml.automaton.resolved
    alphaCaml.conflicts alphaCaml.timings)
  (deps alphaCaml.mly)
  (action
    (with-outputs-to alphaCaml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to alphaCaml.timings %{deps})))))

(rule (alias quick) (action (diff alphaCaml.exp alphaCaml.out)))

(rule (alias quick)
  (action (diff alphaCaml.automaton.exp alphaCaml.automaton)))

(rule (alias quick)
  (action
    (diff alphaCaml.automaton.resolved.exp alphaCaml.automaton.resolved)))

(rule (alias quick)
  (action (diff alphaCaml.conflicts.exp alphaCaml.conflicts)))

(rule (target alphaCaml_stripped.mly) (deps alphaCaml.mly)
  (action
    (with-stderr-to alphaCaml_stripped.ignored
      (with-stdout-to alphaCaml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets alphaCaml_stripped.log alphaCaml_stripped.mli
    alphaCaml_stripped.ml alphaCaml_stripped.stacklang
    alphaCaml_stripped.timings alphaCaml_stripped.scount
    alphaCaml_stripped.dcount)
  (deps alphaCaml_stripped.mly)
  (action
    (with-outputs-to alphaCaml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to alphaCaml_stripped.timings %{deps})))))

(alias (name quick) (deps
                      alphaCaml_stripped.stacklang))

(rule (targets alphaCaml_stripped.cmi alphaCaml_stripped.mli.log)
  (deps alphaCaml_stripped.mli)
  (action
    (with-stdout-to alphaCaml_stripped.mli.dtimings
      (with-stderr-to alphaCaml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c alphaCaml_stripped.mli)))))

(rule (targets alphaCaml_stripped.cmo alphaCaml_stripped.ml.log)
  (deps alphaCaml_stripped.ml alphaCaml_stripped.cmi)
  (action
    (with-stdout-to alphaCaml_stripped.ml.dtimings
      (with-stderr-to alphaCaml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c alphaCaml_stripped.ml)))))

(rule (alias test)
  (action (diff alphaCaml_stripped.ml.log.exp alphaCaml_stripped.ml.log)))

(rule (target alphaCaml-demos-interactive.opp.out)
  (deps alphaCaml-demos-interactive.mly)
  (action
    (with-outputs-to alphaCaml-demos-interactive.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-interactive.opp.exp
      alphaCaml-demos-interactive.opp.out)))

(rule
  (targets alphaCaml-demos-interactive.out
    alphaCaml-demos-interactive.automaton
    alphaCaml-demos-interactive.automaton.resolved
    alphaCaml-demos-interactive.conflicts
    alphaCaml-demos-interactive.timings)
  (deps alphaCaml-demos-interactive.mly)
  (action
    (with-outputs-to alphaCaml-demos-interactive.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to alphaCaml-demos-interactive.timings %{deps})))))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-interactive.exp alphaCaml-demos-interactive.out)))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-interactive.automaton.exp
      alphaCaml-demos-interactive.automaton)))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-interactive.automaton.resolved.exp
      alphaCaml-demos-interactive.automaton.resolved)))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-interactive.conflicts.exp
      alphaCaml-demos-interactive.conflicts)))

(rule (target alphaCaml-demos-interactive_stripped.mly)
  (deps alphaCaml-demos-interactive.mly)
  (action
    (with-stderr-to alphaCaml-demos-interactive_stripped.ignored
      (with-stdout-to alphaCaml-demos-interactive_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets alphaCaml-demos-interactive_stripped.log
    alphaCaml-demos-interactive_stripped.mli
    alphaCaml-demos-interactive_stripped.ml
    alphaCaml-demos-interactive_stripped.stacklang
    alphaCaml-demos-interactive_stripped.timings
    alphaCaml-demos-interactive_stripped.scount
    alphaCaml-demos-interactive_stripped.dcount)
  (deps alphaCaml-demos-interactive_stripped.mly)
  (action
    (with-outputs-to alphaCaml-demos-interactive_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to alphaCaml-demos-interactive_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      alphaCaml-demos-interactive_stripped.stacklang))

(rule
  (targets alphaCaml-demos-interactive_stripped.cmi
    alphaCaml-demos-interactive_stripped.mli.log)
  (deps alphaCaml-demos-interactive_stripped.mli)
  (action
    (with-stdout-to alphaCaml-demos-interactive_stripped.mli.dtimings
      (with-stderr-to alphaCaml-demos-interactive_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          alphaCaml-demos-interactive_stripped.mli)))))

(rule
  (targets alphaCaml-demos-interactive_stripped.cmo
    alphaCaml-demos-interactive_stripped.ml.log)
  (deps alphaCaml-demos-interactive_stripped.ml
    alphaCaml-demos-interactive_stripped.cmi)
  (action
    (with-stdout-to alphaCaml-demos-interactive_stripped.ml.dtimings
      (with-stderr-to alphaCaml-demos-interactive_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          alphaCaml-demos-interactive_stripped.ml)))))

(rule (alias test)
  (action
    (diff alphaCaml-demos-interactive_stripped.ml.log.exp
      alphaCaml-demos-interactive_stripped.ml.log)))

(rule (target alphaCaml-demos-mixins.opp.out)
  (deps alphaCaml-demos-mixins.mly)
  (action
    (with-outputs-to alphaCaml-demos-mixins.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-mixins.opp.exp alphaCaml-demos-mixins.opp.out)))

(rule
  (targets alphaCaml-demos-mixins.out alphaCaml-demos-mixins.automaton
    alphaCaml-demos-mixins.automaton.resolved
    alphaCaml-demos-mixins.conflicts alphaCaml-demos-mixins.timings)
  (deps alphaCaml-demos-mixins.mly)
  (action
    (with-outputs-to alphaCaml-demos-mixins.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to alphaCaml-demos-mixins.timings %{deps})))))

(rule (alias quick)
  (action (diff alphaCaml-demos-mixins.exp alphaCaml-demos-mixins.out)))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-mixins.automaton.exp
      alphaCaml-demos-mixins.automaton)))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-mixins.automaton.resolved.exp
      alphaCaml-demos-mixins.automaton.resolved)))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-mixins.conflicts.exp
      alphaCaml-demos-mixins.conflicts)))

(rule (target alphaCaml-demos-mixins_stripped.mly)
  (deps alphaCaml-demos-mixins.mly)
  (action
    (with-stderr-to alphaCaml-demos-mixins_stripped.ignored
      (with-stdout-to alphaCaml-demos-mixins_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets alphaCaml-demos-mixins_stripped.log
    alphaCaml-demos-mixins_stripped.mli alphaCaml-demos-mixins_stripped.ml
    alphaCaml-demos-mixins_stripped.stacklang
    alphaCaml-demos-mixins_stripped.timings
    alphaCaml-demos-mixins_stripped.scount
    alphaCaml-demos-mixins_stripped.dcount)
  (deps alphaCaml-demos-mixins_stripped.mly)
  (action
    (with-outputs-to alphaCaml-demos-mixins_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to alphaCaml-demos-mixins_stripped.timings %{deps})))))

(alias (name quick) (deps
                      alphaCaml-demos-mixins_stripped.stacklang))

(rule
  (targets alphaCaml-demos-mixins_stripped.cmi
    alphaCaml-demos-mixins_stripped.mli.log)
  (deps alphaCaml-demos-mixins_stripped.mli)
  (action
    (with-stdout-to alphaCaml-demos-mixins_stripped.mli.dtimings
      (with-stderr-to alphaCaml-demos-mixins_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          alphaCaml-demos-mixins_stripped.mli)))))

(rule
  (targets alphaCaml-demos-mixins_stripped.cmo
    alphaCaml-demos-mixins_stripped.ml.log)
  (deps alphaCaml-demos-mixins_stripped.ml
    alphaCaml-demos-mixins_stripped.cmi)
  (action
    (with-stdout-to alphaCaml-demos-mixins_stripped.ml.dtimings
      (with-stderr-to alphaCaml-demos-mixins_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          alphaCaml-demos-mixins_stripped.ml)))))

(rule (alias test)
  (action
    (diff alphaCaml-demos-mixins_stripped.ml.log.exp
      alphaCaml-demos-mixins_stripped.ml.log)))

(rule (target alphaCaml-demos-poplmark.opp.out)
  (deps alphaCaml-demos-poplmark.mly)
  (action
    (with-outputs-to alphaCaml-demos-poplmark.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-poplmark.opp.exp alphaCaml-demos-poplmark.opp.out)))

(rule
  (targets alphaCaml-demos-poplmark.out alphaCaml-demos-poplmark.automaton
    alphaCaml-demos-poplmark.automaton.resolved
    alphaCaml-demos-poplmark.conflicts alphaCaml-demos-poplmark.timings)
  (deps alphaCaml-demos-poplmark.mly)
  (action
    (with-outputs-to alphaCaml-demos-poplmark.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to alphaCaml-demos-poplmark.timings %{deps})))))

(rule (alias quick)
  (action (diff alphaCaml-demos-poplmark.exp alphaCaml-demos-poplmark.out)))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-poplmark.automaton.exp
      alphaCaml-demos-poplmark.automaton)))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-poplmark.automaton.resolved.exp
      alphaCaml-demos-poplmark.automaton.resolved)))

(rule (alias quick)
  (action
    (diff alphaCaml-demos-poplmark.conflicts.exp
      alphaCaml-demos-poplmark.conflicts)))

(rule (target alphaCaml-demos-poplmark_stripped.mly)
  (deps alphaCaml-demos-poplmark.mly)
  (action
    (with-stderr-to alphaCaml-demos-poplmark_stripped.ignored
      (with-stdout-to alphaCaml-demos-poplmark_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets alphaCaml-demos-poplmark_stripped.log
    alphaCaml-demos-poplmark_stripped.mli
    alphaCaml-demos-poplmark_stripped.ml
    alphaCaml-demos-poplmark_stripped.stacklang
    alphaCaml-demos-poplmark_stripped.timings
    alphaCaml-demos-poplmark_stripped.scount
    alphaCaml-demos-poplmark_stripped.dcount)
  (deps alphaCaml-demos-poplmark_stripped.mly)
  (action
    (with-outputs-to alphaCaml-demos-poplmark_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to alphaCaml-demos-poplmark_stripped.timings %{deps})))))

(alias (name quick) (deps
                      alphaCaml-demos-poplmark_stripped.stacklang))

(rule
  (targets alphaCaml-demos-poplmark_stripped.cmi
    alphaCaml-demos-poplmark_stripped.mli.log)
  (deps alphaCaml-demos-poplmark_stripped.mli)
  (action
    (with-stdout-to alphaCaml-demos-poplmark_stripped.mli.dtimings
      (with-stderr-to alphaCaml-demos-poplmark_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          alphaCaml-demos-poplmark_stripped.mli)))))

(rule
  (targets alphaCaml-demos-poplmark_stripped.cmo
    alphaCaml-demos-poplmark_stripped.ml.log)
  (deps alphaCaml-demos-poplmark_stripped.ml
    alphaCaml-demos-poplmark_stripped.cmi)
  (action
    (with-stdout-to alphaCaml-demos-poplmark_stripped.ml.dtimings
      (with-stderr-to alphaCaml-demos-poplmark_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          alphaCaml-demos-poplmark_stripped.ml)))))

(rule (alias test)
  (action
    (diff alphaCaml-demos-poplmark_stripped.ml.log.exp
      alphaCaml-demos-poplmark_stripped.ml.log)))

(rule (target alphaprolog.opp.out) (deps alphaprolog.mly)
  (action
    (with-outputs-to alphaprolog.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff alphaprolog.opp.exp alphaprolog.opp.out)))

(rule
  (targets alphaprolog.out alphaprolog.automaton
    alphaprolog.automaton.resolved alphaprolog.conflicts alphaprolog.timings)
  (deps alphaprolog.mly)
  (action
    (with-outputs-to alphaprolog.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to alphaprolog.timings %{deps})))))

(rule (alias quick) (action (diff alphaprolog.exp alphaprolog.out)))

(rule (alias quick)
  (action (diff alphaprolog.automaton.exp alphaprolog.automaton)))

(rule (alias quick)
  (action
    (diff alphaprolog.automaton.resolved.exp alphaprolog.automaton.resolved)))

(rule (alias quick)
  (action (diff alphaprolog.conflicts.exp alphaprolog.conflicts)))

(rule (target alphaprolog_stripped.mly) (deps alphaprolog.mly)
  (action
    (with-stderr-to alphaprolog_stripped.ignored
      (with-stdout-to alphaprolog_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets alphaprolog_stripped.log alphaprolog_stripped.mli
    alphaprolog_stripped.ml alphaprolog_stripped.stacklang
    alphaprolog_stripped.timings alphaprolog_stripped.scount
    alphaprolog_stripped.dcount)
  (deps alphaprolog_stripped.mly)
  (action
    (with-outputs-to alphaprolog_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to alphaprolog_stripped.timings %{deps})))))

(alias (name quick) (deps
                      alphaprolog_stripped.stacklang))

(rule (targets alphaprolog_stripped.cmi alphaprolog_stripped.mli.log)
  (deps alphaprolog_stripped.mli)
  (action
    (with-stdout-to alphaprolog_stripped.mli.dtimings
      (with-stderr-to alphaprolog_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c alphaprolog_stripped.mli)))))

(rule (targets alphaprolog_stripped.cmo alphaprolog_stripped.ml.log)
  (deps alphaprolog_stripped.ml alphaprolog_stripped.cmi)
  (action
    (with-stdout-to alphaprolog_stripped.ml.dtimings
      (with-stderr-to alphaprolog_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c alphaprolog_stripped.ml)))))

(rule (alias test)
  (action (diff alphaprolog_stripped.ml.log.exp alphaprolog_stripped.ml.log)))

(rule (target amalthea.opp.out) (deps amalthea.mly)
  (action
    (with-outputs-to amalthea.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff amalthea.opp.exp amalthea.opp.out)))

(rule
  (targets amalthea.out amalthea.automaton amalthea.automaton.resolved
    amalthea.conflicts amalthea.timings)
  (deps amalthea.mly)
  (action
    (with-outputs-to amalthea.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to amalthea.timings %{deps})))))

(rule (alias quick) (action (diff amalthea.exp amalthea.out)))

(rule (alias quick)
  (action (diff amalthea.automaton.exp amalthea.automaton)))

(rule (alias quick)
  (action (diff amalthea.automaton.resolved.exp amalthea.automaton.resolved)))

(rule (alias quick)
  (action (diff amalthea.conflicts.exp amalthea.conflicts)))

(rule (target amalthea_stripped.mly) (deps amalthea.mly)
  (action
    (with-stderr-to amalthea_stripped.ignored
      (with-stdout-to amalthea_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets amalthea_stripped.log amalthea_stripped.mli amalthea_stripped.ml
    amalthea_stripped.stacklang amalthea_stripped.timings
    amalthea_stripped.scount amalthea_stripped.dcount)
  (deps amalthea_stripped.mly)
  (action
    (with-outputs-to amalthea_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to amalthea_stripped.timings %{deps})))))

(alias (name quick) (deps
                      amalthea_stripped.stacklang))

(rule (targets amalthea_stripped.cmi amalthea_stripped.mli.log)
  (deps amalthea_stripped.mli)
  (action
    (with-stdout-to amalthea_stripped.mli.dtimings
      (with-stderr-to amalthea_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c amalthea_stripped.mli)))))

(rule (targets amalthea_stripped.cmo amalthea_stripped.ml.log)
  (deps amalthea_stripped.ml amalthea_stripped.cmi)
  (action
    (with-stdout-to amalthea_stripped.ml.dtimings
      (with-stderr-to amalthea_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c amalthea_stripped.ml)))))

(rule (alias test)
  (action (diff amalthea_stripped.ml.log.exp amalthea_stripped.ml.log)))

(rule (target andromeda.opp.out) (deps andromeda.mly)
  (action
    (with-outputs-to andromeda.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff andromeda.opp.exp andromeda.opp.out)))

(rule
  (targets andromeda.out andromeda.automaton andromeda.automaton.resolved
    andromeda.conflicts andromeda.timings)
  (deps andromeda.mly)
  (action
    (with-outputs-to andromeda.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to andromeda.timings %{deps})))))

(rule (alias quick) (action (diff andromeda.exp andromeda.out)))

(rule (alias quick)
  (action (diff andromeda.automaton.exp andromeda.automaton)))

(rule (alias quick)
  (action
    (diff andromeda.automaton.resolved.exp andromeda.automaton.resolved)))

(rule (alias quick)
  (action (diff andromeda.conflicts.exp andromeda.conflicts)))

(rule (target andromeda_stripped.mly) (deps andromeda.mly)
  (action
    (with-stderr-to andromeda_stripped.ignored
      (with-stdout-to andromeda_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets andromeda_stripped.log andromeda_stripped.mli
    andromeda_stripped.ml andromeda_stripped.stacklang
    andromeda_stripped.timings andromeda_stripped.scount
    andromeda_stripped.dcount)
  (deps andromeda_stripped.mly)
  (action
    (with-outputs-to andromeda_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to andromeda_stripped.timings %{deps})))))

(alias (name quick) (deps
                      andromeda_stripped.stacklang))

(rule (targets andromeda_stripped.cmi andromeda_stripped.mli.log)
  (deps andromeda_stripped.mli)
  (action
    (with-stdout-to andromeda_stripped.mli.dtimings
      (with-stderr-to andromeda_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c andromeda_stripped.mli)))))

(rule (targets andromeda_stripped.cmo andromeda_stripped.ml.log)
  (deps andromeda_stripped.ml andromeda_stripped.cmi)
  (action
    (with-stdout-to andromeda_stripped.ml.dtimings
      (with-stderr-to andromeda_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c andromeda_stripped.ml)))))

(rule (alias test)
  (action (diff andromeda_stripped.ml.log.exp andromeda_stripped.ml.log)))

(rule (target anonymous.opp.out) (deps anonymous.mly)
  (action
    (with-outputs-to anonymous.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff anonymous.opp.exp anonymous.opp.out)))

(rule
  (targets anonymous.out anonymous.automaton anonymous.automaton.resolved
    anonymous.conflicts anonymous.timings)
  (deps anonymous.mly)
  (action
    (with-outputs-to anonymous.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to anonymous.timings %{deps})))))

(rule (alias quick) (action (diff anonymous.exp anonymous.out)))

(rule (alias quick)
  (action (diff anonymous.automaton.exp anonymous.automaton)))

(rule (alias quick)
  (action
    (diff anonymous.automaton.resolved.exp anonymous.automaton.resolved)))

(rule (alias quick)
  (action (diff anonymous.conflicts.exp anonymous.conflicts)))

(rule (target anonymous_stripped.mly) (deps anonymous.mly)
  (action
    (with-stderr-to anonymous_stripped.ignored
      (with-stdout-to anonymous_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets anonymous_stripped.log anonymous_stripped.mli
    anonymous_stripped.ml anonymous_stripped.stacklang
    anonymous_stripped.timings anonymous_stripped.scount
    anonymous_stripped.dcount)
  (deps anonymous_stripped.mly)
  (action
    (with-outputs-to anonymous_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to anonymous_stripped.timings %{deps})))))

(alias (name quick) (deps
                      anonymous_stripped.stacklang))

(rule (targets anonymous_stripped.cmi anonymous_stripped.mli.log)
  (deps anonymous_stripped.mli)
  (action
    (with-stdout-to anonymous_stripped.mli.dtimings
      (with-stderr-to anonymous_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c anonymous_stripped.mli)))))

(rule (targets anonymous_stripped.cmo anonymous_stripped.ml.log)
  (deps anonymous_stripped.ml anonymous_stripped.cmi)
  (action
    (with-stdout-to anonymous_stripped.ml.dtimings
      (with-stderr-to anonymous_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c anonymous_stripped.ml)))))

(rule (alias test)
  (action (diff anonymous_stripped.ml.log.exp anonymous_stripped.ml.log)))

(rule (target anonymous-nested.opp.out) (deps anonymous-nested.mly)
  (action
    (with-outputs-to anonymous-nested.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff anonymous-nested.opp.exp anonymous-nested.opp.out)))

(rule
  (targets anonymous-nested.out anonymous-nested.automaton
    anonymous-nested.automaton.resolved anonymous-nested.conflicts
    anonymous-nested.timings)
  (deps anonymous-nested.mly)
  (action
    (with-outputs-to anonymous-nested.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to anonymous-nested.timings %{deps})))))

(rule (alias quick)
  (action (diff anonymous-nested.exp anonymous-nested.out)))

(rule (alias quick)
  (action (diff anonymous-nested.automaton.exp anonymous-nested.automaton)))

(rule (alias quick)
  (action
    (diff anonymous-nested.automaton.resolved.exp
      anonymous-nested.automaton.resolved)))

(rule (alias quick)
  (action (diff anonymous-nested.conflicts.exp anonymous-nested.conflicts)))

(rule (target anonymous-nested_stripped.mly) (deps anonymous-nested.mly)
  (action
    (with-stderr-to anonymous-nested_stripped.ignored
      (with-stdout-to anonymous-nested_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets anonymous-nested_stripped.log anonymous-nested_stripped.mli
    anonymous-nested_stripped.ml anonymous-nested_stripped.stacklang
    anonymous-nested_stripped.timings anonymous-nested_stripped.scount
    anonymous-nested_stripped.dcount)
  (deps anonymous-nested_stripped.mly)
  (action
    (with-outputs-to anonymous-nested_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to anonymous-nested_stripped.timings %{deps})))))

(alias (name quick) (deps
                      anonymous-nested_stripped.stacklang))

(rule
  (targets anonymous-nested_stripped.cmi anonymous-nested_stripped.mli.log)
  (deps anonymous-nested_stripped.mli)
  (action
    (with-stdout-to anonymous-nested_stripped.mli.dtimings
      (with-stderr-to anonymous-nested_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c anonymous-nested_stripped.mli)))))

(rule
  (targets anonymous-nested_stripped.cmo anonymous-nested_stripped.ml.log)
  (deps anonymous-nested_stripped.ml anonymous-nested_stripped.cmi)
  (action
    (with-stdout-to anonymous-nested_stripped.ml.dtimings
      (with-stderr-to anonymous-nested_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c anonymous-nested_stripped.ml)))))

(rule (alias test)
  (action
    (diff anonymous-nested_stripped.ml.log.exp
      anonymous-nested_stripped.ml.log)))

(rule (target anonymous-param.opp.out) (deps anonymous-param.mly)
  (action
    (with-outputs-to anonymous-param.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff anonymous-param.opp.exp anonymous-param.opp.out)))

(rule
  (targets anonymous-param.out anonymous-param.automaton
    anonymous-param.automaton.resolved anonymous-param.conflicts
    anonymous-param.timings)
  (deps anonymous-param.mly)
  (action
    (with-outputs-to anonymous-param.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to anonymous-param.timings %{deps})))))

(rule (alias quick) (action (diff anonymous-param.exp anonymous-param.out)))

(rule (alias quick)
  (action (diff anonymous-param.automaton.exp anonymous-param.automaton)))

(rule (alias quick)
  (action
    (diff anonymous-param.automaton.resolved.exp
      anonymous-param.automaton.resolved)))

(rule (alias quick)
  (action (diff anonymous-param.conflicts.exp anonymous-param.conflicts)))

(rule (target anonymous-param_stripped.mly) (deps anonymous-param.mly)
  (action
    (with-stderr-to anonymous-param_stripped.ignored
      (with-stdout-to anonymous-param_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets anonymous-param_stripped.log anonymous-param_stripped.mli
    anonymous-param_stripped.ml anonymous-param_stripped.stacklang
    anonymous-param_stripped.timings anonymous-param_stripped.scount
    anonymous-param_stripped.dcount)
  (deps anonymous-param_stripped.mly)
  (action
    (with-outputs-to anonymous-param_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to anonymous-param_stripped.timings %{deps})))))

(alias (name quick) (deps
                      anonymous-param_stripped.stacklang))

(rule (targets anonymous-param_stripped.cmi anonymous-param_stripped.mli.log)
  (deps anonymous-param_stripped.mli)
  (action
    (with-stdout-to anonymous-param_stripped.mli.dtimings
      (with-stderr-to anonymous-param_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c anonymous-param_stripped.mli)))))

(rule (targets anonymous-param_stripped.cmo anonymous-param_stripped.ml.log)
  (deps anonymous-param_stripped.ml anonymous-param_stripped.cmi)
  (action
    (with-stdout-to anonymous-param_stripped.ml.dtimings
      (with-stderr-to anonymous-param_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c anonymous-param_stripped.ml)))))

(rule (alias test)
  (action
    (diff anonymous-param_stripped.ml.log.exp
      anonymous-param_stripped.ml.log)))

(rule (target anonymous-param-redundant.opp.out)
  (deps anonymous-param-redundant.mly)
  (action
    (with-outputs-to anonymous-param-redundant.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff anonymous-param-redundant.opp.exp
      anonymous-param-redundant.opp.out)))

(rule
  (targets anonymous-param-redundant.out anonymous-param-redundant.automaton
    anonymous-param-redundant.automaton.resolved
    anonymous-param-redundant.conflicts anonymous-param-redundant.timings)
  (deps anonymous-param-redundant.mly)
  (action
    (with-outputs-to anonymous-param-redundant.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to anonymous-param-redundant.timings %{deps})))))

(rule (alias quick)
  (action (diff anonymous-param-redundant.exp anonymous-param-redundant.out)))

(rule (alias quick)
  (action
    (diff anonymous-param-redundant.automaton.exp
      anonymous-param-redundant.automaton)))

(rule (alias quick)
  (action
    (diff anonymous-param-redundant.automaton.resolved.exp
      anonymous-param-redundant.automaton.resolved)))

(rule (alias quick)
  (action
    (diff anonymous-param-redundant.conflicts.exp
      anonymous-param-redundant.conflicts)))

(rule (target anonymous-param-redundant_stripped.mly)
  (deps anonymous-param-redundant.mly)
  (action
    (with-stderr-to anonymous-param-redundant_stripped.ignored
      (with-stdout-to anonymous-param-redundant_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets anonymous-param-redundant_stripped.log
    anonymous-param-redundant_stripped.mli
    anonymous-param-redundant_stripped.ml
    anonymous-param-redundant_stripped.stacklang
    anonymous-param-redundant_stripped.timings
    anonymous-param-redundant_stripped.scount
    anonymous-param-redundant_stripped.dcount)
  (deps anonymous-param-redundant_stripped.mly)
  (action
    (with-outputs-to anonymous-param-redundant_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to anonymous-param-redundant_stripped.timings %{deps})))))

(alias (name quick) (deps
                      anonymous-param-redundant_stripped.stacklang))

(rule
  (targets anonymous-param-redundant_stripped.cmi
    anonymous-param-redundant_stripped.mli.log)
  (deps anonymous-param-redundant_stripped.mli)
  (action
    (with-stdout-to anonymous-param-redundant_stripped.mli.dtimings
      (with-stderr-to anonymous-param-redundant_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          anonymous-param-redundant_stripped.mli)))))

(rule
  (targets anonymous-param-redundant_stripped.cmo
    anonymous-param-redundant_stripped.ml.log)
  (deps anonymous-param-redundant_stripped.ml
    anonymous-param-redundant_stripped.cmi)
  (action
    (with-stdout-to anonymous-param-redundant_stripped.ml.dtimings
      (with-stderr-to anonymous-param-redundant_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          anonymous-param-redundant_stripped.ml)))))

(rule (alias test)
  (action
    (diff anonymous-param-redundant_stripped.ml.log.exp
      anonymous-param-redundant_stripped.ml.log)))

(rule (target apron.20160125-apron_parser.opp.out)
  (deps apron.20160125-apron_parser.mly)
  (action
    (with-outputs-to apron.20160125-apron_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff apron.20160125-apron_parser.opp.exp
      apron.20160125-apron_parser.opp.out)))

(rule
  (targets apron.20160125-apron_parser.out
    apron.20160125-apron_parser.automaton
    apron.20160125-apron_parser.automaton.resolved
    apron.20160125-apron_parser.conflicts
    apron.20160125-apron_parser.timings)
  (deps apron.20160125-apron_parser.mly)
  (action
    (with-outputs-to apron.20160125-apron_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to apron.20160125-apron_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff apron.20160125-apron_parser.exp apron.20160125-apron_parser.out)))

(rule (alias quick)
  (action
    (diff apron.20160125-apron_parser.automaton.exp
      apron.20160125-apron_parser.automaton)))

(rule (alias quick)
  (action
    (diff apron.20160125-apron_parser.automaton.resolved.exp
      apron.20160125-apron_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff apron.20160125-apron_parser.conflicts.exp
      apron.20160125-apron_parser.conflicts)))

(rule (target apron_20160125-apron_parser_stripped.mly)
  (deps apron.20160125-apron_parser.mly)
  (action
    (with-stderr-to apron_20160125-apron_parser_stripped.ignored
      (with-stdout-to apron_20160125-apron_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets apron_20160125-apron_parser_stripped.log
    apron_20160125-apron_parser_stripped.mli
    apron_20160125-apron_parser_stripped.ml
    apron_20160125-apron_parser_stripped.stacklang
    apron_20160125-apron_parser_stripped.timings
    apron_20160125-apron_parser_stripped.scount
    apron_20160125-apron_parser_stripped.dcount)
  (deps apron_20160125-apron_parser_stripped.mly)
  (action
    (with-outputs-to apron_20160125-apron_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to apron_20160125-apron_parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      apron_20160125-apron_parser_stripped.stacklang))

(rule
  (targets apron_20160125-apron_parser_stripped.cmi
    apron_20160125-apron_parser_stripped.mli.log)
  (deps apron_20160125-apron_parser_stripped.mli)
  (action
    (with-stdout-to apron_20160125-apron_parser_stripped.mli.dtimings
      (with-stderr-to apron_20160125-apron_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          apron_20160125-apron_parser_stripped.mli)))))

(rule
  (targets apron_20160125-apron_parser_stripped.cmo
    apron_20160125-apron_parser_stripped.ml.log)
  (deps apron_20160125-apron_parser_stripped.ml
    apron_20160125-apron_parser_stripped.cmi)
  (action
    (with-stdout-to apron_20160125-apron_parser_stripped.ml.dtimings
      (with-stderr-to apron_20160125-apron_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          apron_20160125-apron_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff apron_20160125-apron_parser_stripped.ml.log.exp
      apron_20160125-apron_parser_stripped.ml.log)))

(rule (target asl_parser.opp.out) (deps asl_parser.mly)
  (action
    (with-outputs-to asl_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff asl_parser.opp.exp asl_parser.opp.out)))

(rule
  (targets asl_parser.out asl_parser.automaton asl_parser.automaton.resolved
    asl_parser.conflicts asl_parser.timings)
  (deps asl_parser.mly)
  (action
    (with-outputs-to asl_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to asl_parser.timings %{deps})))))

(rule (alias quick) (action (diff asl_parser.exp asl_parser.out)))

(rule (alias quick)
  (action (diff asl_parser.automaton.exp asl_parser.automaton)))

(rule (alias quick)
  (action
    (diff asl_parser.automaton.resolved.exp asl_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff asl_parser.conflicts.exp asl_parser.conflicts)))

(rule (target asl_parser_stripped.mly) (deps asl_parser.mly)
  (action
    (with-stderr-to asl_parser_stripped.ignored
      (with-stdout-to asl_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets asl_parser_stripped.log asl_parser_stripped.mli
    asl_parser_stripped.ml asl_parser_stripped.stacklang
    asl_parser_stripped.timings asl_parser_stripped.scount
    asl_parser_stripped.dcount)
  (deps asl_parser_stripped.mly)
  (action
    (with-outputs-to asl_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to asl_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      asl_parser_stripped.stacklang))

(rule (targets asl_parser_stripped.cmi asl_parser_stripped.mli.log)
  (deps asl_parser_stripped.mli)
  (action
    (with-stdout-to asl_parser_stripped.mli.dtimings
      (with-stderr-to asl_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c asl_parser_stripped.mli)))))

(rule (targets asl_parser_stripped.cmo asl_parser_stripped.ml.log)
  (deps asl_parser_stripped.ml asl_parser_stripped.cmi)
  (action
    (with-stdout-to asl_parser_stripped.ml.dtimings
      (with-stderr-to asl_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c asl_parser_stripped.ml)))))

(rule (alias test)
  (action (diff asl_parser_stripped.ml.log.exp asl_parser_stripped.ml.log)))

(rule (target astrada_css.opp.out) (deps astrada_css.mly)
  (action
    (with-outputs-to astrada_css.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:astrada_css.flags}
          %{deps})))))

(rule (alias quick) (action (diff astrada_css.opp.exp astrada_css.opp.out)))

(rule
  (targets astrada_css.out astrada_css.automaton
    astrada_css.automaton.resolved astrada_css.conflicts astrada_css.timings)
  (deps astrada_css.mly)
  (action
    (with-outputs-to astrada_css.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to astrada_css.timings %{read-lines:astrada_css.flags}
          %{deps})))))

(rule (alias quick) (action (diff astrada_css.exp astrada_css.out)))

(rule (alias quick)
  (action (diff astrada_css.automaton.exp astrada_css.automaton)))

(rule (alias quick)
  (action
    (diff astrada_css.automaton.resolved.exp astrada_css.automaton.resolved)))

(rule (alias quick)
  (action (diff astrada_css.conflicts.exp astrada_css.conflicts)))

(rule (target astrada_css_stripped.mly) (deps astrada_css.mly)
  (action
    (with-stderr-to astrada_css_stripped.ignored
      (with-stdout-to astrada_css_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{read-lines:astrada_css.flags}
            %{deps}))))))

(rule
  (targets astrada_css_stripped.log astrada_css_stripped.mli
    astrada_css_stripped.ml astrada_css_stripped.stacklang
    astrada_css_stripped.timings astrada_css_stripped.scount
    astrada_css_stripped.dcount)
  (deps astrada_css_stripped.mly)
  (action
    (with-outputs-to astrada_css_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to astrada_css_stripped.timings
          %{read-lines:astrada_css.flags} %{deps})))))

(alias (name quick) (deps
                      astrada_css_stripped.stacklang))

(rule (targets astrada_css_stripped.cmi astrada_css_stripped.mli.log)
  (deps astrada_css_stripped.mli)
  (action
    (with-stdout-to astrada_css_stripped.mli.dtimings
      (with-stderr-to astrada_css_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c astrada_css_stripped.mli)))))

(rule (targets astrada_css_stripped.cmo astrada_css_stripped.ml.log)
  (deps astrada_css_stripped.ml astrada_css_stripped.cmi)
  (action
    (with-stdout-to astrada_css_stripped.ml.dtimings
      (with-stderr-to astrada_css_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c astrada_css_stripped.ml)))))

(rule (alias test)
  (action (diff astrada_css_stripped.ml.log.exp astrada_css_stripped.ml.log)))

(rule (target atd_parser.opp.out) (deps atd_parser.mly)
  (action
    (with-outputs-to atd_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff atd_parser.opp.exp atd_parser.opp.out)))

(rule
  (targets atd_parser.out atd_parser.automaton atd_parser.automaton.resolved
    atd_parser.conflicts atd_parser.timings)
  (deps atd_parser.mly)
  (action
    (with-outputs-to atd_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to atd_parser.timings %{deps})))))

(rule (alias quick) (action (diff atd_parser.exp atd_parser.out)))

(rule (alias quick)
  (action (diff atd_parser.automaton.exp atd_parser.automaton)))

(rule (alias quick)
  (action
    (diff atd_parser.automaton.resolved.exp atd_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff atd_parser.conflicts.exp atd_parser.conflicts)))

(rule (target atd_parser_stripped.mly) (deps atd_parser.mly)
  (action
    (with-stderr-to atd_parser_stripped.ignored
      (with-stdout-to atd_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets atd_parser_stripped.log atd_parser_stripped.mli
    atd_parser_stripped.ml atd_parser_stripped.stacklang
    atd_parser_stripped.timings atd_parser_stripped.scount
    atd_parser_stripped.dcount)
  (deps atd_parser_stripped.mly)
  (action
    (with-outputs-to atd_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to atd_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      atd_parser_stripped.stacklang))

(rule (targets atd_parser_stripped.cmi atd_parser_stripped.mli.log)
  (deps atd_parser_stripped.mli)
  (action
    (with-stdout-to atd_parser_stripped.mli.dtimings
      (with-stderr-to atd_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c atd_parser_stripped.mli)))))

(rule (targets atd_parser_stripped.cmo atd_parser_stripped.ml.log)
  (deps atd_parser_stripped.ml atd_parser_stripped.cmi)
  (action
    (with-stdout-to atd_parser_stripped.ml.dtimings
      (with-stderr-to atd_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c atd_parser_stripped.ml)))))

(rule (alias test)
  (action (diff atd_parser_stripped.ml.log.exp atd_parser_stripped.ml.log)))

(rule (target attapl-deptypes.opp.out) (deps attapl-deptypes.mly)
  (action
    (with-outputs-to attapl-deptypes.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff attapl-deptypes.opp.exp attapl-deptypes.opp.out)))

(rule
  (targets attapl-deptypes.out attapl-deptypes.automaton
    attapl-deptypes.automaton.resolved attapl-deptypes.conflicts
    attapl-deptypes.timings)
  (deps attapl-deptypes.mly)
  (action
    (with-outputs-to attapl-deptypes.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to attapl-deptypes.timings %{deps})))))

(rule (alias quick) (action (diff attapl-deptypes.exp attapl-deptypes.out)))

(rule (alias quick)
  (action (diff attapl-deptypes.automaton.exp attapl-deptypes.automaton)))

(rule (alias quick)
  (action
    (diff attapl-deptypes.automaton.resolved.exp
      attapl-deptypes.automaton.resolved)))

(rule (alias quick)
  (action (diff attapl-deptypes.conflicts.exp attapl-deptypes.conflicts)))

(rule (target attapl-deptypes_stripped.mly) (deps attapl-deptypes.mly)
  (action
    (with-stderr-to attapl-deptypes_stripped.ignored
      (with-stdout-to attapl-deptypes_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets attapl-deptypes_stripped.log attapl-deptypes_stripped.mli
    attapl-deptypes_stripped.ml attapl-deptypes_stripped.stacklang
    attapl-deptypes_stripped.timings attapl-deptypes_stripped.scount
    attapl-deptypes_stripped.dcount)
  (deps attapl-deptypes_stripped.mly)
  (action
    (with-outputs-to attapl-deptypes_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to attapl-deptypes_stripped.timings %{deps})))))

(alias (name quick) (deps
                      attapl-deptypes_stripped.stacklang))

(rule (targets attapl-deptypes_stripped.cmi attapl-deptypes_stripped.mli.log)
  (deps attapl-deptypes_stripped.mli)
  (action
    (with-stdout-to attapl-deptypes_stripped.mli.dtimings
      (with-stderr-to attapl-deptypes_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c attapl-deptypes_stripped.mli)))))

(rule (targets attapl-deptypes_stripped.cmo attapl-deptypes_stripped.ml.log)
  (deps attapl-deptypes_stripped.ml attapl-deptypes_stripped.cmi)
  (action
    (with-stdout-to attapl-deptypes_stripped.ml.dtimings
      (with-stderr-to attapl-deptypes_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c attapl-deptypes_stripped.ml)))))

(rule (alias test)
  (action
    (diff attapl-deptypes_stripped.ml.log.exp
      attapl-deptypes_stripped.ml.log)))

(rule (target attapl-mini.opp.out) (deps attapl-mini.mly)
  (action
    (with-outputs-to attapl-mini.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff attapl-mini.opp.exp attapl-mini.opp.out)))

(rule
  (targets attapl-mini.out attapl-mini.automaton
    attapl-mini.automaton.resolved attapl-mini.conflicts attapl-mini.timings)
  (deps attapl-mini.mly)
  (action
    (with-outputs-to attapl-mini.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to attapl-mini.timings %{deps})))))

(rule (alias quick) (action (diff attapl-mini.exp attapl-mini.out)))

(rule (alias quick)
  (action (diff attapl-mini.automaton.exp attapl-mini.automaton)))

(rule (alias quick)
  (action
    (diff attapl-mini.automaton.resolved.exp attapl-mini.automaton.resolved)))

(rule (alias quick)
  (action (diff attapl-mini.conflicts.exp attapl-mini.conflicts)))

(rule (target attapl-mini_stripped.mly) (deps attapl-mini.mly)
  (action
    (with-stderr-to attapl-mini_stripped.ignored
      (with-stdout-to attapl-mini_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets attapl-mini_stripped.log attapl-mini_stripped.mli
    attapl-mini_stripped.ml attapl-mini_stripped.stacklang
    attapl-mini_stripped.timings attapl-mini_stripped.scount
    attapl-mini_stripped.dcount)
  (deps attapl-mini_stripped.mly)
  (action
    (with-outputs-to attapl-mini_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to attapl-mini_stripped.timings %{deps})))))

(alias (name quick) (deps
                      attapl-mini_stripped.stacklang))

(rule (targets attapl-mini_stripped.cmi attapl-mini_stripped.mli.log)
  (deps attapl-mini_stripped.mli)
  (action
    (with-stdout-to attapl-mini_stripped.mli.dtimings
      (with-stderr-to attapl-mini_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c attapl-mini_stripped.mli)))))

(rule (targets attapl-mini_stripped.cmo attapl-mini_stripped.ml.log)
  (deps attapl-mini_stripped.ml attapl-mini_stripped.cmi)
  (action
    (with-stdout-to attapl-mini_stripped.ml.dtimings
      (with-stderr-to attapl-mini_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c attapl-mini_stripped.ml)))))

(rule (alias test)
  (action (diff attapl-mini_stripped.ml.log.exp attapl-mini_stripped.ml.log)))

(rule (target attributes.opp.out) (deps attributes.mly)
  (action
    (with-outputs-to attributes.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff attributes.opp.exp attributes.opp.out)))

(rule
  (targets attributes.out attributes.automaton attributes.automaton.resolved
    attributes.conflicts attributes.timings)
  (deps attributes.mly)
  (action
    (with-outputs-to attributes.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to attributes.timings %{deps})))))

(rule (alias quick) (action (diff attributes.exp attributes.out)))

(rule (alias quick)
  (action (diff attributes.automaton.exp attributes.automaton)))

(rule (alias quick)
  (action
    (diff attributes.automaton.resolved.exp attributes.automaton.resolved)))

(rule (alias quick)
  (action (diff attributes.conflicts.exp attributes.conflicts)))

(rule (target attributes_stripped.mly) (deps attributes.mly)
  (action
    (with-stderr-to attributes_stripped.ignored
      (with-stdout-to attributes_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets attributes_stripped.log attributes_stripped.mli
    attributes_stripped.ml attributes_stripped.stacklang
    attributes_stripped.timings attributes_stripped.scount
    attributes_stripped.dcount)
  (deps attributes_stripped.mly)
  (action
    (with-outputs-to attributes_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to attributes_stripped.timings %{deps})))))

(alias (name quick) (deps
                      attributes_stripped.stacklang))

(rule (targets attributes_stripped.cmi attributes_stripped.mli.log)
  (deps attributes_stripped.mli)
  (action
    (with-stdout-to attributes_stripped.mli.dtimings
      (with-stderr-to attributes_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c attributes_stripped.mli)))))

(rule (targets attributes_stripped.cmo attributes_stripped.ml.log)
  (deps attributes_stripped.ml attributes_stripped.cmi)
  (action
    (with-stdout-to attributes_stripped.ml.dtimings
      (with-stderr-to attributes_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c attributes_stripped.ml)))))

(rule (alias test)
  (action (diff attributes_stripped.ml.log.exp attributes_stripped.ml.log)))

(rule (target attributes-expansion.opp.out) (deps attributes-expansion.mly)
  (action
    (with-outputs-to attributes-expansion.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff attributes-expansion.opp.exp attributes-expansion.opp.out)))

(rule
  (targets attributes-expansion.out attributes-expansion.automaton
    attributes-expansion.automaton.resolved attributes-expansion.conflicts
    attributes-expansion.timings)
  (deps attributes-expansion.mly)
  (action
    (with-outputs-to attributes-expansion.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to attributes-expansion.timings %{deps})))))

(rule (alias quick)
  (action (diff attributes-expansion.exp attributes-expansion.out)))

(rule (alias quick)
  (action
    (diff attributes-expansion.automaton.exp attributes-expansion.automaton)))

(rule (alias quick)
  (action
    (diff attributes-expansion.automaton.resolved.exp
      attributes-expansion.automaton.resolved)))

(rule (alias quick)
  (action
    (diff attributes-expansion.conflicts.exp attributes-expansion.conflicts)))

(rule (target attributes-expansion_stripped.mly)
  (deps attributes-expansion.mly)
  (action
    (with-stderr-to attributes-expansion_stripped.ignored
      (with-stdout-to attributes-expansion_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets attributes-expansion_stripped.log
    attributes-expansion_stripped.mli attributes-expansion_stripped.ml
    attributes-expansion_stripped.stacklang
    attributes-expansion_stripped.timings
    attributes-expansion_stripped.scount
    attributes-expansion_stripped.dcount)
  (deps attributes-expansion_stripped.mly)
  (action
    (with-outputs-to attributes-expansion_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to attributes-expansion_stripped.timings %{deps})))))

(alias (name quick) (deps
                      attributes-expansion_stripped.stacklang))

(rule
  (targets attributes-expansion_stripped.cmi
    attributes-expansion_stripped.mli.log)
  (deps attributes-expansion_stripped.mli)
  (action
    (with-stdout-to attributes-expansion_stripped.mli.dtimings
      (with-stderr-to attributes-expansion_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          attributes-expansion_stripped.mli)))))

(rule
  (targets attributes-expansion_stripped.cmo
    attributes-expansion_stripped.ml.log)
  (deps attributes-expansion_stripped.ml attributes-expansion_stripped.cmi)
  (action
    (with-stdout-to attributes-expansion_stripped.ml.dtimings
      (with-stderr-to attributes-expansion_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          attributes-expansion_stripped.ml)))))

(rule (alias test)
  (action
    (diff attributes-expansion_stripped.ml.log.exp
      attributes-expansion_stripped.ml.log)))

(rule (target bamboo.0.0.03-parser.opp.out) (deps bamboo.0.0.03-parser.mly)
  (action
    (with-outputs-to bamboo.0.0.03-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff bamboo.0.0.03-parser.opp.exp bamboo.0.0.03-parser.opp.out)))

(rule
  (targets bamboo.0.0.03-parser.out bamboo.0.0.03-parser.automaton
    bamboo.0.0.03-parser.automaton.resolved bamboo.0.0.03-parser.conflicts
    bamboo.0.0.03-parser.timings)
  (deps bamboo.0.0.03-parser.mly)
  (action
    (with-outputs-to bamboo.0.0.03-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to bamboo.0.0.03-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff bamboo.0.0.03-parser.exp bamboo.0.0.03-parser.out)))

(rule (alias quick)
  (action
    (diff bamboo.0.0.03-parser.automaton.exp bamboo.0.0.03-parser.automaton)))

(rule (alias quick)
  (action
    (diff bamboo.0.0.03-parser.automaton.resolved.exp
      bamboo.0.0.03-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff bamboo.0.0.03-parser.conflicts.exp bamboo.0.0.03-parser.conflicts)))

(rule (target bamboo_0_0_03-parser_stripped.mly)
  (deps bamboo.0.0.03-parser.mly)
  (action
    (with-stderr-to bamboo_0_0_03-parser_stripped.ignored
      (with-stdout-to bamboo_0_0_03-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets bamboo_0_0_03-parser_stripped.log
    bamboo_0_0_03-parser_stripped.mli bamboo_0_0_03-parser_stripped.ml
    bamboo_0_0_03-parser_stripped.stacklang
    bamboo_0_0_03-parser_stripped.timings
    bamboo_0_0_03-parser_stripped.scount
    bamboo_0_0_03-parser_stripped.dcount)
  (deps bamboo_0_0_03-parser_stripped.mly)
  (action
    (with-outputs-to bamboo_0_0_03-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to bamboo_0_0_03-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      bamboo_0_0_03-parser_stripped.stacklang))

(rule
  (targets bamboo_0_0_03-parser_stripped.cmi
    bamboo_0_0_03-parser_stripped.mli.log)
  (deps bamboo_0_0_03-parser_stripped.mli)
  (action
    (with-stdout-to bamboo_0_0_03-parser_stripped.mli.dtimings
      (with-stderr-to bamboo_0_0_03-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          bamboo_0_0_03-parser_stripped.mli)))))

(rule
  (targets bamboo_0_0_03-parser_stripped.cmo
    bamboo_0_0_03-parser_stripped.ml.log)
  (deps bamboo_0_0_03-parser_stripped.ml bamboo_0_0_03-parser_stripped.cmi)
  (action
    (with-stdout-to bamboo_0_0_03-parser_stripped.ml.dtimings
      (with-stderr-to bamboo_0_0_03-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          bamboo_0_0_03-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff bamboo_0_0_03-parser_stripped.ml.log.exp
      bamboo_0_0_03-parser_stripped.ml.log)))

(rule (target bare-bones.opp.out) (deps bare-bones.mly)
  (action
    (with-outputs-to bare-bones.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff bare-bones.opp.exp bare-bones.opp.out)))

(rule
  (targets bare-bones.out bare-bones.automaton bare-bones.automaton.resolved
    bare-bones.conflicts bare-bones.timings)
  (deps bare-bones.mly)
  (action
    (with-outputs-to bare-bones.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to bare-bones.timings %{deps})))))

(rule (alias quick) (action (diff bare-bones.exp bare-bones.out)))

(rule (alias quick)
  (action (diff bare-bones.automaton.exp bare-bones.automaton)))

(rule (alias quick)
  (action
    (diff bare-bones.automaton.resolved.exp bare-bones.automaton.resolved)))

(rule (alias quick)
  (action (diff bare-bones.conflicts.exp bare-bones.conflicts)))

(rule (target bare-bones_stripped.mly) (deps bare-bones.mly)
  (action
    (with-stderr-to bare-bones_stripped.ignored
      (with-stdout-to bare-bones_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets bare-bones_stripped.log bare-bones_stripped.mli
    bare-bones_stripped.ml bare-bones_stripped.stacklang
    bare-bones_stripped.timings bare-bones_stripped.scount
    bare-bones_stripped.dcount)
  (deps bare-bones_stripped.mly)
  (action
    (with-outputs-to bare-bones_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to bare-bones_stripped.timings %{deps})))))

(alias (name quick) (deps
                      bare-bones_stripped.stacklang))

(rule (targets bare-bones_stripped.cmi bare-bones_stripped.mli.log)
  (deps bare-bones_stripped.mli)
  (action
    (with-stdout-to bare-bones_stripped.mli.dtimings
      (with-stderr-to bare-bones_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c bare-bones_stripped.mli)))))

(rule (targets bare-bones_stripped.cmo bare-bones_stripped.ml.log)
  (deps bare-bones_stripped.ml bare-bones_stripped.cmi)
  (action
    (with-stdout-to bare-bones_stripped.ml.dtimings
      (with-stderr-to bare-bones_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c bare-bones_stripped.ml)))))

(rule (alias test)
  (action (diff bare-bones_stripped.ml.log.exp bare-bones_stripped.ml.log)))

(rule (target basile.opp.out) (deps basile.mly)
  (action
    (with-outputs-to basile.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff basile.opp.exp basile.opp.out)))

(rule
  (targets basile.out basile.automaton basile.automaton.resolved
    basile.conflicts basile.timings)
  (deps basile.mly)
  (action
    (with-outputs-to basile.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to basile.timings %{deps})))))

(rule (alias quick) (action (diff basile.exp basile.out)))

(rule (alias quick) (action (diff basile.automaton.exp basile.automaton)))

(rule (alias quick)
  (action (diff basile.automaton.resolved.exp basile.automaton.resolved)))

(rule (alias quick) (action (diff basile.conflicts.exp basile.conflicts)))

(rule (target basile_stripped.mly) (deps basile.mly)
  (action
    (with-stderr-to basile_stripped.ignored
      (with-stdout-to basile_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets basile_stripped.log basile_stripped.mli basile_stripped.ml
    basile_stripped.stacklang basile_stripped.timings basile_stripped.scount
    basile_stripped.dcount)
  (deps basile_stripped.mly)
  (action
    (with-outputs-to basile_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to basile_stripped.timings %{deps})))))

(alias (name quick) (deps
                      basile_stripped.stacklang))

(rule (targets basile_stripped.cmi basile_stripped.mli.log)
  (deps basile_stripped.mli)
  (action
    (with-stdout-to basile_stripped.mli.dtimings
      (with-stderr-to basile_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c basile_stripped.mli)))))

(rule (targets basile_stripped.cmo basile_stripped.ml.log)
  (deps basile_stripped.ml basile_stripped.cmi)
  (action
    (with-stdout-to basile_stripped.ml.dtimings
      (with-stderr-to basile_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c basile_stripped.ml)))))

(rule (alias test)
  (action (diff basile_stripped.ml.log.exp basile_stripped.ml.log)))

(rule (target batsh.0.0.6-parser_yacc.opp.out)
  (deps batsh.0.0.6-parser_yacc.mly)
  (action
    (with-outputs-to batsh.0.0.6-parser_yacc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff batsh.0.0.6-parser_yacc.opp.exp batsh.0.0.6-parser_yacc.opp.out)))

(rule
  (targets batsh.0.0.6-parser_yacc.out batsh.0.0.6-parser_yacc.automaton
    batsh.0.0.6-parser_yacc.automaton.resolved
    batsh.0.0.6-parser_yacc.conflicts batsh.0.0.6-parser_yacc.timings)
  (deps batsh.0.0.6-parser_yacc.mly)
  (action
    (with-outputs-to batsh.0.0.6-parser_yacc.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to batsh.0.0.6-parser_yacc.timings %{deps})))))

(rule (alias quick)
  (action (diff batsh.0.0.6-parser_yacc.exp batsh.0.0.6-parser_yacc.out)))

(rule (alias quick)
  (action
    (diff batsh.0.0.6-parser_yacc.automaton.exp
      batsh.0.0.6-parser_yacc.automaton)))

(rule (alias quick)
  (action
    (diff batsh.0.0.6-parser_yacc.automaton.resolved.exp
      batsh.0.0.6-parser_yacc.automaton.resolved)))

(rule (alias quick)
  (action
    (diff batsh.0.0.6-parser_yacc.conflicts.exp
      batsh.0.0.6-parser_yacc.conflicts)))

(rule (target batsh_0_0_6-parser_yacc_stripped.mly)
  (deps batsh.0.0.6-parser_yacc.mly)
  (action
    (with-stderr-to batsh_0_0_6-parser_yacc_stripped.ignored
      (with-stdout-to batsh_0_0_6-parser_yacc_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets batsh_0_0_6-parser_yacc_stripped.log
    batsh_0_0_6-parser_yacc_stripped.mli batsh_0_0_6-parser_yacc_stripped.ml
    batsh_0_0_6-parser_yacc_stripped.stacklang
    batsh_0_0_6-parser_yacc_stripped.timings
    batsh_0_0_6-parser_yacc_stripped.scount
    batsh_0_0_6-parser_yacc_stripped.dcount)
  (deps batsh_0_0_6-parser_yacc_stripped.mly)
  (action
    (with-outputs-to batsh_0_0_6-parser_yacc_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to batsh_0_0_6-parser_yacc_stripped.timings %{deps})))))

(alias (name quick) (deps
                      batsh_0_0_6-parser_yacc_stripped.stacklang))

(rule
  (targets batsh_0_0_6-parser_yacc_stripped.cmi
    batsh_0_0_6-parser_yacc_stripped.mli.log)
  (deps batsh_0_0_6-parser_yacc_stripped.mli)
  (action
    (with-stdout-to batsh_0_0_6-parser_yacc_stripped.mli.dtimings
      (with-stderr-to batsh_0_0_6-parser_yacc_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          batsh_0_0_6-parser_yacc_stripped.mli)))))

(rule
  (targets batsh_0_0_6-parser_yacc_stripped.cmo
    batsh_0_0_6-parser_yacc_stripped.ml.log)
  (deps batsh_0_0_6-parser_yacc_stripped.ml
    batsh_0_0_6-parser_yacc_stripped.cmi)
  (action
    (with-stdout-to batsh_0_0_6-parser_yacc_stripped.ml.dtimings
      (with-stderr-to batsh_0_0_6-parser_yacc_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          batsh_0_0_6-parser_yacc_stripped.ml)))))

(rule (alias test)
  (action
    (diff batsh_0_0_6-parser_yacc_stripped.ml.log.exp
      batsh_0_0_6-parser_yacc_stripped.ml.log)))

(rule (target bauer.opp.out) (deps bauer.mly)
  (action
    (with-outputs-to bauer.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff bauer.opp.exp bauer.opp.out)))

(rule
  (targets bauer.out bauer.automaton bauer.automaton.resolved bauer.conflicts
    bauer.timings)
  (deps bauer.mly)
  (action
    (with-outputs-to bauer.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to bauer.timings %{deps})))))

(rule (alias quick) (action (diff bauer.exp bauer.out)))

(rule (alias quick) (action (diff bauer.automaton.exp bauer.automaton)))

(rule (alias quick)
  (action (diff bauer.automaton.resolved.exp bauer.automaton.resolved)))

(rule (alias quick) (action (diff bauer.conflicts.exp bauer.conflicts)))

(rule (target bauer_stripped.mly) (deps bauer.mly)
  (action
    (with-stderr-to bauer_stripped.ignored
      (with-stdout-to bauer_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets bauer_stripped.log bauer_stripped.mli bauer_stripped.ml
    bauer_stripped.stacklang bauer_stripped.timings bauer_stripped.scount
    bauer_stripped.dcount)
  (deps bauer_stripped.mly)
  (action
    (with-outputs-to bauer_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to bauer_stripped.timings %{deps})))))

(alias (name quick) (deps
                      bauer_stripped.stacklang))

(rule (targets bauer_stripped.cmi bauer_stripped.mli.log)
  (deps bauer_stripped.mli)
  (action
    (with-stdout-to bauer_stripped.mli.dtimings
      (with-stderr-to bauer_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c bauer_stripped.mli)))))

(rule (targets bauer_stripped.cmo bauer_stripped.ml.log)
  (deps bauer_stripped.ml bauer_stripped.cmi)
  (action
    (with-stdout-to bauer_stripped.ml.dtimings
      (with-stderr-to bauer_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c bauer_stripped.ml)))))

(rule (alias test)
  (action (diff bauer_stripped.ml.log.exp bauer_stripped.ml.log)))

(rule (target belloeil.opp.out) (deps belloeil.mly)
  (action
    (with-outputs-to belloeil.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff belloeil.opp.exp belloeil.opp.out)))

(rule
  (targets belloeil.out belloeil.automaton belloeil.automaton.resolved
    belloeil.conflicts belloeil.timings)
  (deps belloeil.mly)
  (action
    (with-outputs-to belloeil.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to belloeil.timings %{deps})))))

(rule (alias quick) (action (diff belloeil.exp belloeil.out)))

(rule (alias quick)
  (action (diff belloeil.automaton.exp belloeil.automaton)))

(rule (alias quick)
  (action (diff belloeil.automaton.resolved.exp belloeil.automaton.resolved)))

(rule (alias quick)
  (action (diff belloeil.conflicts.exp belloeil.conflicts)))

(rule (target belloeil_stripped.mly) (deps belloeil.mly)
  (action
    (with-stderr-to belloeil_stripped.ignored
      (with-stdout-to belloeil_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets belloeil_stripped.log belloeil_stripped.mli belloeil_stripped.ml
    belloeil_stripped.stacklang belloeil_stripped.timings
    belloeil_stripped.scount belloeil_stripped.dcount)
  (deps belloeil_stripped.mly)
  (action
    (with-outputs-to belloeil_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to belloeil_stripped.timings %{deps})))))

(alias (name quick) (deps
                      belloeil_stripped.stacklang))

(rule (targets belloeil_stripped.cmi belloeil_stripped.mli.log)
  (deps belloeil_stripped.mli)
  (action
    (with-stdout-to belloeil_stripped.mli.dtimings
      (with-stderr-to belloeil_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c belloeil_stripped.mli)))))

(rule (targets belloeil_stripped.cmo belloeil_stripped.ml.log)
  (deps belloeil_stripped.ml belloeil_stripped.cmi)
  (action
    (with-stdout-to belloeil_stripped.ml.dtimings
      (with-stderr-to belloeil_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c belloeil_stripped.ml)))))

(rule (alias test)
  (action (diff belloeil_stripped.ml.log.exp belloeil_stripped.ml.log)))

(rule (target bibtex2html.1.99-bibtex_parser.opp.out)
  (deps bibtex2html.1.99-bibtex_parser.mly)
  (action
    (with-outputs-to bibtex2html.1.99-bibtex_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff bibtex2html.1.99-bibtex_parser.opp.exp
      bibtex2html.1.99-bibtex_parser.opp.out)))

(rule
  (targets bibtex2html.1.99-bibtex_parser.out
    bibtex2html.1.99-bibtex_parser.automaton
    bibtex2html.1.99-bibtex_parser.automaton.resolved
    bibtex2html.1.99-bibtex_parser.conflicts
    bibtex2html.1.99-bibtex_parser.timings)
  (deps bibtex2html.1.99-bibtex_parser.mly)
  (action
    (with-outputs-to bibtex2html.1.99-bibtex_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to bibtex2html.1.99-bibtex_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff bibtex2html.1.99-bibtex_parser.exp
      bibtex2html.1.99-bibtex_parser.out)))

(rule (alias quick)
  (action
    (diff bibtex2html.1.99-bibtex_parser.automaton.exp
      bibtex2html.1.99-bibtex_parser.automaton)))

(rule (alias quick)
  (action
    (diff bibtex2html.1.99-bibtex_parser.automaton.resolved.exp
      bibtex2html.1.99-bibtex_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff bibtex2html.1.99-bibtex_parser.conflicts.exp
      bibtex2html.1.99-bibtex_parser.conflicts)))

(rule (target bibtex2html_1_99-bibtex_parser_stripped.mly)
  (deps bibtex2html.1.99-bibtex_parser.mly)
  (action
    (with-stderr-to bibtex2html_1_99-bibtex_parser_stripped.ignored
      (with-stdout-to bibtex2html_1_99-bibtex_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets bibtex2html_1_99-bibtex_parser_stripped.log
    bibtex2html_1_99-bibtex_parser_stripped.mli
    bibtex2html_1_99-bibtex_parser_stripped.ml
    bibtex2html_1_99-bibtex_parser_stripped.stacklang
    bibtex2html_1_99-bibtex_parser_stripped.timings
    bibtex2html_1_99-bibtex_parser_stripped.scount
    bibtex2html_1_99-bibtex_parser_stripped.dcount)
  (deps bibtex2html_1_99-bibtex_parser_stripped.mly)
  (action
    (with-outputs-to bibtex2html_1_99-bibtex_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to bibtex2html_1_99-bibtex_parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      bibtex2html_1_99-bibtex_parser_stripped.stacklang))

(rule
  (targets bibtex2html_1_99-bibtex_parser_stripped.cmi
    bibtex2html_1_99-bibtex_parser_stripped.mli.log)
  (deps bibtex2html_1_99-bibtex_parser_stripped.mli)
  (action
    (with-stdout-to bibtex2html_1_99-bibtex_parser_stripped.mli.dtimings
      (with-stderr-to bibtex2html_1_99-bibtex_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          bibtex2html_1_99-bibtex_parser_stripped.mli)))))

(rule
  (targets bibtex2html_1_99-bibtex_parser_stripped.cmo
    bibtex2html_1_99-bibtex_parser_stripped.ml.log)
  (deps bibtex2html_1_99-bibtex_parser_stripped.ml
    bibtex2html_1_99-bibtex_parser_stripped.cmi)
  (action
    (with-stdout-to bibtex2html_1_99-bibtex_parser_stripped.ml.dtimings
      (with-stderr-to bibtex2html_1_99-bibtex_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          bibtex2html_1_99-bibtex_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff bibtex2html_1_99-bibtex_parser_stripped.ml.log.exp
      bibtex2html_1_99-bibtex_parser_stripped.ml.log)))

(rule (target bibtex_parser.opp.out) (deps bibtex_parser.mly)
  (action
    (with-outputs-to bibtex_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff bibtex_parser.opp.exp bibtex_parser.opp.out)))

(rule
  (targets bibtex_parser.out bibtex_parser.automaton
    bibtex_parser.automaton.resolved bibtex_parser.conflicts
    bibtex_parser.timings)
  (deps bibtex_parser.mly)
  (action
    (with-outputs-to bibtex_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to bibtex_parser.timings %{deps})))))

(rule (alias quick) (action (diff bibtex_parser.exp bibtex_parser.out)))

(rule (alias quick)
  (action (diff bibtex_parser.automaton.exp bibtex_parser.automaton)))

(rule (alias quick)
  (action
    (diff bibtex_parser.automaton.resolved.exp
      bibtex_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff bibtex_parser.conflicts.exp bibtex_parser.conflicts)))

(rule (target bibtex_parser_stripped.mly) (deps bibtex_parser.mly)
  (action
    (with-stderr-to bibtex_parser_stripped.ignored
      (with-stdout-to bibtex_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets bibtex_parser_stripped.log bibtex_parser_stripped.mli
    bibtex_parser_stripped.ml bibtex_parser_stripped.stacklang
    bibtex_parser_stripped.timings bibtex_parser_stripped.scount
    bibtex_parser_stripped.dcount)
  (deps bibtex_parser_stripped.mly)
  (action
    (with-outputs-to bibtex_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to bibtex_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      bibtex_parser_stripped.stacklang))

(rule (targets bibtex_parser_stripped.cmi bibtex_parser_stripped.mli.log)
  (deps bibtex_parser_stripped.mli)
  (action
    (with-stdout-to bibtex_parser_stripped.mli.dtimings
      (with-stderr-to bibtex_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c bibtex_parser_stripped.mli)))))

(rule (targets bibtex_parser_stripped.cmo bibtex_parser_stripped.ml.log)
  (deps bibtex_parser_stripped.ml bibtex_parser_stripped.cmi)
  (action
    (with-stdout-to bibtex_parser_stripped.ml.dtimings
      (with-stderr-to bibtex_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c bibtex_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff bibtex_parser_stripped.ml.log.exp bibtex_parser_stripped.ml.log)))

(rule (target bison-mysterious-conflict.opp.out)
  (deps bison-mysterious-conflict.mly)
  (action
    (with-outputs-to bison-mysterious-conflict.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff bison-mysterious-conflict.opp.exp
      bison-mysterious-conflict.opp.out)))

(rule
  (targets bison-mysterious-conflict.out bison-mysterious-conflict.automaton
    bison-mysterious-conflict.automaton.resolved
    bison-mysterious-conflict.conflicts bison-mysterious-conflict.timings)
  (deps bison-mysterious-conflict.mly)
  (action
    (with-outputs-to bison-mysterious-conflict.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to bison-mysterious-conflict.timings %{deps})))))

(rule (alias quick)
  (action (diff bison-mysterious-conflict.exp bison-mysterious-conflict.out)))

(rule (alias quick)
  (action
    (diff bison-mysterious-conflict.automaton.exp
      bison-mysterious-conflict.automaton)))

(rule (alias quick)
  (action
    (diff bison-mysterious-conflict.automaton.resolved.exp
      bison-mysterious-conflict.automaton.resolved)))

(rule (alias quick)
  (action
    (diff bison-mysterious-conflict.conflicts.exp
      bison-mysterious-conflict.conflicts)))

(rule (target bison-mysterious-conflict_stripped.mly)
  (deps bison-mysterious-conflict.mly)
  (action
    (with-stderr-to bison-mysterious-conflict_stripped.ignored
      (with-stdout-to bison-mysterious-conflict_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets bison-mysterious-conflict_stripped.log
    bison-mysterious-conflict_stripped.mli
    bison-mysterious-conflict_stripped.ml
    bison-mysterious-conflict_stripped.stacklang
    bison-mysterious-conflict_stripped.timings
    bison-mysterious-conflict_stripped.scount
    bison-mysterious-conflict_stripped.dcount)
  (deps bison-mysterious-conflict_stripped.mly)
  (action
    (with-outputs-to bison-mysterious-conflict_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to bison-mysterious-conflict_stripped.timings %{deps})))))

(alias (name quick) (deps
                      bison-mysterious-conflict_stripped.stacklang))

(rule
  (targets bison-mysterious-conflict_stripped.cmi
    bison-mysterious-conflict_stripped.mli.log)
  (deps bison-mysterious-conflict_stripped.mli)
  (action
    (with-stdout-to bison-mysterious-conflict_stripped.mli.dtimings
      (with-stderr-to bison-mysterious-conflict_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          bison-mysterious-conflict_stripped.mli)))))

(rule
  (targets bison-mysterious-conflict_stripped.cmo
    bison-mysterious-conflict_stripped.ml.log)
  (deps bison-mysterious-conflict_stripped.ml
    bison-mysterious-conflict_stripped.cmi)
  (action
    (with-stdout-to bison-mysterious-conflict_stripped.ml.dtimings
      (with-stderr-to bison-mysterious-conflict_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          bison-mysterious-conflict_stripped.ml)))))

(rule (alias test)
  (action
    (diff bison-mysterious-conflict_stripped.ml.log.exp
      bison-mysterious-conflict_stripped.ml.log)))

(rule (target bodin.opp.out) (deps bodin.mly)
  (action
    (with-outputs-to bodin.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff bodin.opp.exp bodin.opp.out)))

(rule
  (targets bodin.out bodin.automaton bodin.automaton.resolved bodin.conflicts
    bodin.timings)
  (deps bodin.mly)
  (action
    (with-outputs-to bodin.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to bodin.timings %{deps})))))

(rule (alias quick) (action (diff bodin.exp bodin.out)))

(rule (alias quick) (action (diff bodin.automaton.exp bodin.automaton)))

(rule (alias quick)
  (action (diff bodin.automaton.resolved.exp bodin.automaton.resolved)))

(rule (alias quick) (action (diff bodin.conflicts.exp bodin.conflicts)))

(rule (target bodin_stripped.mly) (deps bodin.mly)
  (action
    (with-stderr-to bodin_stripped.ignored
      (with-stdout-to bodin_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets bodin_stripped.log bodin_stripped.mli bodin_stripped.ml
    bodin_stripped.stacklang bodin_stripped.timings bodin_stripped.scount
    bodin_stripped.dcount)
  (deps bodin_stripped.mly)
  (action
    (with-outputs-to bodin_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to bodin_stripped.timings %{deps})))))

(alias (name quick) (deps
                      bodin_stripped.stacklang))

(rule (targets bodin_stripped.cmi bodin_stripped.mli.log)
  (deps bodin_stripped.mli)
  (action
    (with-stdout-to bodin_stripped.mli.dtimings
      (with-stderr-to bodin_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c bodin_stripped.mli)))))

(rule (targets bodin_stripped.cmo bodin_stripped.ml.log)
  (deps bodin_stripped.ml bodin_stripped.cmi)
  (action
    (with-stdout-to bodin_stripped.ml.dtimings
      (with-stderr-to bodin_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c bodin_stripped.ml)))))

(rule (alias test)
  (action (diff bodin_stripped.ml.log.exp bodin_stripped.ml.log)))

(rule (target bodin_inlined.opp.out) (deps bodin_inlined.mly)
  (action
    (with-outputs-to bodin_inlined.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff bodin_inlined.opp.exp bodin_inlined.opp.out)))

(rule
  (targets bodin_inlined.out bodin_inlined.automaton
    bodin_inlined.automaton.resolved bodin_inlined.conflicts
    bodin_inlined.timings)
  (deps bodin_inlined.mly)
  (action
    (with-outputs-to bodin_inlined.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to bodin_inlined.timings %{deps})))))

(rule (alias quick) (action (diff bodin_inlined.exp bodin_inlined.out)))

(rule (alias quick)
  (action (diff bodin_inlined.automaton.exp bodin_inlined.automaton)))

(rule (alias quick)
  (action
    (diff bodin_inlined.automaton.resolved.exp
      bodin_inlined.automaton.resolved)))

(rule (alias quick)
  (action (diff bodin_inlined.conflicts.exp bodin_inlined.conflicts)))

(rule (target bodin_inlined_stripped.mly) (deps bodin_inlined.mly)
  (action
    (with-stderr-to bodin_inlined_stripped.ignored
      (with-stdout-to bodin_inlined_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets bodin_inlined_stripped.log bodin_inlined_stripped.mli
    bodin_inlined_stripped.ml bodin_inlined_stripped.stacklang
    bodin_inlined_stripped.timings bodin_inlined_stripped.scount
    bodin_inlined_stripped.dcount)
  (deps bodin_inlined_stripped.mly)
  (action
    (with-outputs-to bodin_inlined_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to bodin_inlined_stripped.timings %{deps})))))

(alias (name quick) (deps
                      bodin_inlined_stripped.stacklang))

(rule (targets bodin_inlined_stripped.cmi bodin_inlined_stripped.mli.log)
  (deps bodin_inlined_stripped.mli)
  (action
    (with-stdout-to bodin_inlined_stripped.mli.dtimings
      (with-stderr-to bodin_inlined_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c bodin_inlined_stripped.mli)))))

(rule (targets bodin_inlined_stripped.cmo bodin_inlined_stripped.ml.log)
  (deps bodin_inlined_stripped.ml bodin_inlined_stripped.cmi)
  (action
    (with-stdout-to bodin_inlined_stripped.ml.dtimings
      (with-stderr-to bodin_inlined_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c bodin_inlined_stripped.ml)))))

(rule (alias test)
  (action
    (diff bodin_inlined_stripped.ml.log.exp bodin_inlined_stripped.ml.log)))

(rule (target boomerang-bparser.opp.out) (deps boomerang-bparser.mly)
  (action
    (with-outputs-to boomerang-bparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff boomerang-bparser.opp.exp boomerang-bparser.opp.out)))

(rule
  (targets boomerang-bparser.out boomerang-bparser.automaton
    boomerang-bparser.automaton.resolved boomerang-bparser.conflicts
    boomerang-bparser.timings)
  (deps boomerang-bparser.mly)
  (action
    (with-outputs-to boomerang-bparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to boomerang-bparser.timings %{deps})))))

(rule (alias quick)
  (action (diff boomerang-bparser.exp boomerang-bparser.out)))

(rule (alias quick)
  (action (diff boomerang-bparser.automaton.exp boomerang-bparser.automaton)))

(rule (alias quick)
  (action
    (diff boomerang-bparser.automaton.resolved.exp
      boomerang-bparser.automaton.resolved)))

(rule (alias quick)
  (action (diff boomerang-bparser.conflicts.exp boomerang-bparser.conflicts)))

(rule (target boomerang-bparser_stripped.mly) (deps boomerang-bparser.mly)
  (action
    (with-stderr-to boomerang-bparser_stripped.ignored
      (with-stdout-to boomerang-bparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets boomerang-bparser_stripped.log boomerang-bparser_stripped.mli
    boomerang-bparser_stripped.ml boomerang-bparser_stripped.stacklang
    boomerang-bparser_stripped.timings boomerang-bparser_stripped.scount
    boomerang-bparser_stripped.dcount)
  (deps boomerang-bparser_stripped.mly)
  (action
    (with-outputs-to boomerang-bparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to boomerang-bparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      boomerang-bparser_stripped.stacklang))

(rule
  (targets boomerang-bparser_stripped.cmi boomerang-bparser_stripped.mli.log)
  (deps boomerang-bparser_stripped.mli)
  (action
    (with-stdout-to boomerang-bparser_stripped.mli.dtimings
      (with-stderr-to boomerang-bparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c boomerang-bparser_stripped.mli)))))

(rule
  (targets boomerang-bparser_stripped.cmo boomerang-bparser_stripped.ml.log)
  (deps boomerang-bparser_stripped.ml boomerang-bparser_stripped.cmi)
  (action
    (with-stdout-to boomerang-bparser_stripped.ml.dtimings
      (with-stderr-to boomerang-bparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c boomerang-bparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff boomerang-bparser_stripped.ml.log.exp
      boomerang-bparser_stripped.ml.log)))

(rule (target boris-mini.opp.out) (deps boris-mini.mly)
  (action
    (with-outputs-to boris-mini.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff boris-mini.opp.exp boris-mini.opp.out)))

(rule
  (targets boris-mini.out boris-mini.automaton boris-mini.automaton.resolved
    boris-mini.conflicts boris-mini.timings)
  (deps boris-mini.mly)
  (action
    (with-outputs-to boris-mini.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to boris-mini.timings %{deps})))))

(rule (alias quick) (action (diff boris-mini.exp boris-mini.out)))

(rule (alias quick)
  (action (diff boris-mini.automaton.exp boris-mini.automaton)))

(rule (alias quick)
  (action
    (diff boris-mini.automaton.resolved.exp boris-mini.automaton.resolved)))

(rule (alias quick)
  (action (diff boris-mini.conflicts.exp boris-mini.conflicts)))

(rule (target boris-mini_stripped.mly) (deps boris-mini.mly)
  (action
    (with-stderr-to boris-mini_stripped.ignored
      (with-stdout-to boris-mini_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets boris-mini_stripped.log boris-mini_stripped.mli
    boris-mini_stripped.ml boris-mini_stripped.stacklang
    boris-mini_stripped.timings boris-mini_stripped.scount
    boris-mini_stripped.dcount)
  (deps boris-mini_stripped.mly)
  (action
    (with-outputs-to boris-mini_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to boris-mini_stripped.timings %{deps})))))

(alias (name quick) (deps
                      boris-mini_stripped.stacklang))

(rule (targets boris-mini_stripped.cmi boris-mini_stripped.mli.log)
  (deps boris-mini_stripped.mli)
  (action
    (with-stdout-to boris-mini_stripped.mli.dtimings
      (with-stderr-to boris-mini_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c boris-mini_stripped.mli)))))

(rule (targets boris-mini_stripped.cmo boris-mini_stripped.ml.log)
  (deps boris-mini_stripped.ml boris-mini_stripped.cmi)
  (action
    (with-stdout-to boris-mini_stripped.ml.dtimings
      (with-stderr-to boris-mini_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c boris-mini_stripped.ml)))))

(rule (alias test)
  (action (diff boris-mini_stripped.ml.log.exp boris-mini_stripped.ml.log)))

(rule (target boris-mini-no-eos.opp.out) (deps boris-mini-no-eos.mly)
  (action
    (with-outputs-to boris-mini-no-eos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff boris-mini-no-eos.opp.exp boris-mini-no-eos.opp.out)))

(rule
  (targets boris-mini-no-eos.out boris-mini-no-eos.automaton
    boris-mini-no-eos.automaton.resolved boris-mini-no-eos.conflicts
    boris-mini-no-eos.timings)
  (deps boris-mini-no-eos.mly)
  (action
    (with-outputs-to boris-mini-no-eos.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to boris-mini-no-eos.timings %{deps})))))

(rule (alias quick)
  (action (diff boris-mini-no-eos.exp boris-mini-no-eos.out)))

(rule (alias quick)
  (action (diff boris-mini-no-eos.automaton.exp boris-mini-no-eos.automaton)))

(rule (alias quick)
  (action
    (diff boris-mini-no-eos.automaton.resolved.exp
      boris-mini-no-eos.automaton.resolved)))

(rule (alias quick)
  (action (diff boris-mini-no-eos.conflicts.exp boris-mini-no-eos.conflicts)))

(rule (target boris-mini-no-eos_stripped.mly) (deps boris-mini-no-eos.mly)
  (action
    (with-stderr-to boris-mini-no-eos_stripped.ignored
      (with-stdout-to boris-mini-no-eos_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets boris-mini-no-eos_stripped.log boris-mini-no-eos_stripped.mli
    boris-mini-no-eos_stripped.ml boris-mini-no-eos_stripped.stacklang
    boris-mini-no-eos_stripped.timings boris-mini-no-eos_stripped.scount
    boris-mini-no-eos_stripped.dcount)
  (deps boris-mini-no-eos_stripped.mly)
  (action
    (with-outputs-to boris-mini-no-eos_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to boris-mini-no-eos_stripped.timings %{deps})))))

(alias (name quick) (deps
                      boris-mini-no-eos_stripped.stacklang))

(rule
  (targets boris-mini-no-eos_stripped.cmi boris-mini-no-eos_stripped.mli.log)
  (deps boris-mini-no-eos_stripped.mli)
  (action
    (with-stdout-to boris-mini-no-eos_stripped.mli.dtimings
      (with-stderr-to boris-mini-no-eos_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c boris-mini-no-eos_stripped.mli)))))

(rule
  (targets boris-mini-no-eos_stripped.cmo boris-mini-no-eos_stripped.ml.log)
  (deps boris-mini-no-eos_stripped.ml boris-mini-no-eos_stripped.cmi)
  (action
    (with-stdout-to boris-mini-no-eos_stripped.ml.dtimings
      (with-stderr-to boris-mini-no-eos_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c boris-mini-no-eos_stripped.ml)))))

(rule (alias test)
  (action
    (diff boris-mini-no-eos_stripped.ml.log.exp
      boris-mini-no-eos_stripped.ml.log)))

(rule (target bran.opp.out) (deps bran.mly)
  (action
    (with-outputs-to bran.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff bran.opp.exp bran.opp.out)))

(rule
  (targets bran.out bran.automaton bran.automaton.resolved bran.conflicts
    bran.timings)
  (deps bran.mly)
  (action
    (with-outputs-to bran.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to bran.timings %{deps})))))

(rule (alias quick) (action (diff bran.exp bran.out)))

(rule (alias quick) (action (diff bran.automaton.exp bran.automaton)))

(rule (alias quick)
  (action (diff bran.automaton.resolved.exp bran.automaton.resolved)))

(rule (alias quick) (action (diff bran.conflicts.exp bran.conflicts)))

(rule (target bran_stripped.mly) (deps bran.mly)
  (action
    (with-stderr-to bran_stripped.ignored
      (with-stdout-to bran_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets bran_stripped.log bran_stripped.mli bran_stripped.ml
    bran_stripped.stacklang bran_stripped.timings bran_stripped.scount
    bran_stripped.dcount)
  (deps bran_stripped.mly)
  (action
    (with-outputs-to bran_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to bran_stripped.timings %{deps})))))

(alias (name quick) (deps
                      bran_stripped.stacklang))

(rule (targets bran_stripped.cmi bran_stripped.mli.log)
  (deps bran_stripped.mli)
  (action
    (with-stdout-to bran_stripped.mli.dtimings
      (with-stderr-to bran_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c bran_stripped.mli)))))

(rule (targets bran_stripped.cmo bran_stripped.ml.log)
  (deps bran_stripped.ml bran_stripped.cmi)
  (action
    (with-stdout-to bran_stripped.ml.dtimings
      (with-stderr-to bran_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c bran_stripped.ml)))))

(rule (alias test)
  (action (diff bran_stripped.ml.log.exp bran_stripped.ml.log)))

(rule (target c.opp.out) (deps c.mly)
  (action
    (with-outputs-to c.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff c.opp.exp c.opp.out)))

(rule (targets c.out c.automaton c.automaton.resolved c.conflicts c.timings)
  (deps c.mly)
  (action
    (with-outputs-to c.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to c.timings %{deps})))))

(rule (alias quick) (action (diff c.exp c.out)))

(rule (alias quick) (action (diff c.automaton.exp c.automaton)))

(rule (alias quick)
  (action (diff c.automaton.resolved.exp c.automaton.resolved)))

(rule (alias quick) (action (diff c.conflicts.exp c.conflicts)))

(rule (target c_stripped.mly) (deps c.mly)
  (action
    (with-stderr-to c_stripped.ignored
      (with-stdout-to c_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets c_stripped.log c_stripped.mli c_stripped.ml c_stripped.stacklang
    c_stripped.timings c_stripped.scount c_stripped.dcount)
  (deps c_stripped.mly)
  (action
    (with-outputs-to c_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to c_stripped.timings %{deps})))))

(alias (name quick) (deps
                      c_stripped.stacklang))

(rule (targets c_stripped.cmi c_stripped.mli.log) (deps c_stripped.mli)
  (action
    (with-stdout-to c_stripped.mli.dtimings
      (with-stderr-to c_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c c_stripped.mli)))))

(rule (targets c_stripped.cmo c_stripped.ml.log)
  (deps c_stripped.ml c_stripped.cmi)
  (action
    (with-stdout-to c_stripped.ml.dtimings
      (with-stderr-to c_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c c_stripped.ml)))))

(rule (alias test) (action (diff c_stripped.ml.log.exp c_stripped.ml.log)))

(rule (target c_unambiguous.opp.out) (deps c_unambiguous.mly)
  (action
    (with-outputs-to c_unambiguous.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff c_unambiguous.opp.exp c_unambiguous.opp.out)))

(rule
  (targets c_unambiguous.out c_unambiguous.automaton
    c_unambiguous.automaton.resolved c_unambiguous.conflicts
    c_unambiguous.timings)
  (deps c_unambiguous.mly)
  (action
    (with-outputs-to c_unambiguous.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to c_unambiguous.timings %{deps})))))

(rule (alias quick) (action (diff c_unambiguous.exp c_unambiguous.out)))

(rule (alias quick)
  (action (diff c_unambiguous.automaton.exp c_unambiguous.automaton)))

(rule (alias quick)
  (action
    (diff c_unambiguous.automaton.resolved.exp
      c_unambiguous.automaton.resolved)))

(rule (alias quick)
  (action (diff c_unambiguous.conflicts.exp c_unambiguous.conflicts)))

(rule (target c_unambiguous_stripped.mly) (deps c_unambiguous.mly)
  (action
    (with-stderr-to c_unambiguous_stripped.ignored
      (with-stdout-to c_unambiguous_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets c_unambiguous_stripped.log c_unambiguous_stripped.mli
    c_unambiguous_stripped.ml c_unambiguous_stripped.stacklang
    c_unambiguous_stripped.timings c_unambiguous_stripped.scount
    c_unambiguous_stripped.dcount)
  (deps c_unambiguous_stripped.mly)
  (action
    (with-outputs-to c_unambiguous_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to c_unambiguous_stripped.timings %{deps})))))

(alias (name quick) (deps
                      c_unambiguous_stripped.stacklang))

(rule (targets c_unambiguous_stripped.cmi c_unambiguous_stripped.mli.log)
  (deps c_unambiguous_stripped.mli)
  (action
    (with-stdout-to c_unambiguous_stripped.mli.dtimings
      (with-stderr-to c_unambiguous_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c c_unambiguous_stripped.mli)))))

(rule (targets c_unambiguous_stripped.cmo c_unambiguous_stripped.ml.log)
  (deps c_unambiguous_stripped.ml c_unambiguous_stripped.cmi)
  (action
    (with-stdout-to c_unambiguous_stripped.ml.dtimings
      (with-stderr-to c_unambiguous_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c c_unambiguous_stripped.ml)))))

(rule (alias test)
  (action
    (diff c_unambiguous_stripped.ml.log.exp c_unambiguous_stripped.ml.log)))

(rule (target calc.opp.out) (deps calc.mly)
  (action
    (with-outputs-to calc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff calc.opp.exp calc.opp.out)))

(rule
  (targets calc.out calc.automaton calc.automaton.resolved calc.conflicts
    calc.timings)
  (deps calc.mly)
  (action
    (with-outputs-to calc.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to calc.timings %{deps})))))

(rule (alias quick) (action (diff calc.exp calc.out)))

(rule (alias quick) (action (diff calc.automaton.exp calc.automaton)))

(rule (alias quick)
  (action (diff calc.automaton.resolved.exp calc.automaton.resolved)))

(rule (alias quick) (action (diff calc.conflicts.exp calc.conflicts)))

(rule (target calc_stripped.mly) (deps calc.mly)
  (action
    (with-stderr-to calc_stripped.ignored
      (with-stdout-to calc_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets calc_stripped.log calc_stripped.mli calc_stripped.ml
    calc_stripped.stacklang calc_stripped.timings calc_stripped.scount
    calc_stripped.dcount)
  (deps calc_stripped.mly)
  (action
    (with-outputs-to calc_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to calc_stripped.timings %{deps})))))

(alias (name quick) (deps
                      calc_stripped.stacklang))

(rule (targets calc_stripped.cmi calc_stripped.mli.log)
  (deps calc_stripped.mli)
  (action
    (with-stdout-to calc_stripped.mli.dtimings
      (with-stderr-to calc_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c calc_stripped.mli)))))

(rule (targets calc_stripped.cmo calc_stripped.ml.log)
  (deps calc_stripped.ml calc_stripped.cmi)
  (action
    (with-stdout-to calc_stripped.ml.dtimings
      (with-stderr-to calc_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c calc_stripped.ml)))))

(rule (alias test)
  (action (diff calc_stripped.ml.log.exp calc_stripped.ml.log)))

(rule (target calc-anonymous.opp.out) (deps calc-anonymous.mly)
  (action
    (with-outputs-to calc-anonymous.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff calc-anonymous.opp.exp calc-anonymous.opp.out)))

(rule
  (targets calc-anonymous.out calc-anonymous.automaton
    calc-anonymous.automaton.resolved calc-anonymous.conflicts
    calc-anonymous.timings)
  (deps calc-anonymous.mly)
  (action
    (with-outputs-to calc-anonymous.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to calc-anonymous.timings %{deps})))))

(rule (alias quick) (action (diff calc-anonymous.exp calc-anonymous.out)))

(rule (alias quick)
  (action (diff calc-anonymous.automaton.exp calc-anonymous.automaton)))

(rule (alias quick)
  (action
    (diff calc-anonymous.automaton.resolved.exp
      calc-anonymous.automaton.resolved)))

(rule (alias quick)
  (action (diff calc-anonymous.conflicts.exp calc-anonymous.conflicts)))

(rule (target calc-anonymous_stripped.mly) (deps calc-anonymous.mly)
  (action
    (with-stderr-to calc-anonymous_stripped.ignored
      (with-stdout-to calc-anonymous_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets calc-anonymous_stripped.log calc-anonymous_stripped.mli
    calc-anonymous_stripped.ml calc-anonymous_stripped.stacklang
    calc-anonymous_stripped.timings calc-anonymous_stripped.scount
    calc-anonymous_stripped.dcount)
  (deps calc-anonymous_stripped.mly)
  (action
    (with-outputs-to calc-anonymous_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to calc-anonymous_stripped.timings %{deps})))))

(alias (name quick) (deps
                      calc-anonymous_stripped.stacklang))

(rule (targets calc-anonymous_stripped.cmi calc-anonymous_stripped.mli.log)
  (deps calc-anonymous_stripped.mli)
  (action
    (with-stdout-to calc-anonymous_stripped.mli.dtimings
      (with-stderr-to calc-anonymous_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c calc-anonymous_stripped.mli)))))

(rule (targets calc-anonymous_stripped.cmo calc-anonymous_stripped.ml.log)
  (deps calc-anonymous_stripped.ml calc-anonymous_stripped.cmi)
  (action
    (with-stdout-to calc-anonymous_stripped.ml.dtimings
      (with-stderr-to calc-anonymous_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c calc-anonymous_stripped.ml)))))

(rule (alias test)
  (action
    (diff calc-anonymous_stripped.ml.log.exp calc-anonymous_stripped.ml.log)))

(rule (target calc-ast.opp.out) (deps calc-ast.mly)
  (action
    (with-outputs-to calc-ast.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff calc-ast.opp.exp calc-ast.opp.out)))

(rule
  (targets calc-ast.out calc-ast.automaton calc-ast.automaton.resolved
    calc-ast.conflicts calc-ast.timings)
  (deps calc-ast.mly)
  (action
    (with-outputs-to calc-ast.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to calc-ast.timings %{deps})))))

(rule (alias quick) (action (diff calc-ast.exp calc-ast.out)))

(rule (alias quick)
  (action (diff calc-ast.automaton.exp calc-ast.automaton)))

(rule (alias quick)
  (action (diff calc-ast.automaton.resolved.exp calc-ast.automaton.resolved)))

(rule (alias quick)
  (action (diff calc-ast.conflicts.exp calc-ast.conflicts)))

(rule (target calc-ast_stripped.mly) (deps calc-ast.mly)
  (action
    (with-stderr-to calc-ast_stripped.ignored
      (with-stdout-to calc-ast_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets calc-ast_stripped.log calc-ast_stripped.mli calc-ast_stripped.ml
    calc-ast_stripped.stacklang calc-ast_stripped.timings
    calc-ast_stripped.scount calc-ast_stripped.dcount)
  (deps calc-ast_stripped.mly)
  (action
    (with-outputs-to calc-ast_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to calc-ast_stripped.timings %{deps})))))

(alias (name quick) (deps
                      calc-ast_stripped.stacklang))

(rule (targets calc-ast_stripped.cmi calc-ast_stripped.mli.log)
  (deps calc-ast_stripped.mli)
  (action
    (with-stdout-to calc-ast_stripped.mli.dtimings
      (with-stderr-to calc-ast_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c calc-ast_stripped.mli)))))

(rule (targets calc-ast_stripped.cmo calc-ast_stripped.ml.log)
  (deps calc-ast_stripped.ml calc-ast_stripped.cmi)
  (action
    (with-stdout-to calc-ast_stripped.ml.dtimings
      (with-stderr-to calc-ast_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c calc-ast_stripped.ml)))))

(rule (alias test)
  (action (diff calc-ast_stripped.ml.log.exp calc-ast_stripped.ml.log)))

(rule (target calc-locations.opp.out) (deps calc-locations.mly)
  (action
    (with-outputs-to calc-locations.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff calc-locations.opp.exp calc-locations.opp.out)))

(rule
  (targets calc-locations.out calc-locations.automaton
    calc-locations.automaton.resolved calc-locations.conflicts
    calc-locations.timings)
  (deps calc-locations.mly)
  (action
    (with-outputs-to calc-locations.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to calc-locations.timings %{deps})))))

(rule (alias quick) (action (diff calc-locations.exp calc-locations.out)))

(rule (alias quick)
  (action (diff calc-locations.automaton.exp calc-locations.automaton)))

(rule (alias quick)
  (action
    (diff calc-locations.automaton.resolved.exp
      calc-locations.automaton.resolved)))

(rule (alias quick)
  (action (diff calc-locations.conflicts.exp calc-locations.conflicts)))

(rule (target calc-locations_stripped.mly) (deps calc-locations.mly)
  (action
    (with-stderr-to calc-locations_stripped.ignored
      (with-stdout-to calc-locations_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets calc-locations_stripped.log calc-locations_stripped.mli
    calc-locations_stripped.ml calc-locations_stripped.stacklang
    calc-locations_stripped.timings calc-locations_stripped.scount
    calc-locations_stripped.dcount)
  (deps calc-locations_stripped.mly)
  (action
    (with-outputs-to calc-locations_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to calc-locations_stripped.timings %{deps})))))

(alias (name quick) (deps
                      calc-locations_stripped.stacklang))

(rule (targets calc-locations_stripped.cmi calc-locations_stripped.mli.log)
  (deps calc-locations_stripped.mli)
  (action
    (with-stdout-to calc-locations_stripped.mli.dtimings
      (with-stderr-to calc-locations_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c calc-locations_stripped.mli)))))

(rule (targets calc-locations_stripped.cmo calc-locations_stripped.ml.log)
  (deps calc-locations_stripped.ml calc-locations_stripped.cmi)
  (action
    (with-stdout-to calc-locations_stripped.ml.dtimings
      (with-stderr-to calc-locations_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c calc-locations_stripped.ml)))))

(rule (alias test)
  (action
    (diff calc-locations_stripped.ml.log.exp calc-locations_stripped.ml.log)))

(rule (target calc-never-useful.opp.out) (deps calc-never-useful.mly)
  (action
    (with-outputs-to calc-never-useful.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:calc-never-useful.flags}
          %{deps})))))

(rule (alias quick)
  (action (diff calc-never-useful.opp.exp calc-never-useful.opp.out)))

(rule
  (targets calc-never-useful.out calc-never-useful.automaton
    calc-never-useful.automaton.resolved calc-never-useful.conflicts
    calc-never-useful.timings)
  (deps calc-never-useful.mly)
  (action
    (with-outputs-to calc-never-useful.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to calc-never-useful.timings
          %{read-lines:calc-never-useful.flags} %{deps})))))

(rule (alias quick)
  (action (diff calc-never-useful.exp calc-never-useful.out)))

(rule (alias quick)
  (action (diff calc-never-useful.automaton.exp calc-never-useful.automaton)))

(rule (alias quick)
  (action
    (diff calc-never-useful.automaton.resolved.exp
      calc-never-useful.automaton.resolved)))

(rule (alias quick)
  (action (diff calc-never-useful.conflicts.exp calc-never-useful.conflicts)))

(rule (target calc-never-useful_stripped.mly) (deps calc-never-useful.mly)
  (action
    (with-stderr-to calc-never-useful_stripped.ignored
      (with-stdout-to calc-never-useful_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu
            %{read-lines:calc-never-useful.flags} %{deps}))))))

(rule
  (targets calc-never-useful_stripped.log calc-never-useful_stripped.mli
    calc-never-useful_stripped.ml calc-never-useful_stripped.stacklang
    calc-never-useful_stripped.timings calc-never-useful_stripped.scount
    calc-never-useful_stripped.dcount)
  (deps calc-never-useful_stripped.mly)
  (action
    (with-outputs-to calc-never-useful_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to calc-never-useful_stripped.timings
          %{read-lines:calc-never-useful.flags} %{deps})))))

(alias (name quick) (deps
                      calc-never-useful_stripped.stacklang))

(rule
  (targets calc-never-useful_stripped.cmi calc-never-useful_stripped.mli.log)
  (deps calc-never-useful_stripped.mli)
  (action
    (with-stdout-to calc-never-useful_stripped.mli.dtimings
      (with-stderr-to calc-never-useful_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c calc-never-useful_stripped.mli)))))

(rule
  (targets calc-never-useful_stripped.cmo calc-never-useful_stripped.ml.log)
  (deps calc-never-useful_stripped.ml calc-never-useful_stripped.cmi)
  (action
    (with-stdout-to calc-never-useful_stripped.ml.dtimings
      (with-stderr-to calc-never-useful_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c calc-never-useful_stripped.ml)))))

(rule (alias test)
  (action
    (diff calc-never-useful_stripped.ml.log.exp
      calc-never-useful_stripped.ml.log)))

(rule (target calc-new-syntax.opp.out) (deps calc-new-syntax.mly)
  (action
    (with-outputs-to calc-new-syntax.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff calc-new-syntax.opp.exp calc-new-syntax.opp.out)))

(rule
  (targets calc-new-syntax.out calc-new-syntax.automaton
    calc-new-syntax.automaton.resolved calc-new-syntax.conflicts
    calc-new-syntax.timings)
  (deps calc-new-syntax.mly)
  (action
    (with-outputs-to calc-new-syntax.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to calc-new-syntax.timings %{deps})))))

(rule (alias quick) (action (diff calc-new-syntax.exp calc-new-syntax.out)))

(rule (alias quick)
  (action (diff calc-new-syntax.automaton.exp calc-new-syntax.automaton)))

(rule (alias quick)
  (action
    (diff calc-new-syntax.automaton.resolved.exp
      calc-new-syntax.automaton.resolved)))

(rule (alias quick)
  (action (diff calc-new-syntax.conflicts.exp calc-new-syntax.conflicts)))

(rule (target calc-new-syntax_stripped.mly) (deps calc-new-syntax.mly)
  (action
    (with-stderr-to calc-new-syntax_stripped.ignored
      (with-stdout-to calc-new-syntax_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets calc-new-syntax_stripped.log calc-new-syntax_stripped.mli
    calc-new-syntax_stripped.ml calc-new-syntax_stripped.stacklang
    calc-new-syntax_stripped.timings calc-new-syntax_stripped.scount
    calc-new-syntax_stripped.dcount)
  (deps calc-new-syntax_stripped.mly)
  (action
    (with-outputs-to calc-new-syntax_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to calc-new-syntax_stripped.timings %{deps})))))

(alias (name quick) (deps
                      calc-new-syntax_stripped.stacklang))

(rule (targets calc-new-syntax_stripped.cmi calc-new-syntax_stripped.mli.log)
  (deps calc-new-syntax_stripped.mli)
  (action
    (with-stdout-to calc-new-syntax_stripped.mli.dtimings
      (with-stderr-to calc-new-syntax_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c calc-new-syntax_stripped.mli)))))

(rule (targets calc-new-syntax_stripped.cmo calc-new-syntax_stripped.ml.log)
  (deps calc-new-syntax_stripped.ml calc-new-syntax_stripped.cmi)
  (action
    (with-stdout-to calc-new-syntax_stripped.ml.dtimings
      (with-stderr-to calc-new-syntax_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c calc-new-syntax_stripped.ml)))))

(rule (alias test)
  (action
    (diff calc-new-syntax_stripped.ml.log.exp
      calc-new-syntax_stripped.ml.log)))

(rule (target camltemplate.1.0.2-ctParser.opp.out)
  (deps camltemplate.1.0.2-ctParser.mly)
  (action
    (with-outputs-to camltemplate.1.0.2-ctParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff camltemplate.1.0.2-ctParser.opp.exp
      camltemplate.1.0.2-ctParser.opp.out)))

(rule
  (targets camltemplate.1.0.2-ctParser.out
    camltemplate.1.0.2-ctParser.automaton
    camltemplate.1.0.2-ctParser.automaton.resolved
    camltemplate.1.0.2-ctParser.conflicts
    camltemplate.1.0.2-ctParser.timings)
  (deps camltemplate.1.0.2-ctParser.mly)
  (action
    (with-outputs-to camltemplate.1.0.2-ctParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to camltemplate.1.0.2-ctParser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff camltemplate.1.0.2-ctParser.exp camltemplate.1.0.2-ctParser.out)))

(rule (alias quick)
  (action
    (diff camltemplate.1.0.2-ctParser.automaton.exp
      camltemplate.1.0.2-ctParser.automaton)))

(rule (alias quick)
  (action
    (diff camltemplate.1.0.2-ctParser.automaton.resolved.exp
      camltemplate.1.0.2-ctParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff camltemplate.1.0.2-ctParser.conflicts.exp
      camltemplate.1.0.2-ctParser.conflicts)))

(rule (target camltemplate_1_0_2-ctParser_stripped.mly)
  (deps camltemplate.1.0.2-ctParser.mly)
  (action
    (with-stderr-to camltemplate_1_0_2-ctParser_stripped.ignored
      (with-stdout-to camltemplate_1_0_2-ctParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets camltemplate_1_0_2-ctParser_stripped.log
    camltemplate_1_0_2-ctParser_stripped.mli
    camltemplate_1_0_2-ctParser_stripped.ml
    camltemplate_1_0_2-ctParser_stripped.stacklang
    camltemplate_1_0_2-ctParser_stripped.timings
    camltemplate_1_0_2-ctParser_stripped.scount
    camltemplate_1_0_2-ctParser_stripped.dcount)
  (deps camltemplate_1_0_2-ctParser_stripped.mly)
  (action
    (with-outputs-to camltemplate_1_0_2-ctParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to camltemplate_1_0_2-ctParser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      camltemplate_1_0_2-ctParser_stripped.stacklang))

(rule
  (targets camltemplate_1_0_2-ctParser_stripped.cmi
    camltemplate_1_0_2-ctParser_stripped.mli.log)
  (deps camltemplate_1_0_2-ctParser_stripped.mli)
  (action
    (with-stdout-to camltemplate_1_0_2-ctParser_stripped.mli.dtimings
      (with-stderr-to camltemplate_1_0_2-ctParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          camltemplate_1_0_2-ctParser_stripped.mli)))))

(rule
  (targets camltemplate_1_0_2-ctParser_stripped.cmo
    camltemplate_1_0_2-ctParser_stripped.ml.log)
  (deps camltemplate_1_0_2-ctParser_stripped.ml
    camltemplate_1_0_2-ctParser_stripped.cmi)
  (action
    (with-stdout-to camltemplate_1_0_2-ctParser_stripped.ml.dtimings
      (with-stderr-to camltemplate_1_0_2-ctParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          camltemplate_1_0_2-ctParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff camltemplate_1_0_2-ctParser_stripped.ml.log.exp
      camltemplate_1_0_2-ctParser_stripped.ml.log)))

(rule (target camomile.1.0.1-colParser.opp.out)
  (deps camomile.1.0.1-colParser.mly)
  (action
    (with-outputs-to camomile.1.0.1-colParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff camomile.1.0.1-colParser.opp.exp camomile.1.0.1-colParser.opp.out)))

(rule
  (targets camomile.1.0.1-colParser.out camomile.1.0.1-colParser.automaton
    camomile.1.0.1-colParser.automaton.resolved
    camomile.1.0.1-colParser.conflicts camomile.1.0.1-colParser.timings)
  (deps camomile.1.0.1-colParser.mly)
  (action
    (with-outputs-to camomile.1.0.1-colParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to camomile.1.0.1-colParser.timings %{deps})))))

(rule (alias quick)
  (action (diff camomile.1.0.1-colParser.exp camomile.1.0.1-colParser.out)))

(rule (alias quick)
  (action
    (diff camomile.1.0.1-colParser.automaton.exp
      camomile.1.0.1-colParser.automaton)))

(rule (alias quick)
  (action
    (diff camomile.1.0.1-colParser.automaton.resolved.exp
      camomile.1.0.1-colParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff camomile.1.0.1-colParser.conflicts.exp
      camomile.1.0.1-colParser.conflicts)))

(rule (target camomile_1_0_1-colParser_stripped.mly)
  (deps camomile.1.0.1-colParser.mly)
  (action
    (with-stderr-to camomile_1_0_1-colParser_stripped.ignored
      (with-stdout-to camomile_1_0_1-colParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets camomile_1_0_1-colParser_stripped.log
    camomile_1_0_1-colParser_stripped.mli
    camomile_1_0_1-colParser_stripped.ml
    camomile_1_0_1-colParser_stripped.stacklang
    camomile_1_0_1-colParser_stripped.timings
    camomile_1_0_1-colParser_stripped.scount
    camomile_1_0_1-colParser_stripped.dcount)
  (deps camomile_1_0_1-colParser_stripped.mly)
  (action
    (with-outputs-to camomile_1_0_1-colParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to camomile_1_0_1-colParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      camomile_1_0_1-colParser_stripped.stacklang))

(rule
  (targets camomile_1_0_1-colParser_stripped.cmi
    camomile_1_0_1-colParser_stripped.mli.log)
  (deps camomile_1_0_1-colParser_stripped.mli)
  (action
    (with-stdout-to camomile_1_0_1-colParser_stripped.mli.dtimings
      (with-stderr-to camomile_1_0_1-colParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          camomile_1_0_1-colParser_stripped.mli)))))

(rule
  (targets camomile_1_0_1-colParser_stripped.cmo
    camomile_1_0_1-colParser_stripped.ml.log)
  (deps camomile_1_0_1-colParser_stripped.ml
    camomile_1_0_1-colParser_stripped.cmi)
  (action
    (with-stdout-to camomile_1_0_1-colParser_stripped.ml.dtimings
      (with-stderr-to camomile_1_0_1-colParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          camomile_1_0_1-colParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff camomile_1_0_1-colParser_stripped.ml.log.exp
      camomile_1_0_1-colParser_stripped.ml.log)))

(rule (target catala.opp.out) (deps catala.mly)
  (action
    (with-outputs-to catala.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff catala.opp.exp catala.opp.out)))

(rule
  (targets catala.out catala.automaton catala.automaton.resolved
    catala.conflicts catala.timings)
  (deps catala.mly)
  (action
    (with-outputs-to catala.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to catala.timings %{deps})))))

(rule (alias quick) (action (diff catala.exp catala.out)))

(rule (alias quick) (action (diff catala.automaton.exp catala.automaton)))

(rule (alias quick)
  (action (diff catala.automaton.resolved.exp catala.automaton.resolved)))

(rule (alias quick) (action (diff catala.conflicts.exp catala.conflicts)))

(rule (target catala_stripped.mly) (deps catala.mly)
  (action
    (with-stderr-to catala_stripped.ignored
      (with-stdout-to catala_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets catala_stripped.log catala_stripped.mli catala_stripped.ml
    catala_stripped.stacklang catala_stripped.timings catala_stripped.scount
    catala_stripped.dcount)
  (deps catala_stripped.mly)
  (action
    (with-outputs-to catala_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to catala_stripped.timings %{deps})))))

(alias (name quick) (deps
                      catala_stripped.stacklang))

(rule (targets catala_stripped.cmi catala_stripped.mli.log)
  (deps catala_stripped.mli)
  (action
    (with-stdout-to catala_stripped.mli.dtimings
      (with-stderr-to catala_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c catala_stripped.mli)))))

(rule (targets catala_stripped.cmo catala_stripped.ml.log)
  (deps catala_stripped.ml catala_stripped.cmi)
  (action
    (with-stdout-to catala_stripped.ml.dtimings
      (with-stderr-to catala_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c catala_stripped.ml)))))

(rule (alias test)
  (action (diff catala_stripped.ml.log.exp catala_stripped.ml.log)))

(rule (target cca_cpp.opp.out) (deps cca_cpp.mly)
  (action
    (with-outputs-to cca_cpp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cca_cpp.opp.exp cca_cpp.opp.out)))

(rule
  (targets cca_cpp.out cca_cpp.automaton cca_cpp.automaton.resolved
    cca_cpp.conflicts cca_cpp.timings)
  (deps cca_cpp.mly)
  (action
    (with-outputs-to cca_cpp.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cca_cpp.timings %{deps})))))

(rule (alias quick) (action (diff cca_cpp.exp cca_cpp.out)))

(rule (alias quick) (action (diff cca_cpp.automaton.exp cca_cpp.automaton)))

(rule (alias quick)
  (action (diff cca_cpp.automaton.resolved.exp cca_cpp.automaton.resolved)))

(rule (alias quick) (action (diff cca_cpp.conflicts.exp cca_cpp.conflicts)))

(rule (target cca_fortran.opp.out) (deps cca_fortran.mly)
  (action
    (with-outputs-to cca_fortran.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cca_fortran.opp.exp cca_fortran.opp.out)))

(rule
  (targets cca_fortran.out cca_fortran.automaton
    cca_fortran.automaton.resolved cca_fortran.conflicts cca_fortran.timings)
  (deps cca_fortran.mly)
  (action
    (with-outputs-to cca_fortran.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cca_fortran.timings %{deps})))))

(rule (alias quick) (action (diff cca_fortran.exp cca_fortran.out)))

(rule (alias quick)
  (action (diff cca_fortran.automaton.exp cca_fortran.automaton)))

(rule (alias quick)
  (action
    (diff cca_fortran.automaton.resolved.exp cca_fortran.automaton.resolved)))

(rule (alias quick)
  (action (diff cca_fortran.conflicts.exp cca_fortran.conflicts)))

(rule (target cca_fortran_stripped.mly) (deps cca_fortran.mly)
  (action
    (with-stderr-to cca_fortran_stripped.ignored
      (with-stdout-to cca_fortran_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cca_fortran_stripped.log cca_fortran_stripped.mli
    cca_fortran_stripped.ml cca_fortran_stripped.stacklang
    cca_fortran_stripped.timings cca_fortran_stripped.scount
    cca_fortran_stripped.dcount)
  (deps cca_fortran_stripped.mly)
  (action
    (with-outputs-to cca_fortran_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cca_fortran_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cca_fortran_stripped.stacklang))

(rule (targets cca_fortran_stripped.cmi cca_fortran_stripped.mli.log)
  (deps cca_fortran_stripped.mli)
  (action
    (with-stdout-to cca_fortran_stripped.mli.dtimings
      (with-stderr-to cca_fortran_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cca_fortran_stripped.mli)))))

(rule (targets cca_fortran_stripped.cmo cca_fortran_stripped.ml.log)
  (deps cca_fortran_stripped.ml cca_fortran_stripped.cmi)
  (action
    (with-stdout-to cca_fortran_stripped.ml.dtimings
      (with-stderr-to cca_fortran_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cca_fortran_stripped.ml)))))

(rule (alias test)
  (action (diff cca_fortran_stripped.ml.log.exp cca_fortran_stripped.ml.log)))

(rule (target cca_java.opp.out) (deps cca_java.mly)
  (action
    (with-outputs-to cca_java.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cca_java.opp.exp cca_java.opp.out)))

(rule
  (targets cca_java.out cca_java.automaton cca_java.automaton.resolved
    cca_java.conflicts cca_java.timings)
  (deps cca_java.mly)
  (action
    (with-outputs-to cca_java.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cca_java.timings %{deps})))))

(rule (alias quick) (action (diff cca_java.exp cca_java.out)))

(rule (alias quick)
  (action (diff cca_java.automaton.exp cca_java.automaton)))

(rule (alias quick)
  (action (diff cca_java.automaton.resolved.exp cca_java.automaton.resolved)))

(rule (alias quick)
  (action (diff cca_java.conflicts.exp cca_java.conflicts)))

(rule (target cca_java_stripped.mly) (deps cca_java.mly)
  (action
    (with-stderr-to cca_java_stripped.ignored
      (with-stdout-to cca_java_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cca_java_stripped.log cca_java_stripped.mli cca_java_stripped.ml
    cca_java_stripped.stacklang cca_java_stripped.timings
    cca_java_stripped.scount cca_java_stripped.dcount)
  (deps cca_java_stripped.mly)
  (action
    (with-outputs-to cca_java_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cca_java_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cca_java_stripped.stacklang))

(rule (targets cca_java_stripped.cmi cca_java_stripped.mli.log)
  (deps cca_java_stripped.mli)
  (action
    (with-stdout-to cca_java_stripped.mli.dtimings
      (with-stderr-to cca_java_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cca_java_stripped.mli)))))

(rule (targets cca_java_stripped.cmo cca_java_stripped.ml.log)
  (deps cca_java_stripped.ml cca_java_stripped.cmi)
  (action
    (with-stdout-to cca_java_stripped.ml.dtimings
      (with-stderr-to cca_java_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cca_java_stripped.ml)))))

(rule (alias test)
  (action (diff cca_java_stripped.ml.log.exp cca_java_stripped.ml.log)))

(rule (target cca_python.opp.out) (deps cca_python.mly)
  (action
    (with-outputs-to cca_python.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cca_python.opp.exp cca_python.opp.out)))

(rule
  (targets cca_python.out cca_python.automaton cca_python.automaton.resolved
    cca_python.conflicts cca_python.timings)
  (deps cca_python.mly)
  (action
    (with-outputs-to cca_python.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cca_python.timings %{deps})))))

(rule (alias quick) (action (diff cca_python.exp cca_python.out)))

(rule (alias quick)
  (action (diff cca_python.automaton.exp cca_python.automaton)))

(rule (alias quick)
  (action
    (diff cca_python.automaton.resolved.exp cca_python.automaton.resolved)))

(rule (alias quick)
  (action (diff cca_python.conflicts.exp cca_python.conflicts)))

(rule (target cca_python_stripped.mly) (deps cca_python.mly)
  (action
    (with-stderr-to cca_python_stripped.ignored
      (with-stdout-to cca_python_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cca_python_stripped.log cca_python_stripped.mli
    cca_python_stripped.ml cca_python_stripped.stacklang
    cca_python_stripped.timings cca_python_stripped.scount
    cca_python_stripped.dcount)
  (deps cca_python_stripped.mly)
  (action
    (with-outputs-to cca_python_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cca_python_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cca_python_stripped.stacklang))

(rule (targets cca_python_stripped.cmi cca_python_stripped.mli.log)
  (deps cca_python_stripped.mli)
  (action
    (with-stdout-to cca_python_stripped.mli.dtimings
      (with-stderr-to cca_python_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cca_python_stripped.mli)))))

(rule (targets cca_python_stripped.cmo cca_python_stripped.ml.log)
  (deps cca_python_stripped.ml cca_python_stripped.cmi)
  (action
    (with-stdout-to cca_python_stripped.ml.dtimings
      (with-stderr-to cca_python_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cca_python_stripped.ml)))))

(rule (alias test)
  (action (diff cca_python_stripped.ml.log.exp cca_python_stripped.ml.log)))

(rule (target cca_verilog.opp.out) (deps cca_verilog.mly)
  (action
    (with-outputs-to cca_verilog.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cca_verilog.opp.exp cca_verilog.opp.out)))

(rule
  (targets cca_verilog.out cca_verilog.automaton
    cca_verilog.automaton.resolved cca_verilog.conflicts cca_verilog.timings)
  (deps cca_verilog.mly)
  (action
    (with-outputs-to cca_verilog.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cca_verilog.timings %{deps})))))

(rule (alias quick) (action (diff cca_verilog.exp cca_verilog.out)))

(rule (alias quick)
  (action (diff cca_verilog.automaton.exp cca_verilog.automaton)))

(rule (alias quick)
  (action
    (diff cca_verilog.automaton.resolved.exp cca_verilog.automaton.resolved)))

(rule (alias quick)
  (action (diff cca_verilog.conflicts.exp cca_verilog.conflicts)))

(rule (target ccss.1.6-parser.opp.out) (deps ccss.1.6-parser.mly)
  (action
    (with-outputs-to ccss.1.6-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ccss.1.6-parser.opp.exp ccss.1.6-parser.opp.out)))

(rule
  (targets ccss.1.6-parser.out ccss.1.6-parser.automaton
    ccss.1.6-parser.automaton.resolved ccss.1.6-parser.conflicts
    ccss.1.6-parser.timings)
  (deps ccss.1.6-parser.mly)
  (action
    (with-outputs-to ccss.1.6-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ccss.1.6-parser.timings %{deps})))))

(rule (alias quick) (action (diff ccss.1.6-parser.exp ccss.1.6-parser.out)))

(rule (alias quick)
  (action (diff ccss.1.6-parser.automaton.exp ccss.1.6-parser.automaton)))

(rule (alias quick)
  (action
    (diff ccss.1.6-parser.automaton.resolved.exp
      ccss.1.6-parser.automaton.resolved)))

(rule (alias quick)
  (action (diff ccss.1.6-parser.conflicts.exp ccss.1.6-parser.conflicts)))

(rule (target ccss_1_6-parser_stripped.mly) (deps ccss.1.6-parser.mly)
  (action
    (with-stderr-to ccss_1_6-parser_stripped.ignored
      (with-stdout-to ccss_1_6-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ccss_1_6-parser_stripped.log ccss_1_6-parser_stripped.mli
    ccss_1_6-parser_stripped.ml ccss_1_6-parser_stripped.stacklang
    ccss_1_6-parser_stripped.timings ccss_1_6-parser_stripped.scount
    ccss_1_6-parser_stripped.dcount)
  (deps ccss_1_6-parser_stripped.mly)
  (action
    (with-outputs-to ccss_1_6-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ccss_1_6-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ccss_1_6-parser_stripped.stacklang))

(rule (targets ccss_1_6-parser_stripped.cmi ccss_1_6-parser_stripped.mli.log)
  (deps ccss_1_6-parser_stripped.mli)
  (action
    (with-stdout-to ccss_1_6-parser_stripped.mli.dtimings
      (with-stderr-to ccss_1_6-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ccss_1_6-parser_stripped.mli)))))

(rule (targets ccss_1_6-parser_stripped.cmo ccss_1_6-parser_stripped.ml.log)
  (deps ccss_1_6-parser_stripped.ml ccss_1_6-parser_stripped.cmi)
  (action
    (with-stdout-to ccss_1_6-parser_stripped.ml.dtimings
      (with-stderr-to ccss_1_6-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ccss_1_6-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff ccss_1_6-parser_stripped.ml.log.exp
      ccss_1_6-parser_stripped.ml.log)))

(rule (target charrua-client.0.9-dhcp_parser.opp.out)
  (deps charrua-client.0.9-dhcp_parser.mly)
  (action
    (with-outputs-to charrua-client.0.9-dhcp_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff charrua-client.0.9-dhcp_parser.opp.exp
      charrua-client.0.9-dhcp_parser.opp.out)))

(rule
  (targets charrua-client.0.9-dhcp_parser.out
    charrua-client.0.9-dhcp_parser.automaton
    charrua-client.0.9-dhcp_parser.automaton.resolved
    charrua-client.0.9-dhcp_parser.conflicts
    charrua-client.0.9-dhcp_parser.timings)
  (deps charrua-client.0.9-dhcp_parser.mly)
  (action
    (with-outputs-to charrua-client.0.9-dhcp_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to charrua-client.0.9-dhcp_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff charrua-client.0.9-dhcp_parser.exp
      charrua-client.0.9-dhcp_parser.out)))

(rule (alias quick)
  (action
    (diff charrua-client.0.9-dhcp_parser.automaton.exp
      charrua-client.0.9-dhcp_parser.automaton)))

(rule (alias quick)
  (action
    (diff charrua-client.0.9-dhcp_parser.automaton.resolved.exp
      charrua-client.0.9-dhcp_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff charrua-client.0.9-dhcp_parser.conflicts.exp
      charrua-client.0.9-dhcp_parser.conflicts)))

(rule (target charrua-client_0_9-dhcp_parser_stripped.mly)
  (deps charrua-client.0.9-dhcp_parser.mly)
  (action
    (with-stderr-to charrua-client_0_9-dhcp_parser_stripped.ignored
      (with-stdout-to charrua-client_0_9-dhcp_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets charrua-client_0_9-dhcp_parser_stripped.log
    charrua-client_0_9-dhcp_parser_stripped.mli
    charrua-client_0_9-dhcp_parser_stripped.ml
    charrua-client_0_9-dhcp_parser_stripped.stacklang
    charrua-client_0_9-dhcp_parser_stripped.timings
    charrua-client_0_9-dhcp_parser_stripped.scount
    charrua-client_0_9-dhcp_parser_stripped.dcount)
  (deps charrua-client_0_9-dhcp_parser_stripped.mly)
  (action
    (with-outputs-to charrua-client_0_9-dhcp_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to charrua-client_0_9-dhcp_parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      charrua-client_0_9-dhcp_parser_stripped.stacklang))

(rule
  (targets charrua-client_0_9-dhcp_parser_stripped.cmi
    charrua-client_0_9-dhcp_parser_stripped.mli.log)
  (deps charrua-client_0_9-dhcp_parser_stripped.mli)
  (action
    (with-stdout-to charrua-client_0_9-dhcp_parser_stripped.mli.dtimings
      (with-stderr-to charrua-client_0_9-dhcp_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          charrua-client_0_9-dhcp_parser_stripped.mli)))))

(rule
  (targets charrua-client_0_9-dhcp_parser_stripped.cmo
    charrua-client_0_9-dhcp_parser_stripped.ml.log)
  (deps charrua-client_0_9-dhcp_parser_stripped.ml
    charrua-client_0_9-dhcp_parser_stripped.cmi)
  (action
    (with-stdout-to charrua-client_0_9-dhcp_parser_stripped.ml.dtimings
      (with-stderr-to charrua-client_0_9-dhcp_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          charrua-client_0_9-dhcp_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff charrua-client_0_9-dhcp_parser_stripped.ml.log.exp
      charrua-client_0_9-dhcp_parser_stripped.ml.log)))

(rule (target christian.opp.out) (deps christian.mly)
  (action
    (with-outputs-to christian.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff christian.opp.exp christian.opp.out)))

(rule
  (targets christian.out christian.automaton christian.automaton.resolved
    christian.conflicts christian.timings)
  (deps christian.mly)
  (action
    (with-outputs-to christian.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to christian.timings %{deps})))))

(rule (alias quick) (action (diff christian.exp christian.out)))

(rule (alias quick)
  (action (diff christian.automaton.exp christian.automaton)))

(rule (alias quick)
  (action
    (diff christian.automaton.resolved.exp christian.automaton.resolved)))

(rule (alias quick)
  (action (diff christian.conflicts.exp christian.conflicts)))

(rule (target christian_stripped.mly) (deps christian.mly)
  (action
    (with-stderr-to christian_stripped.ignored
      (with-stdout-to christian_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets christian_stripped.log christian_stripped.mli
    christian_stripped.ml christian_stripped.stacklang
    christian_stripped.timings christian_stripped.scount
    christian_stripped.dcount)
  (deps christian_stripped.mly)
  (action
    (with-outputs-to christian_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to christian_stripped.timings %{deps})))))

(alias (name quick) (deps
                      christian_stripped.stacklang))

(rule (targets christian_stripped.cmi christian_stripped.mli.log)
  (deps christian_stripped.mli)
  (action
    (with-stdout-to christian_stripped.mli.dtimings
      (with-stderr-to christian_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c christian_stripped.mli)))))

(rule (targets christian_stripped.cmo christian_stripped.ml.log)
  (deps christian_stripped.ml christian_stripped.cmi)
  (action
    (with-stdout-to christian_stripped.ml.dtimings
      (with-stderr-to christian_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c christian_stripped.ml)))))

(rule (alias test)
  (action (diff christian_stripped.ml.log.exp christian_stripped.ml.log)))

(rule (target cigen-cparser.opp.out) (deps cigen-cparser.mly)
  (action
    (with-outputs-to cigen-cparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff cigen-cparser.opp.exp cigen-cparser.opp.out)))

(rule
  (targets cigen-cparser.out cigen-cparser.automaton
    cigen-cparser.automaton.resolved cigen-cparser.conflicts
    cigen-cparser.timings)
  (deps cigen-cparser.mly)
  (action
    (with-outputs-to cigen-cparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cigen-cparser.timings %{deps})))))

(rule (alias quick) (action (diff cigen-cparser.exp cigen-cparser.out)))

(rule (alias quick)
  (action (diff cigen-cparser.automaton.exp cigen-cparser.automaton)))

(rule (alias quick)
  (action
    (diff cigen-cparser.automaton.resolved.exp
      cigen-cparser.automaton.resolved)))

(rule (alias quick)
  (action (diff cigen-cparser.conflicts.exp cigen-cparser.conflicts)))

(rule (target cigen-cparser_stripped.mly) (deps cigen-cparser.mly)
  (action
    (with-stderr-to cigen-cparser_stripped.ignored
      (with-stdout-to cigen-cparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cigen-cparser_stripped.log cigen-cparser_stripped.mli
    cigen-cparser_stripped.ml cigen-cparser_stripped.stacklang
    cigen-cparser_stripped.timings cigen-cparser_stripped.scount
    cigen-cparser_stripped.dcount)
  (deps cigen-cparser_stripped.mly)
  (action
    (with-outputs-to cigen-cparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cigen-cparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cigen-cparser_stripped.stacklang))

(rule (targets cigen-cparser_stripped.cmi cigen-cparser_stripped.mli.log)
  (deps cigen-cparser_stripped.mli)
  (action
    (with-stdout-to cigen-cparser_stripped.mli.dtimings
      (with-stderr-to cigen-cparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cigen-cparser_stripped.mli)))))

(rule (targets cigen-cparser_stripped.cmo cigen-cparser_stripped.ml.log)
  (deps cigen-cparser_stripped.ml cigen-cparser_stripped.cmi)
  (action
    (with-stdout-to cigen-cparser_stripped.ml.dtimings
      (with-stderr-to cigen-cparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cigen-cparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff cigen-cparser_stripped.ml.log.exp cigen-cparser_stripped.ml.log)))

(rule (target cil-cparser.opp.out) (deps cil-cparser.mly)
  (action
    (with-outputs-to cil-cparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cil-cparser.opp.exp cil-cparser.opp.out)))

(rule
  (targets cil-cparser.out cil-cparser.automaton
    cil-cparser.automaton.resolved cil-cparser.conflicts cil-cparser.timings)
  (deps cil-cparser.mly)
  (action
    (with-outputs-to cil-cparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cil-cparser.timings %{deps})))))

(rule (alias quick) (action (diff cil-cparser.exp cil-cparser.out)))

(rule (alias quick)
  (action (diff cil-cparser.automaton.exp cil-cparser.automaton)))

(rule (alias quick)
  (action
    (diff cil-cparser.automaton.resolved.exp cil-cparser.automaton.resolved)))

(rule (alias quick)
  (action (diff cil-cparser.conflicts.exp cil-cparser.conflicts)))

(rule (target cil-cparser_stripped.mly) (deps cil-cparser.mly)
  (action
    (with-stderr-to cil-cparser_stripped.ignored
      (with-stdout-to cil-cparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cil-cparser_stripped.log cil-cparser_stripped.mli
    cil-cparser_stripped.ml cil-cparser_stripped.stacklang
    cil-cparser_stripped.timings cil-cparser_stripped.scount
    cil-cparser_stripped.dcount)
  (deps cil-cparser_stripped.mly)
  (action
    (with-outputs-to cil-cparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cil-cparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cil-cparser_stripped.stacklang))

(rule (targets cil-cparser_stripped.cmi cil-cparser_stripped.mli.log)
  (deps cil-cparser_stripped.mli)
  (action
    (with-stdout-to cil-cparser_stripped.mli.dtimings
      (with-stderr-to cil-cparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cil-cparser_stripped.mli)))))

(rule (targets cil-cparser_stripped.cmo cil-cparser_stripped.ml.log)
  (deps cil-cparser_stripped.ml cil-cparser_stripped.cmi)
  (action
    (with-stdout-to cil-cparser_stripped.ml.dtimings
      (with-stderr-to cil-cparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cil-cparser_stripped.ml)))))

(rule (alias test)
  (action (diff cil-cparser_stripped.ml.log.exp cil-cparser_stripped.ml.log)))

(rule (target cil-formatparse.opp.out) (deps cil-formatparse.mly)
  (action
    (with-outputs-to cil-formatparse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff cil-formatparse.opp.exp cil-formatparse.opp.out)))

(rule
  (targets cil-formatparse.out cil-formatparse.automaton
    cil-formatparse.automaton.resolved cil-formatparse.conflicts
    cil-formatparse.timings)
  (deps cil-formatparse.mly)
  (action
    (with-outputs-to cil-formatparse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cil-formatparse.timings %{deps})))))

(rule (alias quick) (action (diff cil-formatparse.exp cil-formatparse.out)))

(rule (alias quick)
  (action (diff cil-formatparse.automaton.exp cil-formatparse.automaton)))

(rule (alias quick)
  (action
    (diff cil-formatparse.automaton.resolved.exp
      cil-formatparse.automaton.resolved)))

(rule (alias quick)
  (action (diff cil-formatparse.conflicts.exp cil-formatparse.conflicts)))

(rule (target cil-formatparse_stripped.mly) (deps cil-formatparse.mly)
  (action
    (with-stderr-to cil-formatparse_stripped.ignored
      (with-stdout-to cil-formatparse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cil-formatparse_stripped.log cil-formatparse_stripped.mli
    cil-formatparse_stripped.ml cil-formatparse_stripped.stacklang
    cil-formatparse_stripped.timings cil-formatparse_stripped.scount
    cil-formatparse_stripped.dcount)
  (deps cil-formatparse_stripped.mly)
  (action
    (with-outputs-to cil-formatparse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cil-formatparse_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cil-formatparse_stripped.stacklang))

(rule (targets cil-formatparse_stripped.cmi cil-formatparse_stripped.mli.log)
  (deps cil-formatparse_stripped.mli)
  (action
    (with-stdout-to cil-formatparse_stripped.mli.dtimings
      (with-stderr-to cil-formatparse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cil-formatparse_stripped.mli)))))

(rule (targets cil-formatparse_stripped.cmo cil-formatparse_stripped.ml.log)
  (deps cil-formatparse_stripped.ml cil-formatparse_stripped.cmi)
  (action
    (with-stdout-to cil-formatparse_stripped.ml.dtimings
      (with-stderr-to cil-formatparse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cil-formatparse_stripped.ml)))))

(rule (alias test)
  (action
    (diff cil-formatparse_stripped.ml.log.exp
      cil-formatparse_stripped.ml.log)))

(rule (target cime-coq.opp.out) (deps cime-coq.mly)
  (action
    (with-outputs-to cime-coq.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cime-coq.opp.exp cime-coq.opp.out)))

(rule
  (targets cime-coq.out cime-coq.automaton cime-coq.automaton.resolved
    cime-coq.conflicts cime-coq.timings)
  (deps cime-coq.mly)
  (action
    (with-outputs-to cime-coq.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-coq.timings %{deps})))))

(rule (alias quick) (action (diff cime-coq.exp cime-coq.out)))

(rule (alias quick)
  (action (diff cime-coq.automaton.exp cime-coq.automaton)))

(rule (alias quick)
  (action (diff cime-coq.automaton.resolved.exp cime-coq.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-coq.conflicts.exp cime-coq.conflicts)))

(rule (target cime-coq_stripped.mly) (deps cime-coq.mly)
  (action
    (with-stderr-to cime-coq_stripped.ignored
      (with-stdout-to cime-coq_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-coq_stripped.log cime-coq_stripped.mli cime-coq_stripped.ml
    cime-coq_stripped.stacklang cime-coq_stripped.timings
    cime-coq_stripped.scount cime-coq_stripped.dcount)
  (deps cime-coq_stripped.mly)
  (action
    (with-outputs-to cime-coq_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-coq_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-coq_stripped.stacklang))

(rule (targets cime-coq_stripped.cmi cime-coq_stripped.mli.log)
  (deps cime-coq_stripped.mli)
  (action
    (with-stdout-to cime-coq_stripped.mli.dtimings
      (with-stderr-to cime-coq_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-coq_stripped.mli)))))

(rule (targets cime-coq_stripped.cmo cime-coq_stripped.ml.log)
  (deps cime-coq_stripped.ml cime-coq_stripped.cmi)
  (action
    (with-stdout-to cime-coq_stripped.ml.dtimings
      (with-stderr-to cime-coq_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-coq_stripped.ml)))))

(rule (alias test)
  (action (diff cime-coq_stripped.ml.log.exp cime-coq_stripped.ml.log)))

(rule (target cime-genpoly.opp.out) (deps cime-genpoly.mly)
  (action
    (with-outputs-to cime-genpoly.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff cime-genpoly.opp.exp cime-genpoly.opp.out)))

(rule
  (targets cime-genpoly.out cime-genpoly.automaton
    cime-genpoly.automaton.resolved cime-genpoly.conflicts
    cime-genpoly.timings)
  (deps cime-genpoly.mly)
  (action
    (with-outputs-to cime-genpoly.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-genpoly.timings %{deps})))))

(rule (alias quick) (action (diff cime-genpoly.exp cime-genpoly.out)))

(rule (alias quick)
  (action (diff cime-genpoly.automaton.exp cime-genpoly.automaton)))

(rule (alias quick)
  (action
    (diff cime-genpoly.automaton.resolved.exp
      cime-genpoly.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-genpoly.conflicts.exp cime-genpoly.conflicts)))

(rule (target cime-genpoly_stripped.mly) (deps cime-genpoly.mly)
  (action
    (with-stderr-to cime-genpoly_stripped.ignored
      (with-stdout-to cime-genpoly_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-genpoly_stripped.log cime-genpoly_stripped.mli
    cime-genpoly_stripped.ml cime-genpoly_stripped.stacklang
    cime-genpoly_stripped.timings cime-genpoly_stripped.scount
    cime-genpoly_stripped.dcount)
  (deps cime-genpoly_stripped.mly)
  (action
    (with-outputs-to cime-genpoly_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-genpoly_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-genpoly_stripped.stacklang))

(rule (targets cime-genpoly_stripped.cmi cime-genpoly_stripped.mli.log)
  (deps cime-genpoly_stripped.mli)
  (action
    (with-stdout-to cime-genpoly_stripped.mli.dtimings
      (with-stderr-to cime-genpoly_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-genpoly_stripped.mli)))))

(rule (targets cime-genpoly_stripped.cmo cime-genpoly_stripped.ml.log)
  (deps cime-genpoly_stripped.ml cime-genpoly_stripped.cmi)
  (action
    (with-stdout-to cime-genpoly_stripped.ml.dtimings
      (with-stderr-to cime-genpoly_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-genpoly_stripped.ml)))))

(rule (alias test)
  (action
    (diff cime-genpoly_stripped.ml.log.exp cime-genpoly_stripped.ml.log)))

(rule (target cime-parameterized-signatures.opp.out)
  (deps cime-parameterized-signatures.mly)
  (action
    (with-outputs-to cime-parameterized-signatures.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff cime-parameterized-signatures.opp.exp
      cime-parameterized-signatures.opp.out)))

(rule
  (targets cime-parameterized-signatures.out
    cime-parameterized-signatures.automaton
    cime-parameterized-signatures.automaton.resolved
    cime-parameterized-signatures.conflicts
    cime-parameterized-signatures.timings)
  (deps cime-parameterized-signatures.mly)
  (action
    (with-outputs-to cime-parameterized-signatures.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-parameterized-signatures.timings %{deps})))))

(rule (alias quick)
  (action
    (diff cime-parameterized-signatures.exp
      cime-parameterized-signatures.out)))

(rule (alias quick)
  (action
    (diff cime-parameterized-signatures.automaton.exp
      cime-parameterized-signatures.automaton)))

(rule (alias quick)
  (action
    (diff cime-parameterized-signatures.automaton.resolved.exp
      cime-parameterized-signatures.automaton.resolved)))

(rule (alias quick)
  (action
    (diff cime-parameterized-signatures.conflicts.exp
      cime-parameterized-signatures.conflicts)))

(rule (target cime-parameterized-signatures_stripped.mly)
  (deps cime-parameterized-signatures.mly)
  (action
    (with-stderr-to cime-parameterized-signatures_stripped.ignored
      (with-stdout-to cime-parameterized-signatures_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-parameterized-signatures_stripped.log
    cime-parameterized-signatures_stripped.mli
    cime-parameterized-signatures_stripped.ml
    cime-parameterized-signatures_stripped.stacklang
    cime-parameterized-signatures_stripped.timings
    cime-parameterized-signatures_stripped.scount
    cime-parameterized-signatures_stripped.dcount)
  (deps cime-parameterized-signatures_stripped.mly)
  (action
    (with-outputs-to cime-parameterized-signatures_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-parameterized-signatures_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      cime-parameterized-signatures_stripped.stacklang))

(rule
  (targets cime-parameterized-signatures_stripped.cmi
    cime-parameterized-signatures_stripped.mli.log)
  (deps cime-parameterized-signatures_stripped.mli)
  (action
    (with-stdout-to cime-parameterized-signatures_stripped.mli.dtimings
      (with-stderr-to cime-parameterized-signatures_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          cime-parameterized-signatures_stripped.mli)))))

(rule
  (targets cime-parameterized-signatures_stripped.cmo
    cime-parameterized-signatures_stripped.ml.log)
  (deps cime-parameterized-signatures_stripped.ml
    cime-parameterized-signatures_stripped.cmi)
  (action
    (with-stdout-to cime-parameterized-signatures_stripped.ml.dtimings
      (with-stderr-to cime-parameterized-signatures_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          cime-parameterized-signatures_stripped.ml)))))

(rule (alias test)
  (action
    (diff cime-parameterized-signatures_stripped.ml.log.exp
      cime-parameterized-signatures_stripped.ml.log)))

(rule (target cime-poly.opp.out) (deps cime-poly.mly)
  (action
    (with-outputs-to cime-poly.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cime-poly.opp.exp cime-poly.opp.out)))

(rule
  (targets cime-poly.out cime-poly.automaton cime-poly.automaton.resolved
    cime-poly.conflicts cime-poly.timings)
  (deps cime-poly.mly)
  (action
    (with-outputs-to cime-poly.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-poly.timings %{deps})))))

(rule (alias quick) (action (diff cime-poly.exp cime-poly.out)))

(rule (alias quick)
  (action (diff cime-poly.automaton.exp cime-poly.automaton)))

(rule (alias quick)
  (action
    (diff cime-poly.automaton.resolved.exp cime-poly.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-poly.conflicts.exp cime-poly.conflicts)))

(rule (target cime-poly_stripped.mly) (deps cime-poly.mly)
  (action
    (with-stderr-to cime-poly_stripped.ignored
      (with-stdout-to cime-poly_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-poly_stripped.log cime-poly_stripped.mli
    cime-poly_stripped.ml cime-poly_stripped.stacklang
    cime-poly_stripped.timings cime-poly_stripped.scount
    cime-poly_stripped.dcount)
  (deps cime-poly_stripped.mly)
  (action
    (with-outputs-to cime-poly_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-poly_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-poly_stripped.stacklang))

(rule (targets cime-poly_stripped.cmi cime-poly_stripped.mli.log)
  (deps cime-poly_stripped.mli)
  (action
    (with-stdout-to cime-poly_stripped.mli.dtimings
      (with-stderr-to cime-poly_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-poly_stripped.mli)))))

(rule (targets cime-poly_stripped.cmo cime-poly_stripped.ml.log)
  (deps cime-poly_stripped.ml cime-poly_stripped.cmi)
  (action
    (with-stdout-to cime-poly_stripped.ml.dtimings
      (with-stderr-to cime-poly_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-poly_stripped.ml)))))

(rule (alias test)
  (action (diff cime-poly_stripped.ml.log.exp cime-poly_stripped.ml.log)))

(rule (target cime-poly-interp.opp.out) (deps cime-poly-interp.mly)
  (action
    (with-outputs-to cime-poly-interp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff cime-poly-interp.opp.exp cime-poly-interp.opp.out)))

(rule
  (targets cime-poly-interp.out cime-poly-interp.automaton
    cime-poly-interp.automaton.resolved cime-poly-interp.conflicts
    cime-poly-interp.timings)
  (deps cime-poly-interp.mly)
  (action
    (with-outputs-to cime-poly-interp.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-poly-interp.timings %{deps})))))

(rule (alias quick)
  (action (diff cime-poly-interp.exp cime-poly-interp.out)))

(rule (alias quick)
  (action (diff cime-poly-interp.automaton.exp cime-poly-interp.automaton)))

(rule (alias quick)
  (action
    (diff cime-poly-interp.automaton.resolved.exp
      cime-poly-interp.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-poly-interp.conflicts.exp cime-poly-interp.conflicts)))

(rule (target cime-poly-interp_stripped.mly) (deps cime-poly-interp.mly)
  (action
    (with-stderr-to cime-poly-interp_stripped.ignored
      (with-stdout-to cime-poly-interp_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-poly-interp_stripped.log cime-poly-interp_stripped.mli
    cime-poly-interp_stripped.ml cime-poly-interp_stripped.stacklang
    cime-poly-interp_stripped.timings cime-poly-interp_stripped.scount
    cime-poly-interp_stripped.dcount)
  (deps cime-poly-interp_stripped.mly)
  (action
    (with-outputs-to cime-poly-interp_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-poly-interp_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-poly-interp_stripped.stacklang))

(rule
  (targets cime-poly-interp_stripped.cmi cime-poly-interp_stripped.mli.log)
  (deps cime-poly-interp_stripped.mli)
  (action
    (with-stdout-to cime-poly-interp_stripped.mli.dtimings
      (with-stderr-to cime-poly-interp_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-poly-interp_stripped.mli)))))

(rule
  (targets cime-poly-interp_stripped.cmo cime-poly-interp_stripped.ml.log)
  (deps cime-poly-interp_stripped.ml cime-poly-interp_stripped.cmi)
  (action
    (with-stdout-to cime-poly-interp_stripped.ml.dtimings
      (with-stderr-to cime-poly-interp_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-poly-interp_stripped.ml)))))

(rule (alias test)
  (action
    (diff cime-poly-interp_stripped.ml.log.exp
      cime-poly-interp_stripped.ml.log)))

(rule (target cime-signature.opp.out) (deps cime-signature.mly)
  (action
    (with-outputs-to cime-signature.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff cime-signature.opp.exp cime-signature.opp.out)))

(rule
  (targets cime-signature.out cime-signature.automaton
    cime-signature.automaton.resolved cime-signature.conflicts
    cime-signature.timings)
  (deps cime-signature.mly)
  (action
    (with-outputs-to cime-signature.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-signature.timings %{deps})))))

(rule (alias quick) (action (diff cime-signature.exp cime-signature.out)))

(rule (alias quick)
  (action (diff cime-signature.automaton.exp cime-signature.automaton)))

(rule (alias quick)
  (action
    (diff cime-signature.automaton.resolved.exp
      cime-signature.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-signature.conflicts.exp cime-signature.conflicts)))

(rule (target cime-signature_stripped.mly) (deps cime-signature.mly)
  (action
    (with-stderr-to cime-signature_stripped.ignored
      (with-stdout-to cime-signature_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-signature_stripped.log cime-signature_stripped.mli
    cime-signature_stripped.ml cime-signature_stripped.stacklang
    cime-signature_stripped.timings cime-signature_stripped.scount
    cime-signature_stripped.dcount)
  (deps cime-signature_stripped.mly)
  (action
    (with-outputs-to cime-signature_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-signature_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-signature_stripped.stacklang))

(rule (targets cime-signature_stripped.cmi cime-signature_stripped.mli.log)
  (deps cime-signature_stripped.mli)
  (action
    (with-stdout-to cime-signature_stripped.mli.dtimings
      (with-stderr-to cime-signature_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-signature_stripped.mli)))))

(rule (targets cime-signature_stripped.cmo cime-signature_stripped.ml.log)
  (deps cime-signature_stripped.ml cime-signature_stripped.cmi)
  (action
    (with-stdout-to cime-signature_stripped.ml.dtimings
      (with-stderr-to cime-signature_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-signature_stripped.ml)))))

(rule (alias test)
  (action
    (diff cime-signature_stripped.ml.log.exp cime-signature_stripped.ml.log)))

(rule (target cime-syntax.opp.out) (deps cime-syntax.mly)
  (action
    (with-outputs-to cime-syntax.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cime-syntax.opp.exp cime-syntax.opp.out)))

(rule
  (targets cime-syntax.out cime-syntax.automaton
    cime-syntax.automaton.resolved cime-syntax.conflicts cime-syntax.timings)
  (deps cime-syntax.mly)
  (action
    (with-outputs-to cime-syntax.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-syntax.timings %{deps})))))

(rule (alias quick) (action (diff cime-syntax.exp cime-syntax.out)))

(rule (alias quick)
  (action (diff cime-syntax.automaton.exp cime-syntax.automaton)))

(rule (alias quick)
  (action
    (diff cime-syntax.automaton.resolved.exp cime-syntax.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-syntax.conflicts.exp cime-syntax.conflicts)))

(rule (target cime-syntax_stripped.mly) (deps cime-syntax.mly)
  (action
    (with-stderr-to cime-syntax_stripped.ignored
      (with-stdout-to cime-syntax_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-syntax_stripped.log cime-syntax_stripped.mli
    cime-syntax_stripped.ml cime-syntax_stripped.stacklang
    cime-syntax_stripped.timings cime-syntax_stripped.scount
    cime-syntax_stripped.dcount)
  (deps cime-syntax_stripped.mly)
  (action
    (with-outputs-to cime-syntax_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-syntax_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-syntax_stripped.stacklang))

(rule (targets cime-syntax_stripped.cmi cime-syntax_stripped.mli.log)
  (deps cime-syntax_stripped.mli)
  (action
    (with-stdout-to cime-syntax_stripped.mli.dtimings
      (with-stderr-to cime-syntax_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-syntax_stripped.mli)))))

(rule (targets cime-syntax_stripped.cmo cime-syntax_stripped.ml.log)
  (deps cime-syntax_stripped.ml cime-syntax_stripped.cmi)
  (action
    (with-stdout-to cime-syntax_stripped.ml.dtimings
      (with-stderr-to cime-syntax_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-syntax_stripped.ml)))))

(rule (alias test)
  (action (diff cime-syntax_stripped.ml.log.exp cime-syntax_stripped.ml.log)))

(rule (target cime-term.opp.out) (deps cime-term.mly)
  (action
    (with-outputs-to cime-term.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cime-term.opp.exp cime-term.opp.out)))

(rule
  (targets cime-term.out cime-term.automaton cime-term.automaton.resolved
    cime-term.conflicts cime-term.timings)
  (deps cime-term.mly)
  (action
    (with-outputs-to cime-term.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-term.timings %{deps})))))

(rule (alias quick) (action (diff cime-term.exp cime-term.out)))

(rule (alias quick)
  (action (diff cime-term.automaton.exp cime-term.automaton)))

(rule (alias quick)
  (action
    (diff cime-term.automaton.resolved.exp cime-term.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-term.conflicts.exp cime-term.conflicts)))

(rule (target cime-term_stripped.mly) (deps cime-term.mly)
  (action
    (with-stderr-to cime-term_stripped.ignored
      (with-stdout-to cime-term_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-term_stripped.log cime-term_stripped.mli
    cime-term_stripped.ml cime-term_stripped.stacklang
    cime-term_stripped.timings cime-term_stripped.scount
    cime-term_stripped.dcount)
  (deps cime-term_stripped.mly)
  (action
    (with-outputs-to cime-term_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-term_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-term_stripped.stacklang))

(rule (targets cime-term_stripped.cmi cime-term_stripped.mli.log)
  (deps cime-term_stripped.mli)
  (action
    (with-stdout-to cime-term_stripped.mli.dtimings
      (with-stderr-to cime-term_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-term_stripped.mli)))))

(rule (targets cime-term_stripped.cmo cime-term_stripped.ml.log)
  (deps cime-term_stripped.ml cime-term_stripped.cmi)
  (action
    (with-stdout-to cime-term_stripped.ml.dtimings
      (with-stderr-to cime-term_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-term_stripped.ml)))))

(rule (alias test)
  (action (diff cime-term_stripped.ml.log.exp cime-term_stripped.ml.log)))

(rule (target cime-terms.opp.out) (deps cime-terms.mly)
  (action
    (with-outputs-to cime-terms.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cime-terms.opp.exp cime-terms.opp.out)))

(rule
  (targets cime-terms.out cime-terms.automaton cime-terms.automaton.resolved
    cime-terms.conflicts cime-terms.timings)
  (deps cime-terms.mly)
  (action
    (with-outputs-to cime-terms.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-terms.timings %{deps})))))

(rule (alias quick) (action (diff cime-terms.exp cime-terms.out)))

(rule (alias quick)
  (action (diff cime-terms.automaton.exp cime-terms.automaton)))

(rule (alias quick)
  (action
    (diff cime-terms.automaton.resolved.exp cime-terms.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-terms.conflicts.exp cime-terms.conflicts)))

(rule (target cime-terms_stripped.mly) (deps cime-terms.mly)
  (action
    (with-stderr-to cime-terms_stripped.ignored
      (with-stdout-to cime-terms_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-terms_stripped.log cime-terms_stripped.mli
    cime-terms_stripped.ml cime-terms_stripped.stacklang
    cime-terms_stripped.timings cime-terms_stripped.scount
    cime-terms_stripped.dcount)
  (deps cime-terms_stripped.mly)
  (action
    (with-outputs-to cime-terms_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-terms_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-terms_stripped.stacklang))

(rule (targets cime-terms_stripped.cmi cime-terms_stripped.mli.log)
  (deps cime-terms_stripped.mli)
  (action
    (with-stdout-to cime-terms_stripped.mli.dtimings
      (with-stderr-to cime-terms_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-terms_stripped.mli)))))

(rule (targets cime-terms_stripped.cmo cime-terms_stripped.ml.log)
  (deps cime-terms_stripped.ml cime-terms_stripped.cmi)
  (action
    (with-stdout-to cime-terms_stripped.ml.dtimings
      (with-stderr-to cime-terms_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-terms_stripped.ml)))))

(rule (alias test)
  (action (diff cime-terms_stripped.ml.log.exp cime-terms_stripped.ml.log)))

(rule (target cime-terms-signature.opp.out) (deps cime-terms-signature.mly)
  (action
    (with-outputs-to cime-terms-signature.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff cime-terms-signature.opp.exp cime-terms-signature.opp.out)))

(rule
  (targets cime-terms-signature.out cime-terms-signature.automaton
    cime-terms-signature.automaton.resolved cime-terms-signature.conflicts
    cime-terms-signature.timings)
  (deps cime-terms-signature.mly)
  (action
    (with-outputs-to cime-terms-signature.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-terms-signature.timings %{deps})))))

(rule (alias quick)
  (action (diff cime-terms-signature.exp cime-terms-signature.out)))

(rule (alias quick)
  (action
    (diff cime-terms-signature.automaton.exp cime-terms-signature.automaton)))

(rule (alias quick)
  (action
    (diff cime-terms-signature.automaton.resolved.exp
      cime-terms-signature.automaton.resolved)))

(rule (alias quick)
  (action
    (diff cime-terms-signature.conflicts.exp cime-terms-signature.conflicts)))

(rule (target cime-terms-signature_stripped.mly)
  (deps cime-terms-signature.mly)
  (action
    (with-stderr-to cime-terms-signature_stripped.ignored
      (with-stdout-to cime-terms-signature_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-terms-signature_stripped.log
    cime-terms-signature_stripped.mli cime-terms-signature_stripped.ml
    cime-terms-signature_stripped.stacklang
    cime-terms-signature_stripped.timings
    cime-terms-signature_stripped.scount
    cime-terms-signature_stripped.dcount)
  (deps cime-terms-signature_stripped.mly)
  (action
    (with-outputs-to cime-terms-signature_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-terms-signature_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-terms-signature_stripped.stacklang))

(rule
  (targets cime-terms-signature_stripped.cmi
    cime-terms-signature_stripped.mli.log)
  (deps cime-terms-signature_stripped.mli)
  (action
    (with-stdout-to cime-terms-signature_stripped.mli.dtimings
      (with-stderr-to cime-terms-signature_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          cime-terms-signature_stripped.mli)))))

(rule
  (targets cime-terms-signature_stripped.cmo
    cime-terms-signature_stripped.ml.log)
  (deps cime-terms-signature_stripped.ml cime-terms-signature_stripped.cmi)
  (action
    (with-stdout-to cime-terms-signature_stripped.ml.dtimings
      (with-stderr-to cime-terms-signature_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          cime-terms-signature_stripped.ml)))))

(rule (alias test)
  (action
    (diff cime-terms-signature_stripped.ml.log.exp
      cime-terms-signature_stripped.ml.log)))

(rule (target cime-theory.opp.out) (deps cime-theory.mly)
  (action
    (with-outputs-to cime-theory.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cime-theory.opp.exp cime-theory.opp.out)))

(rule
  (targets cime-theory.out cime-theory.automaton
    cime-theory.automaton.resolved cime-theory.conflicts cime-theory.timings)
  (deps cime-theory.mly)
  (action
    (with-outputs-to cime-theory.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-theory.timings %{deps})))))

(rule (alias quick) (action (diff cime-theory.exp cime-theory.out)))

(rule (alias quick)
  (action (diff cime-theory.automaton.exp cime-theory.automaton)))

(rule (alias quick)
  (action
    (diff cime-theory.automaton.resolved.exp cime-theory.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-theory.conflicts.exp cime-theory.conflicts)))

(rule (target cime-theory_stripped.mly) (deps cime-theory.mly)
  (action
    (with-stderr-to cime-theory_stripped.ignored
      (with-stdout-to cime-theory_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-theory_stripped.log cime-theory_stripped.mli
    cime-theory_stripped.ml cime-theory_stripped.stacklang
    cime-theory_stripped.timings cime-theory_stripped.scount
    cime-theory_stripped.dcount)
  (deps cime-theory_stripped.mly)
  (action
    (with-outputs-to cime-theory_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-theory_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-theory_stripped.stacklang))

(rule (targets cime-theory_stripped.cmi cime-theory_stripped.mli.log)
  (deps cime-theory_stripped.mli)
  (action
    (with-stdout-to cime-theory_stripped.mli.dtimings
      (with-stderr-to cime-theory_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-theory_stripped.mli)))))

(rule (targets cime-theory_stripped.cmo cime-theory_stripped.ml.log)
  (deps cime-theory_stripped.ml cime-theory_stripped.cmi)
  (action
    (with-stdout-to cime-theory_stripped.ml.dtimings
      (with-stderr-to cime-theory_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-theory_stripped.ml)))))

(rule (alias test)
  (action (diff cime-theory_stripped.ml.log.exp cime-theory_stripped.ml.log)))

(rule (target cime-toplevel.opp.out) (deps cime-toplevel.mly)
  (action
    (with-outputs-to cime-toplevel.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff cime-toplevel.opp.exp cime-toplevel.opp.out)))

(rule
  (targets cime-toplevel.out cime-toplevel.automaton
    cime-toplevel.automaton.resolved cime-toplevel.conflicts
    cime-toplevel.timings)
  (deps cime-toplevel.mly)
  (action
    (with-outputs-to cime-toplevel.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-toplevel.timings %{deps})))))

(rule (alias quick) (action (diff cime-toplevel.exp cime-toplevel.out)))

(rule (alias quick)
  (action (diff cime-toplevel.automaton.exp cime-toplevel.automaton)))

(rule (alias quick)
  (action
    (diff cime-toplevel.automaton.resolved.exp
      cime-toplevel.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-toplevel.conflicts.exp cime-toplevel.conflicts)))

(rule (target cime-toplevel_stripped.mly) (deps cime-toplevel.mly)
  (action
    (with-stderr-to cime-toplevel_stripped.ignored
      (with-stdout-to cime-toplevel_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-toplevel_stripped.log cime-toplevel_stripped.mli
    cime-toplevel_stripped.ml cime-toplevel_stripped.stacklang
    cime-toplevel_stripped.timings cime-toplevel_stripped.scount
    cime-toplevel_stripped.dcount)
  (deps cime-toplevel_stripped.mly)
  (action
    (with-outputs-to cime-toplevel_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-toplevel_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-toplevel_stripped.stacklang))

(rule (targets cime-toplevel_stripped.cmi cime-toplevel_stripped.mli.log)
  (deps cime-toplevel_stripped.mli)
  (action
    (with-stdout-to cime-toplevel_stripped.mli.dtimings
      (with-stderr-to cime-toplevel_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-toplevel_stripped.mli)))))

(rule (targets cime-toplevel_stripped.cmo cime-toplevel_stripped.ml.log)
  (deps cime-toplevel_stripped.ml cime-toplevel_stripped.cmi)
  (action
    (with-stdout-to cime-toplevel_stripped.ml.dtimings
      (with-stderr-to cime-toplevel_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-toplevel_stripped.ml)))))

(rule (alias test)
  (action
    (diff cime-toplevel_stripped.ml.log.exp cime-toplevel_stripped.ml.log)))

(rule (target cime-word.opp.out) (deps cime-word.mly)
  (action
    (with-outputs-to cime-word.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cime-word.opp.exp cime-word.opp.out)))

(rule
  (targets cime-word.out cime-word.automaton cime-word.automaton.resolved
    cime-word.conflicts cime-word.timings)
  (deps cime-word.mly)
  (action
    (with-outputs-to cime-word.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cime-word.timings %{deps})))))

(rule (alias quick) (action (diff cime-word.exp cime-word.out)))

(rule (alias quick)
  (action (diff cime-word.automaton.exp cime-word.automaton)))

(rule (alias quick)
  (action
    (diff cime-word.automaton.resolved.exp cime-word.automaton.resolved)))

(rule (alias quick)
  (action (diff cime-word.conflicts.exp cime-word.conflicts)))

(rule (target cime-word_stripped.mly) (deps cime-word.mly)
  (action
    (with-stderr-to cime-word_stripped.ignored
      (with-stdout-to cime-word_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cime-word_stripped.log cime-word_stripped.mli
    cime-word_stripped.ml cime-word_stripped.stacklang
    cime-word_stripped.timings cime-word_stripped.scount
    cime-word_stripped.dcount)
  (deps cime-word_stripped.mly)
  (action
    (with-outputs-to cime-word_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cime-word_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cime-word_stripped.stacklang))

(rule (targets cime-word_stripped.cmi cime-word_stripped.mli.log)
  (deps cime-word_stripped.mli)
  (action
    (with-stdout-to cime-word_stripped.mli.dtimings
      (with-stderr-to cime-word_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cime-word_stripped.mli)))))

(rule (targets cime-word_stripped.cmo cime-word_stripped.ml.log)
  (deps cime-word_stripped.ml cime-word_stripped.cmi)
  (action
    (with-stdout-to cime-word_stripped.ml.dtimings
      (with-stderr-to cime-word_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cime-word_stripped.ml)))))

(rule (alias test)
  (action (diff cime-word_stripped.ml.log.exp cime-word_stripped.ml.log)))

(rule (target cminor.opp.out) (deps cminor.mly)
  (action
    (with-outputs-to cminor.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cminor.opp.exp cminor.opp.out)))

(rule
  (targets cminor.out cminor.automaton cminor.automaton.resolved
    cminor.conflicts cminor.timings)
  (deps cminor.mly)
  (action
    (with-outputs-to cminor.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cminor.timings %{deps})))))

(rule (alias quick) (action (diff cminor.exp cminor.out)))

(rule (alias quick) (action (diff cminor.automaton.exp cminor.automaton)))

(rule (alias quick)
  (action (diff cminor.automaton.resolved.exp cminor.automaton.resolved)))

(rule (alias quick) (action (diff cminor.conflicts.exp cminor.conflicts)))

(rule (target cminor_stripped.mly) (deps cminor.mly)
  (action
    (with-stderr-to cminor_stripped.ignored
      (with-stdout-to cminor_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cminor_stripped.log cminor_stripped.mli cminor_stripped.ml
    cminor_stripped.stacklang cminor_stripped.timings cminor_stripped.scount
    cminor_stripped.dcount)
  (deps cminor_stripped.mly)
  (action
    (with-outputs-to cminor_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cminor_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cminor_stripped.stacklang))

(rule (targets cminor_stripped.cmi cminor_stripped.mli.log)
  (deps cminor_stripped.mli)
  (action
    (with-stdout-to cminor_stripped.mli.dtimings
      (with-stderr-to cminor_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cminor_stripped.mli)))))

(rule (targets cminor_stripped.cmo cminor_stripped.ml.log)
  (deps cminor_stripped.ml cminor_stripped.cmi)
  (action
    (with-stdout-to cminor_stripped.ml.dtimings
      (with-stderr-to cminor_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cminor_stripped.ml)))))

(rule (alias test)
  (action (diff cminor_stripped.ml.log.exp cminor_stripped.ml.log)))

(rule (target cocci.opp.out) (deps cocci.mly)
  (action
    (with-outputs-to cocci.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cocci.opp.exp cocci.opp.out)))

(rule
  (targets cocci.out cocci.automaton cocci.automaton.resolved cocci.conflicts
    cocci.timings)
  (deps cocci.mly)
  (action
    (with-outputs-to cocci.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cocci.timings %{deps})))))

(rule (alias quick) (action (diff cocci.exp cocci.out)))

(rule (alias quick) (action (diff cocci.automaton.exp cocci.automaton)))

(rule (alias quick)
  (action (diff cocci.automaton.resolved.exp cocci.automaton.resolved)))

(rule (alias quick) (action (diff cocci.conflicts.exp cocci.conflicts)))

(rule (target cocci_stripped.mly) (deps cocci.mly)
  (action
    (with-stderr-to cocci_stripped.ignored
      (with-stdout-to cocci_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cocci_stripped.log cocci_stripped.mli cocci_stripped.ml
    cocci_stripped.stacklang cocci_stripped.timings cocci_stripped.scount
    cocci_stripped.dcount)
  (deps cocci_stripped.mly)
  (action
    (with-outputs-to cocci_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cocci_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cocci_stripped.stacklang))

(rule (targets cocci_stripped.cmi cocci_stripped.mli.log)
  (deps cocci_stripped.mli)
  (action
    (with-stdout-to cocci_stripped.mli.dtimings
      (with-stderr-to cocci_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cocci_stripped.mli)))))

(rule (targets cocci_stripped.cmo cocci_stripped.ml.log)
  (deps cocci_stripped.ml cocci_stripped.cmi)
  (action
    (with-stdout-to cocci_stripped.ml.dtimings
      (with-stderr-to cocci_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cocci_stripped.ml)))))

(rule (alias test)
  (action (diff cocci_stripped.ml.log.exp cocci_stripped.ml.log)))

(rule (target coccinelle.1.0.2-parser_c.opp.out)
  (deps coccinelle.1.0.2-parser_c.mly)
  (action
    (with-outputs-to coccinelle.1.0.2-parser_c.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff coccinelle.1.0.2-parser_c.opp.exp
      coccinelle.1.0.2-parser_c.opp.out)))

(rule
  (targets coccinelle.1.0.2-parser_c.out coccinelle.1.0.2-parser_c.automaton
    coccinelle.1.0.2-parser_c.automaton.resolved
    coccinelle.1.0.2-parser_c.conflicts coccinelle.1.0.2-parser_c.timings)
  (deps coccinelle.1.0.2-parser_c.mly)
  (action
    (with-outputs-to coccinelle.1.0.2-parser_c.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to coccinelle.1.0.2-parser_c.timings %{deps})))))

(rule (alias quick)
  (action (diff coccinelle.1.0.2-parser_c.exp coccinelle.1.0.2-parser_c.out)))

(rule (alias quick)
  (action
    (diff coccinelle.1.0.2-parser_c.automaton.exp
      coccinelle.1.0.2-parser_c.automaton)))

(rule (alias quick)
  (action
    (diff coccinelle.1.0.2-parser_c.automaton.resolved.exp
      coccinelle.1.0.2-parser_c.automaton.resolved)))

(rule (alias quick)
  (action
    (diff coccinelle.1.0.2-parser_c.conflicts.exp
      coccinelle.1.0.2-parser_c.conflicts)))

(rule (target coccinelle_1_0_2-parser_c_stripped.mly)
  (deps coccinelle.1.0.2-parser_c.mly)
  (action
    (with-stderr-to coccinelle_1_0_2-parser_c_stripped.ignored
      (with-stdout-to coccinelle_1_0_2-parser_c_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets coccinelle_1_0_2-parser_c_stripped.log
    coccinelle_1_0_2-parser_c_stripped.mli
    coccinelle_1_0_2-parser_c_stripped.ml
    coccinelle_1_0_2-parser_c_stripped.stacklang
    coccinelle_1_0_2-parser_c_stripped.timings
    coccinelle_1_0_2-parser_c_stripped.scount
    coccinelle_1_0_2-parser_c_stripped.dcount)
  (deps coccinelle_1_0_2-parser_c_stripped.mly)
  (action
    (with-outputs-to coccinelle_1_0_2-parser_c_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to coccinelle_1_0_2-parser_c_stripped.timings %{deps})))))

(alias (name quick) (deps
                      coccinelle_1_0_2-parser_c_stripped.stacklang))

(rule
  (targets coccinelle_1_0_2-parser_c_stripped.cmi
    coccinelle_1_0_2-parser_c_stripped.mli.log)
  (deps coccinelle_1_0_2-parser_c_stripped.mli)
  (action
    (with-stdout-to coccinelle_1_0_2-parser_c_stripped.mli.dtimings
      (with-stderr-to coccinelle_1_0_2-parser_c_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          coccinelle_1_0_2-parser_c_stripped.mli)))))

(rule
  (targets coccinelle_1_0_2-parser_c_stripped.cmo
    coccinelle_1_0_2-parser_c_stripped.ml.log)
  (deps coccinelle_1_0_2-parser_c_stripped.ml
    coccinelle_1_0_2-parser_c_stripped.cmi)
  (action
    (with-stdout-to coccinelle_1_0_2-parser_c_stripped.ml.dtimings
      (with-stderr-to coccinelle_1_0_2-parser_c_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          coccinelle_1_0_2-parser_c_stripped.ml)))))

(rule (alias test)
  (action
    (diff coccinelle_1_0_2-parser_c_stripped.ml.log.exp
      coccinelle_1_0_2-parser_c_stripped.ml.log)))

(rule (target coccinelle.1.0.2-parser_cocci_menhir.opp.out)
  (deps coccinelle.1.0.2-parser_cocci_menhir.mly)
  (action
    (with-outputs-to coccinelle.1.0.2-parser_cocci_menhir.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.opp.exp
      coccinelle.1.0.2-parser_cocci_menhir.opp.out)))

(rule
  (targets coccinelle.1.0.2-parser_cocci_menhir.out
    coccinelle.1.0.2-parser_cocci_menhir.automaton
    coccinelle.1.0.2-parser_cocci_menhir.automaton.resolved
    coccinelle.1.0.2-parser_cocci_menhir.conflicts
    coccinelle.1.0.2-parser_cocci_menhir.timings)
  (deps coccinelle.1.0.2-parser_cocci_menhir.mly)
  (action
    (with-outputs-to coccinelle.1.0.2-parser_cocci_menhir.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to coccinelle.1.0.2-parser_cocci_menhir.timings
          %{deps})))))

(rule (alias quick)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.exp
      coccinelle.1.0.2-parser_cocci_menhir.out)))

(rule (alias quick)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.automaton.exp
      coccinelle.1.0.2-parser_cocci_menhir.automaton)))

(rule (alias quick)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.automaton.resolved.exp
      coccinelle.1.0.2-parser_cocci_menhir.automaton.resolved)))

(rule (alias quick)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.conflicts.exp
      coccinelle.1.0.2-parser_cocci_menhir.conflicts)))

(rule (target coccinelle_1_0_2-parser_cocci_menhir_stripped.mly)
  (deps coccinelle.1.0.2-parser_cocci_menhir.mly)
  (action
    (with-stderr-to coccinelle_1_0_2-parser_cocci_menhir_stripped.ignored
      (with-stdout-to coccinelle_1_0_2-parser_cocci_menhir_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets coccinelle_1_0_2-parser_cocci_menhir_stripped.log
    coccinelle_1_0_2-parser_cocci_menhir_stripped.mli
    coccinelle_1_0_2-parser_cocci_menhir_stripped.ml
    coccinelle_1_0_2-parser_cocci_menhir_stripped.stacklang
    coccinelle_1_0_2-parser_cocci_menhir_stripped.timings
    coccinelle_1_0_2-parser_cocci_menhir_stripped.scount
    coccinelle_1_0_2-parser_cocci_menhir_stripped.dcount)
  (deps coccinelle_1_0_2-parser_cocci_menhir_stripped.mly)
  (action
    (with-outputs-to coccinelle_1_0_2-parser_cocci_menhir_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to
          coccinelle_1_0_2-parser_cocci_menhir_stripped.timings %{deps})))))

(alias (name quick)
  (deps
    coccinelle_1_0_2-parser_cocci_menhir_stripped.stacklang))

(rule
  (targets coccinelle_1_0_2-parser_cocci_menhir_stripped.cmi
    coccinelle_1_0_2-parser_cocci_menhir_stripped.mli.log)
  (deps coccinelle_1_0_2-parser_cocci_menhir_stripped.mli)
  (action
    (with-stdout-to
      coccinelle_1_0_2-parser_cocci_menhir_stripped.mli.dtimings
      (with-stderr-to coccinelle_1_0_2-parser_cocci_menhir_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          coccinelle_1_0_2-parser_cocci_menhir_stripped.mli)))))

(rule
  (targets coccinelle_1_0_2-parser_cocci_menhir_stripped.cmo
    coccinelle_1_0_2-parser_cocci_menhir_stripped.ml.log)
  (deps coccinelle_1_0_2-parser_cocci_menhir_stripped.ml
    coccinelle_1_0_2-parser_cocci_menhir_stripped.cmi)
  (action
    (with-stdout-to coccinelle_1_0_2-parser_cocci_menhir_stripped.ml.dtimings
      (with-stderr-to coccinelle_1_0_2-parser_cocci_menhir_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          coccinelle_1_0_2-parser_cocci_menhir_stripped.ml)))))

(rule (alias test)
  (action
    (diff coccinelle_1_0_2-parser_cocci_menhir_stripped.ml.log.exp
      coccinelle_1_0_2-parser_cocci_menhir_stripped.ml.log)))

(rule (target coercion-constraint.opp.out) (deps coercion-constraint.mly)
  (action
    (with-outputs-to coercion-constraint.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff coercion-constraint.opp.exp coercion-constraint.opp.out)))

(rule
  (targets coercion-constraint.out coercion-constraint.automaton
    coercion-constraint.automaton.resolved coercion-constraint.conflicts
    coercion-constraint.timings)
  (deps coercion-constraint.mly)
  (action
    (with-outputs-to coercion-constraint.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to coercion-constraint.timings %{deps})))))

(rule (alias quick)
  (action (diff coercion-constraint.exp coercion-constraint.out)))

(rule (alias quick)
  (action
    (diff coercion-constraint.automaton.exp coercion-constraint.automaton)))

(rule (alias quick)
  (action
    (diff coercion-constraint.automaton.resolved.exp
      coercion-constraint.automaton.resolved)))

(rule (alias quick)
  (action
    (diff coercion-constraint.conflicts.exp coercion-constraint.conflicts)))

(rule (target coercion-constraint_stripped.mly)
  (deps coercion-constraint.mly)
  (action
    (with-stderr-to coercion-constraint_stripped.ignored
      (with-stdout-to coercion-constraint_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets coercion-constraint_stripped.log coercion-constraint_stripped.mli
    coercion-constraint_stripped.ml coercion-constraint_stripped.stacklang
    coercion-constraint_stripped.timings coercion-constraint_stripped.scount
    coercion-constraint_stripped.dcount)
  (deps coercion-constraint_stripped.mly)
  (action
    (with-outputs-to coercion-constraint_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to coercion-constraint_stripped.timings %{deps})))))

(alias (name quick) (deps
                      coercion-constraint_stripped.stacklang))

(rule
  (targets coercion-constraint_stripped.cmi
    coercion-constraint_stripped.mli.log)
  (deps coercion-constraint_stripped.mli)
  (action
    (with-stdout-to coercion-constraint_stripped.mli.dtimings
      (with-stderr-to coercion-constraint_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          coercion-constraint_stripped.mli)))))

(rule
  (targets coercion-constraint_stripped.cmo
    coercion-constraint_stripped.ml.log)
  (deps coercion-constraint_stripped.ml coercion-constraint_stripped.cmi)
  (action
    (with-stdout-to coercion-constraint_stripped.ml.dtimings
      (with-stderr-to coercion-constraint_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c coercion-constraint_stripped.ml)))))

(rule (alias test)
  (action
    (diff coercion-constraint_stripped.ml.log.exp
      coercion-constraint_stripped.ml.log)))

(rule (target coercion-mini.opp.out) (deps coercion-mini.mly)
  (action
    (with-outputs-to coercion-mini.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff coercion-mini.opp.exp coercion-mini.opp.out)))

(rule
  (targets coercion-mini.out coercion-mini.automaton
    coercion-mini.automaton.resolved coercion-mini.conflicts
    coercion-mini.timings)
  (deps coercion-mini.mly)
  (action
    (with-outputs-to coercion-mini.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to coercion-mini.timings %{deps})))))

(rule (alias quick) (action (diff coercion-mini.exp coercion-mini.out)))

(rule (alias quick)
  (action (diff coercion-mini.automaton.exp coercion-mini.automaton)))

(rule (alias quick)
  (action
    (diff coercion-mini.automaton.resolved.exp
      coercion-mini.automaton.resolved)))

(rule (alias quick)
  (action (diff coercion-mini.conflicts.exp coercion-mini.conflicts)))

(rule (target coercion-mini_stripped.mly) (deps coercion-mini.mly)
  (action
    (with-stderr-to coercion-mini_stripped.ignored
      (with-stdout-to coercion-mini_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets coercion-mini_stripped.log coercion-mini_stripped.mli
    coercion-mini_stripped.ml coercion-mini_stripped.stacklang
    coercion-mini_stripped.timings coercion-mini_stripped.scount
    coercion-mini_stripped.dcount)
  (deps coercion-mini_stripped.mly)
  (action
    (with-outputs-to coercion-mini_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to coercion-mini_stripped.timings %{deps})))))

(alias (name quick) (deps
                      coercion-mini_stripped.stacklang))

(rule (targets coercion-mini_stripped.cmi coercion-mini_stripped.mli.log)
  (deps coercion-mini_stripped.mli)
  (action
    (with-stdout-to coercion-mini_stripped.mli.dtimings
      (with-stderr-to coercion-mini_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c coercion-mini_stripped.mli)))))

(rule (targets coercion-mini_stripped.cmo coercion-mini_stripped.ml.log)
  (deps coercion-mini_stripped.ml coercion-mini_stripped.cmi)
  (action
    (with-stdout-to coercion-mini_stripped.ml.dtimings
      (with-stderr-to coercion-mini_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c coercion-mini_stripped.ml)))))

(rule (alias test)
  (action
    (diff coercion-mini_stripped.ml.log.exp coercion-mini_stripped.ml.log)))

(rule (target cohttp.1.2.0-accept_parser.opp.out)
  (deps cohttp.1.2.0-accept_parser.mly)
  (action
    (with-outputs-to cohttp.1.2.0-accept_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff cohttp.1.2.0-accept_parser.opp.exp
      cohttp.1.2.0-accept_parser.opp.out)))

(rule
  (targets cohttp.1.2.0-accept_parser.out
    cohttp.1.2.0-accept_parser.automaton
    cohttp.1.2.0-accept_parser.automaton.resolved
    cohttp.1.2.0-accept_parser.conflicts cohttp.1.2.0-accept_parser.timings)
  (deps cohttp.1.2.0-accept_parser.mly)
  (action
    (with-outputs-to cohttp.1.2.0-accept_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cohttp.1.2.0-accept_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff cohttp.1.2.0-accept_parser.exp cohttp.1.2.0-accept_parser.out)))

(rule (alias quick)
  (action
    (diff cohttp.1.2.0-accept_parser.automaton.exp
      cohttp.1.2.0-accept_parser.automaton)))

(rule (alias quick)
  (action
    (diff cohttp.1.2.0-accept_parser.automaton.resolved.exp
      cohttp.1.2.0-accept_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff cohttp.1.2.0-accept_parser.conflicts.exp
      cohttp.1.2.0-accept_parser.conflicts)))

(rule (target cohttp_1_2_0-accept_parser_stripped.mly)
  (deps cohttp.1.2.0-accept_parser.mly)
  (action
    (with-stderr-to cohttp_1_2_0-accept_parser_stripped.ignored
      (with-stdout-to cohttp_1_2_0-accept_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cohttp_1_2_0-accept_parser_stripped.log
    cohttp_1_2_0-accept_parser_stripped.mli
    cohttp_1_2_0-accept_parser_stripped.ml
    cohttp_1_2_0-accept_parser_stripped.stacklang
    cohttp_1_2_0-accept_parser_stripped.timings
    cohttp_1_2_0-accept_parser_stripped.scount
    cohttp_1_2_0-accept_parser_stripped.dcount)
  (deps cohttp_1_2_0-accept_parser_stripped.mly)
  (action
    (with-outputs-to cohttp_1_2_0-accept_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cohttp_1_2_0-accept_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cohttp_1_2_0-accept_parser_stripped.stacklang))

(rule
  (targets cohttp_1_2_0-accept_parser_stripped.cmi
    cohttp_1_2_0-accept_parser_stripped.mli.log)
  (deps cohttp_1_2_0-accept_parser_stripped.mli)
  (action
    (with-stdout-to cohttp_1_2_0-accept_parser_stripped.mli.dtimings
      (with-stderr-to cohttp_1_2_0-accept_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          cohttp_1_2_0-accept_parser_stripped.mli)))))

(rule
  (targets cohttp_1_2_0-accept_parser_stripped.cmo
    cohttp_1_2_0-accept_parser_stripped.ml.log)
  (deps cohttp_1_2_0-accept_parser_stripped.ml
    cohttp_1_2_0-accept_parser_stripped.cmi)
  (action
    (with-stdout-to cohttp_1_2_0-accept_parser_stripped.ml.dtimings
      (with-stderr-to cohttp_1_2_0-accept_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          cohttp_1_2_0-accept_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff cohttp_1_2_0-accept_parser_stripped.ml.log.exp
      cohttp_1_2_0-accept_parser_stripped.ml.log)))

(rule (target compcert_pre_parser.opp.out) (deps compcert_pre_parser.mly)
  (action
    (with-outputs-to compcert_pre_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff compcert_pre_parser.opp.exp compcert_pre_parser.opp.out)))

(rule
  (targets compcert_pre_parser.out compcert_pre_parser.automaton
    compcert_pre_parser.automaton.resolved compcert_pre_parser.conflicts
    compcert_pre_parser.timings)
  (deps compcert_pre_parser.mly)
  (action
    (with-outputs-to compcert_pre_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to compcert_pre_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff compcert_pre_parser.exp compcert_pre_parser.out)))

(rule (alias quick)
  (action
    (diff compcert_pre_parser.automaton.exp compcert_pre_parser.automaton)))

(rule (alias quick)
  (action
    (diff compcert_pre_parser.automaton.resolved.exp
      compcert_pre_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff compcert_pre_parser.conflicts.exp compcert_pre_parser.conflicts)))

(rule (target compcert_pre_parser_stripped.mly)
  (deps compcert_pre_parser.mly)
  (action
    (with-stderr-to compcert_pre_parser_stripped.ignored
      (with-stdout-to compcert_pre_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets compcert_pre_parser_stripped.log compcert_pre_parser_stripped.mli
    compcert_pre_parser_stripped.ml compcert_pre_parser_stripped.stacklang
    compcert_pre_parser_stripped.timings compcert_pre_parser_stripped.scount
    compcert_pre_parser_stripped.dcount)
  (deps compcert_pre_parser_stripped.mly)
  (action
    (with-outputs-to compcert_pre_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to compcert_pre_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      compcert_pre_parser_stripped.stacklang))

(rule
  (targets compcert_pre_parser_stripped.cmi
    compcert_pre_parser_stripped.mli.log)
  (deps compcert_pre_parser_stripped.mli)
  (action
    (with-stdout-to compcert_pre_parser_stripped.mli.dtimings
      (with-stderr-to compcert_pre_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          compcert_pre_parser_stripped.mli)))))

(rule
  (targets compcert_pre_parser_stripped.cmo
    compcert_pre_parser_stripped.ml.log)
  (deps compcert_pre_parser_stripped.ml compcert_pre_parser_stripped.cmi)
  (action
    (with-stdout-to compcert_pre_parser_stripped.ml.dtimings
      (with-stderr-to compcert_pre_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c compcert_pre_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff compcert_pre_parser_stripped.ml.log.exp
      compcert_pre_parser_stripped.ml.log)))

(rule (target compcert_pre_parser_canonical.opp.out)
  (deps compcert_pre_parser_canonical.mly)
  (action
    (with-outputs-to compcert_pre_parser_canonical.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess
          %{read-lines:compcert_pre_parser_canonical.flags} %{deps})))))

(rule (alias quick)
  (action
    (diff compcert_pre_parser_canonical.opp.exp
      compcert_pre_parser_canonical.opp.out)))

(rule
  (targets compcert_pre_parser_canonical.out
    compcert_pre_parser_canonical.automaton
    compcert_pre_parser_canonical.automaton.resolved
    compcert_pre_parser_canonical.conflicts
    compcert_pre_parser_canonical.timings)
  (deps compcert_pre_parser_canonical.mly)
  (action
    (with-outputs-to compcert_pre_parser_canonical.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to compcert_pre_parser_canonical.timings
          %{read-lines:compcert_pre_parser_canonical.flags} %{deps})))))

(rule (alias quick)
  (action
    (diff compcert_pre_parser_canonical.exp
      compcert_pre_parser_canonical.out)))

(rule (alias quick)
  (action
    (diff compcert_pre_parser_canonical.automaton.exp
      compcert_pre_parser_canonical.automaton)))

(rule (alias quick)
  (action
    (diff compcert_pre_parser_canonical.automaton.resolved.exp
      compcert_pre_parser_canonical.automaton.resolved)))

(rule (alias quick)
  (action
    (diff compcert_pre_parser_canonical.conflicts.exp
      compcert_pre_parser_canonical.conflicts)))

(rule (target compcert_pre_parser_canonical_stripped.mly)
  (deps compcert_pre_parser_canonical.mly)
  (action
    (with-stderr-to compcert_pre_parser_canonical_stripped.ignored
      (with-stdout-to compcert_pre_parser_canonical_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu
            %{read-lines:compcert_pre_parser_canonical.flags} %{deps}))))))

(rule
  (targets compcert_pre_parser_canonical_stripped.log
    compcert_pre_parser_canonical_stripped.mli
    compcert_pre_parser_canonical_stripped.ml
    compcert_pre_parser_canonical_stripped.stacklang
    compcert_pre_parser_canonical_stripped.timings
    compcert_pre_parser_canonical_stripped.scount
    compcert_pre_parser_canonical_stripped.dcount)
  (deps compcert_pre_parser_canonical_stripped.mly)
  (action
    (with-outputs-to compcert_pre_parser_canonical_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to compcert_pre_parser_canonical_stripped.timings
          %{read-lines:compcert_pre_parser_canonical.flags} %{deps})))))

(alias (name quick) (deps
                      compcert_pre_parser_canonical_stripped.stacklang))

(rule
  (targets compcert_pre_parser_canonical_stripped.cmi
    compcert_pre_parser_canonical_stripped.mli.log)
  (deps compcert_pre_parser_canonical_stripped.mli)
  (action
    (with-stdout-to compcert_pre_parser_canonical_stripped.mli.dtimings
      (with-stderr-to compcert_pre_parser_canonical_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          compcert_pre_parser_canonical_stripped.mli)))))

(rule
  (targets compcert_pre_parser_canonical_stripped.cmo
    compcert_pre_parser_canonical_stripped.ml.log)
  (deps compcert_pre_parser_canonical_stripped.ml
    compcert_pre_parser_canonical_stripped.cmi)
  (action
    (with-stdout-to compcert_pre_parser_canonical_stripped.ml.dtimings
      (with-stderr-to compcert_pre_parser_canonical_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          compcert_pre_parser_canonical_stripped.ml)))))

(rule (alias test)
  (action
    (diff compcert_pre_parser_canonical_stripped.ml.log.exp
      compcert_pre_parser_canonical_stripped.ml.log)))

(rule (target compcert_pre_parser_new.opp.out)
  (deps compcert_pre_parser_new.mly)
  (action
    (with-outputs-to compcert_pre_parser_new.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess
          %{read-lines:compcert_pre_parser_new.flags} %{deps})))))

(rule (alias quick)
  (action
    (diff compcert_pre_parser_new.opp.exp compcert_pre_parser_new.opp.out)))

(rule
  (targets compcert_pre_parser_new.out compcert_pre_parser_new.automaton
    compcert_pre_parser_new.automaton.resolved
    compcert_pre_parser_new.conflicts compcert_pre_parser_new.timings)
  (deps compcert_pre_parser_new.mly)
  (action
    (with-outputs-to compcert_pre_parser_new.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to compcert_pre_parser_new.timings
          %{read-lines:compcert_pre_parser_new.flags} %{deps})))))

(rule (alias quick)
  (action (diff compcert_pre_parser_new.exp compcert_pre_parser_new.out)))

(rule (alias quick)
  (action
    (diff compcert_pre_parser_new.automaton.exp
      compcert_pre_parser_new.automaton)))

(rule (alias quick)
  (action
    (diff compcert_pre_parser_new.automaton.resolved.exp
      compcert_pre_parser_new.automaton.resolved)))

(rule (alias quick)
  (action
    (diff compcert_pre_parser_new.conflicts.exp
      compcert_pre_parser_new.conflicts)))

(rule (target compcert_pre_parser_new_stripped.mly)
  (deps compcert_pre_parser_new.mly)
  (action
    (with-stderr-to compcert_pre_parser_new_stripped.ignored
      (with-stdout-to compcert_pre_parser_new_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu
            %{read-lines:compcert_pre_parser_new.flags} %{deps}))))))

(rule
  (targets compcert_pre_parser_new_stripped.log
    compcert_pre_parser_new_stripped.mli compcert_pre_parser_new_stripped.ml
    compcert_pre_parser_new_stripped.stacklang
    compcert_pre_parser_new_stripped.timings
    compcert_pre_parser_new_stripped.scount
    compcert_pre_parser_new_stripped.dcount)
  (deps compcert_pre_parser_new_stripped.mly)
  (action
    (with-outputs-to compcert_pre_parser_new_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to compcert_pre_parser_new_stripped.timings
          %{read-lines:compcert_pre_parser_new.flags} %{deps})))))

(alias (name quick) (deps
                      compcert_pre_parser_new_stripped.stacklang))

(rule
  (targets compcert_pre_parser_new_stripped.cmi
    compcert_pre_parser_new_stripped.mli.log)
  (deps compcert_pre_parser_new_stripped.mli)
  (action
    (with-stdout-to compcert_pre_parser_new_stripped.mli.dtimings
      (with-stderr-to compcert_pre_parser_new_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          compcert_pre_parser_new_stripped.mli)))))

(rule
  (targets compcert_pre_parser_new_stripped.cmo
    compcert_pre_parser_new_stripped.ml.log)
  (deps compcert_pre_parser_new_stripped.ml
    compcert_pre_parser_new_stripped.cmi)
  (action
    (with-stdout-to compcert_pre_parser_new_stripped.ml.dtimings
      (with-stderr-to compcert_pre_parser_new_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          compcert_pre_parser_new_stripped.ml)))))

(rule (alias test)
  (action
    (diff compcert_pre_parser_new_stripped.ml.log.exp
      compcert_pre_parser_new_stripped.ml.log)))

(rule (target compsyn.opp.out) (deps compsyn.mly)
  (action
    (with-outputs-to compsyn.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff compsyn.opp.exp compsyn.opp.out)))

(rule
  (targets compsyn.out compsyn.automaton compsyn.automaton.resolved
    compsyn.conflicts compsyn.timings)
  (deps compsyn.mly)
  (action
    (with-outputs-to compsyn.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to compsyn.timings %{deps})))))

(rule (alias quick) (action (diff compsyn.exp compsyn.out)))

(rule (alias quick) (action (diff compsyn.automaton.exp compsyn.automaton)))

(rule (alias quick)
  (action (diff compsyn.automaton.resolved.exp compsyn.automaton.resolved)))

(rule (alias quick) (action (diff compsyn.conflicts.exp compsyn.conflicts)))

(rule (target compsyn_stripped.mly) (deps compsyn.mly)
  (action
    (with-stderr-to compsyn_stripped.ignored
      (with-stdout-to compsyn_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets compsyn_stripped.log compsyn_stripped.mli compsyn_stripped.ml
    compsyn_stripped.stacklang compsyn_stripped.timings
    compsyn_stripped.scount compsyn_stripped.dcount)
  (deps compsyn_stripped.mly)
  (action
    (with-outputs-to compsyn_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to compsyn_stripped.timings %{deps})))))

(alias (name quick) (deps
                      compsyn_stripped.stacklang))

(rule (targets compsyn_stripped.cmi compsyn_stripped.mli.log)
  (deps compsyn_stripped.mli)
  (action
    (with-stdout-to compsyn_stripped.mli.dtimings
      (with-stderr-to compsyn_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c compsyn_stripped.mli)))))

(rule (targets compsyn_stripped.cmo compsyn_stripped.ml.log)
  (deps compsyn_stripped.ml compsyn_stripped.cmi)
  (action
    (with-stdout-to compsyn_stripped.ml.dtimings
      (with-stderr-to compsyn_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c compsyn_stripped.ml)))))

(rule (alias test)
  (action (diff compsyn_stripped.ml.log.exp compsyn_stripped.ml.log)))

(rule (target condition_parser.opp.out) (deps condition_parser.mly)
  (action
    (with-outputs-to condition_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff condition_parser.opp.exp condition_parser.opp.out)))

(rule
  (targets condition_parser.out condition_parser.automaton
    condition_parser.automaton.resolved condition_parser.conflicts
    condition_parser.timings)
  (deps condition_parser.mly)
  (action
    (with-outputs-to condition_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to condition_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff condition_parser.exp condition_parser.out)))

(rule (alias quick)
  (action (diff condition_parser.automaton.exp condition_parser.automaton)))

(rule (alias quick)
  (action
    (diff condition_parser.automaton.resolved.exp
      condition_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff condition_parser.conflicts.exp condition_parser.conflicts)))

(rule (target condition_parser_stripped.mly) (deps condition_parser.mly)
  (action
    (with-stderr-to condition_parser_stripped.ignored
      (with-stdout-to condition_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets condition_parser_stripped.log condition_parser_stripped.mli
    condition_parser_stripped.ml condition_parser_stripped.stacklang
    condition_parser_stripped.timings condition_parser_stripped.scount
    condition_parser_stripped.dcount)
  (deps condition_parser_stripped.mly)
  (action
    (with-outputs-to condition_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to condition_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      condition_parser_stripped.stacklang))

(rule
  (targets condition_parser_stripped.cmi condition_parser_stripped.mli.log)
  (deps condition_parser_stripped.mli)
  (action
    (with-stdout-to condition_parser_stripped.mli.dtimings
      (with-stderr-to condition_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c condition_parser_stripped.mli)))))

(rule
  (targets condition_parser_stripped.cmo condition_parser_stripped.ml.log)
  (deps condition_parser_stripped.ml condition_parser_stripped.cmi)
  (action
    (with-stdout-to condition_parser_stripped.ml.dtimings
      (with-stderr-to condition_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c condition_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff condition_parser_stripped.ml.log.exp
      condition_parser_stripped.ml.log)))

(rule (target confluence.opp.out) (deps confluence.mly)
  (action
    (with-outputs-to confluence.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff confluence.opp.exp confluence.opp.out)))

(rule
  (targets confluence.out confluence.automaton confluence.automaton.resolved
    confluence.conflicts confluence.timings)
  (deps confluence.mly)
  (action
    (with-outputs-to confluence.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to confluence.timings %{deps})))))

(rule (alias quick) (action (diff confluence.exp confluence.out)))

(rule (alias quick)
  (action (diff confluence.automaton.exp confluence.automaton)))

(rule (alias quick)
  (action
    (diff confluence.automaton.resolved.exp confluence.automaton.resolved)))

(rule (alias quick)
  (action (diff confluence.conflicts.exp confluence.conflicts)))

(rule (target confluence_stripped.mly) (deps confluence.mly)
  (action
    (with-stderr-to confluence_stripped.ignored
      (with-stdout-to confluence_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets confluence_stripped.log confluence_stripped.mli
    confluence_stripped.ml confluence_stripped.stacklang
    confluence_stripped.timings confluence_stripped.scount
    confluence_stripped.dcount)
  (deps confluence_stripped.mly)
  (action
    (with-outputs-to confluence_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to confluence_stripped.timings %{deps})))))

(alias (name quick) (deps
                      confluence_stripped.stacklang))

(rule (targets confluence_stripped.cmi confluence_stripped.mli.log)
  (deps confluence_stripped.mli)
  (action
    (with-stdout-to confluence_stripped.mli.dtimings
      (with-stderr-to confluence_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c confluence_stripped.mli)))))

(rule (targets confluence_stripped.cmo confluence_stripped.ml.log)
  (deps confluence_stripped.ml confluence_stripped.cmi)
  (action
    (with-stdout-to confluence_stripped.ml.dtimings
      (with-stderr-to confluence_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c confluence_stripped.ml)))))

(rule (alias test)
  (action (diff confluence_stripped.ml.log.exp confluence_stripped.ml.log)))

(rule (target confluence-fnf.opp.out) (deps confluence-fnf.mly)
  (action
    (with-outputs-to confluence-fnf.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff confluence-fnf.opp.exp confluence-fnf.opp.out)))

(rule
  (targets confluence-fnf.out confluence-fnf.automaton
    confluence-fnf.automaton.resolved confluence-fnf.conflicts
    confluence-fnf.timings)
  (deps confluence-fnf.mly)
  (action
    (with-outputs-to confluence-fnf.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to confluence-fnf.timings %{deps})))))

(rule (alias quick) (action (diff confluence-fnf.exp confluence-fnf.out)))

(rule (alias quick)
  (action (diff confluence-fnf.automaton.exp confluence-fnf.automaton)))

(rule (alias quick)
  (action
    (diff confluence-fnf.automaton.resolved.exp
      confluence-fnf.automaton.resolved)))

(rule (alias quick)
  (action (diff confluence-fnf.conflicts.exp confluence-fnf.conflicts)))

(rule (target confluence-fnf_stripped.mly) (deps confluence-fnf.mly)
  (action
    (with-stderr-to confluence-fnf_stripped.ignored
      (with-stdout-to confluence-fnf_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets confluence-fnf_stripped.log confluence-fnf_stripped.mli
    confluence-fnf_stripped.ml confluence-fnf_stripped.stacklang
    confluence-fnf_stripped.timings confluence-fnf_stripped.scount
    confluence-fnf_stripped.dcount)
  (deps confluence-fnf_stripped.mly)
  (action
    (with-outputs-to confluence-fnf_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to confluence-fnf_stripped.timings %{deps})))))

(alias (name quick) (deps
                      confluence-fnf_stripped.stacklang))

(rule (targets confluence-fnf_stripped.cmi confluence-fnf_stripped.mli.log)
  (deps confluence-fnf_stripped.mli)
  (action
    (with-stdout-to confluence-fnf_stripped.mli.dtimings
      (with-stderr-to confluence-fnf_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c confluence-fnf_stripped.mli)))))

(rule (targets confluence-fnf_stripped.cmo confluence-fnf_stripped.ml.log)
  (deps confluence-fnf_stripped.ml confluence-fnf_stripped.cmi)
  (action
    (with-stdout-to confluence-fnf_stripped.ml.dtimings
      (with-stderr-to confluence-fnf_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c confluence-fnf_stripped.ml)))))

(rule (alias test)
  (action
    (diff confluence-fnf_stripped.ml.log.exp confluence-fnf_stripped.ml.log)))

(rule (target confluence-psl.opp.out) (deps confluence-psl.mly)
  (action
    (with-outputs-to confluence-psl.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff confluence-psl.opp.exp confluence-psl.opp.out)))

(rule
  (targets confluence-psl.out confluence-psl.automaton
    confluence-psl.automaton.resolved confluence-psl.conflicts
    confluence-psl.timings)
  (deps confluence-psl.mly)
  (action
    (with-outputs-to confluence-psl.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to confluence-psl.timings %{deps})))))

(rule (alias quick) (action (diff confluence-psl.exp confluence-psl.out)))

(rule (alias quick)
  (action (diff confluence-psl.automaton.exp confluence-psl.automaton)))

(rule (alias quick)
  (action
    (diff confluence-psl.automaton.resolved.exp
      confluence-psl.automaton.resolved)))

(rule (alias quick)
  (action (diff confluence-psl.conflicts.exp confluence-psl.conflicts)))

(rule (target confluence-psl_stripped.mly) (deps confluence-psl.mly)
  (action
    (with-stderr-to confluence-psl_stripped.ignored
      (with-stdout-to confluence-psl_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets confluence-psl_stripped.log confluence-psl_stripped.mli
    confluence-psl_stripped.ml confluence-psl_stripped.stacklang
    confluence-psl_stripped.timings confluence-psl_stripped.scount
    confluence-psl_stripped.dcount)
  (deps confluence-psl_stripped.mly)
  (action
    (with-outputs-to confluence-psl_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to confluence-psl_stripped.timings %{deps})))))

(alias (name quick) (deps
                      confluence-psl_stripped.stacklang))

(rule (targets confluence-psl_stripped.cmi confluence-psl_stripped.mli.log)
  (deps confluence-psl_stripped.mli)
  (action
    (with-stdout-to confluence-psl_stripped.mli.dtimings
      (with-stderr-to confluence-psl_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c confluence-psl_stripped.mli)))))

(rule (targets confluence-psl_stripped.cmo confluence-psl_stripped.ml.log)
  (deps confluence-psl_stripped.ml confluence-psl_stripped.cmi)
  (action
    (with-stdout-to confluence-psl_stripped.ml.dtimings
      (with-stderr-to confluence-psl_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c confluence-psl_stripped.ml)))))

(rule (alias test)
  (action
    (diff confluence-psl_stripped.ml.log.exp confluence-psl_stripped.ml.log)))

(rule (target couac.opp.out) (deps couac.mly)
  (action
    (with-outputs-to couac.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff couac.opp.exp couac.opp.out)))

(rule
  (targets couac.out couac.automaton couac.automaton.resolved couac.conflicts
    couac.timings)
  (deps couac.mly)
  (action
    (with-outputs-to couac.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to couac.timings %{deps})))))

(rule (alias quick) (action (diff couac.exp couac.out)))

(rule (alias quick) (action (diff couac.automaton.exp couac.automaton)))

(rule (alias quick)
  (action (diff couac.automaton.resolved.exp couac.automaton.resolved)))

(rule (alias quick) (action (diff couac.conflicts.exp couac.conflicts)))

(rule (target couac_stripped.mly) (deps couac.mly)
  (action
    (with-stderr-to couac_stripped.ignored
      (with-stdout-to couac_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets couac_stripped.log couac_stripped.mli couac_stripped.ml
    couac_stripped.stacklang couac_stripped.timings couac_stripped.scount
    couac_stripped.dcount)
  (deps couac_stripped.mly)
  (action
    (with-outputs-to couac_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to couac_stripped.timings %{deps})))))

(alias (name quick) (deps
                      couac_stripped.stacklang))

(rule (targets couac_stripped.cmi couac_stripped.mli.log)
  (deps couac_stripped.mli)
  (action
    (with-stdout-to couac_stripped.mli.dtimings
      (with-stderr-to couac_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c couac_stripped.mli)))))

(rule (targets couac_stripped.cmo couac_stripped.ml.log)
  (deps couac_stripped.ml couac_stripped.cmi)
  (action
    (with-stdout-to couac_stripped.ml.dtimings
      (with-stderr-to couac_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c couac_stripped.ml)))))

(rule (alias test)
  (action (diff couac_stripped.ml.log.exp couac_stripped.ml.log)))

(rule (target cppo_ocamlbuild.1.6.0-cppo_parser.opp.out)
  (deps cppo_ocamlbuild.1.6.0-cppo_parser.mly)
  (action
    (with-outputs-to cppo_ocamlbuild.1.6.0-cppo_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.opp.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.opp.out)))

(rule
  (targets cppo_ocamlbuild.1.6.0-cppo_parser.out
    cppo_ocamlbuild.1.6.0-cppo_parser.automaton
    cppo_ocamlbuild.1.6.0-cppo_parser.automaton.resolved
    cppo_ocamlbuild.1.6.0-cppo_parser.conflicts
    cppo_ocamlbuild.1.6.0-cppo_parser.timings)
  (deps cppo_ocamlbuild.1.6.0-cppo_parser.mly)
  (action
    (with-outputs-to cppo_ocamlbuild.1.6.0-cppo_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cppo_ocamlbuild.1.6.0-cppo_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.out)))

(rule (alias quick)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.automaton.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.automaton)))

(rule (alias quick)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.automaton.resolved.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.conflicts.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.conflicts)))

(rule (target cppo_ocamlbuild_1_6_0-cppo_parser_stripped.mly)
  (deps cppo_ocamlbuild.1.6.0-cppo_parser.mly)
  (action
    (with-stderr-to cppo_ocamlbuild_1_6_0-cppo_parser_stripped.ignored
      (with-stdout-to cppo_ocamlbuild_1_6_0-cppo_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cppo_ocamlbuild_1_6_0-cppo_parser_stripped.log
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.mli
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.ml
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.stacklang
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.timings
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.scount
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.dcount)
  (deps cppo_ocamlbuild_1_6_0-cppo_parser_stripped.mly)
  (action
    (with-outputs-to cppo_ocamlbuild_1_6_0-cppo_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cppo_ocamlbuild_1_6_0-cppo_parser_stripped.timings
          %{deps})))))

(alias (name quick)
  (deps
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.stacklang))

(rule
  (targets cppo_ocamlbuild_1_6_0-cppo_parser_stripped.cmi
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.mli.log)
  (deps cppo_ocamlbuild_1_6_0-cppo_parser_stripped.mli)
  (action
    (with-stdout-to cppo_ocamlbuild_1_6_0-cppo_parser_stripped.mli.dtimings
      (with-stderr-to cppo_ocamlbuild_1_6_0-cppo_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          cppo_ocamlbuild_1_6_0-cppo_parser_stripped.mli)))))

(rule
  (targets cppo_ocamlbuild_1_6_0-cppo_parser_stripped.cmo
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.ml.log)
  (deps cppo_ocamlbuild_1_6_0-cppo_parser_stripped.ml
    cppo_ocamlbuild_1_6_0-cppo_parser_stripped.cmi)
  (action
    (with-stdout-to cppo_ocamlbuild_1_6_0-cppo_parser_stripped.ml.dtimings
      (with-stderr-to cppo_ocamlbuild_1_6_0-cppo_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          cppo_ocamlbuild_1_6_0-cppo_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff cppo_ocamlbuild_1_6_0-cppo_parser_stripped.ml.log.exp
      cppo_ocamlbuild_1_6_0-cppo_parser_stripped.ml.log)))

(rule (target cryptolineParser.opp.out) (deps cryptolineParser.mly)
  (action
    (with-outputs-to cryptolineParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff cryptolineParser.opp.exp cryptolineParser.opp.out)))

(rule
  (targets cryptolineParser.out cryptolineParser.automaton
    cryptolineParser.automaton.resolved cryptolineParser.conflicts
    cryptolineParser.timings)
  (deps cryptolineParser.mly)
  (action
    (with-outputs-to cryptolineParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cryptolineParser.timings %{deps})))))

(rule (alias quick)
  (action (diff cryptolineParser.exp cryptolineParser.out)))

(rule (alias quick)
  (action (diff cryptolineParser.automaton.exp cryptolineParser.automaton)))

(rule (alias quick)
  (action
    (diff cryptolineParser.automaton.resolved.exp
      cryptolineParser.automaton.resolved)))

(rule (alias quick)
  (action (diff cryptolineParser.conflicts.exp cryptolineParser.conflicts)))

(rule (target cryptolineParser_stripped.mly) (deps cryptolineParser.mly)
  (action
    (with-stderr-to cryptolineParser_stripped.ignored
      (with-stdout-to cryptolineParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cryptolineParser_stripped.log cryptolineParser_stripped.mli
    cryptolineParser_stripped.ml cryptolineParser_stripped.stacklang
    cryptolineParser_stripped.timings cryptolineParser_stripped.scount
    cryptolineParser_stripped.dcount)
  (deps cryptolineParser_stripped.mly)
  (action
    (with-outputs-to cryptolineParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cryptolineParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cryptolineParser_stripped.stacklang))

(rule
  (targets cryptolineParser_stripped.cmi cryptolineParser_stripped.mli.log)
  (deps cryptolineParser_stripped.mli)
  (action
    (with-stdout-to cryptolineParser_stripped.mli.dtimings
      (with-stderr-to cryptolineParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cryptolineParser_stripped.mli)))))

(rule
  (targets cryptolineParser_stripped.cmo cryptolineParser_stripped.ml.log)
  (deps cryptolineParser_stripped.ml cryptolineParser_stripped.cmi)
  (action
    (with-stdout-to cryptolineParser_stripped.ml.dtimings
      (with-stderr-to cryptolineParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cryptolineParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff cryptolineParser_stripped.ml.log.exp
      cryptolineParser_stripped.ml.log)))

(rule (target cubicle.1.1.2-parser.opp.out) (deps cubicle.1.1.2-parser.mly)
  (action
    (with-outputs-to cubicle.1.1.2-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff cubicle.1.1.2-parser.opp.exp cubicle.1.1.2-parser.opp.out)))

(rule
  (targets cubicle.1.1.2-parser.out cubicle.1.1.2-parser.automaton
    cubicle.1.1.2-parser.automaton.resolved cubicle.1.1.2-parser.conflicts
    cubicle.1.1.2-parser.timings)
  (deps cubicle.1.1.2-parser.mly)
  (action
    (with-outputs-to cubicle.1.1.2-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cubicle.1.1.2-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff cubicle.1.1.2-parser.exp cubicle.1.1.2-parser.out)))

(rule (alias quick)
  (action
    (diff cubicle.1.1.2-parser.automaton.exp cubicle.1.1.2-parser.automaton)))

(rule (alias quick)
  (action
    (diff cubicle.1.1.2-parser.automaton.resolved.exp
      cubicle.1.1.2-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff cubicle.1.1.2-parser.conflicts.exp cubicle.1.1.2-parser.conflicts)))

(rule (target cubicle_1_1_2-parser_stripped.mly)
  (deps cubicle.1.1.2-parser.mly)
  (action
    (with-stderr-to cubicle_1_1_2-parser_stripped.ignored
      (with-stdout-to cubicle_1_1_2-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cubicle_1_1_2-parser_stripped.log
    cubicle_1_1_2-parser_stripped.mli cubicle_1_1_2-parser_stripped.ml
    cubicle_1_1_2-parser_stripped.stacklang
    cubicle_1_1_2-parser_stripped.timings
    cubicle_1_1_2-parser_stripped.scount
    cubicle_1_1_2-parser_stripped.dcount)
  (deps cubicle_1_1_2-parser_stripped.mly)
  (action
    (with-outputs-to cubicle_1_1_2-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cubicle_1_1_2-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cubicle_1_1_2-parser_stripped.stacklang))

(rule
  (targets cubicle_1_1_2-parser_stripped.cmi
    cubicle_1_1_2-parser_stripped.mli.log)
  (deps cubicle_1_1_2-parser_stripped.mli)
  (action
    (with-stdout-to cubicle_1_1_2-parser_stripped.mli.dtimings
      (with-stderr-to cubicle_1_1_2-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          cubicle_1_1_2-parser_stripped.mli)))))

(rule
  (targets cubicle_1_1_2-parser_stripped.cmo
    cubicle_1_1_2-parser_stripped.ml.log)
  (deps cubicle_1_1_2-parser_stripped.ml cubicle_1_1_2-parser_stripped.cmi)
  (action
    (with-stdout-to cubicle_1_1_2-parser_stripped.ml.dtimings
      (with-stderr-to cubicle_1_1_2-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          cubicle_1_1_2-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff cubicle_1_1_2-parser_stripped.ml.log.exp
      cubicle_1_1_2-parser_stripped.ml.log)))

(rule (target cudf.0.9-cudf_type_parser.opp.out)
  (deps cudf.0.9-cudf_type_parser.mly)
  (action
    (with-outputs-to cudf.0.9-cudf_type_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff cudf.0.9-cudf_type_parser.opp.exp
      cudf.0.9-cudf_type_parser.opp.out)))

(rule
  (targets cudf.0.9-cudf_type_parser.out cudf.0.9-cudf_type_parser.automaton
    cudf.0.9-cudf_type_parser.automaton.resolved
    cudf.0.9-cudf_type_parser.conflicts cudf.0.9-cudf_type_parser.timings)
  (deps cudf.0.9-cudf_type_parser.mly)
  (action
    (with-outputs-to cudf.0.9-cudf_type_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cudf.0.9-cudf_type_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff cudf.0.9-cudf_type_parser.exp cudf.0.9-cudf_type_parser.out)))

(rule (alias quick)
  (action
    (diff cudf.0.9-cudf_type_parser.automaton.exp
      cudf.0.9-cudf_type_parser.automaton)))

(rule (alias quick)
  (action
    (diff cudf.0.9-cudf_type_parser.automaton.resolved.exp
      cudf.0.9-cudf_type_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff cudf.0.9-cudf_type_parser.conflicts.exp
      cudf.0.9-cudf_type_parser.conflicts)))

(rule (target cudf_0_9-cudf_type_parser_stripped.mly)
  (deps cudf.0.9-cudf_type_parser.mly)
  (action
    (with-stderr-to cudf_0_9-cudf_type_parser_stripped.ignored
      (with-stdout-to cudf_0_9-cudf_type_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cudf_0_9-cudf_type_parser_stripped.log
    cudf_0_9-cudf_type_parser_stripped.mli
    cudf_0_9-cudf_type_parser_stripped.ml
    cudf_0_9-cudf_type_parser_stripped.stacklang
    cudf_0_9-cudf_type_parser_stripped.timings
    cudf_0_9-cudf_type_parser_stripped.scount
    cudf_0_9-cudf_type_parser_stripped.dcount)
  (deps cudf_0_9-cudf_type_parser_stripped.mly)
  (action
    (with-outputs-to cudf_0_9-cudf_type_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cudf_0_9-cudf_type_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cudf_0_9-cudf_type_parser_stripped.stacklang))

(rule
  (targets cudf_0_9-cudf_type_parser_stripped.cmi
    cudf_0_9-cudf_type_parser_stripped.mli.log)
  (deps cudf_0_9-cudf_type_parser_stripped.mli)
  (action
    (with-stdout-to cudf_0_9-cudf_type_parser_stripped.mli.dtimings
      (with-stderr-to cudf_0_9-cudf_type_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          cudf_0_9-cudf_type_parser_stripped.mli)))))

(rule
  (targets cudf_0_9-cudf_type_parser_stripped.cmo
    cudf_0_9-cudf_type_parser_stripped.ml.log)
  (deps cudf_0_9-cudf_type_parser_stripped.ml
    cudf_0_9-cudf_type_parser_stripped.cmi)
  (action
    (with-stdout-to cudf_0_9-cudf_type_parser_stripped.ml.dtimings
      (with-stderr-to cudf_0_9-cudf_type_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          cudf_0_9-cudf_type_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff cudf_0_9-cudf_type_parser_stripped.ml.log.exp
      cudf_0_9-cudf_type_parser_stripped.ml.log)))

(rule (target cutdown.opp.out) (deps cutdown.mly)
  (action
    (with-outputs-to cutdown.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff cutdown.opp.exp cutdown.opp.out)))

(rule
  (targets cutdown.out cutdown.automaton cutdown.automaton.resolved
    cutdown.conflicts cutdown.timings)
  (deps cutdown.mly)
  (action
    (with-outputs-to cutdown.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to cutdown.timings %{deps})))))

(rule (alias quick) (action (diff cutdown.exp cutdown.out)))

(rule (alias quick) (action (diff cutdown.automaton.exp cutdown.automaton)))

(rule (alias quick)
  (action (diff cutdown.automaton.resolved.exp cutdown.automaton.resolved)))

(rule (alias quick) (action (diff cutdown.conflicts.exp cutdown.conflicts)))

(rule (target cutdown_stripped.mly) (deps cutdown.mly)
  (action
    (with-stderr-to cutdown_stripped.ignored
      (with-stdout-to cutdown_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets cutdown_stripped.log cutdown_stripped.mli cutdown_stripped.ml
    cutdown_stripped.stacklang cutdown_stripped.timings
    cutdown_stripped.scount cutdown_stripped.dcount)
  (deps cutdown_stripped.mly)
  (action
    (with-outputs-to cutdown_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to cutdown_stripped.timings %{deps})))))

(alias (name quick) (deps
                      cutdown_stripped.stacklang))

(rule (targets cutdown_stripped.cmi cutdown_stripped.mli.log)
  (deps cutdown_stripped.mli)
  (action
    (with-stdout-to cutdown_stripped.mli.dtimings
      (with-stderr-to cutdown_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c cutdown_stripped.mli)))))

(rule (targets cutdown_stripped.cmo cutdown_stripped.ml.log)
  (deps cutdown_stripped.ml cutdown_stripped.cmi)
  (action
    (with-stdout-to cutdown_stripped.ml.dtimings
      (with-stderr-to cutdown_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c cutdown_stripped.ml)))))

(rule (alias test)
  (action (diff cutdown_stripped.ml.log.exp cutdown_stripped.ml.log)))

(rule (target dario.opp.out) (deps dario.mly)
  (action
    (with-outputs-to dario.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff dario.opp.exp dario.opp.out)))

(rule
  (targets dario.out dario.automaton dario.automaton.resolved dario.conflicts
    dario.timings)
  (deps dario.mly)
  (action
    (with-outputs-to dario.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to dario.timings %{deps})))))

(rule (alias quick) (action (diff dario.exp dario.out)))

(rule (alias quick) (action (diff dario.automaton.exp dario.automaton)))

(rule (alias quick)
  (action (diff dario.automaton.resolved.exp dario.automaton.resolved)))

(rule (alias quick) (action (diff dario.conflicts.exp dario.conflicts)))

(rule (target dario_stripped.mly) (deps dario.mly)
  (action
    (with-stderr-to dario_stripped.ignored
      (with-stdout-to dario_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets dario_stripped.log dario_stripped.mli dario_stripped.ml
    dario_stripped.stacklang dario_stripped.timings dario_stripped.scount
    dario_stripped.dcount)
  (deps dario_stripped.mly)
  (action
    (with-outputs-to dario_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dario_stripped.timings %{deps})))))

(alias (name quick) (deps
                      dario_stripped.stacklang))

(rule (targets dario_stripped.cmi dario_stripped.mli.log)
  (deps dario_stripped.mli)
  (action
    (with-stdout-to dario_stripped.mli.dtimings
      (with-stderr-to dario_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c dario_stripped.mli)))))

(rule (targets dario_stripped.cmo dario_stripped.ml.log)
  (deps dario_stripped.ml dario_stripped.cmi)
  (action
    (with-stdout-to dario_stripped.ml.dtimings
      (with-stderr-to dario_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c dario_stripped.ml)))))

(rule (alias test)
  (action (diff dario_stripped.ml.log.exp dario_stripped.ml.log)))

(rule (target datalog.0.5.2-topDownParser.opp.out)
  (deps datalog.0.5.2-topDownParser.mly)
  (action
    (with-outputs-to datalog.0.5.2-topDownParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff datalog.0.5.2-topDownParser.opp.exp
      datalog.0.5.2-topDownParser.opp.out)))

(rule
  (targets datalog.0.5.2-topDownParser.out
    datalog.0.5.2-topDownParser.automaton
    datalog.0.5.2-topDownParser.automaton.resolved
    datalog.0.5.2-topDownParser.conflicts
    datalog.0.5.2-topDownParser.timings)
  (deps datalog.0.5.2-topDownParser.mly)
  (action
    (with-outputs-to datalog.0.5.2-topDownParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to datalog.0.5.2-topDownParser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff datalog.0.5.2-topDownParser.exp datalog.0.5.2-topDownParser.out)))

(rule (alias quick)
  (action
    (diff datalog.0.5.2-topDownParser.automaton.exp
      datalog.0.5.2-topDownParser.automaton)))

(rule (alias quick)
  (action
    (diff datalog.0.5.2-topDownParser.automaton.resolved.exp
      datalog.0.5.2-topDownParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff datalog.0.5.2-topDownParser.conflicts.exp
      datalog.0.5.2-topDownParser.conflicts)))

(rule (target datalog_0_5_2-topDownParser_stripped.mly)
  (deps datalog.0.5.2-topDownParser.mly)
  (action
    (with-stderr-to datalog_0_5_2-topDownParser_stripped.ignored
      (with-stdout-to datalog_0_5_2-topDownParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets datalog_0_5_2-topDownParser_stripped.log
    datalog_0_5_2-topDownParser_stripped.mli
    datalog_0_5_2-topDownParser_stripped.ml
    datalog_0_5_2-topDownParser_stripped.stacklang
    datalog_0_5_2-topDownParser_stripped.timings
    datalog_0_5_2-topDownParser_stripped.scount
    datalog_0_5_2-topDownParser_stripped.dcount)
  (deps datalog_0_5_2-topDownParser_stripped.mly)
  (action
    (with-outputs-to datalog_0_5_2-topDownParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to datalog_0_5_2-topDownParser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      datalog_0_5_2-topDownParser_stripped.stacklang))

(rule
  (targets datalog_0_5_2-topDownParser_stripped.cmi
    datalog_0_5_2-topDownParser_stripped.mli.log)
  (deps datalog_0_5_2-topDownParser_stripped.mli)
  (action
    (with-stdout-to datalog_0_5_2-topDownParser_stripped.mli.dtimings
      (with-stderr-to datalog_0_5_2-topDownParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          datalog_0_5_2-topDownParser_stripped.mli)))))

(rule
  (targets datalog_0_5_2-topDownParser_stripped.cmo
    datalog_0_5_2-topDownParser_stripped.ml.log)
  (deps datalog_0_5_2-topDownParser_stripped.ml
    datalog_0_5_2-topDownParser_stripped.cmi)
  (action
    (with-stdout-to datalog_0_5_2-topDownParser_stripped.ml.dtimings
      (with-stderr-to datalog_0_5_2-topDownParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          datalog_0_5_2-topDownParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff datalog_0_5_2-topDownParser_stripped.ml.log.exp
      datalog_0_5_2-topDownParser_stripped.ml.log)))

(rule (target dbforge.2.0.1-sqml_parser.opp.out)
  (deps dbforge.2.0.1-sqml_parser.mly)
  (action
    (with-outputs-to dbforge.2.0.1-sqml_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff dbforge.2.0.1-sqml_parser.opp.exp
      dbforge.2.0.1-sqml_parser.opp.out)))

(rule
  (targets dbforge.2.0.1-sqml_parser.out dbforge.2.0.1-sqml_parser.automaton
    dbforge.2.0.1-sqml_parser.automaton.resolved
    dbforge.2.0.1-sqml_parser.conflicts dbforge.2.0.1-sqml_parser.timings)
  (deps dbforge.2.0.1-sqml_parser.mly)
  (action
    (with-outputs-to dbforge.2.0.1-sqml_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to dbforge.2.0.1-sqml_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff dbforge.2.0.1-sqml_parser.exp dbforge.2.0.1-sqml_parser.out)))

(rule (alias quick)
  (action
    (diff dbforge.2.0.1-sqml_parser.automaton.exp
      dbforge.2.0.1-sqml_parser.automaton)))

(rule (alias quick)
  (action
    (diff dbforge.2.0.1-sqml_parser.automaton.resolved.exp
      dbforge.2.0.1-sqml_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff dbforge.2.0.1-sqml_parser.conflicts.exp
      dbforge.2.0.1-sqml_parser.conflicts)))

(rule (target dbforge_2_0_1-sqml_parser_stripped.mly)
  (deps dbforge.2.0.1-sqml_parser.mly)
  (action
    (with-stderr-to dbforge_2_0_1-sqml_parser_stripped.ignored
      (with-stdout-to dbforge_2_0_1-sqml_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets dbforge_2_0_1-sqml_parser_stripped.log
    dbforge_2_0_1-sqml_parser_stripped.mli
    dbforge_2_0_1-sqml_parser_stripped.ml
    dbforge_2_0_1-sqml_parser_stripped.stacklang
    dbforge_2_0_1-sqml_parser_stripped.timings
    dbforge_2_0_1-sqml_parser_stripped.scount
    dbforge_2_0_1-sqml_parser_stripped.dcount)
  (deps dbforge_2_0_1-sqml_parser_stripped.mly)
  (action
    (with-outputs-to dbforge_2_0_1-sqml_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dbforge_2_0_1-sqml_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      dbforge_2_0_1-sqml_parser_stripped.stacklang))

(rule
  (targets dbforge_2_0_1-sqml_parser_stripped.cmi
    dbforge_2_0_1-sqml_parser_stripped.mli.log)
  (deps dbforge_2_0_1-sqml_parser_stripped.mli)
  (action
    (with-stdout-to dbforge_2_0_1-sqml_parser_stripped.mli.dtimings
      (with-stderr-to dbforge_2_0_1-sqml_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          dbforge_2_0_1-sqml_parser_stripped.mli)))))

(rule
  (targets dbforge_2_0_1-sqml_parser_stripped.cmo
    dbforge_2_0_1-sqml_parser_stripped.ml.log)
  (deps dbforge_2_0_1-sqml_parser_stripped.ml
    dbforge_2_0_1-sqml_parser_stripped.cmi)
  (action
    (with-stdout-to dbforge_2_0_1-sqml_parser_stripped.ml.dtimings
      (with-stderr-to dbforge_2_0_1-sqml_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          dbforge_2_0_1-sqml_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff dbforge_2_0_1-sqml_parser_stripped.ml.log.exp
      dbforge_2_0_1-sqml_parser_stripped.ml.log)))

(rule (target debian-formats.0.1.1-DF822_parser.opp.out)
  (deps debian-formats.0.1.1-DF822_parser.mly)
  (action
    (with-outputs-to debian-formats.0.1.1-DF822_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff debian-formats.0.1.1-DF822_parser.opp.exp
      debian-formats.0.1.1-DF822_parser.opp.out)))

(rule
  (targets debian-formats.0.1.1-DF822_parser.out
    debian-formats.0.1.1-DF822_parser.automaton
    debian-formats.0.1.1-DF822_parser.automaton.resolved
    debian-formats.0.1.1-DF822_parser.conflicts
    debian-formats.0.1.1-DF822_parser.timings)
  (deps debian-formats.0.1.1-DF822_parser.mly)
  (action
    (with-outputs-to debian-formats.0.1.1-DF822_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to debian-formats.0.1.1-DF822_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff debian-formats.0.1.1-DF822_parser.exp
      debian-formats.0.1.1-DF822_parser.out)))

(rule (alias quick)
  (action
    (diff debian-formats.0.1.1-DF822_parser.automaton.exp
      debian-formats.0.1.1-DF822_parser.automaton)))

(rule (alias quick)
  (action
    (diff debian-formats.0.1.1-DF822_parser.automaton.resolved.exp
      debian-formats.0.1.1-DF822_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff debian-formats.0.1.1-DF822_parser.conflicts.exp
      debian-formats.0.1.1-DF822_parser.conflicts)))

(rule (target debian-formats_0_1_1-DF822_parser_stripped.mly)
  (deps debian-formats.0.1.1-DF822_parser.mly)
  (action
    (with-stderr-to debian-formats_0_1_1-DF822_parser_stripped.ignored
      (with-stdout-to debian-formats_0_1_1-DF822_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets debian-formats_0_1_1-DF822_parser_stripped.log
    debian-formats_0_1_1-DF822_parser_stripped.mli
    debian-formats_0_1_1-DF822_parser_stripped.ml
    debian-formats_0_1_1-DF822_parser_stripped.stacklang
    debian-formats_0_1_1-DF822_parser_stripped.timings
    debian-formats_0_1_1-DF822_parser_stripped.scount
    debian-formats_0_1_1-DF822_parser_stripped.dcount)
  (deps debian-formats_0_1_1-DF822_parser_stripped.mly)
  (action
    (with-outputs-to debian-formats_0_1_1-DF822_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to debian-formats_0_1_1-DF822_parser_stripped.timings
          %{deps})))))

(alias (name quick)
  (deps
    debian-formats_0_1_1-DF822_parser_stripped.stacklang))

(rule
  (targets debian-formats_0_1_1-DF822_parser_stripped.cmi
    debian-formats_0_1_1-DF822_parser_stripped.mli.log)
  (deps debian-formats_0_1_1-DF822_parser_stripped.mli)
  (action
    (with-stdout-to debian-formats_0_1_1-DF822_parser_stripped.mli.dtimings
      (with-stderr-to debian-formats_0_1_1-DF822_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          debian-formats_0_1_1-DF822_parser_stripped.mli)))))

(rule
  (targets debian-formats_0_1_1-DF822_parser_stripped.cmo
    debian-formats_0_1_1-DF822_parser_stripped.ml.log)
  (deps debian-formats_0_1_1-DF822_parser_stripped.ml
    debian-formats_0_1_1-DF822_parser_stripped.cmi)
  (action
    (with-stdout-to debian-formats_0_1_1-DF822_parser_stripped.ml.dtimings
      (with-stderr-to debian-formats_0_1_1-DF822_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          debian-formats_0_1_1-DF822_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff debian-formats_0_1_1-DF822_parser_stripped.ml.log.exp
      debian-formats_0_1_1-DF822_parser_stripped.ml.log)))

(rule (target dedukti.2.6.0-menhir_parser.opp.out)
  (deps dedukti.2.6.0-menhir_parser.mly)
  (action
    (with-outputs-to dedukti.2.6.0-menhir_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff dedukti.2.6.0-menhir_parser.opp.exp
      dedukti.2.6.0-menhir_parser.opp.out)))

(rule
  (targets dedukti.2.6.0-menhir_parser.out
    dedukti.2.6.0-menhir_parser.automaton
    dedukti.2.6.0-menhir_parser.automaton.resolved
    dedukti.2.6.0-menhir_parser.conflicts
    dedukti.2.6.0-menhir_parser.timings)
  (deps dedukti.2.6.0-menhir_parser.mly)
  (action
    (with-outputs-to dedukti.2.6.0-menhir_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to dedukti.2.6.0-menhir_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff dedukti.2.6.0-menhir_parser.exp dedukti.2.6.0-menhir_parser.out)))

(rule (alias quick)
  (action
    (diff dedukti.2.6.0-menhir_parser.automaton.exp
      dedukti.2.6.0-menhir_parser.automaton)))

(rule (alias quick)
  (action
    (diff dedukti.2.6.0-menhir_parser.automaton.resolved.exp
      dedukti.2.6.0-menhir_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff dedukti.2.6.0-menhir_parser.conflicts.exp
      dedukti.2.6.0-menhir_parser.conflicts)))

(rule (target dedukti_2_6_0-menhir_parser_stripped.mly)
  (deps dedukti.2.6.0-menhir_parser.mly)
  (action
    (with-stderr-to dedukti_2_6_0-menhir_parser_stripped.ignored
      (with-stdout-to dedukti_2_6_0-menhir_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets dedukti_2_6_0-menhir_parser_stripped.log
    dedukti_2_6_0-menhir_parser_stripped.mli
    dedukti_2_6_0-menhir_parser_stripped.ml
    dedukti_2_6_0-menhir_parser_stripped.stacklang
    dedukti_2_6_0-menhir_parser_stripped.timings
    dedukti_2_6_0-menhir_parser_stripped.scount
    dedukti_2_6_0-menhir_parser_stripped.dcount)
  (deps dedukti_2_6_0-menhir_parser_stripped.mly)
  (action
    (with-outputs-to dedukti_2_6_0-menhir_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dedukti_2_6_0-menhir_parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      dedukti_2_6_0-menhir_parser_stripped.stacklang))

(rule
  (targets dedukti_2_6_0-menhir_parser_stripped.cmi
    dedukti_2_6_0-menhir_parser_stripped.mli.log)
  (deps dedukti_2_6_0-menhir_parser_stripped.mli)
  (action
    (with-stdout-to dedukti_2_6_0-menhir_parser_stripped.mli.dtimings
      (with-stderr-to dedukti_2_6_0-menhir_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          dedukti_2_6_0-menhir_parser_stripped.mli)))))

(rule
  (targets dedukti_2_6_0-menhir_parser_stripped.cmo
    dedukti_2_6_0-menhir_parser_stripped.ml.log)
  (deps dedukti_2_6_0-menhir_parser_stripped.ml
    dedukti_2_6_0-menhir_parser_stripped.cmi)
  (action
    (with-stdout-to dedukti_2_6_0-menhir_parser_stripped.ml.dtimings
      (with-stderr-to dedukti_2_6_0-menhir_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          dedukti_2_6_0-menhir_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff dedukti_2_6_0-menhir_parser_stripped.ml.log.exp
      dedukti_2_6_0-menhir_parser_stripped.ml.log)))

(rule (target diy.5.01-ARMParser.opp.out) (deps diy.5.01-ARMParser.mly)
  (action
    (with-outputs-to diy.5.01-ARMParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff diy.5.01-ARMParser.opp.exp diy.5.01-ARMParser.opp.out)))

(rule
  (targets diy.5.01-ARMParser.out diy.5.01-ARMParser.automaton
    diy.5.01-ARMParser.automaton.resolved diy.5.01-ARMParser.conflicts
    diy.5.01-ARMParser.timings)
  (deps diy.5.01-ARMParser.mly)
  (action
    (with-outputs-to diy.5.01-ARMParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to diy.5.01-ARMParser.timings %{deps})))))

(rule (alias quick)
  (action (diff diy.5.01-ARMParser.exp diy.5.01-ARMParser.out)))

(rule (alias quick)
  (action
    (diff diy.5.01-ARMParser.automaton.exp diy.5.01-ARMParser.automaton)))

(rule (alias quick)
  (action
    (diff diy.5.01-ARMParser.automaton.resolved.exp
      diy.5.01-ARMParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff diy.5.01-ARMParser.conflicts.exp diy.5.01-ARMParser.conflicts)))

(rule (target diy_5_01-ARMParser_stripped.mly) (deps diy.5.01-ARMParser.mly)
  (action
    (with-stderr-to diy_5_01-ARMParser_stripped.ignored
      (with-stdout-to diy_5_01-ARMParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets diy_5_01-ARMParser_stripped.log diy_5_01-ARMParser_stripped.mli
    diy_5_01-ARMParser_stripped.ml diy_5_01-ARMParser_stripped.stacklang
    diy_5_01-ARMParser_stripped.timings diy_5_01-ARMParser_stripped.scount
    diy_5_01-ARMParser_stripped.dcount)
  (deps diy_5_01-ARMParser_stripped.mly)
  (action
    (with-outputs-to diy_5_01-ARMParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to diy_5_01-ARMParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      diy_5_01-ARMParser_stripped.stacklang))

(rule
  (targets diy_5_01-ARMParser_stripped.cmi
    diy_5_01-ARMParser_stripped.mli.log)
  (deps diy_5_01-ARMParser_stripped.mli)
  (action
    (with-stdout-to diy_5_01-ARMParser_stripped.mli.dtimings
      (with-stderr-to diy_5_01-ARMParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c diy_5_01-ARMParser_stripped.mli)))))

(rule
  (targets diy_5_01-ARMParser_stripped.cmo
    diy_5_01-ARMParser_stripped.ml.log)
  (deps diy_5_01-ARMParser_stripped.ml diy_5_01-ARMParser_stripped.cmi)
  (action
    (with-stdout-to diy_5_01-ARMParser_stripped.ml.dtimings
      (with-stderr-to diy_5_01-ARMParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c diy_5_01-ARMParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff diy_5_01-ARMParser_stripped.ml.log.exp
      diy_5_01-ARMParser_stripped.ml.log)))

(rule (target dml.opp.out) (deps dml.mly)
  (action
    (with-outputs-to dml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff dml.opp.exp dml.opp.out)))

(rule
  (targets dml.out dml.automaton dml.automaton.resolved dml.conflicts
    dml.timings)
  (deps dml.mly)
  (action
    (with-outputs-to dml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to dml.timings %{deps})))))

(rule (alias quick) (action (diff dml.exp dml.out)))

(rule (alias quick) (action (diff dml.automaton.exp dml.automaton)))

(rule (alias quick)
  (action (diff dml.automaton.resolved.exp dml.automaton.resolved)))

(rule (alias quick) (action (diff dml.conflicts.exp dml.conflicts)))

(rule (target dml_stripped.mly) (deps dml.mly)
  (action
    (with-stderr-to dml_stripped.ignored
      (with-stdout-to dml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets dml_stripped.log dml_stripped.mli dml_stripped.ml
    dml_stripped.stacklang dml_stripped.timings dml_stripped.scount
    dml_stripped.dcount)
  (deps dml_stripped.mly)
  (action
    (with-outputs-to dml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dml_stripped.timings %{deps})))))

(alias (name quick) (deps
                      dml_stripped.stacklang))

(rule (targets dml_stripped.cmi dml_stripped.mli.log) (deps dml_stripped.mli)
  (action
    (with-stdout-to dml_stripped.mli.dtimings
      (with-stderr-to dml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c dml_stripped.mli)))))

(rule (targets dml_stripped.cmo dml_stripped.ml.log)
  (deps dml_stripped.ml dml_stripped.cmi)
  (action
    (with-stdout-to dml_stripped.ml.dtimings
      (with-stderr-to dml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c dml_stripped.ml)))))

(rule (alias test)
  (action (diff dml_stripped.ml.log.exp dml_stripped.ml.log)))

(rule (target dns_zone_parser.opp.out) (deps dns_zone_parser.mly)
  (action
    (with-outputs-to dns_zone_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff dns_zone_parser.opp.exp dns_zone_parser.opp.out)))

(rule
  (targets dns_zone_parser.out dns_zone_parser.automaton
    dns_zone_parser.automaton.resolved dns_zone_parser.conflicts
    dns_zone_parser.timings)
  (deps dns_zone_parser.mly)
  (action
    (with-outputs-to dns_zone_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to dns_zone_parser.timings %{deps})))))

(rule (alias quick) (action (diff dns_zone_parser.exp dns_zone_parser.out)))

(rule (alias quick)
  (action (diff dns_zone_parser.automaton.exp dns_zone_parser.automaton)))

(rule (alias quick)
  (action
    (diff dns_zone_parser.automaton.resolved.exp
      dns_zone_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff dns_zone_parser.conflicts.exp dns_zone_parser.conflicts)))

(rule (target dns_zone_parser_stripped.mly) (deps dns_zone_parser.mly)
  (action
    (with-stderr-to dns_zone_parser_stripped.ignored
      (with-stdout-to dns_zone_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets dns_zone_parser_stripped.log dns_zone_parser_stripped.mli
    dns_zone_parser_stripped.ml dns_zone_parser_stripped.stacklang
    dns_zone_parser_stripped.timings dns_zone_parser_stripped.scount
    dns_zone_parser_stripped.dcount)
  (deps dns_zone_parser_stripped.mly)
  (action
    (with-outputs-to dns_zone_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dns_zone_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      dns_zone_parser_stripped.stacklang))

(rule (targets dns_zone_parser_stripped.cmi dns_zone_parser_stripped.mli.log)
  (deps dns_zone_parser_stripped.mli)
  (action
    (with-stdout-to dns_zone_parser_stripped.mli.dtimings
      (with-stderr-to dns_zone_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c dns_zone_parser_stripped.mli)))))

(rule (targets dns_zone_parser_stripped.cmo dns_zone_parser_stripped.ml.log)
  (deps dns_zone_parser_stripped.ml dns_zone_parser_stripped.cmi)
  (action
    (with-stdout-to dns_zone_parser_stripped.ml.dtimings
      (with-stderr-to dns_zone_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c dns_zone_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff dns_zone_parser_stripped.ml.log.exp
      dns_zone_parser_stripped.ml.log)))

(rule (target doc-ock-xml.1.2.1-docOckXmlParser.opp.out)
  (deps doc-ock-xml.1.2.1-docOckXmlParser.mly)
  (action
    (with-outputs-to doc-ock-xml.1.2.1-docOckXmlParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.opp.exp
      doc-ock-xml.1.2.1-docOckXmlParser.opp.out)))

(rule
  (targets doc-ock-xml.1.2.1-docOckXmlParser.out
    doc-ock-xml.1.2.1-docOckXmlParser.automaton
    doc-ock-xml.1.2.1-docOckXmlParser.automaton.resolved
    doc-ock-xml.1.2.1-docOckXmlParser.conflicts
    doc-ock-xml.1.2.1-docOckXmlParser.timings)
  (deps doc-ock-xml.1.2.1-docOckXmlParser.mly)
  (action
    (with-outputs-to doc-ock-xml.1.2.1-docOckXmlParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to doc-ock-xml.1.2.1-docOckXmlParser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.exp
      doc-ock-xml.1.2.1-docOckXmlParser.out)))

(rule (alias quick)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.automaton.exp
      doc-ock-xml.1.2.1-docOckXmlParser.automaton)))

(rule (alias quick)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.automaton.resolved.exp
      doc-ock-xml.1.2.1-docOckXmlParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.conflicts.exp
      doc-ock-xml.1.2.1-docOckXmlParser.conflicts)))

(rule (target doc-ock-xml_1_2_1-docOckXmlParser_stripped.mly)
  (deps doc-ock-xml.1.2.1-docOckXmlParser.mly)
  (action
    (with-stderr-to doc-ock-xml_1_2_1-docOckXmlParser_stripped.ignored
      (with-stdout-to doc-ock-xml_1_2_1-docOckXmlParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets doc-ock-xml_1_2_1-docOckXmlParser_stripped.log
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.mli
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.ml
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.stacklang
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.timings
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.scount
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.dcount)
  (deps doc-ock-xml_1_2_1-docOckXmlParser_stripped.mly)
  (action
    (with-outputs-to doc-ock-xml_1_2_1-docOckXmlParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to doc-ock-xml_1_2_1-docOckXmlParser_stripped.timings
          %{deps})))))

(alias (name quick)
  (deps
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.stacklang))

(rule
  (targets doc-ock-xml_1_2_1-docOckXmlParser_stripped.cmi
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.mli.log)
  (deps doc-ock-xml_1_2_1-docOckXmlParser_stripped.mli)
  (action
    (with-stdout-to doc-ock-xml_1_2_1-docOckXmlParser_stripped.mli.dtimings
      (with-stderr-to doc-ock-xml_1_2_1-docOckXmlParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          doc-ock-xml_1_2_1-docOckXmlParser_stripped.mli)))))

(rule
  (targets doc-ock-xml_1_2_1-docOckXmlParser_stripped.cmo
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.ml.log)
  (deps doc-ock-xml_1_2_1-docOckXmlParser_stripped.ml
    doc-ock-xml_1_2_1-docOckXmlParser_stripped.cmi)
  (action
    (with-stdout-to doc-ock-xml_1_2_1-docOckXmlParser_stripped.ml.dtimings
      (with-stderr-to doc-ock-xml_1_2_1-docOckXmlParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          doc-ock-xml_1_2_1-docOckXmlParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff doc-ock-xml_1_2_1-docOckXmlParser_stripped.ml.log.exp
      doc-ock-xml_1_2_1-docOckXmlParser_stripped.ml.log)))

(rule (target dolmen.0.2-parseDimacs.opp.out)
  (deps dolmen.0.2-parseDimacs.mly dolmen.0.2-parseDimacs01.mly)
  (action
    (with-outputs-to dolmen.0.2-parseDimacs.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen.0.2-parseDimacs --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff dolmen.0.2-parseDimacs.opp.exp dolmen.0.2-parseDimacs.opp.out)))

(rule
  (targets dolmen.0.2-parseDimacs.out dolmen.0.2-parseDimacs.automaton
    dolmen.0.2-parseDimacs.automaton.resolved
    dolmen.0.2-parseDimacs.conflicts dolmen.0.2-parseDimacs.timings)
  (deps dolmen.0.2-parseDimacs.mly dolmen.0.2-parseDimacs01.mly)
  (action
    (with-outputs-to dolmen.0.2-parseDimacs.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen.0.2-parseDimacs --table --dump
          --dump-resolved --explain -lg 2 -la 2 -lc 2 --timings-to
          dolmen.0.2-parseDimacs.timings %{deps})))))

(rule (alias quick)
  (action (diff dolmen.0.2-parseDimacs.exp dolmen.0.2-parseDimacs.out)))

(rule (alias quick)
  (action
    (diff dolmen.0.2-parseDimacs.automaton.exp
      dolmen.0.2-parseDimacs.automaton)))

(rule (alias quick)
  (action
    (diff dolmen.0.2-parseDimacs.automaton.resolved.exp
      dolmen.0.2-parseDimacs.automaton.resolved)))

(rule (alias quick)
  (action
    (diff dolmen.0.2-parseDimacs.conflicts.exp
      dolmen.0.2-parseDimacs.conflicts)))

(rule (target dolmen_0_2-parseDimacs_stripped.mly)
  (deps dolmen.0.2-parseDimacs.mly dolmen.0.2-parseDimacs01.mly)
  (action
    (with-stderr-to dolmen_0_2-parseDimacs_stripped.ignored
      (with-stdout-to dolmen_0_2-parseDimacs_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base dolmen.0.2-parseDimacs --only-preprocess-uu
            %{deps}))))))

(rule
  (targets dolmen_0_2-parseDimacs_stripped.log
    dolmen_0_2-parseDimacs_stripped.mli dolmen_0_2-parseDimacs_stripped.ml
    dolmen_0_2-parseDimacs_stripped.stacklang
    dolmen_0_2-parseDimacs_stripped.timings
    dolmen_0_2-parseDimacs_stripped.scount
    dolmen_0_2-parseDimacs_stripped.dcount)
  (deps dolmen_0_2-parseDimacs_stripped.mly)
  (action
    (with-outputs-to dolmen_0_2-parseDimacs_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dolmen_0_2-parseDimacs_stripped.timings %{deps})))))

(alias (name quick) (deps
                      dolmen_0_2-parseDimacs_stripped.stacklang))

(rule
  (targets dolmen_0_2-parseDimacs_stripped.cmi
    dolmen_0_2-parseDimacs_stripped.mli.log)
  (deps dolmen_0_2-parseDimacs_stripped.mli)
  (action
    (with-stdout-to dolmen_0_2-parseDimacs_stripped.mli.dtimings
      (with-stderr-to dolmen_0_2-parseDimacs_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          dolmen_0_2-parseDimacs_stripped.mli)))))

(rule
  (targets dolmen_0_2-parseDimacs_stripped.cmo
    dolmen_0_2-parseDimacs_stripped.ml.log)
  (deps dolmen_0_2-parseDimacs_stripped.ml
    dolmen_0_2-parseDimacs_stripped.cmi)
  (action
    (with-stdout-to dolmen_0_2-parseDimacs_stripped.ml.dtimings
      (with-stderr-to dolmen_0_2-parseDimacs_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          dolmen_0_2-parseDimacs_stripped.ml)))))

(rule (alias test)
  (action
    (diff dolmen_0_2-parseDimacs_stripped.ml.log.exp
      dolmen_0_2-parseDimacs_stripped.ml.log)))

(rule (target dolmen.0.2-parseTptp.opp.out)
  (deps dolmen.0.2-parseTptp.mly dolmen.0.2-parseTptp01.mly)
  (action
    (with-outputs-to dolmen.0.2-parseTptp.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen.0.2-parseTptp --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff dolmen.0.2-parseTptp.opp.exp dolmen.0.2-parseTptp.opp.out)))

(rule
  (targets dolmen.0.2-parseTptp.out dolmen.0.2-parseTptp.automaton
    dolmen.0.2-parseTptp.automaton.resolved dolmen.0.2-parseTptp.conflicts
    dolmen.0.2-parseTptp.timings)
  (deps dolmen.0.2-parseTptp.mly dolmen.0.2-parseTptp01.mly)
  (action
    (with-outputs-to dolmen.0.2-parseTptp.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen.0.2-parseTptp --table --dump
          --dump-resolved --explain -lg 2 -la 2 -lc 2 --timings-to
          dolmen.0.2-parseTptp.timings %{deps})))))

(rule (alias quick)
  (action (diff dolmen.0.2-parseTptp.exp dolmen.0.2-parseTptp.out)))

(rule (alias quick)
  (action
    (diff dolmen.0.2-parseTptp.automaton.exp dolmen.0.2-parseTptp.automaton)))

(rule (alias quick)
  (action
    (diff dolmen.0.2-parseTptp.automaton.resolved.exp
      dolmen.0.2-parseTptp.automaton.resolved)))

(rule (alias quick)
  (action
    (diff dolmen.0.2-parseTptp.conflicts.exp dolmen.0.2-parseTptp.conflicts)))

(rule (target dolmen_0_2-parseTptp_stripped.mly)
  (deps dolmen.0.2-parseTptp.mly dolmen.0.2-parseTptp01.mly)
  (action
    (with-stderr-to dolmen_0_2-parseTptp_stripped.ignored
      (with-stdout-to dolmen_0_2-parseTptp_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base dolmen.0.2-parseTptp --only-preprocess-uu
            %{deps}))))))

(rule
  (targets dolmen_0_2-parseTptp_stripped.log
    dolmen_0_2-parseTptp_stripped.mli dolmen_0_2-parseTptp_stripped.ml
    dolmen_0_2-parseTptp_stripped.stacklang
    dolmen_0_2-parseTptp_stripped.timings
    dolmen_0_2-parseTptp_stripped.scount
    dolmen_0_2-parseTptp_stripped.dcount)
  (deps dolmen_0_2-parseTptp_stripped.mly)
  (action
    (with-outputs-to dolmen_0_2-parseTptp_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dolmen_0_2-parseTptp_stripped.timings %{deps})))))

(alias (name quick) (deps
                      dolmen_0_2-parseTptp_stripped.stacklang))

(rule
  (targets dolmen_0_2-parseTptp_stripped.cmi
    dolmen_0_2-parseTptp_stripped.mli.log)
  (deps dolmen_0_2-parseTptp_stripped.mli)
  (action
    (with-stdout-to dolmen_0_2-parseTptp_stripped.mli.dtimings
      (with-stderr-to dolmen_0_2-parseTptp_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          dolmen_0_2-parseTptp_stripped.mli)))))

(rule
  (targets dolmen_0_2-parseTptp_stripped.cmo
    dolmen_0_2-parseTptp_stripped.ml.log)
  (deps dolmen_0_2-parseTptp_stripped.ml dolmen_0_2-parseTptp_stripped.cmi)
  (action
    (with-stdout-to dolmen_0_2-parseTptp_stripped.ml.dtimings
      (with-stderr-to dolmen_0_2-parseTptp_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          dolmen_0_2-parseTptp_stripped.ml)))))

(rule (alias test)
  (action
    (diff dolmen_0_2-parseTptp_stripped.ml.log.exp
      dolmen_0_2-parseTptp_stripped.ml.log)))

(rule (target dolmen_ae.opp.out) (deps dolmen_ae.mly dolmen_ae01.mly)
  (action
    (with-outputs-to dolmen_ae.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen_ae --only-preprocess %{deps})))))

(rule (alias quick) (action (diff dolmen_ae.opp.exp dolmen_ae.opp.out)))

(rule
  (targets dolmen_ae.out dolmen_ae.automaton dolmen_ae.automaton.resolved
    dolmen_ae.conflicts dolmen_ae.timings)
  (deps dolmen_ae.mly dolmen_ae01.mly)
  (action
    (with-outputs-to dolmen_ae.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen_ae --table --dump --dump-resolved --explain
          -lg 2 -la 2 -lc 2 --timings-to dolmen_ae.timings %{deps})))))

(rule (alias quick) (action (diff dolmen_ae.exp dolmen_ae.out)))

(rule (alias quick)
  (action (diff dolmen_ae.automaton.exp dolmen_ae.automaton)))

(rule (alias quick)
  (action
    (diff dolmen_ae.automaton.resolved.exp dolmen_ae.automaton.resolved)))

(rule (alias quick)
  (action (diff dolmen_ae.conflicts.exp dolmen_ae.conflicts)))

(rule (target dolmen_ae_stripped.mly) (deps dolmen_ae.mly dolmen_ae01.mly)
  (action
    (with-stderr-to dolmen_ae_stripped.ignored
      (with-stdout-to dolmen_ae_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base dolmen_ae --only-preprocess-uu %{deps}))))))

(rule
  (targets dolmen_ae_stripped.log dolmen_ae_stripped.mli
    dolmen_ae_stripped.ml dolmen_ae_stripped.stacklang
    dolmen_ae_stripped.timings dolmen_ae_stripped.scount
    dolmen_ae_stripped.dcount)
  (deps dolmen_ae_stripped.mly)
  (action
    (with-outputs-to dolmen_ae_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dolmen_ae_stripped.timings %{deps})))))

(alias (name quick) (deps
                      dolmen_ae_stripped.stacklang))

(rule (targets dolmen_ae_stripped.cmi dolmen_ae_stripped.mli.log)
  (deps dolmen_ae_stripped.mli)
  (action
    (with-stdout-to dolmen_ae_stripped.mli.dtimings
      (with-stderr-to dolmen_ae_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c dolmen_ae_stripped.mli)))))

(rule (targets dolmen_ae_stripped.cmo dolmen_ae_stripped.ml.log)
  (deps dolmen_ae_stripped.ml dolmen_ae_stripped.cmi)
  (action
    (with-stdout-to dolmen_ae_stripped.ml.dtimings
      (with-stderr-to dolmen_ae_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c dolmen_ae_stripped.ml)))))

(rule (alias test)
  (action (diff dolmen_ae_stripped.ml.log.exp dolmen_ae_stripped.ml.log)))

(rule (target dule.opp.out) (deps dule.mly)
  (action
    (with-outputs-to dule.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff dule.opp.exp dule.opp.out)))

(rule
  (targets dule.out dule.automaton dule.automaton.resolved dule.conflicts
    dule.timings)
  (deps dule.mly)
  (action
    (with-outputs-to dule.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to dule.timings %{deps})))))

(rule (alias quick) (action (diff dule.exp dule.out)))

(rule (alias quick) (action (diff dule.automaton.exp dule.automaton)))

(rule (alias quick)
  (action (diff dule.automaton.resolved.exp dule.automaton.resolved)))

(rule (alias quick) (action (diff dule.conflicts.exp dule.conflicts)))

(rule (target dule_stripped.mly) (deps dule.mly)
  (action
    (with-stderr-to dule_stripped.ignored
      (with-stdout-to dule_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets dule_stripped.log dule_stripped.mli dule_stripped.ml
    dule_stripped.stacklang dule_stripped.timings dule_stripped.scount
    dule_stripped.dcount)
  (deps dule_stripped.mly)
  (action
    (with-outputs-to dule_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dule_stripped.timings %{deps})))))

(alias (name quick) (deps
                      dule_stripped.stacklang))

(rule (targets dule_stripped.cmi dule_stripped.mli.log)
  (deps dule_stripped.mli)
  (action
    (with-stdout-to dule_stripped.mli.dtimings
      (with-stderr-to dule_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c dule_stripped.mli)))))

(rule (targets dule_stripped.cmo dule_stripped.ml.log)
  (deps dule_stripped.ml dule_stripped.cmi)
  (action
    (with-stdout-to dule_stripped.ml.dtimings
      (with-stderr-to dule_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c dule_stripped.ml)))))

(rule (alias test)
  (action (diff dule_stripped.ml.log.exp dule_stripped.ml.log)))

(rule (target dune.1.4.0-opamBaseParser.opp.out)
  (deps dune.1.4.0-opamBaseParser.mly)
  (action
    (with-outputs-to dune.1.4.0-opamBaseParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff dune.1.4.0-opamBaseParser.opp.exp
      dune.1.4.0-opamBaseParser.opp.out)))

(rule
  (targets dune.1.4.0-opamBaseParser.out dune.1.4.0-opamBaseParser.automaton
    dune.1.4.0-opamBaseParser.automaton.resolved
    dune.1.4.0-opamBaseParser.conflicts dune.1.4.0-opamBaseParser.timings)
  (deps dune.1.4.0-opamBaseParser.mly)
  (action
    (with-outputs-to dune.1.4.0-opamBaseParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to dune.1.4.0-opamBaseParser.timings %{deps})))))

(rule (alias quick)
  (action (diff dune.1.4.0-opamBaseParser.exp dune.1.4.0-opamBaseParser.out)))

(rule (alias quick)
  (action
    (diff dune.1.4.0-opamBaseParser.automaton.exp
      dune.1.4.0-opamBaseParser.automaton)))

(rule (alias quick)
  (action
    (diff dune.1.4.0-opamBaseParser.automaton.resolved.exp
      dune.1.4.0-opamBaseParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff dune.1.4.0-opamBaseParser.conflicts.exp
      dune.1.4.0-opamBaseParser.conflicts)))

(rule (target dune_1_4_0-opamBaseParser_stripped.mly)
  (deps dune.1.4.0-opamBaseParser.mly)
  (action
    (with-stderr-to dune_1_4_0-opamBaseParser_stripped.ignored
      (with-stdout-to dune_1_4_0-opamBaseParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets dune_1_4_0-opamBaseParser_stripped.log
    dune_1_4_0-opamBaseParser_stripped.mli
    dune_1_4_0-opamBaseParser_stripped.ml
    dune_1_4_0-opamBaseParser_stripped.stacklang
    dune_1_4_0-opamBaseParser_stripped.timings
    dune_1_4_0-opamBaseParser_stripped.scount
    dune_1_4_0-opamBaseParser_stripped.dcount)
  (deps dune_1_4_0-opamBaseParser_stripped.mly)
  (action
    (with-outputs-to dune_1_4_0-opamBaseParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to dune_1_4_0-opamBaseParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      dune_1_4_0-opamBaseParser_stripped.stacklang))

(rule
  (targets dune_1_4_0-opamBaseParser_stripped.cmi
    dune_1_4_0-opamBaseParser_stripped.mli.log)
  (deps dune_1_4_0-opamBaseParser_stripped.mli)
  (action
    (with-stdout-to dune_1_4_0-opamBaseParser_stripped.mli.dtimings
      (with-stderr-to dune_1_4_0-opamBaseParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          dune_1_4_0-opamBaseParser_stripped.mli)))))

(rule
  (targets dune_1_4_0-opamBaseParser_stripped.cmo
    dune_1_4_0-opamBaseParser_stripped.ml.log)
  (deps dune_1_4_0-opamBaseParser_stripped.ml
    dune_1_4_0-opamBaseParser_stripped.cmi)
  (action
    (with-stdout-to dune_1_4_0-opamBaseParser_stripped.ml.dtimings
      (with-stderr-to dune_1_4_0-opamBaseParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          dune_1_4_0-opamBaseParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff dune_1_4_0-opamBaseParser_stripped.ml.log.exp
      dune_1_4_0-opamBaseParser_stripped.ml.log)))

(rule (target duplicated_prec.opp.out) (deps duplicated_prec.mly)
  (action
    (with-outputs-to duplicated_prec.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff duplicated_prec.opp.exp duplicated_prec.opp.out)))

(rule
  (targets duplicated_prec.out duplicated_prec.automaton
    duplicated_prec.automaton.resolved duplicated_prec.conflicts
    duplicated_prec.timings)
  (deps duplicated_prec.mly)
  (action
    (with-outputs-to duplicated_prec.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to duplicated_prec.timings %{deps})))))

(rule (alias quick) (action (diff duplicated_prec.exp duplicated_prec.out)))

(rule (alias quick)
  (action (diff duplicated_prec.automaton.exp duplicated_prec.automaton)))

(rule (alias quick)
  (action
    (diff duplicated_prec.automaton.resolved.exp
      duplicated_prec.automaton.resolved)))

(rule (alias quick)
  (action (diff duplicated_prec.conflicts.exp duplicated_prec.conflicts)))

(rule (target duplicated_prec_stripped.mly) (deps duplicated_prec.mly)
  (action
    (with-stderr-to duplicated_prec_stripped.ignored
      (with-stdout-to duplicated_prec_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets duplicated_prec_stripped.log duplicated_prec_stripped.mli
    duplicated_prec_stripped.ml duplicated_prec_stripped.stacklang
    duplicated_prec_stripped.timings duplicated_prec_stripped.scount
    duplicated_prec_stripped.dcount)
  (deps duplicated_prec_stripped.mly)
  (action
    (with-outputs-to duplicated_prec_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to duplicated_prec_stripped.timings %{deps})))))

(alias (name quick) (deps
                      duplicated_prec_stripped.stacklang))

(rule (targets duplicated_prec_stripped.cmi duplicated_prec_stripped.mli.log)
  (deps duplicated_prec_stripped.mli)
  (action
    (with-stdout-to duplicated_prec_stripped.mli.dtimings
      (with-stderr-to duplicated_prec_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c duplicated_prec_stripped.mli)))))

(rule (targets duplicated_prec_stripped.cmo duplicated_prec_stripped.ml.log)
  (deps duplicated_prec_stripped.ml duplicated_prec_stripped.cmi)
  (action
    (with-stdout-to duplicated_prec_stripped.ml.dtimings
      (with-stderr-to duplicated_prec_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c duplicated_prec_stripped.ml)))))

(rule (alias test)
  (action
    (diff duplicated_prec_stripped.ml.log.exp
      duplicated_prec_stripped.ml.log)))

(rule (target efuns.opp.out) (deps efuns.mly)
  (action
    (with-outputs-to efuns.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff efuns.opp.exp efuns.opp.out)))

(rule
  (targets efuns.out efuns.automaton efuns.automaton.resolved efuns.conflicts
    efuns.timings)
  (deps efuns.mly)
  (action
    (with-outputs-to efuns.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to efuns.timings %{deps})))))

(rule (alias quick) (action (diff efuns.exp efuns.out)))

(rule (alias quick) (action (diff efuns.automaton.exp efuns.automaton)))

(rule (alias quick)
  (action (diff efuns.automaton.resolved.exp efuns.automaton.resolved)))

(rule (alias quick) (action (diff efuns.conflicts.exp efuns.conflicts)))

(rule (target efuns_stripped.mly) (deps efuns.mly)
  (action
    (with-stderr-to efuns_stripped.ignored
      (with-stdout-to efuns_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets efuns_stripped.log efuns_stripped.mli efuns_stripped.ml
    efuns_stripped.stacklang efuns_stripped.timings efuns_stripped.scount
    efuns_stripped.dcount)
  (deps efuns_stripped.mly)
  (action
    (with-outputs-to efuns_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to efuns_stripped.timings %{deps})))))

(alias (name quick) (deps
                      efuns_stripped.stacklang))

(rule (targets efuns_stripped.cmi efuns_stripped.mli.log)
  (deps efuns_stripped.mli)
  (action
    (with-stdout-to efuns_stripped.mli.dtimings
      (with-stderr-to efuns_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c efuns_stripped.mli)))))

(rule (targets efuns_stripped.cmo efuns_stripped.ml.log)
  (deps efuns_stripped.ml efuns_stripped.cmi)
  (action
    (with-stdout-to efuns_stripped.ml.dtimings
      (with-stderr-to efuns_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c efuns_stripped.ml)))))

(rule (alias test)
  (action (diff efuns_stripped.ml.log.exp efuns_stripped.ml.log)))

(rule (target electrod.0.1.7-Parser.opp.out) (deps electrod.0.1.7-Parser.mly)
  (action
    (with-outputs-to electrod.0.1.7-Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff electrod.0.1.7-Parser.opp.exp electrod.0.1.7-Parser.opp.out)))

(rule
  (targets electrod.0.1.7-Parser.out electrod.0.1.7-Parser.automaton
    electrod.0.1.7-Parser.automaton.resolved electrod.0.1.7-Parser.conflicts
    electrod.0.1.7-Parser.timings)
  (deps electrod.0.1.7-Parser.mly)
  (action
    (with-outputs-to electrod.0.1.7-Parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to electrod.0.1.7-Parser.timings %{deps})))))

(rule (alias quick)
  (action (diff electrod.0.1.7-Parser.exp electrod.0.1.7-Parser.out)))

(rule (alias quick)
  (action
    (diff electrod.0.1.7-Parser.automaton.exp
      electrod.0.1.7-Parser.automaton)))

(rule (alias quick)
  (action
    (diff electrod.0.1.7-Parser.automaton.resolved.exp
      electrod.0.1.7-Parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff electrod.0.1.7-Parser.conflicts.exp
      electrod.0.1.7-Parser.conflicts)))

(rule (target electrod_0_1_7-Parser_stripped.mly)
  (deps electrod.0.1.7-Parser.mly)
  (action
    (with-stderr-to electrod_0_1_7-Parser_stripped.ignored
      (with-stdout-to electrod_0_1_7-Parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets electrod_0_1_7-Parser_stripped.log
    electrod_0_1_7-Parser_stripped.mli electrod_0_1_7-Parser_stripped.ml
    electrod_0_1_7-Parser_stripped.stacklang
    electrod_0_1_7-Parser_stripped.timings
    electrod_0_1_7-Parser_stripped.scount
    electrod_0_1_7-Parser_stripped.dcount)
  (deps electrod_0_1_7-Parser_stripped.mly)
  (action
    (with-outputs-to electrod_0_1_7-Parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to electrod_0_1_7-Parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      electrod_0_1_7-Parser_stripped.stacklang))

(rule
  (targets electrod_0_1_7-Parser_stripped.cmi
    electrod_0_1_7-Parser_stripped.mli.log)
  (deps electrod_0_1_7-Parser_stripped.mli)
  (action
    (with-stdout-to electrod_0_1_7-Parser_stripped.mli.dtimings
      (with-stderr-to electrod_0_1_7-Parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          electrod_0_1_7-Parser_stripped.mli)))))

(rule
  (targets electrod_0_1_7-Parser_stripped.cmo
    electrod_0_1_7-Parser_stripped.ml.log)
  (deps electrod_0_1_7-Parser_stripped.ml electrod_0_1_7-Parser_stripped.cmi)
  (action
    (with-stdout-to electrod_0_1_7-Parser_stripped.ml.dtimings
      (with-stderr-to electrod_0_1_7-Parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          electrod_0_1_7-Parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff electrod_0_1_7-Parser_stripped.ml.log.exp
      electrod_0_1_7-Parser_stripped.ml.log)))

(rule (target electrum00.opp.out)
  (deps electrum00.mly electrum01.mly electrum02.mly electrum03.mly
    electrum04.mly)
  (action
    (with-outputs-to electrum00.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base electrum00 --only-preprocess %{deps})))))

(rule (alias quick) (action (diff electrum00.opp.exp electrum00.opp.out)))

(rule
  (targets electrum00.out electrum00.automaton electrum00.automaton.resolved
    electrum00.conflicts electrum00.timings)
  (deps electrum00.mly electrum01.mly electrum02.mly electrum03.mly
    electrum04.mly)
  (action
    (with-outputs-to electrum00.out
      (with-accepted-exit-codes 0
        (run menhir --base electrum00 --table --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to electrum00.timings
          %{deps})))))

(rule (alias quick) (action (diff electrum00.exp electrum00.out)))

(rule (alias quick)
  (action (diff electrum00.automaton.exp electrum00.automaton)))

(rule (alias quick)
  (action
    (diff electrum00.automaton.resolved.exp electrum00.automaton.resolved)))

(rule (alias quick)
  (action (diff electrum00.conflicts.exp electrum00.conflicts)))

(rule (target electrum00_stripped.mly)
  (deps electrum00.mly electrum01.mly electrum02.mly electrum03.mly
    electrum04.mly)
  (action
    (with-stderr-to electrum00_stripped.ignored
      (with-stdout-to electrum00_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base electrum00 --only-preprocess-uu %{deps}))))))

(rule
  (targets electrum00_stripped.log electrum00_stripped.mli
    electrum00_stripped.ml electrum00_stripped.stacklang
    electrum00_stripped.timings electrum00_stripped.scount
    electrum00_stripped.dcount)
  (deps electrum00_stripped.mly)
  (action
    (with-outputs-to electrum00_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to electrum00_stripped.timings %{deps})))))

(alias (name quick) (deps
                      electrum00_stripped.stacklang))

(rule (targets electrum00_stripped.cmi electrum00_stripped.mli.log)
  (deps electrum00_stripped.mli)
  (action
    (with-stdout-to electrum00_stripped.mli.dtimings
      (with-stderr-to electrum00_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c electrum00_stripped.mli)))))

(rule (targets electrum00_stripped.cmo electrum00_stripped.ml.log)
  (deps electrum00_stripped.ml electrum00_stripped.cmi)
  (action
    (with-stdout-to electrum00_stripped.ml.dtimings
      (with-stderr-to electrum00_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c electrum00_stripped.ml)))))

(rule (alias test)
  (action (diff electrum00_stripped.ml.log.exp electrum00_stripped.ml.log)))

(rule (target empty-action.opp.out) (deps empty-action.mly)
  (action
    (with-outputs-to empty-action.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff empty-action.opp.exp empty-action.opp.out)))

(rule
  (targets empty-action.out empty-action.automaton
    empty-action.automaton.resolved empty-action.conflicts
    empty-action.timings)
  (deps empty-action.mly)
  (action
    (with-outputs-to empty-action.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to empty-action.timings %{deps})))))

(rule (alias quick) (action (diff empty-action.exp empty-action.out)))

(rule (alias quick)
  (action (diff empty-action.automaton.exp empty-action.automaton)))

(rule (alias quick)
  (action
    (diff empty-action.automaton.resolved.exp
      empty-action.automaton.resolved)))

(rule (alias quick)
  (action (diff empty-action.conflicts.exp empty-action.conflicts)))

(rule (target empty-action_stripped.mly) (deps empty-action.mly)
  (action
    (with-stderr-to empty-action_stripped.ignored
      (with-stdout-to empty-action_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets empty-action_stripped.log empty-action_stripped.mli
    empty-action_stripped.ml empty-action_stripped.stacklang
    empty-action_stripped.timings empty-action_stripped.scount
    empty-action_stripped.dcount)
  (deps empty-action_stripped.mly)
  (action
    (with-outputs-to empty-action_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to empty-action_stripped.timings %{deps})))))

(alias (name quick) (deps
                      empty-action_stripped.stacklang))

(rule (targets empty-action_stripped.cmi empty-action_stripped.mli.log)
  (deps empty-action_stripped.mli)
  (action
    (with-stdout-to empty-action_stripped.mli.dtimings
      (with-stderr-to empty-action_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c empty-action_stripped.mli)))))

(rule (targets empty-action_stripped.cmo empty-action_stripped.ml.log)
  (deps empty-action_stripped.ml empty-action_stripped.cmi)
  (action
    (with-stdout-to empty-action_stripped.ml.dtimings
      (with-stderr-to empty-action_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c empty-action_stripped.ml)))))

(rule (alias test)
  (action
    (diff empty-action_stripped.ml.log.exp empty-action_stripped.ml.log)))

(rule (target end-of-stream-conflict.opp.out)
  (deps end-of-stream-conflict.mly)
  (action
    (with-outputs-to end-of-stream-conflict.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff end-of-stream-conflict.opp.exp end-of-stream-conflict.opp.out)))

(rule
  (targets end-of-stream-conflict.out end-of-stream-conflict.automaton
    end-of-stream-conflict.automaton.resolved
    end-of-stream-conflict.conflicts end-of-stream-conflict.timings)
  (deps end-of-stream-conflict.mly)
  (action
    (with-outputs-to end-of-stream-conflict.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to end-of-stream-conflict.timings %{deps})))))

(rule (alias quick)
  (action (diff end-of-stream-conflict.exp end-of-stream-conflict.out)))

(rule (alias quick)
  (action
    (diff end-of-stream-conflict.automaton.exp
      end-of-stream-conflict.automaton)))

(rule (alias quick)
  (action
    (diff end-of-stream-conflict.automaton.resolved.exp
      end-of-stream-conflict.automaton.resolved)))

(rule (alias quick)
  (action
    (diff end-of-stream-conflict.conflicts.exp
      end-of-stream-conflict.conflicts)))

(rule (target end-of-stream-conflict_stripped.mly)
  (deps end-of-stream-conflict.mly)
  (action
    (with-stderr-to end-of-stream-conflict_stripped.ignored
      (with-stdout-to end-of-stream-conflict_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets end-of-stream-conflict_stripped.log
    end-of-stream-conflict_stripped.mli end-of-stream-conflict_stripped.ml
    end-of-stream-conflict_stripped.stacklang
    end-of-stream-conflict_stripped.timings
    end-of-stream-conflict_stripped.scount
    end-of-stream-conflict_stripped.dcount)
  (deps end-of-stream-conflict_stripped.mly)
  (action
    (with-outputs-to end-of-stream-conflict_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to end-of-stream-conflict_stripped.timings %{deps})))))

(alias (name quick) (deps
                      end-of-stream-conflict_stripped.stacklang))

(rule
  (targets end-of-stream-conflict_stripped.cmi
    end-of-stream-conflict_stripped.mli.log)
  (deps end-of-stream-conflict_stripped.mli)
  (action
    (with-stdout-to end-of-stream-conflict_stripped.mli.dtimings
      (with-stderr-to end-of-stream-conflict_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          end-of-stream-conflict_stripped.mli)))))

(rule
  (targets end-of-stream-conflict_stripped.cmo
    end-of-stream-conflict_stripped.ml.log)
  (deps end-of-stream-conflict_stripped.ml
    end-of-stream-conflict_stripped.cmi)
  (action
    (with-stdout-to end-of-stream-conflict_stripped.ml.dtimings
      (with-stderr-to end-of-stream-conflict_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          end-of-stream-conflict_stripped.ml)))))

(rule (alias test)
  (action
    (diff end-of-stream-conflict_stripped.ml.log.exp
      end-of-stream-conflict_stripped.ml.log)))

(rule (target execparser.opp.out) (deps execparser.mly)
  (action
    (with-outputs-to execparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff execparser.opp.exp execparser.opp.out)))

(rule
  (targets execparser.out execparser.automaton execparser.automaton.resolved
    execparser.conflicts execparser.timings)
  (deps execparser.mly)
  (action
    (with-outputs-to execparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to execparser.timings %{deps})))))

(rule (alias quick) (action (diff execparser.exp execparser.out)))

(rule (alias quick)
  (action (diff execparser.automaton.exp execparser.automaton)))

(rule (alias quick)
  (action
    (diff execparser.automaton.resolved.exp execparser.automaton.resolved)))

(rule (alias quick)
  (action (diff execparser.conflicts.exp execparser.conflicts)))

(rule (target execparser_stripped.mly) (deps execparser.mly)
  (action
    (with-stderr-to execparser_stripped.ignored
      (with-stdout-to execparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets execparser_stripped.log execparser_stripped.mli
    execparser_stripped.ml execparser_stripped.stacklang
    execparser_stripped.timings execparser_stripped.scount
    execparser_stripped.dcount)
  (deps execparser_stripped.mly)
  (action
    (with-outputs-to execparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to execparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      execparser_stripped.stacklang))

(rule (targets execparser_stripped.cmi execparser_stripped.mli.log)
  (deps execparser_stripped.mli)
  (action
    (with-stdout-to execparser_stripped.mli.dtimings
      (with-stderr-to execparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c execparser_stripped.mli)))))

(rule (targets execparser_stripped.cmo execparser_stripped.ml.log)
  (deps execparser_stripped.ml execparser_stripped.cmi)
  (action
    (with-stdout-to execparser_stripped.ml.dtimings
      (with-stderr-to execparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c execparser_stripped.ml)))))

(rule (alias test)
  (action (diff execparser_stripped.ml.log.exp execparser_stripped.ml.log)))

(rule (target expansion_ok.opp.out) (deps expansion_ok.mly)
  (action
    (with-outputs-to expansion_ok.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff expansion_ok.opp.exp expansion_ok.opp.out)))

(rule
  (targets expansion_ok.out expansion_ok.automaton
    expansion_ok.automaton.resolved expansion_ok.conflicts
    expansion_ok.timings)
  (deps expansion_ok.mly)
  (action
    (with-outputs-to expansion_ok.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to expansion_ok.timings %{deps})))))

(rule (alias quick) (action (diff expansion_ok.exp expansion_ok.out)))

(rule (alias quick)
  (action (diff expansion_ok.automaton.exp expansion_ok.automaton)))

(rule (alias quick)
  (action
    (diff expansion_ok.automaton.resolved.exp
      expansion_ok.automaton.resolved)))

(rule (alias quick)
  (action (diff expansion_ok.conflicts.exp expansion_ok.conflicts)))

(rule (target expansion_ok_stripped.mly) (deps expansion_ok.mly)
  (action
    (with-stderr-to expansion_ok_stripped.ignored
      (with-stdout-to expansion_ok_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets expansion_ok_stripped.log expansion_ok_stripped.mli
    expansion_ok_stripped.ml expansion_ok_stripped.stacklang
    expansion_ok_stripped.timings expansion_ok_stripped.scount
    expansion_ok_stripped.dcount)
  (deps expansion_ok_stripped.mly)
  (action
    (with-outputs-to expansion_ok_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to expansion_ok_stripped.timings %{deps})))))

(alias (name quick) (deps
                      expansion_ok_stripped.stacklang))

(rule (targets expansion_ok_stripped.cmi expansion_ok_stripped.mli.log)
  (deps expansion_ok_stripped.mli)
  (action
    (with-stdout-to expansion_ok_stripped.mli.dtimings
      (with-stderr-to expansion_ok_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c expansion_ok_stripped.mli)))))

(rule (targets expansion_ok_stripped.cmo expansion_ok_stripped.ml.log)
  (deps expansion_ok_stripped.ml expansion_ok_stripped.cmi)
  (action
    (with-stdout-to expansion_ok_stripped.ml.dtimings
      (with-stderr-to expansion_ok_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c expansion_ok_stripped.ml)))))

(rule (alias test)
  (action
    (diff expansion_ok_stripped.ml.log.exp expansion_ok_stripped.ml.log)))

(rule (target expansion_unused.opp.out) (deps expansion_unused.mly)
  (action
    (with-outputs-to expansion_unused.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff expansion_unused.opp.exp expansion_unused.opp.out)))

(rule
  (targets expansion_unused.out expansion_unused.automaton
    expansion_unused.automaton.resolved expansion_unused.conflicts
    expansion_unused.timings)
  (deps expansion_unused.mly)
  (action
    (with-outputs-to expansion_unused.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to expansion_unused.timings %{deps})))))

(rule (alias quick)
  (action (diff expansion_unused.exp expansion_unused.out)))

(rule (alias quick)
  (action (diff expansion_unused.automaton.exp expansion_unused.automaton)))

(rule (alias quick)
  (action
    (diff expansion_unused.automaton.resolved.exp
      expansion_unused.automaton.resolved)))

(rule (alias quick)
  (action (diff expansion_unused.conflicts.exp expansion_unused.conflicts)))

(rule (target expansion_unused_stripped.mly) (deps expansion_unused.mly)
  (action
    (with-stderr-to expansion_unused_stripped.ignored
      (with-stdout-to expansion_unused_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets expansion_unused_stripped.log expansion_unused_stripped.mli
    expansion_unused_stripped.ml expansion_unused_stripped.stacklang
    expansion_unused_stripped.timings expansion_unused_stripped.scount
    expansion_unused_stripped.dcount)
  (deps expansion_unused_stripped.mly)
  (action
    (with-outputs-to expansion_unused_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to expansion_unused_stripped.timings %{deps})))))

(alias (name quick) (deps
                      expansion_unused_stripped.stacklang))

(rule
  (targets expansion_unused_stripped.cmi expansion_unused_stripped.mli.log)
  (deps expansion_unused_stripped.mli)
  (action
    (with-stdout-to expansion_unused_stripped.mli.dtimings
      (with-stderr-to expansion_unused_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c expansion_unused_stripped.mli)))))

(rule
  (targets expansion_unused_stripped.cmo expansion_unused_stripped.ml.log)
  (deps expansion_unused_stripped.ml expansion_unused_stripped.cmi)
  (action
    (with-stdout-to expansion_unused_stripped.ml.dtimings
      (with-stderr-to expansion_unused_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c expansion_unused_stripped.ml)))))

(rule (alias test)
  (action
    (diff expansion_unused_stripped.ml.log.exp
      expansion_unused_stripped.ml.log)))

(rule (target featherweight.opp.out) (deps featherweight.mly)
  (action
    (with-outputs-to featherweight.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff featherweight.opp.exp featherweight.opp.out)))

(rule
  (targets featherweight.out featherweight.automaton
    featherweight.automaton.resolved featherweight.conflicts
    featherweight.timings)
  (deps featherweight.mly)
  (action
    (with-outputs-to featherweight.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to featherweight.timings %{deps})))))

(rule (alias quick) (action (diff featherweight.exp featherweight.out)))

(rule (alias quick)
  (action (diff featherweight.automaton.exp featherweight.automaton)))

(rule (alias quick)
  (action
    (diff featherweight.automaton.resolved.exp
      featherweight.automaton.resolved)))

(rule (alias quick)
  (action (diff featherweight.conflicts.exp featherweight.conflicts)))

(rule (target featherweight_stripped.mly) (deps featherweight.mly)
  (action
    (with-stderr-to featherweight_stripped.ignored
      (with-stdout-to featherweight_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets featherweight_stripped.log featherweight_stripped.mli
    featherweight_stripped.ml featherweight_stripped.stacklang
    featherweight_stripped.timings featherweight_stripped.scount
    featherweight_stripped.dcount)
  (deps featherweight_stripped.mly)
  (action
    (with-outputs-to featherweight_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to featherweight_stripped.timings %{deps})))))

(alias (name quick) (deps
                      featherweight_stripped.stacklang))

(rule (targets featherweight_stripped.cmi featherweight_stripped.mli.log)
  (deps featherweight_stripped.mli)
  (action
    (with-stdout-to featherweight_stripped.mli.dtimings
      (with-stderr-to featherweight_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c featherweight_stripped.mli)))))

(rule (targets featherweight_stripped.cmo featherweight_stripped.ml.log)
  (deps featherweight_stripped.ml featherweight_stripped.cmi)
  (action
    (with-stdout-to featherweight_stripped.ml.dtimings
      (with-stderr-to featherweight_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c featherweight_stripped.ml)))))

(rule (alias test)
  (action
    (diff featherweight_stripped.ml.log.exp featherweight_stripped.ml.log)))

(rule (target fibonacci.opp.out) (deps fibonacci.mly)
  (action
    (with-outputs-to fibonacci.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff fibonacci.opp.exp fibonacci.opp.out)))

(rule
  (targets fibonacci.out fibonacci.automaton fibonacci.automaton.resolved
    fibonacci.conflicts fibonacci.timings)
  (deps fibonacci.mly)
  (action
    (with-outputs-to fibonacci.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to fibonacci.timings %{deps})))))

(rule (alias quick) (action (diff fibonacci.exp fibonacci.out)))

(rule (alias quick)
  (action (diff fibonacci.automaton.exp fibonacci.automaton)))

(rule (alias quick)
  (action
    (diff fibonacci.automaton.resolved.exp fibonacci.automaton.resolved)))

(rule (alias quick)
  (action (diff fibonacci.conflicts.exp fibonacci.conflicts)))

(rule (target fibonacci_stripped.mly) (deps fibonacci.mly)
  (action
    (with-stderr-to fibonacci_stripped.ignored
      (with-stdout-to fibonacci_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets fibonacci_stripped.log fibonacci_stripped.mli
    fibonacci_stripped.ml fibonacci_stripped.stacklang
    fibonacci_stripped.timings fibonacci_stripped.scount
    fibonacci_stripped.dcount)
  (deps fibonacci_stripped.mly)
  (action
    (with-outputs-to fibonacci_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to fibonacci_stripped.timings %{deps})))))

(alias (name quick) (deps
                      fibonacci_stripped.stacklang))

(rule (targets fibonacci_stripped.cmi fibonacci_stripped.mli.log)
  (deps fibonacci_stripped.mli)
  (action
    (with-stdout-to fibonacci_stripped.mli.dtimings
      (with-stderr-to fibonacci_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c fibonacci_stripped.mli)))))

(rule (targets fibonacci_stripped.cmo fibonacci_stripped.ml.log)
  (deps fibonacci_stripped.ml fibonacci_stripped.cmi)
  (action
    (with-stdout-to fibonacci_stripped.ml.dtimings
      (with-stderr-to fibonacci_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c fibonacci_stripped.ml)))))

(rule (alias test)
  (action (diff fibonacci_stripped.ml.log.exp fibonacci_stripped.ml.log)))

(rule (target filiot.opp.out) (deps filiot.mly)
  (action
    (with-outputs-to filiot.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff filiot.opp.exp filiot.opp.out)))

(rule
  (targets filiot.out filiot.automaton filiot.automaton.resolved
    filiot.conflicts filiot.timings)
  (deps filiot.mly)
  (action
    (with-outputs-to filiot.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to filiot.timings %{deps})))))

(rule (alias quick) (action (diff filiot.exp filiot.out)))

(rule (alias quick) (action (diff filiot.automaton.exp filiot.automaton)))

(rule (alias quick)
  (action (diff filiot.automaton.resolved.exp filiot.automaton.resolved)))

(rule (alias quick) (action (diff filiot.conflicts.exp filiot.conflicts)))

(rule (target filiot_stripped.mly) (deps filiot.mly)
  (action
    (with-stderr-to filiot_stripped.ignored
      (with-stdout-to filiot_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets filiot_stripped.log filiot_stripped.mli filiot_stripped.ml
    filiot_stripped.stacklang filiot_stripped.timings filiot_stripped.scount
    filiot_stripped.dcount)
  (deps filiot_stripped.mly)
  (action
    (with-outputs-to filiot_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to filiot_stripped.timings %{deps})))))

(alias (name quick) (deps
                      filiot_stripped.stacklang))

(rule (targets filiot_stripped.cmi filiot_stripped.mli.log)
  (deps filiot_stripped.mli)
  (action
    (with-stdout-to filiot_stripped.mli.dtimings
      (with-stderr-to filiot_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c filiot_stripped.mli)))))

(rule (targets filiot_stripped.cmo filiot_stripped.ml.log)
  (deps filiot_stripped.ml filiot_stripped.cmi)
  (action
    (with-stdout-to filiot_stripped.ml.dtimings
      (with-stderr-to filiot_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c filiot_stripped.ml)))))

(rule (alias test)
  (action (diff filiot_stripped.ml.log.exp filiot_stripped.ml.log)))

(rule (target flowcaml.opp.out) (deps flowcaml.mly)
  (action
    (with-outputs-to flowcaml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff flowcaml.opp.exp flowcaml.opp.out)))

(rule
  (targets flowcaml.out flowcaml.automaton flowcaml.automaton.resolved
    flowcaml.conflicts flowcaml.timings)
  (deps flowcaml.mly)
  (action
    (with-outputs-to flowcaml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to flowcaml.timings %{deps})))))

(rule (alias quick) (action (diff flowcaml.exp flowcaml.out)))

(rule (alias quick)
  (action (diff flowcaml.automaton.exp flowcaml.automaton)))

(rule (alias quick)
  (action (diff flowcaml.automaton.resolved.exp flowcaml.automaton.resolved)))

(rule (alias quick)
  (action (diff flowcaml.conflicts.exp flowcaml.conflicts)))

(rule (target flowcaml_stripped.mly) (deps flowcaml.mly)
  (action
    (with-stderr-to flowcaml_stripped.ignored
      (with-stdout-to flowcaml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets flowcaml_stripped.log flowcaml_stripped.mli flowcaml_stripped.ml
    flowcaml_stripped.stacklang flowcaml_stripped.timings
    flowcaml_stripped.scount flowcaml_stripped.dcount)
  (deps flowcaml_stripped.mly)
  (action
    (with-outputs-to flowcaml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to flowcaml_stripped.timings %{deps})))))

(alias (name quick) (deps
                      flowcaml_stripped.stacklang))

(rule (targets flowcaml_stripped.cmi flowcaml_stripped.mli.log)
  (deps flowcaml_stripped.mli)
  (action
    (with-stdout-to flowcaml_stripped.mli.dtimings
      (with-stderr-to flowcaml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c flowcaml_stripped.mli)))))

(rule (targets flowcaml_stripped.cmo flowcaml_stripped.ml.log)
  (deps flowcaml_stripped.ml flowcaml_stripped.cmi)
  (action
    (with-stdout-to flowcaml_stripped.ml.dtimings
      (with-stderr-to flowcaml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c flowcaml_stripped.ml)))))

(rule (alias test)
  (action (diff flowcaml_stripped.ml.log.exp flowcaml_stripped.ml.log)))

(rule (target flowcaml-docgen.opp.out) (deps flowcaml-docgen.mly)
  (action
    (with-outputs-to flowcaml-docgen.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff flowcaml-docgen.opp.exp flowcaml-docgen.opp.out)))

(rule
  (targets flowcaml-docgen.out flowcaml-docgen.automaton
    flowcaml-docgen.automaton.resolved flowcaml-docgen.conflicts
    flowcaml-docgen.timings)
  (deps flowcaml-docgen.mly)
  (action
    (with-outputs-to flowcaml-docgen.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to flowcaml-docgen.timings %{deps})))))

(rule (alias quick) (action (diff flowcaml-docgen.exp flowcaml-docgen.out)))

(rule (alias quick)
  (action (diff flowcaml-docgen.automaton.exp flowcaml-docgen.automaton)))

(rule (alias quick)
  (action
    (diff flowcaml-docgen.automaton.resolved.exp
      flowcaml-docgen.automaton.resolved)))

(rule (alias quick)
  (action (diff flowcaml-docgen.conflicts.exp flowcaml-docgen.conflicts)))

(rule (target flowcaml-docgen_stripped.mly) (deps flowcaml-docgen.mly)
  (action
    (with-stderr-to flowcaml-docgen_stripped.ignored
      (with-stdout-to flowcaml-docgen_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets flowcaml-docgen_stripped.log flowcaml-docgen_stripped.mli
    flowcaml-docgen_stripped.ml flowcaml-docgen_stripped.stacklang
    flowcaml-docgen_stripped.timings flowcaml-docgen_stripped.scount
    flowcaml-docgen_stripped.dcount)
  (deps flowcaml-docgen_stripped.mly)
  (action
    (with-outputs-to flowcaml-docgen_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to flowcaml-docgen_stripped.timings %{deps})))))

(alias (name quick) (deps
                      flowcaml-docgen_stripped.stacklang))

(rule (targets flowcaml-docgen_stripped.cmi flowcaml-docgen_stripped.mli.log)
  (deps flowcaml-docgen_stripped.mli)
  (action
    (with-stdout-to flowcaml-docgen_stripped.mli.dtimings
      (with-stderr-to flowcaml-docgen_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c flowcaml-docgen_stripped.mli)))))

(rule (targets flowcaml-docgen_stripped.cmo flowcaml-docgen_stripped.ml.log)
  (deps flowcaml-docgen_stripped.ml flowcaml-docgen_stripped.cmi)
  (action
    (with-stdout-to flowcaml-docgen_stripped.ml.dtimings
      (with-stderr-to flowcaml-docgen_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c flowcaml-docgen_stripped.ml)))))

(rule (alias test)
  (action
    (diff flowcaml-docgen_stripped.ml.log.exp
      flowcaml-docgen_stripped.ml.log)))

(rule (target focc-pure-def.opp.out) (deps focc-pure-def.mly)
  (action
    (with-outputs-to focc-pure-def.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff focc-pure-def.opp.exp focc-pure-def.opp.out)))

(rule
  (targets focc-pure-def.out focc-pure-def.automaton
    focc-pure-def.automaton.resolved focc-pure-def.conflicts
    focc-pure-def.timings)
  (deps focc-pure-def.mly)
  (action
    (with-outputs-to focc-pure-def.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to focc-pure-def.timings %{deps})))))

(rule (alias quick) (action (diff focc-pure-def.exp focc-pure-def.out)))

(rule (alias quick)
  (action (diff focc-pure-def.automaton.exp focc-pure-def.automaton)))

(rule (alias quick)
  (action
    (diff focc-pure-def.automaton.resolved.exp
      focc-pure-def.automaton.resolved)))

(rule (alias quick)
  (action (diff focc-pure-def.conflicts.exp focc-pure-def.conflicts)))

(rule (target focc-pure-def_stripped.mly) (deps focc-pure-def.mly)
  (action
    (with-stderr-to focc-pure-def_stripped.ignored
      (with-stdout-to focc-pure-def_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets focc-pure-def_stripped.log focc-pure-def_stripped.mli
    focc-pure-def_stripped.ml focc-pure-def_stripped.stacklang
    focc-pure-def_stripped.timings focc-pure-def_stripped.scount
    focc-pure-def_stripped.dcount)
  (deps focc-pure-def_stripped.mly)
  (action
    (with-outputs-to focc-pure-def_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to focc-pure-def_stripped.timings %{deps})))))

(alias (name quick) (deps
                      focc-pure-def_stripped.stacklang))

(rule (targets focc-pure-def_stripped.cmi focc-pure-def_stripped.mli.log)
  (deps focc-pure-def_stripped.mli)
  (action
    (with-stdout-to focc-pure-def_stripped.mli.dtimings
      (with-stderr-to focc-pure-def_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c focc-pure-def_stripped.mli)))))

(rule (targets focc-pure-def_stripped.cmo focc-pure-def_stripped.ml.log)
  (deps focc-pure-def_stripped.ml focc-pure-def_stripped.cmi)
  (action
    (with-stdout-to focc-pure-def_stripped.ml.dtimings
      (with-stderr-to focc-pure-def_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c focc-pure-def_stripped.ml)))))

(rule (alias test)
  (action
    (diff focc-pure-def_stripped.ml.log.exp focc-pure-def_stripped.ml.log)))

(rule (target foo.opp.out) (deps foo.mly)
  (action
    (with-outputs-to foo.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff foo.opp.exp foo.opp.out)))

(rule
  (targets foo.out foo.automaton foo.automaton.resolved foo.conflicts
    foo.timings)
  (deps foo.mly)
  (action
    (with-outputs-to foo.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to foo.timings %{deps})))))

(rule (alias quick) (action (diff foo.exp foo.out)))

(rule (alias quick) (action (diff foo.automaton.exp foo.automaton)))

(rule (alias quick)
  (action (diff foo.automaton.resolved.exp foo.automaton.resolved)))

(rule (alias quick) (action (diff foo.conflicts.exp foo.conflicts)))

(rule (target foo_stripped.mly) (deps foo.mly)
  (action
    (with-stderr-to foo_stripped.ignored
      (with-stdout-to foo_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets foo_stripped.log foo_stripped.mli foo_stripped.ml
    foo_stripped.stacklang foo_stripped.timings foo_stripped.scount
    foo_stripped.dcount)
  (deps foo_stripped.mly)
  (action
    (with-outputs-to foo_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to foo_stripped.timings %{deps})))))

(alias (name quick) (deps
                      foo_stripped.stacklang))

(rule (targets foo_stripped.cmi foo_stripped.mli.log) (deps foo_stripped.mli)
  (action
    (with-stdout-to foo_stripped.mli.dtimings
      (with-stderr-to foo_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c foo_stripped.mli)))))

(rule (targets foo_stripped.cmo foo_stripped.ml.log)
  (deps foo_stripped.ml foo_stripped.cmi)
  (action
    (with-stdout-to foo_stripped.ml.dtimings
      (with-stderr-to foo_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c foo_stripped.ml)))))

(rule (alias test)
  (action (diff foo_stripped.ml.log.exp foo_stripped.ml.log)))

(rule (target fork.opp.out) (deps fork.mly)
  (action
    (with-outputs-to fork.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff fork.opp.exp fork.opp.out)))

(rule
  (targets fork.out fork.automaton fork.automaton.resolved fork.conflicts
    fork.timings)
  (deps fork.mly)
  (action
    (with-outputs-to fork.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to fork.timings %{deps})))))

(rule (alias quick) (action (diff fork.exp fork.out)))

(rule (alias quick) (action (diff fork.automaton.exp fork.automaton)))

(rule (alias quick)
  (action (diff fork.automaton.resolved.exp fork.automaton.resolved)))

(rule (alias quick) (action (diff fork.conflicts.exp fork.conflicts)))

(rule (target fork_stripped.mly) (deps fork.mly)
  (action
    (with-stderr-to fork_stripped.ignored
      (with-stdout-to fork_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets fork_stripped.log fork_stripped.mli fork_stripped.ml
    fork_stripped.stacklang fork_stripped.timings fork_stripped.scount
    fork_stripped.dcount)
  (deps fork_stripped.mly)
  (action
    (with-outputs-to fork_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to fork_stripped.timings %{deps})))))

(alias (name quick) (deps
                      fork_stripped.stacklang))

(rule (targets fork_stripped.cmi fork_stripped.mli.log)
  (deps fork_stripped.mli)
  (action
    (with-stdout-to fork_stripped.mli.dtimings
      (with-stderr-to fork_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c fork_stripped.mli)))))

(rule (targets fork_stripped.cmo fork_stripped.ml.log)
  (deps fork_stripped.ml fork_stripped.cmi)
  (action
    (with-stdout-to fork_stripped.ml.dtimings
      (with-stderr-to fork_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c fork_stripped.ml)))))

(rule (alias test)
  (action (diff fork_stripped.ml.log.exp fork_stripped.ml.log)))

(rule (target fp.opp.out) (deps fp.mly)
  (action
    (with-outputs-to fp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff fp.opp.exp fp.opp.out)))

(rule
  (targets fp.out fp.automaton fp.automaton.resolved fp.conflicts fp.timings)
  (deps fp.mly)
  (action
    (with-outputs-to fp.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to fp.timings %{deps})))))

(rule (alias quick) (action (diff fp.exp fp.out)))

(rule (alias quick) (action (diff fp.automaton.exp fp.automaton)))

(rule (alias quick)
  (action (diff fp.automaton.resolved.exp fp.automaton.resolved)))

(rule (alias quick) (action (diff fp.conflicts.exp fp.conflicts)))

(rule (target fp_stripped.mly) (deps fp.mly)
  (action
    (with-stderr-to fp_stripped.ignored
      (with-stdout-to fp_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets fp_stripped.log fp_stripped.mli fp_stripped.ml
    fp_stripped.stacklang fp_stripped.timings fp_stripped.scount
    fp_stripped.dcount)
  (deps fp_stripped.mly)
  (action
    (with-outputs-to fp_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to fp_stripped.timings %{deps})))))

(alias (name quick) (deps
                      fp_stripped.stacklang))

(rule (targets fp_stripped.cmi fp_stripped.mli.log) (deps fp_stripped.mli)
  (action
    (with-stdout-to fp_stripped.mli.dtimings
      (with-stderr-to fp_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c fp_stripped.mli)))))

(rule (targets fp_stripped.cmo fp_stripped.ml.log)
  (deps fp_stripped.ml fp_stripped.cmi)
  (action
    (with-stdout-to fp_stripped.ml.dtimings
      (with-stderr-to fp_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c fp_stripped.ml)))))

(rule (alias test) (action (diff fp_stripped.ml.log.exp fp_stripped.ml.log)))

(rule (target frama-c-base.20170501-logic_parser.opp.out)
  (deps frama-c-base.20170501-logic_parser.mly)
  (action
    (with-outputs-to frama-c-base.20170501-logic_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff frama-c-base.20170501-logic_parser.opp.exp
      frama-c-base.20170501-logic_parser.opp.out)))

(rule
  (targets frama-c-base.20170501-logic_parser.out
    frama-c-base.20170501-logic_parser.automaton
    frama-c-base.20170501-logic_parser.automaton.resolved
    frama-c-base.20170501-logic_parser.conflicts
    frama-c-base.20170501-logic_parser.timings)
  (deps frama-c-base.20170501-logic_parser.mly)
  (action
    (with-outputs-to frama-c-base.20170501-logic_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to frama-c-base.20170501-logic_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff frama-c-base.20170501-logic_parser.exp
      frama-c-base.20170501-logic_parser.out)))

(rule (alias quick)
  (action
    (diff frama-c-base.20170501-logic_parser.automaton.exp
      frama-c-base.20170501-logic_parser.automaton)))

(rule (alias quick)
  (action
    (diff frama-c-base.20170501-logic_parser.automaton.resolved.exp
      frama-c-base.20170501-logic_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff frama-c-base.20170501-logic_parser.conflicts.exp
      frama-c-base.20170501-logic_parser.conflicts)))

(rule (target frama-c-base_20170501-logic_parser_stripped.mly)
  (deps frama-c-base.20170501-logic_parser.mly)
  (action
    (with-stderr-to frama-c-base_20170501-logic_parser_stripped.ignored
      (with-stdout-to frama-c-base_20170501-logic_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets frama-c-base_20170501-logic_parser_stripped.log
    frama-c-base_20170501-logic_parser_stripped.mli
    frama-c-base_20170501-logic_parser_stripped.ml
    frama-c-base_20170501-logic_parser_stripped.stacklang
    frama-c-base_20170501-logic_parser_stripped.timings
    frama-c-base_20170501-logic_parser_stripped.scount
    frama-c-base_20170501-logic_parser_stripped.dcount)
  (deps frama-c-base_20170501-logic_parser_stripped.mly)
  (action
    (with-outputs-to frama-c-base_20170501-logic_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to frama-c-base_20170501-logic_parser_stripped.timings
          %{deps})))))

(alias (name quick)
  (deps
    frama-c-base_20170501-logic_parser_stripped.stacklang))

(rule
  (targets frama-c-base_20170501-logic_parser_stripped.cmi
    frama-c-base_20170501-logic_parser_stripped.mli.log)
  (deps frama-c-base_20170501-logic_parser_stripped.mli)
  (action
    (with-stdout-to frama-c-base_20170501-logic_parser_stripped.mli.dtimings
      (with-stderr-to frama-c-base_20170501-logic_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          frama-c-base_20170501-logic_parser_stripped.mli)))))

(rule
  (targets frama-c-base_20170501-logic_parser_stripped.cmo
    frama-c-base_20170501-logic_parser_stripped.ml.log)
  (deps frama-c-base_20170501-logic_parser_stripped.ml
    frama-c-base_20170501-logic_parser_stripped.cmi)
  (action
    (with-stdout-to frama-c-base_20170501-logic_parser_stripped.ml.dtimings
      (with-stderr-to frama-c-base_20170501-logic_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          frama-c-base_20170501-logic_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff frama-c-base_20170501-logic_parser_stripped.ml.log.exp
      frama-c-base_20170501-logic_parser_stripped.ml.log)))

(rule (target framac-cparser.opp.out) (deps framac-cparser.mly)
  (action
    (with-outputs-to framac-cparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff framac-cparser.opp.exp framac-cparser.opp.out)))

(rule
  (targets framac-cparser.out framac-cparser.automaton
    framac-cparser.automaton.resolved framac-cparser.conflicts
    framac-cparser.timings)
  (deps framac-cparser.mly)
  (action
    (with-outputs-to framac-cparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to framac-cparser.timings %{deps})))))

(rule (alias quick) (action (diff framac-cparser.exp framac-cparser.out)))

(rule (alias quick)
  (action (diff framac-cparser.automaton.exp framac-cparser.automaton)))

(rule (alias quick)
  (action
    (diff framac-cparser.automaton.resolved.exp
      framac-cparser.automaton.resolved)))

(rule (alias quick)
  (action (diff framac-cparser.conflicts.exp framac-cparser.conflicts)))

(rule (target framac-cparser_stripped.mly) (deps framac-cparser.mly)
  (action
    (with-stderr-to framac-cparser_stripped.ignored
      (with-stdout-to framac-cparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets framac-cparser_stripped.log framac-cparser_stripped.mli
    framac-cparser_stripped.ml framac-cparser_stripped.stacklang
    framac-cparser_stripped.timings framac-cparser_stripped.scount
    framac-cparser_stripped.dcount)
  (deps framac-cparser_stripped.mly)
  (action
    (with-outputs-to framac-cparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to framac-cparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      framac-cparser_stripped.stacklang))

(rule (targets framac-cparser_stripped.cmi framac-cparser_stripped.mli.log)
  (deps framac-cparser_stripped.mli)
  (action
    (with-stdout-to framac-cparser_stripped.mli.dtimings
      (with-stderr-to framac-cparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c framac-cparser_stripped.mli)))))

(rule (targets framac-cparser_stripped.cmo framac-cparser_stripped.ml.log)
  (deps framac-cparser_stripped.ml framac-cparser_stripped.cmi)
  (action
    (with-stdout-to framac-cparser_stripped.ml.dtimings
      (with-stderr-to framac-cparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c framac-cparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff framac-cparser_stripped.ml.log.exp framac-cparser_stripped.ml.log)))

(rule (target framac-print_api-grammar.opp.out)
  (deps framac-print_api-grammar.mly)
  (action
    (with-outputs-to framac-print_api-grammar.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff framac-print_api-grammar.opp.exp framac-print_api-grammar.opp.out)))

(rule
  (targets framac-print_api-grammar.out framac-print_api-grammar.automaton
    framac-print_api-grammar.automaton.resolved
    framac-print_api-grammar.conflicts framac-print_api-grammar.timings)
  (deps framac-print_api-grammar.mly)
  (action
    (with-outputs-to framac-print_api-grammar.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to framac-print_api-grammar.timings %{deps})))))

(rule (alias quick)
  (action (diff framac-print_api-grammar.exp framac-print_api-grammar.out)))

(rule (alias quick)
  (action
    (diff framac-print_api-grammar.automaton.exp
      framac-print_api-grammar.automaton)))

(rule (alias quick)
  (action
    (diff framac-print_api-grammar.automaton.resolved.exp
      framac-print_api-grammar.automaton.resolved)))

(rule (alias quick)
  (action
    (diff framac-print_api-grammar.conflicts.exp
      framac-print_api-grammar.conflicts)))

(rule (target framac-print_api-grammar_stripped.mly)
  (deps framac-print_api-grammar.mly)
  (action
    (with-stderr-to framac-print_api-grammar_stripped.ignored
      (with-stdout-to framac-print_api-grammar_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets framac-print_api-grammar_stripped.log
    framac-print_api-grammar_stripped.mli
    framac-print_api-grammar_stripped.ml
    framac-print_api-grammar_stripped.stacklang
    framac-print_api-grammar_stripped.timings
    framac-print_api-grammar_stripped.scount
    framac-print_api-grammar_stripped.dcount)
  (deps framac-print_api-grammar_stripped.mly)
  (action
    (with-outputs-to framac-print_api-grammar_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to framac-print_api-grammar_stripped.timings %{deps})))))

(alias (name quick) (deps
                      framac-print_api-grammar_stripped.stacklang))

(rule
  (targets framac-print_api-grammar_stripped.cmi
    framac-print_api-grammar_stripped.mli.log)
  (deps framac-print_api-grammar_stripped.mli)
  (action
    (with-stdout-to framac-print_api-grammar_stripped.mli.dtimings
      (with-stderr-to framac-print_api-grammar_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          framac-print_api-grammar_stripped.mli)))))

(rule
  (targets framac-print_api-grammar_stripped.cmo
    framac-print_api-grammar_stripped.ml.log)
  (deps framac-print_api-grammar_stripped.ml
    framac-print_api-grammar_stripped.cmi)
  (action
    (with-stdout-to framac-print_api-grammar_stripped.ml.dtimings
      (with-stderr-to framac-print_api-grammar_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          framac-print_api-grammar_stripped.ml)))))

(rule (alias test)
  (action
    (diff framac-print_api-grammar_stripped.ml.log.exp
      framac-print_api-grammar_stripped.ml.log)))

(rule (target frontc_cparser.opp.out) (deps frontc_cparser.mly)
  (action
    (with-outputs-to frontc_cparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff frontc_cparser.opp.exp frontc_cparser.opp.out)))

(rule
  (targets frontc_cparser.out frontc_cparser.automaton
    frontc_cparser.automaton.resolved frontc_cparser.conflicts
    frontc_cparser.timings)
  (deps frontc_cparser.mly)
  (action
    (with-outputs-to frontc_cparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to frontc_cparser.timings %{deps})))))

(rule (alias quick) (action (diff frontc_cparser.exp frontc_cparser.out)))

(rule (alias quick)
  (action (diff frontc_cparser.automaton.exp frontc_cparser.automaton)))

(rule (alias quick)
  (action
    (diff frontc_cparser.automaton.resolved.exp
      frontc_cparser.automaton.resolved)))

(rule (alias quick)
  (action (diff frontc_cparser.conflicts.exp frontc_cparser.conflicts)))

(rule (target frontc_cparser_stripped.mly) (deps frontc_cparser.mly)
  (action
    (with-stderr-to frontc_cparser_stripped.ignored
      (with-stdout-to frontc_cparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets frontc_cparser_stripped.log frontc_cparser_stripped.mli
    frontc_cparser_stripped.ml frontc_cparser_stripped.stacklang
    frontc_cparser_stripped.timings frontc_cparser_stripped.scount
    frontc_cparser_stripped.dcount)
  (deps frontc_cparser_stripped.mly)
  (action
    (with-outputs-to frontc_cparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to frontc_cparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      frontc_cparser_stripped.stacklang))

(rule (targets frontc_cparser_stripped.cmi frontc_cparser_stripped.mli.log)
  (deps frontc_cparser_stripped.mli)
  (action
    (with-stdout-to frontc_cparser_stripped.mli.dtimings
      (with-stderr-to frontc_cparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c frontc_cparser_stripped.mli)))))

(rule (targets frontc_cparser_stripped.cmo frontc_cparser_stripped.ml.log)
  (deps frontc_cparser_stripped.ml frontc_cparser_stripped.cmi)
  (action
    (with-stdout-to frontc_cparser_stripped.ml.dtimings
      (with-stderr-to frontc_cparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c frontc_cparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff frontc_cparser_stripped.ml.log.exp frontc_cparser_stripped.ml.log)))

(rule (target fsharp.opp.out) (deps fsharp.mly)
  (action
    (with-outputs-to fsharp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff fsharp.opp.exp fsharp.opp.out)))

(rule
  (targets fsharp.out fsharp.automaton fsharp.automaton.resolved
    fsharp.conflicts fsharp.timings)
  (deps fsharp.mly)
  (action
    (with-outputs-to fsharp.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to fsharp.timings %{deps})))))

(rule (alias quick) (action (diff fsharp.exp fsharp.out)))

(rule (alias quick) (action (diff fsharp.automaton.exp fsharp.automaton)))

(rule (alias quick)
  (action (diff fsharp.automaton.resolved.exp fsharp.automaton.resolved)))

(rule (alias quick) (action (diff fsharp.conflicts.exp fsharp.conflicts)))

(rule (target fsharp_stripped.mly) (deps fsharp.mly)
  (action
    (with-stderr-to fsharp_stripped.ignored
      (with-stdout-to fsharp_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets fsharp_stripped.log fsharp_stripped.mli fsharp_stripped.ml
    fsharp_stripped.stacklang fsharp_stripped.timings fsharp_stripped.scount
    fsharp_stripped.dcount)
  (deps fsharp_stripped.mly)
  (action
    (with-outputs-to fsharp_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to fsharp_stripped.timings %{deps})))))

(alias (name quick) (deps
                      fsharp_stripped.stacklang))

(rule (targets fsharp_stripped.cmi fsharp_stripped.mli.log)
  (deps fsharp_stripped.mli)
  (action
    (with-stdout-to fsharp_stripped.mli.dtimings
      (with-stderr-to fsharp_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c fsharp_stripped.mli)))))

(rule (targets fsharp_stripped.cmo fsharp_stripped.ml.log)
  (deps fsharp_stripped.ml fsharp_stripped.cmi)
  (action
    (with-stdout-to fsharp_stripped.ml.dtimings
      (with-stderr-to fsharp_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c fsharp_stripped.ml)))))

(rule (alias test)
  (action (diff fsharp_stripped.ml.log.exp fsharp_stripped.ml.log)))

(rule (target fslexpars.opp.out) (deps fslexpars.mly)
  (action
    (with-outputs-to fslexpars.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff fslexpars.opp.exp fslexpars.opp.out)))

(rule
  (targets fslexpars.out fslexpars.automaton fslexpars.automaton.resolved
    fslexpars.conflicts fslexpars.timings)
  (deps fslexpars.mly)
  (action
    (with-outputs-to fslexpars.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to fslexpars.timings %{deps})))))

(rule (alias quick) (action (diff fslexpars.exp fslexpars.out)))

(rule (alias quick)
  (action (diff fslexpars.automaton.exp fslexpars.automaton)))

(rule (alias quick)
  (action
    (diff fslexpars.automaton.resolved.exp fslexpars.automaton.resolved)))

(rule (alias quick)
  (action (diff fslexpars.conflicts.exp fslexpars.conflicts)))

(rule (target fslexpars_stripped.mly) (deps fslexpars.mly)
  (action
    (with-stderr-to fslexpars_stripped.ignored
      (with-stdout-to fslexpars_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets fslexpars_stripped.log fslexpars_stripped.mli
    fslexpars_stripped.ml fslexpars_stripped.stacklang
    fslexpars_stripped.timings fslexpars_stripped.scount
    fslexpars_stripped.dcount)
  (deps fslexpars_stripped.mly)
  (action
    (with-outputs-to fslexpars_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to fslexpars_stripped.timings %{deps})))))

(alias (name quick) (deps
                      fslexpars_stripped.stacklang))

(rule (targets fslexpars_stripped.cmi fslexpars_stripped.mli.log)
  (deps fslexpars_stripped.mli)
  (action
    (with-stdout-to fslexpars_stripped.mli.dtimings
      (with-stderr-to fslexpars_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c fslexpars_stripped.mli)))))

(rule (targets fslexpars_stripped.cmo fslexpars_stripped.ml.log)
  (deps fslexpars_stripped.ml fslexpars_stripped.cmi)
  (action
    (with-stdout-to fslexpars_stripped.ml.dtimings
      (with-stderr-to fslexpars_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c fslexpars_stripped.ml)))))

(rule (alias test)
  (action (diff fslexpars_stripped.ml.log.exp fslexpars_stripped.ml.log)))

(rule (target fstar.opp.out) (deps fstar.mly)
  (action
    (with-outputs-to fstar.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff fstar.opp.exp fstar.opp.out)))

(rule
  (targets fstar.out fstar.automaton fstar.automaton.resolved fstar.conflicts
    fstar.timings)
  (deps fstar.mly)
  (action
    (with-outputs-to fstar.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to fstar.timings %{deps})))))

(rule (alias quick) (action (diff fstar.exp fstar.out)))

(rule (alias quick) (action (diff fstar.automaton.exp fstar.automaton)))

(rule (alias quick)
  (action (diff fstar.automaton.resolved.exp fstar.automaton.resolved)))

(rule (alias quick) (action (diff fstar.conflicts.exp fstar.conflicts)))

(rule (target fstar_stripped.mly) (deps fstar.mly)
  (action
    (with-stderr-to fstar_stripped.ignored
      (with-stdout-to fstar_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets fstar_stripped.log fstar_stripped.mli fstar_stripped.ml
    fstar_stripped.stacklang fstar_stripped.timings fstar_stripped.scount
    fstar_stripped.dcount)
  (deps fstar_stripped.mly)
  (action
    (with-outputs-to fstar_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to fstar_stripped.timings %{deps})))))

(alias (name quick) (deps
                      fstar_stripped.stacklang))

(rule (targets fstar_stripped.cmi fstar_stripped.mli.log)
  (deps fstar_stripped.mli)
  (action
    (with-stdout-to fstar_stripped.mli.dtimings
      (with-stderr-to fstar_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c fstar_stripped.mli)))))

(rule (targets fstar_stripped.cmo fstar_stripped.ml.log)
  (deps fstar_stripped.ml fstar_stripped.cmi)
  (action
    (with-stdout-to fstar_stripped.ml.dtimings
      (with-stderr-to fstar_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c fstar_stripped.ml)))))

(rule (alias test)
  (action (diff fstar_stripped.ml.log.exp fstar_stripped.ml.log)))

(rule (target fstar.0.9.6.0~alpha1-parse.opp.out)
  (deps fstar.0.9.6.0~alpha1-parse.mly)
  (action
    (with-outputs-to fstar.0.9.6.0~alpha1-parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.opp.exp
      fstar.0.9.6.0~alpha1-parse.opp.out)))

(rule
  (targets fstar.0.9.6.0~alpha1-parse.out
    fstar.0.9.6.0~alpha1-parse.automaton
    fstar.0.9.6.0~alpha1-parse.automaton.resolved
    fstar.0.9.6.0~alpha1-parse.conflicts fstar.0.9.6.0~alpha1-parse.timings)
  (deps fstar.0.9.6.0~alpha1-parse.mly)
  (action
    (with-outputs-to fstar.0.9.6.0~alpha1-parse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to fstar.0.9.6.0~alpha1-parse.timings %{deps})))))

(rule (alias quick)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.exp fstar.0.9.6.0~alpha1-parse.out)))

(rule (alias quick)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.automaton.exp
      fstar.0.9.6.0~alpha1-parse.automaton)))

(rule (alias quick)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.automaton.resolved.exp
      fstar.0.9.6.0~alpha1-parse.automaton.resolved)))

(rule (alias quick)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.conflicts.exp
      fstar.0.9.6.0~alpha1-parse.conflicts)))

(rule (target fstar_0_9_6_0~alpha1-parse_stripped.mly)
  (deps fstar.0.9.6.0~alpha1-parse.mly)
  (action
    (with-stderr-to fstar_0_9_6_0~alpha1-parse_stripped.ignored
      (with-stdout-to fstar_0_9_6_0~alpha1-parse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets fstar_0_9_6_0~alpha1-parse_stripped.log
    fstar_0_9_6_0~alpha1-parse_stripped.mli
    fstar_0_9_6_0~alpha1-parse_stripped.ml
    fstar_0_9_6_0~alpha1-parse_stripped.stacklang
    fstar_0_9_6_0~alpha1-parse_stripped.timings
    fstar_0_9_6_0~alpha1-parse_stripped.scount
    fstar_0_9_6_0~alpha1-parse_stripped.dcount)
  (deps fstar_0_9_6_0~alpha1-parse_stripped.mly)
  (action
    (with-outputs-to fstar_0_9_6_0~alpha1-parse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to fstar_0_9_6_0~alpha1-parse_stripped.timings %{deps})))))

(alias (name quick) (deps
                      fstar_0_9_6_0~alpha1-parse_stripped.stacklang))

(rule
  (targets fstar_0_9_6_0~alpha1-parse_stripped.cmi
    fstar_0_9_6_0~alpha1-parse_stripped.mli.log)
  (deps fstar_0_9_6_0~alpha1-parse_stripped.mli)
  (action
    (with-stdout-to fstar_0_9_6_0~alpha1-parse_stripped.mli.dtimings
      (with-stderr-to fstar_0_9_6_0~alpha1-parse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          fstar_0_9_6_0~alpha1-parse_stripped.mli)))))

(rule
  (targets fstar_0_9_6_0~alpha1-parse_stripped.cmo
    fstar_0_9_6_0~alpha1-parse_stripped.ml.log)
  (deps fstar_0_9_6_0~alpha1-parse_stripped.ml
    fstar_0_9_6_0~alpha1-parse_stripped.cmi)
  (action
    (with-stdout-to fstar_0_9_6_0~alpha1-parse_stripped.ml.dtimings
      (with-stderr-to fstar_0_9_6_0~alpha1-parse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          fstar_0_9_6_0~alpha1-parse_stripped.ml)))))

(rule (alias test)
  (action
    (diff fstar_0_9_6_0~alpha1-parse_stripped.ml.log.exp
      fstar_0_9_6_0~alpha1-parse_stripped.ml.log)))

(rule (target fsyaccpars.opp.out) (deps fsyaccpars.mly)
  (action
    (with-outputs-to fsyaccpars.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff fsyaccpars.opp.exp fsyaccpars.opp.out)))

(rule
  (targets fsyaccpars.out fsyaccpars.automaton fsyaccpars.automaton.resolved
    fsyaccpars.conflicts fsyaccpars.timings)
  (deps fsyaccpars.mly)
  (action
    (with-outputs-to fsyaccpars.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to fsyaccpars.timings %{deps})))))

(rule (alias quick) (action (diff fsyaccpars.exp fsyaccpars.out)))

(rule (alias quick)
  (action (diff fsyaccpars.automaton.exp fsyaccpars.automaton)))

(rule (alias quick)
  (action
    (diff fsyaccpars.automaton.resolved.exp fsyaccpars.automaton.resolved)))

(rule (alias quick)
  (action (diff fsyaccpars.conflicts.exp fsyaccpars.conflicts)))

(rule (target fsyaccpars_stripped.mly) (deps fsyaccpars.mly)
  (action
    (with-stderr-to fsyaccpars_stripped.ignored
      (with-stdout-to fsyaccpars_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets fsyaccpars_stripped.log fsyaccpars_stripped.mli
    fsyaccpars_stripped.ml fsyaccpars_stripped.stacklang
    fsyaccpars_stripped.timings fsyaccpars_stripped.scount
    fsyaccpars_stripped.dcount)
  (deps fsyaccpars_stripped.mly)
  (action
    (with-outputs-to fsyaccpars_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to fsyaccpars_stripped.timings %{deps})))))

(alias (name quick) (deps
                      fsyaccpars_stripped.stacklang))

(rule (targets fsyaccpars_stripped.cmi fsyaccpars_stripped.mli.log)
  (deps fsyaccpars_stripped.mli)
  (action
    (with-stdout-to fsyaccpars_stripped.mli.dtimings
      (with-stderr-to fsyaccpars_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c fsyaccpars_stripped.mli)))))

(rule (targets fsyaccpars_stripped.cmo fsyaccpars_stripped.ml.log)
  (deps fsyaccpars_stripped.ml fsyaccpars_stripped.cmi)
  (action
    (with-stdout-to fsyaccpars_stripped.ml.dtimings
      (with-stderr-to fsyaccpars_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c fsyaccpars_stripped.ml)))))

(rule (alias test)
  (action (diff fsyaccpars_stripped.ml.log.exp fsyaccpars_stripped.ml.log)))

(rule (target gdb.0.3-gdbmi_parser.opp.out) (deps gdb.0.3-gdbmi_parser.mly)
  (action
    (with-outputs-to gdb.0.3-gdbmi_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff gdb.0.3-gdbmi_parser.opp.exp gdb.0.3-gdbmi_parser.opp.out)))

(rule
  (targets gdb.0.3-gdbmi_parser.out gdb.0.3-gdbmi_parser.automaton
    gdb.0.3-gdbmi_parser.automaton.resolved gdb.0.3-gdbmi_parser.conflicts
    gdb.0.3-gdbmi_parser.timings)
  (deps gdb.0.3-gdbmi_parser.mly)
  (action
    (with-outputs-to gdb.0.3-gdbmi_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to gdb.0.3-gdbmi_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff gdb.0.3-gdbmi_parser.exp gdb.0.3-gdbmi_parser.out)))

(rule (alias quick)
  (action
    (diff gdb.0.3-gdbmi_parser.automaton.exp gdb.0.3-gdbmi_parser.automaton)))

(rule (alias quick)
  (action
    (diff gdb.0.3-gdbmi_parser.automaton.resolved.exp
      gdb.0.3-gdbmi_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff gdb.0.3-gdbmi_parser.conflicts.exp gdb.0.3-gdbmi_parser.conflicts)))

(rule (target gdb_0_3-gdbmi_parser_stripped.mly)
  (deps gdb.0.3-gdbmi_parser.mly)
  (action
    (with-stderr-to gdb_0_3-gdbmi_parser_stripped.ignored
      (with-stdout-to gdb_0_3-gdbmi_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets gdb_0_3-gdbmi_parser_stripped.log
    gdb_0_3-gdbmi_parser_stripped.mli gdb_0_3-gdbmi_parser_stripped.ml
    gdb_0_3-gdbmi_parser_stripped.stacklang
    gdb_0_3-gdbmi_parser_stripped.timings
    gdb_0_3-gdbmi_parser_stripped.scount
    gdb_0_3-gdbmi_parser_stripped.dcount)
  (deps gdb_0_3-gdbmi_parser_stripped.mly)
  (action
    (with-outputs-to gdb_0_3-gdbmi_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to gdb_0_3-gdbmi_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      gdb_0_3-gdbmi_parser_stripped.stacklang))

(rule
  (targets gdb_0_3-gdbmi_parser_stripped.cmi
    gdb_0_3-gdbmi_parser_stripped.mli.log)
  (deps gdb_0_3-gdbmi_parser_stripped.mli)
  (action
    (with-stdout-to gdb_0_3-gdbmi_parser_stripped.mli.dtimings
      (with-stderr-to gdb_0_3-gdbmi_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          gdb_0_3-gdbmi_parser_stripped.mli)))))

(rule
  (targets gdb_0_3-gdbmi_parser_stripped.cmo
    gdb_0_3-gdbmi_parser_stripped.ml.log)
  (deps gdb_0_3-gdbmi_parser_stripped.ml gdb_0_3-gdbmi_parser_stripped.cmi)
  (action
    (with-stdout-to gdb_0_3-gdbmi_parser_stripped.ml.dtimings
      (with-stderr-to gdb_0_3-gdbmi_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          gdb_0_3-gdbmi_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff gdb_0_3-gdbmi_parser_stripped.ml.log.exp
      gdb_0_3-gdbmi_parser_stripped.ml.log)))

(rule (target gettext.0.3.8-gettextPo_parser.opp.out)
  (deps gettext.0.3.8-gettextPo_parser.mly)
  (action
    (with-outputs-to gettext.0.3.8-gettextPo_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff gettext.0.3.8-gettextPo_parser.opp.exp
      gettext.0.3.8-gettextPo_parser.opp.out)))

(rule
  (targets gettext.0.3.8-gettextPo_parser.out
    gettext.0.3.8-gettextPo_parser.automaton
    gettext.0.3.8-gettextPo_parser.automaton.resolved
    gettext.0.3.8-gettextPo_parser.conflicts
    gettext.0.3.8-gettextPo_parser.timings)
  (deps gettext.0.3.8-gettextPo_parser.mly)
  (action
    (with-outputs-to gettext.0.3.8-gettextPo_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to gettext.0.3.8-gettextPo_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff gettext.0.3.8-gettextPo_parser.exp
      gettext.0.3.8-gettextPo_parser.out)))

(rule (alias quick)
  (action
    (diff gettext.0.3.8-gettextPo_parser.automaton.exp
      gettext.0.3.8-gettextPo_parser.automaton)))

(rule (alias quick)
  (action
    (diff gettext.0.3.8-gettextPo_parser.automaton.resolved.exp
      gettext.0.3.8-gettextPo_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff gettext.0.3.8-gettextPo_parser.conflicts.exp
      gettext.0.3.8-gettextPo_parser.conflicts)))

(rule (target gettext_0_3_8-gettextPo_parser_stripped.mly)
  (deps gettext.0.3.8-gettextPo_parser.mly)
  (action
    (with-stderr-to gettext_0_3_8-gettextPo_parser_stripped.ignored
      (with-stdout-to gettext_0_3_8-gettextPo_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets gettext_0_3_8-gettextPo_parser_stripped.log
    gettext_0_3_8-gettextPo_parser_stripped.mli
    gettext_0_3_8-gettextPo_parser_stripped.ml
    gettext_0_3_8-gettextPo_parser_stripped.stacklang
    gettext_0_3_8-gettextPo_parser_stripped.timings
    gettext_0_3_8-gettextPo_parser_stripped.scount
    gettext_0_3_8-gettextPo_parser_stripped.dcount)
  (deps gettext_0_3_8-gettextPo_parser_stripped.mly)
  (action
    (with-outputs-to gettext_0_3_8-gettextPo_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to gettext_0_3_8-gettextPo_parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      gettext_0_3_8-gettextPo_parser_stripped.stacklang))

(rule
  (targets gettext_0_3_8-gettextPo_parser_stripped.cmi
    gettext_0_3_8-gettextPo_parser_stripped.mli.log)
  (deps gettext_0_3_8-gettextPo_parser_stripped.mli)
  (action
    (with-stdout-to gettext_0_3_8-gettextPo_parser_stripped.mli.dtimings
      (with-stderr-to gettext_0_3_8-gettextPo_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          gettext_0_3_8-gettextPo_parser_stripped.mli)))))

(rule
  (targets gettext_0_3_8-gettextPo_parser_stripped.cmo
    gettext_0_3_8-gettextPo_parser_stripped.ml.log)
  (deps gettext_0_3_8-gettextPo_parser_stripped.ml
    gettext_0_3_8-gettextPo_parser_stripped.cmi)
  (action
    (with-stdout-to gettext_0_3_8-gettextPo_parser_stripped.ml.dtimings
      (with-stderr-to gettext_0_3_8-gettextPo_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          gettext_0_3_8-gettextPo_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff gettext_0_3_8-gettextPo_parser_stripped.ml.log.exp
      gettext_0_3_8-gettextPo_parser_stripped.ml.log)))

(rule (target godiva.opp.out) (deps godiva.mly)
  (action
    (with-outputs-to godiva.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff godiva.opp.exp godiva.opp.out)))

(rule
  (targets godiva.out godiva.automaton godiva.automaton.resolved
    godiva.conflicts godiva.timings)
  (deps godiva.mly)
  (action
    (with-outputs-to godiva.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to godiva.timings %{deps})))))

(rule (alias quick) (action (diff godiva.exp godiva.out)))

(rule (alias quick) (action (diff godiva.automaton.exp godiva.automaton)))

(rule (alias quick)
  (action (diff godiva.automaton.resolved.exp godiva.automaton.resolved)))

(rule (alias quick) (action (diff godiva.conflicts.exp godiva.conflicts)))

(rule (target godiva_stripped.mly) (deps godiva.mly)
  (action
    (with-stderr-to godiva_stripped.ignored
      (with-stdout-to godiva_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets godiva_stripped.log godiva_stripped.mli godiva_stripped.ml
    godiva_stripped.stacklang godiva_stripped.timings godiva_stripped.scount
    godiva_stripped.dcount)
  (deps godiva_stripped.mly)
  (action
    (with-outputs-to godiva_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to godiva_stripped.timings %{deps})))))

(alias (name quick) (deps
                      godiva_stripped.stacklang))

(rule (targets godiva_stripped.cmi godiva_stripped.mli.log)
  (deps godiva_stripped.mli)
  (action
    (with-stdout-to godiva_stripped.mli.dtimings
      (with-stderr-to godiva_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c godiva_stripped.mli)))))

(rule (targets godiva_stripped.cmo godiva_stripped.ml.log)
  (deps godiva_stripped.ml godiva_stripped.cmi)
  (action
    (with-stdout-to godiva_stripped.ml.dtimings
      (with-stderr-to godiva_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c godiva_stripped.ml)))))

(rule (alias test)
  (action (diff godiva_stripped.ml.log.exp godiva_stripped.ml.log)))

(rule (target gospel_uparser.opp.out) (deps gospel_uparser.mly)
  (action
    (with-outputs-to gospel_uparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff gospel_uparser.opp.exp gospel_uparser.opp.out)))

(rule
  (targets gospel_uparser.out gospel_uparser.automaton
    gospel_uparser.automaton.resolved gospel_uparser.conflicts
    gospel_uparser.timings)
  (deps gospel_uparser.mly)
  (action
    (with-outputs-to gospel_uparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to gospel_uparser.timings %{deps})))))

(rule (alias quick) (action (diff gospel_uparser.exp gospel_uparser.out)))

(rule (alias quick)
  (action (diff gospel_uparser.automaton.exp gospel_uparser.automaton)))

(rule (alias quick)
  (action
    (diff gospel_uparser.automaton.resolved.exp
      gospel_uparser.automaton.resolved)))

(rule (alias quick)
  (action (diff gospel_uparser.conflicts.exp gospel_uparser.conflicts)))

(rule (target gospel_uparser_stripped.mly) (deps gospel_uparser.mly)
  (action
    (with-stderr-to gospel_uparser_stripped.ignored
      (with-stdout-to gospel_uparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets gospel_uparser_stripped.log gospel_uparser_stripped.mli
    gospel_uparser_stripped.ml gospel_uparser_stripped.stacklang
    gospel_uparser_stripped.timings gospel_uparser_stripped.scount
    gospel_uparser_stripped.dcount)
  (deps gospel_uparser_stripped.mly)
  (action
    (with-outputs-to gospel_uparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to gospel_uparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      gospel_uparser_stripped.stacklang))

(rule (targets gospel_uparser_stripped.cmi gospel_uparser_stripped.mli.log)
  (deps gospel_uparser_stripped.mli)
  (action
    (with-stdout-to gospel_uparser_stripped.mli.dtimings
      (with-stderr-to gospel_uparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c gospel_uparser_stripped.mli)))))

(rule (targets gospel_uparser_stripped.cmo gospel_uparser_stripped.ml.log)
  (deps gospel_uparser_stripped.ml gospel_uparser_stripped.cmi)
  (action
    (with-stdout-to gospel_uparser_stripped.ml.dtimings
      (with-stderr-to gospel_uparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c gospel_uparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff gospel_uparser_stripped.ml.log.exp gospel_uparser_stripped.ml.log)))

(rule (target gromit.opp.out) (deps gromit.mly)
  (action
    (with-outputs-to gromit.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff gromit.opp.exp gromit.opp.out)))

(rule
  (targets gromit.out gromit.automaton gromit.automaton.resolved
    gromit.conflicts gromit.timings)
  (deps gromit.mly)
  (action
    (with-outputs-to gromit.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to gromit.timings %{deps})))))

(rule (alias quick) (action (diff gromit.exp gromit.out)))

(rule (alias quick) (action (diff gromit.automaton.exp gromit.automaton)))

(rule (alias quick)
  (action (diff gromit.automaton.resolved.exp gromit.automaton.resolved)))

(rule (alias quick) (action (diff gromit.conflicts.exp gromit.conflicts)))

(rule (target gromit_stripped.mly) (deps gromit.mly)
  (action
    (with-stderr-to gromit_stripped.ignored
      (with-stdout-to gromit_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets gromit_stripped.log gromit_stripped.mli gromit_stripped.ml
    gromit_stripped.stacklang gromit_stripped.timings gromit_stripped.scount
    gromit_stripped.dcount)
  (deps gromit_stripped.mly)
  (action
    (with-outputs-to gromit_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to gromit_stripped.timings %{deps})))))

(alias (name quick) (deps
                      gromit_stripped.stacklang))

(rule (targets gromit_stripped.cmi gromit_stripped.mli.log)
  (deps gromit_stripped.mli)
  (action
    (with-stdout-to gromit_stripped.mli.dtimings
      (with-stderr-to gromit_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c gromit_stripped.mli)))))

(rule (targets gromit_stripped.cmo gromit_stripped.ml.log)
  (deps gromit_stripped.ml gromit_stripped.cmi)
  (action
    (with-stdout-to gromit_stripped.ml.dtimings
      (with-stderr-to gromit_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c gromit_stripped.ml)))))

(rule (alias test)
  (action (diff gromit_stripped.ml.log.exp gromit_stripped.ml.log)))

(rule (target grune924.opp.out) (deps grune924.mly)
  (action
    (with-outputs-to grune924.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff grune924.opp.exp grune924.opp.out)))

(rule
  (targets grune924.out grune924.automaton grune924.automaton.resolved
    grune924.conflicts grune924.timings)
  (deps grune924.mly)
  (action
    (with-outputs-to grune924.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to grune924.timings %{deps})))))

(rule (alias quick) (action (diff grune924.exp grune924.out)))

(rule (alias quick)
  (action (diff grune924.automaton.exp grune924.automaton)))

(rule (alias quick)
  (action (diff grune924.automaton.resolved.exp grune924.automaton.resolved)))

(rule (alias quick)
  (action (diff grune924.conflicts.exp grune924.conflicts)))

(rule (target grune924_stripped.mly) (deps grune924.mly)
  (action
    (with-stderr-to grune924_stripped.ignored
      (with-stdout-to grune924_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets grune924_stripped.log grune924_stripped.mli grune924_stripped.ml
    grune924_stripped.stacklang grune924_stripped.timings
    grune924_stripped.scount grune924_stripped.dcount)
  (deps grune924_stripped.mly)
  (action
    (with-outputs-to grune924_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to grune924_stripped.timings %{deps})))))

(alias (name quick) (deps
                      grune924_stripped.stacklang))

(rule (targets grune924_stripped.cmi grune924_stripped.mli.log)
  (deps grune924_stripped.mli)
  (action
    (with-stdout-to grune924_stripped.mli.dtimings
      (with-stderr-to grune924_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c grune924_stripped.mli)))))

(rule (targets grune924_stripped.cmo grune924_stripped.ml.log)
  (deps grune924_stripped.ml grune924_stripped.cmi)
  (action
    (with-stdout-to grune924_stripped.ml.dtimings
      (with-stderr-to grune924_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c grune924_stripped.ml)))))

(rule (alias test)
  (action (diff grune924_stripped.ml.log.exp grune924_stripped.ml.log)))

(rule (target heptagon.1.05.00-hept_parser.opp.out)
  (deps heptagon.1.05.00-hept_parser.mly)
  (action
    (with-outputs-to heptagon.1.05.00-hept_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff heptagon.1.05.00-hept_parser.opp.exp
      heptagon.1.05.00-hept_parser.opp.out)))

(rule
  (targets heptagon.1.05.00-hept_parser.out
    heptagon.1.05.00-hept_parser.automaton
    heptagon.1.05.00-hept_parser.automaton.resolved
    heptagon.1.05.00-hept_parser.conflicts
    heptagon.1.05.00-hept_parser.timings)
  (deps heptagon.1.05.00-hept_parser.mly)
  (action
    (with-outputs-to heptagon.1.05.00-hept_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to heptagon.1.05.00-hept_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff heptagon.1.05.00-hept_parser.exp heptagon.1.05.00-hept_parser.out)))

(rule (alias quick)
  (action
    (diff heptagon.1.05.00-hept_parser.automaton.exp
      heptagon.1.05.00-hept_parser.automaton)))

(rule (alias quick)
  (action
    (diff heptagon.1.05.00-hept_parser.automaton.resolved.exp
      heptagon.1.05.00-hept_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff heptagon.1.05.00-hept_parser.conflicts.exp
      heptagon.1.05.00-hept_parser.conflicts)))

(rule (target heptagon_1_05_00-hept_parser_stripped.mly)
  (deps heptagon.1.05.00-hept_parser.mly)
  (action
    (with-stderr-to heptagon_1_05_00-hept_parser_stripped.ignored
      (with-stdout-to heptagon_1_05_00-hept_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets heptagon_1_05_00-hept_parser_stripped.log
    heptagon_1_05_00-hept_parser_stripped.mli
    heptagon_1_05_00-hept_parser_stripped.ml
    heptagon_1_05_00-hept_parser_stripped.stacklang
    heptagon_1_05_00-hept_parser_stripped.timings
    heptagon_1_05_00-hept_parser_stripped.scount
    heptagon_1_05_00-hept_parser_stripped.dcount)
  (deps heptagon_1_05_00-hept_parser_stripped.mly)
  (action
    (with-outputs-to heptagon_1_05_00-hept_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to heptagon_1_05_00-hept_parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      heptagon_1_05_00-hept_parser_stripped.stacklang))

(rule
  (targets heptagon_1_05_00-hept_parser_stripped.cmi
    heptagon_1_05_00-hept_parser_stripped.mli.log)
  (deps heptagon_1_05_00-hept_parser_stripped.mli)
  (action
    (with-stdout-to heptagon_1_05_00-hept_parser_stripped.mli.dtimings
      (with-stderr-to heptagon_1_05_00-hept_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          heptagon_1_05_00-hept_parser_stripped.mli)))))

(rule
  (targets heptagon_1_05_00-hept_parser_stripped.cmo
    heptagon_1_05_00-hept_parser_stripped.ml.log)
  (deps heptagon_1_05_00-hept_parser_stripped.ml
    heptagon_1_05_00-hept_parser_stripped.cmi)
  (action
    (with-stdout-to heptagon_1_05_00-hept_parser_stripped.ml.dtimings
      (with-stderr-to heptagon_1_05_00-hept_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          heptagon_1_05_00-hept_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff heptagon_1_05_00-hept_parser_stripped.ml.log.exp
      heptagon_1_05_00-hept_parser_stripped.ml.log)))

(rule (target herdtools7.7.51-AArch64Parser.opp.out)
  (deps herdtools7.7.51-AArch64Parser.mly)
  (action
    (with-outputs-to herdtools7.7.51-AArch64Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-AArch64Parser.opp.exp
      herdtools7.7.51-AArch64Parser.opp.out)))

(rule
  (targets herdtools7.7.51-AArch64Parser.out
    herdtools7.7.51-AArch64Parser.automaton
    herdtools7.7.51-AArch64Parser.automaton.resolved
    herdtools7.7.51-AArch64Parser.conflicts
    herdtools7.7.51-AArch64Parser.timings)
  (deps herdtools7.7.51-AArch64Parser.mly)
  (action
    (with-outputs-to herdtools7.7.51-AArch64Parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to herdtools7.7.51-AArch64Parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-AArch64Parser.exp
      herdtools7.7.51-AArch64Parser.out)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-AArch64Parser.automaton.exp
      herdtools7.7.51-AArch64Parser.automaton)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-AArch64Parser.automaton.resolved.exp
      herdtools7.7.51-AArch64Parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-AArch64Parser.conflicts.exp
      herdtools7.7.51-AArch64Parser.conflicts)))

(rule (target herdtools7_7_51-AArch64Parser_stripped.mly)
  (deps herdtools7.7.51-AArch64Parser.mly)
  (action
    (with-stderr-to herdtools7_7_51-AArch64Parser_stripped.ignored
      (with-stdout-to herdtools7_7_51-AArch64Parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets herdtools7_7_51-AArch64Parser_stripped.log
    herdtools7_7_51-AArch64Parser_stripped.mli
    herdtools7_7_51-AArch64Parser_stripped.ml
    herdtools7_7_51-AArch64Parser_stripped.stacklang
    herdtools7_7_51-AArch64Parser_stripped.timings
    herdtools7_7_51-AArch64Parser_stripped.scount
    herdtools7_7_51-AArch64Parser_stripped.dcount)
  (deps herdtools7_7_51-AArch64Parser_stripped.mly)
  (action
    (with-outputs-to herdtools7_7_51-AArch64Parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to herdtools7_7_51-AArch64Parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      herdtools7_7_51-AArch64Parser_stripped.stacklang))

(rule
  (targets herdtools7_7_51-AArch64Parser_stripped.cmi
    herdtools7_7_51-AArch64Parser_stripped.mli.log)
  (deps herdtools7_7_51-AArch64Parser_stripped.mli)
  (action
    (with-stdout-to herdtools7_7_51-AArch64Parser_stripped.mli.dtimings
      (with-stderr-to herdtools7_7_51-AArch64Parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-AArch64Parser_stripped.mli)))))

(rule
  (targets herdtools7_7_51-AArch64Parser_stripped.cmo
    herdtools7_7_51-AArch64Parser_stripped.ml.log)
  (deps herdtools7_7_51-AArch64Parser_stripped.ml
    herdtools7_7_51-AArch64Parser_stripped.cmi)
  (action
    (with-stdout-to herdtools7_7_51-AArch64Parser_stripped.ml.dtimings
      (with-stderr-to herdtools7_7_51-AArch64Parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-AArch64Parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff herdtools7_7_51-AArch64Parser_stripped.ml.log.exp
      herdtools7_7_51-AArch64Parser_stripped.ml.log)))

(rule (target herdtools7.7.51-ARMParser.opp.out)
  (deps herdtools7.7.51-ARMParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-ARMParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-ARMParser.opp.exp
      herdtools7.7.51-ARMParser.opp.out)))

(rule
  (targets herdtools7.7.51-ARMParser.out herdtools7.7.51-ARMParser.automaton
    herdtools7.7.51-ARMParser.automaton.resolved
    herdtools7.7.51-ARMParser.conflicts herdtools7.7.51-ARMParser.timings)
  (deps herdtools7.7.51-ARMParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-ARMParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to herdtools7.7.51-ARMParser.timings %{deps})))))

(rule (alias quick)
  (action (diff herdtools7.7.51-ARMParser.exp herdtools7.7.51-ARMParser.out)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-ARMParser.automaton.exp
      herdtools7.7.51-ARMParser.automaton)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-ARMParser.automaton.resolved.exp
      herdtools7.7.51-ARMParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-ARMParser.conflicts.exp
      herdtools7.7.51-ARMParser.conflicts)))

(rule (target herdtools7_7_51-ARMParser_stripped.mly)
  (deps herdtools7.7.51-ARMParser.mly)
  (action
    (with-stderr-to herdtools7_7_51-ARMParser_stripped.ignored
      (with-stdout-to herdtools7_7_51-ARMParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets herdtools7_7_51-ARMParser_stripped.log
    herdtools7_7_51-ARMParser_stripped.mli
    herdtools7_7_51-ARMParser_stripped.ml
    herdtools7_7_51-ARMParser_stripped.stacklang
    herdtools7_7_51-ARMParser_stripped.timings
    herdtools7_7_51-ARMParser_stripped.scount
    herdtools7_7_51-ARMParser_stripped.dcount)
  (deps herdtools7_7_51-ARMParser_stripped.mly)
  (action
    (with-outputs-to herdtools7_7_51-ARMParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to herdtools7_7_51-ARMParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      herdtools7_7_51-ARMParser_stripped.stacklang))

(rule
  (targets herdtools7_7_51-ARMParser_stripped.cmi
    herdtools7_7_51-ARMParser_stripped.mli.log)
  (deps herdtools7_7_51-ARMParser_stripped.mli)
  (action
    (with-stdout-to herdtools7_7_51-ARMParser_stripped.mli.dtimings
      (with-stderr-to herdtools7_7_51-ARMParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-ARMParser_stripped.mli)))))

(rule
  (targets herdtools7_7_51-ARMParser_stripped.cmo
    herdtools7_7_51-ARMParser_stripped.ml.log)
  (deps herdtools7_7_51-ARMParser_stripped.ml
    herdtools7_7_51-ARMParser_stripped.cmi)
  (action
    (with-stdout-to herdtools7_7_51-ARMParser_stripped.ml.dtimings
      (with-stderr-to herdtools7_7_51-ARMParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-ARMParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff herdtools7_7_51-ARMParser_stripped.ml.log.exp
      herdtools7_7_51-ARMParser_stripped.ml.log)))

(rule (target herdtools7.7.51-CParser.opp.out)
  (deps herdtools7.7.51-CParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-CParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-CParser.opp.exp herdtools7.7.51-CParser.opp.out)))

(rule
  (targets herdtools7.7.51-CParser.out herdtools7.7.51-CParser.automaton
    herdtools7.7.51-CParser.automaton.resolved
    herdtools7.7.51-CParser.conflicts herdtools7.7.51-CParser.timings)
  (deps herdtools7.7.51-CParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-CParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to herdtools7.7.51-CParser.timings %{deps})))))

(rule (alias quick)
  (action (diff herdtools7.7.51-CParser.exp herdtools7.7.51-CParser.out)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-CParser.automaton.exp
      herdtools7.7.51-CParser.automaton)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-CParser.automaton.resolved.exp
      herdtools7.7.51-CParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-CParser.conflicts.exp
      herdtools7.7.51-CParser.conflicts)))

(rule (target herdtools7_7_51-CParser_stripped.mly)
  (deps herdtools7.7.51-CParser.mly)
  (action
    (with-stderr-to herdtools7_7_51-CParser_stripped.ignored
      (with-stdout-to herdtools7_7_51-CParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets herdtools7_7_51-CParser_stripped.log
    herdtools7_7_51-CParser_stripped.mli herdtools7_7_51-CParser_stripped.ml
    herdtools7_7_51-CParser_stripped.stacklang
    herdtools7_7_51-CParser_stripped.timings
    herdtools7_7_51-CParser_stripped.scount
    herdtools7_7_51-CParser_stripped.dcount)
  (deps herdtools7_7_51-CParser_stripped.mly)
  (action
    (with-outputs-to herdtools7_7_51-CParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to herdtools7_7_51-CParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      herdtools7_7_51-CParser_stripped.stacklang))

(rule
  (targets herdtools7_7_51-CParser_stripped.cmi
    herdtools7_7_51-CParser_stripped.mli.log)
  (deps herdtools7_7_51-CParser_stripped.mli)
  (action
    (with-stdout-to herdtools7_7_51-CParser_stripped.mli.dtimings
      (with-stderr-to herdtools7_7_51-CParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-CParser_stripped.mli)))))

(rule
  (targets herdtools7_7_51-CParser_stripped.cmo
    herdtools7_7_51-CParser_stripped.ml.log)
  (deps herdtools7_7_51-CParser_stripped.ml
    herdtools7_7_51-CParser_stripped.cmi)
  (action
    (with-stdout-to herdtools7_7_51-CParser_stripped.ml.dtimings
      (with-stderr-to herdtools7_7_51-CParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-CParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff herdtools7_7_51-CParser_stripped.ml.log.exp
      herdtools7_7_51-CParser_stripped.ml.log)))

(rule (target herdtools7.7.51-LISAParser.opp.out)
  (deps herdtools7.7.51-LISAParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-LISAParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-LISAParser.opp.exp
      herdtools7.7.51-LISAParser.opp.out)))

(rule
  (targets herdtools7.7.51-LISAParser.out
    herdtools7.7.51-LISAParser.automaton
    herdtools7.7.51-LISAParser.automaton.resolved
    herdtools7.7.51-LISAParser.conflicts herdtools7.7.51-LISAParser.timings)
  (deps herdtools7.7.51-LISAParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-LISAParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to herdtools7.7.51-LISAParser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-LISAParser.exp herdtools7.7.51-LISAParser.out)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-LISAParser.automaton.exp
      herdtools7.7.51-LISAParser.automaton)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-LISAParser.automaton.resolved.exp
      herdtools7.7.51-LISAParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-LISAParser.conflicts.exp
      herdtools7.7.51-LISAParser.conflicts)))

(rule (target herdtools7_7_51-LISAParser_stripped.mly)
  (deps herdtools7.7.51-LISAParser.mly)
  (action
    (with-stderr-to herdtools7_7_51-LISAParser_stripped.ignored
      (with-stdout-to herdtools7_7_51-LISAParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets herdtools7_7_51-LISAParser_stripped.log
    herdtools7_7_51-LISAParser_stripped.mli
    herdtools7_7_51-LISAParser_stripped.ml
    herdtools7_7_51-LISAParser_stripped.stacklang
    herdtools7_7_51-LISAParser_stripped.timings
    herdtools7_7_51-LISAParser_stripped.scount
    herdtools7_7_51-LISAParser_stripped.dcount)
  (deps herdtools7_7_51-LISAParser_stripped.mly)
  (action
    (with-outputs-to herdtools7_7_51-LISAParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to herdtools7_7_51-LISAParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      herdtools7_7_51-LISAParser_stripped.stacklang))

(rule
  (targets herdtools7_7_51-LISAParser_stripped.cmi
    herdtools7_7_51-LISAParser_stripped.mli.log)
  (deps herdtools7_7_51-LISAParser_stripped.mli)
  (action
    (with-stdout-to herdtools7_7_51-LISAParser_stripped.mli.dtimings
      (with-stderr-to herdtools7_7_51-LISAParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-LISAParser_stripped.mli)))))

(rule
  (targets herdtools7_7_51-LISAParser_stripped.cmo
    herdtools7_7_51-LISAParser_stripped.ml.log)
  (deps herdtools7_7_51-LISAParser_stripped.ml
    herdtools7_7_51-LISAParser_stripped.cmi)
  (action
    (with-stdout-to herdtools7_7_51-LISAParser_stripped.ml.dtimings
      (with-stderr-to herdtools7_7_51-LISAParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-LISAParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff herdtools7_7_51-LISAParser_stripped.ml.log.exp
      herdtools7_7_51-LISAParser_stripped.ml.log)))

(rule (target herdtools7.7.51-PPCParser.opp.out)
  (deps herdtools7.7.51-PPCParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-PPCParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-PPCParser.opp.exp
      herdtools7.7.51-PPCParser.opp.out)))

(rule
  (targets herdtools7.7.51-PPCParser.out herdtools7.7.51-PPCParser.automaton
    herdtools7.7.51-PPCParser.automaton.resolved
    herdtools7.7.51-PPCParser.conflicts herdtools7.7.51-PPCParser.timings)
  (deps herdtools7.7.51-PPCParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-PPCParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to herdtools7.7.51-PPCParser.timings %{deps})))))

(rule (alias quick)
  (action (diff herdtools7.7.51-PPCParser.exp herdtools7.7.51-PPCParser.out)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-PPCParser.automaton.exp
      herdtools7.7.51-PPCParser.automaton)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-PPCParser.automaton.resolved.exp
      herdtools7.7.51-PPCParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-PPCParser.conflicts.exp
      herdtools7.7.51-PPCParser.conflicts)))

(rule (target herdtools7_7_51-PPCParser_stripped.mly)
  (deps herdtools7.7.51-PPCParser.mly)
  (action
    (with-stderr-to herdtools7_7_51-PPCParser_stripped.ignored
      (with-stdout-to herdtools7_7_51-PPCParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets herdtools7_7_51-PPCParser_stripped.log
    herdtools7_7_51-PPCParser_stripped.mli
    herdtools7_7_51-PPCParser_stripped.ml
    herdtools7_7_51-PPCParser_stripped.stacklang
    herdtools7_7_51-PPCParser_stripped.timings
    herdtools7_7_51-PPCParser_stripped.scount
    herdtools7_7_51-PPCParser_stripped.dcount)
  (deps herdtools7_7_51-PPCParser_stripped.mly)
  (action
    (with-outputs-to herdtools7_7_51-PPCParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to herdtools7_7_51-PPCParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      herdtools7_7_51-PPCParser_stripped.stacklang))

(rule
  (targets herdtools7_7_51-PPCParser_stripped.cmi
    herdtools7_7_51-PPCParser_stripped.mli.log)
  (deps herdtools7_7_51-PPCParser_stripped.mli)
  (action
    (with-stdout-to herdtools7_7_51-PPCParser_stripped.mli.dtimings
      (with-stderr-to herdtools7_7_51-PPCParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-PPCParser_stripped.mli)))))

(rule
  (targets herdtools7_7_51-PPCParser_stripped.cmo
    herdtools7_7_51-PPCParser_stripped.ml.log)
  (deps herdtools7_7_51-PPCParser_stripped.ml
    herdtools7_7_51-PPCParser_stripped.cmi)
  (action
    (with-stdout-to herdtools7_7_51-PPCParser_stripped.ml.dtimings
      (with-stderr-to herdtools7_7_51-PPCParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-PPCParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff herdtools7_7_51-PPCParser_stripped.ml.log.exp
      herdtools7_7_51-PPCParser_stripped.ml.log)))

(rule (target herdtools7.7.51-RISCVParser.opp.out)
  (deps herdtools7.7.51-RISCVParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-RISCVParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-RISCVParser.opp.exp
      herdtools7.7.51-RISCVParser.opp.out)))

(rule
  (targets herdtools7.7.51-RISCVParser.out
    herdtools7.7.51-RISCVParser.automaton
    herdtools7.7.51-RISCVParser.automaton.resolved
    herdtools7.7.51-RISCVParser.conflicts
    herdtools7.7.51-RISCVParser.timings)
  (deps herdtools7.7.51-RISCVParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-RISCVParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to herdtools7.7.51-RISCVParser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-RISCVParser.exp herdtools7.7.51-RISCVParser.out)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-RISCVParser.automaton.exp
      herdtools7.7.51-RISCVParser.automaton)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-RISCVParser.automaton.resolved.exp
      herdtools7.7.51-RISCVParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-RISCVParser.conflicts.exp
      herdtools7.7.51-RISCVParser.conflicts)))

(rule (target herdtools7_7_51-RISCVParser_stripped.mly)
  (deps herdtools7.7.51-RISCVParser.mly)
  (action
    (with-stderr-to herdtools7_7_51-RISCVParser_stripped.ignored
      (with-stdout-to herdtools7_7_51-RISCVParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets herdtools7_7_51-RISCVParser_stripped.log
    herdtools7_7_51-RISCVParser_stripped.mli
    herdtools7_7_51-RISCVParser_stripped.ml
    herdtools7_7_51-RISCVParser_stripped.stacklang
    herdtools7_7_51-RISCVParser_stripped.timings
    herdtools7_7_51-RISCVParser_stripped.scount
    herdtools7_7_51-RISCVParser_stripped.dcount)
  (deps herdtools7_7_51-RISCVParser_stripped.mly)
  (action
    (with-outputs-to herdtools7_7_51-RISCVParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to herdtools7_7_51-RISCVParser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      herdtools7_7_51-RISCVParser_stripped.stacklang))

(rule
  (targets herdtools7_7_51-RISCVParser_stripped.cmi
    herdtools7_7_51-RISCVParser_stripped.mli.log)
  (deps herdtools7_7_51-RISCVParser_stripped.mli)
  (action
    (with-stdout-to herdtools7_7_51-RISCVParser_stripped.mli.dtimings
      (with-stderr-to herdtools7_7_51-RISCVParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-RISCVParser_stripped.mli)))))

(rule
  (targets herdtools7_7_51-RISCVParser_stripped.cmo
    herdtools7_7_51-RISCVParser_stripped.ml.log)
  (deps herdtools7_7_51-RISCVParser_stripped.ml
    herdtools7_7_51-RISCVParser_stripped.cmi)
  (action
    (with-stdout-to herdtools7_7_51-RISCVParser_stripped.ml.dtimings
      (with-stderr-to herdtools7_7_51-RISCVParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-RISCVParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff herdtools7_7_51-RISCVParser_stripped.ml.log.exp
      herdtools7_7_51-RISCVParser_stripped.ml.log)))

(rule (target herdtools7.7.51-X86Parser.opp.out)
  (deps herdtools7.7.51-X86Parser.mly)
  (action
    (with-outputs-to herdtools7.7.51-X86Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-X86Parser.opp.exp
      herdtools7.7.51-X86Parser.opp.out)))

(rule
  (targets herdtools7.7.51-X86Parser.out herdtools7.7.51-X86Parser.automaton
    herdtools7.7.51-X86Parser.automaton.resolved
    herdtools7.7.51-X86Parser.conflicts herdtools7.7.51-X86Parser.timings)
  (deps herdtools7.7.51-X86Parser.mly)
  (action
    (with-outputs-to herdtools7.7.51-X86Parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to herdtools7.7.51-X86Parser.timings %{deps})))))

(rule (alias quick)
  (action (diff herdtools7.7.51-X86Parser.exp herdtools7.7.51-X86Parser.out)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-X86Parser.automaton.exp
      herdtools7.7.51-X86Parser.automaton)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-X86Parser.automaton.resolved.exp
      herdtools7.7.51-X86Parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-X86Parser.conflicts.exp
      herdtools7.7.51-X86Parser.conflicts)))

(rule (target herdtools7_7_51-X86Parser_stripped.mly)
  (deps herdtools7.7.51-X86Parser.mly)
  (action
    (with-stderr-to herdtools7_7_51-X86Parser_stripped.ignored
      (with-stdout-to herdtools7_7_51-X86Parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets herdtools7_7_51-X86Parser_stripped.log
    herdtools7_7_51-X86Parser_stripped.mli
    herdtools7_7_51-X86Parser_stripped.ml
    herdtools7_7_51-X86Parser_stripped.stacklang
    herdtools7_7_51-X86Parser_stripped.timings
    herdtools7_7_51-X86Parser_stripped.scount
    herdtools7_7_51-X86Parser_stripped.dcount)
  (deps herdtools7_7_51-X86Parser_stripped.mly)
  (action
    (with-outputs-to herdtools7_7_51-X86Parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to herdtools7_7_51-X86Parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      herdtools7_7_51-X86Parser_stripped.stacklang))

(rule
  (targets herdtools7_7_51-X86Parser_stripped.cmi
    herdtools7_7_51-X86Parser_stripped.mli.log)
  (deps herdtools7_7_51-X86Parser_stripped.mli)
  (action
    (with-stdout-to herdtools7_7_51-X86Parser_stripped.mli.dtimings
      (with-stderr-to herdtools7_7_51-X86Parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-X86Parser_stripped.mli)))))

(rule
  (targets herdtools7_7_51-X86Parser_stripped.cmo
    herdtools7_7_51-X86Parser_stripped.ml.log)
  (deps herdtools7_7_51-X86Parser_stripped.ml
    herdtools7_7_51-X86Parser_stripped.cmi)
  (action
    (with-stdout-to herdtools7_7_51-X86Parser_stripped.ml.dtimings
      (with-stderr-to herdtools7_7_51-X86Parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-X86Parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff herdtools7_7_51-X86Parser_stripped.ml.log.exp
      herdtools7_7_51-X86Parser_stripped.ml.log)))

(rule (target herdtools7.7.51-modelParser.opp.out)
  (deps herdtools7.7.51-modelParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-modelParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-modelParser.opp.exp
      herdtools7.7.51-modelParser.opp.out)))

(rule
  (targets herdtools7.7.51-modelParser.out
    herdtools7.7.51-modelParser.automaton
    herdtools7.7.51-modelParser.automaton.resolved
    herdtools7.7.51-modelParser.conflicts
    herdtools7.7.51-modelParser.timings)
  (deps herdtools7.7.51-modelParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-modelParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to herdtools7.7.51-modelParser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-modelParser.exp herdtools7.7.51-modelParser.out)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-modelParser.automaton.exp
      herdtools7.7.51-modelParser.automaton)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-modelParser.automaton.resolved.exp
      herdtools7.7.51-modelParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-modelParser.conflicts.exp
      herdtools7.7.51-modelParser.conflicts)))

(rule (target herdtools7_7_51-modelParser_stripped.mly)
  (deps herdtools7.7.51-modelParser.mly)
  (action
    (with-stderr-to herdtools7_7_51-modelParser_stripped.ignored
      (with-stdout-to herdtools7_7_51-modelParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets herdtools7_7_51-modelParser_stripped.log
    herdtools7_7_51-modelParser_stripped.mli
    herdtools7_7_51-modelParser_stripped.ml
    herdtools7_7_51-modelParser_stripped.stacklang
    herdtools7_7_51-modelParser_stripped.timings
    herdtools7_7_51-modelParser_stripped.scount
    herdtools7_7_51-modelParser_stripped.dcount)
  (deps herdtools7_7_51-modelParser_stripped.mly)
  (action
    (with-outputs-to herdtools7_7_51-modelParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to herdtools7_7_51-modelParser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      herdtools7_7_51-modelParser_stripped.stacklang))

(rule
  (targets herdtools7_7_51-modelParser_stripped.cmi
    herdtools7_7_51-modelParser_stripped.mli.log)
  (deps herdtools7_7_51-modelParser_stripped.mli)
  (action
    (with-stdout-to herdtools7_7_51-modelParser_stripped.mli.dtimings
      (with-stderr-to herdtools7_7_51-modelParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-modelParser_stripped.mli)))))

(rule
  (targets herdtools7_7_51-modelParser_stripped.cmo
    herdtools7_7_51-modelParser_stripped.ml.log)
  (deps herdtools7_7_51-modelParser_stripped.ml
    herdtools7_7_51-modelParser_stripped.cmi)
  (action
    (with-stdout-to herdtools7_7_51-modelParser_stripped.ml.dtimings
      (with-stderr-to herdtools7_7_51-modelParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-modelParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff herdtools7_7_51-modelParser_stripped.ml.log.exp
      herdtools7_7_51-modelParser_stripped.ml.log)))

(rule (target herdtools7.7.51-stateParser.opp.out)
  (deps herdtools7.7.51-stateParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-stateParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-stateParser.opp.exp
      herdtools7.7.51-stateParser.opp.out)))

(rule
  (targets herdtools7.7.51-stateParser.out
    herdtools7.7.51-stateParser.automaton
    herdtools7.7.51-stateParser.automaton.resolved
    herdtools7.7.51-stateParser.conflicts
    herdtools7.7.51-stateParser.timings)
  (deps herdtools7.7.51-stateParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-stateParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to herdtools7.7.51-stateParser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-stateParser.exp herdtools7.7.51-stateParser.out)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-stateParser.automaton.exp
      herdtools7.7.51-stateParser.automaton)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-stateParser.automaton.resolved.exp
      herdtools7.7.51-stateParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff herdtools7.7.51-stateParser.conflicts.exp
      herdtools7.7.51-stateParser.conflicts)))

(rule (target herdtools7_7_51-stateParser_stripped.mly)
  (deps herdtools7.7.51-stateParser.mly)
  (action
    (with-stderr-to herdtools7_7_51-stateParser_stripped.ignored
      (with-stdout-to herdtools7_7_51-stateParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets herdtools7_7_51-stateParser_stripped.log
    herdtools7_7_51-stateParser_stripped.mli
    herdtools7_7_51-stateParser_stripped.ml
    herdtools7_7_51-stateParser_stripped.stacklang
    herdtools7_7_51-stateParser_stripped.timings
    herdtools7_7_51-stateParser_stripped.scount
    herdtools7_7_51-stateParser_stripped.dcount)
  (deps herdtools7_7_51-stateParser_stripped.mly)
  (action
    (with-outputs-to herdtools7_7_51-stateParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to herdtools7_7_51-stateParser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      herdtools7_7_51-stateParser_stripped.stacklang))

(rule
  (targets herdtools7_7_51-stateParser_stripped.cmi
    herdtools7_7_51-stateParser_stripped.mli.log)
  (deps herdtools7_7_51-stateParser_stripped.mli)
  (action
    (with-stdout-to herdtools7_7_51-stateParser_stripped.mli.dtimings
      (with-stderr-to herdtools7_7_51-stateParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-stateParser_stripped.mli)))))

(rule
  (targets herdtools7_7_51-stateParser_stripped.cmo
    herdtools7_7_51-stateParser_stripped.ml.log)
  (deps herdtools7_7_51-stateParser_stripped.ml
    herdtools7_7_51-stateParser_stripped.cmi)
  (action
    (with-stdout-to herdtools7_7_51-stateParser_stripped.ml.dtimings
      (with-stderr-to herdtools7_7_51-stateParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          herdtools7_7_51-stateParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff herdtools7_7_51-stateParser_stripped.ml.log.exp
      herdtools7_7_51-stateParser_stripped.ml.log)))

(rule (target hmx-multi.opp.out) (deps hmx-multi.mly)
  (action
    (with-outputs-to hmx-multi.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff hmx-multi.opp.exp hmx-multi.opp.out)))

(rule
  (targets hmx-multi.out hmx-multi.automaton hmx-multi.automaton.resolved
    hmx-multi.conflicts hmx-multi.timings)
  (deps hmx-multi.mly)
  (action
    (with-outputs-to hmx-multi.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to hmx-multi.timings %{deps})))))

(rule (alias quick) (action (diff hmx-multi.exp hmx-multi.out)))

(rule (alias quick)
  (action (diff hmx-multi.automaton.exp hmx-multi.automaton)))

(rule (alias quick)
  (action
    (diff hmx-multi.automaton.resolved.exp hmx-multi.automaton.resolved)))

(rule (alias quick)
  (action (diff hmx-multi.conflicts.exp hmx-multi.conflicts)))

(rule (target hmx-multi_stripped.mly) (deps hmx-multi.mly)
  (action
    (with-stderr-to hmx-multi_stripped.ignored
      (with-stdout-to hmx-multi_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets hmx-multi_stripped.log hmx-multi_stripped.mli
    hmx-multi_stripped.ml hmx-multi_stripped.stacklang
    hmx-multi_stripped.timings hmx-multi_stripped.scount
    hmx-multi_stripped.dcount)
  (deps hmx-multi_stripped.mly)
  (action
    (with-outputs-to hmx-multi_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to hmx-multi_stripped.timings %{deps})))))

(alias (name quick) (deps
                      hmx-multi_stripped.stacklang))

(rule (targets hmx-multi_stripped.cmi hmx-multi_stripped.mli.log)
  (deps hmx-multi_stripped.mli)
  (action
    (with-stdout-to hmx-multi_stripped.mli.dtimings
      (with-stderr-to hmx-multi_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c hmx-multi_stripped.mli)))))

(rule (targets hmx-multi_stripped.cmo hmx-multi_stripped.ml.log)
  (deps hmx-multi_stripped.ml hmx-multi_stripped.cmi)
  (action
    (with-stdout-to hmx-multi_stripped.ml.dtimings
      (with-stderr-to hmx-multi_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c hmx-multi_stripped.ml)))))

(rule (alias test)
  (action (diff hmx-multi_stripped.ml.log.exp hmx-multi_stripped.ml.log)))

(rule (target hmx-sets.opp.out) (deps hmx-sets.mly)
  (action
    (with-outputs-to hmx-sets.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff hmx-sets.opp.exp hmx-sets.opp.out)))

(rule
  (targets hmx-sets.out hmx-sets.automaton hmx-sets.automaton.resolved
    hmx-sets.conflicts hmx-sets.timings)
  (deps hmx-sets.mly)
  (action
    (with-outputs-to hmx-sets.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to hmx-sets.timings %{deps})))))

(rule (alias quick) (action (diff hmx-sets.exp hmx-sets.out)))

(rule (alias quick)
  (action (diff hmx-sets.automaton.exp hmx-sets.automaton)))

(rule (alias quick)
  (action (diff hmx-sets.automaton.resolved.exp hmx-sets.automaton.resolved)))

(rule (alias quick)
  (action (diff hmx-sets.conflicts.exp hmx-sets.conflicts)))

(rule (target hmx-sets_stripped.mly) (deps hmx-sets.mly)
  (action
    (with-stderr-to hmx-sets_stripped.ignored
      (with-stdout-to hmx-sets_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets hmx-sets_stripped.log hmx-sets_stripped.mli hmx-sets_stripped.ml
    hmx-sets_stripped.stacklang hmx-sets_stripped.timings
    hmx-sets_stripped.scount hmx-sets_stripped.dcount)
  (deps hmx-sets_stripped.mly)
  (action
    (with-outputs-to hmx-sets_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to hmx-sets_stripped.timings %{deps})))))

(alias (name quick) (deps
                      hmx-sets_stripped.stacklang))

(rule (targets hmx-sets_stripped.cmi hmx-sets_stripped.mli.log)
  (deps hmx-sets_stripped.mli)
  (action
    (with-stdout-to hmx-sets_stripped.mli.dtimings
      (with-stderr-to hmx-sets_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c hmx-sets_stripped.mli)))))

(rule (targets hmx-sets_stripped.cmo hmx-sets_stripped.ml.log)
  (deps hmx-sets_stripped.ml hmx-sets_stripped.cmi)
  (action
    (with-stdout-to hmx-sets_stripped.ml.dtimings
      (with-stderr-to hmx-sets_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c hmx-sets_stripped.ml)))))

(rule (alias test)
  (action (diff hmx-sets_stripped.ml.log.exp hmx-sets_stripped.ml.log)))

(rule (target ho.opp.out) (deps ho.mly)
  (action
    (with-outputs-to ho.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff ho.opp.exp ho.opp.out)))

(rule
  (targets ho.out ho.automaton ho.automaton.resolved ho.conflicts ho.timings)
  (deps ho.mly)
  (action
    (with-outputs-to ho.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ho.timings %{deps})))))

(rule (alias quick) (action (diff ho.exp ho.out)))

(rule (alias quick) (action (diff ho.automaton.exp ho.automaton)))

(rule (alias quick)
  (action (diff ho.automaton.resolved.exp ho.automaton.resolved)))

(rule (alias quick) (action (diff ho.conflicts.exp ho.conflicts)))

(rule (target ho_stripped.mly) (deps ho.mly)
  (action
    (with-stderr-to ho_stripped.ignored
      (with-stdout-to ho_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ho_stripped.log ho_stripped.mli ho_stripped.ml
    ho_stripped.stacklang ho_stripped.timings ho_stripped.scount
    ho_stripped.dcount)
  (deps ho_stripped.mly)
  (action
    (with-outputs-to ho_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ho_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ho_stripped.stacklang))

(rule (targets ho_stripped.cmi ho_stripped.mli.log) (deps ho_stripped.mli)
  (action
    (with-stdout-to ho_stripped.mli.dtimings
      (with-stderr-to ho_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ho_stripped.mli)))))

(rule (targets ho_stripped.cmo ho_stripped.ml.log)
  (deps ho_stripped.ml ho_stripped.cmi)
  (action
    (with-stdout-to ho_stripped.ml.dtimings
      (with-stderr-to ho_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ho_stripped.ml)))))

(rule (alias test) (action (diff ho_stripped.ml.log.exp ho_stripped.ml.log)))

(rule (target htparser.opp.out) (deps htparser.mly)
  (action
    (with-outputs-to htparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff htparser.opp.exp htparser.opp.out)))

(rule
  (targets htparser.out htparser.automaton htparser.automaton.resolved
    htparser.conflicts htparser.timings)
  (deps htparser.mly)
  (action
    (with-outputs-to htparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to htparser.timings %{deps})))))

(rule (alias quick) (action (diff htparser.exp htparser.out)))

(rule (alias quick)
  (action (diff htparser.automaton.exp htparser.automaton)))

(rule (alias quick)
  (action (diff htparser.automaton.resolved.exp htparser.automaton.resolved)))

(rule (alias quick)
  (action (diff htparser.conflicts.exp htparser.conflicts)))

(rule (target htparser_stripped.mly) (deps htparser.mly)
  (action
    (with-stderr-to htparser_stripped.ignored
      (with-stdout-to htparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets htparser_stripped.log htparser_stripped.mli htparser_stripped.ml
    htparser_stripped.stacklang htparser_stripped.timings
    htparser_stripped.scount htparser_stripped.dcount)
  (deps htparser_stripped.mly)
  (action
    (with-outputs-to htparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to htparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      htparser_stripped.stacklang))

(rule (targets htparser_stripped.cmi htparser_stripped.mli.log)
  (deps htparser_stripped.mli)
  (action
    (with-stdout-to htparser_stripped.mli.dtimings
      (with-stderr-to htparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c htparser_stripped.mli)))))

(rule (targets htparser_stripped.cmo htparser_stripped.ml.log)
  (deps htparser_stripped.ml htparser_stripped.cmi)
  (action
    (with-stdout-to htparser_stripped.ml.dtimings
      (with-stderr-to htparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c htparser_stripped.ml)))))

(rule (alias test)
  (action (diff htparser_stripped.ml.log.exp htparser_stripped.ml.log)))

(rule (target hydro.0.7.1-hgen_parser.opp.out)
  (deps hydro.0.7.1-hgen_parser.mly)
  (action
    (with-outputs-to hydro.0.7.1-hgen_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff hydro.0.7.1-hgen_parser.opp.exp hydro.0.7.1-hgen_parser.opp.out)))

(rule
  (targets hydro.0.7.1-hgen_parser.out hydro.0.7.1-hgen_parser.automaton
    hydro.0.7.1-hgen_parser.automaton.resolved
    hydro.0.7.1-hgen_parser.conflicts hydro.0.7.1-hgen_parser.timings)
  (deps hydro.0.7.1-hgen_parser.mly)
  (action
    (with-outputs-to hydro.0.7.1-hgen_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to hydro.0.7.1-hgen_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff hydro.0.7.1-hgen_parser.exp hydro.0.7.1-hgen_parser.out)))

(rule (alias quick)
  (action
    (diff hydro.0.7.1-hgen_parser.automaton.exp
      hydro.0.7.1-hgen_parser.automaton)))

(rule (alias quick)
  (action
    (diff hydro.0.7.1-hgen_parser.automaton.resolved.exp
      hydro.0.7.1-hgen_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff hydro.0.7.1-hgen_parser.conflicts.exp
      hydro.0.7.1-hgen_parser.conflicts)))

(rule (target hydro_0_7_1-hgen_parser_stripped.mly)
  (deps hydro.0.7.1-hgen_parser.mly)
  (action
    (with-stderr-to hydro_0_7_1-hgen_parser_stripped.ignored
      (with-stdout-to hydro_0_7_1-hgen_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets hydro_0_7_1-hgen_parser_stripped.log
    hydro_0_7_1-hgen_parser_stripped.mli hydro_0_7_1-hgen_parser_stripped.ml
    hydro_0_7_1-hgen_parser_stripped.stacklang
    hydro_0_7_1-hgen_parser_stripped.timings
    hydro_0_7_1-hgen_parser_stripped.scount
    hydro_0_7_1-hgen_parser_stripped.dcount)
  (deps hydro_0_7_1-hgen_parser_stripped.mly)
  (action
    (with-outputs-to hydro_0_7_1-hgen_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to hydro_0_7_1-hgen_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      hydro_0_7_1-hgen_parser_stripped.stacklang))

(rule
  (targets hydro_0_7_1-hgen_parser_stripped.cmi
    hydro_0_7_1-hgen_parser_stripped.mli.log)
  (deps hydro_0_7_1-hgen_parser_stripped.mli)
  (action
    (with-stdout-to hydro_0_7_1-hgen_parser_stripped.mli.dtimings
      (with-stderr-to hydro_0_7_1-hgen_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          hydro_0_7_1-hgen_parser_stripped.mli)))))

(rule
  (targets hydro_0_7_1-hgen_parser_stripped.cmo
    hydro_0_7_1-hgen_parser_stripped.ml.log)
  (deps hydro_0_7_1-hgen_parser_stripped.ml
    hydro_0_7_1-hgen_parser_stripped.cmi)
  (action
    (with-stdout-to hydro_0_7_1-hgen_parser_stripped.ml.dtimings
      (with-stderr-to hydro_0_7_1-hgen_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          hydro_0_7_1-hgen_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff hydro_0_7_1-hgen_parser_stripped.ml.log.exp
      hydro_0_7_1-hgen_parser_stripped.ml.log)))

(rule (target ibal.opp.out) (deps ibal.mly)
  (action
    (with-outputs-to ibal.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff ibal.opp.exp ibal.opp.out)))

(rule
  (targets ibal.out ibal.automaton ibal.automaton.resolved ibal.conflicts
    ibal.timings)
  (deps ibal.mly)
  (action
    (with-outputs-to ibal.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ibal.timings %{deps})))))

(rule (alias quick) (action (diff ibal.exp ibal.out)))

(rule (alias quick) (action (diff ibal.automaton.exp ibal.automaton)))

(rule (alias quick)
  (action (diff ibal.automaton.resolved.exp ibal.automaton.resolved)))

(rule (alias quick) (action (diff ibal.conflicts.exp ibal.conflicts)))

(rule (target ibal_stripped.mly) (deps ibal.mly)
  (action
    (with-stderr-to ibal_stripped.ignored
      (with-stdout-to ibal_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ibal_stripped.log ibal_stripped.mli ibal_stripped.ml
    ibal_stripped.stacklang ibal_stripped.timings ibal_stripped.scount
    ibal_stripped.dcount)
  (deps ibal_stripped.mly)
  (action
    (with-outputs-to ibal_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ibal_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ibal_stripped.stacklang))

(rule (targets ibal_stripped.cmi ibal_stripped.mli.log)
  (deps ibal_stripped.mli)
  (action
    (with-stdout-to ibal_stripped.mli.dtimings
      (with-stderr-to ibal_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ibal_stripped.mli)))))

(rule (targets ibal_stripped.cmo ibal_stripped.ml.log)
  (deps ibal_stripped.ml ibal_stripped.cmi)
  (action
    (with-stdout-to ibal_stripped.ml.dtimings
      (with-stderr-to ibal_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ibal_stripped.ml)))))

(rule (alias test)
  (action (diff ibal_stripped.ml.log.exp ibal_stripped.ml.log)))

(rule (target ics.opp.out) (deps ics.mly)
  (action
    (with-outputs-to ics.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff ics.opp.exp ics.opp.out)))

(rule
  (targets ics.out ics.automaton ics.automaton.resolved ics.conflicts
    ics.timings)
  (deps ics.mly)
  (action
    (with-outputs-to ics.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ics.timings %{deps})))))

(rule (alias quick) (action (diff ics.exp ics.out)))

(rule (alias quick) (action (diff ics.automaton.exp ics.automaton)))

(rule (alias quick)
  (action (diff ics.automaton.resolved.exp ics.automaton.resolved)))

(rule (alias quick) (action (diff ics.conflicts.exp ics.conflicts)))

(rule (target ics_stripped.mly) (deps ics.mly)
  (action
    (with-stderr-to ics_stripped.ignored
      (with-stdout-to ics_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ics_stripped.log ics_stripped.mli ics_stripped.ml
    ics_stripped.stacklang ics_stripped.timings ics_stripped.scount
    ics_stripped.dcount)
  (deps ics_stripped.mly)
  (action
    (with-outputs-to ics_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ics_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ics_stripped.stacklang))

(rule (targets ics_stripped.cmi ics_stripped.mli.log) (deps ics_stripped.mli)
  (action
    (with-stdout-to ics_stripped.mli.dtimings
      (with-stderr-to ics_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ics_stripped.mli)))))

(rule (targets ics_stripped.cmo ics_stripped.ml.log)
  (deps ics_stripped.ml ics_stripped.cmi)
  (action
    (with-stdout-to ics_stripped.ml.dtimings
      (with-stderr-to ics_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ics_stripped.ml)))))

(rule (alias test)
  (action (diff ics_stripped.ml.log.exp ics_stripped.ml.log)))

(rule (target idl_parser.opp.out) (deps idl_parser.mly)
  (action
    (with-outputs-to idl_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff idl_parser.opp.exp idl_parser.opp.out)))

(rule
  (targets idl_parser.out idl_parser.automaton idl_parser.automaton.resolved
    idl_parser.conflicts idl_parser.timings)
  (deps idl_parser.mly)
  (action
    (with-outputs-to idl_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to idl_parser.timings %{deps})))))

(rule (alias quick) (action (diff idl_parser.exp idl_parser.out)))

(rule (alias quick)
  (action (diff idl_parser.automaton.exp idl_parser.automaton)))

(rule (alias quick)
  (action
    (diff idl_parser.automaton.resolved.exp idl_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff idl_parser.conflicts.exp idl_parser.conflicts)))

(rule (target idl_parser_stripped.mly) (deps idl_parser.mly)
  (action
    (with-stderr-to idl_parser_stripped.ignored
      (with-stdout-to idl_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets idl_parser_stripped.log idl_parser_stripped.mli
    idl_parser_stripped.ml idl_parser_stripped.stacklang
    idl_parser_stripped.timings idl_parser_stripped.scount
    idl_parser_stripped.dcount)
  (deps idl_parser_stripped.mly)
  (action
    (with-outputs-to idl_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to idl_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      idl_parser_stripped.stacklang))

(rule (targets idl_parser_stripped.cmi idl_parser_stripped.mli.log)
  (deps idl_parser_stripped.mli)
  (action
    (with-stdout-to idl_parser_stripped.mli.dtimings
      (with-stderr-to idl_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c idl_parser_stripped.mli)))))

(rule (targets idl_parser_stripped.cmo idl_parser_stripped.ml.log)
  (deps idl_parser_stripped.ml idl_parser_stripped.cmi)
  (action
    (with-stdout-to idl_parser_stripped.ml.dtimings
      (with-stderr-to idl_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c idl_parser_stripped.ml)))))

(rule (alias test)
  (action (diff idl_parser_stripped.ml.log.exp idl_parser_stripped.ml.log)))

(rule (target ilpars.opp.out) (deps ilpars.mly)
  (action
    (with-outputs-to ilpars.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff ilpars.opp.exp ilpars.opp.out)))

(rule
  (targets ilpars.out ilpars.automaton ilpars.automaton.resolved
    ilpars.conflicts ilpars.timings)
  (deps ilpars.mly)
  (action
    (with-outputs-to ilpars.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ilpars.timings %{deps})))))

(rule (alias quick) (action (diff ilpars.exp ilpars.out)))

(rule (alias quick) (action (diff ilpars.automaton.exp ilpars.automaton)))

(rule (alias quick)
  (action (diff ilpars.automaton.resolved.exp ilpars.automaton.resolved)))

(rule (alias quick) (action (diff ilpars.conflicts.exp ilpars.conflicts)))

(rule (target ilpars_stripped.mly) (deps ilpars.mly)
  (action
    (with-stderr-to ilpars_stripped.ignored
      (with-stdout-to ilpars_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ilpars_stripped.log ilpars_stripped.mli ilpars_stripped.ml
    ilpars_stripped.stacklang ilpars_stripped.timings ilpars_stripped.scount
    ilpars_stripped.dcount)
  (deps ilpars_stripped.mly)
  (action
    (with-outputs-to ilpars_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ilpars_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ilpars_stripped.stacklang))

(rule (targets ilpars_stripped.cmi ilpars_stripped.mli.log)
  (deps ilpars_stripped.mli)
  (action
    (with-stdout-to ilpars_stripped.mli.dtimings
      (with-stderr-to ilpars_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ilpars_stripped.mli)))))

(rule (targets ilpars_stripped.cmo ilpars_stripped.ml.log)
  (deps ilpars_stripped.ml ilpars_stripped.cmi)
  (action
    (with-stdout-to ilpars_stripped.ml.dtimings
      (with-stderr-to ilpars_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ilpars_stripped.ml)))))

(rule (alias test)
  (action (diff ilpars_stripped.ml.log.exp ilpars_stripped.ml.log)))

(rule (target imaplet-lwt.0.1.9-parser.opp.out)
  (deps imaplet-lwt.0.1.9-parser.mly)
  (action
    (with-outputs-to imaplet-lwt.0.1.9-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff imaplet-lwt.0.1.9-parser.opp.exp imaplet-lwt.0.1.9-parser.opp.out)))

(rule
  (targets imaplet-lwt.0.1.9-parser.out imaplet-lwt.0.1.9-parser.automaton
    imaplet-lwt.0.1.9-parser.automaton.resolved
    imaplet-lwt.0.1.9-parser.conflicts imaplet-lwt.0.1.9-parser.timings)
  (deps imaplet-lwt.0.1.9-parser.mly)
  (action
    (with-outputs-to imaplet-lwt.0.1.9-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to imaplet-lwt.0.1.9-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff imaplet-lwt.0.1.9-parser.exp imaplet-lwt.0.1.9-parser.out)))

(rule (alias quick)
  (action
    (diff imaplet-lwt.0.1.9-parser.automaton.exp
      imaplet-lwt.0.1.9-parser.automaton)))

(rule (alias quick)
  (action
    (diff imaplet-lwt.0.1.9-parser.automaton.resolved.exp
      imaplet-lwt.0.1.9-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff imaplet-lwt.0.1.9-parser.conflicts.exp
      imaplet-lwt.0.1.9-parser.conflicts)))

(rule (target imaplet-lwt_0_1_9-parser_stripped.mly)
  (deps imaplet-lwt.0.1.9-parser.mly)
  (action
    (with-stderr-to imaplet-lwt_0_1_9-parser_stripped.ignored
      (with-stdout-to imaplet-lwt_0_1_9-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets imaplet-lwt_0_1_9-parser_stripped.log
    imaplet-lwt_0_1_9-parser_stripped.mli
    imaplet-lwt_0_1_9-parser_stripped.ml
    imaplet-lwt_0_1_9-parser_stripped.stacklang
    imaplet-lwt_0_1_9-parser_stripped.timings
    imaplet-lwt_0_1_9-parser_stripped.scount
    imaplet-lwt_0_1_9-parser_stripped.dcount)
  (deps imaplet-lwt_0_1_9-parser_stripped.mly)
  (action
    (with-outputs-to imaplet-lwt_0_1_9-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to imaplet-lwt_0_1_9-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      imaplet-lwt_0_1_9-parser_stripped.stacklang))

(rule
  (targets imaplet-lwt_0_1_9-parser_stripped.cmi
    imaplet-lwt_0_1_9-parser_stripped.mli.log)
  (deps imaplet-lwt_0_1_9-parser_stripped.mli)
  (action
    (with-stdout-to imaplet-lwt_0_1_9-parser_stripped.mli.dtimings
      (with-stderr-to imaplet-lwt_0_1_9-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          imaplet-lwt_0_1_9-parser_stripped.mli)))))

(rule
  (targets imaplet-lwt_0_1_9-parser_stripped.cmo
    imaplet-lwt_0_1_9-parser_stripped.ml.log)
  (deps imaplet-lwt_0_1_9-parser_stripped.ml
    imaplet-lwt_0_1_9-parser_stripped.cmi)
  (action
    (with-stdout-to imaplet-lwt_0_1_9-parser_stripped.ml.dtimings
      (with-stderr-to imaplet-lwt_0_1_9-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          imaplet-lwt_0_1_9-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff imaplet-lwt_0_1_9-parser_stripped.ml.log.exp
      imaplet-lwt_0_1_9-parser_stripped.ml.log)))

(rule (target infinite.opp.out) (deps infinite.mly)
  (action
    (with-outputs-to infinite.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff infinite.opp.exp infinite.opp.out)))

(rule
  (targets infinite.out infinite.automaton infinite.automaton.resolved
    infinite.conflicts infinite.timings)
  (deps infinite.mly)
  (action
    (with-outputs-to infinite.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to infinite.timings %{deps})))))

(rule (alias quick) (action (diff infinite.exp infinite.out)))

(rule (alias quick)
  (action (diff infinite.automaton.exp infinite.automaton)))

(rule (alias quick)
  (action (diff infinite.automaton.resolved.exp infinite.automaton.resolved)))

(rule (alias quick)
  (action (diff infinite.conflicts.exp infinite.conflicts)))

(rule (target infinite_stripped.mly) (deps infinite.mly)
  (action
    (with-stderr-to infinite_stripped.ignored
      (with-stdout-to infinite_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets infinite_stripped.log infinite_stripped.mli infinite_stripped.ml
    infinite_stripped.stacklang infinite_stripped.timings
    infinite_stripped.scount infinite_stripped.dcount)
  (deps infinite_stripped.mly)
  (action
    (with-outputs-to infinite_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to infinite_stripped.timings %{deps})))))

(alias (name quick) (deps
                      infinite_stripped.stacklang))

(rule (targets infinite_stripped.cmi infinite_stripped.mli.log)
  (deps infinite_stripped.mli)
  (action
    (with-stdout-to infinite_stripped.mli.dtimings
      (with-stderr-to infinite_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c infinite_stripped.mli)))))

(rule (targets infinite_stripped.cmo infinite_stripped.ml.log)
  (deps infinite_stripped.ml infinite_stripped.cmi)
  (action
    (with-stdout-to infinite_stripped.ml.dtimings
      (with-stderr-to infinite_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c infinite_stripped.ml)))))

(rule (alias test)
  (action (diff infinite_stripped.ml.log.exp infinite_stripped.ml.log)))

(rule (target inline-multi-level.opp.out) (deps inline-multi-level.mly)
  (action
    (with-outputs-to inline-multi-level.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff inline-multi-level.opp.exp inline-multi-level.opp.out)))

(rule
  (targets inline-multi-level.out inline-multi-level.automaton
    inline-multi-level.automaton.resolved inline-multi-level.conflicts
    inline-multi-level.timings)
  (deps inline-multi-level.mly)
  (action
    (with-outputs-to inline-multi-level.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inline-multi-level.timings %{deps})))))

(rule (alias quick)
  (action (diff inline-multi-level.exp inline-multi-level.out)))

(rule (alias quick)
  (action
    (diff inline-multi-level.automaton.exp inline-multi-level.automaton)))

(rule (alias quick)
  (action
    (diff inline-multi-level.automaton.resolved.exp
      inline-multi-level.automaton.resolved)))

(rule (alias quick)
  (action
    (diff inline-multi-level.conflicts.exp inline-multi-level.conflicts)))

(rule (target inline-multi-level_stripped.mly) (deps inline-multi-level.mly)
  (action
    (with-stderr-to inline-multi-level_stripped.ignored
      (with-stdout-to inline-multi-level_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inline-multi-level_stripped.log inline-multi-level_stripped.mli
    inline-multi-level_stripped.ml inline-multi-level_stripped.stacklang
    inline-multi-level_stripped.timings inline-multi-level_stripped.scount
    inline-multi-level_stripped.dcount)
  (deps inline-multi-level_stripped.mly)
  (action
    (with-outputs-to inline-multi-level_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inline-multi-level_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inline-multi-level_stripped.stacklang))

(rule
  (targets inline-multi-level_stripped.cmi
    inline-multi-level_stripped.mli.log)
  (deps inline-multi-level_stripped.mli)
  (action
    (with-stdout-to inline-multi-level_stripped.mli.dtimings
      (with-stderr-to inline-multi-level_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c inline-multi-level_stripped.mli)))))

(rule
  (targets inline-multi-level_stripped.cmo
    inline-multi-level_stripped.ml.log)
  (deps inline-multi-level_stripped.ml inline-multi-level_stripped.cmi)
  (action
    (with-stdout-to inline-multi-level_stripped.ml.dtimings
      (with-stderr-to inline-multi-level_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c inline-multi-level_stripped.ml)))))

(rule (alias test)
  (action
    (diff inline-multi-level_stripped.ml.log.exp
      inline-multi-level_stripped.ml.log)))

(rule (target inline-multi-sons.opp.out) (deps inline-multi-sons.mly)
  (action
    (with-outputs-to inline-multi-sons.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff inline-multi-sons.opp.exp inline-multi-sons.opp.out)))

(rule
  (targets inline-multi-sons.out inline-multi-sons.automaton
    inline-multi-sons.automaton.resolved inline-multi-sons.conflicts
    inline-multi-sons.timings)
  (deps inline-multi-sons.mly)
  (action
    (with-outputs-to inline-multi-sons.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inline-multi-sons.timings %{deps})))))

(rule (alias quick)
  (action (diff inline-multi-sons.exp inline-multi-sons.out)))

(rule (alias quick)
  (action (diff inline-multi-sons.automaton.exp inline-multi-sons.automaton)))

(rule (alias quick)
  (action
    (diff inline-multi-sons.automaton.resolved.exp
      inline-multi-sons.automaton.resolved)))

(rule (alias quick)
  (action (diff inline-multi-sons.conflicts.exp inline-multi-sons.conflicts)))

(rule (target inline-multi-sons_stripped.mly) (deps inline-multi-sons.mly)
  (action
    (with-stderr-to inline-multi-sons_stripped.ignored
      (with-stdout-to inline-multi-sons_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inline-multi-sons_stripped.log inline-multi-sons_stripped.mli
    inline-multi-sons_stripped.ml inline-multi-sons_stripped.stacklang
    inline-multi-sons_stripped.timings inline-multi-sons_stripped.scount
    inline-multi-sons_stripped.dcount)
  (deps inline-multi-sons_stripped.mly)
  (action
    (with-outputs-to inline-multi-sons_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inline-multi-sons_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inline-multi-sons_stripped.stacklang))

(rule
  (targets inline-multi-sons_stripped.cmi inline-multi-sons_stripped.mli.log)
  (deps inline-multi-sons_stripped.mli)
  (action
    (with-stdout-to inline-multi-sons_stripped.mli.dtimings
      (with-stderr-to inline-multi-sons_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c inline-multi-sons_stripped.mli)))))

(rule
  (targets inline-multi-sons_stripped.cmo inline-multi-sons_stripped.ml.log)
  (deps inline-multi-sons_stripped.ml inline-multi-sons_stripped.cmi)
  (action
    (with-stdout-to inline-multi-sons_stripped.ml.dtimings
      (with-stderr-to inline-multi-sons_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c inline-multi-sons_stripped.ml)))))

(rule (alias test)
  (action
    (diff inline-multi-sons_stripped.ml.log.exp
      inline-multi-sons_stripped.ml.log)))

(rule (target inline-position.opp.out) (deps inline-position.mly)
  (action
    (with-outputs-to inline-position.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff inline-position.opp.exp inline-position.opp.out)))

(rule
  (targets inline-position.out inline-position.automaton
    inline-position.automaton.resolved inline-position.conflicts
    inline-position.timings)
  (deps inline-position.mly)
  (action
    (with-outputs-to inline-position.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inline-position.timings %{deps})))))

(rule (alias quick) (action (diff inline-position.exp inline-position.out)))

(rule (alias quick)
  (action (diff inline-position.automaton.exp inline-position.automaton)))

(rule (alias quick)
  (action
    (diff inline-position.automaton.resolved.exp
      inline-position.automaton.resolved)))

(rule (alias quick)
  (action (diff inline-position.conflicts.exp inline-position.conflicts)))

(rule (target inline-position_stripped.mly) (deps inline-position.mly)
  (action
    (with-stderr-to inline-position_stripped.ignored
      (with-stdout-to inline-position_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inline-position_stripped.log inline-position_stripped.mli
    inline-position_stripped.ml inline-position_stripped.stacklang
    inline-position_stripped.timings inline-position_stripped.scount
    inline-position_stripped.dcount)
  (deps inline-position_stripped.mly)
  (action
    (with-outputs-to inline-position_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inline-position_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inline-position_stripped.stacklang))

(rule (targets inline-position_stripped.cmi inline-position_stripped.mli.log)
  (deps inline-position_stripped.mli)
  (action
    (with-stdout-to inline-position_stripped.mli.dtimings
      (with-stderr-to inline-position_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c inline-position_stripped.mli)))))

(rule (targets inline-position_stripped.cmo inline-position_stripped.ml.log)
  (deps inline-position_stripped.ml inline-position_stripped.cmi)
  (action
    (with-stdout-to inline-position_stripped.ml.dtimings
      (with-stderr-to inline-position_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c inline-position_stripped.ml)))))

(rule (alias test)
  (action
    (diff inline-position_stripped.ml.log.exp
      inline-position_stripped.ml.log)))

(rule (target inline-rename.opp.out) (deps inline-rename.mly)
  (action
    (with-outputs-to inline-rename.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff inline-rename.opp.exp inline-rename.opp.out)))

(rule
  (targets inline-rename.out inline-rename.automaton
    inline-rename.automaton.resolved inline-rename.conflicts
    inline-rename.timings)
  (deps inline-rename.mly)
  (action
    (with-outputs-to inline-rename.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inline-rename.timings %{deps})))))

(rule (alias quick) (action (diff inline-rename.exp inline-rename.out)))

(rule (alias quick)
  (action (diff inline-rename.automaton.exp inline-rename.automaton)))

(rule (alias quick)
  (action
    (diff inline-rename.automaton.resolved.exp
      inline-rename.automaton.resolved)))

(rule (alias quick)
  (action (diff inline-rename.conflicts.exp inline-rename.conflicts)))

(rule (target inline-rename_stripped.mly) (deps inline-rename.mly)
  (action
    (with-stderr-to inline-rename_stripped.ignored
      (with-stdout-to inline-rename_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inline-rename_stripped.log inline-rename_stripped.mli
    inline-rename_stripped.ml inline-rename_stripped.stacklang
    inline-rename_stripped.timings inline-rename_stripped.scount
    inline-rename_stripped.dcount)
  (deps inline-rename_stripped.mly)
  (action
    (with-outputs-to inline-rename_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inline-rename_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inline-rename_stripped.stacklang))

(rule (targets inline-rename_stripped.cmi inline-rename_stripped.mli.log)
  (deps inline-rename_stripped.mli)
  (action
    (with-stdout-to inline-rename_stripped.mli.dtimings
      (with-stderr-to inline-rename_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c inline-rename_stripped.mli)))))

(rule (targets inline-rename_stripped.cmo inline-rename_stripped.ml.log)
  (deps inline-rename_stripped.ml inline-rename_stripped.cmi)
  (action
    (with-stdout-to inline-rename_stripped.ml.dtimings
      (with-stderr-to inline-rename_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c inline-rename_stripped.ml)))))

(rule (alias test)
  (action
    (diff inline-rename_stripped.ml.log.exp inline-rename_stripped.ml.log)))

(rule (target inline-shift.opp.out) (deps inline-shift.mly)
  (action
    (with-outputs-to inline-shift.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff inline-shift.opp.exp inline-shift.opp.out)))

(rule
  (targets inline-shift.out inline-shift.automaton
    inline-shift.automaton.resolved inline-shift.conflicts
    inline-shift.timings)
  (deps inline-shift.mly)
  (action
    (with-outputs-to inline-shift.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inline-shift.timings %{deps})))))

(rule (alias quick) (action (diff inline-shift.exp inline-shift.out)))

(rule (alias quick)
  (action (diff inline-shift.automaton.exp inline-shift.automaton)))

(rule (alias quick)
  (action
    (diff inline-shift.automaton.resolved.exp
      inline-shift.automaton.resolved)))

(rule (alias quick)
  (action (diff inline-shift.conflicts.exp inline-shift.conflicts)))

(rule (target inline-shift_stripped.mly) (deps inline-shift.mly)
  (action
    (with-stderr-to inline-shift_stripped.ignored
      (with-stdout-to inline-shift_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inline-shift_stripped.log inline-shift_stripped.mli
    inline-shift_stripped.ml inline-shift_stripped.stacklang
    inline-shift_stripped.timings inline-shift_stripped.scount
    inline-shift_stripped.dcount)
  (deps inline-shift_stripped.mly)
  (action
    (with-outputs-to inline-shift_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inline-shift_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inline-shift_stripped.stacklang))

(rule (targets inline-shift_stripped.cmi inline-shift_stripped.mli.log)
  (deps inline-shift_stripped.mli)
  (action
    (with-stdout-to inline-shift_stripped.mli.dtimings
      (with-stderr-to inline-shift_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c inline-shift_stripped.mli)))))

(rule (targets inline-shift_stripped.cmo inline-shift_stripped.ml.log)
  (deps inline-shift_stripped.ml inline-shift_stripped.cmi)
  (action
    (with-stdout-to inline-shift_stripped.ml.dtimings
      (with-stderr-to inline-shift_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c inline-shift_stripped.ml)))))

(rule (alias test)
  (action
    (diff inline-shift_stripped.ml.log.exp inline-shift_stripped.ml.log)))

(rule (target inline-test.opp.out) (deps inline-test.mly)
  (action
    (with-outputs-to inline-test.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff inline-test.opp.exp inline-test.opp.out)))

(rule
  (targets inline-test.out inline-test.automaton
    inline-test.automaton.resolved inline-test.conflicts inline-test.timings)
  (deps inline-test.mly)
  (action
    (with-outputs-to inline-test.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inline-test.timings %{deps})))))

(rule (alias quick) (action (diff inline-test.exp inline-test.out)))

(rule (alias quick)
  (action (diff inline-test.automaton.exp inline-test.automaton)))

(rule (alias quick)
  (action
    (diff inline-test.automaton.resolved.exp inline-test.automaton.resolved)))

(rule (alias quick)
  (action (diff inline-test.conflicts.exp inline-test.conflicts)))

(rule (target inline-test_stripped.mly) (deps inline-test.mly)
  (action
    (with-stderr-to inline-test_stripped.ignored
      (with-stdout-to inline-test_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inline-test_stripped.log inline-test_stripped.mli
    inline-test_stripped.ml inline-test_stripped.stacklang
    inline-test_stripped.timings inline-test_stripped.scount
    inline-test_stripped.dcount)
  (deps inline-test_stripped.mly)
  (action
    (with-outputs-to inline-test_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inline-test_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inline-test_stripped.stacklang))

(rule (targets inline-test_stripped.cmi inline-test_stripped.mli.log)
  (deps inline-test_stripped.mli)
  (action
    (with-stdout-to inline-test_stripped.mli.dtimings
      (with-stderr-to inline-test_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c inline-test_stripped.mli)))))

(rule (targets inline-test_stripped.cmo inline-test_stripped.ml.log)
  (deps inline-test_stripped.ml inline-test_stripped.cmi)
  (action
    (with-stdout-to inline-test_stripped.ml.dtimings
      (with-stderr-to inline-test_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c inline-test_stripped.ml)))))

(rule (alias test)
  (action (diff inline-test_stripped.ml.log.exp inline-test_stripped.ml.log)))

(rule (target inline-with-dollar.opp.out) (deps inline-with-dollar.mly)
  (action
    (with-outputs-to inline-with-dollar.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff inline-with-dollar.opp.exp inline-with-dollar.opp.out)))

(rule
  (targets inline-with-dollar.out inline-with-dollar.automaton
    inline-with-dollar.automaton.resolved inline-with-dollar.conflicts
    inline-with-dollar.timings)
  (deps inline-with-dollar.mly)
  (action
    (with-outputs-to inline-with-dollar.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inline-with-dollar.timings %{deps})))))

(rule (alias quick)
  (action (diff inline-with-dollar.exp inline-with-dollar.out)))

(rule (alias quick)
  (action
    (diff inline-with-dollar.automaton.exp inline-with-dollar.automaton)))

(rule (alias quick)
  (action
    (diff inline-with-dollar.automaton.resolved.exp
      inline-with-dollar.automaton.resolved)))

(rule (alias quick)
  (action
    (diff inline-with-dollar.conflicts.exp inline-with-dollar.conflicts)))

(rule (target inline-with-dollar_stripped.mly) (deps inline-with-dollar.mly)
  (action
    (with-stderr-to inline-with-dollar_stripped.ignored
      (with-stdout-to inline-with-dollar_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inline-with-dollar_stripped.log inline-with-dollar_stripped.mli
    inline-with-dollar_stripped.ml inline-with-dollar_stripped.stacklang
    inline-with-dollar_stripped.timings inline-with-dollar_stripped.scount
    inline-with-dollar_stripped.dcount)
  (deps inline-with-dollar_stripped.mly)
  (action
    (with-outputs-to inline-with-dollar_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inline-with-dollar_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inline-with-dollar_stripped.stacklang))

(rule
  (targets inline-with-dollar_stripped.cmi
    inline-with-dollar_stripped.mli.log)
  (deps inline-with-dollar_stripped.mli)
  (action
    (with-stdout-to inline-with-dollar_stripped.mli.dtimings
      (with-stderr-to inline-with-dollar_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c inline-with-dollar_stripped.mli)))))

(rule
  (targets inline-with-dollar_stripped.cmo
    inline-with-dollar_stripped.ml.log)
  (deps inline-with-dollar_stripped.ml inline-with-dollar_stripped.cmi)
  (action
    (with-stdout-to inline-with-dollar_stripped.ml.dtimings
      (with-stderr-to inline-with-dollar_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c inline-with-dollar_stripped.ml)))))

(rule (alias test)
  (action
    (diff inline-with-dollar_stripped.ml.log.exp
      inline-with-dollar_stripped.ml.log)))

(rule (target inlined-dollar.opp.out) (deps inlined-dollar.mly)
  (action
    (with-outputs-to inlined-dollar.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff inlined-dollar.opp.exp inlined-dollar.opp.out)))

(rule
  (targets inlined-dollar.out inlined-dollar.automaton
    inlined-dollar.automaton.resolved inlined-dollar.conflicts
    inlined-dollar.timings)
  (deps inlined-dollar.mly)
  (action
    (with-outputs-to inlined-dollar.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inlined-dollar.timings %{deps})))))

(rule (alias quick) (action (diff inlined-dollar.exp inlined-dollar.out)))

(rule (alias quick)
  (action (diff inlined-dollar.automaton.exp inlined-dollar.automaton)))

(rule (alias quick)
  (action
    (diff inlined-dollar.automaton.resolved.exp
      inlined-dollar.automaton.resolved)))

(rule (alias quick)
  (action (diff inlined-dollar.conflicts.exp inlined-dollar.conflicts)))

(rule (target inlined-dollar_stripped.mly) (deps inlined-dollar.mly)
  (action
    (with-stderr-to inlined-dollar_stripped.ignored
      (with-stdout-to inlined-dollar_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inlined-dollar_stripped.log inlined-dollar_stripped.mli
    inlined-dollar_stripped.ml inlined-dollar_stripped.stacklang
    inlined-dollar_stripped.timings inlined-dollar_stripped.scount
    inlined-dollar_stripped.dcount)
  (deps inlined-dollar_stripped.mly)
  (action
    (with-outputs-to inlined-dollar_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inlined-dollar_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inlined-dollar_stripped.stacklang))

(rule (targets inlined-dollar_stripped.cmi inlined-dollar_stripped.mli.log)
  (deps inlined-dollar_stripped.mli)
  (action
    (with-stdout-to inlined-dollar_stripped.mli.dtimings
      (with-stderr-to inlined-dollar_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c inlined-dollar_stripped.mli)))))

(rule (targets inlined-dollar_stripped.cmo inlined-dollar_stripped.ml.log)
  (deps inlined-dollar_stripped.ml inlined-dollar_stripped.cmi)
  (action
    (with-stdout-to inlined-dollar_stripped.ml.dtimings
      (with-stderr-to inlined-dollar_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c inlined-dollar_stripped.ml)))))

(rule (alias test)
  (action
    (diff inlined-dollar_stripped.ml.log.exp inlined-dollar_stripped.ml.log)))

(rule (target inlining-capture.opp.out) (deps inlining-capture.mly)
  (action
    (with-outputs-to inlining-capture.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff inlining-capture.opp.exp inlining-capture.opp.out)))

(rule
  (targets inlining-capture.out inlining-capture.automaton
    inlining-capture.automaton.resolved inlining-capture.conflicts
    inlining-capture.timings)
  (deps inlining-capture.mly)
  (action
    (with-outputs-to inlining-capture.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inlining-capture.timings %{deps})))))

(rule (alias quick)
  (action (diff inlining-capture.exp inlining-capture.out)))

(rule (alias quick)
  (action (diff inlining-capture.automaton.exp inlining-capture.automaton)))

(rule (alias quick)
  (action
    (diff inlining-capture.automaton.resolved.exp
      inlining-capture.automaton.resolved)))

(rule (alias quick)
  (action (diff inlining-capture.conflicts.exp inlining-capture.conflicts)))

(rule (target inlining-capture_stripped.mly) (deps inlining-capture.mly)
  (action
    (with-stderr-to inlining-capture_stripped.ignored
      (with-stdout-to inlining-capture_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inlining-capture_stripped.log inlining-capture_stripped.mli
    inlining-capture_stripped.ml inlining-capture_stripped.stacklang
    inlining-capture_stripped.timings inlining-capture_stripped.scount
    inlining-capture_stripped.dcount)
  (deps inlining-capture_stripped.mly)
  (action
    (with-outputs-to inlining-capture_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inlining-capture_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inlining-capture_stripped.stacklang))

(rule
  (targets inlining-capture_stripped.cmi inlining-capture_stripped.mli.log)
  (deps inlining-capture_stripped.mli)
  (action
    (with-stdout-to inlining-capture_stripped.mli.dtimings
      (with-stderr-to inlining-capture_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c inlining-capture_stripped.mli)))))

(rule
  (targets inlining-capture_stripped.cmo inlining-capture_stripped.ml.log)
  (deps inlining-capture_stripped.ml inlining-capture_stripped.cmi)
  (action
    (with-stdout-to inlining-capture_stripped.ml.dtimings
      (with-stderr-to inlining-capture_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c inlining-capture_stripped.ml)))))

(rule (alias test)
  (action
    (diff inlining-capture_stripped.ml.log.exp
      inlining-capture_stripped.ml.log)))

(rule (target inliningWithSideEffects.opp.out)
  (deps inliningWithSideEffects.mly)
  (action
    (with-outputs-to inliningWithSideEffects.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff inliningWithSideEffects.opp.exp inliningWithSideEffects.opp.out)))

(rule
  (targets inliningWithSideEffects.out inliningWithSideEffects.automaton
    inliningWithSideEffects.automaton.resolved
    inliningWithSideEffects.conflicts inliningWithSideEffects.timings)
  (deps inliningWithSideEffects.mly)
  (action
    (with-outputs-to inliningWithSideEffects.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to inliningWithSideEffects.timings %{deps})))))

(rule (alias quick)
  (action (diff inliningWithSideEffects.exp inliningWithSideEffects.out)))

(rule (alias quick)
  (action
    (diff inliningWithSideEffects.automaton.exp
      inliningWithSideEffects.automaton)))

(rule (alias quick)
  (action
    (diff inliningWithSideEffects.automaton.resolved.exp
      inliningWithSideEffects.automaton.resolved)))

(rule (alias quick)
  (action
    (diff inliningWithSideEffects.conflicts.exp
      inliningWithSideEffects.conflicts)))

(rule (target inliningWithSideEffects_stripped.mly)
  (deps inliningWithSideEffects.mly)
  (action
    (with-stderr-to inliningWithSideEffects_stripped.ignored
      (with-stdout-to inliningWithSideEffects_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets inliningWithSideEffects_stripped.log
    inliningWithSideEffects_stripped.mli inliningWithSideEffects_stripped.ml
    inliningWithSideEffects_stripped.stacklang
    inliningWithSideEffects_stripped.timings
    inliningWithSideEffects_stripped.scount
    inliningWithSideEffects_stripped.dcount)
  (deps inliningWithSideEffects_stripped.mly)
  (action
    (with-outputs-to inliningWithSideEffects_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to inliningWithSideEffects_stripped.timings %{deps})))))

(alias (name quick) (deps
                      inliningWithSideEffects_stripped.stacklang))

(rule
  (targets inliningWithSideEffects_stripped.cmi
    inliningWithSideEffects_stripped.mli.log)
  (deps inliningWithSideEffects_stripped.mli)
  (action
    (with-stdout-to inliningWithSideEffects_stripped.mli.dtimings
      (with-stderr-to inliningWithSideEffects_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          inliningWithSideEffects_stripped.mli)))))

(rule
  (targets inliningWithSideEffects_stripped.cmo
    inliningWithSideEffects_stripped.ml.log)
  (deps inliningWithSideEffects_stripped.ml
    inliningWithSideEffects_stripped.cmi)
  (action
    (with-stdout-to inliningWithSideEffects_stripped.ml.dtimings
      (with-stderr-to inliningWithSideEffects_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          inliningWithSideEffects_stripped.ml)))))

(rule (alias test)
  (action
    (diff inliningWithSideEffects_stripped.ml.log.exp
      inliningWithSideEffects_stripped.ml.log)))

(rule (target issue21_longer.opp.out) (deps issue21_longer.mly)
  (action
    (with-outputs-to issue21_longer.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff issue21_longer.opp.exp issue21_longer.opp.out)))

(rule
  (targets issue21_longer.out issue21_longer.automaton
    issue21_longer.automaton.resolved issue21_longer.conflicts
    issue21_longer.timings)
  (deps issue21_longer.mly)
  (action
    (with-outputs-to issue21_longer.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to issue21_longer.timings %{deps})))))

(rule (alias quick) (action (diff issue21_longer.exp issue21_longer.out)))

(rule (alias quick)
  (action (diff issue21_longer.automaton.exp issue21_longer.automaton)))

(rule (alias quick)
  (action
    (diff issue21_longer.automaton.resolved.exp
      issue21_longer.automaton.resolved)))

(rule (alias quick)
  (action (diff issue21_longer.conflicts.exp issue21_longer.conflicts)))

(rule (target issue21_longer_stripped.mly) (deps issue21_longer.mly)
  (action
    (with-stderr-to issue21_longer_stripped.ignored
      (with-stdout-to issue21_longer_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets issue21_longer_stripped.log issue21_longer_stripped.mli
    issue21_longer_stripped.ml issue21_longer_stripped.stacklang
    issue21_longer_stripped.timings issue21_longer_stripped.scount
    issue21_longer_stripped.dcount)
  (deps issue21_longer_stripped.mly)
  (action
    (with-outputs-to issue21_longer_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to issue21_longer_stripped.timings %{deps})))))

(alias (name quick) (deps
                      issue21_longer_stripped.stacklang))

(rule (targets issue21_longer_stripped.cmi issue21_longer_stripped.mli.log)
  (deps issue21_longer_stripped.mli)
  (action
    (with-stdout-to issue21_longer_stripped.mli.dtimings
      (with-stderr-to issue21_longer_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c issue21_longer_stripped.mli)))))

(rule (targets issue21_longer_stripped.cmo issue21_longer_stripped.ml.log)
  (deps issue21_longer_stripped.ml issue21_longer_stripped.cmi)
  (action
    (with-stdout-to issue21_longer_stripped.ml.dtimings
      (with-stderr-to issue21_longer_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c issue21_longer_stripped.ml)))))

(rule (alias test)
  (action
    (diff issue21_longer_stripped.ml.log.exp issue21_longer_stripped.ml.log)))

(rule (target issue21_shorter.opp.out) (deps issue21_shorter.mly)
  (action
    (with-outputs-to issue21_shorter.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff issue21_shorter.opp.exp issue21_shorter.opp.out)))

(rule
  (targets issue21_shorter.out issue21_shorter.automaton
    issue21_shorter.automaton.resolved issue21_shorter.conflicts
    issue21_shorter.timings)
  (deps issue21_shorter.mly)
  (action
    (with-outputs-to issue21_shorter.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to issue21_shorter.timings %{deps})))))

(rule (alias quick) (action (diff issue21_shorter.exp issue21_shorter.out)))

(rule (alias quick)
  (action (diff issue21_shorter.automaton.exp issue21_shorter.automaton)))

(rule (alias quick)
  (action
    (diff issue21_shorter.automaton.resolved.exp
      issue21_shorter.automaton.resolved)))

(rule (alias quick)
  (action (diff issue21_shorter.conflicts.exp issue21_shorter.conflicts)))

(rule (target issue21_shorter_stripped.mly) (deps issue21_shorter.mly)
  (action
    (with-stderr-to issue21_shorter_stripped.ignored
      (with-stdout-to issue21_shorter_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets issue21_shorter_stripped.log issue21_shorter_stripped.mli
    issue21_shorter_stripped.ml issue21_shorter_stripped.stacklang
    issue21_shorter_stripped.timings issue21_shorter_stripped.scount
    issue21_shorter_stripped.dcount)
  (deps issue21_shorter_stripped.mly)
  (action
    (with-outputs-to issue21_shorter_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to issue21_shorter_stripped.timings %{deps})))))

(alias (name quick) (deps
                      issue21_shorter_stripped.stacklang))

(rule (targets issue21_shorter_stripped.cmi issue21_shorter_stripped.mli.log)
  (deps issue21_shorter_stripped.mli)
  (action
    (with-stdout-to issue21_shorter_stripped.mli.dtimings
      (with-stderr-to issue21_shorter_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c issue21_shorter_stripped.mli)))))

(rule (targets issue21_shorter_stripped.cmo issue21_shorter_stripped.ml.log)
  (deps issue21_shorter_stripped.ml issue21_shorter_stripped.cmi)
  (action
    (with-stdout-to issue21_shorter_stripped.ml.dtimings
      (with-stderr-to issue21_shorter_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c issue21_shorter_stripped.ml)))))

(rule (alias test)
  (action
    (diff issue21_shorter_stripped.ml.log.exp
      issue21_shorter_stripped.ml.log)))

(rule (target jasmc.opp.out) (deps jasmc.mly)
  (action
    (with-outputs-to jasmc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff jasmc.opp.exp jasmc.opp.out)))

(rule
  (targets jasmc.out jasmc.automaton jasmc.automaton.resolved jasmc.conflicts
    jasmc.timings)
  (deps jasmc.mly)
  (action
    (with-outputs-to jasmc.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to jasmc.timings %{deps})))))

(rule (alias quick) (action (diff jasmc.exp jasmc.out)))

(rule (alias quick) (action (diff jasmc.automaton.exp jasmc.automaton)))

(rule (alias quick)
  (action (diff jasmc.automaton.resolved.exp jasmc.automaton.resolved)))

(rule (alias quick) (action (diff jasmc.conflicts.exp jasmc.conflicts)))

(rule (target jasmc_stripped.mly) (deps jasmc.mly)
  (action
    (with-stderr-to jasmc_stripped.ignored
      (with-stdout-to jasmc_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets jasmc_stripped.log jasmc_stripped.mli jasmc_stripped.ml
    jasmc_stripped.stacklang jasmc_stripped.timings jasmc_stripped.scount
    jasmc_stripped.dcount)
  (deps jasmc_stripped.mly)
  (action
    (with-outputs-to jasmc_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to jasmc_stripped.timings %{deps})))))

(alias (name quick) (deps
                      jasmc_stripped.stacklang))

(rule (targets jasmc_stripped.cmi jasmc_stripped.mli.log)
  (deps jasmc_stripped.mli)
  (action
    (with-stdout-to jasmc_stripped.mli.dtimings
      (with-stderr-to jasmc_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c jasmc_stripped.mli)))))

(rule (targets jasmc_stripped.cmo jasmc_stripped.ml.log)
  (deps jasmc_stripped.ml jasmc_stripped.cmi)
  (action
    (with-stdout-to jasmc_stripped.ml.dtimings
      (with-stderr-to jasmc_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c jasmc_stripped.ml)))))

(rule (alias test)
  (action (diff jasmc_stripped.ml.log.exp jasmc_stripped.ml.log)))

(rule (target jasmin.opp.out) (deps jasmin.mly)
  (action
    (with-outputs-to jasmin.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff jasmin.opp.exp jasmin.opp.out)))

(rule
  (targets jasmin.out jasmin.automaton jasmin.automaton.resolved
    jasmin.conflicts jasmin.timings)
  (deps jasmin.mly)
  (action
    (with-outputs-to jasmin.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to jasmin.timings %{deps})))))

(rule (alias quick) (action (diff jasmin.exp jasmin.out)))

(rule (alias quick) (action (diff jasmin.automaton.exp jasmin.automaton)))

(rule (alias quick)
  (action (diff jasmin.automaton.resolved.exp jasmin.automaton.resolved)))

(rule (alias quick) (action (diff jasmin.conflicts.exp jasmin.conflicts)))

(rule (target jasmin_stripped.mly) (deps jasmin.mly)
  (action
    (with-stderr-to jasmin_stripped.ignored
      (with-stdout-to jasmin_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets jasmin_stripped.log jasmin_stripped.mli jasmin_stripped.ml
    jasmin_stripped.stacklang jasmin_stripped.timings jasmin_stripped.scount
    jasmin_stripped.dcount)
  (deps jasmin_stripped.mly)
  (action
    (with-outputs-to jasmin_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to jasmin_stripped.timings %{deps})))))

(alias (name quick) (deps
                      jasmin_stripped.stacklang))

(rule (targets jasmin_stripped.cmi jasmin_stripped.mli.log)
  (deps jasmin_stripped.mli)
  (action
    (with-stdout-to jasmin_stripped.mli.dtimings
      (with-stderr-to jasmin_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c jasmin_stripped.mli)))))

(rule (targets jasmin_stripped.cmo jasmin_stripped.ml.log)
  (deps jasmin_stripped.ml jasmin_stripped.cmi)
  (action
    (with-stdout-to jasmin_stripped.ml.dtimings
      (with-stderr-to jasmin_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c jasmin_stripped.ml)))))

(rule (alias test)
  (action (diff jasmin_stripped.ml.log.exp jasmin_stripped.ml.log)))

(rule (target java.opp.out) (deps java.mly)
  (action
    (with-outputs-to java.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff java.opp.exp java.opp.out)))

(rule
  (targets java.out java.automaton java.automaton.resolved java.conflicts
    java.timings)
  (deps java.mly)
  (action
    (with-outputs-to java.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to java.timings %{deps})))))

(rule (alias quick) (action (diff java.exp java.out)))

(rule (alias quick) (action (diff java.automaton.exp java.automaton)))

(rule (alias quick)
  (action (diff java.automaton.resolved.exp java.automaton.resolved)))

(rule (alias quick) (action (diff java.conflicts.exp java.conflicts)))

(rule (target java_stripped.mly) (deps java.mly)
  (action
    (with-stderr-to java_stripped.ignored
      (with-stdout-to java_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets java_stripped.log java_stripped.mli java_stripped.ml
    java_stripped.stacklang java_stripped.timings java_stripped.scount
    java_stripped.dcount)
  (deps java_stripped.mly)
  (action
    (with-outputs-to java_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to java_stripped.timings %{deps})))))

(alias (name quick) (deps
                      java_stripped.stacklang))

(rule (targets java_stripped.cmi java_stripped.mli.log)
  (deps java_stripped.mli)
  (action
    (with-stdout-to java_stripped.mli.dtimings
      (with-stderr-to java_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c java_stripped.mli)))))

(rule (targets java_stripped.cmo java_stripped.ml.log)
  (deps java_stripped.ml java_stripped.cmi)
  (action
    (with-stdout-to java_stripped.ml.dtimings
      (with-stderr-to java_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c java_stripped.ml)))))

(rule (alias test)
  (action (diff java_stripped.ml.log.exp java_stripped.ml.log)))

(rule (target jingoo.1.2.9-jg_parser.opp.out)
  (deps jingoo.1.2.9-jg_parser.mly)
  (action
    (with-outputs-to jingoo.1.2.9-jg_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff jingoo.1.2.9-jg_parser.opp.exp jingoo.1.2.9-jg_parser.opp.out)))

(rule
  (targets jingoo.1.2.9-jg_parser.out jingoo.1.2.9-jg_parser.automaton
    jingoo.1.2.9-jg_parser.automaton.resolved
    jingoo.1.2.9-jg_parser.conflicts jingoo.1.2.9-jg_parser.timings)
  (deps jingoo.1.2.9-jg_parser.mly)
  (action
    (with-outputs-to jingoo.1.2.9-jg_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to jingoo.1.2.9-jg_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff jingoo.1.2.9-jg_parser.exp jingoo.1.2.9-jg_parser.out)))

(rule (alias quick)
  (action
    (diff jingoo.1.2.9-jg_parser.automaton.exp
      jingoo.1.2.9-jg_parser.automaton)))

(rule (alias quick)
  (action
    (diff jingoo.1.2.9-jg_parser.automaton.resolved.exp
      jingoo.1.2.9-jg_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff jingoo.1.2.9-jg_parser.conflicts.exp
      jingoo.1.2.9-jg_parser.conflicts)))

(rule (target jingoo_1_2_9-jg_parser_stripped.mly)
  (deps jingoo.1.2.9-jg_parser.mly)
  (action
    (with-stderr-to jingoo_1_2_9-jg_parser_stripped.ignored
      (with-stdout-to jingoo_1_2_9-jg_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets jingoo_1_2_9-jg_parser_stripped.log
    jingoo_1_2_9-jg_parser_stripped.mli jingoo_1_2_9-jg_parser_stripped.ml
    jingoo_1_2_9-jg_parser_stripped.stacklang
    jingoo_1_2_9-jg_parser_stripped.timings
    jingoo_1_2_9-jg_parser_stripped.scount
    jingoo_1_2_9-jg_parser_stripped.dcount)
  (deps jingoo_1_2_9-jg_parser_stripped.mly)
  (action
    (with-outputs-to jingoo_1_2_9-jg_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to jingoo_1_2_9-jg_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      jingoo_1_2_9-jg_parser_stripped.stacklang))

(rule
  (targets jingoo_1_2_9-jg_parser_stripped.cmi
    jingoo_1_2_9-jg_parser_stripped.mli.log)
  (deps jingoo_1_2_9-jg_parser_stripped.mli)
  (action
    (with-stdout-to jingoo_1_2_9-jg_parser_stripped.mli.dtimings
      (with-stderr-to jingoo_1_2_9-jg_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          jingoo_1_2_9-jg_parser_stripped.mli)))))

(rule
  (targets jingoo_1_2_9-jg_parser_stripped.cmo
    jingoo_1_2_9-jg_parser_stripped.ml.log)
  (deps jingoo_1_2_9-jg_parser_stripped.ml
    jingoo_1_2_9-jg_parser_stripped.cmi)
  (action
    (with-stdout-to jingoo_1_2_9-jg_parser_stripped.ml.dtimings
      (with-stderr-to jingoo_1_2_9-jg_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          jingoo_1_2_9-jg_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff jingoo_1_2_9-jg_parser_stripped.ml.log.exp
      jingoo_1_2_9-jg_parser_stripped.ml.log)))

(rule (target jml.opp.out) (deps jml.mly)
  (action
    (with-outputs-to jml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff jml.opp.exp jml.opp.out)))

(rule
  (targets jml.out jml.automaton jml.automaton.resolved jml.conflicts
    jml.timings)
  (deps jml.mly)
  (action
    (with-outputs-to jml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to jml.timings %{deps})))))

(rule (alias quick) (action (diff jml.exp jml.out)))

(rule (alias quick) (action (diff jml.automaton.exp jml.automaton)))

(rule (alias quick)
  (action (diff jml.automaton.resolved.exp jml.automaton.resolved)))

(rule (alias quick) (action (diff jml.conflicts.exp jml.conflicts)))

(rule (target jml_stripped.mly) (deps jml.mly)
  (action
    (with-stderr-to jml_stripped.ignored
      (with-stdout-to jml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets jml_stripped.log jml_stripped.mli jml_stripped.ml
    jml_stripped.stacklang jml_stripped.timings jml_stripped.scount
    jml_stripped.dcount)
  (deps jml_stripped.mly)
  (action
    (with-outputs-to jml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to jml_stripped.timings %{deps})))))

(alias (name quick) (deps
                      jml_stripped.stacklang))

(rule (targets jml_stripped.cmi jml_stripped.mli.log) (deps jml_stripped.mli)
  (action
    (with-stdout-to jml_stripped.mli.dtimings
      (with-stderr-to jml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c jml_stripped.mli)))))

(rule (targets jml_stripped.cmo jml_stripped.ml.log)
  (deps jml_stripped.ml jml_stripped.cmi)
  (action
    (with-stdout-to jml_stripped.ml.dtimings
      (with-stderr-to jml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c jml_stripped.ml)))))

(rule (alias test)
  (action (diff jml_stripped.ml.log.exp jml_stripped.ml.log)))

(rule (target jocaml.opp.out) (deps jocaml.mly)
  (action
    (with-outputs-to jocaml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff jocaml.opp.exp jocaml.opp.out)))

(rule
  (targets jocaml.out jocaml.automaton jocaml.automaton.resolved
    jocaml.conflicts jocaml.timings)
  (deps jocaml.mly)
  (action
    (with-outputs-to jocaml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to jocaml.timings %{deps})))))

(rule (alias quick) (action (diff jocaml.exp jocaml.out)))

(rule (alias quick) (action (diff jocaml.automaton.exp jocaml.automaton)))

(rule (alias quick)
  (action (diff jocaml.automaton.resolved.exp jocaml.automaton.resolved)))

(rule (alias quick) (action (diff jocaml.conflicts.exp jocaml.conflicts)))

(rule (target jocaml_stripped.mly) (deps jocaml.mly)
  (action
    (with-stderr-to jocaml_stripped.ignored
      (with-stdout-to jocaml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets jocaml_stripped.log jocaml_stripped.mli jocaml_stripped.ml
    jocaml_stripped.stacklang jocaml_stripped.timings jocaml_stripped.scount
    jocaml_stripped.dcount)
  (deps jocaml_stripped.mly)
  (action
    (with-outputs-to jocaml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to jocaml_stripped.timings %{deps})))))

(alias (name quick) (deps
                      jocaml_stripped.stacklang))

(rule (targets jocaml_stripped.cmi jocaml_stripped.mli.log)
  (deps jocaml_stripped.mli)
  (action
    (with-stdout-to jocaml_stripped.mli.dtimings
      (with-stderr-to jocaml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c jocaml_stripped.mli)))))

(rule (targets jocaml_stripped.cmo jocaml_stripped.ml.log)
  (deps jocaml_stripped.ml jocaml_stripped.cmi)
  (action
    (with-stdout-to jocaml_stripped.ml.dtimings
      (with-stderr-to jocaml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c jocaml_stripped.ml)))))

(rule (alias test)
  (action (diff jocaml_stripped.ml.log.exp jocaml_stripped.ml.log)))

(rule (target jocaml-ambients.opp.out) (deps jocaml-ambients.mly)
  (action
    (with-outputs-to jocaml-ambients.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff jocaml-ambients.opp.exp jocaml-ambients.opp.out)))

(rule
  (targets jocaml-ambients.out jocaml-ambients.automaton
    jocaml-ambients.automaton.resolved jocaml-ambients.conflicts
    jocaml-ambients.timings)
  (deps jocaml-ambients.mly)
  (action
    (with-outputs-to jocaml-ambients.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to jocaml-ambients.timings %{deps})))))

(rule (alias quick) (action (diff jocaml-ambients.exp jocaml-ambients.out)))

(rule (alias quick)
  (action (diff jocaml-ambients.automaton.exp jocaml-ambients.automaton)))

(rule (alias quick)
  (action
    (diff jocaml-ambients.automaton.resolved.exp
      jocaml-ambients.automaton.resolved)))

(rule (alias quick)
  (action (diff jocaml-ambients.conflicts.exp jocaml-ambients.conflicts)))

(rule (target jocaml-ambients_stripped.mly) (deps jocaml-ambients.mly)
  (action
    (with-stderr-to jocaml-ambients_stripped.ignored
      (with-stdout-to jocaml-ambients_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets jocaml-ambients_stripped.log jocaml-ambients_stripped.mli
    jocaml-ambients_stripped.ml jocaml-ambients_stripped.stacklang
    jocaml-ambients_stripped.timings jocaml-ambients_stripped.scount
    jocaml-ambients_stripped.dcount)
  (deps jocaml-ambients_stripped.mly)
  (action
    (with-outputs-to jocaml-ambients_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to jocaml-ambients_stripped.timings %{deps})))))

(alias (name quick) (deps
                      jocaml-ambients_stripped.stacklang))

(rule (targets jocaml-ambients_stripped.cmi jocaml-ambients_stripped.mli.log)
  (deps jocaml-ambients_stripped.mli)
  (action
    (with-stdout-to jocaml-ambients_stripped.mli.dtimings
      (with-stderr-to jocaml-ambients_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c jocaml-ambients_stripped.mli)))))

(rule (targets jocaml-ambients_stripped.cmo jocaml-ambients_stripped.ml.log)
  (deps jocaml-ambients_stripped.ml jocaml-ambients_stripped.cmi)
  (action
    (with-stdout-to jocaml-ambients_stripped.ml.dtimings
      (with-stderr-to jocaml-ambients_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c jocaml-ambients_stripped.ml)))))

(rule (alias test)
  (action
    (diff jocaml-ambients_stripped.ml.log.exp
      jocaml-ambients_stripped.ml.log)))

(rule (target jocaml-new-parser.opp.out) (deps jocaml-new-parser.mly)
  (action
    (with-outputs-to jocaml-new-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff jocaml-new-parser.opp.exp jocaml-new-parser.opp.out)))

(rule
  (targets jocaml-new-parser.out jocaml-new-parser.automaton
    jocaml-new-parser.automaton.resolved jocaml-new-parser.conflicts
    jocaml-new-parser.timings)
  (deps jocaml-new-parser.mly)
  (action
    (with-outputs-to jocaml-new-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to jocaml-new-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff jocaml-new-parser.exp jocaml-new-parser.out)))

(rule (alias quick)
  (action (diff jocaml-new-parser.automaton.exp jocaml-new-parser.automaton)))

(rule (alias quick)
  (action
    (diff jocaml-new-parser.automaton.resolved.exp
      jocaml-new-parser.automaton.resolved)))

(rule (alias quick)
  (action (diff jocaml-new-parser.conflicts.exp jocaml-new-parser.conflicts)))

(rule (target jocaml-new-parser_stripped.mly) (deps jocaml-new-parser.mly)
  (action
    (with-stderr-to jocaml-new-parser_stripped.ignored
      (with-stdout-to jocaml-new-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets jocaml-new-parser_stripped.log jocaml-new-parser_stripped.mli
    jocaml-new-parser_stripped.ml jocaml-new-parser_stripped.stacklang
    jocaml-new-parser_stripped.timings jocaml-new-parser_stripped.scount
    jocaml-new-parser_stripped.dcount)
  (deps jocaml-new-parser_stripped.mly)
  (action
    (with-outputs-to jocaml-new-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to jocaml-new-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      jocaml-new-parser_stripped.stacklang))

(rule
  (targets jocaml-new-parser_stripped.cmi jocaml-new-parser_stripped.mli.log)
  (deps jocaml-new-parser_stripped.mli)
  (action
    (with-stdout-to jocaml-new-parser_stripped.mli.dtimings
      (with-stderr-to jocaml-new-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c jocaml-new-parser_stripped.mli)))))

(rule
  (targets jocaml-new-parser_stripped.cmo jocaml-new-parser_stripped.ml.log)
  (deps jocaml-new-parser_stripped.ml jocaml-new-parser_stripped.cmi)
  (action
    (with-stdout-to jocaml-new-parser_stripped.ml.dtimings
      (with-stderr-to jocaml-new-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c jocaml-new-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff jocaml-new-parser_stripped.ml.log.exp
      jocaml-new-parser_stripped.ml.log)))

(rule (target joe_parser2.opp.out) (deps joe_parser2.mly)
  (action
    (with-outputs-to joe_parser2.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff joe_parser2.opp.exp joe_parser2.opp.out)))

(rule
  (targets joe_parser2.out joe_parser2.automaton
    joe_parser2.automaton.resolved joe_parser2.conflicts joe_parser2.timings)
  (deps joe_parser2.mly)
  (action
    (with-outputs-to joe_parser2.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to joe_parser2.timings %{deps})))))

(rule (alias quick) (action (diff joe_parser2.exp joe_parser2.out)))

(rule (alias quick)
  (action (diff joe_parser2.automaton.exp joe_parser2.automaton)))

(rule (alias quick)
  (action
    (diff joe_parser2.automaton.resolved.exp joe_parser2.automaton.resolved)))

(rule (alias quick)
  (action (diff joe_parser2.conflicts.exp joe_parser2.conflicts)))

(rule (target joe_parser2_stripped.mly) (deps joe_parser2.mly)
  (action
    (with-stderr-to joe_parser2_stripped.ignored
      (with-stdout-to joe_parser2_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets joe_parser2_stripped.log joe_parser2_stripped.mli
    joe_parser2_stripped.ml joe_parser2_stripped.stacklang
    joe_parser2_stripped.timings joe_parser2_stripped.scount
    joe_parser2_stripped.dcount)
  (deps joe_parser2_stripped.mly)
  (action
    (with-outputs-to joe_parser2_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to joe_parser2_stripped.timings %{deps})))))

(alias (name quick) (deps
                      joe_parser2_stripped.stacklang))

(rule (targets joe_parser2_stripped.cmi joe_parser2_stripped.mli.log)
  (deps joe_parser2_stripped.mli)
  (action
    (with-stdout-to joe_parser2_stripped.mli.dtimings
      (with-stderr-to joe_parser2_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c joe_parser2_stripped.mli)))))

(rule (targets joe_parser2_stripped.cmo joe_parser2_stripped.ml.log)
  (deps joe_parser2_stripped.ml joe_parser2_stripped.cmi)
  (action
    (with-stdout-to joe_parser2_stripped.ml.dtimings
      (with-stderr-to joe_parser2_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c joe_parser2_stripped.ml)))))

(rule (alias test)
  (action (diff joe_parser2_stripped.ml.log.exp joe_parser2_stripped.ml.log)))

(rule (target jparser.opp.out) (deps jparser.mly)
  (action
    (with-outputs-to jparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff jparser.opp.exp jparser.opp.out)))

(rule
  (targets jparser.out jparser.automaton jparser.automaton.resolved
    jparser.conflicts jparser.timings)
  (deps jparser.mly)
  (action
    (with-outputs-to jparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to jparser.timings %{deps})))))

(rule (alias quick) (action (diff jparser.exp jparser.out)))

(rule (alias quick) (action (diff jparser.automaton.exp jparser.automaton)))

(rule (alias quick)
  (action (diff jparser.automaton.resolved.exp jparser.automaton.resolved)))

(rule (alias quick) (action (diff jparser.conflicts.exp jparser.conflicts)))

(rule (target jparser_stripped.mly) (deps jparser.mly)
  (action
    (with-stderr-to jparser_stripped.ignored
      (with-stdout-to jparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets jparser_stripped.log jparser_stripped.mli jparser_stripped.ml
    jparser_stripped.stacklang jparser_stripped.timings
    jparser_stripped.scount jparser_stripped.dcount)
  (deps jparser_stripped.mly)
  (action
    (with-outputs-to jparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to jparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      jparser_stripped.stacklang))

(rule (targets jparser_stripped.cmi jparser_stripped.mli.log)
  (deps jparser_stripped.mli)
  (action
    (with-stdout-to jparser_stripped.mli.dtimings
      (with-stderr-to jparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c jparser_stripped.mli)))))

(rule (targets jparser_stripped.cmo jparser_stripped.ml.log)
  (deps jparser_stripped.ml jparser_stripped.cmi)
  (action
    (with-stdout-to jparser_stripped.ml.dtimings
      (with-stderr-to jparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c jparser_stripped.ml)))))

(rule (alias test)
  (action (diff jparser_stripped.ml.log.exp jparser_stripped.ml.log)))

(rule (target js_of_ocaml.3.2.0-js_parser.opp.out)
  (deps js_of_ocaml.3.2.0-js_parser.mly)
  (action
    (with-outputs-to js_of_ocaml.3.2.0-js_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.opp.exp
      js_of_ocaml.3.2.0-js_parser.opp.out)))

(rule
  (targets js_of_ocaml.3.2.0-js_parser.out
    js_of_ocaml.3.2.0-js_parser.automaton
    js_of_ocaml.3.2.0-js_parser.automaton.resolved
    js_of_ocaml.3.2.0-js_parser.conflicts
    js_of_ocaml.3.2.0-js_parser.timings)
  (deps js_of_ocaml.3.2.0-js_parser.mly)
  (action
    (with-outputs-to js_of_ocaml.3.2.0-js_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to js_of_ocaml.3.2.0-js_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.exp js_of_ocaml.3.2.0-js_parser.out)))

(rule (alias quick)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.automaton.exp
      js_of_ocaml.3.2.0-js_parser.automaton)))

(rule (alias quick)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.automaton.resolved.exp
      js_of_ocaml.3.2.0-js_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.conflicts.exp
      js_of_ocaml.3.2.0-js_parser.conflicts)))

(rule (target js_of_ocaml_3_2_0-js_parser_stripped.mly)
  (deps js_of_ocaml.3.2.0-js_parser.mly)
  (action
    (with-stderr-to js_of_ocaml_3_2_0-js_parser_stripped.ignored
      (with-stdout-to js_of_ocaml_3_2_0-js_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets js_of_ocaml_3_2_0-js_parser_stripped.log
    js_of_ocaml_3_2_0-js_parser_stripped.mli
    js_of_ocaml_3_2_0-js_parser_stripped.ml
    js_of_ocaml_3_2_0-js_parser_stripped.stacklang
    js_of_ocaml_3_2_0-js_parser_stripped.timings
    js_of_ocaml_3_2_0-js_parser_stripped.scount
    js_of_ocaml_3_2_0-js_parser_stripped.dcount)
  (deps js_of_ocaml_3_2_0-js_parser_stripped.mly)
  (action
    (with-outputs-to js_of_ocaml_3_2_0-js_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to js_of_ocaml_3_2_0-js_parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      js_of_ocaml_3_2_0-js_parser_stripped.stacklang))

(rule
  (targets js_of_ocaml_3_2_0-js_parser_stripped.cmi
    js_of_ocaml_3_2_0-js_parser_stripped.mli.log)
  (deps js_of_ocaml_3_2_0-js_parser_stripped.mli)
  (action
    (with-stdout-to js_of_ocaml_3_2_0-js_parser_stripped.mli.dtimings
      (with-stderr-to js_of_ocaml_3_2_0-js_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          js_of_ocaml_3_2_0-js_parser_stripped.mli)))))

(rule
  (targets js_of_ocaml_3_2_0-js_parser_stripped.cmo
    js_of_ocaml_3_2_0-js_parser_stripped.ml.log)
  (deps js_of_ocaml_3_2_0-js_parser_stripped.ml
    js_of_ocaml_3_2_0-js_parser_stripped.cmi)
  (action
    (with-stdout-to js_of_ocaml_3_2_0-js_parser_stripped.ml.dtimings
      (with-stderr-to js_of_ocaml_3_2_0-js_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          js_of_ocaml_3_2_0-js_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff js_of_ocaml_3_2_0-js_parser_stripped.ml.log.exp
      js_of_ocaml_3_2_0-js_parser_stripped.ml.log)))

(rule (target judicael.opp.out) (deps judicael.mly)
  (action
    (with-outputs-to judicael.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff judicael.opp.exp judicael.opp.out)))

(rule
  (targets judicael.out judicael.automaton judicael.automaton.resolved
    judicael.conflicts judicael.timings)
  (deps judicael.mly)
  (action
    (with-outputs-to judicael.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to judicael.timings %{deps})))))

(rule (alias quick) (action (diff judicael.exp judicael.out)))

(rule (alias quick)
  (action (diff judicael.automaton.exp judicael.automaton)))

(rule (alias quick)
  (action (diff judicael.automaton.resolved.exp judicael.automaton.resolved)))

(rule (alias quick)
  (action (diff judicael.conflicts.exp judicael.conflicts)))

(rule (target judicael_stripped.mly) (deps judicael.mly)
  (action
    (with-stderr-to judicael_stripped.ignored
      (with-stdout-to judicael_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets judicael_stripped.log judicael_stripped.mli judicael_stripped.ml
    judicael_stripped.stacklang judicael_stripped.timings
    judicael_stripped.scount judicael_stripped.dcount)
  (deps judicael_stripped.mly)
  (action
    (with-outputs-to judicael_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to judicael_stripped.timings %{deps})))))

(alias (name quick) (deps
                      judicael_stripped.stacklang))

(rule (targets judicael_stripped.cmi judicael_stripped.mli.log)
  (deps judicael_stripped.mli)
  (action
    (with-stdout-to judicael_stripped.mli.dtimings
      (with-stderr-to judicael_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c judicael_stripped.mli)))))

(rule (targets judicael_stripped.cmo judicael_stripped.ml.log)
  (deps judicael_stripped.ml judicael_stripped.cmi)
  (action
    (with-stdout-to judicael_stripped.ml.dtimings
      (with-stderr-to judicael_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c judicael_stripped.ml)))))

(rule (alias test)
  (action (diff judicael_stripped.ml.log.exp judicael_stripped.ml.log)))

(rule (target julia.opp.out) (deps julia.mly)
  (action
    (with-outputs-to julia.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff julia.opp.exp julia.opp.out)))

(rule
  (targets julia.out julia.automaton julia.automaton.resolved julia.conflicts
    julia.timings)
  (deps julia.mly)
  (action
    (with-outputs-to julia.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to julia.timings %{deps})))))

(rule (alias quick) (action (diff julia.exp julia.out)))

(rule (alias quick) (action (diff julia.automaton.exp julia.automaton)))

(rule (alias quick)
  (action (diff julia.automaton.resolved.exp julia.automaton.resolved)))

(rule (alias quick) (action (diff julia.conflicts.exp julia.conflicts)))

(rule (target julia_stripped.mly) (deps julia.mly)
  (action
    (with-stderr-to julia_stripped.ignored
      (with-stdout-to julia_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets julia_stripped.log julia_stripped.mli julia_stripped.ml
    julia_stripped.stacklang julia_stripped.timings julia_stripped.scount
    julia_stripped.dcount)
  (deps julia_stripped.mly)
  (action
    (with-outputs-to julia_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to julia_stripped.timings %{deps})))))

(alias (name quick) (deps
                      julia_stripped.stacklang))

(rule (targets julia_stripped.cmi julia_stripped.mli.log)
  (deps julia_stripped.mli)
  (action
    (with-stdout-to julia_stripped.mli.dtimings
      (with-stderr-to julia_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c julia_stripped.mli)))))

(rule (targets julia_stripped.cmo julia_stripped.ml.log)
  (deps julia_stripped.ml julia_stripped.cmi)
  (action
    (with-stdout-to julia_stripped.ml.dtimings
      (with-stderr-to julia_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c julia_stripped.ml)))))

(rule (alias test)
  (action (diff julia_stripped.ml.log.exp julia_stripped.ml.log)))

(rule (target ketti.opp.out) (deps ketti.mly)
  (action
    (with-outputs-to ketti.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff ketti.opp.exp ketti.opp.out)))

(rule
  (targets ketti.out ketti.automaton ketti.automaton.resolved ketti.conflicts
    ketti.timings)
  (deps ketti.mly)
  (action
    (with-outputs-to ketti.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ketti.timings %{deps})))))

(rule (alias quick) (action (diff ketti.exp ketti.out)))

(rule (alias quick) (action (diff ketti.automaton.exp ketti.automaton)))

(rule (alias quick)
  (action (diff ketti.automaton.resolved.exp ketti.automaton.resolved)))

(rule (alias quick) (action (diff ketti.conflicts.exp ketti.conflicts)))

(rule (target ketti_stripped.mly) (deps ketti.mly)
  (action
    (with-stderr-to ketti_stripped.ignored
      (with-stdout-to ketti_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ketti_stripped.log ketti_stripped.mli ketti_stripped.ml
    ketti_stripped.stacklang ketti_stripped.timings ketti_stripped.scount
    ketti_stripped.dcount)
  (deps ketti_stripped.mly)
  (action
    (with-outputs-to ketti_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ketti_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ketti_stripped.stacklang))

(rule (targets ketti_stripped.cmi ketti_stripped.mli.log)
  (deps ketti_stripped.mli)
  (action
    (with-stdout-to ketti_stripped.mli.dtimings
      (with-stderr-to ketti_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ketti_stripped.mli)))))

(rule (targets ketti_stripped.cmo ketti_stripped.ml.log)
  (deps ketti_stripped.ml ketti_stripped.cmi)
  (action
    (with-stdout-to ketti_stripped.ml.dtimings
      (with-stderr-to ketti_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ketti_stripped.ml)))))

(rule (alias test)
  (action (diff ketti_stripped.ml.log.exp ketti_stripped.ml.log)))

(rule (target kimmit.opp.out) (deps kimmit.mly)
  (action
    (with-outputs-to kimmit.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff kimmit.opp.exp kimmit.opp.out)))

(rule
  (targets kimmit.out kimmit.automaton kimmit.automaton.resolved
    kimmit.conflicts kimmit.timings)
  (deps kimmit.mly)
  (action
    (with-outputs-to kimmit.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to kimmit.timings %{deps})))))

(rule (alias quick) (action (diff kimmit.exp kimmit.out)))

(rule (alias quick) (action (diff kimmit.automaton.exp kimmit.automaton)))

(rule (alias quick)
  (action (diff kimmit.automaton.resolved.exp kimmit.automaton.resolved)))

(rule (alias quick) (action (diff kimmit.conflicts.exp kimmit.conflicts)))

(rule (target kimmit_stripped.mly) (deps kimmit.mly)
  (action
    (with-stderr-to kimmit_stripped.ignored
      (with-stdout-to kimmit_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets kimmit_stripped.log kimmit_stripped.mli kimmit_stripped.ml
    kimmit_stripped.stacklang kimmit_stripped.timings kimmit_stripped.scount
    kimmit_stripped.dcount)
  (deps kimmit_stripped.mly)
  (action
    (with-outputs-to kimmit_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to kimmit_stripped.timings %{deps})))))

(alias (name quick) (deps
                      kimmit_stripped.stacklang))

(rule (targets kimmit_stripped.cmi kimmit_stripped.mli.log)
  (deps kimmit_stripped.mli)
  (action
    (with-stdout-to kimmit_stripped.mli.dtimings
      (with-stderr-to kimmit_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c kimmit_stripped.mli)))))

(rule (targets kimmit_stripped.cmo kimmit_stripped.ml.log)
  (deps kimmit_stripped.ml kimmit_stripped.cmi)
  (action
    (with-stdout-to kimmit_stripped.ml.dtimings
      (with-stderr-to kimmit_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c kimmit_stripped.ml)))))

(rule (alias test)
  (action (diff kimmit_stripped.ml.log.exp kimmit_stripped.ml.log)))

(rule (target kremlin.0.9.6.0-parser.opp.out)
  (deps kremlin.0.9.6.0-parser.mly)
  (action
    (with-outputs-to kremlin.0.9.6.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff kremlin.0.9.6.0-parser.opp.exp kremlin.0.9.6.0-parser.opp.out)))

(rule
  (targets kremlin.0.9.6.0-parser.out kremlin.0.9.6.0-parser.automaton
    kremlin.0.9.6.0-parser.automaton.resolved
    kremlin.0.9.6.0-parser.conflicts kremlin.0.9.6.0-parser.timings)
  (deps kremlin.0.9.6.0-parser.mly)
  (action
    (with-outputs-to kremlin.0.9.6.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to kremlin.0.9.6.0-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff kremlin.0.9.6.0-parser.exp kremlin.0.9.6.0-parser.out)))

(rule (alias quick)
  (action
    (diff kremlin.0.9.6.0-parser.automaton.exp
      kremlin.0.9.6.0-parser.automaton)))

(rule (alias quick)
  (action
    (diff kremlin.0.9.6.0-parser.automaton.resolved.exp
      kremlin.0.9.6.0-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff kremlin.0.9.6.0-parser.conflicts.exp
      kremlin.0.9.6.0-parser.conflicts)))

(rule (target kremlin_0_9_6_0-parser_stripped.mly)
  (deps kremlin.0.9.6.0-parser.mly)
  (action
    (with-stderr-to kremlin_0_9_6_0-parser_stripped.ignored
      (with-stdout-to kremlin_0_9_6_0-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets kremlin_0_9_6_0-parser_stripped.log
    kremlin_0_9_6_0-parser_stripped.mli kremlin_0_9_6_0-parser_stripped.ml
    kremlin_0_9_6_0-parser_stripped.stacklang
    kremlin_0_9_6_0-parser_stripped.timings
    kremlin_0_9_6_0-parser_stripped.scount
    kremlin_0_9_6_0-parser_stripped.dcount)
  (deps kremlin_0_9_6_0-parser_stripped.mly)
  (action
    (with-outputs-to kremlin_0_9_6_0-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to kremlin_0_9_6_0-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      kremlin_0_9_6_0-parser_stripped.stacklang))

(rule
  (targets kremlin_0_9_6_0-parser_stripped.cmi
    kremlin_0_9_6_0-parser_stripped.mli.log)
  (deps kremlin_0_9_6_0-parser_stripped.mli)
  (action
    (with-stdout-to kremlin_0_9_6_0-parser_stripped.mli.dtimings
      (with-stderr-to kremlin_0_9_6_0-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          kremlin_0_9_6_0-parser_stripped.mli)))))

(rule
  (targets kremlin_0_9_6_0-parser_stripped.cmo
    kremlin_0_9_6_0-parser_stripped.ml.log)
  (deps kremlin_0_9_6_0-parser_stripped.ml
    kremlin_0_9_6_0-parser_stripped.cmi)
  (action
    (with-stdout-to kremlin_0_9_6_0-parser_stripped.ml.dtimings
      (with-stderr-to kremlin_0_9_6_0-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          kremlin_0_9_6_0-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff kremlin_0_9_6_0-parser_stripped.ml.log.exp
      kremlin_0_9_6_0-parser_stripped.ml.log)))

(rule (target labltk-compiler.opp.out) (deps labltk-compiler.mly)
  (action
    (with-outputs-to labltk-compiler.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff labltk-compiler.opp.exp labltk-compiler.opp.out)))

(rule
  (targets labltk-compiler.out labltk-compiler.automaton
    labltk-compiler.automaton.resolved labltk-compiler.conflicts
    labltk-compiler.timings)
  (deps labltk-compiler.mly)
  (action
    (with-outputs-to labltk-compiler.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to labltk-compiler.timings %{deps})))))

(rule (alias quick) (action (diff labltk-compiler.exp labltk-compiler.out)))

(rule (alias quick)
  (action (diff labltk-compiler.automaton.exp labltk-compiler.automaton)))

(rule (alias quick)
  (action
    (diff labltk-compiler.automaton.resolved.exp
      labltk-compiler.automaton.resolved)))

(rule (alias quick)
  (action (diff labltk-compiler.conflicts.exp labltk-compiler.conflicts)))

(rule (target labltk-compiler_stripped.mly) (deps labltk-compiler.mly)
  (action
    (with-stderr-to labltk-compiler_stripped.ignored
      (with-stdout-to labltk-compiler_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets labltk-compiler_stripped.log labltk-compiler_stripped.mli
    labltk-compiler_stripped.ml labltk-compiler_stripped.stacklang
    labltk-compiler_stripped.timings labltk-compiler_stripped.scount
    labltk-compiler_stripped.dcount)
  (deps labltk-compiler_stripped.mly)
  (action
    (with-outputs-to labltk-compiler_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to labltk-compiler_stripped.timings %{deps})))))

(alias (name quick) (deps
                      labltk-compiler_stripped.stacklang))

(rule (targets labltk-compiler_stripped.cmi labltk-compiler_stripped.mli.log)
  (deps labltk-compiler_stripped.mli)
  (action
    (with-stdout-to labltk-compiler_stripped.mli.dtimings
      (with-stderr-to labltk-compiler_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c labltk-compiler_stripped.mli)))))

(rule (targets labltk-compiler_stripped.cmo labltk-compiler_stripped.ml.log)
  (deps labltk-compiler_stripped.ml labltk-compiler_stripped.cmi)
  (action
    (with-stdout-to labltk-compiler_stripped.ml.dtimings
      (with-stderr-to labltk-compiler_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c labltk-compiler_stripped.ml)))))

(rule (alias test)
  (action
    (diff labltk-compiler_stripped.ml.log.exp
      labltk-compiler_stripped.ml.log)))

(rule (target labltk-ppyac.opp.out) (deps labltk-ppyac.mly)
  (action
    (with-outputs-to labltk-ppyac.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff labltk-ppyac.opp.exp labltk-ppyac.opp.out)))

(rule
  (targets labltk-ppyac.out labltk-ppyac.automaton
    labltk-ppyac.automaton.resolved labltk-ppyac.conflicts
    labltk-ppyac.timings)
  (deps labltk-ppyac.mly)
  (action
    (with-outputs-to labltk-ppyac.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to labltk-ppyac.timings %{deps})))))

(rule (alias quick) (action (diff labltk-ppyac.exp labltk-ppyac.out)))

(rule (alias quick)
  (action (diff labltk-ppyac.automaton.exp labltk-ppyac.automaton)))

(rule (alias quick)
  (action
    (diff labltk-ppyac.automaton.resolved.exp
      labltk-ppyac.automaton.resolved)))

(rule (alias quick)
  (action (diff labltk-ppyac.conflicts.exp labltk-ppyac.conflicts)))

(rule (target labltk-ppyac_stripped.mly) (deps labltk-ppyac.mly)
  (action
    (with-stderr-to labltk-ppyac_stripped.ignored
      (with-stdout-to labltk-ppyac_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets labltk-ppyac_stripped.log labltk-ppyac_stripped.mli
    labltk-ppyac_stripped.ml labltk-ppyac_stripped.stacklang
    labltk-ppyac_stripped.timings labltk-ppyac_stripped.scount
    labltk-ppyac_stripped.dcount)
  (deps labltk-ppyac_stripped.mly)
  (action
    (with-outputs-to labltk-ppyac_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to labltk-ppyac_stripped.timings %{deps})))))

(alias (name quick) (deps
                      labltk-ppyac_stripped.stacklang))

(rule (targets labltk-ppyac_stripped.cmi labltk-ppyac_stripped.mli.log)
  (deps labltk-ppyac_stripped.mli)
  (action
    (with-stdout-to labltk-ppyac_stripped.mli.dtimings
      (with-stderr-to labltk-ppyac_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c labltk-ppyac_stripped.mli)))))

(rule (targets labltk-ppyac_stripped.cmo labltk-ppyac_stripped.ml.log)
  (deps labltk-ppyac_stripped.ml labltk-ppyac_stripped.cmi)
  (action
    (with-stdout-to labltk-ppyac_stripped.ml.dtimings
      (with-stderr-to labltk-ppyac_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c labltk-ppyac_stripped.ml)))))

(rule (alias test)
  (action
    (diff labltk-ppyac_stripped.ml.log.exp labltk-ppyac_stripped.ml.log)))

(rule (target labrys.0.1-parser.opp.out) (deps labrys.0.1-parser.mly)
  (action
    (with-outputs-to labrys.0.1-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff labrys.0.1-parser.opp.exp labrys.0.1-parser.opp.out)))

(rule
  (targets labrys.0.1-parser.out labrys.0.1-parser.automaton
    labrys.0.1-parser.automaton.resolved labrys.0.1-parser.conflicts
    labrys.0.1-parser.timings)
  (deps labrys.0.1-parser.mly)
  (action
    (with-outputs-to labrys.0.1-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to labrys.0.1-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff labrys.0.1-parser.exp labrys.0.1-parser.out)))

(rule (alias quick)
  (action (diff labrys.0.1-parser.automaton.exp labrys.0.1-parser.automaton)))

(rule (alias quick)
  (action
    (diff labrys.0.1-parser.automaton.resolved.exp
      labrys.0.1-parser.automaton.resolved)))

(rule (alias quick)
  (action (diff labrys.0.1-parser.conflicts.exp labrys.0.1-parser.conflicts)))

(rule (target labrys_0_1-parser_stripped.mly) (deps labrys.0.1-parser.mly)
  (action
    (with-stderr-to labrys_0_1-parser_stripped.ignored
      (with-stdout-to labrys_0_1-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets labrys_0_1-parser_stripped.log labrys_0_1-parser_stripped.mli
    labrys_0_1-parser_stripped.ml labrys_0_1-parser_stripped.stacklang
    labrys_0_1-parser_stripped.timings labrys_0_1-parser_stripped.scount
    labrys_0_1-parser_stripped.dcount)
  (deps labrys_0_1-parser_stripped.mly)
  (action
    (with-outputs-to labrys_0_1-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to labrys_0_1-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      labrys_0_1-parser_stripped.stacklang))

(rule
  (targets labrys_0_1-parser_stripped.cmi labrys_0_1-parser_stripped.mli.log)
  (deps labrys_0_1-parser_stripped.mli)
  (action
    (with-stdout-to labrys_0_1-parser_stripped.mli.dtimings
      (with-stderr-to labrys_0_1-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c labrys_0_1-parser_stripped.mli)))))

(rule
  (targets labrys_0_1-parser_stripped.cmo labrys_0_1-parser_stripped.ml.log)
  (deps labrys_0_1-parser_stripped.ml labrys_0_1-parser_stripped.cmi)
  (action
    (with-stdout-to labrys_0_1-parser_stripped.ml.dtimings
      (with-stderr-to labrys_0_1-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c labrys_0_1-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff labrys_0_1-parser_stripped.ml.log.exp
      labrys_0_1-parser_stripped.ml.log)))

(rule (target lambdapi.1.0-menhir_parser.opp.out)
  (deps lambdapi.1.0-menhir_parser.mly)
  (action
    (with-outputs-to lambdapi.1.0-menhir_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff lambdapi.1.0-menhir_parser.opp.exp
      lambdapi.1.0-menhir_parser.opp.out)))

(rule
  (targets lambdapi.1.0-menhir_parser.out
    lambdapi.1.0-menhir_parser.automaton
    lambdapi.1.0-menhir_parser.automaton.resolved
    lambdapi.1.0-menhir_parser.conflicts lambdapi.1.0-menhir_parser.timings)
  (deps lambdapi.1.0-menhir_parser.mly)
  (action
    (with-outputs-to lambdapi.1.0-menhir_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to lambdapi.1.0-menhir_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff lambdapi.1.0-menhir_parser.exp lambdapi.1.0-menhir_parser.out)))

(rule (alias quick)
  (action
    (diff lambdapi.1.0-menhir_parser.automaton.exp
      lambdapi.1.0-menhir_parser.automaton)))

(rule (alias quick)
  (action
    (diff lambdapi.1.0-menhir_parser.automaton.resolved.exp
      lambdapi.1.0-menhir_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff lambdapi.1.0-menhir_parser.conflicts.exp
      lambdapi.1.0-menhir_parser.conflicts)))

(rule (target lambdapi_1_0-menhir_parser_stripped.mly)
  (deps lambdapi.1.0-menhir_parser.mly)
  (action
    (with-stderr-to lambdapi_1_0-menhir_parser_stripped.ignored
      (with-stdout-to lambdapi_1_0-menhir_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets lambdapi_1_0-menhir_parser_stripped.log
    lambdapi_1_0-menhir_parser_stripped.mli
    lambdapi_1_0-menhir_parser_stripped.ml
    lambdapi_1_0-menhir_parser_stripped.stacklang
    lambdapi_1_0-menhir_parser_stripped.timings
    lambdapi_1_0-menhir_parser_stripped.scount
    lambdapi_1_0-menhir_parser_stripped.dcount)
  (deps lambdapi_1_0-menhir_parser_stripped.mly)
  (action
    (with-outputs-to lambdapi_1_0-menhir_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to lambdapi_1_0-menhir_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      lambdapi_1_0-menhir_parser_stripped.stacklang))

(rule
  (targets lambdapi_1_0-menhir_parser_stripped.cmi
    lambdapi_1_0-menhir_parser_stripped.mli.log)
  (deps lambdapi_1_0-menhir_parser_stripped.mli)
  (action
    (with-stdout-to lambdapi_1_0-menhir_parser_stripped.mli.dtimings
      (with-stderr-to lambdapi_1_0-menhir_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          lambdapi_1_0-menhir_parser_stripped.mli)))))

(rule
  (targets lambdapi_1_0-menhir_parser_stripped.cmo
    lambdapi_1_0-menhir_parser_stripped.ml.log)
  (deps lambdapi_1_0-menhir_parser_stripped.ml
    lambdapi_1_0-menhir_parser_stripped.cmi)
  (action
    (with-stdout-to lambdapi_1_0-menhir_parser_stripped.ml.dtimings
      (with-stderr-to lambdapi_1_0-menhir_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          lambdapi_1_0-menhir_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff lambdapi_1_0-menhir_parser_stripped.ml.log.exp
      lambdapi_1_0-menhir_parser_stripped.ml.log)))

(rule (target lambdoc_rlambtex_parser.opp.out)
  (deps lambdoc_rlambtex_parser.mly)
  (action
    (with-outputs-to lambdoc_rlambtex_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff lambdoc_rlambtex_parser.opp.exp lambdoc_rlambtex_parser.opp.out)))

(rule
  (targets lambdoc_rlambtex_parser.out lambdoc_rlambtex_parser.automaton
    lambdoc_rlambtex_parser.automaton.resolved
    lambdoc_rlambtex_parser.conflicts lambdoc_rlambtex_parser.timings)
  (deps lambdoc_rlambtex_parser.mly)
  (action
    (with-outputs-to lambdoc_rlambtex_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to lambdoc_rlambtex_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff lambdoc_rlambtex_parser.exp lambdoc_rlambtex_parser.out)))

(rule (alias quick)
  (action
    (diff lambdoc_rlambtex_parser.automaton.exp
      lambdoc_rlambtex_parser.automaton)))

(rule (alias quick)
  (action
    (diff lambdoc_rlambtex_parser.automaton.resolved.exp
      lambdoc_rlambtex_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff lambdoc_rlambtex_parser.conflicts.exp
      lambdoc_rlambtex_parser.conflicts)))

(rule (target lambdoc_rlambtex_parser_stripped.mly)
  (deps lambdoc_rlambtex_parser.mly)
  (action
    (with-stderr-to lambdoc_rlambtex_parser_stripped.ignored
      (with-stdout-to lambdoc_rlambtex_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets lambdoc_rlambtex_parser_stripped.log
    lambdoc_rlambtex_parser_stripped.mli lambdoc_rlambtex_parser_stripped.ml
    lambdoc_rlambtex_parser_stripped.stacklang
    lambdoc_rlambtex_parser_stripped.timings
    lambdoc_rlambtex_parser_stripped.scount
    lambdoc_rlambtex_parser_stripped.dcount)
  (deps lambdoc_rlambtex_parser_stripped.mly)
  (action
    (with-outputs-to lambdoc_rlambtex_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to lambdoc_rlambtex_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      lambdoc_rlambtex_parser_stripped.stacklang))

(rule
  (targets lambdoc_rlambtex_parser_stripped.cmi
    lambdoc_rlambtex_parser_stripped.mli.log)
  (deps lambdoc_rlambtex_parser_stripped.mli)
  (action
    (with-stdout-to lambdoc_rlambtex_parser_stripped.mli.dtimings
      (with-stderr-to lambdoc_rlambtex_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          lambdoc_rlambtex_parser_stripped.mli)))))

(rule
  (targets lambdoc_rlambtex_parser_stripped.cmo
    lambdoc_rlambtex_parser_stripped.ml.log)
  (deps lambdoc_rlambtex_parser_stripped.ml
    lambdoc_rlambtex_parser_stripped.cmi)
  (action
    (with-stdout-to lambdoc_rlambtex_parser_stripped.ml.dtimings
      (with-stderr-to lambdoc_rlambtex_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          lambdoc_rlambtex_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff lambdoc_rlambtex_parser_stripped.ml.log.exp
      lambdoc_rlambtex_parser_stripped.ml.log)))

(rule (target ldap.2.4.0-ldap_filterparser.opp.out)
  (deps ldap.2.4.0-ldap_filterparser.mly)
  (action
    (with-outputs-to ldap.2.4.0-ldap_filterparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff ldap.2.4.0-ldap_filterparser.opp.exp
      ldap.2.4.0-ldap_filterparser.opp.out)))

(rule
  (targets ldap.2.4.0-ldap_filterparser.out
    ldap.2.4.0-ldap_filterparser.automaton
    ldap.2.4.0-ldap_filterparser.automaton.resolved
    ldap.2.4.0-ldap_filterparser.conflicts
    ldap.2.4.0-ldap_filterparser.timings)
  (deps ldap.2.4.0-ldap_filterparser.mly)
  (action
    (with-outputs-to ldap.2.4.0-ldap_filterparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ldap.2.4.0-ldap_filterparser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff ldap.2.4.0-ldap_filterparser.exp ldap.2.4.0-ldap_filterparser.out)))

(rule (alias quick)
  (action
    (diff ldap.2.4.0-ldap_filterparser.automaton.exp
      ldap.2.4.0-ldap_filterparser.automaton)))

(rule (alias quick)
  (action
    (diff ldap.2.4.0-ldap_filterparser.automaton.resolved.exp
      ldap.2.4.0-ldap_filterparser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff ldap.2.4.0-ldap_filterparser.conflicts.exp
      ldap.2.4.0-ldap_filterparser.conflicts)))

(rule (target ldap_2_4_0-ldap_filterparser_stripped.mly)
  (deps ldap.2.4.0-ldap_filterparser.mly)
  (action
    (with-stderr-to ldap_2_4_0-ldap_filterparser_stripped.ignored
      (with-stdout-to ldap_2_4_0-ldap_filterparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ldap_2_4_0-ldap_filterparser_stripped.log
    ldap_2_4_0-ldap_filterparser_stripped.mli
    ldap_2_4_0-ldap_filterparser_stripped.ml
    ldap_2_4_0-ldap_filterparser_stripped.stacklang
    ldap_2_4_0-ldap_filterparser_stripped.timings
    ldap_2_4_0-ldap_filterparser_stripped.scount
    ldap_2_4_0-ldap_filterparser_stripped.dcount)
  (deps ldap_2_4_0-ldap_filterparser_stripped.mly)
  (action
    (with-outputs-to ldap_2_4_0-ldap_filterparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ldap_2_4_0-ldap_filterparser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      ldap_2_4_0-ldap_filterparser_stripped.stacklang))

(rule
  (targets ldap_2_4_0-ldap_filterparser_stripped.cmi
    ldap_2_4_0-ldap_filterparser_stripped.mli.log)
  (deps ldap_2_4_0-ldap_filterparser_stripped.mli)
  (action
    (with-stdout-to ldap_2_4_0-ldap_filterparser_stripped.mli.dtimings
      (with-stderr-to ldap_2_4_0-ldap_filterparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          ldap_2_4_0-ldap_filterparser_stripped.mli)))))

(rule
  (targets ldap_2_4_0-ldap_filterparser_stripped.cmo
    ldap_2_4_0-ldap_filterparser_stripped.ml.log)
  (deps ldap_2_4_0-ldap_filterparser_stripped.ml
    ldap_2_4_0-ldap_filterparser_stripped.cmi)
  (action
    (with-stdout-to ldap_2_4_0-ldap_filterparser_stripped.ml.dtimings
      (with-stderr-to ldap_2_4_0-ldap_filterparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          ldap_2_4_0-ldap_filterparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff ldap_2_4_0-ldap_filterparser_stripped.ml.log.exp
      ldap_2_4_0-ldap_filterparser_stripped.ml.log)))

(rule (target leap_ExprParser.opp.out) (deps leap_ExprParser.mly)
  (action
    (with-outputs-to leap_ExprParser.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:leap_ExprParser.flags}
          %{deps})))))

(rule (alias quick)
  (action (diff leap_ExprParser.opp.exp leap_ExprParser.opp.out)))

(rule
  (targets leap_ExprParser.out leap_ExprParser.automaton
    leap_ExprParser.automaton.resolved leap_ExprParser.conflicts
    leap_ExprParser.timings)
  (deps leap_ExprParser.mly)
  (action
    (with-outputs-to leap_ExprParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to leap_ExprParser.timings
          %{read-lines:leap_ExprParser.flags} %{deps})))))

(rule (alias quick) (action (diff leap_ExprParser.exp leap_ExprParser.out)))

(rule (alias quick)
  (action (diff leap_ExprParser.automaton.exp leap_ExprParser.automaton)))

(rule (alias quick)
  (action
    (diff leap_ExprParser.automaton.resolved.exp
      leap_ExprParser.automaton.resolved)))

(rule (alias quick)
  (action (diff leap_ExprParser.conflicts.exp leap_ExprParser.conflicts)))

(rule (target leap_ExprParser_stripped.mly) (deps leap_ExprParser.mly)
  (action
    (with-stderr-to leap_ExprParser_stripped.ignored
      (with-stdout-to leap_ExprParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu
            %{read-lines:leap_ExprParser.flags} %{deps}))))))

(rule
  (targets leap_ExprParser_stripped.log leap_ExprParser_stripped.mli
    leap_ExprParser_stripped.ml leap_ExprParser_stripped.stacklang
    leap_ExprParser_stripped.timings leap_ExprParser_stripped.scount
    leap_ExprParser_stripped.dcount)
  (deps leap_ExprParser_stripped.mly)
  (action
    (with-outputs-to leap_ExprParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to leap_ExprParser_stripped.timings
          %{read-lines:leap_ExprParser.flags} %{deps})))))

(alias (name quick) (deps
                      leap_ExprParser_stripped.stacklang))

(rule (targets leap_ExprParser_stripped.cmi leap_ExprParser_stripped.mli.log)
  (deps leap_ExprParser_stripped.mli)
  (action
    (with-stdout-to leap_ExprParser_stripped.mli.dtimings
      (with-stderr-to leap_ExprParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c leap_ExprParser_stripped.mli)))))

(rule (targets leap_ExprParser_stripped.cmo leap_ExprParser_stripped.ml.log)
  (deps leap_ExprParser_stripped.ml leap_ExprParser_stripped.cmi)
  (action
    (with-stdout-to leap_ExprParser_stripped.ml.dtimings
      (with-stderr-to leap_ExprParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c leap_ExprParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff leap_ExprParser_stripped.ml.log.exp
      leap_ExprParser_stripped.ml.log)))

(rule (target leap_IGraphParser.opp.out) (deps leap_IGraphParser.mly)
  (action
    (with-outputs-to leap_IGraphParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff leap_IGraphParser.opp.exp leap_IGraphParser.opp.out)))

(rule
  (targets leap_IGraphParser.out leap_IGraphParser.automaton
    leap_IGraphParser.automaton.resolved leap_IGraphParser.conflicts
    leap_IGraphParser.timings)
  (deps leap_IGraphParser.mly)
  (action
    (with-outputs-to leap_IGraphParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to leap_IGraphParser.timings %{deps})))))

(rule (alias quick)
  (action (diff leap_IGraphParser.exp leap_IGraphParser.out)))

(rule (alias quick)
  (action (diff leap_IGraphParser.automaton.exp leap_IGraphParser.automaton)))

(rule (alias quick)
  (action
    (diff leap_IGraphParser.automaton.resolved.exp
      leap_IGraphParser.automaton.resolved)))

(rule (alias quick)
  (action (diff leap_IGraphParser.conflicts.exp leap_IGraphParser.conflicts)))

(rule (target leap_IGraphParser_stripped.mly) (deps leap_IGraphParser.mly)
  (action
    (with-stderr-to leap_IGraphParser_stripped.ignored
      (with-stdout-to leap_IGraphParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets leap_IGraphParser_stripped.log leap_IGraphParser_stripped.mli
    leap_IGraphParser_stripped.ml leap_IGraphParser_stripped.stacklang
    leap_IGraphParser_stripped.timings leap_IGraphParser_stripped.scount
    leap_IGraphParser_stripped.dcount)
  (deps leap_IGraphParser_stripped.mly)
  (action
    (with-outputs-to leap_IGraphParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to leap_IGraphParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      leap_IGraphParser_stripped.stacklang))

(rule
  (targets leap_IGraphParser_stripped.cmi leap_IGraphParser_stripped.mli.log)
  (deps leap_IGraphParser_stripped.mli)
  (action
    (with-stdout-to leap_IGraphParser_stripped.mli.dtimings
      (with-stderr-to leap_IGraphParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c leap_IGraphParser_stripped.mli)))))

(rule
  (targets leap_IGraphParser_stripped.cmo leap_IGraphParser_stripped.ml.log)
  (deps leap_IGraphParser_stripped.ml leap_IGraphParser_stripped.cmi)
  (action
    (with-stdout-to leap_IGraphParser_stripped.ml.dtimings
      (with-stderr-to leap_IGraphParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c leap_IGraphParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff leap_IGraphParser_stripped.ml.log.exp
      leap_IGraphParser_stripped.ml.log)))

(rule (target leap_SpecParser.opp.out) (deps leap_SpecParser.mly)
  (action
    (with-outputs-to leap_SpecParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff leap_SpecParser.opp.exp leap_SpecParser.opp.out)))

(rule
  (targets leap_SpecParser.out leap_SpecParser.automaton
    leap_SpecParser.automaton.resolved leap_SpecParser.conflicts
    leap_SpecParser.timings)
  (deps leap_SpecParser.mly)
  (action
    (with-outputs-to leap_SpecParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to leap_SpecParser.timings %{deps})))))

(rule (alias quick) (action (diff leap_SpecParser.exp leap_SpecParser.out)))

(rule (alias quick)
  (action (diff leap_SpecParser.automaton.exp leap_SpecParser.automaton)))

(rule (alias quick)
  (action
    (diff leap_SpecParser.automaton.resolved.exp
      leap_SpecParser.automaton.resolved)))

(rule (alias quick)
  (action (diff leap_SpecParser.conflicts.exp leap_SpecParser.conflicts)))

(rule (target leap_SpecParser_stripped.mly) (deps leap_SpecParser.mly)
  (action
    (with-stderr-to leap_SpecParser_stripped.ignored
      (with-stdout-to leap_SpecParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets leap_SpecParser_stripped.log leap_SpecParser_stripped.mli
    leap_SpecParser_stripped.ml leap_SpecParser_stripped.stacklang
    leap_SpecParser_stripped.timings leap_SpecParser_stripped.scount
    leap_SpecParser_stripped.dcount)
  (deps leap_SpecParser_stripped.mly)
  (action
    (with-outputs-to leap_SpecParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to leap_SpecParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      leap_SpecParser_stripped.stacklang))

(rule (targets leap_SpecParser_stripped.cmi leap_SpecParser_stripped.mli.log)
  (deps leap_SpecParser_stripped.mli)
  (action
    (with-stdout-to leap_SpecParser_stripped.mli.dtimings
      (with-stderr-to leap_SpecParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c leap_SpecParser_stripped.mli)))))

(rule (targets leap_SpecParser_stripped.cmo leap_SpecParser_stripped.ml.log)
  (deps leap_SpecParser_stripped.ml leap_SpecParser_stripped.cmi)
  (action
    (with-stdout-to leap_SpecParser_stripped.ml.dtimings
      (with-stderr-to leap_SpecParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c leap_SpecParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff leap_SpecParser_stripped.ml.log.exp
      leap_SpecParser_stripped.ml.log)))

(rule (target leap_StmParser.opp.out) (deps leap_StmParser.mly)
  (action
    (with-outputs-to leap_StmParser.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:leap_StmParser.flags}
          %{deps})))))

(rule (alias quick)
  (action (diff leap_StmParser.opp.exp leap_StmParser.opp.out)))

(rule
  (targets leap_StmParser.out leap_StmParser.automaton
    leap_StmParser.automaton.resolved leap_StmParser.conflicts
    leap_StmParser.timings)
  (deps leap_StmParser.mly)
  (action
    (with-outputs-to leap_StmParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to leap_StmParser.timings
          %{read-lines:leap_StmParser.flags} %{deps})))))

(rule (alias quick) (action (diff leap_StmParser.exp leap_StmParser.out)))

(rule (alias quick)
  (action (diff leap_StmParser.automaton.exp leap_StmParser.automaton)))

(rule (alias quick)
  (action
    (diff leap_StmParser.automaton.resolved.exp
      leap_StmParser.automaton.resolved)))

(rule (alias quick)
  (action (diff leap_StmParser.conflicts.exp leap_StmParser.conflicts)))

(rule (target leap_StmParser_stripped.mly) (deps leap_StmParser.mly)
  (action
    (with-stderr-to leap_StmParser_stripped.ignored
      (with-stdout-to leap_StmParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{read-lines:leap_StmParser.flags}
            %{deps}))))))

(rule
  (targets leap_StmParser_stripped.log leap_StmParser_stripped.mli
    leap_StmParser_stripped.ml leap_StmParser_stripped.stacklang
    leap_StmParser_stripped.timings leap_StmParser_stripped.scount
    leap_StmParser_stripped.dcount)
  (deps leap_StmParser_stripped.mly)
  (action
    (with-outputs-to leap_StmParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to leap_StmParser_stripped.timings
          %{read-lines:leap_StmParser.flags} %{deps})))))

(alias (name quick) (deps
                      leap_StmParser_stripped.stacklang))

(rule (targets leap_StmParser_stripped.cmi leap_StmParser_stripped.mli.log)
  (deps leap_StmParser_stripped.mli)
  (action
    (with-stdout-to leap_StmParser_stripped.mli.dtimings
      (with-stderr-to leap_StmParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c leap_StmParser_stripped.mli)))))

(rule (targets leap_StmParser_stripped.cmo leap_StmParser_stripped.ml.log)
  (deps leap_StmParser_stripped.ml leap_StmParser_stripped.cmi)
  (action
    (with-stdout-to leap_StmParser_stripped.ml.dtimings
      (with-stderr-to leap_StmParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c leap_StmParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff leap_StmParser_stripped.ml.log.exp leap_StmParser_stripped.ml.log)))

(rule (target leap_TrsParser.opp.out) (deps leap_TrsParser.mly)
  (action
    (with-outputs-to leap_TrsParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff leap_TrsParser.opp.exp leap_TrsParser.opp.out)))

(rule
  (targets leap_TrsParser.out leap_TrsParser.automaton
    leap_TrsParser.automaton.resolved leap_TrsParser.conflicts
    leap_TrsParser.timings)
  (deps leap_TrsParser.mly)
  (action
    (with-outputs-to leap_TrsParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to leap_TrsParser.timings %{deps})))))

(rule (alias quick) (action (diff leap_TrsParser.exp leap_TrsParser.out)))

(rule (alias quick)
  (action (diff leap_TrsParser.automaton.exp leap_TrsParser.automaton)))

(rule (alias quick)
  (action
    (diff leap_TrsParser.automaton.resolved.exp
      leap_TrsParser.automaton.resolved)))

(rule (alias quick)
  (action (diff leap_TrsParser.conflicts.exp leap_TrsParser.conflicts)))

(rule (target leap_TrsParser_stripped.mly) (deps leap_TrsParser.mly)
  (action
    (with-stderr-to leap_TrsParser_stripped.ignored
      (with-stdout-to leap_TrsParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets leap_TrsParser_stripped.log leap_TrsParser_stripped.mli
    leap_TrsParser_stripped.ml leap_TrsParser_stripped.stacklang
    leap_TrsParser_stripped.timings leap_TrsParser_stripped.scount
    leap_TrsParser_stripped.dcount)
  (deps leap_TrsParser_stripped.mly)
  (action
    (with-outputs-to leap_TrsParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to leap_TrsParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      leap_TrsParser_stripped.stacklang))

(rule (targets leap_TrsParser_stripped.cmi leap_TrsParser_stripped.mli.log)
  (deps leap_TrsParser_stripped.mli)
  (action
    (with-stdout-to leap_TrsParser_stripped.mli.dtimings
      (with-stderr-to leap_TrsParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c leap_TrsParser_stripped.mli)))))

(rule (targets leap_TrsParser_stripped.cmo leap_TrsParser_stripped.ml.log)
  (deps leap_TrsParser_stripped.ml leap_TrsParser_stripped.cmi)
  (action
    (with-stdout-to leap_TrsParser_stripped.ml.dtimings
      (with-stderr-to leap_TrsParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c leap_TrsParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff leap_TrsParser_stripped.ml.log.exp leap_TrsParser_stripped.ml.log)))

(rule (target leap_YicesModelParser.opp.out) (deps leap_YicesModelParser.mly)
  (action
    (with-outputs-to leap_YicesModelParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff leap_YicesModelParser.opp.exp leap_YicesModelParser.opp.out)))

(rule
  (targets leap_YicesModelParser.out leap_YicesModelParser.automaton
    leap_YicesModelParser.automaton.resolved leap_YicesModelParser.conflicts
    leap_YicesModelParser.timings)
  (deps leap_YicesModelParser.mly)
  (action
    (with-outputs-to leap_YicesModelParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to leap_YicesModelParser.timings %{deps})))))

(rule (alias quick)
  (action (diff leap_YicesModelParser.exp leap_YicesModelParser.out)))

(rule (alias quick)
  (action
    (diff leap_YicesModelParser.automaton.exp
      leap_YicesModelParser.automaton)))

(rule (alias quick)
  (action
    (diff leap_YicesModelParser.automaton.resolved.exp
      leap_YicesModelParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff leap_YicesModelParser.conflicts.exp
      leap_YicesModelParser.conflicts)))

(rule (target leap_YicesModelParser_stripped.mly)
  (deps leap_YicesModelParser.mly)
  (action
    (with-stderr-to leap_YicesModelParser_stripped.ignored
      (with-stdout-to leap_YicesModelParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets leap_YicesModelParser_stripped.log
    leap_YicesModelParser_stripped.mli leap_YicesModelParser_stripped.ml
    leap_YicesModelParser_stripped.stacklang
    leap_YicesModelParser_stripped.timings
    leap_YicesModelParser_stripped.scount
    leap_YicesModelParser_stripped.dcount)
  (deps leap_YicesModelParser_stripped.mly)
  (action
    (with-outputs-to leap_YicesModelParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to leap_YicesModelParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      leap_YicesModelParser_stripped.stacklang))

(rule
  (targets leap_YicesModelParser_stripped.cmi
    leap_YicesModelParser_stripped.mli.log)
  (deps leap_YicesModelParser_stripped.mli)
  (action
    (with-stdout-to leap_YicesModelParser_stripped.mli.dtimings
      (with-stderr-to leap_YicesModelParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          leap_YicesModelParser_stripped.mli)))))

(rule
  (targets leap_YicesModelParser_stripped.cmo
    leap_YicesModelParser_stripped.ml.log)
  (deps leap_YicesModelParser_stripped.ml leap_YicesModelParser_stripped.cmi)
  (action
    (with-stdout-to leap_YicesModelParser_stripped.ml.dtimings
      (with-stderr-to leap_YicesModelParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          leap_YicesModelParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff leap_YicesModelParser_stripped.ml.log.exp
      leap_YicesModelParser_stripped.ml.log)))

(rule (target leap_Z3ModelParser.opp.out) (deps leap_Z3ModelParser.mly)
  (action
    (with-outputs-to leap_Z3ModelParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff leap_Z3ModelParser.opp.exp leap_Z3ModelParser.opp.out)))

(rule
  (targets leap_Z3ModelParser.out leap_Z3ModelParser.automaton
    leap_Z3ModelParser.automaton.resolved leap_Z3ModelParser.conflicts
    leap_Z3ModelParser.timings)
  (deps leap_Z3ModelParser.mly)
  (action
    (with-outputs-to leap_Z3ModelParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to leap_Z3ModelParser.timings %{deps})))))

(rule (alias quick)
  (action (diff leap_Z3ModelParser.exp leap_Z3ModelParser.out)))

(rule (alias quick)
  (action
    (diff leap_Z3ModelParser.automaton.exp leap_Z3ModelParser.automaton)))

(rule (alias quick)
  (action
    (diff leap_Z3ModelParser.automaton.resolved.exp
      leap_Z3ModelParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff leap_Z3ModelParser.conflicts.exp leap_Z3ModelParser.conflicts)))

(rule (target leap_Z3ModelParser_stripped.mly) (deps leap_Z3ModelParser.mly)
  (action
    (with-stderr-to leap_Z3ModelParser_stripped.ignored
      (with-stdout-to leap_Z3ModelParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets leap_Z3ModelParser_stripped.log leap_Z3ModelParser_stripped.mli
    leap_Z3ModelParser_stripped.ml leap_Z3ModelParser_stripped.stacklang
    leap_Z3ModelParser_stripped.timings leap_Z3ModelParser_stripped.scount
    leap_Z3ModelParser_stripped.dcount)
  (deps leap_Z3ModelParser_stripped.mly)
  (action
    (with-outputs-to leap_Z3ModelParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to leap_Z3ModelParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      leap_Z3ModelParser_stripped.stacklang))

(rule
  (targets leap_Z3ModelParser_stripped.cmi
    leap_Z3ModelParser_stripped.mli.log)
  (deps leap_Z3ModelParser_stripped.mli)
  (action
    (with-stdout-to leap_Z3ModelParser_stripped.mli.dtimings
      (with-stderr-to leap_Z3ModelParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c leap_Z3ModelParser_stripped.mli)))))

(rule
  (targets leap_Z3ModelParser_stripped.cmo
    leap_Z3ModelParser_stripped.ml.log)
  (deps leap_Z3ModelParser_stripped.ml leap_Z3ModelParser_stripped.cmi)
  (action
    (with-stdout-to leap_Z3ModelParser_stripped.ml.dtimings
      (with-stderr-to leap_Z3ModelParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c leap_Z3ModelParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff leap_Z3ModelParser_stripped.ml.log.exp
      leap_Z3ModelParser_stripped.ml.log)))

(rule (target lem.opp.out) (deps lem.mly)
  (action
    (with-outputs-to lem.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff lem.opp.exp lem.opp.out)))

(rule
  (targets lem.out lem.automaton lem.automaton.resolved lem.conflicts
    lem.timings)
  (deps lem.mly)
  (action
    (with-outputs-to lem.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to lem.timings %{deps})))))

(rule (alias quick) (action (diff lem.exp lem.out)))

(rule (alias quick) (action (diff lem.automaton.exp lem.automaton)))

(rule (alias quick)
  (action (diff lem.automaton.resolved.exp lem.automaton.resolved)))

(rule (alias quick) (action (diff lem.conflicts.exp lem.conflicts)))

(rule (target lem_stripped.mly) (deps lem.mly)
  (action
    (with-stderr-to lem_stripped.ignored
      (with-stdout-to lem_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets lem_stripped.log lem_stripped.mli lem_stripped.ml
    lem_stripped.stacklang lem_stripped.timings lem_stripped.scount
    lem_stripped.dcount)
  (deps lem_stripped.mly)
  (action
    (with-outputs-to lem_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to lem_stripped.timings %{deps})))))

(alias (name quick) (deps
                      lem_stripped.stacklang))

(rule (targets lem_stripped.cmi lem_stripped.mli.log) (deps lem_stripped.mli)
  (action
    (with-stdout-to lem_stripped.mli.dtimings
      (with-stderr-to lem_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c lem_stripped.mli)))))

(rule (targets lem_stripped.cmo lem_stripped.ml.log)
  (deps lem_stripped.ml lem_stripped.cmi)
  (action
    (with-stdout-to lem_stripped.ml.dtimings
      (with-stderr-to lem_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c lem_stripped.ml)))))

(rule (alias test)
  (action (diff lem_stripped.ml.log.exp lem_stripped.ml.log)))

(rule (target liberty_parser.opp.out) (deps liberty_parser.mly)
  (action
    (with-outputs-to liberty_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff liberty_parser.opp.exp liberty_parser.opp.out)))

(rule
  (targets liberty_parser.out liberty_parser.automaton
    liberty_parser.automaton.resolved liberty_parser.conflicts
    liberty_parser.timings)
  (deps liberty_parser.mly)
  (action
    (with-outputs-to liberty_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to liberty_parser.timings %{deps})))))

(rule (alias quick) (action (diff liberty_parser.exp liberty_parser.out)))

(rule (alias quick)
  (action (diff liberty_parser.automaton.exp liberty_parser.automaton)))

(rule (alias quick)
  (action
    (diff liberty_parser.automaton.resolved.exp
      liberty_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff liberty_parser.conflicts.exp liberty_parser.conflicts)))

(rule (target liberty_parser_stripped.mly) (deps liberty_parser.mly)
  (action
    (with-stderr-to liberty_parser_stripped.ignored
      (with-stdout-to liberty_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets liberty_parser_stripped.log liberty_parser_stripped.mli
    liberty_parser_stripped.ml liberty_parser_stripped.stacklang
    liberty_parser_stripped.timings liberty_parser_stripped.scount
    liberty_parser_stripped.dcount)
  (deps liberty_parser_stripped.mly)
  (action
    (with-outputs-to liberty_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to liberty_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      liberty_parser_stripped.stacklang))

(rule (targets liberty_parser_stripped.cmi liberty_parser_stripped.mli.log)
  (deps liberty_parser_stripped.mli)
  (action
    (with-stdout-to liberty_parser_stripped.mli.dtimings
      (with-stderr-to liberty_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c liberty_parser_stripped.mli)))))

(rule (targets liberty_parser_stripped.cmo liberty_parser_stripped.ml.log)
  (deps liberty_parser_stripped.ml liberty_parser_stripped.cmi)
  (action
    (with-stdout-to liberty_parser_stripped.ml.dtimings
      (with-stderr-to liberty_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c liberty_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff liberty_parser_stripped.ml.log.exp liberty_parser_stripped.ml.log)))

(rule (target link.opp.out) (deps link.mly)
  (action
    (with-outputs-to link.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff link.opp.exp link.opp.out)))

(rule
  (targets link.out link.automaton link.automaton.resolved link.conflicts
    link.timings)
  (deps link.mly)
  (action
    (with-outputs-to link.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to link.timings %{deps})))))

(rule (alias quick) (action (diff link.exp link.out)))

(rule (alias quick) (action (diff link.automaton.exp link.automaton)))

(rule (alias quick)
  (action (diff link.automaton.resolved.exp link.automaton.resolved)))

(rule (alias quick) (action (diff link.conflicts.exp link.conflicts)))

(rule (target link_stripped.mly) (deps link.mly)
  (action
    (with-stderr-to link_stripped.ignored
      (with-stdout-to link_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets link_stripped.log link_stripped.mli link_stripped.ml
    link_stripped.stacklang link_stripped.timings link_stripped.scount
    link_stripped.dcount)
  (deps link_stripped.mly)
  (action
    (with-outputs-to link_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to link_stripped.timings %{deps})))))

(alias (name quick) (deps
                      link_stripped.stacklang))

(rule (targets link_stripped.cmi link_stripped.mli.log)
  (deps link_stripped.mli)
  (action
    (with-stdout-to link_stripped.mli.dtimings
      (with-stderr-to link_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c link_stripped.mli)))))

(rule (targets link_stripped.cmo link_stripped.ml.log)
  (deps link_stripped.ml link_stripped.cmi)
  (action
    (with-stdout-to link_stripped.ml.dtimings
      (with-stderr-to link_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c link_stripped.ml)))))

(rule (alias test)
  (action (diff link_stripped.ml.log.exp link_stripped.ml.log)))

(rule (target links.opp.out) (deps links.mly)
  (action
    (with-outputs-to links.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff links.opp.exp links.opp.out)))

(rule
  (targets links.out links.automaton links.automaton.resolved links.conflicts
    links.timings)
  (deps links.mly)
  (action
    (with-outputs-to links.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to links.timings %{deps})))))

(rule (alias quick) (action (diff links.exp links.out)))

(rule (alias quick) (action (diff links.automaton.exp links.automaton)))

(rule (alias quick)
  (action (diff links.automaton.resolved.exp links.automaton.resolved)))

(rule (alias quick) (action (diff links.conflicts.exp links.conflicts)))

(rule (target links_stripped.mly) (deps links.mly)
  (action
    (with-stderr-to links_stripped.ignored
      (with-stdout-to links_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets links_stripped.log links_stripped.mli links_stripped.ml
    links_stripped.stacklang links_stripped.timings links_stripped.scount
    links_stripped.dcount)
  (deps links_stripped.mly)
  (action
    (with-outputs-to links_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to links_stripped.timings %{deps})))))

(alias (name quick) (deps
                      links_stripped.stacklang))

(rule (targets links_stripped.cmi links_stripped.mli.log)
  (deps links_stripped.mli)
  (action
    (with-stdout-to links_stripped.mli.dtimings
      (with-stderr-to links_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c links_stripped.mli)))))

(rule (targets links_stripped.cmo links_stripped.ml.log)
  (deps links_stripped.ml links_stripped.cmi)
  (action
    (with-stdout-to links_stripped.ml.dtimings
      (with-stderr-to links_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c links_stripped.ml)))))

(rule (alias test)
  (action (diff links_stripped.ml.log.exp links_stripped.ml.log)))

(rule (target links.0.8-jsonparse.opp.out) (deps links.0.8-jsonparse.mly)
  (action
    (with-outputs-to links.0.8-jsonparse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff links.0.8-jsonparse.opp.exp links.0.8-jsonparse.opp.out)))

(rule
  (targets links.0.8-jsonparse.out links.0.8-jsonparse.automaton
    links.0.8-jsonparse.automaton.resolved links.0.8-jsonparse.conflicts
    links.0.8-jsonparse.timings)
  (deps links.0.8-jsonparse.mly)
  (action
    (with-outputs-to links.0.8-jsonparse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to links.0.8-jsonparse.timings %{deps})))))

(rule (alias quick)
  (action (diff links.0.8-jsonparse.exp links.0.8-jsonparse.out)))

(rule (alias quick)
  (action
    (diff links.0.8-jsonparse.automaton.exp links.0.8-jsonparse.automaton)))

(rule (alias quick)
  (action
    (diff links.0.8-jsonparse.automaton.resolved.exp
      links.0.8-jsonparse.automaton.resolved)))

(rule (alias quick)
  (action
    (diff links.0.8-jsonparse.conflicts.exp links.0.8-jsonparse.conflicts)))

(rule (target links_0_8-jsonparse_stripped.mly)
  (deps links.0.8-jsonparse.mly)
  (action
    (with-stderr-to links_0_8-jsonparse_stripped.ignored
      (with-stdout-to links_0_8-jsonparse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets links_0_8-jsonparse_stripped.log links_0_8-jsonparse_stripped.mli
    links_0_8-jsonparse_stripped.ml links_0_8-jsonparse_stripped.stacklang
    links_0_8-jsonparse_stripped.timings links_0_8-jsonparse_stripped.scount
    links_0_8-jsonparse_stripped.dcount)
  (deps links_0_8-jsonparse_stripped.mly)
  (action
    (with-outputs-to links_0_8-jsonparse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to links_0_8-jsonparse_stripped.timings %{deps})))))

(alias (name quick) (deps
                      links_0_8-jsonparse_stripped.stacklang))

(rule
  (targets links_0_8-jsonparse_stripped.cmi
    links_0_8-jsonparse_stripped.mli.log)
  (deps links_0_8-jsonparse_stripped.mli)
  (action
    (with-stdout-to links_0_8-jsonparse_stripped.mli.dtimings
      (with-stderr-to links_0_8-jsonparse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          links_0_8-jsonparse_stripped.mli)))))

(rule
  (targets links_0_8-jsonparse_stripped.cmo
    links_0_8-jsonparse_stripped.ml.log)
  (deps links_0_8-jsonparse_stripped.ml links_0_8-jsonparse_stripped.cmi)
  (action
    (with-stdout-to links_0_8-jsonparse_stripped.ml.dtimings
      (with-stderr-to links_0_8-jsonparse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c links_0_8-jsonparse_stripped.ml)))))

(rule (alias test)
  (action
    (diff links_0_8-jsonparse_stripped.ml.log.exp
      links_0_8-jsonparse_stripped.ml.log)))

(rule (target links.0.8-parser.opp.out) (deps links.0.8-parser.mly)
  (action
    (with-outputs-to links.0.8-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff links.0.8-parser.opp.exp links.0.8-parser.opp.out)))

(rule
  (targets links.0.8-parser.out links.0.8-parser.automaton
    links.0.8-parser.automaton.resolved links.0.8-parser.conflicts
    links.0.8-parser.timings)
  (deps links.0.8-parser.mly)
  (action
    (with-outputs-to links.0.8-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to links.0.8-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff links.0.8-parser.exp links.0.8-parser.out)))

(rule (alias quick)
  (action (diff links.0.8-parser.automaton.exp links.0.8-parser.automaton)))

(rule (alias quick)
  (action
    (diff links.0.8-parser.automaton.resolved.exp
      links.0.8-parser.automaton.resolved)))

(rule (alias quick)
  (action (diff links.0.8-parser.conflicts.exp links.0.8-parser.conflicts)))

(rule (target links_0_8-parser_stripped.mly) (deps links.0.8-parser.mly)
  (action
    (with-stderr-to links_0_8-parser_stripped.ignored
      (with-stdout-to links_0_8-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets links_0_8-parser_stripped.log links_0_8-parser_stripped.mli
    links_0_8-parser_stripped.ml links_0_8-parser_stripped.stacklang
    links_0_8-parser_stripped.timings links_0_8-parser_stripped.scount
    links_0_8-parser_stripped.dcount)
  (deps links_0_8-parser_stripped.mly)
  (action
    (with-outputs-to links_0_8-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to links_0_8-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      links_0_8-parser_stripped.stacklang))

(rule
  (targets links_0_8-parser_stripped.cmi links_0_8-parser_stripped.mli.log)
  (deps links_0_8-parser_stripped.mli)
  (action
    (with-stdout-to links_0_8-parser_stripped.mli.dtimings
      (with-stderr-to links_0_8-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c links_0_8-parser_stripped.mli)))))

(rule
  (targets links_0_8-parser_stripped.cmo links_0_8-parser_stripped.ml.log)
  (deps links_0_8-parser_stripped.ml links_0_8-parser_stripped.cmi)
  (action
    (with-stdout-to links_0_8-parser_stripped.ml.dtimings
      (with-stderr-to links_0_8-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c links_0_8-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff links_0_8-parser_stripped.ml.log.exp
      links_0_8-parser_stripped.ml.log)))

(rule (target links.0.8-xmlParser.opp.out) (deps links.0.8-xmlParser.mly)
  (action
    (with-outputs-to links.0.8-xmlParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff links.0.8-xmlParser.opp.exp links.0.8-xmlParser.opp.out)))

(rule
  (targets links.0.8-xmlParser.out links.0.8-xmlParser.automaton
    links.0.8-xmlParser.automaton.resolved links.0.8-xmlParser.conflicts
    links.0.8-xmlParser.timings)
  (deps links.0.8-xmlParser.mly)
  (action
    (with-outputs-to links.0.8-xmlParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to links.0.8-xmlParser.timings %{deps})))))

(rule (alias quick)
  (action (diff links.0.8-xmlParser.exp links.0.8-xmlParser.out)))

(rule (alias quick)
  (action
    (diff links.0.8-xmlParser.automaton.exp links.0.8-xmlParser.automaton)))

(rule (alias quick)
  (action
    (diff links.0.8-xmlParser.automaton.resolved.exp
      links.0.8-xmlParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff links.0.8-xmlParser.conflicts.exp links.0.8-xmlParser.conflicts)))

(rule (target links_0_8-xmlParser_stripped.mly)
  (deps links.0.8-xmlParser.mly)
  (action
    (with-stderr-to links_0_8-xmlParser_stripped.ignored
      (with-stdout-to links_0_8-xmlParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets links_0_8-xmlParser_stripped.log links_0_8-xmlParser_stripped.mli
    links_0_8-xmlParser_stripped.ml links_0_8-xmlParser_stripped.stacklang
    links_0_8-xmlParser_stripped.timings links_0_8-xmlParser_stripped.scount
    links_0_8-xmlParser_stripped.dcount)
  (deps links_0_8-xmlParser_stripped.mly)
  (action
    (with-outputs-to links_0_8-xmlParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to links_0_8-xmlParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      links_0_8-xmlParser_stripped.stacklang))

(rule
  (targets links_0_8-xmlParser_stripped.cmi
    links_0_8-xmlParser_stripped.mli.log)
  (deps links_0_8-xmlParser_stripped.mli)
  (action
    (with-stdout-to links_0_8-xmlParser_stripped.mli.dtimings
      (with-stderr-to links_0_8-xmlParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          links_0_8-xmlParser_stripped.mli)))))

(rule
  (targets links_0_8-xmlParser_stripped.cmo
    links_0_8-xmlParser_stripped.ml.log)
  (deps links_0_8-xmlParser_stripped.ml links_0_8-xmlParser_stripped.cmi)
  (action
    (with-stdout-to links_0_8-xmlParser_stripped.ml.dtimings
      (with-stderr-to links_0_8-xmlParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c links_0_8-xmlParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff links_0_8-xmlParser_stripped.ml.log.exp
      links_0_8-xmlParser_stripped.ml.log)))

(rule (target liquidsoap.1.3.4-lang_parser.opp.out)
  (deps liquidsoap.1.3.4-lang_parser.mly)
  (action
    (with-outputs-to liquidsoap.1.3.4-lang_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff liquidsoap.1.3.4-lang_parser.opp.exp
      liquidsoap.1.3.4-lang_parser.opp.out)))

(rule
  (targets liquidsoap.1.3.4-lang_parser.out
    liquidsoap.1.3.4-lang_parser.automaton
    liquidsoap.1.3.4-lang_parser.automaton.resolved
    liquidsoap.1.3.4-lang_parser.conflicts
    liquidsoap.1.3.4-lang_parser.timings)
  (deps liquidsoap.1.3.4-lang_parser.mly)
  (action
    (with-outputs-to liquidsoap.1.3.4-lang_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to liquidsoap.1.3.4-lang_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff liquidsoap.1.3.4-lang_parser.exp liquidsoap.1.3.4-lang_parser.out)))

(rule (alias quick)
  (action
    (diff liquidsoap.1.3.4-lang_parser.automaton.exp
      liquidsoap.1.3.4-lang_parser.automaton)))

(rule (alias quick)
  (action
    (diff liquidsoap.1.3.4-lang_parser.automaton.resolved.exp
      liquidsoap.1.3.4-lang_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff liquidsoap.1.3.4-lang_parser.conflicts.exp
      liquidsoap.1.3.4-lang_parser.conflicts)))

(rule (target liquidsoap_1_3_4-lang_parser_stripped.mly)
  (deps liquidsoap.1.3.4-lang_parser.mly)
  (action
    (with-stderr-to liquidsoap_1_3_4-lang_parser_stripped.ignored
      (with-stdout-to liquidsoap_1_3_4-lang_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets liquidsoap_1_3_4-lang_parser_stripped.log
    liquidsoap_1_3_4-lang_parser_stripped.mli
    liquidsoap_1_3_4-lang_parser_stripped.ml
    liquidsoap_1_3_4-lang_parser_stripped.stacklang
    liquidsoap_1_3_4-lang_parser_stripped.timings
    liquidsoap_1_3_4-lang_parser_stripped.scount
    liquidsoap_1_3_4-lang_parser_stripped.dcount)
  (deps liquidsoap_1_3_4-lang_parser_stripped.mly)
  (action
    (with-outputs-to liquidsoap_1_3_4-lang_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to liquidsoap_1_3_4-lang_parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      liquidsoap_1_3_4-lang_parser_stripped.stacklang))

(rule
  (targets liquidsoap_1_3_4-lang_parser_stripped.cmi
    liquidsoap_1_3_4-lang_parser_stripped.mli.log)
  (deps liquidsoap_1_3_4-lang_parser_stripped.mli)
  (action
    (with-stdout-to liquidsoap_1_3_4-lang_parser_stripped.mli.dtimings
      (with-stderr-to liquidsoap_1_3_4-lang_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          liquidsoap_1_3_4-lang_parser_stripped.mli)))))

(rule
  (targets liquidsoap_1_3_4-lang_parser_stripped.cmo
    liquidsoap_1_3_4-lang_parser_stripped.ml.log)
  (deps liquidsoap_1_3_4-lang_parser_stripped.ml
    liquidsoap_1_3_4-lang_parser_stripped.cmi)
  (action
    (with-stdout-to liquidsoap_1_3_4-lang_parser_stripped.ml.dtimings
      (with-stderr-to liquidsoap_1_3_4-lang_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          liquidsoap_1_3_4-lang_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff liquidsoap_1_3_4-lang_parser_stripped.ml.log.exp
      liquidsoap_1_3_4-lang_parser_stripped.ml.log)))

(rule (target llists.opp.out) (deps llists.mly)
  (action
    (with-outputs-to llists.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff llists.opp.exp llists.opp.out)))

(rule
  (targets llists.out llists.automaton llists.automaton.resolved
    llists.conflicts llists.timings)
  (deps llists.mly)
  (action
    (with-outputs-to llists.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to llists.timings %{deps})))))

(rule (alias quick) (action (diff llists.exp llists.out)))

(rule (alias quick) (action (diff llists.automaton.exp llists.automaton)))

(rule (alias quick)
  (action (diff llists.automaton.resolved.exp llists.automaton.resolved)))

(rule (alias quick) (action (diff llists.conflicts.exp llists.conflicts)))

(rule (target llists_stripped.mly) (deps llists.mly)
  (action
    (with-stderr-to llists_stripped.ignored
      (with-stdout-to llists_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets llists_stripped.log llists_stripped.mli llists_stripped.ml
    llists_stripped.stacklang llists_stripped.timings llists_stripped.scount
    llists_stripped.dcount)
  (deps llists_stripped.mly)
  (action
    (with-outputs-to llists_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to llists_stripped.timings %{deps})))))

(alias (name quick) (deps
                      llists_stripped.stacklang))

(rule (targets llists_stripped.cmi llists_stripped.mli.log)
  (deps llists_stripped.mli)
  (action
    (with-stdout-to llists_stripped.mli.dtimings
      (with-stderr-to llists_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c llists_stripped.mli)))))

(rule (targets llists_stripped.cmo llists_stripped.ml.log)
  (deps llists_stripped.ml llists_stripped.cmi)
  (action
    (with-stdout-to llists_stripped.ml.dtimings
      (with-stderr-to llists_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c llists_stripped.ml)))))

(rule (alias test)
  (action (diff llists_stripped.ml.log.exp llists_stripped.ml.log)))

(rule (target llparse.opp.out) (deps llparse.mly)
  (action
    (with-outputs-to llparse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff llparse.opp.exp llparse.opp.out)))

(rule
  (targets llparse.out llparse.automaton llparse.automaton.resolved
    llparse.conflicts llparse.timings)
  (deps llparse.mly)
  (action
    (with-outputs-to llparse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to llparse.timings %{deps})))))

(rule (alias quick) (action (diff llparse.exp llparse.out)))

(rule (alias quick) (action (diff llparse.automaton.exp llparse.automaton)))

(rule (alias quick)
  (action (diff llparse.automaton.resolved.exp llparse.automaton.resolved)))

(rule (alias quick) (action (diff llparse.conflicts.exp llparse.conflicts)))

(rule (target llparse_stripped.mly) (deps llparse.mly)
  (action
    (with-stderr-to llparse_stripped.ignored
      (with-stdout-to llparse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets llparse_stripped.log llparse_stripped.mli llparse_stripped.ml
    llparse_stripped.stacklang llparse_stripped.timings
    llparse_stripped.scount llparse_stripped.dcount)
  (deps llparse_stripped.mly)
  (action
    (with-outputs-to llparse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to llparse_stripped.timings %{deps})))))

(alias (name quick) (deps
                      llparse_stripped.stacklang))

(rule (targets llparse_stripped.cmi llparse_stripped.mli.log)
  (deps llparse_stripped.mli)
  (action
    (with-stdout-to llparse_stripped.mli.dtimings
      (with-stderr-to llparse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c llparse_stripped.mli)))))

(rule (targets llparse_stripped.cmo llparse_stripped.ml.log)
  (deps llparse_stripped.ml llparse_stripped.cmi)
  (action
    (with-stdout-to llparse_stripped.ml.dtimings
      (with-stderr-to llparse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c llparse_stripped.ml)))))

(rule (alias test)
  (action (diff llparse_stripped.ml.log.exp llparse_stripped.ml.log)))

(rule (target logic_parser.opp.out) (deps logic_parser.mly)
  (action
    (with-outputs-to logic_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff logic_parser.opp.exp logic_parser.opp.out)))

(rule
  (targets logic_parser.out logic_parser.automaton
    logic_parser.automaton.resolved logic_parser.conflicts
    logic_parser.timings)
  (deps logic_parser.mly)
  (action
    (with-outputs-to logic_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to logic_parser.timings %{deps})))))

(rule (alias quick) (action (diff logic_parser.exp logic_parser.out)))

(rule (alias quick)
  (action (diff logic_parser.automaton.exp logic_parser.automaton)))

(rule (alias quick)
  (action
    (diff logic_parser.automaton.resolved.exp
      logic_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff logic_parser.conflicts.exp logic_parser.conflicts)))

(rule (target logic_parser_stripped.mly) (deps logic_parser.mly)
  (action
    (with-stderr-to logic_parser_stripped.ignored
      (with-stdout-to logic_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets logic_parser_stripped.log logic_parser_stripped.mli
    logic_parser_stripped.ml logic_parser_stripped.stacklang
    logic_parser_stripped.timings logic_parser_stripped.scount
    logic_parser_stripped.dcount)
  (deps logic_parser_stripped.mly)
  (action
    (with-outputs-to logic_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to logic_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      logic_parser_stripped.stacklang))

(rule (targets logic_parser_stripped.cmi logic_parser_stripped.mli.log)
  (deps logic_parser_stripped.mli)
  (action
    (with-stdout-to logic_parser_stripped.mli.dtimings
      (with-stderr-to logic_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c logic_parser_stripped.mli)))))

(rule (targets logic_parser_stripped.cmo logic_parser_stripped.ml.log)
  (deps logic_parser_stripped.ml logic_parser_stripped.cmi)
  (action
    (with-stdout-to logic_parser_stripped.ml.dtimings
      (with-stderr-to logic_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c logic_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff logic_parser_stripped.ml.log.exp logic_parser_stripped.ml.log)))

(rule (target logtk.0.8.1-parse_theory.opp.out)
  (deps logtk.0.8.1-parse_theory.mly)
  (action
    (with-outputs-to logtk.0.8.1-parse_theory.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff logtk.0.8.1-parse_theory.opp.exp logtk.0.8.1-parse_theory.opp.out)))

(rule
  (targets logtk.0.8.1-parse_theory.out logtk.0.8.1-parse_theory.automaton
    logtk.0.8.1-parse_theory.automaton.resolved
    logtk.0.8.1-parse_theory.conflicts logtk.0.8.1-parse_theory.timings)
  (deps logtk.0.8.1-parse_theory.mly)
  (action
    (with-outputs-to logtk.0.8.1-parse_theory.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to logtk.0.8.1-parse_theory.timings %{deps})))))

(rule (alias quick)
  (action (diff logtk.0.8.1-parse_theory.exp logtk.0.8.1-parse_theory.out)))

(rule (alias quick)
  (action
    (diff logtk.0.8.1-parse_theory.automaton.exp
      logtk.0.8.1-parse_theory.automaton)))

(rule (alias quick)
  (action
    (diff logtk.0.8.1-parse_theory.automaton.resolved.exp
      logtk.0.8.1-parse_theory.automaton.resolved)))

(rule (alias quick)
  (action
    (diff logtk.0.8.1-parse_theory.conflicts.exp
      logtk.0.8.1-parse_theory.conflicts)))

(rule (target logtk_0_8_1-parse_theory_stripped.mly)
  (deps logtk.0.8.1-parse_theory.mly)
  (action
    (with-stderr-to logtk_0_8_1-parse_theory_stripped.ignored
      (with-stdout-to logtk_0_8_1-parse_theory_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets logtk_0_8_1-parse_theory_stripped.log
    logtk_0_8_1-parse_theory_stripped.mli
    logtk_0_8_1-parse_theory_stripped.ml
    logtk_0_8_1-parse_theory_stripped.stacklang
    logtk_0_8_1-parse_theory_stripped.timings
    logtk_0_8_1-parse_theory_stripped.scount
    logtk_0_8_1-parse_theory_stripped.dcount)
  (deps logtk_0_8_1-parse_theory_stripped.mly)
  (action
    (with-outputs-to logtk_0_8_1-parse_theory_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to logtk_0_8_1-parse_theory_stripped.timings %{deps})))))

(alias (name quick) (deps
                      logtk_0_8_1-parse_theory_stripped.stacklang))

(rule
  (targets logtk_0_8_1-parse_theory_stripped.cmi
    logtk_0_8_1-parse_theory_stripped.mli.log)
  (deps logtk_0_8_1-parse_theory_stripped.mli)
  (action
    (with-stdout-to logtk_0_8_1-parse_theory_stripped.mli.dtimings
      (with-stderr-to logtk_0_8_1-parse_theory_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          logtk_0_8_1-parse_theory_stripped.mli)))))

(rule
  (targets logtk_0_8_1-parse_theory_stripped.cmo
    logtk_0_8_1-parse_theory_stripped.ml.log)
  (deps logtk_0_8_1-parse_theory_stripped.ml
    logtk_0_8_1-parse_theory_stripped.cmi)
  (action
    (with-stdout-to logtk_0_8_1-parse_theory_stripped.ml.dtimings
      (with-stderr-to logtk_0_8_1-parse_theory_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          logtk_0_8_1-parse_theory_stripped.ml)))))

(rule (alias test)
  (action
    (diff logtk_0_8_1-parse_theory_stripped.ml.log.exp
      logtk_0_8_1-parse_theory_stripped.ml.log)))

(rule (target lr-but-not-lalr.opp.out) (deps lr-but-not-lalr.mly)
  (action
    (with-outputs-to lr-but-not-lalr.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff lr-but-not-lalr.opp.exp lr-but-not-lalr.opp.out)))

(rule
  (targets lr-but-not-lalr.out lr-but-not-lalr.automaton
    lr-but-not-lalr.automaton.resolved lr-but-not-lalr.conflicts
    lr-but-not-lalr.timings)
  (deps lr-but-not-lalr.mly)
  (action
    (with-outputs-to lr-but-not-lalr.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to lr-but-not-lalr.timings %{deps})))))

(rule (alias quick) (action (diff lr-but-not-lalr.exp lr-but-not-lalr.out)))

(rule (alias quick)
  (action (diff lr-but-not-lalr.automaton.exp lr-but-not-lalr.automaton)))

(rule (alias quick)
  (action
    (diff lr-but-not-lalr.automaton.resolved.exp
      lr-but-not-lalr.automaton.resolved)))

(rule (alias quick)
  (action (diff lr-but-not-lalr.conflicts.exp lr-but-not-lalr.conflicts)))

(rule (target lr-but-not-lalr_stripped.mly) (deps lr-but-not-lalr.mly)
  (action
    (with-stderr-to lr-but-not-lalr_stripped.ignored
      (with-stdout-to lr-but-not-lalr_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets lr-but-not-lalr_stripped.log lr-but-not-lalr_stripped.mli
    lr-but-not-lalr_stripped.ml lr-but-not-lalr_stripped.stacklang
    lr-but-not-lalr_stripped.timings lr-but-not-lalr_stripped.scount
    lr-but-not-lalr_stripped.dcount)
  (deps lr-but-not-lalr_stripped.mly)
  (action
    (with-outputs-to lr-but-not-lalr_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to lr-but-not-lalr_stripped.timings %{deps})))))

(alias (name quick) (deps
                      lr-but-not-lalr_stripped.stacklang))

(rule (targets lr-but-not-lalr_stripped.cmi lr-but-not-lalr_stripped.mli.log)
  (deps lr-but-not-lalr_stripped.mli)
  (action
    (with-stdout-to lr-but-not-lalr_stripped.mli.dtimings
      (with-stderr-to lr-but-not-lalr_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c lr-but-not-lalr_stripped.mli)))))

(rule (targets lr-but-not-lalr_stripped.cmo lr-but-not-lalr_stripped.ml.log)
  (deps lr-but-not-lalr_stripped.ml lr-but-not-lalr_stripped.cmi)
  (action
    (with-stdout-to lr-but-not-lalr_stripped.ml.dtimings
      (with-stderr-to lr-but-not-lalr_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c lr-but-not-lalr_stripped.ml)))))

(rule (alias test)
  (action
    (diff lr-but-not-lalr_stripped.ml.log.exp
      lr-but-not-lalr_stripped.ml.log)))

(rule (target ltlparser.opp.out) (deps ltlparser.mly)
  (action
    (with-outputs-to ltlparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff ltlparser.opp.exp ltlparser.opp.out)))

(rule
  (targets ltlparser.out ltlparser.automaton ltlparser.automaton.resolved
    ltlparser.conflicts ltlparser.timings)
  (deps ltlparser.mly)
  (action
    (with-outputs-to ltlparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ltlparser.timings %{deps})))))

(rule (alias quick) (action (diff ltlparser.exp ltlparser.out)))

(rule (alias quick)
  (action (diff ltlparser.automaton.exp ltlparser.automaton)))

(rule (alias quick)
  (action
    (diff ltlparser.automaton.resolved.exp ltlparser.automaton.resolved)))

(rule (alias quick)
  (action (diff ltlparser.conflicts.exp ltlparser.conflicts)))

(rule (target ltlparser_stripped.mly) (deps ltlparser.mly)
  (action
    (with-stderr-to ltlparser_stripped.ignored
      (with-stdout-to ltlparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ltlparser_stripped.log ltlparser_stripped.mli
    ltlparser_stripped.ml ltlparser_stripped.stacklang
    ltlparser_stripped.timings ltlparser_stripped.scount
    ltlparser_stripped.dcount)
  (deps ltlparser_stripped.mly)
  (action
    (with-outputs-to ltlparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ltlparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ltlparser_stripped.stacklang))

(rule (targets ltlparser_stripped.cmi ltlparser_stripped.mli.log)
  (deps ltlparser_stripped.mli)
  (action
    (with-stdout-to ltlparser_stripped.mli.dtimings
      (with-stderr-to ltlparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ltlparser_stripped.mli)))))

(rule (targets ltlparser_stripped.cmo ltlparser_stripped.ml.log)
  (deps ltlparser_stripped.ml ltlparser_stripped.cmi)
  (action
    (with-stdout-to ltlparser_stripped.ml.dtimings
      (with-stderr-to ltlparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ltlparser_stripped.ml)))))

(rule (alias test)
  (action (diff ltlparser_stripped.ml.log.exp ltlparser_stripped.ml.log)))

(rule (target lustre-v6.1.737-lv6parser.opp.out)
  (deps lustre-v6.1.737-lv6parser.mly)
  (action
    (with-outputs-to lustre-v6.1.737-lv6parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff lustre-v6.1.737-lv6parser.opp.exp
      lustre-v6.1.737-lv6parser.opp.out)))

(rule
  (targets lustre-v6.1.737-lv6parser.out lustre-v6.1.737-lv6parser.automaton
    lustre-v6.1.737-lv6parser.automaton.resolved
    lustre-v6.1.737-lv6parser.conflicts lustre-v6.1.737-lv6parser.timings)
  (deps lustre-v6.1.737-lv6parser.mly)
  (action
    (with-outputs-to lustre-v6.1.737-lv6parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to lustre-v6.1.737-lv6parser.timings %{deps})))))

(rule (alias quick)
  (action (diff lustre-v6.1.737-lv6parser.exp lustre-v6.1.737-lv6parser.out)))

(rule (alias quick)
  (action
    (diff lustre-v6.1.737-lv6parser.automaton.exp
      lustre-v6.1.737-lv6parser.automaton)))

(rule (alias quick)
  (action
    (diff lustre-v6.1.737-lv6parser.automaton.resolved.exp
      lustre-v6.1.737-lv6parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff lustre-v6.1.737-lv6parser.conflicts.exp
      lustre-v6.1.737-lv6parser.conflicts)))

(rule (target lustre-v6_1_737-lv6parser_stripped.mly)
  (deps lustre-v6.1.737-lv6parser.mly)
  (action
    (with-stderr-to lustre-v6_1_737-lv6parser_stripped.ignored
      (with-stdout-to lustre-v6_1_737-lv6parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets lustre-v6_1_737-lv6parser_stripped.log
    lustre-v6_1_737-lv6parser_stripped.mli
    lustre-v6_1_737-lv6parser_stripped.ml
    lustre-v6_1_737-lv6parser_stripped.stacklang
    lustre-v6_1_737-lv6parser_stripped.timings
    lustre-v6_1_737-lv6parser_stripped.scount
    lustre-v6_1_737-lv6parser_stripped.dcount)
  (deps lustre-v6_1_737-lv6parser_stripped.mly)
  (action
    (with-outputs-to lustre-v6_1_737-lv6parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to lustre-v6_1_737-lv6parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      lustre-v6_1_737-lv6parser_stripped.stacklang))

(rule
  (targets lustre-v6_1_737-lv6parser_stripped.cmi
    lustre-v6_1_737-lv6parser_stripped.mli.log)
  (deps lustre-v6_1_737-lv6parser_stripped.mli)
  (action
    (with-stdout-to lustre-v6_1_737-lv6parser_stripped.mli.dtimings
      (with-stderr-to lustre-v6_1_737-lv6parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          lustre-v6_1_737-lv6parser_stripped.mli)))))

(rule
  (targets lustre-v6_1_737-lv6parser_stripped.cmo
    lustre-v6_1_737-lv6parser_stripped.ml.log)
  (deps lustre-v6_1_737-lv6parser_stripped.ml
    lustre-v6_1_737-lv6parser_stripped.cmi)
  (action
    (with-stdout-to lustre-v6_1_737-lv6parser_stripped.ml.dtimings
      (with-stderr-to lustre-v6_1_737-lv6parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          lustre-v6_1_737-lv6parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff lustre-v6_1_737-lv6parser_stripped.ml.log.exp
      lustre-v6_1_737-lv6parser_stripped.ml.log)))

(rule (target lustreParser.opp.out) (deps lustreParser.mly)
  (action
    (with-outputs-to lustreParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff lustreParser.opp.exp lustreParser.opp.out)))

(rule
  (targets lustreParser.out lustreParser.automaton
    lustreParser.automaton.resolved lustreParser.conflicts
    lustreParser.timings)
  (deps lustreParser.mly)
  (action
    (with-outputs-to lustreParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to lustreParser.timings %{deps})))))

(rule (alias quick) (action (diff lustreParser.exp lustreParser.out)))

(rule (alias quick)
  (action (diff lustreParser.automaton.exp lustreParser.automaton)))

(rule (alias quick)
  (action
    (diff lustreParser.automaton.resolved.exp
      lustreParser.automaton.resolved)))

(rule (alias quick)
  (action (diff lustreParser.conflicts.exp lustreParser.conflicts)))

(rule (target lustreParser_stripped.mly) (deps lustreParser.mly)
  (action
    (with-stderr-to lustreParser_stripped.ignored
      (with-stdout-to lustreParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets lustreParser_stripped.log lustreParser_stripped.mli
    lustreParser_stripped.ml lustreParser_stripped.stacklang
    lustreParser_stripped.timings lustreParser_stripped.scount
    lustreParser_stripped.dcount)
  (deps lustreParser_stripped.mly)
  (action
    (with-outputs-to lustreParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to lustreParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      lustreParser_stripped.stacklang))

(rule (targets lustreParser_stripped.cmi lustreParser_stripped.mli.log)
  (deps lustreParser_stripped.mli)
  (action
    (with-stdout-to lustreParser_stripped.mli.dtimings
      (with-stderr-to lustreParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c lustreParser_stripped.mli)))))

(rule (targets lustreParser_stripped.cmo lustreParser_stripped.ml.log)
  (deps lustreParser_stripped.ml lustreParser_stripped.cmi)
  (action
    (with-stdout-to lustreParser_stripped.ml.dtimings
      (with-stderr-to lustreParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c lustreParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff lustreParser_stripped.ml.log.exp lustreParser_stripped.ml.log)))

(rule (target lutin.2.56-lutParser.opp.out) (deps lutin.2.56-lutParser.mly)
  (action
    (with-outputs-to lutin.2.56-lutParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff lutin.2.56-lutParser.opp.exp lutin.2.56-lutParser.opp.out)))

(rule
  (targets lutin.2.56-lutParser.out lutin.2.56-lutParser.automaton
    lutin.2.56-lutParser.automaton.resolved lutin.2.56-lutParser.conflicts
    lutin.2.56-lutParser.timings)
  (deps lutin.2.56-lutParser.mly)
  (action
    (with-outputs-to lutin.2.56-lutParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to lutin.2.56-lutParser.timings %{deps})))))

(rule (alias quick)
  (action (diff lutin.2.56-lutParser.exp lutin.2.56-lutParser.out)))

(rule (alias quick)
  (action
    (diff lutin.2.56-lutParser.automaton.exp lutin.2.56-lutParser.automaton)))

(rule (alias quick)
  (action
    (diff lutin.2.56-lutParser.automaton.resolved.exp
      lutin.2.56-lutParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff lutin.2.56-lutParser.conflicts.exp lutin.2.56-lutParser.conflicts)))

(rule (target lutin_2_56-lutParser_stripped.mly)
  (deps lutin.2.56-lutParser.mly)
  (action
    (with-stderr-to lutin_2_56-lutParser_stripped.ignored
      (with-stdout-to lutin_2_56-lutParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets lutin_2_56-lutParser_stripped.log
    lutin_2_56-lutParser_stripped.mli lutin_2_56-lutParser_stripped.ml
    lutin_2_56-lutParser_stripped.stacklang
    lutin_2_56-lutParser_stripped.timings
    lutin_2_56-lutParser_stripped.scount
    lutin_2_56-lutParser_stripped.dcount)
  (deps lutin_2_56-lutParser_stripped.mly)
  (action
    (with-outputs-to lutin_2_56-lutParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to lutin_2_56-lutParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      lutin_2_56-lutParser_stripped.stacklang))

(rule
  (targets lutin_2_56-lutParser_stripped.cmi
    lutin_2_56-lutParser_stripped.mli.log)
  (deps lutin_2_56-lutParser_stripped.mli)
  (action
    (with-stdout-to lutin_2_56-lutParser_stripped.mli.dtimings
      (with-stderr-to lutin_2_56-lutParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          lutin_2_56-lutParser_stripped.mli)))))

(rule
  (targets lutin_2_56-lutParser_stripped.cmo
    lutin_2_56-lutParser_stripped.ml.log)
  (deps lutin_2_56-lutParser_stripped.ml lutin_2_56-lutParser_stripped.cmi)
  (action
    (with-stdout-to lutin_2_56-lutParser_stripped.ml.dtimings
      (with-stderr-to lutin_2_56-lutParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          lutin_2_56-lutParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff lutin_2_56-lutParser_stripped.ml.log.exp
      lutin_2_56-lutParser_stripped.ml.log)))

(rule (target macrodown.opp.out) (deps macrodown.mly)
  (action
    (with-outputs-to macrodown.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff macrodown.opp.exp macrodown.opp.out)))

(rule
  (targets macrodown.out macrodown.automaton macrodown.automaton.resolved
    macrodown.conflicts macrodown.timings)
  (deps macrodown.mly)
  (action
    (with-outputs-to macrodown.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to macrodown.timings %{deps})))))

(rule (alias quick) (action (diff macrodown.exp macrodown.out)))

(rule (alias quick)
  (action (diff macrodown.automaton.exp macrodown.automaton)))

(rule (alias quick)
  (action
    (diff macrodown.automaton.resolved.exp macrodown.automaton.resolved)))

(rule (alias quick)
  (action (diff macrodown.conflicts.exp macrodown.conflicts)))

(rule (target macrodown_stripped.mly) (deps macrodown.mly)
  (action
    (with-stderr-to macrodown_stripped.ignored
      (with-stdout-to macrodown_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets macrodown_stripped.log macrodown_stripped.mli
    macrodown_stripped.ml macrodown_stripped.stacklang
    macrodown_stripped.timings macrodown_stripped.scount
    macrodown_stripped.dcount)
  (deps macrodown_stripped.mly)
  (action
    (with-outputs-to macrodown_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to macrodown_stripped.timings %{deps})))))

(alias (name quick) (deps
                      macrodown_stripped.stacklang))

(rule (targets macrodown_stripped.cmi macrodown_stripped.mli.log)
  (deps macrodown_stripped.mli)
  (action
    (with-stdout-to macrodown_stripped.mli.dtimings
      (with-stderr-to macrodown_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c macrodown_stripped.mli)))))

(rule (targets macrodown_stripped.cmo macrodown_stripped.ml.log)
  (deps macrodown_stripped.ml macrodown_stripped.cmi)
  (action
    (with-stdout-to macrodown_stripped.ml.dtimings
      (with-stderr-to macrodown_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c macrodown_stripped.ml)))))

(rule (alias test)
  (action (diff macrodown_stripped.ml.log.exp macrodown_stripped.ml.log)))

(rule (target maple.opp.out) (deps maple.mly)
  (action
    (with-outputs-to maple.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff maple.opp.exp maple.opp.out)))

(rule
  (targets maple.out maple.automaton maple.automaton.resolved maple.conflicts
    maple.timings)
  (deps maple.mly)
  (action
    (with-outputs-to maple.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to maple.timings %{deps})))))

(rule (alias quick) (action (diff maple.exp maple.out)))

(rule (alias quick) (action (diff maple.automaton.exp maple.automaton)))

(rule (alias quick)
  (action (diff maple.automaton.resolved.exp maple.automaton.resolved)))

(rule (alias quick) (action (diff maple.conflicts.exp maple.conflicts)))

(rule (target maple_stripped.mly) (deps maple.mly)
  (action
    (with-stderr-to maple_stripped.ignored
      (with-stdout-to maple_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets maple_stripped.log maple_stripped.mli maple_stripped.ml
    maple_stripped.stacklang maple_stripped.timings maple_stripped.scount
    maple_stripped.dcount)
  (deps maple_stripped.mly)
  (action
    (with-outputs-to maple_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to maple_stripped.timings %{deps})))))

(alias (name quick) (deps
                      maple_stripped.stacklang))

(rule (targets maple_stripped.cmi maple_stripped.mli.log)
  (deps maple_stripped.mli)
  (action
    (with-stdout-to maple_stripped.mli.dtimings
      (with-stderr-to maple_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c maple_stripped.mli)))))

(rule (targets maple_stripped.cmo maple_stripped.ml.log)
  (deps maple_stripped.ml maple_stripped.cmi)
  (action
    (with-stdout-to maple_stripped.ml.dtimings
      (with-stderr-to maple_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c maple_stripped.ml)))))

(rule (alias test)
  (action (diff maple_stripped.ml.log.exp maple_stripped.ml.log)))

(rule (target mcc-fc.opp.out) (deps mcc-fc.mly)
  (action
    (with-outputs-to mcc-fc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-fc.opp.exp mcc-fc.opp.out)))

(rule
  (targets mcc-fc.out mcc-fc.automaton mcc-fc.automaton.resolved
    mcc-fc.conflicts mcc-fc.timings)
  (deps mcc-fc.mly)
  (action
    (with-outputs-to mcc-fc.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-fc.timings %{deps})))))

(rule (alias quick) (action (diff mcc-fc.exp mcc-fc.out)))

(rule (alias quick) (action (diff mcc-fc.automaton.exp mcc-fc.automaton)))

(rule (alias quick)
  (action (diff mcc-fc.automaton.resolved.exp mcc-fc.automaton.resolved)))

(rule (alias quick) (action (diff mcc-fc.conflicts.exp mcc-fc.conflicts)))

(rule (target mcc-fc_stripped.mly) (deps mcc-fc.mly)
  (action
    (with-stderr-to mcc-fc_stripped.ignored
      (with-stdout-to mcc-fc_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-fc_stripped.log mcc-fc_stripped.mli mcc-fc_stripped.ml
    mcc-fc_stripped.stacklang mcc-fc_stripped.timings mcc-fc_stripped.scount
    mcc-fc_stripped.dcount)
  (deps mcc-fc_stripped.mly)
  (action
    (with-outputs-to mcc-fc_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-fc_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-fc_stripped.stacklang))

(rule (targets mcc-fc_stripped.cmi mcc-fc_stripped.mli.log)
  (deps mcc-fc_stripped.mli)
  (action
    (with-stdout-to mcc-fc_stripped.mli.dtimings
      (with-stderr-to mcc-fc_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-fc_stripped.mli)))))

(rule (targets mcc-fc_stripped.cmo mcc-fc_stripped.ml.log)
  (deps mcc-fc_stripped.ml mcc-fc_stripped.cmi)
  (action
    (with-stdout-to mcc-fc_stripped.ml.dtimings
      (with-stderr-to mcc-fc_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-fc_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-fc_stripped.ml.log.exp mcc-fc_stripped.ml.log)))

(rule (target mcc-fj.opp.out) (deps mcc-fj.mly)
  (action
    (with-outputs-to mcc-fj.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-fj.opp.exp mcc-fj.opp.out)))

(rule
  (targets mcc-fj.out mcc-fj.automaton mcc-fj.automaton.resolved
    mcc-fj.conflicts mcc-fj.timings)
  (deps mcc-fj.mly)
  (action
    (with-outputs-to mcc-fj.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-fj.timings %{deps})))))

(rule (alias quick) (action (diff mcc-fj.exp mcc-fj.out)))

(rule (alias quick) (action (diff mcc-fj.automaton.exp mcc-fj.automaton)))

(rule (alias quick)
  (action (diff mcc-fj.automaton.resolved.exp mcc-fj.automaton.resolved)))

(rule (alias quick) (action (diff mcc-fj.conflicts.exp mcc-fj.conflicts)))

(rule (target mcc-fj_stripped.mly) (deps mcc-fj.mly)
  (action
    (with-stderr-to mcc-fj_stripped.ignored
      (with-stdout-to mcc-fj_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-fj_stripped.log mcc-fj_stripped.mli mcc-fj_stripped.ml
    mcc-fj_stripped.stacklang mcc-fj_stripped.timings mcc-fj_stripped.scount
    mcc-fj_stripped.dcount)
  (deps mcc-fj_stripped.mly)
  (action
    (with-outputs-to mcc-fj_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-fj_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-fj_stripped.stacklang))

(rule (targets mcc-fj_stripped.cmi mcc-fj_stripped.mli.log)
  (deps mcc-fj_stripped.mli)
  (action
    (with-stdout-to mcc-fj_stripped.mli.dtimings
      (with-stderr-to mcc-fj_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-fj_stripped.mli)))))

(rule (targets mcc-fj_stripped.cmo mcc-fj_stripped.ml.log)
  (deps mcc-fj_stripped.ml mcc-fj_stripped.cmi)
  (action
    (with-stdout-to mcc-fj_stripped.ml.dtimings
      (with-stderr-to mcc-fj_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-fj_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-fj_stripped.ml.log.exp mcc-fj_stripped.ml.log)))

(rule (target mcc-frontends.opp.out) (deps mcc-frontends.mly)
  (action
    (with-outputs-to mcc-frontends.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff mcc-frontends.opp.exp mcc-frontends.opp.out)))

(rule
  (targets mcc-frontends.out mcc-frontends.automaton
    mcc-frontends.automaton.resolved mcc-frontends.conflicts
    mcc-frontends.timings)
  (deps mcc-frontends.mly)
  (action
    (with-outputs-to mcc-frontends.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-frontends.timings %{deps})))))

(rule (alias quick) (action (diff mcc-frontends.exp mcc-frontends.out)))

(rule (alias quick)
  (action (diff mcc-frontends.automaton.exp mcc-frontends.automaton)))

(rule (alias quick)
  (action
    (diff mcc-frontends.automaton.resolved.exp
      mcc-frontends.automaton.resolved)))

(rule (alias quick)
  (action (diff mcc-frontends.conflicts.exp mcc-frontends.conflicts)))

(rule (target mcc-frontends_stripped.mly) (deps mcc-frontends.mly)
  (action
    (with-stderr-to mcc-frontends_stripped.ignored
      (with-stdout-to mcc-frontends_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-frontends_stripped.log mcc-frontends_stripped.mli
    mcc-frontends_stripped.ml mcc-frontends_stripped.stacklang
    mcc-frontends_stripped.timings mcc-frontends_stripped.scount
    mcc-frontends_stripped.dcount)
  (deps mcc-frontends_stripped.mly)
  (action
    (with-outputs-to mcc-frontends_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-frontends_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-frontends_stripped.stacklang))

(rule (targets mcc-frontends_stripped.cmi mcc-frontends_stripped.mli.log)
  (deps mcc-frontends_stripped.mli)
  (action
    (with-stdout-to mcc-frontends_stripped.mli.dtimings
      (with-stderr-to mcc-frontends_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-frontends_stripped.mli)))))

(rule (targets mcc-frontends_stripped.cmo mcc-frontends_stripped.ml.log)
  (deps mcc-frontends_stripped.ml mcc-frontends_stripped.cmi)
  (action
    (with-stdout-to mcc-frontends_stripped.ml.dtimings
      (with-stderr-to mcc-frontends_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-frontends_stripped.ml)))))

(rule (alias test)
  (action
    (diff mcc-frontends_stripped.ml.log.exp mcc-frontends_stripped.ml.log)))

(rule (target mcc-mc.opp.out) (deps mcc-mc.mly)
  (action
    (with-outputs-to mcc-mc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-mc.opp.exp mcc-mc.opp.out)))

(rule
  (targets mcc-mc.out mcc-mc.automaton mcc-mc.automaton.resolved
    mcc-mc.conflicts mcc-mc.timings)
  (deps mcc-mc.mly)
  (action
    (with-outputs-to mcc-mc.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-mc.timings %{deps})))))

(rule (alias quick) (action (diff mcc-mc.exp mcc-mc.out)))

(rule (alias quick) (action (diff mcc-mc.automaton.exp mcc-mc.automaton)))

(rule (alias quick)
  (action (diff mcc-mc.automaton.resolved.exp mcc-mc.automaton.resolved)))

(rule (alias quick) (action (diff mcc-mc.conflicts.exp mcc-mc.conflicts)))

(rule (target mcc-mc_stripped.mly) (deps mcc-mc.mly)
  (action
    (with-stderr-to mcc-mc_stripped.ignored
      (with-stdout-to mcc-mc_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-mc_stripped.log mcc-mc_stripped.mli mcc-mc_stripped.ml
    mcc-mc_stripped.stacklang mcc-mc_stripped.timings mcc-mc_stripped.scount
    mcc-mc_stripped.dcount)
  (deps mcc-mc_stripped.mly)
  (action
    (with-outputs-to mcc-mc_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-mc_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-mc_stripped.stacklang))

(rule (targets mcc-mc_stripped.cmi mcc-mc_stripped.mli.log)
  (deps mcc-mc_stripped.mli)
  (action
    (with-stdout-to mcc-mc_stripped.mli.dtimings
      (with-stderr-to mcc-mc_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-mc_stripped.mli)))))

(rule (targets mcc-mc_stripped.cmo mcc-mc_stripped.ml.log)
  (deps mcc-mc_stripped.ml mcc-mc_stripped.cmi)
  (action
    (with-stdout-to mcc-mc_stripped.ml.dtimings
      (with-stderr-to mcc-mc_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-mc_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-mc_stripped.ml.log.exp mcc-mc_stripped.ml.log)))

(rule (target mcc-moogle.opp.out) (deps mcc-moogle.mly)
  (action
    (with-outputs-to mcc-moogle.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-moogle.opp.exp mcc-moogle.opp.out)))

(rule
  (targets mcc-moogle.out mcc-moogle.automaton mcc-moogle.automaton.resolved
    mcc-moogle.conflicts mcc-moogle.timings)
  (deps mcc-moogle.mly)
  (action
    (with-outputs-to mcc-moogle.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-moogle.timings %{deps})))))

(rule (alias quick) (action (diff mcc-moogle.exp mcc-moogle.out)))

(rule (alias quick)
  (action (diff mcc-moogle.automaton.exp mcc-moogle.automaton)))

(rule (alias quick)
  (action
    (diff mcc-moogle.automaton.resolved.exp mcc-moogle.automaton.resolved)))

(rule (alias quick)
  (action (diff mcc-moogle.conflicts.exp mcc-moogle.conflicts)))

(rule (target mcc-moogle_stripped.mly) (deps mcc-moogle.mly)
  (action
    (with-stderr-to mcc-moogle_stripped.ignored
      (with-stdout-to mcc-moogle_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-moogle_stripped.log mcc-moogle_stripped.mli
    mcc-moogle_stripped.ml mcc-moogle_stripped.stacklang
    mcc-moogle_stripped.timings mcc-moogle_stripped.scount
    mcc-moogle_stripped.dcount)
  (deps mcc-moogle_stripped.mly)
  (action
    (with-outputs-to mcc-moogle_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-moogle_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-moogle_stripped.stacklang))

(rule (targets mcc-moogle_stripped.cmi mcc-moogle_stripped.mli.log)
  (deps mcc-moogle_stripped.mli)
  (action
    (with-stdout-to mcc-moogle_stripped.mli.dtimings
      (with-stderr-to mcc-moogle_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-moogle_stripped.mli)))))

(rule (targets mcc-moogle_stripped.cmo mcc-moogle_stripped.ml.log)
  (deps mcc-moogle_stripped.ml mcc-moogle_stripped.cmi)
  (action
    (with-stdout-to mcc-moogle_stripped.ml.dtimings
      (with-stderr-to mcc-moogle_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-moogle_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-moogle_stripped.ml.log.exp mcc-moogle_stripped.ml.log)))

(rule (target mcc-naml.opp.out) (deps mcc-naml.mly)
  (action
    (with-outputs-to mcc-naml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-naml.opp.exp mcc-naml.opp.out)))

(rule
  (targets mcc-naml.out mcc-naml.automaton mcc-naml.automaton.resolved
    mcc-naml.conflicts mcc-naml.timings)
  (deps mcc-naml.mly)
  (action
    (with-outputs-to mcc-naml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-naml.timings %{deps})))))

(rule (alias quick) (action (diff mcc-naml.exp mcc-naml.out)))

(rule (alias quick)
  (action (diff mcc-naml.automaton.exp mcc-naml.automaton)))

(rule (alias quick)
  (action (diff mcc-naml.automaton.resolved.exp mcc-naml.automaton.resolved)))

(rule (alias quick)
  (action (diff mcc-naml.conflicts.exp mcc-naml.conflicts)))

(rule (target mcc-naml_stripped.mly) (deps mcc-naml.mly)
  (action
    (with-stderr-to mcc-naml_stripped.ignored
      (with-stdout-to mcc-naml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-naml_stripped.log mcc-naml_stripped.mli mcc-naml_stripped.ml
    mcc-naml_stripped.stacklang mcc-naml_stripped.timings
    mcc-naml_stripped.scount mcc-naml_stripped.dcount)
  (deps mcc-naml_stripped.mly)
  (action
    (with-outputs-to mcc-naml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-naml_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-naml_stripped.stacklang))

(rule (targets mcc-naml_stripped.cmi mcc-naml_stripped.mli.log)
  (deps mcc-naml_stripped.mli)
  (action
    (with-stdout-to mcc-naml_stripped.mli.dtimings
      (with-stderr-to mcc-naml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-naml_stripped.mli)))))

(rule (targets mcc-naml_stripped.cmo mcc-naml_stripped.ml.log)
  (deps mcc-naml_stripped.ml mcc-naml_stripped.cmi)
  (action
    (with-stdout-to mcc-naml_stripped.ml.dtimings
      (with-stderr-to mcc-naml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-naml_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-naml_stripped.ml.log.exp mcc-naml_stripped.ml.log)))

(rule (target mcc-pascal.opp.out) (deps mcc-pascal.mly)
  (action
    (with-outputs-to mcc-pascal.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-pascal.opp.exp mcc-pascal.opp.out)))

(rule
  (targets mcc-pascal.out mcc-pascal.automaton mcc-pascal.automaton.resolved
    mcc-pascal.conflicts mcc-pascal.timings)
  (deps mcc-pascal.mly)
  (action
    (with-outputs-to mcc-pascal.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-pascal.timings %{deps})))))

(rule (alias quick) (action (diff mcc-pascal.exp mcc-pascal.out)))

(rule (alias quick)
  (action (diff mcc-pascal.automaton.exp mcc-pascal.automaton)))

(rule (alias quick)
  (action
    (diff mcc-pascal.automaton.resolved.exp mcc-pascal.automaton.resolved)))

(rule (alias quick)
  (action (diff mcc-pascal.conflicts.exp mcc-pascal.conflicts)))

(rule (target mcc-pascal_stripped.mly) (deps mcc-pascal.mly)
  (action
    (with-stderr-to mcc-pascal_stripped.ignored
      (with-stdout-to mcc-pascal_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-pascal_stripped.log mcc-pascal_stripped.mli
    mcc-pascal_stripped.ml mcc-pascal_stripped.stacklang
    mcc-pascal_stripped.timings mcc-pascal_stripped.scount
    mcc-pascal_stripped.dcount)
  (deps mcc-pascal_stripped.mly)
  (action
    (with-outputs-to mcc-pascal_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-pascal_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-pascal_stripped.stacklang))

(rule (targets mcc-pascal_stripped.cmi mcc-pascal_stripped.mli.log)
  (deps mcc-pascal_stripped.mli)
  (action
    (with-stdout-to mcc-pascal_stripped.mli.dtimings
      (with-stderr-to mcc-pascal_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-pascal_stripped.mli)))))

(rule (targets mcc-pascal_stripped.cmo mcc-pascal_stripped.ml.log)
  (deps mcc-pascal_stripped.ml mcc-pascal_stripped.cmi)
  (action
    (with-stdout-to mcc-pascal_stripped.ml.dtimings
      (with-stderr-to mcc-pascal_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-pascal_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-pascal_stripped.ml.log.exp mcc-pascal_stripped.ml.log)))

(rule (target mcc-pasqual.opp.out) (deps mcc-pasqual.mly)
  (action
    (with-outputs-to mcc-pasqual.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-pasqual.opp.exp mcc-pasqual.opp.out)))

(rule
  (targets mcc-pasqual.out mcc-pasqual.automaton
    mcc-pasqual.automaton.resolved mcc-pasqual.conflicts mcc-pasqual.timings)
  (deps mcc-pasqual.mly)
  (action
    (with-outputs-to mcc-pasqual.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-pasqual.timings %{deps})))))

(rule (alias quick) (action (diff mcc-pasqual.exp mcc-pasqual.out)))

(rule (alias quick)
  (action (diff mcc-pasqual.automaton.exp mcc-pasqual.automaton)))

(rule (alias quick)
  (action
    (diff mcc-pasqual.automaton.resolved.exp mcc-pasqual.automaton.resolved)))

(rule (alias quick)
  (action (diff mcc-pasqual.conflicts.exp mcc-pasqual.conflicts)))

(rule (target mcc-pasqual_stripped.mly) (deps mcc-pasqual.mly)
  (action
    (with-stderr-to mcc-pasqual_stripped.ignored
      (with-stdout-to mcc-pasqual_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-pasqual_stripped.log mcc-pasqual_stripped.mli
    mcc-pasqual_stripped.ml mcc-pasqual_stripped.stacklang
    mcc-pasqual_stripped.timings mcc-pasqual_stripped.scount
    mcc-pasqual_stripped.dcount)
  (deps mcc-pasqual_stripped.mly)
  (action
    (with-outputs-to mcc-pasqual_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-pasqual_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-pasqual_stripped.stacklang))

(rule (targets mcc-pasqual_stripped.cmi mcc-pasqual_stripped.mli.log)
  (deps mcc-pasqual_stripped.mli)
  (action
    (with-stdout-to mcc-pasqual_stripped.mli.dtimings
      (with-stderr-to mcc-pasqual_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-pasqual_stripped.mli)))))

(rule (targets mcc-pasqual_stripped.cmo mcc-pasqual_stripped.ml.log)
  (deps mcc-pasqual_stripped.ml mcc-pasqual_stripped.cmi)
  (action
    (with-stdout-to mcc-pasqual_stripped.ml.dtimings
      (with-stderr-to mcc-pasqual_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-pasqual_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-pasqual_stripped.ml.log.exp mcc-pasqual_stripped.ml.log)))

(rule (target mcc-phobos.opp.out) (deps mcc-phobos.mly)
  (action
    (with-outputs-to mcc-phobos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-phobos.opp.exp mcc-phobos.opp.out)))

(rule
  (targets mcc-phobos.out mcc-phobos.automaton mcc-phobos.automaton.resolved
    mcc-phobos.conflicts mcc-phobos.timings)
  (deps mcc-phobos.mly)
  (action
    (with-outputs-to mcc-phobos.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-phobos.timings %{deps})))))

(rule (alias quick) (action (diff mcc-phobos.exp mcc-phobos.out)))

(rule (alias quick)
  (action (diff mcc-phobos.automaton.exp mcc-phobos.automaton)))

(rule (alias quick)
  (action
    (diff mcc-phobos.automaton.resolved.exp mcc-phobos.automaton.resolved)))

(rule (alias quick)
  (action (diff mcc-phobos.conflicts.exp mcc-phobos.conflicts)))

(rule (target mcc-phobos_stripped.mly) (deps mcc-phobos.mly)
  (action
    (with-stderr-to mcc-phobos_stripped.ignored
      (with-stdout-to mcc-phobos_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-phobos_stripped.log mcc-phobos_stripped.mli
    mcc-phobos_stripped.ml mcc-phobos_stripped.stacklang
    mcc-phobos_stripped.timings mcc-phobos_stripped.scount
    mcc-phobos_stripped.dcount)
  (deps mcc-phobos_stripped.mly)
  (action
    (with-outputs-to mcc-phobos_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-phobos_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-phobos_stripped.stacklang))

(rule (targets mcc-phobos_stripped.cmi mcc-phobos_stripped.mli.log)
  (deps mcc-phobos_stripped.mli)
  (action
    (with-stdout-to mcc-phobos_stripped.mli.dtimings
      (with-stderr-to mcc-phobos_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-phobos_stripped.mli)))))

(rule (targets mcc-phobos_stripped.cmo mcc-phobos_stripped.ml.log)
  (deps mcc-phobos_stripped.ml mcc-phobos_stripped.cmi)
  (action
    (with-stdout-to mcc-phobos_stripped.ml.dtimings
      (with-stderr-to mcc-phobos_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-phobos_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-phobos_stripped.ml.log.exp mcc-phobos_stripped.ml.log)))

(rule (target mcc-prof.opp.out) (deps mcc-prof.mly)
  (action
    (with-outputs-to mcc-prof.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-prof.opp.exp mcc-prof.opp.out)))

(rule
  (targets mcc-prof.out mcc-prof.automaton mcc-prof.automaton.resolved
    mcc-prof.conflicts mcc-prof.timings)
  (deps mcc-prof.mly)
  (action
    (with-outputs-to mcc-prof.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-prof.timings %{deps})))))

(rule (alias quick) (action (diff mcc-prof.exp mcc-prof.out)))

(rule (alias quick)
  (action (diff mcc-prof.automaton.exp mcc-prof.automaton)))

(rule (alias quick)
  (action (diff mcc-prof.automaton.resolved.exp mcc-prof.automaton.resolved)))

(rule (alias quick)
  (action (diff mcc-prof.conflicts.exp mcc-prof.conflicts)))

(rule (target mcc-prof_stripped.mly) (deps mcc-prof.mly)
  (action
    (with-stderr-to mcc-prof_stripped.ignored
      (with-stdout-to mcc-prof_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-prof_stripped.log mcc-prof_stripped.mli mcc-prof_stripped.ml
    mcc-prof_stripped.stacklang mcc-prof_stripped.timings
    mcc-prof_stripped.scount mcc-prof_stripped.dcount)
  (deps mcc-prof_stripped.mly)
  (action
    (with-outputs-to mcc-prof_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-prof_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-prof_stripped.stacklang))

(rule (targets mcc-prof_stripped.cmi mcc-prof_stripped.mli.log)
  (deps mcc-prof_stripped.mli)
  (action
    (with-stdout-to mcc-prof_stripped.mli.dtimings
      (with-stderr-to mcc-prof_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-prof_stripped.mli)))))

(rule (targets mcc-prof_stripped.cmo mcc-prof_stripped.ml.log)
  (deps mcc-prof_stripped.ml mcc-prof_stripped.cmi)
  (action
    (with-stdout-to mcc-prof_stripped.ml.dtimings
      (with-stderr-to mcc-prof_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-prof_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-prof_stripped.ml.log.exp mcc-prof_stripped.ml.log)))

(rule (target mcc-python.opp.out) (deps mcc-python.mly)
  (action
    (with-outputs-to mcc-python.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mcc-python.opp.exp mcc-python.opp.out)))

(rule
  (targets mcc-python.out mcc-python.automaton mcc-python.automaton.resolved
    mcc-python.conflicts mcc-python.timings)
  (deps mcc-python.mly)
  (action
    (with-outputs-to mcc-python.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mcc-python.timings %{deps})))))

(rule (alias quick) (action (diff mcc-python.exp mcc-python.out)))

(rule (alias quick)
  (action (diff mcc-python.automaton.exp mcc-python.automaton)))

(rule (alias quick)
  (action
    (diff mcc-python.automaton.resolved.exp mcc-python.automaton.resolved)))

(rule (alias quick)
  (action (diff mcc-python.conflicts.exp mcc-python.conflicts)))

(rule (target mcc-python_stripped.mly) (deps mcc-python.mly)
  (action
    (with-stderr-to mcc-python_stripped.ignored
      (with-stdout-to mcc-python_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mcc-python_stripped.log mcc-python_stripped.mli
    mcc-python_stripped.ml mcc-python_stripped.stacklang
    mcc-python_stripped.timings mcc-python_stripped.scount
    mcc-python_stripped.dcount)
  (deps mcc-python_stripped.mly)
  (action
    (with-outputs-to mcc-python_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mcc-python_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mcc-python_stripped.stacklang))

(rule (targets mcc-python_stripped.cmi mcc-python_stripped.mli.log)
  (deps mcc-python_stripped.mli)
  (action
    (with-stdout-to mcc-python_stripped.mli.dtimings
      (with-stderr-to mcc-python_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mcc-python_stripped.mli)))))

(rule (targets mcc-python_stripped.cmo mcc-python_stripped.ml.log)
  (deps mcc-python_stripped.ml mcc-python_stripped.cmi)
  (action
    (with-stdout-to mcc-python_stripped.ml.dtimings
      (with-stderr-to mcc-python_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mcc-python_stripped.ml)))))

(rule (alias test)
  (action (diff mcc-python_stripped.ml.log.exp mcc-python_stripped.ml.log)))

(rule (target memcad.1.0.0-mc_parser.opp.out)
  (deps memcad.1.0.0-mc_parser.mly)
  (action
    (with-outputs-to memcad.1.0.0-mc_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff memcad.1.0.0-mc_parser.opp.exp memcad.1.0.0-mc_parser.opp.out)))

(rule
  (targets memcad.1.0.0-mc_parser.out memcad.1.0.0-mc_parser.automaton
    memcad.1.0.0-mc_parser.automaton.resolved
    memcad.1.0.0-mc_parser.conflicts memcad.1.0.0-mc_parser.timings)
  (deps memcad.1.0.0-mc_parser.mly)
  (action
    (with-outputs-to memcad.1.0.0-mc_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to memcad.1.0.0-mc_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff memcad.1.0.0-mc_parser.exp memcad.1.0.0-mc_parser.out)))

(rule (alias quick)
  (action
    (diff memcad.1.0.0-mc_parser.automaton.exp
      memcad.1.0.0-mc_parser.automaton)))

(rule (alias quick)
  (action
    (diff memcad.1.0.0-mc_parser.automaton.resolved.exp
      memcad.1.0.0-mc_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff memcad.1.0.0-mc_parser.conflicts.exp
      memcad.1.0.0-mc_parser.conflicts)))

(rule (target memcad_1_0_0-mc_parser_stripped.mly)
  (deps memcad.1.0.0-mc_parser.mly)
  (action
    (with-stderr-to memcad_1_0_0-mc_parser_stripped.ignored
      (with-stdout-to memcad_1_0_0-mc_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets memcad_1_0_0-mc_parser_stripped.log
    memcad_1_0_0-mc_parser_stripped.mli memcad_1_0_0-mc_parser_stripped.ml
    memcad_1_0_0-mc_parser_stripped.stacklang
    memcad_1_0_0-mc_parser_stripped.timings
    memcad_1_0_0-mc_parser_stripped.scount
    memcad_1_0_0-mc_parser_stripped.dcount)
  (deps memcad_1_0_0-mc_parser_stripped.mly)
  (action
    (with-outputs-to memcad_1_0_0-mc_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to memcad_1_0_0-mc_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      memcad_1_0_0-mc_parser_stripped.stacklang))

(rule
  (targets memcad_1_0_0-mc_parser_stripped.cmi
    memcad_1_0_0-mc_parser_stripped.mli.log)
  (deps memcad_1_0_0-mc_parser_stripped.mli)
  (action
    (with-stdout-to memcad_1_0_0-mc_parser_stripped.mli.dtimings
      (with-stderr-to memcad_1_0_0-mc_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          memcad_1_0_0-mc_parser_stripped.mli)))))

(rule
  (targets memcad_1_0_0-mc_parser_stripped.cmo
    memcad_1_0_0-mc_parser_stripped.ml.log)
  (deps memcad_1_0_0-mc_parser_stripped.ml
    memcad_1_0_0-mc_parser_stripped.cmi)
  (action
    (with-stdout-to memcad_1_0_0-mc_parser_stripped.ml.dtimings
      (with-stderr-to memcad_1_0_0-mc_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          memcad_1_0_0-mc_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff memcad_1_0_0-mc_parser_stripped.ml.log.exp
      memcad_1_0_0-mc_parser_stripped.ml.log)))

(rule (target metaocaml.opp.out) (deps metaocaml.mly)
  (action
    (with-outputs-to metaocaml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff metaocaml.opp.exp metaocaml.opp.out)))

(rule
  (targets metaocaml.out metaocaml.automaton metaocaml.automaton.resolved
    metaocaml.conflicts metaocaml.timings)
  (deps metaocaml.mly)
  (action
    (with-outputs-to metaocaml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to metaocaml.timings %{deps})))))

(rule (alias quick) (action (diff metaocaml.exp metaocaml.out)))

(rule (alias quick)
  (action (diff metaocaml.automaton.exp metaocaml.automaton)))

(rule (alias quick)
  (action
    (diff metaocaml.automaton.resolved.exp metaocaml.automaton.resolved)))

(rule (alias quick)
  (action (diff metaocaml.conflicts.exp metaocaml.conflicts)))

(rule (target metaocaml_stripped.mly) (deps metaocaml.mly)
  (action
    (with-stderr-to metaocaml_stripped.ignored
      (with-stdout-to metaocaml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets metaocaml_stripped.log metaocaml_stripped.mli
    metaocaml_stripped.ml metaocaml_stripped.stacklang
    metaocaml_stripped.timings metaocaml_stripped.scount
    metaocaml_stripped.dcount)
  (deps metaocaml_stripped.mly)
  (action
    (with-outputs-to metaocaml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to metaocaml_stripped.timings %{deps})))))

(alias (name quick) (deps
                      metaocaml_stripped.stacklang))

(rule (targets metaocaml_stripped.cmi metaocaml_stripped.mli.log)
  (deps metaocaml_stripped.mli)
  (action
    (with-stdout-to metaocaml_stripped.mli.dtimings
      (with-stderr-to metaocaml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c metaocaml_stripped.mli)))))

(rule (targets metaocaml_stripped.cmo metaocaml_stripped.ml.log)
  (deps metaocaml_stripped.ml metaocaml_stripped.cmi)
  (action
    (with-stdout-to metaocaml_stripped.ml.dtimings
      (with-stderr-to metaocaml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c metaocaml_stripped.ml)))))

(rule (alias test)
  (action (diff metaocaml_stripped.ml.log.exp metaocaml_stripped.ml.log)))

(rule (target mezzo.opp.out) (deps mezzo.mly)
  (action
    (with-outputs-to mezzo.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:mezzo.flags} %{deps})))))

(rule (alias quick) (action (diff mezzo.opp.exp mezzo.opp.out)))

(rule
  (targets mezzo.out mezzo.automaton mezzo.automaton.resolved mezzo.conflicts
    mezzo.timings)
  (deps mezzo.mly)
  (action
    (with-outputs-to mezzo.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mezzo.timings %{read-lines:mezzo.flags} %{deps})))))

(rule (alias quick) (action (diff mezzo.exp mezzo.out)))

(rule (alias quick) (action (diff mezzo.automaton.exp mezzo.automaton)))

(rule (alias quick)
  (action (diff mezzo.automaton.resolved.exp mezzo.automaton.resolved)))

(rule (alias quick) (action (diff mezzo.conflicts.exp mezzo.conflicts)))

(rule (target mezzo_stripped.mly) (deps mezzo.mly)
  (action
    (with-stderr-to mezzo_stripped.ignored
      (with-stdout-to mezzo_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{read-lines:mezzo.flags} %{deps}))))))

(rule
  (targets mezzo_stripped.log mezzo_stripped.mli mezzo_stripped.ml
    mezzo_stripped.stacklang mezzo_stripped.timings mezzo_stripped.scount
    mezzo_stripped.dcount)
  (deps mezzo_stripped.mly)
  (action
    (with-outputs-to mezzo_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mezzo_stripped.timings %{read-lines:mezzo.flags}
          %{deps})))))

(alias (name quick) (deps
                      mezzo_stripped.stacklang))

(rule (targets mezzo_stripped.cmi mezzo_stripped.mli.log)
  (deps mezzo_stripped.mli)
  (action
    (with-stdout-to mezzo_stripped.mli.dtimings
      (with-stderr-to mezzo_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mezzo_stripped.mli)))))

(rule (targets mezzo_stripped.cmo mezzo_stripped.ml.log)
  (deps mezzo_stripped.ml mezzo_stripped.cmi)
  (action
    (with-stdout-to mezzo_stripped.ml.dtimings
      (with-stderr-to mezzo_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mezzo_stripped.ml)))))

(rule (alias test)
  (action (diff mezzo_stripped.ml.log.exp mezzo_stripped.ml.log)))

(rule (target mezzo_canonical.opp.out) (deps mezzo_canonical.mly)
  (action
    (with-outputs-to mezzo_canonical.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:mezzo_canonical.flags}
          %{deps})))))

(rule (alias quick)
  (action (diff mezzo_canonical.opp.exp mezzo_canonical.opp.out)))

(rule
  (targets mezzo_canonical.out mezzo_canonical.automaton
    mezzo_canonical.automaton.resolved mezzo_canonical.conflicts
    mezzo_canonical.timings)
  (deps mezzo_canonical.mly)
  (action
    (with-outputs-to mezzo_canonical.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mezzo_canonical.timings
          %{read-lines:mezzo_canonical.flags} %{deps})))))

(rule (alias quick) (action (diff mezzo_canonical.exp mezzo_canonical.out)))

(rule (alias quick)
  (action (diff mezzo_canonical.automaton.exp mezzo_canonical.automaton)))

(rule (alias quick)
  (action
    (diff mezzo_canonical.automaton.resolved.exp
      mezzo_canonical.automaton.resolved)))

(rule (alias quick)
  (action (diff mezzo_canonical.conflicts.exp mezzo_canonical.conflicts)))

(rule (target mezzo_inclusion_only.opp.out) (deps mezzo_inclusion_only.mly)
  (action
    (with-outputs-to mezzo_inclusion_only.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess
          %{read-lines:mezzo_inclusion_only.flags} %{deps})))))

(rule (alias quick)
  (action (diff mezzo_inclusion_only.opp.exp mezzo_inclusion_only.opp.out)))

(rule
  (targets mezzo_inclusion_only.out mezzo_inclusion_only.automaton
    mezzo_inclusion_only.automaton.resolved mezzo_inclusion_only.conflicts
    mezzo_inclusion_only.timings)
  (deps mezzo_inclusion_only.mly)
  (action
    (with-outputs-to mezzo_inclusion_only.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mezzo_inclusion_only.timings
          %{read-lines:mezzo_inclusion_only.flags} %{deps})))))

(rule (alias quick)
  (action (diff mezzo_inclusion_only.exp mezzo_inclusion_only.out)))

(rule (alias quick)
  (action
    (diff mezzo_inclusion_only.automaton.exp mezzo_inclusion_only.automaton)))

(rule (alias quick)
  (action
    (diff mezzo_inclusion_only.automaton.resolved.exp
      mezzo_inclusion_only.automaton.resolved)))

(rule (alias quick)
  (action
    (diff mezzo_inclusion_only.conflicts.exp mezzo_inclusion_only.conflicts)))

(rule (target mezzo_inclusion_only_stripped.mly)
  (deps mezzo_inclusion_only.mly)
  (action
    (with-stderr-to mezzo_inclusion_only_stripped.ignored
      (with-stdout-to mezzo_inclusion_only_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu
            %{read-lines:mezzo_inclusion_only.flags} %{deps}))))))

(rule
  (targets mezzo_inclusion_only_stripped.log
    mezzo_inclusion_only_stripped.mli mezzo_inclusion_only_stripped.ml
    mezzo_inclusion_only_stripped.stacklang
    mezzo_inclusion_only_stripped.timings
    mezzo_inclusion_only_stripped.scount
    mezzo_inclusion_only_stripped.dcount)
  (deps mezzo_inclusion_only_stripped.mly)
  (action
    (with-outputs-to mezzo_inclusion_only_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mezzo_inclusion_only_stripped.timings
          %{read-lines:mezzo_inclusion_only.flags} %{deps})))))

(alias (name quick) (deps
                      mezzo_inclusion_only_stripped.stacklang))

(rule
  (targets mezzo_inclusion_only_stripped.cmi
    mezzo_inclusion_only_stripped.mli.log)
  (deps mezzo_inclusion_only_stripped.mli)
  (action
    (with-stdout-to mezzo_inclusion_only_stripped.mli.dtimings
      (with-stderr-to mezzo_inclusion_only_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          mezzo_inclusion_only_stripped.mli)))))

(rule
  (targets mezzo_inclusion_only_stripped.cmo
    mezzo_inclusion_only_stripped.ml.log)
  (deps mezzo_inclusion_only_stripped.ml mezzo_inclusion_only_stripped.cmi)
  (action
    (with-stdout-to mezzo_inclusion_only_stripped.ml.dtimings
      (with-stderr-to mezzo_inclusion_only_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          mezzo_inclusion_only_stripped.ml)))))

(rule (alias test)
  (action
    (diff mezzo_inclusion_only_stripped.ml.log.exp
      mezzo_inclusion_only_stripped.ml.log)))

(rule (target miniCparser.opp.out) (deps miniCparser.mly)
  (action
    (with-outputs-to miniCparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff miniCparser.opp.exp miniCparser.opp.out)))

(rule
  (targets miniCparser.out miniCparser.automaton
    miniCparser.automaton.resolved miniCparser.conflicts miniCparser.timings)
  (deps miniCparser.mly)
  (action
    (with-outputs-to miniCparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to miniCparser.timings %{deps})))))

(rule (alias quick) (action (diff miniCparser.exp miniCparser.out)))

(rule (alias quick)
  (action (diff miniCparser.automaton.exp miniCparser.automaton)))

(rule (alias quick)
  (action
    (diff miniCparser.automaton.resolved.exp miniCparser.automaton.resolved)))

(rule (alias quick)
  (action (diff miniCparser.conflicts.exp miniCparser.conflicts)))

(rule (target miniCparser_stripped.mly) (deps miniCparser.mly)
  (action
    (with-stderr-to miniCparser_stripped.ignored
      (with-stdout-to miniCparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets miniCparser_stripped.log miniCparser_stripped.mli
    miniCparser_stripped.ml miniCparser_stripped.stacklang
    miniCparser_stripped.timings miniCparser_stripped.scount
    miniCparser_stripped.dcount)
  (deps miniCparser_stripped.mly)
  (action
    (with-outputs-to miniCparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to miniCparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      miniCparser_stripped.stacklang))

(rule (targets miniCparser_stripped.cmi miniCparser_stripped.mli.log)
  (deps miniCparser_stripped.mli)
  (action
    (with-stdout-to miniCparser_stripped.mli.dtimings
      (with-stderr-to miniCparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c miniCparser_stripped.mli)))))

(rule (targets miniCparser_stripped.cmo miniCparser_stripped.ml.log)
  (deps miniCparser_stripped.ml miniCparser_stripped.cmi)
  (action
    (with-stdout-to miniCparser_stripped.ml.dtimings
      (with-stderr-to miniCparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c miniCparser_stripped.ml)))))

(rule (alias test)
  (action (diff miniCparser_stripped.ml.log.exp miniCparser_stripped.ml.log)))

(rule (target miniMLparser.opp.out) (deps miniMLparser.mly)
  (action
    (with-outputs-to miniMLparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff miniMLparser.opp.exp miniMLparser.opp.out)))

(rule
  (targets miniMLparser.out miniMLparser.automaton
    miniMLparser.automaton.resolved miniMLparser.conflicts
    miniMLparser.timings)
  (deps miniMLparser.mly)
  (action
    (with-outputs-to miniMLparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to miniMLparser.timings %{deps})))))

(rule (alias quick) (action (diff miniMLparser.exp miniMLparser.out)))

(rule (alias quick)
  (action (diff miniMLparser.automaton.exp miniMLparser.automaton)))

(rule (alias quick)
  (action
    (diff miniMLparser.automaton.resolved.exp
      miniMLparser.automaton.resolved)))

(rule (alias quick)
  (action (diff miniMLparser.conflicts.exp miniMLparser.conflicts)))

(rule (target miniMLparser_stripped.mly) (deps miniMLparser.mly)
  (action
    (with-stderr-to miniMLparser_stripped.ignored
      (with-stdout-to miniMLparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets miniMLparser_stripped.log miniMLparser_stripped.mli
    miniMLparser_stripped.ml miniMLparser_stripped.stacklang
    miniMLparser_stripped.timings miniMLparser_stripped.scount
    miniMLparser_stripped.dcount)
  (deps miniMLparser_stripped.mly)
  (action
    (with-outputs-to miniMLparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to miniMLparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      miniMLparser_stripped.stacklang))

(rule (targets miniMLparser_stripped.cmi miniMLparser_stripped.mli.log)
  (deps miniMLparser_stripped.mli)
  (action
    (with-stdout-to miniMLparser_stripped.mli.dtimings
      (with-stderr-to miniMLparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c miniMLparser_stripped.mli)))))

(rule (targets miniMLparser_stripped.cmo miniMLparser_stripped.ml.log)
  (deps miniMLparser_stripped.ml miniMLparser_stripped.cmi)
  (action
    (with-stdout-to miniMLparser_stripped.ml.dtimings
      (with-stderr-to miniMLparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c miniMLparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff miniMLparser_stripped.ml.log.exp miniMLparser_stripped.ml.log)))

(rule (target mlpost.0.8.2-pfb_parser.opp.out)
  (deps mlpost.0.8.2-pfb_parser.mly)
  (action
    (with-outputs-to mlpost.0.8.2-pfb_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff mlpost.0.8.2-pfb_parser.opp.exp mlpost.0.8.2-pfb_parser.opp.out)))

(rule
  (targets mlpost.0.8.2-pfb_parser.out mlpost.0.8.2-pfb_parser.automaton
    mlpost.0.8.2-pfb_parser.automaton.resolved
    mlpost.0.8.2-pfb_parser.conflicts mlpost.0.8.2-pfb_parser.timings)
  (deps mlpost.0.8.2-pfb_parser.mly)
  (action
    (with-outputs-to mlpost.0.8.2-pfb_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mlpost.0.8.2-pfb_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff mlpost.0.8.2-pfb_parser.exp mlpost.0.8.2-pfb_parser.out)))

(rule (alias quick)
  (action
    (diff mlpost.0.8.2-pfb_parser.automaton.exp
      mlpost.0.8.2-pfb_parser.automaton)))

(rule (alias quick)
  (action
    (diff mlpost.0.8.2-pfb_parser.automaton.resolved.exp
      mlpost.0.8.2-pfb_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff mlpost.0.8.2-pfb_parser.conflicts.exp
      mlpost.0.8.2-pfb_parser.conflicts)))

(rule (target mlpost_0_8_2-pfb_parser_stripped.mly)
  (deps mlpost.0.8.2-pfb_parser.mly)
  (action
    (with-stderr-to mlpost_0_8_2-pfb_parser_stripped.ignored
      (with-stdout-to mlpost_0_8_2-pfb_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mlpost_0_8_2-pfb_parser_stripped.log
    mlpost_0_8_2-pfb_parser_stripped.mli mlpost_0_8_2-pfb_parser_stripped.ml
    mlpost_0_8_2-pfb_parser_stripped.stacklang
    mlpost_0_8_2-pfb_parser_stripped.timings
    mlpost_0_8_2-pfb_parser_stripped.scount
    mlpost_0_8_2-pfb_parser_stripped.dcount)
  (deps mlpost_0_8_2-pfb_parser_stripped.mly)
  (action
    (with-outputs-to mlpost_0_8_2-pfb_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mlpost_0_8_2-pfb_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mlpost_0_8_2-pfb_parser_stripped.stacklang))

(rule
  (targets mlpost_0_8_2-pfb_parser_stripped.cmi
    mlpost_0_8_2-pfb_parser_stripped.mli.log)
  (deps mlpost_0_8_2-pfb_parser_stripped.mli)
  (action
    (with-stdout-to mlpost_0_8_2-pfb_parser_stripped.mli.dtimings
      (with-stderr-to mlpost_0_8_2-pfb_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          mlpost_0_8_2-pfb_parser_stripped.mli)))))

(rule
  (targets mlpost_0_8_2-pfb_parser_stripped.cmo
    mlpost_0_8_2-pfb_parser_stripped.ml.log)
  (deps mlpost_0_8_2-pfb_parser_stripped.ml
    mlpost_0_8_2-pfb_parser_stripped.cmi)
  (action
    (with-stdout-to mlpost_0_8_2-pfb_parser_stripped.ml.dtimings
      (with-stderr-to mlpost_0_8_2-pfb_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          mlpost_0_8_2-pfb_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff mlpost_0_8_2-pfb_parser_stripped.ml.log.exp
      mlpost_0_8_2-pfb_parser_stripped.ml.log)))

(rule (target modelica.opp.out) (deps modelica.mly)
  (action
    (with-outputs-to modelica.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff modelica.opp.exp modelica.opp.out)))

(rule
  (targets modelica.out modelica.automaton modelica.automaton.resolved
    modelica.conflicts modelica.timings)
  (deps modelica.mly)
  (action
    (with-outputs-to modelica.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to modelica.timings %{deps})))))

(rule (alias quick) (action (diff modelica.exp modelica.out)))

(rule (alias quick)
  (action (diff modelica.automaton.exp modelica.automaton)))

(rule (alias quick)
  (action (diff modelica.automaton.resolved.exp modelica.automaton.resolved)))

(rule (alias quick)
  (action (diff modelica.conflicts.exp modelica.conflicts)))

(rule (target modelica_stripped.mly) (deps modelica.mly)
  (action
    (with-stderr-to modelica_stripped.ignored
      (with-stdout-to modelica_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets modelica_stripped.log modelica_stripped.mli modelica_stripped.ml
    modelica_stripped.stacklang modelica_stripped.timings
    modelica_stripped.scount modelica_stripped.dcount)
  (deps modelica_stripped.mly)
  (action
    (with-outputs-to modelica_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to modelica_stripped.timings %{deps})))))

(alias (name quick) (deps
                      modelica_stripped.stacklang))

(rule (targets modelica_stripped.cmi modelica_stripped.mli.log)
  (deps modelica_stripped.mli)
  (action
    (with-stdout-to modelica_stripped.mli.dtimings
      (with-stderr-to modelica_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c modelica_stripped.mli)))))

(rule (targets modelica_stripped.cmo modelica_stripped.ml.log)
  (deps modelica_stripped.ml modelica_stripped.cmi)
  (action
    (with-stdout-to modelica_stripped.ml.dtimings
      (with-stderr-to modelica_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c modelica_stripped.ml)))))

(rule (alias test)
  (action (diff modelica_stripped.ml.log.exp modelica_stripped.ml.log)))

(rule (target modelyze.opp.out) (deps modelyze.mly)
  (action
    (with-outputs-to modelyze.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff modelyze.opp.exp modelyze.opp.out)))

(rule
  (targets modelyze.out modelyze.automaton modelyze.automaton.resolved
    modelyze.conflicts modelyze.timings)
  (deps modelyze.mly)
  (action
    (with-outputs-to modelyze.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to modelyze.timings %{deps})))))

(rule (alias quick) (action (diff modelyze.exp modelyze.out)))

(rule (alias quick)
  (action (diff modelyze.automaton.exp modelyze.automaton)))

(rule (alias quick)
  (action (diff modelyze.automaton.resolved.exp modelyze.automaton.resolved)))

(rule (alias quick)
  (action (diff modelyze.conflicts.exp modelyze.conflicts)))

(rule (target modelyze_stripped.mly) (deps modelyze.mly)
  (action
    (with-stderr-to modelyze_stripped.ignored
      (with-stdout-to modelyze_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets modelyze_stripped.log modelyze_stripped.mli modelyze_stripped.ml
    modelyze_stripped.stacklang modelyze_stripped.timings
    modelyze_stripped.scount modelyze_stripped.dcount)
  (deps modelyze_stripped.mly)
  (action
    (with-outputs-to modelyze_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to modelyze_stripped.timings %{deps})))))

(alias (name quick) (deps
                      modelyze_stripped.stacklang))

(rule (targets modelyze_stripped.cmi modelyze_stripped.mli.log)
  (deps modelyze_stripped.mli)
  (action
    (with-stdout-to modelyze_stripped.mli.dtimings
      (with-stderr-to modelyze_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c modelyze_stripped.mli)))))

(rule (targets modelyze_stripped.cmo modelyze_stripped.ml.log)
  (deps modelyze_stripped.ml modelyze_stripped.cmi)
  (action
    (with-stdout-to modelyze_stripped.ml.dtimings
      (with-stderr-to modelyze_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c modelyze_stripped.ml)))))

(rule (alias test)
  (action (diff modelyze_stripped.ml.log.exp modelyze_stripped.ml.log)))

(rule (target modulo.opp.out) (deps modulo.mly)
  (action
    (with-outputs-to modulo.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff modulo.opp.exp modulo.opp.out)))

(rule
  (targets modulo.out modulo.automaton modulo.automaton.resolved
    modulo.conflicts modulo.timings)
  (deps modulo.mly)
  (action
    (with-outputs-to modulo.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to modulo.timings %{deps})))))

(rule (alias quick) (action (diff modulo.exp modulo.out)))

(rule (alias quick) (action (diff modulo.automaton.exp modulo.automaton)))

(rule (alias quick)
  (action (diff modulo.automaton.resolved.exp modulo.automaton.resolved)))

(rule (alias quick) (action (diff modulo.conflicts.exp modulo.conflicts)))

(rule (target modulo_stripped.mly) (deps modulo.mly)
  (action
    (with-stderr-to modulo_stripped.ignored
      (with-stdout-to modulo_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets modulo_stripped.log modulo_stripped.mli modulo_stripped.ml
    modulo_stripped.stacklang modulo_stripped.timings modulo_stripped.scount
    modulo_stripped.dcount)
  (deps modulo_stripped.mly)
  (action
    (with-outputs-to modulo_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to modulo_stripped.timings %{deps})))))

(alias (name quick) (deps
                      modulo_stripped.stacklang))

(rule (targets modulo_stripped.cmi modulo_stripped.mli.log)
  (deps modulo_stripped.mli)
  (action
    (with-stdout-to modulo_stripped.mli.dtimings
      (with-stderr-to modulo_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c modulo_stripped.mli)))))

(rule (targets modulo_stripped.cmo modulo_stripped.ml.log)
  (deps modulo_stripped.ml modulo_stripped.cmi)
  (action
    (with-stdout-to modulo_stripped.ml.dtimings
      (with-stderr-to modulo_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c modulo_stripped.ml)))))

(rule (alias test)
  (action (diff modulo_stripped.ml.log.exp modulo_stripped.ml.log)))

(rule (target morbig.0.9.1-parser.opp.out) (deps morbig.0.9.1-parser.mly)
  (action
    (with-outputs-to morbig.0.9.1-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff morbig.0.9.1-parser.opp.exp morbig.0.9.1-parser.opp.out)))

(rule
  (targets morbig.0.9.1-parser.out morbig.0.9.1-parser.automaton
    morbig.0.9.1-parser.automaton.resolved morbig.0.9.1-parser.conflicts
    morbig.0.9.1-parser.timings)
  (deps morbig.0.9.1-parser.mly)
  (action
    (with-outputs-to morbig.0.9.1-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to morbig.0.9.1-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff morbig.0.9.1-parser.exp morbig.0.9.1-parser.out)))

(rule (alias quick)
  (action
    (diff morbig.0.9.1-parser.automaton.exp morbig.0.9.1-parser.automaton)))

(rule (alias quick)
  (action
    (diff morbig.0.9.1-parser.automaton.resolved.exp
      morbig.0.9.1-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff morbig.0.9.1-parser.conflicts.exp morbig.0.9.1-parser.conflicts)))

(rule (target morbig_0_9_1-parser_stripped.mly)
  (deps morbig.0.9.1-parser.mly)
  (action
    (with-stderr-to morbig_0_9_1-parser_stripped.ignored
      (with-stdout-to morbig_0_9_1-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets morbig_0_9_1-parser_stripped.log morbig_0_9_1-parser_stripped.mli
    morbig_0_9_1-parser_stripped.ml morbig_0_9_1-parser_stripped.stacklang
    morbig_0_9_1-parser_stripped.timings morbig_0_9_1-parser_stripped.scount
    morbig_0_9_1-parser_stripped.dcount)
  (deps morbig_0_9_1-parser_stripped.mly)
  (action
    (with-outputs-to morbig_0_9_1-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to morbig_0_9_1-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      morbig_0_9_1-parser_stripped.stacklang))

(rule
  (targets morbig_0_9_1-parser_stripped.cmi
    morbig_0_9_1-parser_stripped.mli.log)
  (deps morbig_0_9_1-parser_stripped.mli)
  (action
    (with-stdout-to morbig_0_9_1-parser_stripped.mli.dtimings
      (with-stderr-to morbig_0_9_1-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          morbig_0_9_1-parser_stripped.mli)))))

(rule
  (targets morbig_0_9_1-parser_stripped.cmo
    morbig_0_9_1-parser_stripped.ml.log)
  (deps morbig_0_9_1-parser_stripped.ml morbig_0_9_1-parser_stripped.cmi)
  (action
    (with-stdout-to morbig_0_9_1-parser_stripped.ml.dtimings
      (with-stderr-to morbig_0_9_1-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c morbig_0_9_1-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff morbig_0_9_1-parser_stripped.ml.log.exp
      morbig_0_9_1-parser_stripped.ml.log)))

(rule (target mpri.opp.out) (deps mpri.mly)
  (action
    (with-outputs-to mpri.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff mpri.opp.exp mpri.opp.out)))

(rule
  (targets mpri.out mpri.automaton mpri.automaton.resolved mpri.conflicts
    mpri.timings)
  (deps mpri.mly)
  (action
    (with-outputs-to mpri.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to mpri.timings %{deps})))))

(rule (alias quick) (action (diff mpri.exp mpri.out)))

(rule (alias quick) (action (diff mpri.automaton.exp mpri.automaton)))

(rule (alias quick)
  (action (diff mpri.automaton.resolved.exp mpri.automaton.resolved)))

(rule (alias quick) (action (diff mpri.conflicts.exp mpri.conflicts)))

(rule (target mpri_stripped.mly) (deps mpri.mly)
  (action
    (with-stderr-to mpri_stripped.ignored
      (with-stdout-to mpri_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets mpri_stripped.log mpri_stripped.mli mpri_stripped.ml
    mpri_stripped.stacklang mpri_stripped.timings mpri_stripped.scount
    mpri_stripped.dcount)
  (deps mpri_stripped.mly)
  (action
    (with-outputs-to mpri_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to mpri_stripped.timings %{deps})))))

(alias (name quick) (deps
                      mpri_stripped.stacklang))

(rule (targets mpri_stripped.cmi mpri_stripped.mli.log)
  (deps mpri_stripped.mli)
  (action
    (with-stdout-to mpri_stripped.mli.dtimings
      (with-stderr-to mpri_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c mpri_stripped.mli)))))

(rule (targets mpri_stripped.cmo mpri_stripped.ml.log)
  (deps mpri_stripped.ml mpri_stripped.cmi)
  (action
    (with-stdout-to mpri_stripped.ml.dtimings
      (with-stderr-to mpri_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c mpri_stripped.ml)))))

(rule (alias test)
  (action (diff mpri_stripped.ml.log.exp mpri_stripped.ml.log)))

(rule (target multi-token-alias-0.opp.out)
  (deps multi-token-alias-0.mly multi-token-alias-1.mly
    multi-token-alias-2.mly multi-token-alias-3.mly)
  (action
    (with-outputs-to multi-token-alias-0.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base multi-token-alias-0 --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff multi-token-alias-0.opp.exp multi-token-alias-0.opp.out)))

(rule
  (targets multi-token-alias-0.out multi-token-alias-0.automaton
    multi-token-alias-0.automaton.resolved multi-token-alias-0.conflicts
    multi-token-alias-0.timings)
  (deps multi-token-alias-0.mly multi-token-alias-1.mly
    multi-token-alias-2.mly multi-token-alias-3.mly)
  (action
    (with-outputs-to multi-token-alias-0.out
      (with-accepted-exit-codes 0
        (run menhir --base multi-token-alias-0 --table --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to
          multi-token-alias-0.timings %{deps})))))

(rule (alias quick)
  (action (diff multi-token-alias-0.exp multi-token-alias-0.out)))

(rule (alias quick)
  (action
    (diff multi-token-alias-0.automaton.exp multi-token-alias-0.automaton)))

(rule (alias quick)
  (action
    (diff multi-token-alias-0.automaton.resolved.exp
      multi-token-alias-0.automaton.resolved)))

(rule (alias quick)
  (action
    (diff multi-token-alias-0.conflicts.exp multi-token-alias-0.conflicts)))

(rule (target multi-token-alias-0_stripped.mly)
  (deps multi-token-alias-0.mly multi-token-alias-1.mly
    multi-token-alias-2.mly multi-token-alias-3.mly)
  (action
    (with-stderr-to multi-token-alias-0_stripped.ignored
      (with-stdout-to multi-token-alias-0_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base multi-token-alias-0 --only-preprocess-uu
            %{deps}))))))

(rule
  (targets multi-token-alias-0_stripped.log multi-token-alias-0_stripped.mli
    multi-token-alias-0_stripped.ml multi-token-alias-0_stripped.stacklang
    multi-token-alias-0_stripped.timings multi-token-alias-0_stripped.scount
    multi-token-alias-0_stripped.dcount)
  (deps multi-token-alias-0_stripped.mly)
  (action
    (with-outputs-to multi-token-alias-0_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to multi-token-alias-0_stripped.timings %{deps})))))

(alias (name quick) (deps
                      multi-token-alias-0_stripped.stacklang))

(rule
  (targets multi-token-alias-0_stripped.cmi
    multi-token-alias-0_stripped.mli.log)
  (deps multi-token-alias-0_stripped.mli)
  (action
    (with-stdout-to multi-token-alias-0_stripped.mli.dtimings
      (with-stderr-to multi-token-alias-0_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          multi-token-alias-0_stripped.mli)))))

(rule
  (targets multi-token-alias-0_stripped.cmo
    multi-token-alias-0_stripped.ml.log)
  (deps multi-token-alias-0_stripped.ml multi-token-alias-0_stripped.cmi)
  (action
    (with-stdout-to multi-token-alias-0_stripped.ml.dtimings
      (with-stderr-to multi-token-alias-0_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c multi-token-alias-0_stripped.ml)))))

(rule (alias test)
  (action
    (diff multi-token-alias-0_stripped.ml.log.exp
      multi-token-alias-0_stripped.ml.log)))

(rule (target multiple-functor.opp.out) (deps multiple-functor.mly)
  (action
    (with-outputs-to multiple-functor.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff multiple-functor.opp.exp multiple-functor.opp.out)))

(rule
  (targets multiple-functor.out multiple-functor.automaton
    multiple-functor.automaton.resolved multiple-functor.conflicts
    multiple-functor.timings)
  (deps multiple-functor.mly)
  (action
    (with-outputs-to multiple-functor.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to multiple-functor.timings %{deps})))))

(rule (alias quick)
  (action (diff multiple-functor.exp multiple-functor.out)))

(rule (alias quick)
  (action (diff multiple-functor.automaton.exp multiple-functor.automaton)))

(rule (alias quick)
  (action
    (diff multiple-functor.automaton.resolved.exp
      multiple-functor.automaton.resolved)))

(rule (alias quick)
  (action (diff multiple-functor.conflicts.exp multiple-functor.conflicts)))

(rule (target multiple-functor_stripped.mly) (deps multiple-functor.mly)
  (action
    (with-stderr-to multiple-functor_stripped.ignored
      (with-stdout-to multiple-functor_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets multiple-functor_stripped.log multiple-functor_stripped.mli
    multiple-functor_stripped.ml multiple-functor_stripped.stacklang
    multiple-functor_stripped.timings multiple-functor_stripped.scount
    multiple-functor_stripped.dcount)
  (deps multiple-functor_stripped.mly)
  (action
    (with-outputs-to multiple-functor_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to multiple-functor_stripped.timings %{deps})))))

(alias (name quick) (deps
                      multiple-functor_stripped.stacklang))

(rule
  (targets multiple-functor_stripped.cmi multiple-functor_stripped.mli.log)
  (deps multiple-functor_stripped.mli)
  (action
    (with-stdout-to multiple-functor_stripped.mli.dtimings
      (with-stderr-to multiple-functor_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c multiple-functor_stripped.mli)))))

(rule
  (targets multiple-functor_stripped.cmo multiple-functor_stripped.ml.log)
  (deps multiple-functor_stripped.ml multiple-functor_stripped.cmi)
  (action
    (with-stdout-to multiple-functor_stripped.ml.dtimings
      (with-stderr-to multiple-functor_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c multiple-functor_stripped.ml)))))

(rule (alias test)
  (action
    (diff multiple-functor_stripped.ml.log.exp
      multiple-functor_stripped.ml.log)))

(rule (target name-clash-1.opp.out) (deps name-clash-1.mly name-clash-2.mly)
  (action
    (with-outputs-to name-clash-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base name-clash-1 --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff name-clash-1.opp.exp name-clash-1.opp.out)))

(rule
  (targets name-clash-1.out name-clash-1.automaton
    name-clash-1.automaton.resolved name-clash-1.conflicts
    name-clash-1.timings)
  (deps name-clash-1.mly name-clash-2.mly)
  (action
    (with-outputs-to name-clash-1.out
      (with-accepted-exit-codes 0
        (run menhir --base name-clash-1 --table --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to name-clash-1.timings
          %{deps})))))

(rule (alias quick) (action (diff name-clash-1.exp name-clash-1.out)))

(rule (alias quick)
  (action (diff name-clash-1.automaton.exp name-clash-1.automaton)))

(rule (alias quick)
  (action
    (diff name-clash-1.automaton.resolved.exp
      name-clash-1.automaton.resolved)))

(rule (alias quick)
  (action (diff name-clash-1.conflicts.exp name-clash-1.conflicts)))

(rule (target name-clash-1_stripped.mly)
  (deps name-clash-1.mly name-clash-2.mly)
  (action
    (with-stderr-to name-clash-1_stripped.ignored
      (with-stdout-to name-clash-1_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base name-clash-1 --only-preprocess-uu %{deps}))))))

(rule
  (targets name-clash-1_stripped.log name-clash-1_stripped.mli
    name-clash-1_stripped.ml name-clash-1_stripped.stacklang
    name-clash-1_stripped.timings name-clash-1_stripped.scount
    name-clash-1_stripped.dcount)
  (deps name-clash-1_stripped.mly)
  (action
    (with-outputs-to name-clash-1_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to name-clash-1_stripped.timings %{deps})))))

(alias (name quick) (deps
                      name-clash-1_stripped.stacklang))

(rule (targets name-clash-1_stripped.cmi name-clash-1_stripped.mli.log)
  (deps name-clash-1_stripped.mli)
  (action
    (with-stdout-to name-clash-1_stripped.mli.dtimings
      (with-stderr-to name-clash-1_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c name-clash-1_stripped.mli)))))

(rule (targets name-clash-1_stripped.cmo name-clash-1_stripped.ml.log)
  (deps name-clash-1_stripped.ml name-clash-1_stripped.cmi)
  (action
    (with-stdout-to name-clash-1_stripped.ml.dtimings
      (with-stderr-to name-clash-1_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c name-clash-1_stripped.ml)))))

(rule (alias test)
  (action
    (diff name-clash-1_stripped.ml.log.exp name-clash-1_stripped.ml.log)))

(rule (target netsem.opp.out) (deps netsem.mly)
  (action
    (with-outputs-to netsem.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff netsem.opp.exp netsem.opp.out)))

(rule
  (targets netsem.out netsem.automaton netsem.automaton.resolved
    netsem.conflicts netsem.timings)
  (deps netsem.mly)
  (action
    (with-outputs-to netsem.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to netsem.timings %{deps})))))

(rule (alias quick) (action (diff netsem.exp netsem.out)))

(rule (alias quick) (action (diff netsem.automaton.exp netsem.automaton)))

(rule (alias quick)
  (action (diff netsem.automaton.resolved.exp netsem.automaton.resolved)))

(rule (alias quick) (action (diff netsem.conflicts.exp netsem.conflicts)))

(rule (target netsem_stripped.mly) (deps netsem.mly)
  (action
    (with-stderr-to netsem_stripped.ignored
      (with-stdout-to netsem_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets netsem_stripped.log netsem_stripped.mli netsem_stripped.ml
    netsem_stripped.stacklang netsem_stripped.timings netsem_stripped.scount
    netsem_stripped.dcount)
  (deps netsem_stripped.mly)
  (action
    (with-outputs-to netsem_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to netsem_stripped.timings %{deps})))))

(alias (name quick) (deps
                      netsem_stripped.stacklang))

(rule (targets netsem_stripped.cmi netsem_stripped.mli.log)
  (deps netsem_stripped.mli)
  (action
    (with-stdout-to netsem_stripped.mli.dtimings
      (with-stderr-to netsem_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c netsem_stripped.mli)))))

(rule (targets netsem_stripped.cmo netsem_stripped.ml.log)
  (deps netsem_stripped.ml netsem_stripped.cmi)
  (action
    (with-stdout-to netsem_stripped.ml.dtimings
      (with-stderr-to netsem_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c netsem_stripped.ml)))))

(rule (alias test)
  (action (diff netsem_stripped.ml.log.exp netsem_stripped.ml.log)))

(rule (target nexus.opp.out) (deps nexus.mly)
  (action
    (with-outputs-to nexus.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff nexus.opp.exp nexus.opp.out)))

(rule
  (targets nexus.out nexus.automaton nexus.automaton.resolved nexus.conflicts
    nexus.timings)
  (deps nexus.mly)
  (action
    (with-outputs-to nexus.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to nexus.timings %{deps})))))

(rule (alias quick) (action (diff nexus.exp nexus.out)))

(rule (alias quick) (action (diff nexus.automaton.exp nexus.automaton)))

(rule (alias quick)
  (action (diff nexus.automaton.resolved.exp nexus.automaton.resolved)))

(rule (alias quick) (action (diff nexus.conflicts.exp nexus.conflicts)))

(rule (target nexus_stripped.mly) (deps nexus.mly)
  (action
    (with-stderr-to nexus_stripped.ignored
      (with-stdout-to nexus_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets nexus_stripped.log nexus_stripped.mli nexus_stripped.ml
    nexus_stripped.stacklang nexus_stripped.timings nexus_stripped.scount
    nexus_stripped.dcount)
  (deps nexus_stripped.mly)
  (action
    (with-outputs-to nexus_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to nexus_stripped.timings %{deps})))))

(alias (name quick) (deps
                      nexus_stripped.stacklang))

(rule (targets nexus_stripped.cmi nexus_stripped.mli.log)
  (deps nexus_stripped.mli)
  (action
    (with-stdout-to nexus_stripped.mli.dtimings
      (with-stderr-to nexus_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c nexus_stripped.mli)))))

(rule (targets nexus_stripped.cmo nexus_stripped.ml.log)
  (deps nexus_stripped.ml nexus_stripped.cmi)
  (action
    (with-stdout-to nexus_stripped.ml.dtimings
      (with-stderr-to nexus_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c nexus_stripped.ml)))))

(rule (alias test)
  (action (diff nexus_stripped.ml.log.exp nexus_stripped.ml.log)))

(rule (target nml-ip-parser.opp.out) (deps nml-ip-parser.mly)
  (action
    (with-outputs-to nml-ip-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff nml-ip-parser.opp.exp nml-ip-parser.opp.out)))

(rule
  (targets nml-ip-parser.out nml-ip-parser.automaton
    nml-ip-parser.automaton.resolved nml-ip-parser.conflicts
    nml-ip-parser.timings)
  (deps nml-ip-parser.mly)
  (action
    (with-outputs-to nml-ip-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to nml-ip-parser.timings %{deps})))))

(rule (alias quick) (action (diff nml-ip-parser.exp nml-ip-parser.out)))

(rule (alias quick)
  (action (diff nml-ip-parser.automaton.exp nml-ip-parser.automaton)))

(rule (alias quick)
  (action
    (diff nml-ip-parser.automaton.resolved.exp
      nml-ip-parser.automaton.resolved)))

(rule (alias quick)
  (action (diff nml-ip-parser.conflicts.exp nml-ip-parser.conflicts)))

(rule (target nml-ip-parser_stripped.mly) (deps nml-ip-parser.mly)
  (action
    (with-stderr-to nml-ip-parser_stripped.ignored
      (with-stdout-to nml-ip-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets nml-ip-parser_stripped.log nml-ip-parser_stripped.mli
    nml-ip-parser_stripped.ml nml-ip-parser_stripped.stacklang
    nml-ip-parser_stripped.timings nml-ip-parser_stripped.scount
    nml-ip-parser_stripped.dcount)
  (deps nml-ip-parser_stripped.mly)
  (action
    (with-outputs-to nml-ip-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to nml-ip-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      nml-ip-parser_stripped.stacklang))

(rule (targets nml-ip-parser_stripped.cmi nml-ip-parser_stripped.mli.log)
  (deps nml-ip-parser_stripped.mli)
  (action
    (with-stdout-to nml-ip-parser_stripped.mli.dtimings
      (with-stderr-to nml-ip-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c nml-ip-parser_stripped.mli)))))

(rule (targets nml-ip-parser_stripped.cmo nml-ip-parser_stripped.ml.log)
  (deps nml-ip-parser_stripped.ml nml-ip-parser_stripped.cmi)
  (action
    (with-stdout-to nml-ip-parser_stripped.ml.dtimings
      (with-stderr-to nml-ip-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c nml-ip-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff nml-ip-parser_stripped.ml.log.exp nml-ip-parser_stripped.ml.log)))

(rule (target no-end-of-stream-conflict.opp.out)
  (deps no-end-of-stream-conflict.mly)
  (action
    (with-outputs-to no-end-of-stream-conflict.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff no-end-of-stream-conflict.opp.exp
      no-end-of-stream-conflict.opp.out)))

(rule
  (targets no-end-of-stream-conflict.out no-end-of-stream-conflict.automaton
    no-end-of-stream-conflict.automaton.resolved
    no-end-of-stream-conflict.conflicts no-end-of-stream-conflict.timings)
  (deps no-end-of-stream-conflict.mly)
  (action
    (with-outputs-to no-end-of-stream-conflict.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to no-end-of-stream-conflict.timings %{deps})))))

(rule (alias quick)
  (action (diff no-end-of-stream-conflict.exp no-end-of-stream-conflict.out)))

(rule (alias quick)
  (action
    (diff no-end-of-stream-conflict.automaton.exp
      no-end-of-stream-conflict.automaton)))

(rule (alias quick)
  (action
    (diff no-end-of-stream-conflict.automaton.resolved.exp
      no-end-of-stream-conflict.automaton.resolved)))

(rule (alias quick)
  (action
    (diff no-end-of-stream-conflict.conflicts.exp
      no-end-of-stream-conflict.conflicts)))

(rule (target no-end-of-stream-conflict_stripped.mly)
  (deps no-end-of-stream-conflict.mly)
  (action
    (with-stderr-to no-end-of-stream-conflict_stripped.ignored
      (with-stdout-to no-end-of-stream-conflict_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets no-end-of-stream-conflict_stripped.log
    no-end-of-stream-conflict_stripped.mli
    no-end-of-stream-conflict_stripped.ml
    no-end-of-stream-conflict_stripped.stacklang
    no-end-of-stream-conflict_stripped.timings
    no-end-of-stream-conflict_stripped.scount
    no-end-of-stream-conflict_stripped.dcount)
  (deps no-end-of-stream-conflict_stripped.mly)
  (action
    (with-outputs-to no-end-of-stream-conflict_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to no-end-of-stream-conflict_stripped.timings %{deps})))))

(alias (name quick) (deps
                      no-end-of-stream-conflict_stripped.stacklang))

(rule
  (targets no-end-of-stream-conflict_stripped.cmi
    no-end-of-stream-conflict_stripped.mli.log)
  (deps no-end-of-stream-conflict_stripped.mli)
  (action
    (with-stdout-to no-end-of-stream-conflict_stripped.mli.dtimings
      (with-stderr-to no-end-of-stream-conflict_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          no-end-of-stream-conflict_stripped.mli)))))

(rule
  (targets no-end-of-stream-conflict_stripped.cmo
    no-end-of-stream-conflict_stripped.ml.log)
  (deps no-end-of-stream-conflict_stripped.ml
    no-end-of-stream-conflict_stripped.cmi)
  (action
    (with-stdout-to no-end-of-stream-conflict_stripped.ml.dtimings
      (with-stderr-to no-end-of-stream-conflict_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          no-end-of-stream-conflict_stripped.ml)))))

(rule (alias test)
  (action
    (diff no-end-of-stream-conflict_stripped.ml.log.exp
      no-end-of-stream-conflict_stripped.ml.log)))

(rule (target no_future.opp.out) (deps no_future.mly)
  (action
    (with-outputs-to no_future.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff no_future.opp.exp no_future.opp.out)))

(rule
  (targets no_future.out no_future.automaton no_future.automaton.resolved
    no_future.conflicts no_future.timings)
  (deps no_future.mly)
  (action
    (with-outputs-to no_future.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to no_future.timings %{deps})))))

(rule (alias quick) (action (diff no_future.exp no_future.out)))

(rule (alias quick)
  (action (diff no_future.automaton.exp no_future.automaton)))

(rule (alias quick)
  (action
    (diff no_future.automaton.resolved.exp no_future.automaton.resolved)))

(rule (alias quick)
  (action (diff no_future.conflicts.exp no_future.conflicts)))

(rule (target no_future_stripped.mly) (deps no_future.mly)
  (action
    (with-stderr-to no_future_stripped.ignored
      (with-stdout-to no_future_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets no_future_stripped.log no_future_stripped.mli
    no_future_stripped.ml no_future_stripped.stacklang
    no_future_stripped.timings no_future_stripped.scount
    no_future_stripped.dcount)
  (deps no_future_stripped.mly)
  (action
    (with-outputs-to no_future_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to no_future_stripped.timings %{deps})))))

(alias (name quick) (deps
                      no_future_stripped.stacklang))

(rule (targets no_future_stripped.cmi no_future_stripped.mli.log)
  (deps no_future_stripped.mli)
  (action
    (with-stdout-to no_future_stripped.mli.dtimings
      (with-stderr-to no_future_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c no_future_stripped.mli)))))

(rule (targets no_future_stripped.cmo no_future_stripped.ml.log)
  (deps no_future_stripped.ml no_future_stripped.cmi)
  (action
    (with-stdout-to no_future_stripped.ml.dtimings
      (with-stderr-to no_future_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c no_future_stripped.ml)))))

(rule (alias test)
  (action (diff no_future_stripped.ml.log.exp no_future_stripped.ml.log)))

(rule (target nunchaku.0.6-Parser.opp.out) (deps nunchaku.0.6-Parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff nunchaku.0.6-Parser.opp.exp nunchaku.0.6-Parser.opp.out)))

(rule
  (targets nunchaku.0.6-Parser.out nunchaku.0.6-Parser.automaton
    nunchaku.0.6-Parser.automaton.resolved nunchaku.0.6-Parser.conflicts
    nunchaku.0.6-Parser.timings)
  (deps nunchaku.0.6-Parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-Parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to nunchaku.0.6-Parser.timings %{deps})))))

(rule (alias quick)
  (action (diff nunchaku.0.6-Parser.exp nunchaku.0.6-Parser.out)))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-Parser.automaton.exp nunchaku.0.6-Parser.automaton)))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-Parser.automaton.resolved.exp
      nunchaku.0.6-Parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-Parser.conflicts.exp nunchaku.0.6-Parser.conflicts)))

(rule (target nunchaku_0_6-Parser_stripped.mly)
  (deps nunchaku.0.6-Parser.mly)
  (action
    (with-stderr-to nunchaku_0_6-Parser_stripped.ignored
      (with-stdout-to nunchaku_0_6-Parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets nunchaku_0_6-Parser_stripped.log nunchaku_0_6-Parser_stripped.mli
    nunchaku_0_6-Parser_stripped.ml nunchaku_0_6-Parser_stripped.stacklang
    nunchaku_0_6-Parser_stripped.timings nunchaku_0_6-Parser_stripped.scount
    nunchaku_0_6-Parser_stripped.dcount)
  (deps nunchaku_0_6-Parser_stripped.mly)
  (action
    (with-outputs-to nunchaku_0_6-Parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to nunchaku_0_6-Parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      nunchaku_0_6-Parser_stripped.stacklang))

(rule
  (targets nunchaku_0_6-Parser_stripped.cmi
    nunchaku_0_6-Parser_stripped.mli.log)
  (deps nunchaku_0_6-Parser_stripped.mli)
  (action
    (with-stdout-to nunchaku_0_6-Parser_stripped.mli.dtimings
      (with-stderr-to nunchaku_0_6-Parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          nunchaku_0_6-Parser_stripped.mli)))))

(rule
  (targets nunchaku_0_6-Parser_stripped.cmo
    nunchaku_0_6-Parser_stripped.ml.log)
  (deps nunchaku_0_6-Parser_stripped.ml nunchaku_0_6-Parser_stripped.cmi)
  (action
    (with-stdout-to nunchaku_0_6-Parser_stripped.ml.dtimings
      (with-stderr-to nunchaku_0_6-Parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c nunchaku_0_6-Parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff nunchaku_0_6-Parser_stripped.ml.log.exp
      nunchaku_0_6-Parser_stripped.ml.log)))

(rule (target nunchaku.0.6-TPTP_parser.opp.out)
  (deps nunchaku.0.6-TPTP_parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-TPTP_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-TPTP_parser.opp.exp nunchaku.0.6-TPTP_parser.opp.out)))

(rule
  (targets nunchaku.0.6-TPTP_parser.out nunchaku.0.6-TPTP_parser.automaton
    nunchaku.0.6-TPTP_parser.automaton.resolved
    nunchaku.0.6-TPTP_parser.conflicts nunchaku.0.6-TPTP_parser.timings)
  (deps nunchaku.0.6-TPTP_parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-TPTP_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to nunchaku.0.6-TPTP_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff nunchaku.0.6-TPTP_parser.exp nunchaku.0.6-TPTP_parser.out)))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-TPTP_parser.automaton.exp
      nunchaku.0.6-TPTP_parser.automaton)))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-TPTP_parser.automaton.resolved.exp
      nunchaku.0.6-TPTP_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-TPTP_parser.conflicts.exp
      nunchaku.0.6-TPTP_parser.conflicts)))

(rule (target nunchaku_0_6-TPTP_parser_stripped.mly)
  (deps nunchaku.0.6-TPTP_parser.mly)
  (action
    (with-stderr-to nunchaku_0_6-TPTP_parser_stripped.ignored
      (with-stdout-to nunchaku_0_6-TPTP_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets nunchaku_0_6-TPTP_parser_stripped.log
    nunchaku_0_6-TPTP_parser_stripped.mli
    nunchaku_0_6-TPTP_parser_stripped.ml
    nunchaku_0_6-TPTP_parser_stripped.stacklang
    nunchaku_0_6-TPTP_parser_stripped.timings
    nunchaku_0_6-TPTP_parser_stripped.scount
    nunchaku_0_6-TPTP_parser_stripped.dcount)
  (deps nunchaku_0_6-TPTP_parser_stripped.mly)
  (action
    (with-outputs-to nunchaku_0_6-TPTP_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to nunchaku_0_6-TPTP_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      nunchaku_0_6-TPTP_parser_stripped.stacklang))

(rule
  (targets nunchaku_0_6-TPTP_parser_stripped.cmi
    nunchaku_0_6-TPTP_parser_stripped.mli.log)
  (deps nunchaku_0_6-TPTP_parser_stripped.mli)
  (action
    (with-stdout-to nunchaku_0_6-TPTP_parser_stripped.mli.dtimings
      (with-stderr-to nunchaku_0_6-TPTP_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          nunchaku_0_6-TPTP_parser_stripped.mli)))))

(rule
  (targets nunchaku_0_6-TPTP_parser_stripped.cmo
    nunchaku_0_6-TPTP_parser_stripped.ml.log)
  (deps nunchaku_0_6-TPTP_parser_stripped.ml
    nunchaku_0_6-TPTP_parser_stripped.cmi)
  (action
    (with-stdout-to nunchaku_0_6-TPTP_parser_stripped.ml.dtimings
      (with-stderr-to nunchaku_0_6-TPTP_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          nunchaku_0_6-TPTP_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff nunchaku_0_6-TPTP_parser_stripped.ml.log.exp
      nunchaku_0_6-TPTP_parser_stripped.ml.log)))

(rule (target nunchaku.0.6-Tip_parser.opp.out)
  (deps nunchaku.0.6-Tip_parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-Tip_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-Tip_parser.opp.exp nunchaku.0.6-Tip_parser.opp.out)))

(rule
  (targets nunchaku.0.6-Tip_parser.out nunchaku.0.6-Tip_parser.automaton
    nunchaku.0.6-Tip_parser.automaton.resolved
    nunchaku.0.6-Tip_parser.conflicts nunchaku.0.6-Tip_parser.timings)
  (deps nunchaku.0.6-Tip_parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-Tip_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to nunchaku.0.6-Tip_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff nunchaku.0.6-Tip_parser.exp nunchaku.0.6-Tip_parser.out)))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-Tip_parser.automaton.exp
      nunchaku.0.6-Tip_parser.automaton)))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-Tip_parser.automaton.resolved.exp
      nunchaku.0.6-Tip_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff nunchaku.0.6-Tip_parser.conflicts.exp
      nunchaku.0.6-Tip_parser.conflicts)))

(rule (target nunchaku_0_6-Tip_parser_stripped.mly)
  (deps nunchaku.0.6-Tip_parser.mly)
  (action
    (with-stderr-to nunchaku_0_6-Tip_parser_stripped.ignored
      (with-stdout-to nunchaku_0_6-Tip_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets nunchaku_0_6-Tip_parser_stripped.log
    nunchaku_0_6-Tip_parser_stripped.mli nunchaku_0_6-Tip_parser_stripped.ml
    nunchaku_0_6-Tip_parser_stripped.stacklang
    nunchaku_0_6-Tip_parser_stripped.timings
    nunchaku_0_6-Tip_parser_stripped.scount
    nunchaku_0_6-Tip_parser_stripped.dcount)
  (deps nunchaku_0_6-Tip_parser_stripped.mly)
  (action
    (with-outputs-to nunchaku_0_6-Tip_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to nunchaku_0_6-Tip_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      nunchaku_0_6-Tip_parser_stripped.stacklang))

(rule
  (targets nunchaku_0_6-Tip_parser_stripped.cmi
    nunchaku_0_6-Tip_parser_stripped.mli.log)
  (deps nunchaku_0_6-Tip_parser_stripped.mli)
  (action
    (with-stdout-to nunchaku_0_6-Tip_parser_stripped.mli.dtimings
      (with-stderr-to nunchaku_0_6-Tip_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          nunchaku_0_6-Tip_parser_stripped.mli)))))

(rule
  (targets nunchaku_0_6-Tip_parser_stripped.cmo
    nunchaku_0_6-Tip_parser_stripped.ml.log)
  (deps nunchaku_0_6-Tip_parser_stripped.ml
    nunchaku_0_6-Tip_parser_stripped.cmi)
  (action
    (with-stdout-to nunchaku_0_6-Tip_parser_stripped.ml.dtimings
      (with-stderr-to nunchaku_0_6-Tip_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          nunchaku_0_6-Tip_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff nunchaku_0_6-Tip_parser_stripped.ml.log.exp
      nunchaku_0_6-Tip_parser_stripped.ml.log)))

(rule (target obc.opp.out) (deps obc.mly)
  (action
    (with-outputs-to obc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff obc.opp.exp obc.opp.out)))

(rule
  (targets obc.out obc.automaton obc.automaton.resolved obc.conflicts
    obc.timings)
  (deps obc.mly)
  (action
    (with-outputs-to obc.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to obc.timings %{deps})))))

(rule (alias quick) (action (diff obc.exp obc.out)))

(rule (alias quick) (action (diff obc.automaton.exp obc.automaton)))

(rule (alias quick)
  (action (diff obc.automaton.resolved.exp obc.automaton.resolved)))

(rule (alias quick) (action (diff obc.conflicts.exp obc.conflicts)))

(rule (target obc_stripped.mly) (deps obc.mly)
  (action
    (with-stderr-to obc_stripped.ignored
      (with-stdout-to obc_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets obc_stripped.log obc_stripped.mli obc_stripped.ml
    obc_stripped.stacklang obc_stripped.timings obc_stripped.scount
    obc_stripped.dcount)
  (deps obc_stripped.mly)
  (action
    (with-outputs-to obc_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to obc_stripped.timings %{deps})))))

(alias (name quick) (deps
                      obc_stripped.stacklang))

(rule (targets obc_stripped.cmi obc_stripped.mli.log) (deps obc_stripped.mli)
  (action
    (with-stdout-to obc_stripped.mli.dtimings
      (with-stderr-to obc_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c obc_stripped.mli)))))

(rule (targets obc_stripped.cmo obc_stripped.ml.log)
  (deps obc_stripped.ml obc_stripped.cmi)
  (action
    (with-stdout-to obc_stripped.ml.dtimings
      (with-stderr-to obc_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c obc_stripped.ml)))))

(rule (alias test)
  (action (diff obc_stripped.ml.log.exp obc_stripped.ml.log)))

(rule (target obc-sym.opp.out) (deps obc-sym.mly)
  (action
    (with-outputs-to obc-sym.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff obc-sym.opp.exp obc-sym.opp.out)))

(rule
  (targets obc-sym.out obc-sym.automaton obc-sym.automaton.resolved
    obc-sym.conflicts obc-sym.timings)
  (deps obc-sym.mly)
  (action
    (with-outputs-to obc-sym.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to obc-sym.timings %{deps})))))

(rule (alias quick) (action (diff obc-sym.exp obc-sym.out)))

(rule (alias quick) (action (diff obc-sym.automaton.exp obc-sym.automaton)))

(rule (alias quick)
  (action (diff obc-sym.automaton.resolved.exp obc-sym.automaton.resolved)))

(rule (alias quick) (action (diff obc-sym.conflicts.exp obc-sym.conflicts)))

(rule (target obc-sym_stripped.mly) (deps obc-sym.mly)
  (action
    (with-stderr-to obc-sym_stripped.ignored
      (with-stdout-to obc-sym_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets obc-sym_stripped.log obc-sym_stripped.mli obc-sym_stripped.ml
    obc-sym_stripped.stacklang obc-sym_stripped.timings
    obc-sym_stripped.scount obc-sym_stripped.dcount)
  (deps obc-sym_stripped.mly)
  (action
    (with-outputs-to obc-sym_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to obc-sym_stripped.timings %{deps})))))

(alias (name quick) (deps
                      obc-sym_stripped.stacklang))

(rule (targets obc-sym_stripped.cmi obc-sym_stripped.mli.log)
  (deps obc-sym_stripped.mli)
  (action
    (with-stdout-to obc-sym_stripped.mli.dtimings
      (with-stderr-to obc-sym_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c obc-sym_stripped.mli)))))

(rule (targets obc-sym_stripped.cmo obc-sym_stripped.ml.log)
  (deps obc-sym_stripped.ml obc-sym_stripped.cmi)
  (action
    (with-stdout-to obc-sym_stripped.ml.dtimings
      (with-stderr-to obc-sym_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c obc-sym_stripped.ml)))))

(rule (alias test)
  (action (diff obc-sym_stripped.ml.log.exp obc-sym_stripped.ml.log)))

(rule (target obelisk.0.3.2-zelus.opp.out) (deps obelisk.0.3.2-zelus.mly)
  (action
    (with-outputs-to obelisk.0.3.2-zelus.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff obelisk.0.3.2-zelus.opp.exp obelisk.0.3.2-zelus.opp.out)))

(rule
  (targets obelisk.0.3.2-zelus.out obelisk.0.3.2-zelus.automaton
    obelisk.0.3.2-zelus.automaton.resolved obelisk.0.3.2-zelus.conflicts
    obelisk.0.3.2-zelus.timings)
  (deps obelisk.0.3.2-zelus.mly)
  (action
    (with-outputs-to obelisk.0.3.2-zelus.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to obelisk.0.3.2-zelus.timings %{deps})))))

(rule (alias quick)
  (action (diff obelisk.0.3.2-zelus.exp obelisk.0.3.2-zelus.out)))

(rule (alias quick)
  (action
    (diff obelisk.0.3.2-zelus.automaton.exp obelisk.0.3.2-zelus.automaton)))

(rule (alias quick)
  (action
    (diff obelisk.0.3.2-zelus.automaton.resolved.exp
      obelisk.0.3.2-zelus.automaton.resolved)))

(rule (alias quick)
  (action
    (diff obelisk.0.3.2-zelus.conflicts.exp obelisk.0.3.2-zelus.conflicts)))

(rule (target obelisk_0_3_2-zelus_stripped.mly)
  (deps obelisk.0.3.2-zelus.mly)
  (action
    (with-stderr-to obelisk_0_3_2-zelus_stripped.ignored
      (with-stdout-to obelisk_0_3_2-zelus_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets obelisk_0_3_2-zelus_stripped.log obelisk_0_3_2-zelus_stripped.mli
    obelisk_0_3_2-zelus_stripped.ml obelisk_0_3_2-zelus_stripped.stacklang
    obelisk_0_3_2-zelus_stripped.timings obelisk_0_3_2-zelus_stripped.scount
    obelisk_0_3_2-zelus_stripped.dcount)
  (deps obelisk_0_3_2-zelus_stripped.mly)
  (action
    (with-outputs-to obelisk_0_3_2-zelus_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to obelisk_0_3_2-zelus_stripped.timings %{deps})))))

(alias (name quick) (deps
                      obelisk_0_3_2-zelus_stripped.stacklang))

(rule
  (targets obelisk_0_3_2-zelus_stripped.cmi
    obelisk_0_3_2-zelus_stripped.mli.log)
  (deps obelisk_0_3_2-zelus_stripped.mli)
  (action
    (with-stdout-to obelisk_0_3_2-zelus_stripped.mli.dtimings
      (with-stderr-to obelisk_0_3_2-zelus_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          obelisk_0_3_2-zelus_stripped.mli)))))

(rule
  (targets obelisk_0_3_2-zelus_stripped.cmo
    obelisk_0_3_2-zelus_stripped.ml.log)
  (deps obelisk_0_3_2-zelus_stripped.ml obelisk_0_3_2-zelus_stripped.cmi)
  (action
    (with-stdout-to obelisk_0_3_2-zelus_stripped.ml.dtimings
      (with-stderr-to obelisk_0_3_2-zelus_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c obelisk_0_3_2-zelus_stripped.ml)))))

(rule (alias test)
  (action
    (diff obelisk_0_3_2-zelus_stripped.ml.log.exp
      obelisk_0_3_2-zelus_stripped.ml.log)))

(rule (target ocaml.opp.out) (deps ocaml.mly)
  (action
    (with-outputs-to ocaml.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:ocaml.flags} %{deps})))))

(rule (alias quick) (action (diff ocaml.opp.exp ocaml.opp.out)))

(rule
  (targets ocaml.out ocaml.automaton ocaml.automaton.resolved ocaml.conflicts
    ocaml.timings)
  (deps ocaml.mly)
  (action
    (with-outputs-to ocaml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocaml.timings %{read-lines:ocaml.flags} %{deps})))))

(rule (alias quick) (action (diff ocaml.exp ocaml.out)))

(rule (alias quick) (action (diff ocaml.automaton.exp ocaml.automaton)))

(rule (alias quick)
  (action (diff ocaml.automaton.resolved.exp ocaml.automaton.resolved)))

(rule (alias quick) (action (diff ocaml.conflicts.exp ocaml.conflicts)))

(rule (target ocaml_stripped.mly) (deps ocaml.mly)
  (action
    (with-stderr-to ocaml_stripped.ignored
      (with-stdout-to ocaml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{read-lines:ocaml.flags} %{deps}))))))

(rule
  (targets ocaml_stripped.log ocaml_stripped.mli ocaml_stripped.ml
    ocaml_stripped.stacklang ocaml_stripped.timings ocaml_stripped.scount
    ocaml_stripped.dcount)
  (deps ocaml_stripped.mly)
  (action
    (with-outputs-to ocaml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocaml_stripped.timings %{read-lines:ocaml.flags}
          %{deps})))))

(alias (name quick) (deps
                      ocaml_stripped.stacklang))

(rule (targets ocaml_stripped.cmi ocaml_stripped.mli.log)
  (deps ocaml_stripped.mli)
  (action
    (with-stdout-to ocaml_stripped.mli.dtimings
      (with-stderr-to ocaml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ocaml_stripped.mli)))))

(rule (targets ocaml_stripped.cmo ocaml_stripped.ml.log)
  (deps ocaml_stripped.ml ocaml_stripped.cmi)
  (action
    (with-stdout-to ocaml_stripped.ml.dtimings
      (with-stderr-to ocaml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocaml_stripped.ml)))))

(rule (alias test)
  (action (diff ocaml_stripped.ml.log.exp ocaml_stripped.ml.log)))

(rule (target ocaml-base-compiler.4.07.1-parsecmm.opp.out)
  (deps ocaml-base-compiler.4.07.1-parsecmm.mly)
  (action
    (with-outputs-to ocaml-base-compiler.4.07.1-parsecmm.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.opp.exp
      ocaml-base-compiler.4.07.1-parsecmm.opp.out)))

(rule
  (targets ocaml-base-compiler.4.07.1-parsecmm.out
    ocaml-base-compiler.4.07.1-parsecmm.automaton
    ocaml-base-compiler.4.07.1-parsecmm.automaton.resolved
    ocaml-base-compiler.4.07.1-parsecmm.conflicts
    ocaml-base-compiler.4.07.1-parsecmm.timings)
  (deps ocaml-base-compiler.4.07.1-parsecmm.mly)
  (action
    (with-outputs-to ocaml-base-compiler.4.07.1-parsecmm.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocaml-base-compiler.4.07.1-parsecmm.timings %{deps})))))

(rule (alias quick)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.exp
      ocaml-base-compiler.4.07.1-parsecmm.out)))

(rule (alias quick)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.automaton.exp
      ocaml-base-compiler.4.07.1-parsecmm.automaton)))

(rule (alias quick)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.automaton.resolved.exp
      ocaml-base-compiler.4.07.1-parsecmm.automaton.resolved)))

(rule (alias quick)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.conflicts.exp
      ocaml-base-compiler.4.07.1-parsecmm.conflicts)))

(rule (target ocaml-base-compiler_4_07_1-parsecmm_stripped.mly)
  (deps ocaml-base-compiler.4.07.1-parsecmm.mly)
  (action
    (with-stderr-to ocaml-base-compiler_4_07_1-parsecmm_stripped.ignored
      (with-stdout-to ocaml-base-compiler_4_07_1-parsecmm_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocaml-base-compiler_4_07_1-parsecmm_stripped.log
    ocaml-base-compiler_4_07_1-parsecmm_stripped.mli
    ocaml-base-compiler_4_07_1-parsecmm_stripped.ml
    ocaml-base-compiler_4_07_1-parsecmm_stripped.stacklang
    ocaml-base-compiler_4_07_1-parsecmm_stripped.timings
    ocaml-base-compiler_4_07_1-parsecmm_stripped.scount
    ocaml-base-compiler_4_07_1-parsecmm_stripped.dcount)
  (deps ocaml-base-compiler_4_07_1-parsecmm_stripped.mly)
  (action
    (with-outputs-to ocaml-base-compiler_4_07_1-parsecmm_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocaml-base-compiler_4_07_1-parsecmm_stripped.timings
          %{deps})))))

(alias (name quick)
  (deps
    ocaml-base-compiler_4_07_1-parsecmm_stripped.stacklang))

(rule
  (targets ocaml-base-compiler_4_07_1-parsecmm_stripped.cmi
    ocaml-base-compiler_4_07_1-parsecmm_stripped.mli.log)
  (deps ocaml-base-compiler_4_07_1-parsecmm_stripped.mli)
  (action
    (with-stdout-to ocaml-base-compiler_4_07_1-parsecmm_stripped.mli.dtimings
      (with-stderr-to ocaml-base-compiler_4_07_1-parsecmm_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          ocaml-base-compiler_4_07_1-parsecmm_stripped.mli)))))

(rule
  (targets ocaml-base-compiler_4_07_1-parsecmm_stripped.cmo
    ocaml-base-compiler_4_07_1-parsecmm_stripped.ml.log)
  (deps ocaml-base-compiler_4_07_1-parsecmm_stripped.ml
    ocaml-base-compiler_4_07_1-parsecmm_stripped.cmi)
  (action
    (with-stdout-to ocaml-base-compiler_4_07_1-parsecmm_stripped.ml.dtimings
      (with-stderr-to ocaml-base-compiler_4_07_1-parsecmm_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          ocaml-base-compiler_4_07_1-parsecmm_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocaml-base-compiler_4_07_1-parsecmm_stripped.ml.log.exp
      ocaml-base-compiler_4_07_1-parsecmm_stripped.ml.log)))

(rule (target ocaml-debugger.opp.out) (deps ocaml-debugger.mly)
  (action
    (with-outputs-to ocaml-debugger.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ocaml-debugger.opp.exp ocaml-debugger.opp.out)))

(rule
  (targets ocaml-debugger.out ocaml-debugger.automaton
    ocaml-debugger.automaton.resolved ocaml-debugger.conflicts
    ocaml-debugger.timings)
  (deps ocaml-debugger.mly)
  (action
    (with-outputs-to ocaml-debugger.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocaml-debugger.timings %{deps})))))

(rule (alias quick) (action (diff ocaml-debugger.exp ocaml-debugger.out)))

(rule (alias quick)
  (action (diff ocaml-debugger.automaton.exp ocaml-debugger.automaton)))

(rule (alias quick)
  (action
    (diff ocaml-debugger.automaton.resolved.exp
      ocaml-debugger.automaton.resolved)))

(rule (alias quick)
  (action (diff ocaml-debugger.conflicts.exp ocaml-debugger.conflicts)))

(rule (target ocaml-debugger_stripped.mly) (deps ocaml-debugger.mly)
  (action
    (with-stderr-to ocaml-debugger_stripped.ignored
      (with-stdout-to ocaml-debugger_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocaml-debugger_stripped.log ocaml-debugger_stripped.mli
    ocaml-debugger_stripped.ml ocaml-debugger_stripped.stacklang
    ocaml-debugger_stripped.timings ocaml-debugger_stripped.scount
    ocaml-debugger_stripped.dcount)
  (deps ocaml-debugger_stripped.mly)
  (action
    (with-outputs-to ocaml-debugger_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocaml-debugger_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ocaml-debugger_stripped.stacklang))

(rule (targets ocaml-debugger_stripped.cmi ocaml-debugger_stripped.mli.log)
  (deps ocaml-debugger_stripped.mli)
  (action
    (with-stdout-to ocaml-debugger_stripped.mli.dtimings
      (with-stderr-to ocaml-debugger_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ocaml-debugger_stripped.mli)))))

(rule (targets ocaml-debugger_stripped.cmo ocaml-debugger_stripped.ml.log)
  (deps ocaml-debugger_stripped.ml ocaml-debugger_stripped.cmi)
  (action
    (with-stdout-to ocaml-debugger_stripped.ml.dtimings
      (with-stderr-to ocaml-debugger_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocaml-debugger_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocaml-debugger_stripped.ml.log.exp ocaml-debugger_stripped.ml.log)))

(rule (target ocaml-lex.opp.out) (deps ocaml-lex.mly)
  (action
    (with-outputs-to ocaml-lex.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff ocaml-lex.opp.exp ocaml-lex.opp.out)))

(rule
  (targets ocaml-lex.out ocaml-lex.automaton ocaml-lex.automaton.resolved
    ocaml-lex.conflicts ocaml-lex.timings)
  (deps ocaml-lex.mly)
  (action
    (with-outputs-to ocaml-lex.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocaml-lex.timings %{deps})))))

(rule (alias quick) (action (diff ocaml-lex.exp ocaml-lex.out)))

(rule (alias quick)
  (action (diff ocaml-lex.automaton.exp ocaml-lex.automaton)))

(rule (alias quick)
  (action
    (diff ocaml-lex.automaton.resolved.exp ocaml-lex.automaton.resolved)))

(rule (alias quick)
  (action (diff ocaml-lex.conflicts.exp ocaml-lex.conflicts)))

(rule (target ocaml-lex_stripped.mly) (deps ocaml-lex.mly)
  (action
    (with-stderr-to ocaml-lex_stripped.ignored
      (with-stdout-to ocaml-lex_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocaml-lex_stripped.log ocaml-lex_stripped.mli
    ocaml-lex_stripped.ml ocaml-lex_stripped.stacklang
    ocaml-lex_stripped.timings ocaml-lex_stripped.scount
    ocaml-lex_stripped.dcount)
  (deps ocaml-lex_stripped.mly)
  (action
    (with-outputs-to ocaml-lex_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocaml-lex_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ocaml-lex_stripped.stacklang))

(rule (targets ocaml-lex_stripped.cmi ocaml-lex_stripped.mli.log)
  (deps ocaml-lex_stripped.mli)
  (action
    (with-stdout-to ocaml-lex_stripped.mli.dtimings
      (with-stderr-to ocaml-lex_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ocaml-lex_stripped.mli)))))

(rule (targets ocaml-lex_stripped.cmo ocaml-lex_stripped.ml.log)
  (deps ocaml-lex_stripped.ml ocaml-lex_stripped.cmi)
  (action
    (with-stdout-to ocaml-lex_stripped.ml.dtimings
      (with-stderr-to ocaml-lex_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocaml-lex_stripped.ml)))))

(rule (alias test)
  (action (diff ocaml-lex_stripped.ml.log.exp ocaml-lex_stripped.ml.log)))

(rule (target ocaml-protoc.1.2.0-pb_parsing_parser.opp.out)
  (deps ocaml-protoc.1.2.0-pb_parsing_parser.mly)
  (action
    (with-outputs-to ocaml-protoc.1.2.0-pb_parsing_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.opp.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.opp.out)))

(rule
  (targets ocaml-protoc.1.2.0-pb_parsing_parser.out
    ocaml-protoc.1.2.0-pb_parsing_parser.automaton
    ocaml-protoc.1.2.0-pb_parsing_parser.automaton.resolved
    ocaml-protoc.1.2.0-pb_parsing_parser.conflicts
    ocaml-protoc.1.2.0-pb_parsing_parser.timings)
  (deps ocaml-protoc.1.2.0-pb_parsing_parser.mly)
  (action
    (with-outputs-to ocaml-protoc.1.2.0-pb_parsing_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocaml-protoc.1.2.0-pb_parsing_parser.timings
          %{deps})))))

(rule (alias quick)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.out)))

(rule (alias quick)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.automaton.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.automaton)))

(rule (alias quick)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.automaton.resolved.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.conflicts.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.conflicts)))

(rule (target ocaml-protoc_1_2_0-pb_parsing_parser_stripped.mly)
  (deps ocaml-protoc.1.2.0-pb_parsing_parser.mly)
  (action
    (with-stderr-to ocaml-protoc_1_2_0-pb_parsing_parser_stripped.ignored
      (with-stdout-to ocaml-protoc_1_2_0-pb_parsing_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocaml-protoc_1_2_0-pb_parsing_parser_stripped.log
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.mli
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.ml
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.stacklang
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.timings
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.scount
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.dcount)
  (deps ocaml-protoc_1_2_0-pb_parsing_parser_stripped.mly)
  (action
    (with-outputs-to ocaml-protoc_1_2_0-pb_parsing_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to
          ocaml-protoc_1_2_0-pb_parsing_parser_stripped.timings %{deps})))))

(alias (name quick)
  (deps
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.stacklang))

(rule
  (targets ocaml-protoc_1_2_0-pb_parsing_parser_stripped.cmi
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.mli.log)
  (deps ocaml-protoc_1_2_0-pb_parsing_parser_stripped.mli)
  (action
    (with-stdout-to
      ocaml-protoc_1_2_0-pb_parsing_parser_stripped.mli.dtimings
      (with-stderr-to ocaml-protoc_1_2_0-pb_parsing_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          ocaml-protoc_1_2_0-pb_parsing_parser_stripped.mli)))))

(rule
  (targets ocaml-protoc_1_2_0-pb_parsing_parser_stripped.cmo
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.ml.log)
  (deps ocaml-protoc_1_2_0-pb_parsing_parser_stripped.ml
    ocaml-protoc_1_2_0-pb_parsing_parser_stripped.cmi)
  (action
    (with-stdout-to ocaml-protoc_1_2_0-pb_parsing_parser_stripped.ml.dtimings
      (with-stderr-to ocaml-protoc_1_2_0-pb_parsing_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          ocaml-protoc_1_2_0-pb_parsing_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocaml-protoc_1_2_0-pb_parsing_parser_stripped.ml.log.exp
      ocaml-protoc_1_2_0-pb_parsing_parser_stripped.ml.log)))

(rule (target ocaml-test-Lex.opp.out) (deps ocaml-test-Lex.mly)
  (action
    (with-outputs-to ocaml-test-Lex.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ocaml-test-Lex.opp.exp ocaml-test-Lex.opp.out)))

(rule
  (targets ocaml-test-Lex.out ocaml-test-Lex.automaton
    ocaml-test-Lex.automaton.resolved ocaml-test-Lex.conflicts
    ocaml-test-Lex.timings)
  (deps ocaml-test-Lex.mly)
  (action
    (with-outputs-to ocaml-test-Lex.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocaml-test-Lex.timings %{deps})))))

(rule (alias quick) (action (diff ocaml-test-Lex.exp ocaml-test-Lex.out)))

(rule (alias quick)
  (action (diff ocaml-test-Lex.automaton.exp ocaml-test-Lex.automaton)))

(rule (alias quick)
  (action
    (diff ocaml-test-Lex.automaton.resolved.exp
      ocaml-test-Lex.automaton.resolved)))

(rule (alias quick)
  (action (diff ocaml-test-Lex.conflicts.exp ocaml-test-Lex.conflicts)))

(rule (target ocaml-test-Lex_stripped.mly) (deps ocaml-test-Lex.mly)
  (action
    (with-stderr-to ocaml-test-Lex_stripped.ignored
      (with-stdout-to ocaml-test-Lex_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocaml-test-Lex_stripped.log ocaml-test-Lex_stripped.mli
    ocaml-test-Lex_stripped.ml ocaml-test-Lex_stripped.stacklang
    ocaml-test-Lex_stripped.timings ocaml-test-Lex_stripped.scount
    ocaml-test-Lex_stripped.dcount)
  (deps ocaml-test-Lex_stripped.mly)
  (action
    (with-outputs-to ocaml-test-Lex_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocaml-test-Lex_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ocaml-test-Lex_stripped.stacklang))

(rule (targets ocaml-test-Lex_stripped.cmi ocaml-test-Lex_stripped.mli.log)
  (deps ocaml-test-Lex_stripped.mli)
  (action
    (with-stdout-to ocaml-test-Lex_stripped.mli.dtimings
      (with-stderr-to ocaml-test-Lex_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ocaml-test-Lex_stripped.mli)))))

(rule (targets ocaml-test-Lex_stripped.cmo ocaml-test-Lex_stripped.ml.log)
  (deps ocaml-test-Lex_stripped.ml ocaml-test-Lex_stripped.cmi)
  (action
    (with-stdout-to ocaml-test-Lex_stripped.ml.dtimings
      (with-stderr-to ocaml-test-Lex_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocaml-test-Lex_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocaml-test-Lex_stripped.ml.log.exp ocaml-test-Lex_stripped.ml.log)))

(rule (target ocaml-testasmcomp-cmm.opp.out) (deps ocaml-testasmcomp-cmm.mly)
  (action
    (with-outputs-to ocaml-testasmcomp-cmm.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ocaml-testasmcomp-cmm.opp.exp ocaml-testasmcomp-cmm.opp.out)))

(rule
  (targets ocaml-testasmcomp-cmm.out ocaml-testasmcomp-cmm.automaton
    ocaml-testasmcomp-cmm.automaton.resolved ocaml-testasmcomp-cmm.conflicts
    ocaml-testasmcomp-cmm.timings)
  (deps ocaml-testasmcomp-cmm.mly)
  (action
    (with-outputs-to ocaml-testasmcomp-cmm.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocaml-testasmcomp-cmm.timings %{deps})))))

(rule (alias quick)
  (action (diff ocaml-testasmcomp-cmm.exp ocaml-testasmcomp-cmm.out)))

(rule (alias quick)
  (action
    (diff ocaml-testasmcomp-cmm.automaton.exp
      ocaml-testasmcomp-cmm.automaton)))

(rule (alias quick)
  (action
    (diff ocaml-testasmcomp-cmm.automaton.resolved.exp
      ocaml-testasmcomp-cmm.automaton.resolved)))

(rule (alias quick)
  (action
    (diff ocaml-testasmcomp-cmm.conflicts.exp
      ocaml-testasmcomp-cmm.conflicts)))

(rule (target ocaml-testasmcomp-cmm_stripped.mly)
  (deps ocaml-testasmcomp-cmm.mly)
  (action
    (with-stderr-to ocaml-testasmcomp-cmm_stripped.ignored
      (with-stdout-to ocaml-testasmcomp-cmm_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocaml-testasmcomp-cmm_stripped.log
    ocaml-testasmcomp-cmm_stripped.mli ocaml-testasmcomp-cmm_stripped.ml
    ocaml-testasmcomp-cmm_stripped.stacklang
    ocaml-testasmcomp-cmm_stripped.timings
    ocaml-testasmcomp-cmm_stripped.scount
    ocaml-testasmcomp-cmm_stripped.dcount)
  (deps ocaml-testasmcomp-cmm_stripped.mly)
  (action
    (with-outputs-to ocaml-testasmcomp-cmm_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocaml-testasmcomp-cmm_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ocaml-testasmcomp-cmm_stripped.stacklang))

(rule
  (targets ocaml-testasmcomp-cmm_stripped.cmi
    ocaml-testasmcomp-cmm_stripped.mli.log)
  (deps ocaml-testasmcomp-cmm_stripped.mli)
  (action
    (with-stdout-to ocaml-testasmcomp-cmm_stripped.mli.dtimings
      (with-stderr-to ocaml-testasmcomp-cmm_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          ocaml-testasmcomp-cmm_stripped.mli)))))

(rule
  (targets ocaml-testasmcomp-cmm_stripped.cmo
    ocaml-testasmcomp-cmm_stripped.ml.log)
  (deps ocaml-testasmcomp-cmm_stripped.ml ocaml-testasmcomp-cmm_stripped.cmi)
  (action
    (with-stdout-to ocaml-testasmcomp-cmm_stripped.ml.dtimings
      (with-stderr-to ocaml-testasmcomp-cmm_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          ocaml-testasmcomp-cmm_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocaml-testasmcomp-cmm_stripped.ml.log.exp
      ocaml-testasmcomp-cmm_stripped.ml.log)))

(rule (target ocaml_lua_parser.opp.out) (deps ocaml_lua_parser.mly)
  (action
    (with-outputs-to ocaml_lua_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ocaml_lua_parser.opp.exp ocaml_lua_parser.opp.out)))

(rule
  (targets ocaml_lua_parser.out ocaml_lua_parser.automaton
    ocaml_lua_parser.automaton.resolved ocaml_lua_parser.conflicts
    ocaml_lua_parser.timings)
  (deps ocaml_lua_parser.mly)
  (action
    (with-outputs-to ocaml_lua_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocaml_lua_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff ocaml_lua_parser.exp ocaml_lua_parser.out)))

(rule (alias quick)
  (action (diff ocaml_lua_parser.automaton.exp ocaml_lua_parser.automaton)))

(rule (alias quick)
  (action
    (diff ocaml_lua_parser.automaton.resolved.exp
      ocaml_lua_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff ocaml_lua_parser.conflicts.exp ocaml_lua_parser.conflicts)))

(rule (target ocaml_lua_parser_stripped.mly) (deps ocaml_lua_parser.mly)
  (action
    (with-stderr-to ocaml_lua_parser_stripped.ignored
      (with-stdout-to ocaml_lua_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocaml_lua_parser_stripped.log ocaml_lua_parser_stripped.mli
    ocaml_lua_parser_stripped.ml ocaml_lua_parser_stripped.stacklang
    ocaml_lua_parser_stripped.timings ocaml_lua_parser_stripped.scount
    ocaml_lua_parser_stripped.dcount)
  (deps ocaml_lua_parser_stripped.mly)
  (action
    (with-outputs-to ocaml_lua_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocaml_lua_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ocaml_lua_parser_stripped.stacklang))

(rule
  (targets ocaml_lua_parser_stripped.cmi ocaml_lua_parser_stripped.mli.log)
  (deps ocaml_lua_parser_stripped.mli)
  (action
    (with-stdout-to ocaml_lua_parser_stripped.mli.dtimings
      (with-stderr-to ocaml_lua_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ocaml_lua_parser_stripped.mli)))))

(rule
  (targets ocaml_lua_parser_stripped.cmo ocaml_lua_parser_stripped.ml.log)
  (deps ocaml_lua_parser_stripped.ml ocaml_lua_parser_stripped.cmi)
  (action
    (with-stdout-to ocaml_lua_parser_stripped.ml.dtimings
      (with-stderr-to ocaml_lua_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocaml_lua_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocaml_lua_parser_stripped.ml.log.exp
      ocaml_lua_parser_stripped.ml.log)))

(rule (target ocaml_parser_menhir.opp.out) (deps ocaml_parser_menhir.mly)
  (action
    (with-outputs-to ocaml_parser_menhir.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:ocaml_parser_menhir.flags}
          %{deps})))))

(rule (alias quick)
  (action (diff ocaml_parser_menhir.opp.exp ocaml_parser_menhir.opp.out)))

(rule
  (targets ocaml_parser_menhir.out ocaml_parser_menhir.automaton
    ocaml_parser_menhir.automaton.resolved ocaml_parser_menhir.conflicts
    ocaml_parser_menhir.timings)
  (deps ocaml_parser_menhir.mly)
  (action
    (with-outputs-to ocaml_parser_menhir.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocaml_parser_menhir.timings
          %{read-lines:ocaml_parser_menhir.flags} %{deps})))))

(rule (alias quick)
  (action (diff ocaml_parser_menhir.exp ocaml_parser_menhir.out)))

(rule (alias quick)
  (action
    (diff ocaml_parser_menhir.automaton.exp ocaml_parser_menhir.automaton)))

(rule (alias quick)
  (action
    (diff ocaml_parser_menhir.automaton.resolved.exp
      ocaml_parser_menhir.automaton.resolved)))

(rule (alias quick)
  (action
    (diff ocaml_parser_menhir.conflicts.exp ocaml_parser_menhir.conflicts)))

(rule (target ocaml_parser_menhir_stripped.mly)
  (deps ocaml_parser_menhir.mly)
  (action
    (with-stderr-to ocaml_parser_menhir_stripped.ignored
      (with-stdout-to ocaml_parser_menhir_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu
            %{read-lines:ocaml_parser_menhir.flags} %{deps}))))))

(rule
  (targets ocaml_parser_menhir_stripped.log ocaml_parser_menhir_stripped.mli
    ocaml_parser_menhir_stripped.ml ocaml_parser_menhir_stripped.stacklang
    ocaml_parser_menhir_stripped.timings ocaml_parser_menhir_stripped.scount
    ocaml_parser_menhir_stripped.dcount)
  (deps ocaml_parser_menhir_stripped.mly)
  (action
    (with-outputs-to ocaml_parser_menhir_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocaml_parser_menhir_stripped.timings
          %{read-lines:ocaml_parser_menhir.flags} %{deps})))))

(alias (name quick) (deps
                      ocaml_parser_menhir_stripped.stacklang))

(rule
  (targets ocaml_parser_menhir_stripped.cmi
    ocaml_parser_menhir_stripped.mli.log)
  (deps ocaml_parser_menhir_stripped.mli)
  (action
    (with-stdout-to ocaml_parser_menhir_stripped.mli.dtimings
      (with-stderr-to ocaml_parser_menhir_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          ocaml_parser_menhir_stripped.mli)))))

(rule
  (targets ocaml_parser_menhir_stripped.cmo
    ocaml_parser_menhir_stripped.ml.log)
  (deps ocaml_parser_menhir_stripped.ml ocaml_parser_menhir_stripped.cmi)
  (action
    (with-stdout-to ocaml_parser_menhir_stripped.ml.dtimings
      (with-stderr-to ocaml_parser_menhir_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocaml_parser_menhir_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocaml_parser_menhir_stripped.ml.log.exp
      ocaml_parser_menhir_stripped.ml.log)))

(rule (target ocamldoc-odoc.opp.out) (deps ocamldoc-odoc.mly)
  (action
    (with-outputs-to ocamldoc-odoc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ocamldoc-odoc.opp.exp ocamldoc-odoc.opp.out)))

(rule
  (targets ocamldoc-odoc.out ocamldoc-odoc.automaton
    ocamldoc-odoc.automaton.resolved ocamldoc-odoc.conflicts
    ocamldoc-odoc.timings)
  (deps ocamldoc-odoc.mly)
  (action
    (with-outputs-to ocamldoc-odoc.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocamldoc-odoc.timings %{deps})))))

(rule (alias quick) (action (diff ocamldoc-odoc.exp ocamldoc-odoc.out)))

(rule (alias quick)
  (action (diff ocamldoc-odoc.automaton.exp ocamldoc-odoc.automaton)))

(rule (alias quick)
  (action
    (diff ocamldoc-odoc.automaton.resolved.exp
      ocamldoc-odoc.automaton.resolved)))

(rule (alias quick)
  (action (diff ocamldoc-odoc.conflicts.exp ocamldoc-odoc.conflicts)))

(rule (target ocamldoc-odoc_stripped.mly) (deps ocamldoc-odoc.mly)
  (action
    (with-stderr-to ocamldoc-odoc_stripped.ignored
      (with-stdout-to ocamldoc-odoc_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocamldoc-odoc_stripped.log ocamldoc-odoc_stripped.mli
    ocamldoc-odoc_stripped.ml ocamldoc-odoc_stripped.stacklang
    ocamldoc-odoc_stripped.timings ocamldoc-odoc_stripped.scount
    ocamldoc-odoc_stripped.dcount)
  (deps ocamldoc-odoc_stripped.mly)
  (action
    (with-outputs-to ocamldoc-odoc_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocamldoc-odoc_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ocamldoc-odoc_stripped.stacklang))

(rule (targets ocamldoc-odoc_stripped.cmi ocamldoc-odoc_stripped.mli.log)
  (deps ocamldoc-odoc_stripped.mli)
  (action
    (with-stdout-to ocamldoc-odoc_stripped.mli.dtimings
      (with-stderr-to ocamldoc-odoc_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ocamldoc-odoc_stripped.mli)))))

(rule (targets ocamldoc-odoc_stripped.cmo ocamldoc-odoc_stripped.ml.log)
  (deps ocamldoc-odoc_stripped.ml ocamldoc-odoc_stripped.cmi)
  (action
    (with-stdout-to ocamldoc-odoc_stripped.ml.dtimings
      (with-stderr-to ocamldoc-odoc_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocamldoc-odoc_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocamldoc-odoc_stripped.ml.log.exp ocamldoc-odoc_stripped.ml.log)))

(rule (target ocamldoc-odoc_text.opp.out) (deps ocamldoc-odoc_text.mly)
  (action
    (with-outputs-to ocamldoc-odoc_text.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ocamldoc-odoc_text.opp.exp ocamldoc-odoc_text.opp.out)))

(rule
  (targets ocamldoc-odoc_text.out ocamldoc-odoc_text.automaton
    ocamldoc-odoc_text.automaton.resolved ocamldoc-odoc_text.conflicts
    ocamldoc-odoc_text.timings)
  (deps ocamldoc-odoc_text.mly)
  (action
    (with-outputs-to ocamldoc-odoc_text.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocamldoc-odoc_text.timings %{deps})))))

(rule (alias quick)
  (action (diff ocamldoc-odoc_text.exp ocamldoc-odoc_text.out)))

(rule (alias quick)
  (action
    (diff ocamldoc-odoc_text.automaton.exp ocamldoc-odoc_text.automaton)))

(rule (alias quick)
  (action
    (diff ocamldoc-odoc_text.automaton.resolved.exp
      ocamldoc-odoc_text.automaton.resolved)))

(rule (alias quick)
  (action
    (diff ocamldoc-odoc_text.conflicts.exp ocamldoc-odoc_text.conflicts)))

(rule (target ocamldoc-odoc_text_stripped.mly) (deps ocamldoc-odoc_text.mly)
  (action
    (with-stderr-to ocamldoc-odoc_text_stripped.ignored
      (with-stdout-to ocamldoc-odoc_text_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocamldoc-odoc_text_stripped.log ocamldoc-odoc_text_stripped.mli
    ocamldoc-odoc_text_stripped.ml ocamldoc-odoc_text_stripped.stacklang
    ocamldoc-odoc_text_stripped.timings ocamldoc-odoc_text_stripped.scount
    ocamldoc-odoc_text_stripped.dcount)
  (deps ocamldoc-odoc_text_stripped.mly)
  (action
    (with-outputs-to ocamldoc-odoc_text_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocamldoc-odoc_text_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ocamldoc-odoc_text_stripped.stacklang))

(rule
  (targets ocamldoc-odoc_text_stripped.cmi
    ocamldoc-odoc_text_stripped.mli.log)
  (deps ocamldoc-odoc_text_stripped.mli)
  (action
    (with-stdout-to ocamldoc-odoc_text_stripped.mli.dtimings
      (with-stderr-to ocamldoc-odoc_text_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ocamldoc-odoc_text_stripped.mli)))))

(rule
  (targets ocamldoc-odoc_text_stripped.cmo
    ocamldoc-odoc_text_stripped.ml.log)
  (deps ocamldoc-odoc_text_stripped.ml ocamldoc-odoc_text_stripped.cmi)
  (action
    (with-stdout-to ocamldoc-odoc_text_stripped.ml.dtimings
      (with-stderr-to ocamldoc-odoc_text_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocamldoc-odoc_text_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocamldoc-odoc_text_stripped.ml.log.exp
      ocamldoc-odoc_text_stripped.ml.log)))

(rule (target ocamlweb-yacc.opp.out) (deps ocamlweb-yacc.mly)
  (action
    (with-outputs-to ocamlweb-yacc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ocamlweb-yacc.opp.exp ocamlweb-yacc.opp.out)))

(rule
  (targets ocamlweb-yacc.out ocamlweb-yacc.automaton
    ocamlweb-yacc.automaton.resolved ocamlweb-yacc.conflicts
    ocamlweb-yacc.timings)
  (deps ocamlweb-yacc.mly)
  (action
    (with-outputs-to ocamlweb-yacc.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocamlweb-yacc.timings %{deps})))))

(rule (alias quick) (action (diff ocamlweb-yacc.exp ocamlweb-yacc.out)))

(rule (alias quick)
  (action (diff ocamlweb-yacc.automaton.exp ocamlweb-yacc.automaton)))

(rule (alias quick)
  (action
    (diff ocamlweb-yacc.automaton.resolved.exp
      ocamlweb-yacc.automaton.resolved)))

(rule (alias quick)
  (action (diff ocamlweb-yacc.conflicts.exp ocamlweb-yacc.conflicts)))

(rule (target ocamlweb-yacc_stripped.mly) (deps ocamlweb-yacc.mly)
  (action
    (with-stderr-to ocamlweb-yacc_stripped.ignored
      (with-stdout-to ocamlweb-yacc_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocamlweb-yacc_stripped.log ocamlweb-yacc_stripped.mli
    ocamlweb-yacc_stripped.ml ocamlweb-yacc_stripped.stacklang
    ocamlweb-yacc_stripped.timings ocamlweb-yacc_stripped.scount
    ocamlweb-yacc_stripped.dcount)
  (deps ocamlweb-yacc_stripped.mly)
  (action
    (with-outputs-to ocamlweb-yacc_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocamlweb-yacc_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ocamlweb-yacc_stripped.stacklang))

(rule (targets ocamlweb-yacc_stripped.cmi ocamlweb-yacc_stripped.mli.log)
  (deps ocamlweb-yacc_stripped.mli)
  (action
    (with-stdout-to ocamlweb-yacc_stripped.mli.dtimings
      (with-stderr-to ocamlweb-yacc_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ocamlweb-yacc_stripped.mli)))))

(rule (targets ocamlweb-yacc_stripped.cmo ocamlweb-yacc_stripped.ml.log)
  (deps ocamlweb-yacc_stripped.ml ocamlweb-yacc_stripped.cmi)
  (action
    (with-stdout-to ocamlweb-yacc_stripped.ml.dtimings
      (with-stderr-to ocamlweb-yacc_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocamlweb-yacc_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocamlweb-yacc_stripped.ml.log.exp ocamlweb-yacc_stripped.ml.log)))

(rule (target ocapic.3.3-parser.opp.out) (deps ocapic.3.3-parser.mly)
  (action
    (with-outputs-to ocapic.3.3-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ocapic.3.3-parser.opp.exp ocapic.3.3-parser.opp.out)))

(rule
  (targets ocapic.3.3-parser.out ocapic.3.3-parser.automaton
    ocapic.3.3-parser.automaton.resolved ocapic.3.3-parser.conflicts
    ocapic.3.3-parser.timings)
  (deps ocapic.3.3-parser.mly)
  (action
    (with-outputs-to ocapic.3.3-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ocapic.3.3-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff ocapic.3.3-parser.exp ocapic.3.3-parser.out)))

(rule (alias quick)
  (action (diff ocapic.3.3-parser.automaton.exp ocapic.3.3-parser.automaton)))

(rule (alias quick)
  (action
    (diff ocapic.3.3-parser.automaton.resolved.exp
      ocapic.3.3-parser.automaton.resolved)))

(rule (alias quick)
  (action (diff ocapic.3.3-parser.conflicts.exp ocapic.3.3-parser.conflicts)))

(rule (target ocapic_3_3-parser_stripped.mly) (deps ocapic.3.3-parser.mly)
  (action
    (with-stderr-to ocapic_3_3-parser_stripped.ignored
      (with-stdout-to ocapic_3_3-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ocapic_3_3-parser_stripped.log ocapic_3_3-parser_stripped.mli
    ocapic_3_3-parser_stripped.ml ocapic_3_3-parser_stripped.stacklang
    ocapic_3_3-parser_stripped.timings ocapic_3_3-parser_stripped.scount
    ocapic_3_3-parser_stripped.dcount)
  (deps ocapic_3_3-parser_stripped.mly)
  (action
    (with-outputs-to ocapic_3_3-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ocapic_3_3-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ocapic_3_3-parser_stripped.stacklang))

(rule
  (targets ocapic_3_3-parser_stripped.cmi ocapic_3_3-parser_stripped.mli.log)
  (deps ocapic_3_3-parser_stripped.mli)
  (action
    (with-stdout-to ocapic_3_3-parser_stripped.mli.dtimings
      (with-stderr-to ocapic_3_3-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ocapic_3_3-parser_stripped.mli)))))

(rule
  (targets ocapic_3_3-parser_stripped.cmo ocapic_3_3-parser_stripped.ml.log)
  (deps ocapic_3_3-parser_stripped.ml ocapic_3_3-parser_stripped.cmi)
  (action
    (with-stdout-to ocapic_3_3-parser_stripped.ml.dtimings
      (with-stderr-to ocapic_3_3-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ocapic_3_3-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff ocapic_3_3-parser_stripped.ml.log.exp
      ocapic_3_3-parser_stripped.ml.log)))

(rule (target oclisp.opp.out) (deps oclisp.mly)
  (action
    (with-outputs-to oclisp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff oclisp.opp.exp oclisp.opp.out)))

(rule
  (targets oclisp.out oclisp.automaton oclisp.automaton.resolved
    oclisp.conflicts oclisp.timings)
  (deps oclisp.mly)
  (action
    (with-outputs-to oclisp.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to oclisp.timings %{deps})))))

(rule (alias quick) (action (diff oclisp.exp oclisp.out)))

(rule (alias quick) (action (diff oclisp.automaton.exp oclisp.automaton)))

(rule (alias quick)
  (action (diff oclisp.automaton.resolved.exp oclisp.automaton.resolved)))

(rule (alias quick) (action (diff oclisp.conflicts.exp oclisp.conflicts)))

(rule (target oclisp_stripped.mly) (deps oclisp.mly)
  (action
    (with-stderr-to oclisp_stripped.ignored
      (with-stdout-to oclisp_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets oclisp_stripped.log oclisp_stripped.mli oclisp_stripped.ml
    oclisp_stripped.stacklang oclisp_stripped.timings oclisp_stripped.scount
    oclisp_stripped.dcount)
  (deps oclisp_stripped.mly)
  (action
    (with-outputs-to oclisp_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to oclisp_stripped.timings %{deps})))))

(alias (name quick) (deps
                      oclisp_stripped.stacklang))

(rule (targets oclisp_stripped.cmi oclisp_stripped.mli.log)
  (deps oclisp_stripped.mli)
  (action
    (with-stdout-to oclisp_stripped.mli.dtimings
      (with-stderr-to oclisp_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c oclisp_stripped.mli)))))

(rule (targets oclisp_stripped.cmo oclisp_stripped.ml.log)
  (deps oclisp_stripped.ml oclisp_stripped.cmi)
  (action
    (with-stdout-to oclisp_stripped.ml.dtimings
      (with-stderr-to oclisp_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c oclisp_stripped.ml)))))

(rule (alias test)
  (action (diff oclisp_stripped.ml.log.exp oclisp_stripped.ml.log)))

(rule (target octavius.1.2.0-octParser.opp.out)
  (deps octavius.1.2.0-octParser.mly)
  (action
    (with-outputs-to octavius.1.2.0-octParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff octavius.1.2.0-octParser.opp.exp octavius.1.2.0-octParser.opp.out)))

(rule
  (targets octavius.1.2.0-octParser.out octavius.1.2.0-octParser.automaton
    octavius.1.2.0-octParser.automaton.resolved
    octavius.1.2.0-octParser.conflicts octavius.1.2.0-octParser.timings)
  (deps octavius.1.2.0-octParser.mly)
  (action
    (with-outputs-to octavius.1.2.0-octParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to octavius.1.2.0-octParser.timings %{deps})))))

(rule (alias quick)
  (action (diff octavius.1.2.0-octParser.exp octavius.1.2.0-octParser.out)))

(rule (alias quick)
  (action
    (diff octavius.1.2.0-octParser.automaton.exp
      octavius.1.2.0-octParser.automaton)))

(rule (alias quick)
  (action
    (diff octavius.1.2.0-octParser.automaton.resolved.exp
      octavius.1.2.0-octParser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff octavius.1.2.0-octParser.conflicts.exp
      octavius.1.2.0-octParser.conflicts)))

(rule (target octavius_1_2_0-octParser_stripped.mly)
  (deps octavius.1.2.0-octParser.mly)
  (action
    (with-stderr-to octavius_1_2_0-octParser_stripped.ignored
      (with-stdout-to octavius_1_2_0-octParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets octavius_1_2_0-octParser_stripped.log
    octavius_1_2_0-octParser_stripped.mli
    octavius_1_2_0-octParser_stripped.ml
    octavius_1_2_0-octParser_stripped.stacklang
    octavius_1_2_0-octParser_stripped.timings
    octavius_1_2_0-octParser_stripped.scount
    octavius_1_2_0-octParser_stripped.dcount)
  (deps octavius_1_2_0-octParser_stripped.mly)
  (action
    (with-outputs-to octavius_1_2_0-octParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to octavius_1_2_0-octParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      octavius_1_2_0-octParser_stripped.stacklang))

(rule
  (targets octavius_1_2_0-octParser_stripped.cmi
    octavius_1_2_0-octParser_stripped.mli.log)
  (deps octavius_1_2_0-octParser_stripped.mli)
  (action
    (with-stdout-to octavius_1_2_0-octParser_stripped.mli.dtimings
      (with-stderr-to octavius_1_2_0-octParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          octavius_1_2_0-octParser_stripped.mli)))))

(rule
  (targets octavius_1_2_0-octParser_stripped.cmo
    octavius_1_2_0-octParser_stripped.ml.log)
  (deps octavius_1_2_0-octParser_stripped.ml
    octavius_1_2_0-octParser_stripped.cmi)
  (action
    (with-stdout-to octavius_1_2_0-octParser_stripped.ml.dtimings
      (with-stderr-to octavius_1_2_0-octParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          octavius_1_2_0-octParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff octavius_1_2_0-octParser_stripped.ml.log.exp
      octavius_1_2_0-octParser_stripped.ml.log)))

(rule (target odds.1.0-parser.opp.out) (deps odds.1.0-parser.mly)
  (action
    (with-outputs-to odds.1.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff odds.1.0-parser.opp.exp odds.1.0-parser.opp.out)))

(rule
  (targets odds.1.0-parser.out odds.1.0-parser.automaton
    odds.1.0-parser.automaton.resolved odds.1.0-parser.conflicts
    odds.1.0-parser.timings)
  (deps odds.1.0-parser.mly)
  (action
    (with-outputs-to odds.1.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to odds.1.0-parser.timings %{deps})))))

(rule (alias quick) (action (diff odds.1.0-parser.exp odds.1.0-parser.out)))

(rule (alias quick)
  (action (diff odds.1.0-parser.automaton.exp odds.1.0-parser.automaton)))

(rule (alias quick)
  (action
    (diff odds.1.0-parser.automaton.resolved.exp
      odds.1.0-parser.automaton.resolved)))

(rule (alias quick)
  (action (diff odds.1.0-parser.conflicts.exp odds.1.0-parser.conflicts)))

(rule (target odds_1_0-parser_stripped.mly) (deps odds.1.0-parser.mly)
  (action
    (with-stderr-to odds_1_0-parser_stripped.ignored
      (with-stdout-to odds_1_0-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets odds_1_0-parser_stripped.log odds_1_0-parser_stripped.mli
    odds_1_0-parser_stripped.ml odds_1_0-parser_stripped.stacklang
    odds_1_0-parser_stripped.timings odds_1_0-parser_stripped.scount
    odds_1_0-parser_stripped.dcount)
  (deps odds_1_0-parser_stripped.mly)
  (action
    (with-outputs-to odds_1_0-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to odds_1_0-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      odds_1_0-parser_stripped.stacklang))

(rule (targets odds_1_0-parser_stripped.cmi odds_1_0-parser_stripped.mli.log)
  (deps odds_1_0-parser_stripped.mli)
  (action
    (with-stdout-to odds_1_0-parser_stripped.mli.dtimings
      (with-stderr-to odds_1_0-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c odds_1_0-parser_stripped.mli)))))

(rule (targets odds_1_0-parser_stripped.cmo odds_1_0-parser_stripped.ml.log)
  (deps odds_1_0-parser_stripped.ml odds_1_0-parser_stripped.cmi)
  (action
    (with-stdout-to odds_1_0-parser_stripped.ml.dtimings
      (with-stderr-to odds_1_0-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c odds_1_0-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff odds_1_0-parser_stripped.ml.log.exp
      odds_1_0-parser_stripped.ml.log)))

(rule (target oflux.opp.out) (deps oflux.mly)
  (action
    (with-outputs-to oflux.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff oflux.opp.exp oflux.opp.out)))

(rule
  (targets oflux.out oflux.automaton oflux.automaton.resolved oflux.conflicts
    oflux.timings)
  (deps oflux.mly)
  (action
    (with-outputs-to oflux.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to oflux.timings %{deps})))))

(rule (alias quick) (action (diff oflux.exp oflux.out)))

(rule (alias quick) (action (diff oflux.automaton.exp oflux.automaton)))

(rule (alias quick)
  (action (diff oflux.automaton.resolved.exp oflux.automaton.resolved)))

(rule (alias quick) (action (diff oflux.conflicts.exp oflux.conflicts)))

(rule (target oflux_stripped.mly) (deps oflux.mly)
  (action
    (with-stderr-to oflux_stripped.ignored
      (with-stdout-to oflux_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets oflux_stripped.log oflux_stripped.mli oflux_stripped.ml
    oflux_stripped.stacklang oflux_stripped.timings oflux_stripped.scount
    oflux_stripped.dcount)
  (deps oflux_stripped.mly)
  (action
    (with-outputs-to oflux_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to oflux_stripped.timings %{deps})))))

(alias (name quick) (deps
                      oflux_stripped.stacklang))

(rule (targets oflux_stripped.cmi oflux_stripped.mli.log)
  (deps oflux_stripped.mli)
  (action
    (with-stdout-to oflux_stripped.mli.dtimings
      (with-stderr-to oflux_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c oflux_stripped.mli)))))

(rule (targets oflux_stripped.cmo oflux_stripped.ml.log)
  (deps oflux_stripped.ml oflux_stripped.cmi)
  (action
    (with-stdout-to oflux_stripped.ml.dtimings
      (with-stderr-to oflux_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c oflux_stripped.ml)))))

(rule (alias test)
  (action (diff oflux_stripped.ml.log.exp oflux_stripped.ml.log)))

(rule (target ojacare.opp.out) (deps ojacare.mly)
  (action
    (with-outputs-to ojacare.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff ojacare.opp.exp ojacare.opp.out)))

(rule
  (targets ojacare.out ojacare.automaton ojacare.automaton.resolved
    ojacare.conflicts ojacare.timings)
  (deps ojacare.mly)
  (action
    (with-outputs-to ojacare.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ojacare.timings %{deps})))))

(rule (alias quick) (action (diff ojacare.exp ojacare.out)))

(rule (alias quick) (action (diff ojacare.automaton.exp ojacare.automaton)))

(rule (alias quick)
  (action (diff ojacare.automaton.resolved.exp ojacare.automaton.resolved)))

(rule (alias quick) (action (diff ojacare.conflicts.exp ojacare.conflicts)))

(rule (target ojacare_stripped.mly) (deps ojacare.mly)
  (action
    (with-stderr-to ojacare_stripped.ignored
      (with-stdout-to ojacare_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ojacare_stripped.log ojacare_stripped.mli ojacare_stripped.ml
    ojacare_stripped.stacklang ojacare_stripped.timings
    ojacare_stripped.scount ojacare_stripped.dcount)
  (deps ojacare_stripped.mly)
  (action
    (with-outputs-to ojacare_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ojacare_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ojacare_stripped.stacklang))

(rule (targets ojacare_stripped.cmi ojacare_stripped.mli.log)
  (deps ojacare_stripped.mli)
  (action
    (with-stdout-to ojacare_stripped.mli.dtimings
      (with-stderr-to ojacare_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ojacare_stripped.mli)))))

(rule (targets ojacare_stripped.cmo ojacare_stripped.ml.log)
  (deps ojacare_stripped.ml ojacare_stripped.cmi)
  (action
    (with-stdout-to ojacare_stripped.ml.dtimings
      (with-stderr-to ojacare_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ojacare_stripped.ml)))))

(rule (alias test)
  (action (diff ojacare_stripped.ml.log.exp ojacare_stripped.ml.log)))

(rule (target ollvm.0.99-ollvm_parser.opp.out)
  (deps ollvm.0.99-ollvm_parser.mly)
  (action
    (with-outputs-to ollvm.0.99-ollvm_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff ollvm.0.99-ollvm_parser.opp.exp ollvm.0.99-ollvm_parser.opp.out)))

(rule
  (targets ollvm.0.99-ollvm_parser.out ollvm.0.99-ollvm_parser.automaton
    ollvm.0.99-ollvm_parser.automaton.resolved
    ollvm.0.99-ollvm_parser.conflicts ollvm.0.99-ollvm_parser.timings)
  (deps ollvm.0.99-ollvm_parser.mly)
  (action
    (with-outputs-to ollvm.0.99-ollvm_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ollvm.0.99-ollvm_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff ollvm.0.99-ollvm_parser.exp ollvm.0.99-ollvm_parser.out)))

(rule (alias quick)
  (action
    (diff ollvm.0.99-ollvm_parser.automaton.exp
      ollvm.0.99-ollvm_parser.automaton)))

(rule (alias quick)
  (action
    (diff ollvm.0.99-ollvm_parser.automaton.resolved.exp
      ollvm.0.99-ollvm_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff ollvm.0.99-ollvm_parser.conflicts.exp
      ollvm.0.99-ollvm_parser.conflicts)))

(rule (target ollvm_0_99-ollvm_parser_stripped.mly)
  (deps ollvm.0.99-ollvm_parser.mly)
  (action
    (with-stderr-to ollvm_0_99-ollvm_parser_stripped.ignored
      (with-stdout-to ollvm_0_99-ollvm_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ollvm_0_99-ollvm_parser_stripped.log
    ollvm_0_99-ollvm_parser_stripped.mli ollvm_0_99-ollvm_parser_stripped.ml
    ollvm_0_99-ollvm_parser_stripped.stacklang
    ollvm_0_99-ollvm_parser_stripped.timings
    ollvm_0_99-ollvm_parser_stripped.scount
    ollvm_0_99-ollvm_parser_stripped.dcount)
  (deps ollvm_0_99-ollvm_parser_stripped.mly)
  (action
    (with-outputs-to ollvm_0_99-ollvm_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ollvm_0_99-ollvm_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ollvm_0_99-ollvm_parser_stripped.stacklang))

(rule
  (targets ollvm_0_99-ollvm_parser_stripped.cmi
    ollvm_0_99-ollvm_parser_stripped.mli.log)
  (deps ollvm_0_99-ollvm_parser_stripped.mli)
  (action
    (with-stdout-to ollvm_0_99-ollvm_parser_stripped.mli.dtimings
      (with-stderr-to ollvm_0_99-ollvm_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          ollvm_0_99-ollvm_parser_stripped.mli)))))

(rule
  (targets ollvm_0_99-ollvm_parser_stripped.cmo
    ollvm_0_99-ollvm_parser_stripped.ml.log)
  (deps ollvm_0_99-ollvm_parser_stripped.ml
    ollvm_0_99-ollvm_parser_stripped.cmi)
  (action
    (with-stdout-to ollvm_0_99-ollvm_parser_stripped.ml.dtimings
      (with-stderr-to ollvm_0_99-ollvm_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          ollvm_0_99-ollvm_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff ollvm_0_99-ollvm_parser_stripped.ml.log.exp
      ollvm_0_99-ollvm_parser_stripped.ml.log)))

(rule (target omake.0.9.8.7-omake_shell_parse.opp.out)
  (deps omake.0.9.8.7-omake_shell_parse.mly)
  (action
    (with-outputs-to omake.0.9.8.7-omake_shell_parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.opp.exp
      omake.0.9.8.7-omake_shell_parse.opp.out)))

(rule
  (targets omake.0.9.8.7-omake_shell_parse.out
    omake.0.9.8.7-omake_shell_parse.automaton
    omake.0.9.8.7-omake_shell_parse.automaton.resolved
    omake.0.9.8.7-omake_shell_parse.conflicts
    omake.0.9.8.7-omake_shell_parse.timings)
  (deps omake.0.9.8.7-omake_shell_parse.mly)
  (action
    (with-outputs-to omake.0.9.8.7-omake_shell_parse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to omake.0.9.8.7-omake_shell_parse.timings %{deps})))))

(rule (alias quick)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.exp
      omake.0.9.8.7-omake_shell_parse.out)))

(rule (alias quick)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.automaton.exp
      omake.0.9.8.7-omake_shell_parse.automaton)))

(rule (alias quick)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.automaton.resolved.exp
      omake.0.9.8.7-omake_shell_parse.automaton.resolved)))

(rule (alias quick)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.conflicts.exp
      omake.0.9.8.7-omake_shell_parse.conflicts)))

(rule (target omake_0_9_8_7-omake_shell_parse_stripped.mly)
  (deps omake.0.9.8.7-omake_shell_parse.mly)
  (action
    (with-stderr-to omake_0_9_8_7-omake_shell_parse_stripped.ignored
      (with-stdout-to omake_0_9_8_7-omake_shell_parse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets omake_0_9_8_7-omake_shell_parse_stripped.log
    omake_0_9_8_7-omake_shell_parse_stripped.mli
    omake_0_9_8_7-omake_shell_parse_stripped.ml
    omake_0_9_8_7-omake_shell_parse_stripped.stacklang
    omake_0_9_8_7-omake_shell_parse_stripped.timings
    omake_0_9_8_7-omake_shell_parse_stripped.scount
    omake_0_9_8_7-omake_shell_parse_stripped.dcount)
  (deps omake_0_9_8_7-omake_shell_parse_stripped.mly)
  (action
    (with-outputs-to omake_0_9_8_7-omake_shell_parse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to omake_0_9_8_7-omake_shell_parse_stripped.timings
          %{deps})))))

(alias (name quick)
  (deps
    omake_0_9_8_7-omake_shell_parse_stripped.stacklang))

(rule
  (targets omake_0_9_8_7-omake_shell_parse_stripped.cmi
    omake_0_9_8_7-omake_shell_parse_stripped.mli.log)
  (deps omake_0_9_8_7-omake_shell_parse_stripped.mli)
  (action
    (with-stdout-to omake_0_9_8_7-omake_shell_parse_stripped.mli.dtimings
      (with-stderr-to omake_0_9_8_7-omake_shell_parse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          omake_0_9_8_7-omake_shell_parse_stripped.mli)))))

(rule
  (targets omake_0_9_8_7-omake_shell_parse_stripped.cmo
    omake_0_9_8_7-omake_shell_parse_stripped.ml.log)
  (deps omake_0_9_8_7-omake_shell_parse_stripped.ml
    omake_0_9_8_7-omake_shell_parse_stripped.cmi)
  (action
    (with-stdout-to omake_0_9_8_7-omake_shell_parse_stripped.ml.dtimings
      (with-stderr-to omake_0_9_8_7-omake_shell_parse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          omake_0_9_8_7-omake_shell_parse_stripped.ml)))))

(rule (alias test)
  (action
    (diff omake_0_9_8_7-omake_shell_parse_stripped.ml.log.exp
      omake_0_9_8_7-omake_shell_parse_stripped.ml.log)))

(rule (target omake_ast_parse.opp.out) (deps omake_ast_parse.mly)
  (action
    (with-outputs-to omake_ast_parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff omake_ast_parse.opp.exp omake_ast_parse.opp.out)))

(rule
  (targets omake_ast_parse.out omake_ast_parse.automaton
    omake_ast_parse.automaton.resolved omake_ast_parse.conflicts
    omake_ast_parse.timings)
  (deps omake_ast_parse.mly)
  (action
    (with-outputs-to omake_ast_parse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to omake_ast_parse.timings %{deps})))))

(rule (alias quick) (action (diff omake_ast_parse.exp omake_ast_parse.out)))

(rule (alias quick)
  (action (diff omake_ast_parse.automaton.exp omake_ast_parse.automaton)))

(rule (alias quick)
  (action
    (diff omake_ast_parse.automaton.resolved.exp
      omake_ast_parse.automaton.resolved)))

(rule (alias quick)
  (action (diff omake_ast_parse.conflicts.exp omake_ast_parse.conflicts)))

(rule (target omake_ast_parse_stripped.mly) (deps omake_ast_parse.mly)
  (action
    (with-stderr-to omake_ast_parse_stripped.ignored
      (with-stdout-to omake_ast_parse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets omake_ast_parse_stripped.log omake_ast_parse_stripped.mli
    omake_ast_parse_stripped.ml omake_ast_parse_stripped.stacklang
    omake_ast_parse_stripped.timings omake_ast_parse_stripped.scount
    omake_ast_parse_stripped.dcount)
  (deps omake_ast_parse_stripped.mly)
  (action
    (with-outputs-to omake_ast_parse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to omake_ast_parse_stripped.timings %{deps})))))

(alias (name quick) (deps
                      omake_ast_parse_stripped.stacklang))

(rule (targets omake_ast_parse_stripped.cmi omake_ast_parse_stripped.mli.log)
  (deps omake_ast_parse_stripped.mli)
  (action
    (with-stdout-to omake_ast_parse_stripped.mli.dtimings
      (with-stderr-to omake_ast_parse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c omake_ast_parse_stripped.mli)))))

(rule (targets omake_ast_parse_stripped.cmo omake_ast_parse_stripped.ml.log)
  (deps omake_ast_parse_stripped.ml omake_ast_parse_stripped.cmi)
  (action
    (with-stdout-to omake_ast_parse_stripped.ml.dtimings
      (with-stderr-to omake_ast_parse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c omake_ast_parse_stripped.ml)))))

(rule (alias test)
  (action
    (diff omake_ast_parse_stripped.ml.log.exp
      omake_ast_parse_stripped.ml.log)))

(rule (target omake_shell_parse.opp.out) (deps omake_shell_parse.mly)
  (action
    (with-outputs-to omake_shell_parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff omake_shell_parse.opp.exp omake_shell_parse.opp.out)))

(rule
  (targets omake_shell_parse.out omake_shell_parse.automaton
    omake_shell_parse.automaton.resolved omake_shell_parse.conflicts
    omake_shell_parse.timings)
  (deps omake_shell_parse.mly)
  (action
    (with-outputs-to omake_shell_parse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to omake_shell_parse.timings %{deps})))))

(rule (alias quick)
  (action (diff omake_shell_parse.exp omake_shell_parse.out)))

(rule (alias quick)
  (action (diff omake_shell_parse.automaton.exp omake_shell_parse.automaton)))

(rule (alias quick)
  (action
    (diff omake_shell_parse.automaton.resolved.exp
      omake_shell_parse.automaton.resolved)))

(rule (alias quick)
  (action (diff omake_shell_parse.conflicts.exp omake_shell_parse.conflicts)))

(rule (target omake_shell_parse_stripped.mly) (deps omake_shell_parse.mly)
  (action
    (with-stderr-to omake_shell_parse_stripped.ignored
      (with-stdout-to omake_shell_parse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets omake_shell_parse_stripped.log omake_shell_parse_stripped.mli
    omake_shell_parse_stripped.ml omake_shell_parse_stripped.stacklang
    omake_shell_parse_stripped.timings omake_shell_parse_stripped.scount
    omake_shell_parse_stripped.dcount)
  (deps omake_shell_parse_stripped.mly)
  (action
    (with-outputs-to omake_shell_parse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to omake_shell_parse_stripped.timings %{deps})))))

(alias (name quick) (deps
                      omake_shell_parse_stripped.stacklang))

(rule
  (targets omake_shell_parse_stripped.cmi omake_shell_parse_stripped.mli.log)
  (deps omake_shell_parse_stripped.mli)
  (action
    (with-stdout-to omake_shell_parse_stripped.mli.dtimings
      (with-stderr-to omake_shell_parse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c omake_shell_parse_stripped.mli)))))

(rule
  (targets omake_shell_parse_stripped.cmo omake_shell_parse_stripped.ml.log)
  (deps omake_shell_parse_stripped.ml omake_shell_parse_stripped.cmi)
  (action
    (with-stdout-to omake_shell_parse_stripped.ml.dtimings
      (with-stderr-to omake_shell_parse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c omake_shell_parse_stripped.ml)))))

(rule (alias test)
  (action
    (diff omake_shell_parse_stripped.ml.log.exp
      omake_shell_parse_stripped.ml.log)))

(rule (target on-error-reduce-inlined.opp.out)
  (deps on-error-reduce-inlined.mly)
  (action
    (with-outputs-to on-error-reduce-inlined.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff on-error-reduce-inlined.opp.exp on-error-reduce-inlined.opp.out)))

(rule
  (targets on-error-reduce-inlined.out on-error-reduce-inlined.automaton
    on-error-reduce-inlined.automaton.resolved
    on-error-reduce-inlined.conflicts on-error-reduce-inlined.timings)
  (deps on-error-reduce-inlined.mly)
  (action
    (with-outputs-to on-error-reduce-inlined.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to on-error-reduce-inlined.timings %{deps})))))

(rule (alias quick)
  (action (diff on-error-reduce-inlined.exp on-error-reduce-inlined.out)))

(rule (alias quick)
  (action
    (diff on-error-reduce-inlined.automaton.exp
      on-error-reduce-inlined.automaton)))

(rule (alias quick)
  (action
    (diff on-error-reduce-inlined.automaton.resolved.exp
      on-error-reduce-inlined.automaton.resolved)))

(rule (alias quick)
  (action
    (diff on-error-reduce-inlined.conflicts.exp
      on-error-reduce-inlined.conflicts)))

(rule (target on-error-reduce-inlined_stripped.mly)
  (deps on-error-reduce-inlined.mly)
  (action
    (with-stderr-to on-error-reduce-inlined_stripped.ignored
      (with-stdout-to on-error-reduce-inlined_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets on-error-reduce-inlined_stripped.log
    on-error-reduce-inlined_stripped.mli on-error-reduce-inlined_stripped.ml
    on-error-reduce-inlined_stripped.stacklang
    on-error-reduce-inlined_stripped.timings
    on-error-reduce-inlined_stripped.scount
    on-error-reduce-inlined_stripped.dcount)
  (deps on-error-reduce-inlined_stripped.mly)
  (action
    (with-outputs-to on-error-reduce-inlined_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to on-error-reduce-inlined_stripped.timings %{deps})))))

(alias (name quick) (deps
                      on-error-reduce-inlined_stripped.stacklang))

(rule
  (targets on-error-reduce-inlined_stripped.cmi
    on-error-reduce-inlined_stripped.mli.log)
  (deps on-error-reduce-inlined_stripped.mli)
  (action
    (with-stdout-to on-error-reduce-inlined_stripped.mli.dtimings
      (with-stderr-to on-error-reduce-inlined_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          on-error-reduce-inlined_stripped.mli)))))

(rule
  (targets on-error-reduce-inlined_stripped.cmo
    on-error-reduce-inlined_stripped.ml.log)
  (deps on-error-reduce-inlined_stripped.ml
    on-error-reduce-inlined_stripped.cmi)
  (action
    (with-stdout-to on-error-reduce-inlined_stripped.ml.dtimings
      (with-stderr-to on-error-reduce-inlined_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          on-error-reduce-inlined_stripped.ml)))))

(rule (alias test)
  (action
    (diff on-error-reduce-inlined_stripped.ml.log.exp
      on-error-reduce-inlined_stripped.ml.log)))

(rule (target on-error-reduce-unreachable.opp.out)
  (deps on-error-reduce-unreachable.mly)
  (action
    (with-outputs-to on-error-reduce-unreachable.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff on-error-reduce-unreachable.opp.exp
      on-error-reduce-unreachable.opp.out)))

(rule
  (targets on-error-reduce-unreachable.out
    on-error-reduce-unreachable.automaton
    on-error-reduce-unreachable.automaton.resolved
    on-error-reduce-unreachable.conflicts
    on-error-reduce-unreachable.timings)
  (deps on-error-reduce-unreachable.mly)
  (action
    (with-outputs-to on-error-reduce-unreachable.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to on-error-reduce-unreachable.timings %{deps})))))

(rule (alias quick)
  (action
    (diff on-error-reduce-unreachable.exp on-error-reduce-unreachable.out)))

(rule (alias quick)
  (action
    (diff on-error-reduce-unreachable.automaton.exp
      on-error-reduce-unreachable.automaton)))

(rule (alias quick)
  (action
    (diff on-error-reduce-unreachable.automaton.resolved.exp
      on-error-reduce-unreachable.automaton.resolved)))

(rule (alias quick)
  (action
    (diff on-error-reduce-unreachable.conflicts.exp
      on-error-reduce-unreachable.conflicts)))

(rule (target on-error-reduce-unreachable_stripped.mly)
  (deps on-error-reduce-unreachable.mly)
  (action
    (with-stderr-to on-error-reduce-unreachable_stripped.ignored
      (with-stdout-to on-error-reduce-unreachable_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets on-error-reduce-unreachable_stripped.log
    on-error-reduce-unreachable_stripped.mli
    on-error-reduce-unreachable_stripped.ml
    on-error-reduce-unreachable_stripped.stacklang
    on-error-reduce-unreachable_stripped.timings
    on-error-reduce-unreachable_stripped.scount
    on-error-reduce-unreachable_stripped.dcount)
  (deps on-error-reduce-unreachable_stripped.mly)
  (action
    (with-outputs-to on-error-reduce-unreachable_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to on-error-reduce-unreachable_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      on-error-reduce-unreachable_stripped.stacklang))

(rule
  (targets on-error-reduce-unreachable_stripped.cmi
    on-error-reduce-unreachable_stripped.mli.log)
  (deps on-error-reduce-unreachable_stripped.mli)
  (action
    (with-stdout-to on-error-reduce-unreachable_stripped.mli.dtimings
      (with-stderr-to on-error-reduce-unreachable_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          on-error-reduce-unreachable_stripped.mli)))))

(rule
  (targets on-error-reduce-unreachable_stripped.cmo
    on-error-reduce-unreachable_stripped.ml.log)
  (deps on-error-reduce-unreachable_stripped.ml
    on-error-reduce-unreachable_stripped.cmi)
  (action
    (with-stdout-to on-error-reduce-unreachable_stripped.ml.dtimings
      (with-stderr-to on-error-reduce-unreachable_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          on-error-reduce-unreachable_stripped.ml)))))

(rule (alias test)
  (action
    (diff on-error-reduce-unreachable_stripped.ml.log.exp
      on-error-reduce-unreachable_stripped.ml.log)))

(rule (target opam-doc.0.9.3-info_parser.opp.out)
  (deps opam-doc.0.9.3-info_parser.mly)
  (action
    (with-outputs-to opam-doc.0.9.3-info_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff opam-doc.0.9.3-info_parser.opp.exp
      opam-doc.0.9.3-info_parser.opp.out)))

(rule
  (targets opam-doc.0.9.3-info_parser.out
    opam-doc.0.9.3-info_parser.automaton
    opam-doc.0.9.3-info_parser.automaton.resolved
    opam-doc.0.9.3-info_parser.conflicts opam-doc.0.9.3-info_parser.timings)
  (deps opam-doc.0.9.3-info_parser.mly)
  (action
    (with-outputs-to opam-doc.0.9.3-info_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to opam-doc.0.9.3-info_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff opam-doc.0.9.3-info_parser.exp opam-doc.0.9.3-info_parser.out)))

(rule (alias quick)
  (action
    (diff opam-doc.0.9.3-info_parser.automaton.exp
      opam-doc.0.9.3-info_parser.automaton)))

(rule (alias quick)
  (action
    (diff opam-doc.0.9.3-info_parser.automaton.resolved.exp
      opam-doc.0.9.3-info_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff opam-doc.0.9.3-info_parser.conflicts.exp
      opam-doc.0.9.3-info_parser.conflicts)))

(rule (target opam-doc_0_9_3-info_parser_stripped.mly)
  (deps opam-doc.0.9.3-info_parser.mly)
  (action
    (with-stderr-to opam-doc_0_9_3-info_parser_stripped.ignored
      (with-stdout-to opam-doc_0_9_3-info_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets opam-doc_0_9_3-info_parser_stripped.log
    opam-doc_0_9_3-info_parser_stripped.mli
    opam-doc_0_9_3-info_parser_stripped.ml
    opam-doc_0_9_3-info_parser_stripped.stacklang
    opam-doc_0_9_3-info_parser_stripped.timings
    opam-doc_0_9_3-info_parser_stripped.scount
    opam-doc_0_9_3-info_parser_stripped.dcount)
  (deps opam-doc_0_9_3-info_parser_stripped.mly)
  (action
    (with-outputs-to opam-doc_0_9_3-info_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to opam-doc_0_9_3-info_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      opam-doc_0_9_3-info_parser_stripped.stacklang))

(rule
  (targets opam-doc_0_9_3-info_parser_stripped.cmi
    opam-doc_0_9_3-info_parser_stripped.mli.log)
  (deps opam-doc_0_9_3-info_parser_stripped.mli)
  (action
    (with-stdout-to opam-doc_0_9_3-info_parser_stripped.mli.dtimings
      (with-stderr-to opam-doc_0_9_3-info_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          opam-doc_0_9_3-info_parser_stripped.mli)))))

(rule
  (targets opam-doc_0_9_3-info_parser_stripped.cmo
    opam-doc_0_9_3-info_parser_stripped.ml.log)
  (deps opam-doc_0_9_3-info_parser_stripped.ml
    opam-doc_0_9_3-info_parser_stripped.cmi)
  (action
    (with-stdout-to opam-doc_0_9_3-info_parser_stripped.ml.dtimings
      (with-stderr-to opam-doc_0_9_3-info_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          opam-doc_0_9_3-info_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff opam-doc_0_9_3-info_parser_stripped.ml.log.exp
      opam-doc_0_9_3-info_parser_stripped.ml.log)))

(rule (target openqasm.opp.out) (deps openqasm.mly)
  (action
    (with-outputs-to openqasm.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff openqasm.opp.exp openqasm.opp.out)))

(rule
  (targets openqasm.out openqasm.automaton openqasm.automaton.resolved
    openqasm.conflicts openqasm.timings)
  (deps openqasm.mly)
  (action
    (with-outputs-to openqasm.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to openqasm.timings %{deps})))))

(rule (alias quick) (action (diff openqasm.exp openqasm.out)))

(rule (alias quick)
  (action (diff openqasm.automaton.exp openqasm.automaton)))

(rule (alias quick)
  (action (diff openqasm.automaton.resolved.exp openqasm.automaton.resolved)))

(rule (alias quick)
  (action (diff openqasm.conflicts.exp openqasm.conflicts)))

(rule (target openqasm_stripped.mly) (deps openqasm.mly)
  (action
    (with-stderr-to openqasm_stripped.ignored
      (with-stdout-to openqasm_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets openqasm_stripped.log openqasm_stripped.mli openqasm_stripped.ml
    openqasm_stripped.stacklang openqasm_stripped.timings
    openqasm_stripped.scount openqasm_stripped.dcount)
  (deps openqasm_stripped.mly)
  (action
    (with-outputs-to openqasm_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to openqasm_stripped.timings %{deps})))))

(alias (name quick) (deps
                      openqasm_stripped.stacklang))

(rule (targets openqasm_stripped.cmi openqasm_stripped.mli.log)
  (deps openqasm_stripped.mli)
  (action
    (with-stdout-to openqasm_stripped.mli.dtimings
      (with-stderr-to openqasm_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c openqasm_stripped.mli)))))

(rule (targets openqasm_stripped.cmo openqasm_stripped.ml.log)
  (deps openqasm_stripped.ml openqasm_stripped.cmi)
  (action
    (with-stdout-to openqasm_stripped.ml.dtimings
      (with-stderr-to openqasm_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c openqasm_stripped.ml)))))

(rule (alias test)
  (action (diff openqasm_stripped.ml.log.exp openqasm_stripped.ml.log)))

(rule (target option2.opp.out) (deps option2.mly)
  (action
    (with-outputs-to option2.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff option2.opp.exp option2.opp.out)))

(rule
  (targets option2.out option2.automaton option2.automaton.resolved
    option2.conflicts option2.timings)
  (deps option2.mly)
  (action
    (with-outputs-to option2.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to option2.timings %{deps})))))

(rule (alias quick) (action (diff option2.exp option2.out)))

(rule (alias quick) (action (diff option2.automaton.exp option2.automaton)))

(rule (alias quick)
  (action (diff option2.automaton.resolved.exp option2.automaton.resolved)))

(rule (alias quick) (action (diff option2.conflicts.exp option2.conflicts)))

(rule (target option2_stripped.mly) (deps option2.mly)
  (action
    (with-stderr-to option2_stripped.ignored
      (with-stdout-to option2_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets option2_stripped.log option2_stripped.mli option2_stripped.ml
    option2_stripped.stacklang option2_stripped.timings
    option2_stripped.scount option2_stripped.dcount)
  (deps option2_stripped.mly)
  (action
    (with-outputs-to option2_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to option2_stripped.timings %{deps})))))

(alias (name quick) (deps
                      option2_stripped.stacklang))

(rule (targets option2_stripped.cmi option2_stripped.mli.log)
  (deps option2_stripped.mli)
  (action
    (with-stdout-to option2_stripped.mli.dtimings
      (with-stderr-to option2_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c option2_stripped.mli)))))

(rule (targets option2_stripped.cmo option2_stripped.ml.log)
  (deps option2_stripped.ml option2_stripped.cmi)
  (action
    (with-stdout-to option2_stripped.ml.dtimings
      (with-stderr-to option2_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c option2_stripped.ml)))))

(rule (alias test)
  (action (diff option2_stripped.ml.log.exp option2_stripped.ml.log)))

(rule (target options.opp.out) (deps options.mly)
  (action
    (with-outputs-to options.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff options.opp.exp options.opp.out)))

(rule
  (targets options.out options.automaton options.automaton.resolved
    options.conflicts options.timings)
  (deps options.mly)
  (action
    (with-outputs-to options.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to options.timings %{deps})))))

(rule (alias quick) (action (diff options.exp options.out)))

(rule (alias quick) (action (diff options.automaton.exp options.automaton)))

(rule (alias quick)
  (action (diff options.automaton.resolved.exp options.automaton.resolved)))

(rule (alias quick) (action (diff options.conflicts.exp options.conflicts)))

(rule (target options_stripped.mly) (deps options.mly)
  (action
    (with-stderr-to options_stripped.ignored
      (with-stdout-to options_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets options_stripped.log options_stripped.mli options_stripped.ml
    options_stripped.stacklang options_stripped.timings
    options_stripped.scount options_stripped.dcount)
  (deps options_stripped.mly)
  (action
    (with-outputs-to options_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to options_stripped.timings %{deps})))))

(alias (name quick) (deps
                      options_stripped.stacklang))

(rule (targets options_stripped.cmi options_stripped.mli.log)
  (deps options_stripped.mli)
  (action
    (with-stdout-to options_stripped.mli.dtimings
      (with-stderr-to options_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c options_stripped.mli)))))

(rule (targets options_stripped.cmo options_stripped.ml.log)
  (deps options_stripped.ml options_stripped.cmi)
  (action
    (with-stdout-to options_stripped.ml.dtimings
      (with-stderr-to options_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c options_stripped.ml)))))

(rule (alias test)
  (action (diff options_stripped.ml.log.exp options_stripped.ml.log)))

(rule (target orpie.1.6.0-txtin_parser.opp.out)
  (deps orpie.1.6.0-txtin_parser.mly)
  (action
    (with-outputs-to orpie.1.6.0-txtin_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff orpie.1.6.0-txtin_parser.opp.exp orpie.1.6.0-txtin_parser.opp.out)))

(rule
  (targets orpie.1.6.0-txtin_parser.out orpie.1.6.0-txtin_parser.automaton
    orpie.1.6.0-txtin_parser.automaton.resolved
    orpie.1.6.0-txtin_parser.conflicts orpie.1.6.0-txtin_parser.timings)
  (deps orpie.1.6.0-txtin_parser.mly)
  (action
    (with-outputs-to orpie.1.6.0-txtin_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to orpie.1.6.0-txtin_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff orpie.1.6.0-txtin_parser.exp orpie.1.6.0-txtin_parser.out)))

(rule (alias quick)
  (action
    (diff orpie.1.6.0-txtin_parser.automaton.exp
      orpie.1.6.0-txtin_parser.automaton)))

(rule (alias quick)
  (action
    (diff orpie.1.6.0-txtin_parser.automaton.resolved.exp
      orpie.1.6.0-txtin_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff orpie.1.6.0-txtin_parser.conflicts.exp
      orpie.1.6.0-txtin_parser.conflicts)))

(rule (target orpie_1_6_0-txtin_parser_stripped.mly)
  (deps orpie.1.6.0-txtin_parser.mly)
  (action
    (with-stderr-to orpie_1_6_0-txtin_parser_stripped.ignored
      (with-stdout-to orpie_1_6_0-txtin_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets orpie_1_6_0-txtin_parser_stripped.log
    orpie_1_6_0-txtin_parser_stripped.mli
    orpie_1_6_0-txtin_parser_stripped.ml
    orpie_1_6_0-txtin_parser_stripped.stacklang
    orpie_1_6_0-txtin_parser_stripped.timings
    orpie_1_6_0-txtin_parser_stripped.scount
    orpie_1_6_0-txtin_parser_stripped.dcount)
  (deps orpie_1_6_0-txtin_parser_stripped.mly)
  (action
    (with-outputs-to orpie_1_6_0-txtin_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to orpie_1_6_0-txtin_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      orpie_1_6_0-txtin_parser_stripped.stacklang))

(rule
  (targets orpie_1_6_0-txtin_parser_stripped.cmi
    orpie_1_6_0-txtin_parser_stripped.mli.log)
  (deps orpie_1_6_0-txtin_parser_stripped.mli)
  (action
    (with-stdout-to orpie_1_6_0-txtin_parser_stripped.mli.dtimings
      (with-stderr-to orpie_1_6_0-txtin_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          orpie_1_6_0-txtin_parser_stripped.mli)))))

(rule
  (targets orpie_1_6_0-txtin_parser_stripped.cmo
    orpie_1_6_0-txtin_parser_stripped.ml.log)
  (deps orpie_1_6_0-txtin_parser_stripped.ml
    orpie_1_6_0-txtin_parser_stripped.cmi)
  (action
    (with-stdout-to orpie_1_6_0-txtin_parser_stripped.ml.dtimings
      (with-stderr-to orpie_1_6_0-txtin_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          orpie_1_6_0-txtin_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff orpie_1_6_0-txtin_parser_stripped.ml.log.exp
      orpie_1_6_0-txtin_parser_stripped.ml.log)))

(rule (target osdp.0.6.0-pa_parser.opp.out) (deps osdp.0.6.0-pa_parser.mly)
  (action
    (with-outputs-to osdp.0.6.0-pa_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff osdp.0.6.0-pa_parser.opp.exp osdp.0.6.0-pa_parser.opp.out)))

(rule
  (targets osdp.0.6.0-pa_parser.out osdp.0.6.0-pa_parser.automaton
    osdp.0.6.0-pa_parser.automaton.resolved osdp.0.6.0-pa_parser.conflicts
    osdp.0.6.0-pa_parser.timings)
  (deps osdp.0.6.0-pa_parser.mly)
  (action
    (with-outputs-to osdp.0.6.0-pa_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to osdp.0.6.0-pa_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff osdp.0.6.0-pa_parser.exp osdp.0.6.0-pa_parser.out)))

(rule (alias quick)
  (action
    (diff osdp.0.6.0-pa_parser.automaton.exp osdp.0.6.0-pa_parser.automaton)))

(rule (alias quick)
  (action
    (diff osdp.0.6.0-pa_parser.automaton.resolved.exp
      osdp.0.6.0-pa_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff osdp.0.6.0-pa_parser.conflicts.exp osdp.0.6.0-pa_parser.conflicts)))

(rule (target osdp_0_6_0-pa_parser_stripped.mly)
  (deps osdp.0.6.0-pa_parser.mly)
  (action
    (with-stderr-to osdp_0_6_0-pa_parser_stripped.ignored
      (with-stdout-to osdp_0_6_0-pa_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets osdp_0_6_0-pa_parser_stripped.log
    osdp_0_6_0-pa_parser_stripped.mli osdp_0_6_0-pa_parser_stripped.ml
    osdp_0_6_0-pa_parser_stripped.stacklang
    osdp_0_6_0-pa_parser_stripped.timings
    osdp_0_6_0-pa_parser_stripped.scount
    osdp_0_6_0-pa_parser_stripped.dcount)
  (deps osdp_0_6_0-pa_parser_stripped.mly)
  (action
    (with-outputs-to osdp_0_6_0-pa_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to osdp_0_6_0-pa_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      osdp_0_6_0-pa_parser_stripped.stacklang))

(rule
  (targets osdp_0_6_0-pa_parser_stripped.cmi
    osdp_0_6_0-pa_parser_stripped.mli.log)
  (deps osdp_0_6_0-pa_parser_stripped.mli)
  (action
    (with-stdout-to osdp_0_6_0-pa_parser_stripped.mli.dtimings
      (with-stderr-to osdp_0_6_0-pa_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          osdp_0_6_0-pa_parser_stripped.mli)))))

(rule
  (targets osdp_0_6_0-pa_parser_stripped.cmo
    osdp_0_6_0-pa_parser_stripped.ml.log)
  (deps osdp_0_6_0-pa_parser_stripped.ml osdp_0_6_0-pa_parser_stripped.cmi)
  (action
    (with-stdout-to osdp_0_6_0-pa_parser_stripped.ml.dtimings
      (with-stderr-to osdp_0_6_0-pa_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          osdp_0_6_0-pa_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff osdp_0_6_0-pa_parser_stripped.ml.log.exp
      osdp_0_6_0-pa_parser_stripped.ml.log)))

(rule (target pager.opp.out) (deps pager.mly)
  (action
    (with-outputs-to pager.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff pager.opp.exp pager.opp.out)))

(rule
  (targets pager.out pager.automaton pager.automaton.resolved pager.conflicts
    pager.timings)
  (deps pager.mly)
  (action
    (with-outputs-to pager.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pager.timings %{deps})))))

(rule (alias quick) (action (diff pager.exp pager.out)))

(rule (alias quick) (action (diff pager.automaton.exp pager.automaton)))

(rule (alias quick)
  (action (diff pager.automaton.resolved.exp pager.automaton.resolved)))

(rule (alias quick) (action (diff pager.conflicts.exp pager.conflicts)))

(rule (target pager_stripped.mly) (deps pager.mly)
  (action
    (with-stderr-to pager_stripped.ignored
      (with-stdout-to pager_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pager_stripped.log pager_stripped.mli pager_stripped.ml
    pager_stripped.stacklang pager_stripped.timings pager_stripped.scount
    pager_stripped.dcount)
  (deps pager_stripped.mly)
  (action
    (with-outputs-to pager_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pager_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pager_stripped.stacklang))

(rule (targets pager_stripped.cmi pager_stripped.mli.log)
  (deps pager_stripped.mli)
  (action
    (with-stdout-to pager_stripped.mli.dtimings
      (with-stderr-to pager_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pager_stripped.mli)))))

(rule (targets pager_stripped.cmo pager_stripped.ml.log)
  (deps pager_stripped.ml pager_stripped.cmi)
  (action
    (with-stdout-to pager_stripped.ml.dtimings
      (with-stderr-to pager_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pager_stripped.ml)))))

(rule (alias test)
  (action (diff pager_stripped.ml.log.exp pager_stripped.ml.log)))

(rule (target pair-new-syntax.opp.out) (deps pair-new-syntax.mly)
  (action
    (with-outputs-to pair-new-syntax.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff pair-new-syntax.opp.exp pair-new-syntax.opp.out)))

(rule
  (targets pair-new-syntax.out pair-new-syntax.automaton
    pair-new-syntax.automaton.resolved pair-new-syntax.conflicts
    pair-new-syntax.timings)
  (deps pair-new-syntax.mly)
  (action
    (with-outputs-to pair-new-syntax.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pair-new-syntax.timings %{deps})))))

(rule (alias quick) (action (diff pair-new-syntax.exp pair-new-syntax.out)))

(rule (alias quick)
  (action (diff pair-new-syntax.automaton.exp pair-new-syntax.automaton)))

(rule (alias quick)
  (action
    (diff pair-new-syntax.automaton.resolved.exp
      pair-new-syntax.automaton.resolved)))

(rule (alias quick)
  (action (diff pair-new-syntax.conflicts.exp pair-new-syntax.conflicts)))

(rule (target pair-new-syntax_stripped.mly) (deps pair-new-syntax.mly)
  (action
    (with-stderr-to pair-new-syntax_stripped.ignored
      (with-stdout-to pair-new-syntax_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pair-new-syntax_stripped.log pair-new-syntax_stripped.mli
    pair-new-syntax_stripped.ml pair-new-syntax_stripped.stacklang
    pair-new-syntax_stripped.timings pair-new-syntax_stripped.scount
    pair-new-syntax_stripped.dcount)
  (deps pair-new-syntax_stripped.mly)
  (action
    (with-outputs-to pair-new-syntax_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pair-new-syntax_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pair-new-syntax_stripped.stacklang))

(rule (targets pair-new-syntax_stripped.cmi pair-new-syntax_stripped.mli.log)
  (deps pair-new-syntax_stripped.mli)
  (action
    (with-stdout-to pair-new-syntax_stripped.mli.dtimings
      (with-stderr-to pair-new-syntax_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pair-new-syntax_stripped.mli)))))

(rule (targets pair-new-syntax_stripped.cmo pair-new-syntax_stripped.ml.log)
  (deps pair-new-syntax_stripped.ml pair-new-syntax_stripped.cmi)
  (action
    (with-stdout-to pair-new-syntax_stripped.ml.dtimings
      (with-stderr-to pair-new-syntax_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pair-new-syntax_stripped.ml)))))

(rule (alias test)
  (action
    (diff pair-new-syntax_stripped.ml.log.exp
      pair-new-syntax_stripped.ml.log)))

(rule (target parameterized-nonterminal.opp.out)
  (deps parameterized-nonterminal.mly)
  (action
    (with-outputs-to parameterized-nonterminal.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff parameterized-nonterminal.opp.exp
      parameterized-nonterminal.opp.out)))

(rule
  (targets parameterized-nonterminal.out parameterized-nonterminal.automaton
    parameterized-nonterminal.automaton.resolved
    parameterized-nonterminal.conflicts parameterized-nonterminal.timings)
  (deps parameterized-nonterminal.mly)
  (action
    (with-outputs-to parameterized-nonterminal.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to parameterized-nonterminal.timings %{deps})))))

(rule (alias quick)
  (action (diff parameterized-nonterminal.exp parameterized-nonterminal.out)))

(rule (alias quick)
  (action
    (diff parameterized-nonterminal.automaton.exp
      parameterized-nonterminal.automaton)))

(rule (alias quick)
  (action
    (diff parameterized-nonterminal.automaton.resolved.exp
      parameterized-nonterminal.automaton.resolved)))

(rule (alias quick)
  (action
    (diff parameterized-nonterminal.conflicts.exp
      parameterized-nonterminal.conflicts)))

(rule (target parameterized-nonterminal_stripped.mly)
  (deps parameterized-nonterminal.mly)
  (action
    (with-stderr-to parameterized-nonterminal_stripped.ignored
      (with-stdout-to parameterized-nonterminal_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets parameterized-nonterminal_stripped.log
    parameterized-nonterminal_stripped.mli
    parameterized-nonterminal_stripped.ml
    parameterized-nonterminal_stripped.stacklang
    parameterized-nonterminal_stripped.timings
    parameterized-nonterminal_stripped.scount
    parameterized-nonterminal_stripped.dcount)
  (deps parameterized-nonterminal_stripped.mly)
  (action
    (with-outputs-to parameterized-nonterminal_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to parameterized-nonterminal_stripped.timings %{deps})))))

(alias (name quick) (deps
                      parameterized-nonterminal_stripped.stacklang))

(rule
  (targets parameterized-nonterminal_stripped.cmi
    parameterized-nonterminal_stripped.mli.log)
  (deps parameterized-nonterminal_stripped.mli)
  (action
    (with-stdout-to parameterized-nonterminal_stripped.mli.dtimings
      (with-stderr-to parameterized-nonterminal_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          parameterized-nonterminal_stripped.mli)))))

(rule
  (targets parameterized-nonterminal_stripped.cmo
    parameterized-nonterminal_stripped.ml.log)
  (deps parameterized-nonterminal_stripped.ml
    parameterized-nonterminal_stripped.cmi)
  (action
    (with-stdout-to parameterized-nonterminal_stripped.ml.dtimings
      (with-stderr-to parameterized-nonterminal_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          parameterized-nonterminal_stripped.ml)))))

(rule (alias test)
  (action
    (diff parameterized-nonterminal_stripped.ml.log.exp
      parameterized-nonterminal_stripped.ml.log)))

(rule (target parse_xquery.opp.out) (deps parse_xquery.mly)
  (action
    (with-outputs-to parse_xquery.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff parse_xquery.opp.exp parse_xquery.opp.out)))

(rule
  (targets parse_xquery.out parse_xquery.automaton
    parse_xquery.automaton.resolved parse_xquery.conflicts
    parse_xquery.timings)
  (deps parse_xquery.mly)
  (action
    (with-outputs-to parse_xquery.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to parse_xquery.timings %{deps})))))

(rule (alias quick) (action (diff parse_xquery.exp parse_xquery.out)))

(rule (alias quick)
  (action (diff parse_xquery.automaton.exp parse_xquery.automaton)))

(rule (alias quick)
  (action
    (diff parse_xquery.automaton.resolved.exp
      parse_xquery.automaton.resolved)))

(rule (alias quick)
  (action (diff parse_xquery.conflicts.exp parse_xquery.conflicts)))

(rule (target parse_xquery_stripped.mly) (deps parse_xquery.mly)
  (action
    (with-stderr-to parse_xquery_stripped.ignored
      (with-stdout-to parse_xquery_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets parse_xquery_stripped.log parse_xquery_stripped.mli
    parse_xquery_stripped.ml parse_xquery_stripped.stacklang
    parse_xquery_stripped.timings parse_xquery_stripped.scount
    parse_xquery_stripped.dcount)
  (deps parse_xquery_stripped.mly)
  (action
    (with-outputs-to parse_xquery_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to parse_xquery_stripped.timings %{deps})))))

(alias (name quick) (deps
                      parse_xquery_stripped.stacklang))

(rule (targets parse_xquery_stripped.cmi parse_xquery_stripped.mli.log)
  (deps parse_xquery_stripped.mli)
  (action
    (with-stdout-to parse_xquery_stripped.mli.dtimings
      (with-stderr-to parse_xquery_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c parse_xquery_stripped.mli)))))

(rule (targets parse_xquery_stripped.cmo parse_xquery_stripped.ml.log)
  (deps parse_xquery_stripped.ml parse_xquery_stripped.cmi)
  (action
    (with-stdout-to parse_xquery_stripped.ml.dtimings
      (with-stderr-to parse_xquery_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c parse_xquery_stripped.ml)))))

(rule (alias test)
  (action
    (diff parse_xquery_stripped.ml.log.exp parse_xquery_stripped.ml.log)))

(rule (target parser_cocci_menhir.opp.out) (deps parser_cocci_menhir.mly)
  (action
    (with-outputs-to parser_cocci_menhir.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff parser_cocci_menhir.opp.exp parser_cocci_menhir.opp.out)))

(rule
  (targets parser_cocci_menhir.out parser_cocci_menhir.automaton
    parser_cocci_menhir.automaton.resolved parser_cocci_menhir.conflicts
    parser_cocci_menhir.timings)
  (deps parser_cocci_menhir.mly)
  (action
    (with-outputs-to parser_cocci_menhir.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to parser_cocci_menhir.timings %{deps})))))

(rule (alias quick)
  (action (diff parser_cocci_menhir.exp parser_cocci_menhir.out)))

(rule (alias quick)
  (action
    (diff parser_cocci_menhir.automaton.exp parser_cocci_menhir.automaton)))

(rule (alias quick)
  (action
    (diff parser_cocci_menhir.automaton.resolved.exp
      parser_cocci_menhir.automaton.resolved)))

(rule (alias quick)
  (action
    (diff parser_cocci_menhir.conflicts.exp parser_cocci_menhir.conflicts)))

(rule (target parser_cocci_menhir_stripped.mly)
  (deps parser_cocci_menhir.mly)
  (action
    (with-stderr-to parser_cocci_menhir_stripped.ignored
      (with-stdout-to parser_cocci_menhir_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets parser_cocci_menhir_stripped.log parser_cocci_menhir_stripped.mli
    parser_cocci_menhir_stripped.ml parser_cocci_menhir_stripped.stacklang
    parser_cocci_menhir_stripped.timings parser_cocci_menhir_stripped.scount
    parser_cocci_menhir_stripped.dcount)
  (deps parser_cocci_menhir_stripped.mly)
  (action
    (with-outputs-to parser_cocci_menhir_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to parser_cocci_menhir_stripped.timings %{deps})))))

(alias (name quick) (deps
                      parser_cocci_menhir_stripped.stacklang))

(rule
  (targets parser_cocci_menhir_stripped.cmi
    parser_cocci_menhir_stripped.mli.log)
  (deps parser_cocci_menhir_stripped.mli)
  (action
    (with-stdout-to parser_cocci_menhir_stripped.mli.dtimings
      (with-stderr-to parser_cocci_menhir_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          parser_cocci_menhir_stripped.mli)))))

(rule
  (targets parser_cocci_menhir_stripped.cmo
    parser_cocci_menhir_stripped.ml.log)
  (deps parser_cocci_menhir_stripped.ml parser_cocci_menhir_stripped.cmi)
  (action
    (with-stdout-to parser_cocci_menhir_stripped.ml.dtimings
      (with-stderr-to parser_cocci_menhir_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c parser_cocci_menhir_stripped.ml)))))

(rule (alias test)
  (action
    (diff parser_cocci_menhir_stripped.ml.log.exp
      parser_cocci_menhir_stripped.ml.log)))

(rule (target parser_raw.opp.out) (deps parser_raw.mly)
  (action
    (with-outputs-to parser_raw.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff parser_raw.opp.exp parser_raw.opp.out)))

(rule
  (targets parser_raw.out parser_raw.automaton parser_raw.automaton.resolved
    parser_raw.conflicts parser_raw.timings)
  (deps parser_raw.mly)
  (action
    (with-outputs-to parser_raw.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to parser_raw.timings %{deps})))))

(rule (alias quick) (action (diff parser_raw.exp parser_raw.out)))

(rule (alias quick)
  (action (diff parser_raw.automaton.exp parser_raw.automaton)))

(rule (alias quick)
  (action
    (diff parser_raw.automaton.resolved.exp parser_raw.automaton.resolved)))

(rule (alias quick)
  (action (diff parser_raw.conflicts.exp parser_raw.conflicts)))

(rule (target parser_raw_stripped.mly) (deps parser_raw.mly)
  (action
    (with-stderr-to parser_raw_stripped.ignored
      (with-stdout-to parser_raw_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets parser_raw_stripped.log parser_raw_stripped.mli
    parser_raw_stripped.ml parser_raw_stripped.stacklang
    parser_raw_stripped.timings parser_raw_stripped.scount
    parser_raw_stripped.dcount)
  (deps parser_raw_stripped.mly)
  (action
    (with-outputs-to parser_raw_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to parser_raw_stripped.timings %{deps})))))

(alias (name quick) (deps
                      parser_raw_stripped.stacklang))

(rule (targets parser_raw_stripped.cmi parser_raw_stripped.mli.log)
  (deps parser_raw_stripped.mli)
  (action
    (with-stdout-to parser_raw_stripped.mli.dtimings
      (with-stderr-to parser_raw_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c parser_raw_stripped.mli)))))

(rule (targets parser_raw_stripped.cmo parser_raw_stripped.ml.log)
  (deps parser_raw_stripped.ml parser_raw_stripped.cmi)
  (action
    (with-stdout-to parser_raw_stripped.ml.dtimings
      (with-stderr-to parser_raw_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c parser_raw_stripped.ml)))))

(rule (alias test)
  (action (diff parser_raw_stripped.ml.log.exp parser_raw_stripped.ml.log)))

(rule (target partest.opp.out) (deps partest.mly)
  (action
    (with-outputs-to partest.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff partest.opp.exp partest.opp.out)))

(rule
  (targets partest.out partest.automaton partest.automaton.resolved
    partest.conflicts partest.timings)
  (deps partest.mly)
  (action
    (with-outputs-to partest.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to partest.timings %{deps})))))

(rule (alias quick) (action (diff partest.exp partest.out)))

(rule (alias quick) (action (diff partest.automaton.exp partest.automaton)))

(rule (alias quick)
  (action (diff partest.automaton.resolved.exp partest.automaton.resolved)))

(rule (alias quick) (action (diff partest.conflicts.exp partest.conflicts)))

(rule (target permutation.opp.out) (deps permutation.mly)
  (action
    (with-outputs-to permutation.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff permutation.opp.exp permutation.opp.out)))

(rule
  (targets permutation.out permutation.automaton
    permutation.automaton.resolved permutation.conflicts permutation.timings)
  (deps permutation.mly)
  (action
    (with-outputs-to permutation.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to permutation.timings %{deps})))))

(rule (alias quick) (action (diff permutation.exp permutation.out)))

(rule (alias quick)
  (action (diff permutation.automaton.exp permutation.automaton)))

(rule (alias quick)
  (action
    (diff permutation.automaton.resolved.exp permutation.automaton.resolved)))

(rule (alias quick)
  (action (diff permutation.conflicts.exp permutation.conflicts)))

(rule (target permutation_stripped.mly) (deps permutation.mly)
  (action
    (with-stderr-to permutation_stripped.ignored
      (with-stdout-to permutation_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets permutation_stripped.log permutation_stripped.mli
    permutation_stripped.ml permutation_stripped.stacklang
    permutation_stripped.timings permutation_stripped.scount
    permutation_stripped.dcount)
  (deps permutation_stripped.mly)
  (action
    (with-outputs-to permutation_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to permutation_stripped.timings %{deps})))))

(alias (name quick) (deps
                      permutation_stripped.stacklang))

(rule (targets permutation_stripped.cmi permutation_stripped.mli.log)
  (deps permutation_stripped.mli)
  (action
    (with-stdout-to permutation_stripped.mli.dtimings
      (with-stderr-to permutation_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c permutation_stripped.mli)))))

(rule (targets permutation_stripped.cmo permutation_stripped.ml.log)
  (deps permutation_stripped.ml permutation_stripped.cmi)
  (action
    (with-stdout-to permutation_stripped.ml.dtimings
      (with-stderr-to permutation_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c permutation_stripped.ml)))))

(rule (alias test)
  (action (diff permutation_stripped.ml.log.exp permutation_stripped.ml.log)))

(rule (target permutation-growth.opp.out) (deps permutation-growth.mly)
  (action
    (with-outputs-to permutation-growth.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff permutation-growth.opp.exp permutation-growth.opp.out)))

(rule
  (targets permutation-growth.out permutation-growth.automaton
    permutation-growth.automaton.resolved permutation-growth.conflicts
    permutation-growth.timings)
  (deps permutation-growth.mly)
  (action
    (with-outputs-to permutation-growth.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to permutation-growth.timings %{deps})))))

(rule (alias quick)
  (action (diff permutation-growth.exp permutation-growth.out)))

(rule (alias quick)
  (action
    (diff permutation-growth.automaton.exp permutation-growth.automaton)))

(rule (alias quick)
  (action
    (diff permutation-growth.automaton.resolved.exp
      permutation-growth.automaton.resolved)))

(rule (alias quick)
  (action
    (diff permutation-growth.conflicts.exp permutation-growth.conflicts)))

(rule (target permutation-growth_stripped.mly) (deps permutation-growth.mly)
  (action
    (with-stderr-to permutation-growth_stripped.ignored
      (with-stdout-to permutation-growth_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets permutation-growth_stripped.log permutation-growth_stripped.mli
    permutation-growth_stripped.ml permutation-growth_stripped.stacklang
    permutation-growth_stripped.timings permutation-growth_stripped.scount
    permutation-growth_stripped.dcount)
  (deps permutation-growth_stripped.mly)
  (action
    (with-outputs-to permutation-growth_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to permutation-growth_stripped.timings %{deps})))))

(alias (name quick) (deps
                      permutation-growth_stripped.stacklang))

(rule
  (targets permutation-growth_stripped.cmi
    permutation-growth_stripped.mli.log)
  (deps permutation-growth_stripped.mli)
  (action
    (with-stdout-to permutation-growth_stripped.mli.dtimings
      (with-stderr-to permutation-growth_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c permutation-growth_stripped.mli)))))

(rule
  (targets permutation-growth_stripped.cmo
    permutation-growth_stripped.ml.log)
  (deps permutation-growth_stripped.ml permutation-growth_stripped.cmi)
  (action
    (with-stdout-to permutation-growth_stripped.ml.dtimings
      (with-stderr-to permutation-growth_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c permutation-growth_stripped.ml)))))

(rule (alias test)
  (action
    (diff permutation-growth_stripped.ml.log.exp
      permutation-growth_stripped.ml.log)))

(rule (target petit-1.opp.out) (deps petit-1.mly petit-2.mly)
  (action
    (with-outputs-to petit-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base petit-1 --only-preprocess %{deps})))))

(rule (alias quick) (action (diff petit-1.opp.exp petit-1.opp.out)))

(rule
  (targets petit-1.out petit-1.automaton petit-1.automaton.resolved
    petit-1.conflicts petit-1.timings)
  (deps petit-1.mly petit-2.mly)
  (action
    (with-outputs-to petit-1.out
      (with-accepted-exit-codes 0
        (run menhir --base petit-1 --table --dump --dump-resolved --explain
          -lg 2 -la 2 -lc 2 --timings-to petit-1.timings %{deps})))))

(rule (alias quick) (action (diff petit-1.exp petit-1.out)))

(rule (alias quick) (action (diff petit-1.automaton.exp petit-1.automaton)))

(rule (alias quick)
  (action (diff petit-1.automaton.resolved.exp petit-1.automaton.resolved)))

(rule (alias quick) (action (diff petit-1.conflicts.exp petit-1.conflicts)))

(rule (target petit-1_stripped.mly) (deps petit-1.mly petit-2.mly)
  (action
    (with-stderr-to petit-1_stripped.ignored
      (with-stdout-to petit-1_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base petit-1 --only-preprocess-uu %{deps}))))))

(rule
  (targets petit-1_stripped.log petit-1_stripped.mli petit-1_stripped.ml
    petit-1_stripped.stacklang petit-1_stripped.timings
    petit-1_stripped.scount petit-1_stripped.dcount)
  (deps petit-1_stripped.mly)
  (action
    (with-outputs-to petit-1_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to petit-1_stripped.timings %{deps})))))

(alias (name quick) (deps
                      petit-1_stripped.stacklang))

(rule (targets petit-1_stripped.cmi petit-1_stripped.mli.log)
  (deps petit-1_stripped.mli)
  (action
    (with-stdout-to petit-1_stripped.mli.dtimings
      (with-stderr-to petit-1_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c petit-1_stripped.mli)))))

(rule (targets petit-1_stripped.cmo petit-1_stripped.ml.log)
  (deps petit-1_stripped.ml petit-1_stripped.cmi)
  (action
    (with-stdout-to petit-1_stripped.ml.dtimings
      (with-stderr-to petit-1_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c petit-1_stripped.ml)))))

(rule (alias test)
  (action (diff petit-1_stripped.ml.log.exp petit-1_stripped.ml.log)))

(rule (target petr4.opp.out) (deps petr4.mly)
  (action
    (with-outputs-to petr4.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff petr4.opp.exp petr4.opp.out)))

(rule
  (targets petr4.out petr4.automaton petr4.automaton.resolved petr4.conflicts
    petr4.timings)
  (deps petr4.mly)
  (action
    (with-outputs-to petr4.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to petr4.timings %{deps})))))

(rule (alias quick) (action (diff petr4.exp petr4.out)))

(rule (alias quick) (action (diff petr4.automaton.exp petr4.automaton)))

(rule (alias quick)
  (action (diff petr4.automaton.resolved.exp petr4.automaton.resolved)))

(rule (alias quick) (action (diff petr4.conflicts.exp petr4.conflicts)))

(rule (target petr4_stripped.mly) (deps petr4.mly)
  (action
    (with-stderr-to petr4_stripped.ignored
      (with-stdout-to petr4_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets petr4_stripped.log petr4_stripped.mli petr4_stripped.ml
    petr4_stripped.stacklang petr4_stripped.timings petr4_stripped.scount
    petr4_stripped.dcount)
  (deps petr4_stripped.mly)
  (action
    (with-outputs-to petr4_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to petr4_stripped.timings %{deps})))))

(alias (name quick) (deps
                      petr4_stripped.stacklang))

(rule (targets petr4_stripped.cmi petr4_stripped.mli.log)
  (deps petr4_stripped.mli)
  (action
    (with-stdout-to petr4_stripped.mli.dtimings
      (with-stderr-to petr4_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c petr4_stripped.mli)))))

(rule (targets petr4_stripped.cmo petr4_stripped.ml.log)
  (deps petr4_stripped.ml petr4_stripped.cmi)
  (action
    (with-stdout-to petr4_stripped.ml.dtimings
      (with-stderr-to petr4_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c petr4_stripped.ml)))))

(rule (alias test)
  (action (diff petr4_stripped.ml.log.exp petr4_stripped.ml.log)))

(rule (target pfff_cpp.opp.out) (deps pfff_cpp.mly)
  (action
    (with-outputs-to pfff_cpp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff pfff_cpp.opp.exp pfff_cpp.opp.out)))

(rule
  (targets pfff_cpp.out pfff_cpp.automaton pfff_cpp.automaton.resolved
    pfff_cpp.conflicts pfff_cpp.timings)
  (deps pfff_cpp.mly)
  (action
    (with-outputs-to pfff_cpp.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pfff_cpp.timings %{deps})))))

(rule (alias quick) (action (diff pfff_cpp.exp pfff_cpp.out)))

(rule (alias quick)
  (action (diff pfff_cpp.automaton.exp pfff_cpp.automaton)))

(rule (alias quick)
  (action (diff pfff_cpp.automaton.resolved.exp pfff_cpp.automaton.resolved)))

(rule (alias quick)
  (action (diff pfff_cpp.conflicts.exp pfff_cpp.conflicts)))

(rule (target pfff_cpp_stripped.mly) (deps pfff_cpp.mly)
  (action
    (with-stderr-to pfff_cpp_stripped.ignored
      (with-stdout-to pfff_cpp_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pfff_cpp_stripped.log pfff_cpp_stripped.mli pfff_cpp_stripped.ml
    pfff_cpp_stripped.stacklang pfff_cpp_stripped.timings
    pfff_cpp_stripped.scount pfff_cpp_stripped.dcount)
  (deps pfff_cpp_stripped.mly)
  (action
    (with-outputs-to pfff_cpp_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pfff_cpp_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pfff_cpp_stripped.stacklang))

(rule (targets pfff_cpp_stripped.cmi pfff_cpp_stripped.mli.log)
  (deps pfff_cpp_stripped.mli)
  (action
    (with-stdout-to pfff_cpp_stripped.mli.dtimings
      (with-stderr-to pfff_cpp_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pfff_cpp_stripped.mli)))))

(rule (targets pfff_cpp_stripped.cmo pfff_cpp_stripped.ml.log)
  (deps pfff_cpp_stripped.ml pfff_cpp_stripped.cmi)
  (action
    (with-stdout-to pfff_cpp_stripped.ml.dtimings
      (with-stderr-to pfff_cpp_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pfff_cpp_stripped.ml)))))

(rule (alias test)
  (action (diff pfff_cpp_stripped.ml.log.exp pfff_cpp_stripped.ml.log)))

(rule (target pfff_go.opp.out) (deps pfff_go.mly)
  (action
    (with-outputs-to pfff_go.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff pfff_go.opp.exp pfff_go.opp.out)))

(rule
  (targets pfff_go.out pfff_go.automaton pfff_go.automaton.resolved
    pfff_go.conflicts pfff_go.timings)
  (deps pfff_go.mly)
  (action
    (with-outputs-to pfff_go.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pfff_go.timings %{deps})))))

(rule (alias quick) (action (diff pfff_go.exp pfff_go.out)))

(rule (alias quick) (action (diff pfff_go.automaton.exp pfff_go.automaton)))

(rule (alias quick)
  (action (diff pfff_go.automaton.resolved.exp pfff_go.automaton.resolved)))

(rule (alias quick) (action (diff pfff_go.conflicts.exp pfff_go.conflicts)))

(rule (target pfff_go_stripped.mly) (deps pfff_go.mly)
  (action
    (with-stderr-to pfff_go_stripped.ignored
      (with-stdout-to pfff_go_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pfff_go_stripped.log pfff_go_stripped.mli pfff_go_stripped.ml
    pfff_go_stripped.stacklang pfff_go_stripped.timings
    pfff_go_stripped.scount pfff_go_stripped.dcount)
  (deps pfff_go_stripped.mly)
  (action
    (with-outputs-to pfff_go_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pfff_go_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pfff_go_stripped.stacklang))

(rule (targets pfff_go_stripped.cmi pfff_go_stripped.mli.log)
  (deps pfff_go_stripped.mli)
  (action
    (with-stdout-to pfff_go_stripped.mli.dtimings
      (with-stderr-to pfff_go_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pfff_go_stripped.mli)))))

(rule (targets pfff_go_stripped.cmo pfff_go_stripped.ml.log)
  (deps pfff_go_stripped.ml pfff_go_stripped.cmi)
  (action
    (with-stdout-to pfff_go_stripped.ml.dtimings
      (with-stderr-to pfff_go_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pfff_go_stripped.ml)))))

(rule (alias test)
  (action (diff pfff_go_stripped.ml.log.exp pfff_go_stripped.ml.log)))

(rule (target pfff_java.opp.out) (deps pfff_java.mly)
  (action
    (with-outputs-to pfff_java.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff pfff_java.opp.exp pfff_java.opp.out)))

(rule
  (targets pfff_java.out pfff_java.automaton pfff_java.automaton.resolved
    pfff_java.conflicts pfff_java.timings)
  (deps pfff_java.mly)
  (action
    (with-outputs-to pfff_java.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pfff_java.timings %{deps})))))

(rule (alias quick) (action (diff pfff_java.exp pfff_java.out)))

(rule (alias quick)
  (action (diff pfff_java.automaton.exp pfff_java.automaton)))

(rule (alias quick)
  (action
    (diff pfff_java.automaton.resolved.exp pfff_java.automaton.resolved)))

(rule (alias quick)
  (action (diff pfff_java.conflicts.exp pfff_java.conflicts)))

(rule (target pfff_java_stripped.mly) (deps pfff_java.mly)
  (action
    (with-stderr-to pfff_java_stripped.ignored
      (with-stdout-to pfff_java_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pfff_java_stripped.log pfff_java_stripped.mli
    pfff_java_stripped.ml pfff_java_stripped.stacklang
    pfff_java_stripped.timings pfff_java_stripped.scount
    pfff_java_stripped.dcount)
  (deps pfff_java_stripped.mly)
  (action
    (with-outputs-to pfff_java_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pfff_java_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pfff_java_stripped.stacklang))

(rule (targets pfff_java_stripped.cmi pfff_java_stripped.mli.log)
  (deps pfff_java_stripped.mli)
  (action
    (with-stdout-to pfff_java_stripped.mli.dtimings
      (with-stderr-to pfff_java_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pfff_java_stripped.mli)))))

(rule (targets pfff_java_stripped.cmo pfff_java_stripped.ml.log)
  (deps pfff_java_stripped.ml pfff_java_stripped.cmi)
  (action
    (with-stdout-to pfff_java_stripped.ml.dtimings
      (with-stderr-to pfff_java_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pfff_java_stripped.ml)))))

(rule (alias test)
  (action (diff pfff_java_stripped.ml.log.exp pfff_java_stripped.ml.log)))

(rule (target pfff_js.opp.out) (deps pfff_js.mly)
  (action
    (with-outputs-to pfff_js.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff pfff_js.opp.exp pfff_js.opp.out)))

(rule
  (targets pfff_js.out pfff_js.automaton pfff_js.automaton.resolved
    pfff_js.conflicts pfff_js.timings)
  (deps pfff_js.mly)
  (action
    (with-outputs-to pfff_js.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pfff_js.timings %{deps})))))

(rule (alias quick) (action (diff pfff_js.exp pfff_js.out)))

(rule (alias quick) (action (diff pfff_js.automaton.exp pfff_js.automaton)))

(rule (alias quick)
  (action (diff pfff_js.automaton.resolved.exp pfff_js.automaton.resolved)))

(rule (alias quick) (action (diff pfff_js.conflicts.exp pfff_js.conflicts)))

(rule (target pfff_js_stripped.mly) (deps pfff_js.mly)
  (action
    (with-stderr-to pfff_js_stripped.ignored
      (with-stdout-to pfff_js_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pfff_js_stripped.log pfff_js_stripped.mli pfff_js_stripped.ml
    pfff_js_stripped.stacklang pfff_js_stripped.timings
    pfff_js_stripped.scount pfff_js_stripped.dcount)
  (deps pfff_js_stripped.mly)
  (action
    (with-outputs-to pfff_js_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pfff_js_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pfff_js_stripped.stacklang))

(rule (targets pfff_js_stripped.cmi pfff_js_stripped.mli.log)
  (deps pfff_js_stripped.mli)
  (action
    (with-stdout-to pfff_js_stripped.mli.dtimings
      (with-stderr-to pfff_js_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pfff_js_stripped.mli)))))

(rule (targets pfff_js_stripped.cmo pfff_js_stripped.ml.log)
  (deps pfff_js_stripped.ml pfff_js_stripped.cmi)
  (action
    (with-stdout-to pfff_js_stripped.ml.dtimings
      (with-stderr-to pfff_js_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pfff_js_stripped.ml)))))

(rule (alias test)
  (action (diff pfff_js_stripped.ml.log.exp pfff_js_stripped.ml.log)))

(rule (target pfff_php.opp.out) (deps pfff_php.mly)
  (action
    (with-outputs-to pfff_php.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff pfff_php.opp.exp pfff_php.opp.out)))

(rule
  (targets pfff_php.out pfff_php.automaton pfff_php.automaton.resolved
    pfff_php.conflicts pfff_php.timings)
  (deps pfff_php.mly)
  (action
    (with-outputs-to pfff_php.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pfff_php.timings %{deps})))))

(rule (alias quick) (action (diff pfff_php.exp pfff_php.out)))

(rule (alias quick)
  (action (diff pfff_php.automaton.exp pfff_php.automaton)))

(rule (alias quick)
  (action (diff pfff_php.automaton.resolved.exp pfff_php.automaton.resolved)))

(rule (alias quick)
  (action (diff pfff_php.conflicts.exp pfff_php.conflicts)))

(rule (target pfff_php_stripped.mly) (deps pfff_php.mly)
  (action
    (with-stderr-to pfff_php_stripped.ignored
      (with-stdout-to pfff_php_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pfff_php_stripped.log pfff_php_stripped.mli pfff_php_stripped.ml
    pfff_php_stripped.stacklang pfff_php_stripped.timings
    pfff_php_stripped.scount pfff_php_stripped.dcount)
  (deps pfff_php_stripped.mly)
  (action
    (with-outputs-to pfff_php_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pfff_php_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pfff_php_stripped.stacklang))

(rule (targets pfff_php_stripped.cmi pfff_php_stripped.mli.log)
  (deps pfff_php_stripped.mli)
  (action
    (with-stdout-to pfff_php_stripped.mli.dtimings
      (with-stderr-to pfff_php_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pfff_php_stripped.mli)))))

(rule (targets pfff_php_stripped.cmo pfff_php_stripped.ml.log)
  (deps pfff_php_stripped.ml pfff_php_stripped.cmi)
  (action
    (with-stdout-to pfff_php_stripped.ml.dtimings
      (with-stderr-to pfff_php_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pfff_php_stripped.ml)))))

(rule (alias test)
  (action (diff pfff_php_stripped.ml.log.exp pfff_php_stripped.ml.log)))

(rule (target pfff_python.opp.out) (deps pfff_python.mly)
  (action
    (with-outputs-to pfff_python.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff pfff_python.opp.exp pfff_python.opp.out)))

(rule
  (targets pfff_python.out pfff_python.automaton
    pfff_python.automaton.resolved pfff_python.conflicts pfff_python.timings)
  (deps pfff_python.mly)
  (action
    (with-outputs-to pfff_python.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pfff_python.timings %{deps})))))

(rule (alias quick) (action (diff pfff_python.exp pfff_python.out)))

(rule (alias quick)
  (action (diff pfff_python.automaton.exp pfff_python.automaton)))

(rule (alias quick)
  (action
    (diff pfff_python.automaton.resolved.exp pfff_python.automaton.resolved)))

(rule (alias quick)
  (action (diff pfff_python.conflicts.exp pfff_python.conflicts)))

(rule (target pfff_python_stripped.mly) (deps pfff_python.mly)
  (action
    (with-stderr-to pfff_python_stripped.ignored
      (with-stdout-to pfff_python_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pfff_python_stripped.log pfff_python_stripped.mli
    pfff_python_stripped.ml pfff_python_stripped.stacklang
    pfff_python_stripped.timings pfff_python_stripped.scount
    pfff_python_stripped.dcount)
  (deps pfff_python_stripped.mly)
  (action
    (with-outputs-to pfff_python_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pfff_python_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pfff_python_stripped.stacklang))

(rule (targets pfff_python_stripped.cmi pfff_python_stripped.mli.log)
  (deps pfff_python_stripped.mli)
  (action
    (with-stdout-to pfff_python_stripped.mli.dtimings
      (with-stderr-to pfff_python_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pfff_python_stripped.mli)))))

(rule (targets pfff_python_stripped.cmo pfff_python_stripped.ml.log)
  (deps pfff_python_stripped.ml pfff_python_stripped.cmi)
  (action
    (with-stdout-to pfff_python_stripped.ml.dtimings
      (with-stderr-to pfff_python_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pfff_python_stripped.ml)))))

(rule (alias test)
  (action (diff pfff_python_stripped.ml.log.exp pfff_python_stripped.ml.log)))

(rule (target pfff_sql.opp.out) (deps pfff_sql.mly)
  (action
    (with-outputs-to pfff_sql.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff pfff_sql.opp.exp pfff_sql.opp.out)))

(rule
  (targets pfff_sql.out pfff_sql.automaton pfff_sql.automaton.resolved
    pfff_sql.conflicts pfff_sql.timings)
  (deps pfff_sql.mly)
  (action
    (with-outputs-to pfff_sql.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pfff_sql.timings %{deps})))))

(rule (alias quick) (action (diff pfff_sql.exp pfff_sql.out)))

(rule (alias quick)
  (action (diff pfff_sql.automaton.exp pfff_sql.automaton)))

(rule (alias quick)
  (action (diff pfff_sql.automaton.resolved.exp pfff_sql.automaton.resolved)))

(rule (alias quick)
  (action (diff pfff_sql.conflicts.exp pfff_sql.conflicts)))

(rule (target pfff_sql_stripped.mly) (deps pfff_sql.mly)
  (action
    (with-stderr-to pfff_sql_stripped.ignored
      (with-stdout-to pfff_sql_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pfff_sql_stripped.log pfff_sql_stripped.mli pfff_sql_stripped.ml
    pfff_sql_stripped.stacklang pfff_sql_stripped.timings
    pfff_sql_stripped.scount pfff_sql_stripped.dcount)
  (deps pfff_sql_stripped.mly)
  (action
    (with-outputs-to pfff_sql_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pfff_sql_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pfff_sql_stripped.stacklang))

(rule (targets pfff_sql_stripped.cmi pfff_sql_stripped.mli.log)
  (deps pfff_sql_stripped.mli)
  (action
    (with-stdout-to pfff_sql_stripped.mli.dtimings
      (with-stderr-to pfff_sql_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pfff_sql_stripped.mli)))))

(rule (targets pfff_sql_stripped.cmo pfff_sql_stripped.ml.log)
  (deps pfff_sql_stripped.ml pfff_sql_stripped.cmi)
  (action
    (with-stdout-to pfff_sql_stripped.ml.dtimings
      (with-stderr-to pfff_sql_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pfff_sql_stripped.ml)))))

(rule (alias test)
  (action (diff pfff_sql_stripped.ml.log.exp pfff_sql_stripped.ml.log)))

(rule (target photos.opp.out) (deps photos.mly)
  (action
    (with-outputs-to photos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff photos.opp.exp photos.opp.out)))

(rule
  (targets photos.out photos.automaton photos.automaton.resolved
    photos.conflicts photos.timings)
  (deps photos.mly)
  (action
    (with-outputs-to photos.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to photos.timings %{deps})))))

(rule (alias quick) (action (diff photos.exp photos.out)))

(rule (alias quick) (action (diff photos.automaton.exp photos.automaton)))

(rule (alias quick)
  (action (diff photos.automaton.resolved.exp photos.automaton.resolved)))

(rule (alias quick) (action (diff photos.conflicts.exp photos.conflicts)))

(rule (target photos_stripped.mly) (deps photos.mly)
  (action
    (with-stderr-to photos_stripped.ignored
      (with-stdout-to photos_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets photos_stripped.log photos_stripped.mli photos_stripped.ml
    photos_stripped.stacklang photos_stripped.timings photos_stripped.scount
    photos_stripped.dcount)
  (deps photos_stripped.mly)
  (action
    (with-outputs-to photos_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to photos_stripped.timings %{deps})))))

(alias (name quick) (deps
                      photos_stripped.stacklang))

(rule (targets photos_stripped.cmi photos_stripped.mli.log)
  (deps photos_stripped.mli)
  (action
    (with-stdout-to photos_stripped.mli.dtimings
      (with-stderr-to photos_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c photos_stripped.mli)))))

(rule (targets photos_stripped.cmo photos_stripped.ml.log)
  (deps photos_stripped.ml photos_stripped.cmi)
  (action
    (with-stdout-to photos_stripped.ml.dtimings
      (with-stderr-to photos_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c photos_stripped.ml)))))

(rule (alias test)
  (action (diff photos_stripped.ml.log.exp photos_stripped.ml.log)))

(rule (target phparser.opp.out) (deps phparser.mly)
  (action
    (with-outputs-to phparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff phparser.opp.exp phparser.opp.out)))

(rule
  (targets phparser.out phparser.automaton phparser.automaton.resolved
    phparser.conflicts phparser.timings)
  (deps phparser.mly)
  (action
    (with-outputs-to phparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to phparser.timings %{deps})))))

(rule (alias quick) (action (diff phparser.exp phparser.out)))

(rule (alias quick)
  (action (diff phparser.automaton.exp phparser.automaton)))

(rule (alias quick)
  (action (diff phparser.automaton.resolved.exp phparser.automaton.resolved)))

(rule (alias quick)
  (action (diff phparser.conflicts.exp phparser.conflicts)))

(rule (target phparser_stripped.mly) (deps phparser.mly)
  (action
    (with-stderr-to phparser_stripped.ignored
      (with-stdout-to phparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets phparser_stripped.log phparser_stripped.mli phparser_stripped.ml
    phparser_stripped.stacklang phparser_stripped.timings
    phparser_stripped.scount phparser_stripped.dcount)
  (deps phparser_stripped.mly)
  (action
    (with-outputs-to phparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to phparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      phparser_stripped.stacklang))

(rule (targets phparser_stripped.cmi phparser_stripped.mli.log)
  (deps phparser_stripped.mli)
  (action
    (with-stdout-to phparser_stripped.mli.dtimings
      (with-stderr-to phparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c phparser_stripped.mli)))))

(rule (targets phparser_stripped.cmo phparser_stripped.ml.log)
  (deps phparser_stripped.ml phparser_stripped.cmi)
  (action
    (with-stdout-to phparser_stripped.ml.dtimings
      (with-stderr-to phparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c phparser_stripped.ml)))))

(rule (alias test)
  (action (diff phparser_stripped.ml.log.exp phparser_stripped.ml.log)))

(rule (target phpparser.opp.out) (deps phpparser.mly)
  (action
    (with-outputs-to phpparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff phpparser.opp.exp phpparser.opp.out)))

(rule
  (targets phpparser.out phpparser.automaton phpparser.automaton.resolved
    phpparser.conflicts phpparser.timings)
  (deps phpparser.mly)
  (action
    (with-outputs-to phpparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to phpparser.timings %{deps})))))

(rule (alias quick) (action (diff phpparser.exp phpparser.out)))

(rule (alias quick)
  (action (diff phpparser.automaton.exp phpparser.automaton)))

(rule (alias quick)
  (action
    (diff phpparser.automaton.resolved.exp phpparser.automaton.resolved)))

(rule (alias quick)
  (action (diff phpparser.conflicts.exp phpparser.conflicts)))

(rule (target phpparser_stripped.mly) (deps phpparser.mly)
  (action
    (with-stderr-to phpparser_stripped.ignored
      (with-stdout-to phpparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets phpparser_stripped.log phpparser_stripped.mli
    phpparser_stripped.ml phpparser_stripped.stacklang
    phpparser_stripped.timings phpparser_stripped.scount
    phpparser_stripped.dcount)
  (deps phpparser_stripped.mly)
  (action
    (with-outputs-to phpparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to phpparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      phpparser_stripped.stacklang))

(rule (targets phpparser_stripped.cmi phpparser_stripped.mli.log)
  (deps phpparser_stripped.mli)
  (action
    (with-stdout-to phpparser_stripped.mli.dtimings
      (with-stderr-to phpparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c phpparser_stripped.mli)))))

(rule (targets phpparser_stripped.cmo phpparser_stripped.ml.log)
  (deps phpparser_stripped.ml phpparser_stripped.cmi)
  (action
    (with-stdout-to phpparser_stripped.ml.dtimings
      (with-stderr-to phpparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c phpparser_stripped.ml)))))

(rule (alias test)
  (action (diff phpparser_stripped.ml.log.exp phpparser_stripped.ml.log)))

(rule (target pippijn.opp.out) (deps pippijn.mly)
  (action
    (with-outputs-to pippijn.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:pippijn.flags} %{deps})))))

(rule (alias quick) (action (diff pippijn.opp.exp pippijn.opp.out)))

(rule
  (targets pippijn.out pippijn.automaton pippijn.automaton.resolved
    pippijn.conflicts pippijn.timings)
  (deps pippijn.mly)
  (action
    (with-outputs-to pippijn.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pippijn.timings %{read-lines:pippijn.flags} %{deps})))))

(rule (alias quick) (action (diff pippijn.exp pippijn.out)))

(rule (alias quick) (action (diff pippijn.automaton.exp pippijn.automaton)))

(rule (alias quick)
  (action (diff pippijn.automaton.resolved.exp pippijn.automaton.resolved)))

(rule (alias quick) (action (diff pippijn.conflicts.exp pippijn.conflicts)))

(rule (target pippijn_stripped.mly) (deps pippijn.mly)
  (action
    (with-stderr-to pippijn_stripped.ignored
      (with-stdout-to pippijn_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{read-lines:pippijn.flags}
            %{deps}))))))

(rule
  (targets pippijn_stripped.log pippijn_stripped.mli pippijn_stripped.ml
    pippijn_stripped.stacklang pippijn_stripped.timings
    pippijn_stripped.scount pippijn_stripped.dcount)
  (deps pippijn_stripped.mly)
  (action
    (with-outputs-to pippijn_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pippijn_stripped.timings %{read-lines:pippijn.flags}
          %{deps})))))

(alias (name quick) (deps
                      pippijn_stripped.stacklang))

(rule (targets pippijn_stripped.cmi pippijn_stripped.mli.log)
  (deps pippijn_stripped.mli)
  (action
    (with-stdout-to pippijn_stripped.mli.dtimings
      (with-stderr-to pippijn_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pippijn_stripped.mli)))))

(rule (targets pippijn_stripped.cmo pippijn_stripped.ml.log)
  (deps pippijn_stripped.ml pippijn_stripped.cmi)
  (action
    (with-stdout-to pippijn_stripped.ml.dtimings
      (with-stderr-to pippijn_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pippijn_stripped.ml)))))

(rule (alias test)
  (action (diff pippijn_stripped.ml.log.exp pippijn_stripped.ml.log)))

(rule (target pre_parser.opp.out) (deps pre_parser.mly)
  (action
    (with-outputs-to pre_parser.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:pre_parser.flags} %{deps})))))

(rule (alias quick) (action (diff pre_parser.opp.exp pre_parser.opp.out)))

(rule
  (targets pre_parser.out pre_parser.automaton pre_parser.automaton.resolved
    pre_parser.conflicts pre_parser.timings)
  (deps pre_parser.mly)
  (action
    (with-outputs-to pre_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pre_parser.timings %{read-lines:pre_parser.flags}
          %{deps})))))

(rule (alias quick) (action (diff pre_parser.exp pre_parser.out)))

(rule (alias quick)
  (action (diff pre_parser.automaton.exp pre_parser.automaton)))

(rule (alias quick)
  (action
    (diff pre_parser.automaton.resolved.exp pre_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff pre_parser.conflicts.exp pre_parser.conflicts)))

(rule (target pre_parser_stripped.mly) (deps pre_parser.mly)
  (action
    (with-stderr-to pre_parser_stripped.ignored
      (with-stdout-to pre_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{read-lines:pre_parser.flags}
            %{deps}))))))

(rule
  (targets pre_parser_stripped.log pre_parser_stripped.mli
    pre_parser_stripped.ml pre_parser_stripped.stacklang
    pre_parser_stripped.timings pre_parser_stripped.scount
    pre_parser_stripped.dcount)
  (deps pre_parser_stripped.mly)
  (action
    (with-outputs-to pre_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pre_parser_stripped.timings
          %{read-lines:pre_parser.flags} %{deps})))))

(alias (name quick) (deps
                      pre_parser_stripped.stacklang))

(rule (targets pre_parser_stripped.cmi pre_parser_stripped.mli.log)
  (deps pre_parser_stripped.mli)
  (action
    (with-stdout-to pre_parser_stripped.mli.dtimings
      (with-stderr-to pre_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pre_parser_stripped.mli)))))

(rule (targets pre_parser_stripped.cmo pre_parser_stripped.ml.log)
  (deps pre_parser_stripped.ml pre_parser_stripped.cmi)
  (action
    (with-stdout-to pre_parser_stripped.ml.dtimings
      (with-stderr-to pre_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pre_parser_stripped.ml)))))

(rule (alias test)
  (action (diff pre_parser_stripped.ml.log.exp pre_parser_stripped.ml.log)))

(rule (target prec_inline.opp.out) (deps prec_inline.mly)
  (action
    (with-outputs-to prec_inline.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff prec_inline.opp.exp prec_inline.opp.out)))

(rule
  (targets prec_inline.out prec_inline.automaton
    prec_inline.automaton.resolved prec_inline.conflicts prec_inline.timings)
  (deps prec_inline.mly)
  (action
    (with-outputs-to prec_inline.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to prec_inline.timings %{deps})))))

(rule (alias quick) (action (diff prec_inline.exp prec_inline.out)))

(rule (alias quick)
  (action (diff prec_inline.automaton.exp prec_inline.automaton)))

(rule (alias quick)
  (action
    (diff prec_inline.automaton.resolved.exp prec_inline.automaton.resolved)))

(rule (alias quick)
  (action (diff prec_inline.conflicts.exp prec_inline.conflicts)))

(rule (target prec_inline_stripped.mly) (deps prec_inline.mly)
  (action
    (with-stderr-to prec_inline_stripped.ignored
      (with-stdout-to prec_inline_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets prec_inline_stripped.log prec_inline_stripped.mli
    prec_inline_stripped.ml prec_inline_stripped.stacklang
    prec_inline_stripped.timings prec_inline_stripped.scount
    prec_inline_stripped.dcount)
  (deps prec_inline_stripped.mly)
  (action
    (with-outputs-to prec_inline_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to prec_inline_stripped.timings %{deps})))))

(alias (name quick) (deps
                      prec_inline_stripped.stacklang))

(rule (targets prec_inline_stripped.cmi prec_inline_stripped.mli.log)
  (deps prec_inline_stripped.mli)
  (action
    (with-stdout-to prec_inline_stripped.mli.dtimings
      (with-stderr-to prec_inline_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c prec_inline_stripped.mli)))))

(rule (targets prec_inline_stripped.cmo prec_inline_stripped.ml.log)
  (deps prec_inline_stripped.ml prec_inline_stripped.cmi)
  (action
    (with-stdout-to prec_inline_stripped.ml.dtimings
      (with-stderr-to prec_inline_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c prec_inline_stripped.ml)))))

(rule (alias test)
  (action (diff prec_inline_stripped.ml.log.exp prec_inline_stripped.ml.log)))

(rule (target private-and-public-1.opp.out)
  (deps private-and-public-1.mly private-and-public-2.mly
    private-and-public-3.mly)
  (action
    (with-outputs-to private-and-public-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base private-and-public-1 --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff private-and-public-1.opp.exp private-and-public-1.opp.out)))

(rule
  (targets private-and-public-1.out private-and-public-1.automaton
    private-and-public-1.automaton.resolved private-and-public-1.conflicts
    private-and-public-1.timings)
  (deps private-and-public-1.mly private-and-public-2.mly
    private-and-public-3.mly)
  (action
    (with-outputs-to private-and-public-1.out
      (with-accepted-exit-codes 0
        (run menhir --base private-and-public-1 --table --dump
          --dump-resolved --explain -lg 2 -la 2 -lc 2 --timings-to
          private-and-public-1.timings %{deps})))))

(rule (alias quick)
  (action (diff private-and-public-1.exp private-and-public-1.out)))

(rule (alias quick)
  (action
    (diff private-and-public-1.automaton.exp private-and-public-1.automaton)))

(rule (alias quick)
  (action
    (diff private-and-public-1.automaton.resolved.exp
      private-and-public-1.automaton.resolved)))

(rule (alias quick)
  (action
    (diff private-and-public-1.conflicts.exp private-and-public-1.conflicts)))

(rule (target private-and-public-1_stripped.mly)
  (deps private-and-public-1.mly private-and-public-2.mly
    private-and-public-3.mly)
  (action
    (with-stderr-to private-and-public-1_stripped.ignored
      (with-stdout-to private-and-public-1_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base private-and-public-1 --only-preprocess-uu
            %{deps}))))))

(rule
  (targets private-and-public-1_stripped.log
    private-and-public-1_stripped.mli private-and-public-1_stripped.ml
    private-and-public-1_stripped.stacklang
    private-and-public-1_stripped.timings
    private-and-public-1_stripped.scount
    private-and-public-1_stripped.dcount)
  (deps private-and-public-1_stripped.mly)
  (action
    (with-outputs-to private-and-public-1_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to private-and-public-1_stripped.timings %{deps})))))

(alias (name quick) (deps
                      private-and-public-1_stripped.stacklang))

(rule
  (targets private-and-public-1_stripped.cmi
    private-and-public-1_stripped.mli.log)
  (deps private-and-public-1_stripped.mli)
  (action
    (with-stdout-to private-and-public-1_stripped.mli.dtimings
      (with-stderr-to private-and-public-1_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          private-and-public-1_stripped.mli)))))

(rule
  (targets private-and-public-1_stripped.cmo
    private-and-public-1_stripped.ml.log)
  (deps private-and-public-1_stripped.ml private-and-public-1_stripped.cmi)
  (action
    (with-stdout-to private-and-public-1_stripped.ml.dtimings
      (with-stderr-to private-and-public-1_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          private-and-public-1_stripped.ml)))))

(rule (alias test)
  (action
    (diff private-and-public-1_stripped.ml.log.exp
      private-and-public-1_stripped.ml.log)))

(rule (target promelaparser.opp.out) (deps promelaparser.mly)
  (action
    (with-outputs-to promelaparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff promelaparser.opp.exp promelaparser.opp.out)))

(rule
  (targets promelaparser.out promelaparser.automaton
    promelaparser.automaton.resolved promelaparser.conflicts
    promelaparser.timings)
  (deps promelaparser.mly)
  (action
    (with-outputs-to promelaparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to promelaparser.timings %{deps})))))

(rule (alias quick) (action (diff promelaparser.exp promelaparser.out)))

(rule (alias quick)
  (action (diff promelaparser.automaton.exp promelaparser.automaton)))

(rule (alias quick)
  (action
    (diff promelaparser.automaton.resolved.exp
      promelaparser.automaton.resolved)))

(rule (alias quick)
  (action (diff promelaparser.conflicts.exp promelaparser.conflicts)))

(rule (target promelaparser_stripped.mly) (deps promelaparser.mly)
  (action
    (with-stderr-to promelaparser_stripped.ignored
      (with-stdout-to promelaparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets promelaparser_stripped.log promelaparser_stripped.mli
    promelaparser_stripped.ml promelaparser_stripped.stacklang
    promelaparser_stripped.timings promelaparser_stripped.scount
    promelaparser_stripped.dcount)
  (deps promelaparser_stripped.mly)
  (action
    (with-outputs-to promelaparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to promelaparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      promelaparser_stripped.stacklang))

(rule (targets promelaparser_stripped.cmi promelaparser_stripped.mli.log)
  (deps promelaparser_stripped.mli)
  (action
    (with-stdout-to promelaparser_stripped.mli.dtimings
      (with-stderr-to promelaparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c promelaparser_stripped.mli)))))

(rule (targets promelaparser_stripped.cmo promelaparser_stripped.ml.log)
  (deps promelaparser_stripped.ml promelaparser_stripped.cmi)
  (action
    (with-stdout-to promelaparser_stripped.ml.dtimings
      (with-stderr-to promelaparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c promelaparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff promelaparser_stripped.ml.log.exp promelaparser_stripped.ml.log)))

(rule (target promelaparser_withexps.opp.out)
  (deps promelaparser_withexps.mly)
  (action
    (with-outputs-to promelaparser_withexps.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff promelaparser_withexps.opp.exp promelaparser_withexps.opp.out)))

(rule
  (targets promelaparser_withexps.out promelaparser_withexps.automaton
    promelaparser_withexps.automaton.resolved
    promelaparser_withexps.conflicts promelaparser_withexps.timings)
  (deps promelaparser_withexps.mly)
  (action
    (with-outputs-to promelaparser_withexps.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to promelaparser_withexps.timings %{deps})))))

(rule (alias quick)
  (action (diff promelaparser_withexps.exp promelaparser_withexps.out)))

(rule (alias quick)
  (action
    (diff promelaparser_withexps.automaton.exp
      promelaparser_withexps.automaton)))

(rule (alias quick)
  (action
    (diff promelaparser_withexps.automaton.resolved.exp
      promelaparser_withexps.automaton.resolved)))

(rule (alias quick)
  (action
    (diff promelaparser_withexps.conflicts.exp
      promelaparser_withexps.conflicts)))

(rule (target promelaparser_withexps_stripped.mly)
  (deps promelaparser_withexps.mly)
  (action
    (with-stderr-to promelaparser_withexps_stripped.ignored
      (with-stdout-to promelaparser_withexps_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets promelaparser_withexps_stripped.log
    promelaparser_withexps_stripped.mli promelaparser_withexps_stripped.ml
    promelaparser_withexps_stripped.stacklang
    promelaparser_withexps_stripped.timings
    promelaparser_withexps_stripped.scount
    promelaparser_withexps_stripped.dcount)
  (deps promelaparser_withexps_stripped.mly)
  (action
    (with-outputs-to promelaparser_withexps_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to promelaparser_withexps_stripped.timings %{deps})))))

(alias (name quick) (deps
                      promelaparser_withexps_stripped.stacklang))

(rule
  (targets promelaparser_withexps_stripped.cmi
    promelaparser_withexps_stripped.mli.log)
  (deps promelaparser_withexps_stripped.mli)
  (action
    (with-stdout-to promelaparser_withexps_stripped.mli.dtimings
      (with-stderr-to promelaparser_withexps_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          promelaparser_withexps_stripped.mli)))))

(rule
  (targets promelaparser_withexps_stripped.cmo
    promelaparser_withexps_stripped.ml.log)
  (deps promelaparser_withexps_stripped.ml
    promelaparser_withexps_stripped.cmi)
  (action
    (with-stdout-to promelaparser_withexps_stripped.ml.dtimings
      (with-stderr-to promelaparser_withexps_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          promelaparser_withexps_stripped.ml)))))

(rule (alias test)
  (action
    (diff promelaparser_withexps_stripped.ml.log.exp
      promelaparser_withexps_stripped.ml.log)))

(rule (target prooflang.opp.out) (deps prooflang.mly)
  (action
    (with-outputs-to prooflang.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff prooflang.opp.exp prooflang.opp.out)))

(rule
  (targets prooflang.out prooflang.automaton prooflang.automaton.resolved
    prooflang.conflicts prooflang.timings)
  (deps prooflang.mly)
  (action
    (with-outputs-to prooflang.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to prooflang.timings %{deps})))))

(rule (alias quick) (action (diff prooflang.exp prooflang.out)))

(rule (alias quick)
  (action (diff prooflang.automaton.exp prooflang.automaton)))

(rule (alias quick)
  (action
    (diff prooflang.automaton.resolved.exp prooflang.automaton.resolved)))

(rule (alias quick)
  (action (diff prooflang.conflicts.exp prooflang.conflicts)))

(rule (target prooflang_stripped.mly) (deps prooflang.mly)
  (action
    (with-stderr-to prooflang_stripped.ignored
      (with-stdout-to prooflang_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets prooflang_stripped.log prooflang_stripped.mli
    prooflang_stripped.ml prooflang_stripped.stacklang
    prooflang_stripped.timings prooflang_stripped.scount
    prooflang_stripped.dcount)
  (deps prooflang_stripped.mly)
  (action
    (with-outputs-to prooflang_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to prooflang_stripped.timings %{deps})))))

(alias (name quick) (deps
                      prooflang_stripped.stacklang))

(rule (targets prooflang_stripped.cmi prooflang_stripped.mli.log)
  (deps prooflang_stripped.mli)
  (action
    (with-stdout-to prooflang_stripped.mli.dtimings
      (with-stderr-to prooflang_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c prooflang_stripped.mli)))))

(rule (targets prooflang_stripped.cmo prooflang_stripped.ml.log)
  (deps prooflang_stripped.ml prooflang_stripped.cmi)
  (action
    (with-stdout-to prooflang_stripped.ml.dtimings
      (with-stderr-to prooflang_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c prooflang_stripped.ml)))))

(rule (alias test)
  (action (diff prooflang_stripped.ml.log.exp prooflang_stripped.ml.log)))

(rule (target proverif.2.00-parser.opp.out) (deps proverif.2.00-parser.mly)
  (action
    (with-outputs-to proverif.2.00-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff proverif.2.00-parser.opp.exp proverif.2.00-parser.opp.out)))

(rule
  (targets proverif.2.00-parser.out proverif.2.00-parser.automaton
    proverif.2.00-parser.automaton.resolved proverif.2.00-parser.conflicts
    proverif.2.00-parser.timings)
  (deps proverif.2.00-parser.mly)
  (action
    (with-outputs-to proverif.2.00-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to proverif.2.00-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff proverif.2.00-parser.exp proverif.2.00-parser.out)))

(rule (alias quick)
  (action
    (diff proverif.2.00-parser.automaton.exp proverif.2.00-parser.automaton)))

(rule (alias quick)
  (action
    (diff proverif.2.00-parser.automaton.resolved.exp
      proverif.2.00-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff proverif.2.00-parser.conflicts.exp proverif.2.00-parser.conflicts)))

(rule (target proverif_2_00-parser_stripped.mly)
  (deps proverif.2.00-parser.mly)
  (action
    (with-stderr-to proverif_2_00-parser_stripped.ignored
      (with-stdout-to proverif_2_00-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets proverif_2_00-parser_stripped.log
    proverif_2_00-parser_stripped.mli proverif_2_00-parser_stripped.ml
    proverif_2_00-parser_stripped.stacklang
    proverif_2_00-parser_stripped.timings
    proverif_2_00-parser_stripped.scount
    proverif_2_00-parser_stripped.dcount)
  (deps proverif_2_00-parser_stripped.mly)
  (action
    (with-outputs-to proverif_2_00-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to proverif_2_00-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      proverif_2_00-parser_stripped.stacklang))

(rule
  (targets proverif_2_00-parser_stripped.cmi
    proverif_2_00-parser_stripped.mli.log)
  (deps proverif_2_00-parser_stripped.mli)
  (action
    (with-stdout-to proverif_2_00-parser_stripped.mli.dtimings
      (with-stderr-to proverif_2_00-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          proverif_2_00-parser_stripped.mli)))))

(rule
  (targets proverif_2_00-parser_stripped.cmo
    proverif_2_00-parser_stripped.ml.log)
  (deps proverif_2_00-parser_stripped.ml proverif_2_00-parser_stripped.cmi)
  (action
    (with-stdout-to proverif_2_00-parser_stripped.ml.dtimings
      (with-stderr-to proverif_2_00-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          proverif_2_00-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff proverif_2_00-parser_stripped.ml.log.exp
      proverif_2_00-parser_stripped.ml.log)))

(rule (target proverif.2.00-pitparser.opp.out)
  (deps proverif.2.00-pitparser.mly)
  (action
    (with-outputs-to proverif.2.00-pitparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff proverif.2.00-pitparser.opp.exp proverif.2.00-pitparser.opp.out)))

(rule
  (targets proverif.2.00-pitparser.out proverif.2.00-pitparser.automaton
    proverif.2.00-pitparser.automaton.resolved
    proverif.2.00-pitparser.conflicts proverif.2.00-pitparser.timings)
  (deps proverif.2.00-pitparser.mly)
  (action
    (with-outputs-to proverif.2.00-pitparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to proverif.2.00-pitparser.timings %{deps})))))

(rule (alias quick)
  (action (diff proverif.2.00-pitparser.exp proverif.2.00-pitparser.out)))

(rule (alias quick)
  (action
    (diff proverif.2.00-pitparser.automaton.exp
      proverif.2.00-pitparser.automaton)))

(rule (alias quick)
  (action
    (diff proverif.2.00-pitparser.automaton.resolved.exp
      proverif.2.00-pitparser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff proverif.2.00-pitparser.conflicts.exp
      proverif.2.00-pitparser.conflicts)))

(rule (target proverif_2_00-pitparser_stripped.mly)
  (deps proverif.2.00-pitparser.mly)
  (action
    (with-stderr-to proverif_2_00-pitparser_stripped.ignored
      (with-stdout-to proverif_2_00-pitparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets proverif_2_00-pitparser_stripped.log
    proverif_2_00-pitparser_stripped.mli proverif_2_00-pitparser_stripped.ml
    proverif_2_00-pitparser_stripped.stacklang
    proverif_2_00-pitparser_stripped.timings
    proverif_2_00-pitparser_stripped.scount
    proverif_2_00-pitparser_stripped.dcount)
  (deps proverif_2_00-pitparser_stripped.mly)
  (action
    (with-outputs-to proverif_2_00-pitparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to proverif_2_00-pitparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      proverif_2_00-pitparser_stripped.stacklang))

(rule
  (targets proverif_2_00-pitparser_stripped.cmi
    proverif_2_00-pitparser_stripped.mli.log)
  (deps proverif_2_00-pitparser_stripped.mli)
  (action
    (with-stdout-to proverif_2_00-pitparser_stripped.mli.dtimings
      (with-stderr-to proverif_2_00-pitparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          proverif_2_00-pitparser_stripped.mli)))))

(rule
  (targets proverif_2_00-pitparser_stripped.cmo
    proverif_2_00-pitparser_stripped.ml.log)
  (deps proverif_2_00-pitparser_stripped.ml
    proverif_2_00-pitparser_stripped.cmi)
  (action
    (with-stdout-to proverif_2_00-pitparser_stripped.ml.dtimings
      (with-stderr-to proverif_2_00-pitparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          proverif_2_00-pitparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff proverif_2_00-pitparser_stripped.ml.log.exp
      proverif_2_00-pitparser_stripped.ml.log)))

(rule (target psmt2-frontend.0.1-smtlib_parser.opp.out)
  (deps psmt2-frontend.0.1-smtlib_parser.mly)
  (action
    (with-outputs-to psmt2-frontend.0.1-smtlib_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.opp.exp
      psmt2-frontend.0.1-smtlib_parser.opp.out)))

(rule
  (targets psmt2-frontend.0.1-smtlib_parser.out
    psmt2-frontend.0.1-smtlib_parser.automaton
    psmt2-frontend.0.1-smtlib_parser.automaton.resolved
    psmt2-frontend.0.1-smtlib_parser.conflicts
    psmt2-frontend.0.1-smtlib_parser.timings)
  (deps psmt2-frontend.0.1-smtlib_parser.mly)
  (action
    (with-outputs-to psmt2-frontend.0.1-smtlib_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to psmt2-frontend.0.1-smtlib_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.exp
      psmt2-frontend.0.1-smtlib_parser.out)))

(rule (alias quick)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.automaton.exp
      psmt2-frontend.0.1-smtlib_parser.automaton)))

(rule (alias quick)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.automaton.resolved.exp
      psmt2-frontend.0.1-smtlib_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.conflicts.exp
      psmt2-frontend.0.1-smtlib_parser.conflicts)))

(rule (target psmt2-frontend_0_1-smtlib_parser_stripped.mly)
  (deps psmt2-frontend.0.1-smtlib_parser.mly)
  (action
    (with-stderr-to psmt2-frontend_0_1-smtlib_parser_stripped.ignored
      (with-stdout-to psmt2-frontend_0_1-smtlib_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets psmt2-frontend_0_1-smtlib_parser_stripped.log
    psmt2-frontend_0_1-smtlib_parser_stripped.mli
    psmt2-frontend_0_1-smtlib_parser_stripped.ml
    psmt2-frontend_0_1-smtlib_parser_stripped.stacklang
    psmt2-frontend_0_1-smtlib_parser_stripped.timings
    psmt2-frontend_0_1-smtlib_parser_stripped.scount
    psmt2-frontend_0_1-smtlib_parser_stripped.dcount)
  (deps psmt2-frontend_0_1-smtlib_parser_stripped.mly)
  (action
    (with-outputs-to psmt2-frontend_0_1-smtlib_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to psmt2-frontend_0_1-smtlib_parser_stripped.timings
          %{deps})))))

(alias (name quick)
  (deps
    psmt2-frontend_0_1-smtlib_parser_stripped.stacklang))

(rule
  (targets psmt2-frontend_0_1-smtlib_parser_stripped.cmi
    psmt2-frontend_0_1-smtlib_parser_stripped.mli.log)
  (deps psmt2-frontend_0_1-smtlib_parser_stripped.mli)
  (action
    (with-stdout-to psmt2-frontend_0_1-smtlib_parser_stripped.mli.dtimings
      (with-stderr-to psmt2-frontend_0_1-smtlib_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          psmt2-frontend_0_1-smtlib_parser_stripped.mli)))))

(rule
  (targets psmt2-frontend_0_1-smtlib_parser_stripped.cmo
    psmt2-frontend_0_1-smtlib_parser_stripped.ml.log)
  (deps psmt2-frontend_0_1-smtlib_parser_stripped.ml
    psmt2-frontend_0_1-smtlib_parser_stripped.cmi)
  (action
    (with-stdout-to psmt2-frontend_0_1-smtlib_parser_stripped.ml.dtimings
      (with-stderr-to psmt2-frontend_0_1-smtlib_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          psmt2-frontend_0_1-smtlib_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff psmt2-frontend_0_1-smtlib_parser_stripped.ml.log.exp
      psmt2-frontend_0_1-smtlib_parser_stripped.ml.log)))

(rule (target public-1.opp.out) (deps public-1.mly public-2.mly)
  (action
    (with-outputs-to public-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base public-1 --only-preprocess %{deps})))))

(rule (alias quick) (action (diff public-1.opp.exp public-1.opp.out)))

(rule
  (targets public-1.out public-1.automaton public-1.automaton.resolved
    public-1.conflicts public-1.timings)
  (deps public-1.mly public-2.mly)
  (action
    (with-outputs-to public-1.out
      (with-accepted-exit-codes 0
        (run menhir --base public-1 --table --dump --dump-resolved --explain
          -lg 2 -la 2 -lc 2 --timings-to public-1.timings %{deps})))))

(rule (alias quick) (action (diff public-1.exp public-1.out)))

(rule (alias quick)
  (action (diff public-1.automaton.exp public-1.automaton)))

(rule (alias quick)
  (action (diff public-1.automaton.resolved.exp public-1.automaton.resolved)))

(rule (alias quick)
  (action (diff public-1.conflicts.exp public-1.conflicts)))

(rule (target public-1_stripped.mly) (deps public-1.mly public-2.mly)
  (action
    (with-stderr-to public-1_stripped.ignored
      (with-stdout-to public-1_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base public-1 --only-preprocess-uu %{deps}))))))

(rule
  (targets public-1_stripped.log public-1_stripped.mli public-1_stripped.ml
    public-1_stripped.stacklang public-1_stripped.timings
    public-1_stripped.scount public-1_stripped.dcount)
  (deps public-1_stripped.mly)
  (action
    (with-outputs-to public-1_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to public-1_stripped.timings %{deps})))))

(alias (name quick) (deps
                      public-1_stripped.stacklang))

(rule (targets public-1_stripped.cmi public-1_stripped.mli.log)
  (deps public-1_stripped.mli)
  (action
    (with-stdout-to public-1_stripped.mli.dtimings
      (with-stderr-to public-1_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c public-1_stripped.mli)))))

(rule (targets public-1_stripped.cmo public-1_stripped.ml.log)
  (deps public-1_stripped.ml public-1_stripped.cmi)
  (action
    (with-stdout-to public-1_stripped.ml.dtimings
      (with-stderr-to public-1_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c public-1_stripped.ml)))))

(rule (alias test)
  (action (diff public-1_stripped.ml.log.exp public-1_stripped.ml.log)))

(rule (target public-inline-1.opp.out)
  (deps public-inline-1.mly public-inline-2.mly)
  (action
    (with-outputs-to public-inline-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base public-inline-1 --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff public-inline-1.opp.exp public-inline-1.opp.out)))

(rule
  (targets public-inline-1.out public-inline-1.automaton
    public-inline-1.automaton.resolved public-inline-1.conflicts
    public-inline-1.timings)
  (deps public-inline-1.mly public-inline-2.mly)
  (action
    (with-outputs-to public-inline-1.out
      (with-accepted-exit-codes 0
        (run menhir --base public-inline-1 --table --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to public-inline-1.timings
          %{deps})))))

(rule (alias quick) (action (diff public-inline-1.exp public-inline-1.out)))

(rule (alias quick)
  (action (diff public-inline-1.automaton.exp public-inline-1.automaton)))

(rule (alias quick)
  (action
    (diff public-inline-1.automaton.resolved.exp
      public-inline-1.automaton.resolved)))

(rule (alias quick)
  (action (diff public-inline-1.conflicts.exp public-inline-1.conflicts)))

(rule (target public-inline-1_stripped.mly)
  (deps public-inline-1.mly public-inline-2.mly)
  (action
    (with-stderr-to public-inline-1_stripped.ignored
      (with-stdout-to public-inline-1_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base public-inline-1 --only-preprocess-uu %{deps}))))))

(rule
  (targets public-inline-1_stripped.log public-inline-1_stripped.mli
    public-inline-1_stripped.ml public-inline-1_stripped.stacklang
    public-inline-1_stripped.timings public-inline-1_stripped.scount
    public-inline-1_stripped.dcount)
  (deps public-inline-1_stripped.mly)
  (action
    (with-outputs-to public-inline-1_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to public-inline-1_stripped.timings %{deps})))))

(alias (name quick) (deps
                      public-inline-1_stripped.stacklang))

(rule (targets public-inline-1_stripped.cmi public-inline-1_stripped.mli.log)
  (deps public-inline-1_stripped.mli)
  (action
    (with-stdout-to public-inline-1_stripped.mli.dtimings
      (with-stderr-to public-inline-1_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c public-inline-1_stripped.mli)))))

(rule (targets public-inline-1_stripped.cmo public-inline-1_stripped.ml.log)
  (deps public-inline-1_stripped.ml public-inline-1_stripped.cmi)
  (action
    (with-stdout-to public-inline-1_stripped.ml.dtimings
      (with-stderr-to public-inline-1_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c public-inline-1_stripped.ml)))))

(rule (alias test)
  (action
    (diff public-inline-1_stripped.ml.log.exp
      public-inline-1_stripped.ml.log)))

(rule (target pxp-m2parsergen.opp.out) (deps pxp-m2parsergen.mly)
  (action
    (with-outputs-to pxp-m2parsergen.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff pxp-m2parsergen.opp.exp pxp-m2parsergen.opp.out)))

(rule
  (targets pxp-m2parsergen.out pxp-m2parsergen.automaton
    pxp-m2parsergen.automaton.resolved pxp-m2parsergen.conflicts
    pxp-m2parsergen.timings)
  (deps pxp-m2parsergen.mly)
  (action
    (with-outputs-to pxp-m2parsergen.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pxp-m2parsergen.timings %{deps})))))

(rule (alias quick) (action (diff pxp-m2parsergen.exp pxp-m2parsergen.out)))

(rule (alias quick)
  (action (diff pxp-m2parsergen.automaton.exp pxp-m2parsergen.automaton)))

(rule (alias quick)
  (action
    (diff pxp-m2parsergen.automaton.resolved.exp
      pxp-m2parsergen.automaton.resolved)))

(rule (alias quick)
  (action (diff pxp-m2parsergen.conflicts.exp pxp-m2parsergen.conflicts)))

(rule (target pxp-m2parsergen_stripped.mly) (deps pxp-m2parsergen.mly)
  (action
    (with-stderr-to pxp-m2parsergen_stripped.ignored
      (with-stdout-to pxp-m2parsergen_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pxp-m2parsergen_stripped.log pxp-m2parsergen_stripped.mli
    pxp-m2parsergen_stripped.ml pxp-m2parsergen_stripped.stacklang
    pxp-m2parsergen_stripped.timings pxp-m2parsergen_stripped.scount
    pxp-m2parsergen_stripped.dcount)
  (deps pxp-m2parsergen_stripped.mly)
  (action
    (with-outputs-to pxp-m2parsergen_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pxp-m2parsergen_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pxp-m2parsergen_stripped.stacklang))

(rule (targets pxp-m2parsergen_stripped.cmi pxp-m2parsergen_stripped.mli.log)
  (deps pxp-m2parsergen_stripped.mli)
  (action
    (with-stdout-to pxp-m2parsergen_stripped.mli.dtimings
      (with-stderr-to pxp-m2parsergen_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pxp-m2parsergen_stripped.mli)))))

(rule (targets pxp-m2parsergen_stripped.cmo pxp-m2parsergen_stripped.ml.log)
  (deps pxp-m2parsergen_stripped.ml pxp-m2parsergen_stripped.cmi)
  (action
    (with-stdout-to pxp-m2parsergen_stripped.ml.dtimings
      (with-stderr-to pxp-m2parsergen_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pxp-m2parsergen_stripped.ml)))))

(rule (alias test)
  (action
    (diff pxp-m2parsergen_stripped.ml.log.exp
      pxp-m2parsergen_stripped.ml.log)))

(rule (target pxp-ucs2_to_utf8.opp.out) (deps pxp-ucs2_to_utf8.mly)
  (action
    (with-outputs-to pxp-ucs2_to_utf8.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff pxp-ucs2_to_utf8.opp.exp pxp-ucs2_to_utf8.opp.out)))

(rule
  (targets pxp-ucs2_to_utf8.out pxp-ucs2_to_utf8.automaton
    pxp-ucs2_to_utf8.automaton.resolved pxp-ucs2_to_utf8.conflicts
    pxp-ucs2_to_utf8.timings)
  (deps pxp-ucs2_to_utf8.mly)
  (action
    (with-outputs-to pxp-ucs2_to_utf8.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pxp-ucs2_to_utf8.timings %{deps})))))

(rule (alias quick)
  (action (diff pxp-ucs2_to_utf8.exp pxp-ucs2_to_utf8.out)))

(rule (alias quick)
  (action (diff pxp-ucs2_to_utf8.automaton.exp pxp-ucs2_to_utf8.automaton)))

(rule (alias quick)
  (action
    (diff pxp-ucs2_to_utf8.automaton.resolved.exp
      pxp-ucs2_to_utf8.automaton.resolved)))

(rule (alias quick)
  (action (diff pxp-ucs2_to_utf8.conflicts.exp pxp-ucs2_to_utf8.conflicts)))

(rule (target pxp-ucs2_to_utf8_stripped.mly) (deps pxp-ucs2_to_utf8.mly)
  (action
    (with-stderr-to pxp-ucs2_to_utf8_stripped.ignored
      (with-stdout-to pxp-ucs2_to_utf8_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pxp-ucs2_to_utf8_stripped.log pxp-ucs2_to_utf8_stripped.mli
    pxp-ucs2_to_utf8_stripped.ml pxp-ucs2_to_utf8_stripped.stacklang
    pxp-ucs2_to_utf8_stripped.timings pxp-ucs2_to_utf8_stripped.scount
    pxp-ucs2_to_utf8_stripped.dcount)
  (deps pxp-ucs2_to_utf8_stripped.mly)
  (action
    (with-outputs-to pxp-ucs2_to_utf8_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pxp-ucs2_to_utf8_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pxp-ucs2_to_utf8_stripped.stacklang))

(rule
  (targets pxp-ucs2_to_utf8_stripped.cmi pxp-ucs2_to_utf8_stripped.mli.log)
  (deps pxp-ucs2_to_utf8_stripped.mli)
  (action
    (with-stdout-to pxp-ucs2_to_utf8_stripped.mli.dtimings
      (with-stderr-to pxp-ucs2_to_utf8_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pxp-ucs2_to_utf8_stripped.mli)))))

(rule
  (targets pxp-ucs2_to_utf8_stripped.cmo pxp-ucs2_to_utf8_stripped.ml.log)
  (deps pxp-ucs2_to_utf8_stripped.ml pxp-ucs2_to_utf8_stripped.cmi)
  (action
    (with-stdout-to pxp-ucs2_to_utf8_stripped.ml.dtimings
      (with-stderr-to pxp-ucs2_to_utf8_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pxp-ucs2_to_utf8_stripped.ml)))))

(rule (alias test)
  (action
    (diff pxp-ucs2_to_utf8_stripped.ml.log.exp
      pxp-ucs2_to_utf8_stripped.ml.log)))

(rule (target pyre-check.opp.out) (deps pyre-check.mly)
  (action
    (with-outputs-to pyre-check.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff pyre-check.opp.exp pyre-check.opp.out)))

(rule
  (targets pyre-check.out pyre-check.automaton pyre-check.automaton.resolved
    pyre-check.conflicts pyre-check.timings)
  (deps pyre-check.mly)
  (action
    (with-outputs-to pyre-check.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to pyre-check.timings %{deps})))))

(rule (alias quick) (action (diff pyre-check.exp pyre-check.out)))

(rule (alias quick)
  (action (diff pyre-check.automaton.exp pyre-check.automaton)))

(rule (alias quick)
  (action
    (diff pyre-check.automaton.resolved.exp pyre-check.automaton.resolved)))

(rule (alias quick)
  (action (diff pyre-check.conflicts.exp pyre-check.conflicts)))

(rule (target pyre-check_stripped.mly) (deps pyre-check.mly)
  (action
    (with-stderr-to pyre-check_stripped.ignored
      (with-stdout-to pyre-check_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets pyre-check_stripped.log pyre-check_stripped.mli
    pyre-check_stripped.ml pyre-check_stripped.stacklang
    pyre-check_stripped.timings pyre-check_stripped.scount
    pyre-check_stripped.dcount)
  (deps pyre-check_stripped.mly)
  (action
    (with-outputs-to pyre-check_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to pyre-check_stripped.timings %{deps})))))

(alias (name quick) (deps
                      pyre-check_stripped.stacklang))

(rule (targets pyre-check_stripped.cmi pyre-check_stripped.mli.log)
  (deps pyre-check_stripped.mli)
  (action
    (with-stdout-to pyre-check_stripped.mli.dtimings
      (with-stderr-to pyre-check_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c pyre-check_stripped.mli)))))

(rule (targets pyre-check_stripped.cmo pyre-check_stripped.ml.log)
  (deps pyre-check_stripped.ml pyre-check_stripped.cmi)
  (action
    (with-stdout-to pyre-check_stripped.ml.dtimings
      (with-stderr-to pyre-check_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c pyre-check_stripped.ml)))))

(rule (alias test)
  (action (diff pyre-check_stripped.ml.log.exp pyre-check_stripped.ml.log)))

(rule (target rdf_sparql_parser.opp.out) (deps rdf_sparql_parser.mly)
  (action
    (with-outputs-to rdf_sparql_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff rdf_sparql_parser.opp.exp rdf_sparql_parser.opp.out)))

(rule
  (targets rdf_sparql_parser.out rdf_sparql_parser.automaton
    rdf_sparql_parser.automaton.resolved rdf_sparql_parser.conflicts
    rdf_sparql_parser.timings)
  (deps rdf_sparql_parser.mly)
  (action
    (with-outputs-to rdf_sparql_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to rdf_sparql_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff rdf_sparql_parser.exp rdf_sparql_parser.out)))

(rule (alias quick)
  (action (diff rdf_sparql_parser.automaton.exp rdf_sparql_parser.automaton)))

(rule (alias quick)
  (action
    (diff rdf_sparql_parser.automaton.resolved.exp
      rdf_sparql_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff rdf_sparql_parser.conflicts.exp rdf_sparql_parser.conflicts)))

(rule (target rdf_sparql_parser_stripped.mly) (deps rdf_sparql_parser.mly)
  (action
    (with-stderr-to rdf_sparql_parser_stripped.ignored
      (with-stdout-to rdf_sparql_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets rdf_sparql_parser_stripped.log rdf_sparql_parser_stripped.mli
    rdf_sparql_parser_stripped.ml rdf_sparql_parser_stripped.stacklang
    rdf_sparql_parser_stripped.timings rdf_sparql_parser_stripped.scount
    rdf_sparql_parser_stripped.dcount)
  (deps rdf_sparql_parser_stripped.mly)
  (action
    (with-outputs-to rdf_sparql_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to rdf_sparql_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      rdf_sparql_parser_stripped.stacklang))

(rule
  (targets rdf_sparql_parser_stripped.cmi rdf_sparql_parser_stripped.mli.log)
  (deps rdf_sparql_parser_stripped.mli)
  (action
    (with-stdout-to rdf_sparql_parser_stripped.mli.dtimings
      (with-stderr-to rdf_sparql_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c rdf_sparql_parser_stripped.mli)))))

(rule
  (targets rdf_sparql_parser_stripped.cmo rdf_sparql_parser_stripped.ml.log)
  (deps rdf_sparql_parser_stripped.ml rdf_sparql_parser_stripped.cmi)
  (action
    (with-stdout-to rdf_sparql_parser_stripped.ml.dtimings
      (with-stderr-to rdf_sparql_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c rdf_sparql_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff rdf_sparql_parser_stripped.ml.log.exp
      rdf_sparql_parser_stripped.ml.log)))

(rule (target reason.3.3.7-reason_parser.opp.out)
  (deps reason.3.3.7-reason_parser.mly)
  (action
    (with-outputs-to reason.3.3.7-reason_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff reason.3.3.7-reason_parser.opp.exp
      reason.3.3.7-reason_parser.opp.out)))

(rule
  (targets reason.3.3.7-reason_parser.out
    reason.3.3.7-reason_parser.automaton
    reason.3.3.7-reason_parser.automaton.resolved
    reason.3.3.7-reason_parser.conflicts reason.3.3.7-reason_parser.timings)
  (deps reason.3.3.7-reason_parser.mly)
  (action
    (with-outputs-to reason.3.3.7-reason_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to reason.3.3.7-reason_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff reason.3.3.7-reason_parser.exp reason.3.3.7-reason_parser.out)))

(rule (alias quick)
  (action
    (diff reason.3.3.7-reason_parser.automaton.exp
      reason.3.3.7-reason_parser.automaton)))

(rule (alias quick)
  (action
    (diff reason.3.3.7-reason_parser.automaton.resolved.exp
      reason.3.3.7-reason_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff reason.3.3.7-reason_parser.conflicts.exp
      reason.3.3.7-reason_parser.conflicts)))

(rule (target reason_3_3_7-reason_parser_stripped.mly)
  (deps reason.3.3.7-reason_parser.mly)
  (action
    (with-stderr-to reason_3_3_7-reason_parser_stripped.ignored
      (with-stdout-to reason_3_3_7-reason_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets reason_3_3_7-reason_parser_stripped.log
    reason_3_3_7-reason_parser_stripped.mli
    reason_3_3_7-reason_parser_stripped.ml
    reason_3_3_7-reason_parser_stripped.stacklang
    reason_3_3_7-reason_parser_stripped.timings
    reason_3_3_7-reason_parser_stripped.scount
    reason_3_3_7-reason_parser_stripped.dcount)
  (deps reason_3_3_7-reason_parser_stripped.mly)
  (action
    (with-outputs-to reason_3_3_7-reason_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to reason_3_3_7-reason_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      reason_3_3_7-reason_parser_stripped.stacklang))

(rule
  (targets reason_3_3_7-reason_parser_stripped.cmi
    reason_3_3_7-reason_parser_stripped.mli.log)
  (deps reason_3_3_7-reason_parser_stripped.mli)
  (action
    (with-stdout-to reason_3_3_7-reason_parser_stripped.mli.dtimings
      (with-stderr-to reason_3_3_7-reason_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          reason_3_3_7-reason_parser_stripped.mli)))))

(rule
  (targets reason_3_3_7-reason_parser_stripped.cmo
    reason_3_3_7-reason_parser_stripped.ml.log)
  (deps reason_3_3_7-reason_parser_stripped.ml
    reason_3_3_7-reason_parser_stripped.cmi)
  (action
    (with-stdout-to reason_3_3_7-reason_parser_stripped.ml.dtimings
      (with-stderr-to reason_3_3_7-reason_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          reason_3_3_7-reason_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff reason_3_3_7-reason_parser_stripped.ml.log.exp
      reason_3_3_7-reason_parser_stripped.ml.log)))

(rule (target reason_parser.opp.out) (deps reason_parser.mly)
  (action
    (with-outputs-to reason_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff reason_parser.opp.exp reason_parser.opp.out)))

(rule
  (targets reason_parser.out reason_parser.automaton
    reason_parser.automaton.resolved reason_parser.conflicts
    reason_parser.timings)
  (deps reason_parser.mly)
  (action
    (with-outputs-to reason_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to reason_parser.timings %{deps})))))

(rule (alias quick) (action (diff reason_parser.exp reason_parser.out)))

(rule (alias quick)
  (action (diff reason_parser.automaton.exp reason_parser.automaton)))

(rule (alias quick)
  (action
    (diff reason_parser.automaton.resolved.exp
      reason_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff reason_parser.conflicts.exp reason_parser.conflicts)))

(rule (target reason_parser_stripped.mly) (deps reason_parser.mly)
  (action
    (with-stderr-to reason_parser_stripped.ignored
      (with-stdout-to reason_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets reason_parser_stripped.log reason_parser_stripped.mli
    reason_parser_stripped.ml reason_parser_stripped.stacklang
    reason_parser_stripped.timings reason_parser_stripped.scount
    reason_parser_stripped.dcount)
  (deps reason_parser_stripped.mly)
  (action
    (with-outputs-to reason_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to reason_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      reason_parser_stripped.stacklang))

(rule (targets reason_parser_stripped.cmi reason_parser_stripped.mli.log)
  (deps reason_parser_stripped.mli)
  (action
    (with-stdout-to reason_parser_stripped.mli.dtimings
      (with-stderr-to reason_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c reason_parser_stripped.mli)))))

(rule (targets reason_parser_stripped.cmo reason_parser_stripped.ml.log)
  (deps reason_parser_stripped.ml reason_parser_stripped.cmi)
  (action
    (with-stdout-to reason_parser_stripped.ml.dtimings
      (with-stderr-to reason_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c reason_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff reason_parser_stripped.ml.log.exp reason_parser_stripped.ml.log)))

(rule (target regstab.2.0.0-parser.opp.out) (deps regstab.2.0.0-parser.mly)
  (action
    (with-outputs-to regstab.2.0.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff regstab.2.0.0-parser.opp.exp regstab.2.0.0-parser.opp.out)))

(rule
  (targets regstab.2.0.0-parser.out regstab.2.0.0-parser.automaton
    regstab.2.0.0-parser.automaton.resolved regstab.2.0.0-parser.conflicts
    regstab.2.0.0-parser.timings)
  (deps regstab.2.0.0-parser.mly)
  (action
    (with-outputs-to regstab.2.0.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to regstab.2.0.0-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff regstab.2.0.0-parser.exp regstab.2.0.0-parser.out)))

(rule (alias quick)
  (action
    (diff regstab.2.0.0-parser.automaton.exp regstab.2.0.0-parser.automaton)))

(rule (alias quick)
  (action
    (diff regstab.2.0.0-parser.automaton.resolved.exp
      regstab.2.0.0-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff regstab.2.0.0-parser.conflicts.exp regstab.2.0.0-parser.conflicts)))

(rule (target regstab_2_0_0-parser_stripped.mly)
  (deps regstab.2.0.0-parser.mly)
  (action
    (with-stderr-to regstab_2_0_0-parser_stripped.ignored
      (with-stdout-to regstab_2_0_0-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets regstab_2_0_0-parser_stripped.log
    regstab_2_0_0-parser_stripped.mli regstab_2_0_0-parser_stripped.ml
    regstab_2_0_0-parser_stripped.stacklang
    regstab_2_0_0-parser_stripped.timings
    regstab_2_0_0-parser_stripped.scount
    regstab_2_0_0-parser_stripped.dcount)
  (deps regstab_2_0_0-parser_stripped.mly)
  (action
    (with-outputs-to regstab_2_0_0-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to regstab_2_0_0-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      regstab_2_0_0-parser_stripped.stacklang))

(rule
  (targets regstab_2_0_0-parser_stripped.cmi
    regstab_2_0_0-parser_stripped.mli.log)
  (deps regstab_2_0_0-parser_stripped.mli)
  (action
    (with-stdout-to regstab_2_0_0-parser_stripped.mli.dtimings
      (with-stderr-to regstab_2_0_0-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          regstab_2_0_0-parser_stripped.mli)))))

(rule
  (targets regstab_2_0_0-parser_stripped.cmo
    regstab_2_0_0-parser_stripped.ml.log)
  (deps regstab_2_0_0-parser_stripped.ml regstab_2_0_0-parser_stripped.cmi)
  (action
    (with-stdout-to regstab_2_0_0-parser_stripped.ml.dtimings
      (with-stderr-to regstab_2_0_0-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          regstab_2_0_0-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff regstab_2_0_0-parser_stripped.ml.log.exp
      regstab_2_0_0-parser_stripped.ml.log)))

(rule (target rfsm.1.0-main_parser.opp.out) (deps rfsm.1.0-main_parser.mly)
  (action
    (with-outputs-to rfsm.1.0-main_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff rfsm.1.0-main_parser.opp.exp rfsm.1.0-main_parser.opp.out)))

(rule
  (targets rfsm.1.0-main_parser.out rfsm.1.0-main_parser.automaton
    rfsm.1.0-main_parser.automaton.resolved rfsm.1.0-main_parser.conflicts
    rfsm.1.0-main_parser.timings)
  (deps rfsm.1.0-main_parser.mly)
  (action
    (with-outputs-to rfsm.1.0-main_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to rfsm.1.0-main_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff rfsm.1.0-main_parser.exp rfsm.1.0-main_parser.out)))

(rule (alias quick)
  (action
    (diff rfsm.1.0-main_parser.automaton.exp rfsm.1.0-main_parser.automaton)))

(rule (alias quick)
  (action
    (diff rfsm.1.0-main_parser.automaton.resolved.exp
      rfsm.1.0-main_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff rfsm.1.0-main_parser.conflicts.exp rfsm.1.0-main_parser.conflicts)))

(rule (target rfsm_1_0-main_parser_stripped.mly)
  (deps rfsm.1.0-main_parser.mly)
  (action
    (with-stderr-to rfsm_1_0-main_parser_stripped.ignored
      (with-stdout-to rfsm_1_0-main_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets rfsm_1_0-main_parser_stripped.log
    rfsm_1_0-main_parser_stripped.mli rfsm_1_0-main_parser_stripped.ml
    rfsm_1_0-main_parser_stripped.stacklang
    rfsm_1_0-main_parser_stripped.timings
    rfsm_1_0-main_parser_stripped.scount
    rfsm_1_0-main_parser_stripped.dcount)
  (deps rfsm_1_0-main_parser_stripped.mly)
  (action
    (with-outputs-to rfsm_1_0-main_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to rfsm_1_0-main_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      rfsm_1_0-main_parser_stripped.stacklang))

(rule
  (targets rfsm_1_0-main_parser_stripped.cmi
    rfsm_1_0-main_parser_stripped.mli.log)
  (deps rfsm_1_0-main_parser_stripped.mli)
  (action
    (with-stdout-to rfsm_1_0-main_parser_stripped.mli.dtimings
      (with-stderr-to rfsm_1_0-main_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          rfsm_1_0-main_parser_stripped.mli)))))

(rule
  (targets rfsm_1_0-main_parser_stripped.cmo
    rfsm_1_0-main_parser_stripped.ml.log)
  (deps rfsm_1_0-main_parser_stripped.ml rfsm_1_0-main_parser_stripped.cmi)
  (action
    (with-stdout-to rfsm_1_0-main_parser_stripped.ml.dtimings
      (with-stderr-to rfsm_1_0-main_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          rfsm_1_0-main_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff rfsm_1_0-main_parser_stripped.ml.log.exp
      rfsm_1_0-main_parser_stripped.ml.log)))

(rule (target rlists.opp.out) (deps rlists.mly)
  (action
    (with-outputs-to rlists.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff rlists.opp.exp rlists.opp.out)))

(rule
  (targets rlists.out rlists.automaton rlists.automaton.resolved
    rlists.conflicts rlists.timings)
  (deps rlists.mly)
  (action
    (with-outputs-to rlists.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to rlists.timings %{deps})))))

(rule (alias quick) (action (diff rlists.exp rlists.out)))

(rule (alias quick) (action (diff rlists.automaton.exp rlists.automaton)))

(rule (alias quick)
  (action (diff rlists.automaton.resolved.exp rlists.automaton.resolved)))

(rule (alias quick) (action (diff rlists.conflicts.exp rlists.conflicts)))

(rule (target rlists_stripped.mly) (deps rlists.mly)
  (action
    (with-stderr-to rlists_stripped.ignored
      (with-stdout-to rlists_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets rlists_stripped.log rlists_stripped.mli rlists_stripped.ml
    rlists_stripped.stacklang rlists_stripped.timings rlists_stripped.scount
    rlists_stripped.dcount)
  (deps rlists_stripped.mly)
  (action
    (with-outputs-to rlists_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to rlists_stripped.timings %{deps})))))

(alias (name quick) (deps
                      rlists_stripped.stacklang))

(rule (targets rlists_stripped.cmi rlists_stripped.mli.log)
  (deps rlists_stripped.mli)
  (action
    (with-stdout-to rlists_stripped.mli.dtimings
      (with-stderr-to rlists_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c rlists_stripped.mli)))))

(rule (targets rlists_stripped.cmo rlists_stripped.ml.log)
  (deps rlists_stripped.ml rlists_stripped.cmi)
  (action
    (with-stdout-to rlists_stripped.ml.dtimings
      (with-stderr-to rlists_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c rlists_stripped.ml)))))

(rule (alias test)
  (action (diff rlists_stripped.ml.log.exp rlists_stripped.ml.log)))

(rule (target rml.1.09.05-parser.opp.out) (deps rml.1.09.05-parser.mly)
  (action
    (with-outputs-to rml.1.09.05-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff rml.1.09.05-parser.opp.exp rml.1.09.05-parser.opp.out)))

(rule
  (targets rml.1.09.05-parser.out rml.1.09.05-parser.automaton
    rml.1.09.05-parser.automaton.resolved rml.1.09.05-parser.conflicts
    rml.1.09.05-parser.timings)
  (deps rml.1.09.05-parser.mly)
  (action
    (with-outputs-to rml.1.09.05-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to rml.1.09.05-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff rml.1.09.05-parser.exp rml.1.09.05-parser.out)))

(rule (alias quick)
  (action
    (diff rml.1.09.05-parser.automaton.exp rml.1.09.05-parser.automaton)))

(rule (alias quick)
  (action
    (diff rml.1.09.05-parser.automaton.resolved.exp
      rml.1.09.05-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff rml.1.09.05-parser.conflicts.exp rml.1.09.05-parser.conflicts)))

(rule (target rml_1_09_05-parser_stripped.mly) (deps rml.1.09.05-parser.mly)
  (action
    (with-stderr-to rml_1_09_05-parser_stripped.ignored
      (with-stdout-to rml_1_09_05-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets rml_1_09_05-parser_stripped.log rml_1_09_05-parser_stripped.mli
    rml_1_09_05-parser_stripped.ml rml_1_09_05-parser_stripped.stacklang
    rml_1_09_05-parser_stripped.timings rml_1_09_05-parser_stripped.scount
    rml_1_09_05-parser_stripped.dcount)
  (deps rml_1_09_05-parser_stripped.mly)
  (action
    (with-outputs-to rml_1_09_05-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to rml_1_09_05-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      rml_1_09_05-parser_stripped.stacklang))

(rule
  (targets rml_1_09_05-parser_stripped.cmi
    rml_1_09_05-parser_stripped.mli.log)
  (deps rml_1_09_05-parser_stripped.mli)
  (action
    (with-stdout-to rml_1_09_05-parser_stripped.mli.dtimings
      (with-stderr-to rml_1_09_05-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c rml_1_09_05-parser_stripped.mli)))))

(rule
  (targets rml_1_09_05-parser_stripped.cmo
    rml_1_09_05-parser_stripped.ml.log)
  (deps rml_1_09_05-parser_stripped.ml rml_1_09_05-parser_stripped.cmi)
  (action
    (with-stdout-to rml_1_09_05-parser_stripped.ml.dtimings
      (with-stderr-to rml_1_09_05-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c rml_1_09_05-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff rml_1_09_05-parser_stripped.ml.log.exp
      rml_1_09_05-parser_stripped.ml.log)))

(rule (target ruby18_parser.opp.out) (deps ruby18_parser.mly)
  (action
    (with-outputs-to ruby18_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff ruby18_parser.opp.exp ruby18_parser.opp.out)))

(rule
  (targets ruby18_parser.out ruby18_parser.automaton
    ruby18_parser.automaton.resolved ruby18_parser.conflicts
    ruby18_parser.timings)
  (deps ruby18_parser.mly)
  (action
    (with-outputs-to ruby18_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to ruby18_parser.timings %{deps})))))

(rule (alias quick) (action (diff ruby18_parser.exp ruby18_parser.out)))

(rule (alias quick)
  (action (diff ruby18_parser.automaton.exp ruby18_parser.automaton)))

(rule (alias quick)
  (action
    (diff ruby18_parser.automaton.resolved.exp
      ruby18_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff ruby18_parser.conflicts.exp ruby18_parser.conflicts)))

(rule (target ruby18_parser_stripped.mly) (deps ruby18_parser.mly)
  (action
    (with-stderr-to ruby18_parser_stripped.ignored
      (with-stdout-to ruby18_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets ruby18_parser_stripped.log ruby18_parser_stripped.mli
    ruby18_parser_stripped.ml ruby18_parser_stripped.stacklang
    ruby18_parser_stripped.timings ruby18_parser_stripped.scount
    ruby18_parser_stripped.dcount)
  (deps ruby18_parser_stripped.mly)
  (action
    (with-outputs-to ruby18_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to ruby18_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      ruby18_parser_stripped.stacklang))

(rule (targets ruby18_parser_stripped.cmi ruby18_parser_stripped.mli.log)
  (deps ruby18_parser_stripped.mli)
  (action
    (with-stdout-to ruby18_parser_stripped.mli.dtimings
      (with-stderr-to ruby18_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c ruby18_parser_stripped.mli)))))

(rule (targets ruby18_parser_stripped.cmo ruby18_parser_stripped.ml.log)
  (deps ruby18_parser_stripped.ml ruby18_parser_stripped.cmi)
  (action
    (with-stdout-to ruby18_parser_stripped.ml.dtimings
      (with-stderr-to ruby18_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c ruby18_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff ruby18_parser_stripped.ml.log.exp ruby18_parser_stripped.ml.log)))

(rule (target sage.opp.out) (deps sage.mly)
  (action
    (with-outputs-to sage.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff sage.opp.exp sage.opp.out)))

(rule
  (targets sage.out sage.automaton sage.automaton.resolved sage.conflicts
    sage.timings)
  (deps sage.mly)
  (action
    (with-outputs-to sage.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to sage.timings %{deps})))))

(rule (alias quick) (action (diff sage.exp sage.out)))

(rule (alias quick) (action (diff sage.automaton.exp sage.automaton)))

(rule (alias quick)
  (action (diff sage.automaton.resolved.exp sage.automaton.resolved)))

(rule (alias quick) (action (diff sage.conflicts.exp sage.conflicts)))

(rule (target sage_stripped.mly) (deps sage.mly)
  (action
    (with-stderr-to sage_stripped.ignored
      (with-stdout-to sage_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets sage_stripped.log sage_stripped.mli sage_stripped.ml
    sage_stripped.stacklang sage_stripped.timings sage_stripped.scount
    sage_stripped.dcount)
  (deps sage_stripped.mly)
  (action
    (with-outputs-to sage_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to sage_stripped.timings %{deps})))))

(alias (name quick) (deps
                      sage_stripped.stacklang))

(rule (targets sage_stripped.cmi sage_stripped.mli.log)
  (deps sage_stripped.mli)
  (action
    (with-stdout-to sage_stripped.mli.dtimings
      (with-stderr-to sage_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c sage_stripped.mli)))))

(rule (targets sage_stripped.cmo sage_stripped.ml.log)
  (deps sage_stripped.ml sage_stripped.cmi)
  (action
    (with-stdout-to sage_stripped.ml.dtimings
      (with-stderr-to sage_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c sage_stripped.ml)))))

(rule (alias test)
  (action (diff sage_stripped.ml.log.exp sage_stripped.ml.log)))

(rule (target scilabParser.opp.out) (deps scilabParser.mly)
  (action
    (with-outputs-to scilabParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff scilabParser.opp.exp scilabParser.opp.out)))

(rule
  (targets scilabParser.out scilabParser.automaton
    scilabParser.automaton.resolved scilabParser.conflicts
    scilabParser.timings)
  (deps scilabParser.mly)
  (action
    (with-outputs-to scilabParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to scilabParser.timings %{deps})))))

(rule (alias quick) (action (diff scilabParser.exp scilabParser.out)))

(rule (alias quick)
  (action (diff scilabParser.automaton.exp scilabParser.automaton)))

(rule (alias quick)
  (action
    (diff scilabParser.automaton.resolved.exp
      scilabParser.automaton.resolved)))

(rule (alias quick)
  (action (diff scilabParser.conflicts.exp scilabParser.conflicts)))

(rule (target scilabParser_stripped.mly) (deps scilabParser.mly)
  (action
    (with-stderr-to scilabParser_stripped.ignored
      (with-stdout-to scilabParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets scilabParser_stripped.log scilabParser_stripped.mli
    scilabParser_stripped.ml scilabParser_stripped.stacklang
    scilabParser_stripped.timings scilabParser_stripped.scount
    scilabParser_stripped.dcount)
  (deps scilabParser_stripped.mly)
  (action
    (with-outputs-to scilabParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to scilabParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      scilabParser_stripped.stacklang))

(rule (targets scilabParser_stripped.cmi scilabParser_stripped.mli.log)
  (deps scilabParser_stripped.mli)
  (action
    (with-stdout-to scilabParser_stripped.mli.dtimings
      (with-stderr-to scilabParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c scilabParser_stripped.mli)))))

(rule (targets scilabParser_stripped.cmo scilabParser_stripped.ml.log)
  (deps scilabParser_stripped.ml scilabParser_stripped.cmi)
  (action
    (with-stdout-to scilabParser_stripped.ml.dtimings
      (with-stderr-to scilabParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c scilabParser_stripped.ml)))))

(rule (alias test)
  (action
    (diff scilabParser_stripped.ml.log.exp scilabParser_stripped.ml.log)))

(rule (target self.opp.out) (deps self.mly)
  (action
    (with-outputs-to self.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff self.opp.exp self.opp.out)))

(rule
  (targets self.out self.automaton self.automaton.resolved self.conflicts
    self.timings)
  (deps self.mly)
  (action
    (with-outputs-to self.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to self.timings %{deps})))))

(rule (alias quick) (action (diff self.exp self.out)))

(rule (alias quick) (action (diff self.automaton.exp self.automaton)))

(rule (alias quick)
  (action (diff self.automaton.resolved.exp self.automaton.resolved)))

(rule (alias quick) (action (diff self.conflicts.exp self.conflicts)))

(rule (target self_stripped.mly) (deps self.mly)
  (action
    (with-stderr-to self_stripped.ignored
      (with-stdout-to self_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets self_stripped.log self_stripped.mli self_stripped.ml
    self_stripped.stacklang self_stripped.timings self_stripped.scount
    self_stripped.dcount)
  (deps self_stripped.mly)
  (action
    (with-outputs-to self_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to self_stripped.timings %{deps})))))

(alias (name quick) (deps
                      self_stripped.stacklang))

(rule (targets self_stripped.cmi self_stripped.mli.log)
  (deps self_stripped.mli)
  (action
    (with-stdout-to self_stripped.mli.dtimings
      (with-stderr-to self_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c self_stripped.mli)))))

(rule (targets self_stripped.cmo self_stripped.ml.log)
  (deps self_stripped.ml self_stripped.cmi)
  (action
    (with-stdout-to self_stripped.ml.dtimings
      (with-stderr-to self_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c self_stripped.ml)))))

(rule (alias test)
  (action (diff self_stripped.ml.log.exp self_stripped.ml.log)))

(rule (target self_ground.opp.out) (deps self_ground.mly)
  (action
    (with-outputs-to self_ground.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff self_ground.opp.exp self_ground.opp.out)))

(rule
  (targets self_ground.out self_ground.automaton
    self_ground.automaton.resolved self_ground.conflicts self_ground.timings)
  (deps self_ground.mly)
  (action
    (with-outputs-to self_ground.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to self_ground.timings %{deps})))))

(rule (alias quick) (action (diff self_ground.exp self_ground.out)))

(rule (alias quick)
  (action (diff self_ground.automaton.exp self_ground.automaton)))

(rule (alias quick)
  (action
    (diff self_ground.automaton.resolved.exp self_ground.automaton.resolved)))

(rule (alias quick)
  (action (diff self_ground.conflicts.exp self_ground.conflicts)))

(rule (target self_ground_stripped.mly) (deps self_ground.mly)
  (action
    (with-stderr-to self_ground_stripped.ignored
      (with-stdout-to self_ground_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets self_ground_stripped.log self_ground_stripped.mli
    self_ground_stripped.ml self_ground_stripped.stacklang
    self_ground_stripped.timings self_ground_stripped.scount
    self_ground_stripped.dcount)
  (deps self_ground_stripped.mly)
  (action
    (with-outputs-to self_ground_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to self_ground_stripped.timings %{deps})))))

(alias (name quick) (deps
                      self_ground_stripped.stacklang))

(rule (targets self_ground_stripped.cmi self_ground_stripped.mli.log)
  (deps self_ground_stripped.mli)
  (action
    (with-stdout-to self_ground_stripped.mli.dtimings
      (with-stderr-to self_ground_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c self_ground_stripped.mli)))))

(rule (targets self_ground_stripped.cmo self_ground_stripped.ml.log)
  (deps self_ground_stripped.ml self_ground_stripped.cmi)
  (action
    (with-stdout-to self_ground_stripped.ml.dtimings
      (with-stderr-to self_ground_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c self_ground_stripped.ml)))))

(rule (alias test)
  (action (diff self_ground_stripped.ml.log.exp self_ground_stripped.ml.log)))

(rule (target sexpParser.opp.out) (deps sexpParser.mly)
  (action
    (with-outputs-to sexpParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff sexpParser.opp.exp sexpParser.opp.out)))

(rule
  (targets sexpParser.out sexpParser.automaton sexpParser.automaton.resolved
    sexpParser.conflicts sexpParser.timings)
  (deps sexpParser.mly)
  (action
    (with-outputs-to sexpParser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to sexpParser.timings %{deps})))))

(rule (alias quick) (action (diff sexpParser.exp sexpParser.out)))

(rule (alias quick)
  (action (diff sexpParser.automaton.exp sexpParser.automaton)))

(rule (alias quick)
  (action
    (diff sexpParser.automaton.resolved.exp sexpParser.automaton.resolved)))

(rule (alias quick)
  (action (diff sexpParser.conflicts.exp sexpParser.conflicts)))

(rule (target sexpParser_stripped.mly) (deps sexpParser.mly)
  (action
    (with-stderr-to sexpParser_stripped.ignored
      (with-stdout-to sexpParser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets sexpParser_stripped.log sexpParser_stripped.mli
    sexpParser_stripped.ml sexpParser_stripped.stacklang
    sexpParser_stripped.timings sexpParser_stripped.scount
    sexpParser_stripped.dcount)
  (deps sexpParser_stripped.mly)
  (action
    (with-outputs-to sexpParser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to sexpParser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      sexpParser_stripped.stacklang))

(rule (targets sexpParser_stripped.cmi sexpParser_stripped.mli.log)
  (deps sexpParser_stripped.mli)
  (action
    (with-stdout-to sexpParser_stripped.mli.dtimings
      (with-stderr-to sexpParser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c sexpParser_stripped.mli)))))

(rule (targets sexpParser_stripped.cmo sexpParser_stripped.ml.log)
  (deps sexpParser_stripped.ml sexpParser_stripped.cmi)
  (action
    (with-stdout-to sexpParser_stripped.ml.dtimings
      (with-stderr-to sexpParser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c sexpParser_stripped.ml)))))

(rule (alias test)
  (action (diff sexpParser_stripped.ml.log.exp sexpParser_stripped.ml.log)))

(rule (target sibylfs-lem.0.4.0-parser.opp.out)
  (deps sibylfs-lem.0.4.0-parser.mly)
  (action
    (with-outputs-to sibylfs-lem.0.4.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff sibylfs-lem.0.4.0-parser.opp.exp sibylfs-lem.0.4.0-parser.opp.out)))

(rule
  (targets sibylfs-lem.0.4.0-parser.out sibylfs-lem.0.4.0-parser.automaton
    sibylfs-lem.0.4.0-parser.automaton.resolved
    sibylfs-lem.0.4.0-parser.conflicts sibylfs-lem.0.4.0-parser.timings)
  (deps sibylfs-lem.0.4.0-parser.mly)
  (action
    (with-outputs-to sibylfs-lem.0.4.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to sibylfs-lem.0.4.0-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff sibylfs-lem.0.4.0-parser.exp sibylfs-lem.0.4.0-parser.out)))

(rule (alias quick)
  (action
    (diff sibylfs-lem.0.4.0-parser.automaton.exp
      sibylfs-lem.0.4.0-parser.automaton)))

(rule (alias quick)
  (action
    (diff sibylfs-lem.0.4.0-parser.automaton.resolved.exp
      sibylfs-lem.0.4.0-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff sibylfs-lem.0.4.0-parser.conflicts.exp
      sibylfs-lem.0.4.0-parser.conflicts)))

(rule (target sibylfs-lem_0_4_0-parser_stripped.mly)
  (deps sibylfs-lem.0.4.0-parser.mly)
  (action
    (with-stderr-to sibylfs-lem_0_4_0-parser_stripped.ignored
      (with-stdout-to sibylfs-lem_0_4_0-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets sibylfs-lem_0_4_0-parser_stripped.log
    sibylfs-lem_0_4_0-parser_stripped.mli
    sibylfs-lem_0_4_0-parser_stripped.ml
    sibylfs-lem_0_4_0-parser_stripped.stacklang
    sibylfs-lem_0_4_0-parser_stripped.timings
    sibylfs-lem_0_4_0-parser_stripped.scount
    sibylfs-lem_0_4_0-parser_stripped.dcount)
  (deps sibylfs-lem_0_4_0-parser_stripped.mly)
  (action
    (with-outputs-to sibylfs-lem_0_4_0-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to sibylfs-lem_0_4_0-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      sibylfs-lem_0_4_0-parser_stripped.stacklang))

(rule
  (targets sibylfs-lem_0_4_0-parser_stripped.cmi
    sibylfs-lem_0_4_0-parser_stripped.mli.log)
  (deps sibylfs-lem_0_4_0-parser_stripped.mli)
  (action
    (with-stdout-to sibylfs-lem_0_4_0-parser_stripped.mli.dtimings
      (with-stderr-to sibylfs-lem_0_4_0-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          sibylfs-lem_0_4_0-parser_stripped.mli)))))

(rule
  (targets sibylfs-lem_0_4_0-parser_stripped.cmo
    sibylfs-lem_0_4_0-parser_stripped.ml.log)
  (deps sibylfs-lem_0_4_0-parser_stripped.ml
    sibylfs-lem_0_4_0-parser_stripped.cmi)
  (action
    (with-stdout-to sibylfs-lem_0_4_0-parser_stripped.ml.dtimings
      (with-stderr-to sibylfs-lem_0_4_0-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          sibylfs-lem_0_4_0-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff sibylfs-lem_0_4_0-parser_stripped.ml.log.exp
      sibylfs-lem_0_4_0-parser_stripped.ml.log)))

(rule (target simnml.opp.out) (deps simnml.mly)
  (action
    (with-outputs-to simnml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff simnml.opp.exp simnml.opp.out)))

(rule
  (targets simnml.out simnml.automaton simnml.automaton.resolved
    simnml.conflicts simnml.timings)
  (deps simnml.mly)
  (action
    (with-outputs-to simnml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to simnml.timings %{deps})))))

(rule (alias quick) (action (diff simnml.exp simnml.out)))

(rule (alias quick) (action (diff simnml.automaton.exp simnml.automaton)))

(rule (alias quick)
  (action (diff simnml.automaton.resolved.exp simnml.automaton.resolved)))

(rule (alias quick) (action (diff simnml.conflicts.exp simnml.conflicts)))

(rule (target simnml_stripped.mly) (deps simnml.mly)
  (action
    (with-stderr-to simnml_stripped.ignored
      (with-stdout-to simnml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets simnml_stripped.log simnml_stripped.mli simnml_stripped.ml
    simnml_stripped.stacklang simnml_stripped.timings simnml_stripped.scount
    simnml_stripped.dcount)
  (deps simnml_stripped.mly)
  (action
    (with-outputs-to simnml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to simnml_stripped.timings %{deps})))))

(alias (name quick) (deps
                      simnml_stripped.stacklang))

(rule (targets simnml_stripped.cmi simnml_stripped.mli.log)
  (deps simnml_stripped.mli)
  (action
    (with-stdout-to simnml_stripped.mli.dtimings
      (with-stderr-to simnml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c simnml_stripped.mli)))))

(rule (targets simnml_stripped.cmo simnml_stripped.ml.log)
  (deps simnml_stripped.ml simnml_stripped.cmi)
  (action
    (with-stdout-to simnml_stripped.ml.dtimings
      (with-stderr-to simnml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c simnml_stripped.ml)))))

(rule (alias test)
  (action (diff simnml_stripped.ml.log.exp simnml_stripped.ml.log)))

(rule (target simple-if-conflict.opp.out) (deps simple-if-conflict.mly)
  (action
    (with-outputs-to simple-if-conflict.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff simple-if-conflict.opp.exp simple-if-conflict.opp.out)))

(rule
  (targets simple-if-conflict.out simple-if-conflict.automaton
    simple-if-conflict.automaton.resolved simple-if-conflict.conflicts
    simple-if-conflict.timings)
  (deps simple-if-conflict.mly)
  (action
    (with-outputs-to simple-if-conflict.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to simple-if-conflict.timings %{deps})))))

(rule (alias quick)
  (action (diff simple-if-conflict.exp simple-if-conflict.out)))

(rule (alias quick)
  (action
    (diff simple-if-conflict.automaton.exp simple-if-conflict.automaton)))

(rule (alias quick)
  (action
    (diff simple-if-conflict.automaton.resolved.exp
      simple-if-conflict.automaton.resolved)))

(rule (alias quick)
  (action
    (diff simple-if-conflict.conflicts.exp simple-if-conflict.conflicts)))

(rule (target simple-if-conflict_stripped.mly) (deps simple-if-conflict.mly)
  (action
    (with-stderr-to simple-if-conflict_stripped.ignored
      (with-stdout-to simple-if-conflict_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets simple-if-conflict_stripped.log simple-if-conflict_stripped.mli
    simple-if-conflict_stripped.ml simple-if-conflict_stripped.stacklang
    simple-if-conflict_stripped.timings simple-if-conflict_stripped.scount
    simple-if-conflict_stripped.dcount)
  (deps simple-if-conflict_stripped.mly)
  (action
    (with-outputs-to simple-if-conflict_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to simple-if-conflict_stripped.timings %{deps})))))

(alias (name quick) (deps
                      simple-if-conflict_stripped.stacklang))

(rule
  (targets simple-if-conflict_stripped.cmi
    simple-if-conflict_stripped.mli.log)
  (deps simple-if-conflict_stripped.mli)
  (action
    (with-stdout-to simple-if-conflict_stripped.mli.dtimings
      (with-stderr-to simple-if-conflict_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c simple-if-conflict_stripped.mli)))))

(rule
  (targets simple-if-conflict_stripped.cmo
    simple-if-conflict_stripped.ml.log)
  (deps simple-if-conflict_stripped.ml simple-if-conflict_stripped.cmi)
  (action
    (with-stdout-to simple-if-conflict_stripped.ml.dtimings
      (with-stderr-to simple-if-conflict_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c simple-if-conflict_stripped.ml)))))

(rule (alias test)
  (action
    (diff simple-if-conflict_stripped.ml.log.exp
      simple-if-conflict_stripped.ml.log)))

(rule (target simple-if-conflict-no-eos.opp.out)
  (deps simple-if-conflict-no-eos.mly)
  (action
    (with-outputs-to simple-if-conflict-no-eos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff simple-if-conflict-no-eos.opp.exp
      simple-if-conflict-no-eos.opp.out)))

(rule
  (targets simple-if-conflict-no-eos.out simple-if-conflict-no-eos.automaton
    simple-if-conflict-no-eos.automaton.resolved
    simple-if-conflict-no-eos.conflicts simple-if-conflict-no-eos.timings)
  (deps simple-if-conflict-no-eos.mly)
  (action
    (with-outputs-to simple-if-conflict-no-eos.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to simple-if-conflict-no-eos.timings %{deps})))))

(rule (alias quick)
  (action (diff simple-if-conflict-no-eos.exp simple-if-conflict-no-eos.out)))

(rule (alias quick)
  (action
    (diff simple-if-conflict-no-eos.automaton.exp
      simple-if-conflict-no-eos.automaton)))

(rule (alias quick)
  (action
    (diff simple-if-conflict-no-eos.automaton.resolved.exp
      simple-if-conflict-no-eos.automaton.resolved)))

(rule (alias quick)
  (action
    (diff simple-if-conflict-no-eos.conflicts.exp
      simple-if-conflict-no-eos.conflicts)))

(rule (target simple-if-conflict-no-eos_stripped.mly)
  (deps simple-if-conflict-no-eos.mly)
  (action
    (with-stderr-to simple-if-conflict-no-eos_stripped.ignored
      (with-stdout-to simple-if-conflict-no-eos_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets simple-if-conflict-no-eos_stripped.log
    simple-if-conflict-no-eos_stripped.mli
    simple-if-conflict-no-eos_stripped.ml
    simple-if-conflict-no-eos_stripped.stacklang
    simple-if-conflict-no-eos_stripped.timings
    simple-if-conflict-no-eos_stripped.scount
    simple-if-conflict-no-eos_stripped.dcount)
  (deps simple-if-conflict-no-eos_stripped.mly)
  (action
    (with-outputs-to simple-if-conflict-no-eos_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to simple-if-conflict-no-eos_stripped.timings %{deps})))))

(alias (name quick) (deps
                      simple-if-conflict-no-eos_stripped.stacklang))

(rule
  (targets simple-if-conflict-no-eos_stripped.cmi
    simple-if-conflict-no-eos_stripped.mli.log)
  (deps simple-if-conflict-no-eos_stripped.mli)
  (action
    (with-stdout-to simple-if-conflict-no-eos_stripped.mli.dtimings
      (with-stderr-to simple-if-conflict-no-eos_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          simple-if-conflict-no-eos_stripped.mli)))))

(rule
  (targets simple-if-conflict-no-eos_stripped.cmo
    simple-if-conflict-no-eos_stripped.ml.log)
  (deps simple-if-conflict-no-eos_stripped.ml
    simple-if-conflict-no-eos_stripped.cmi)
  (action
    (with-stdout-to simple-if-conflict-no-eos_stripped.ml.dtimings
      (with-stderr-to simple-if-conflict-no-eos_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          simple-if-conflict-no-eos_stripped.ml)))))

(rule (alias test)
  (action
    (diff simple-if-conflict-no-eos_stripped.ml.log.exp
      simple-if-conflict-no-eos_stripped.ml.log)))

(rule (target smtlib-utils.opp.out) (deps smtlib-utils.mly)
  (action
    (with-outputs-to smtlib-utils.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff smtlib-utils.opp.exp smtlib-utils.opp.out)))

(rule
  (targets smtlib-utils.out smtlib-utils.automaton
    smtlib-utils.automaton.resolved smtlib-utils.conflicts
    smtlib-utils.timings)
  (deps smtlib-utils.mly)
  (action
    (with-outputs-to smtlib-utils.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to smtlib-utils.timings %{deps})))))

(rule (alias quick) (action (diff smtlib-utils.exp smtlib-utils.out)))

(rule (alias quick)
  (action (diff smtlib-utils.automaton.exp smtlib-utils.automaton)))

(rule (alias quick)
  (action
    (diff smtlib-utils.automaton.resolved.exp
      smtlib-utils.automaton.resolved)))

(rule (alias quick)
  (action (diff smtlib-utils.conflicts.exp smtlib-utils.conflicts)))

(rule (target smtlib-utils_stripped.mly) (deps smtlib-utils.mly)
  (action
    (with-stderr-to smtlib-utils_stripped.ignored
      (with-stdout-to smtlib-utils_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets smtlib-utils_stripped.log smtlib-utils_stripped.mli
    smtlib-utils_stripped.ml smtlib-utils_stripped.stacklang
    smtlib-utils_stripped.timings smtlib-utils_stripped.scount
    smtlib-utils_stripped.dcount)
  (deps smtlib-utils_stripped.mly)
  (action
    (with-outputs-to smtlib-utils_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to smtlib-utils_stripped.timings %{deps})))))

(alias (name quick) (deps
                      smtlib-utils_stripped.stacklang))

(rule (targets smtlib-utils_stripped.cmi smtlib-utils_stripped.mli.log)
  (deps smtlib-utils_stripped.mli)
  (action
    (with-stdout-to smtlib-utils_stripped.mli.dtimings
      (with-stderr-to smtlib-utils_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c smtlib-utils_stripped.mli)))))

(rule (targets smtlib-utils_stripped.cmo smtlib-utils_stripped.ml.log)
  (deps smtlib-utils_stripped.ml smtlib-utils_stripped.cmi)
  (action
    (with-stdout-to smtlib-utils_stripped.ml.dtimings
      (with-stderr-to smtlib-utils_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c smtlib-utils_stripped.ml)))))

(rule (alias test)
  (action
    (diff smtlib-utils_stripped.ml.log.exp smtlib-utils_stripped.ml.log)))

(rule (target solidity.opp.out) (deps solidity.mly)
  (action
    (with-outputs-to solidity.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff solidity.opp.exp solidity.opp.out)))

(rule
  (targets solidity.out solidity.automaton solidity.automaton.resolved
    solidity.conflicts solidity.timings)
  (deps solidity.mly)
  (action
    (with-outputs-to solidity.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to solidity.timings %{deps})))))

(rule (alias quick) (action (diff solidity.exp solidity.out)))

(rule (alias quick)
  (action (diff solidity.automaton.exp solidity.automaton)))

(rule (alias quick)
  (action (diff solidity.automaton.resolved.exp solidity.automaton.resolved)))

(rule (alias quick)
  (action (diff solidity.conflicts.exp solidity.conflicts)))

(rule (target solidity_stripped.mly) (deps solidity.mly)
  (action
    (with-stderr-to solidity_stripped.ignored
      (with-stdout-to solidity_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets solidity_stripped.log solidity_stripped.mli solidity_stripped.ml
    solidity_stripped.stacklang solidity_stripped.timings
    solidity_stripped.scount solidity_stripped.dcount)
  (deps solidity_stripped.mly)
  (action
    (with-outputs-to solidity_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to solidity_stripped.timings %{deps})))))

(alias (name quick) (deps
                      solidity_stripped.stacklang))

(rule (targets solidity_stripped.cmi solidity_stripped.mli.log)
  (deps solidity_stripped.mli)
  (action
    (with-stdout-to solidity_stripped.mli.dtimings
      (with-stderr-to solidity_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c solidity_stripped.mli)))))

(rule (targets solidity_stripped.cmo solidity_stripped.ml.log)
  (deps solidity_stripped.ml solidity_stripped.cmi)
  (action
    (with-stdout-to solidity_stripped.ml.dtimings
      (with-stderr-to solidity_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c solidity_stripped.ml)))))

(rule (alias test)
  (action (diff solidity_stripped.ml.log.exp solidity_stripped.ml.log)))

(rule (target solidity_raw_parser.opp.out) (deps solidity_raw_parser.mly)
  (action
    (with-outputs-to solidity_raw_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff solidity_raw_parser.opp.exp solidity_raw_parser.opp.out)))

(rule
  (targets solidity_raw_parser.out solidity_raw_parser.automaton
    solidity_raw_parser.automaton.resolved solidity_raw_parser.conflicts
    solidity_raw_parser.timings)
  (deps solidity_raw_parser.mly)
  (action
    (with-outputs-to solidity_raw_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to solidity_raw_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff solidity_raw_parser.exp solidity_raw_parser.out)))

(rule (alias quick)
  (action
    (diff solidity_raw_parser.automaton.exp solidity_raw_parser.automaton)))

(rule (alias quick)
  (action
    (diff solidity_raw_parser.automaton.resolved.exp
      solidity_raw_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff solidity_raw_parser.conflicts.exp solidity_raw_parser.conflicts)))

(rule (target solidity_raw_parser_stripped.mly)
  (deps solidity_raw_parser.mly)
  (action
    (with-stderr-to solidity_raw_parser_stripped.ignored
      (with-stdout-to solidity_raw_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets solidity_raw_parser_stripped.log solidity_raw_parser_stripped.mli
    solidity_raw_parser_stripped.ml solidity_raw_parser_stripped.stacklang
    solidity_raw_parser_stripped.timings solidity_raw_parser_stripped.scount
    solidity_raw_parser_stripped.dcount)
  (deps solidity_raw_parser_stripped.mly)
  (action
    (with-outputs-to solidity_raw_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to solidity_raw_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      solidity_raw_parser_stripped.stacklang))

(rule
  (targets solidity_raw_parser_stripped.cmi
    solidity_raw_parser_stripped.mli.log)
  (deps solidity_raw_parser_stripped.mli)
  (action
    (with-stdout-to solidity_raw_parser_stripped.mli.dtimings
      (with-stderr-to solidity_raw_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          solidity_raw_parser_stripped.mli)))))

(rule
  (targets solidity_raw_parser_stripped.cmo
    solidity_raw_parser_stripped.ml.log)
  (deps solidity_raw_parser_stripped.ml solidity_raw_parser_stripped.cmi)
  (action
    (with-stdout-to solidity_raw_parser_stripped.ml.dtimings
      (with-stderr-to solidity_raw_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c solidity_raw_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff solidity_raw_parser_stripped.ml.log.exp
      solidity_raw_parser_stripped.ml.log)))

(rule (target spike.opp.out) (deps spike.mly)
  (action
    (with-outputs-to spike.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff spike.opp.exp spike.opp.out)))

(rule
  (targets spike.out spike.automaton spike.automaton.resolved spike.conflicts
    spike.timings)
  (deps spike.mly)
  (action
    (with-outputs-to spike.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to spike.timings %{deps})))))

(rule (alias quick) (action (diff spike.exp spike.out)))

(rule (alias quick) (action (diff spike.automaton.exp spike.automaton)))

(rule (alias quick)
  (action (diff spike.automaton.resolved.exp spike.automaton.resolved)))

(rule (alias quick) (action (diff spike.conflicts.exp spike.conflicts)))

(rule (target spike_stripped.mly) (deps spike.mly)
  (action
    (with-stderr-to spike_stripped.ignored
      (with-stdout-to spike_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets spike_stripped.log spike_stripped.mli spike_stripped.ml
    spike_stripped.stacklang spike_stripped.timings spike_stripped.scount
    spike_stripped.dcount)
  (deps spike_stripped.mly)
  (action
    (with-outputs-to spike_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to spike_stripped.timings %{deps})))))

(alias (name quick) (deps
                      spike_stripped.stacklang))

(rule (targets spike_stripped.cmi spike_stripped.mli.log)
  (deps spike_stripped.mli)
  (action
    (with-stdout-to spike_stripped.mli.dtimings
      (with-stderr-to spike_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c spike_stripped.mli)))))

(rule (targets spike_stripped.cmo spike_stripped.ml.log)
  (deps spike_stripped.ml spike_stripped.cmi)
  (action
    (with-stdout-to spike_stripped.ml.dtimings
      (with-stderr-to spike_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c spike_stripped.ml)))))

(rule (alias test)
  (action (diff spike_stripped.ml.log.exp spike_stripped.ml.log)))

(rule (target split-public-symbol.opp.out) (deps split-public-symbol.mly)
  (action
    (with-outputs-to split-public-symbol.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff split-public-symbol.opp.exp split-public-symbol.opp.out)))

(rule
  (targets split-public-symbol.out split-public-symbol.automaton
    split-public-symbol.automaton.resolved split-public-symbol.conflicts
    split-public-symbol.timings)
  (deps split-public-symbol.mly)
  (action
    (with-outputs-to split-public-symbol.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to split-public-symbol.timings %{deps})))))

(rule (alias quick)
  (action (diff split-public-symbol.exp split-public-symbol.out)))

(rule (alias quick)
  (action
    (diff split-public-symbol.automaton.exp split-public-symbol.automaton)))

(rule (alias quick)
  (action
    (diff split-public-symbol.automaton.resolved.exp
      split-public-symbol.automaton.resolved)))

(rule (alias quick)
  (action
    (diff split-public-symbol.conflicts.exp split-public-symbol.conflicts)))

(rule (target split-public-symbol_stripped.mly)
  (deps split-public-symbol.mly)
  (action
    (with-stderr-to split-public-symbol_stripped.ignored
      (with-stdout-to split-public-symbol_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets split-public-symbol_stripped.log split-public-symbol_stripped.mli
    split-public-symbol_stripped.ml split-public-symbol_stripped.stacklang
    split-public-symbol_stripped.timings split-public-symbol_stripped.scount
    split-public-symbol_stripped.dcount)
  (deps split-public-symbol_stripped.mly)
  (action
    (with-outputs-to split-public-symbol_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to split-public-symbol_stripped.timings %{deps})))))

(alias (name quick) (deps
                      split-public-symbol_stripped.stacklang))

(rule
  (targets split-public-symbol_stripped.cmi
    split-public-symbol_stripped.mli.log)
  (deps split-public-symbol_stripped.mli)
  (action
    (with-stdout-to split-public-symbol_stripped.mli.dtimings
      (with-stderr-to split-public-symbol_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          split-public-symbol_stripped.mli)))))

(rule
  (targets split-public-symbol_stripped.cmo
    split-public-symbol_stripped.ml.log)
  (deps split-public-symbol_stripped.ml split-public-symbol_stripped.cmi)
  (action
    (with-stdout-to split-public-symbol_stripped.ml.dtimings
      (with-stderr-to split-public-symbol_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c split-public-symbol_stripped.ml)))))

(rule (alias test)
  (action
    (diff split-public-symbol_stripped.ml.log.exp
      split-public-symbol_stripped.ml.log)))

(rule (target split-public-symbol-with-renaming.opp.out)
  (deps split-public-symbol-with-renaming.mly)
  (action
    (with-outputs-to split-public-symbol-with-renaming.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff split-public-symbol-with-renaming.opp.exp
      split-public-symbol-with-renaming.opp.out)))

(rule
  (targets split-public-symbol-with-renaming.out
    split-public-symbol-with-renaming.automaton
    split-public-symbol-with-renaming.automaton.resolved
    split-public-symbol-with-renaming.conflicts
    split-public-symbol-with-renaming.timings)
  (deps split-public-symbol-with-renaming.mly)
  (action
    (with-outputs-to split-public-symbol-with-renaming.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to split-public-symbol-with-renaming.timings %{deps})))))

(rule (alias quick)
  (action
    (diff split-public-symbol-with-renaming.exp
      split-public-symbol-with-renaming.out)))

(rule (alias quick)
  (action
    (diff split-public-symbol-with-renaming.automaton.exp
      split-public-symbol-with-renaming.automaton)))

(rule (alias quick)
  (action
    (diff split-public-symbol-with-renaming.automaton.resolved.exp
      split-public-symbol-with-renaming.automaton.resolved)))

(rule (alias quick)
  (action
    (diff split-public-symbol-with-renaming.conflicts.exp
      split-public-symbol-with-renaming.conflicts)))

(rule (target split-public-symbol-with-renaming_stripped.mly)
  (deps split-public-symbol-with-renaming.mly)
  (action
    (with-stderr-to split-public-symbol-with-renaming_stripped.ignored
      (with-stdout-to split-public-symbol-with-renaming_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets split-public-symbol-with-renaming_stripped.log
    split-public-symbol-with-renaming_stripped.mli
    split-public-symbol-with-renaming_stripped.ml
    split-public-symbol-with-renaming_stripped.stacklang
    split-public-symbol-with-renaming_stripped.timings
    split-public-symbol-with-renaming_stripped.scount
    split-public-symbol-with-renaming_stripped.dcount)
  (deps split-public-symbol-with-renaming_stripped.mly)
  (action
    (with-outputs-to split-public-symbol-with-renaming_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to split-public-symbol-with-renaming_stripped.timings
          %{deps})))))

(alias (name quick)
  (deps
    split-public-symbol-with-renaming_stripped.stacklang))

(rule
  (targets split-public-symbol-with-renaming_stripped.cmi
    split-public-symbol-with-renaming_stripped.mli.log)
  (deps split-public-symbol-with-renaming_stripped.mli)
  (action
    (with-stdout-to split-public-symbol-with-renaming_stripped.mli.dtimings
      (with-stderr-to split-public-symbol-with-renaming_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          split-public-symbol-with-renaming_stripped.mli)))))

(rule
  (targets split-public-symbol-with-renaming_stripped.cmo
    split-public-symbol-with-renaming_stripped.ml.log)
  (deps split-public-symbol-with-renaming_stripped.ml
    split-public-symbol-with-renaming_stripped.cmi)
  (action
    (with-stdout-to split-public-symbol-with-renaming_stripped.ml.dtimings
      (with-stderr-to split-public-symbol-with-renaming_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          split-public-symbol-with-renaming_stripped.ml)))))

(rule (alias test)
  (action
    (diff split-public-symbol-with-renaming_stripped.ml.log.exp
      split-public-symbol-with-renaming_stripped.ml.log)))

(rule (target sqlgg.0.4.5-sql_parser.opp.out)
  (deps sqlgg.0.4.5-sql_parser.mly)
  (action
    (with-outputs-to sqlgg.0.4.5-sql_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff sqlgg.0.4.5-sql_parser.opp.exp sqlgg.0.4.5-sql_parser.opp.out)))

(rule
  (targets sqlgg.0.4.5-sql_parser.out sqlgg.0.4.5-sql_parser.automaton
    sqlgg.0.4.5-sql_parser.automaton.resolved
    sqlgg.0.4.5-sql_parser.conflicts sqlgg.0.4.5-sql_parser.timings)
  (deps sqlgg.0.4.5-sql_parser.mly)
  (action
    (with-outputs-to sqlgg.0.4.5-sql_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to sqlgg.0.4.5-sql_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff sqlgg.0.4.5-sql_parser.exp sqlgg.0.4.5-sql_parser.out)))

(rule (alias quick)
  (action
    (diff sqlgg.0.4.5-sql_parser.automaton.exp
      sqlgg.0.4.5-sql_parser.automaton)))

(rule (alias quick)
  (action
    (diff sqlgg.0.4.5-sql_parser.automaton.resolved.exp
      sqlgg.0.4.5-sql_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff sqlgg.0.4.5-sql_parser.conflicts.exp
      sqlgg.0.4.5-sql_parser.conflicts)))

(rule (target sqlgg_0_4_5-sql_parser_stripped.mly)
  (deps sqlgg.0.4.5-sql_parser.mly)
  (action
    (with-stderr-to sqlgg_0_4_5-sql_parser_stripped.ignored
      (with-stdout-to sqlgg_0_4_5-sql_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets sqlgg_0_4_5-sql_parser_stripped.log
    sqlgg_0_4_5-sql_parser_stripped.mli sqlgg_0_4_5-sql_parser_stripped.ml
    sqlgg_0_4_5-sql_parser_stripped.stacklang
    sqlgg_0_4_5-sql_parser_stripped.timings
    sqlgg_0_4_5-sql_parser_stripped.scount
    sqlgg_0_4_5-sql_parser_stripped.dcount)
  (deps sqlgg_0_4_5-sql_parser_stripped.mly)
  (action
    (with-outputs-to sqlgg_0_4_5-sql_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to sqlgg_0_4_5-sql_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      sqlgg_0_4_5-sql_parser_stripped.stacklang))

(rule
  (targets sqlgg_0_4_5-sql_parser_stripped.cmi
    sqlgg_0_4_5-sql_parser_stripped.mli.log)
  (deps sqlgg_0_4_5-sql_parser_stripped.mli)
  (action
    (with-stdout-to sqlgg_0_4_5-sql_parser_stripped.mli.dtimings
      (with-stderr-to sqlgg_0_4_5-sql_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          sqlgg_0_4_5-sql_parser_stripped.mli)))))

(rule
  (targets sqlgg_0_4_5-sql_parser_stripped.cmo
    sqlgg_0_4_5-sql_parser_stripped.ml.log)
  (deps sqlgg_0_4_5-sql_parser_stripped.ml
    sqlgg_0_4_5-sql_parser_stripped.cmi)
  (action
    (with-stdout-to sqlgg_0_4_5-sql_parser_stripped.ml.dtimings
      (with-stderr-to sqlgg_0_4_5-sql_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          sqlgg_0_4_5-sql_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff sqlgg_0_4_5-sql_parser_stripped.ml.log.exp
      sqlgg_0_4_5-sql_parser_stripped.ml.log)))

(rule (target squirrel.opp.out) (deps squirrel.mly)
  (action
    (with-outputs-to squirrel.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff squirrel.opp.exp squirrel.opp.out)))

(rule
  (targets squirrel.out squirrel.automaton squirrel.automaton.resolved
    squirrel.conflicts squirrel.timings)
  (deps squirrel.mly)
  (action
    (with-outputs-to squirrel.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to squirrel.timings %{deps})))))

(rule (alias quick) (action (diff squirrel.exp squirrel.out)))

(rule (alias quick)
  (action (diff squirrel.automaton.exp squirrel.automaton)))

(rule (alias quick)
  (action (diff squirrel.automaton.resolved.exp squirrel.automaton.resolved)))

(rule (alias quick)
  (action (diff squirrel.conflicts.exp squirrel.conflicts)))

(rule (target squirrel_stripped.mly) (deps squirrel.mly)
  (action
    (with-stderr-to squirrel_stripped.ignored
      (with-stdout-to squirrel_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets squirrel_stripped.log squirrel_stripped.mli squirrel_stripped.ml
    squirrel_stripped.stacklang squirrel_stripped.timings
    squirrel_stripped.scount squirrel_stripped.dcount)
  (deps squirrel_stripped.mly)
  (action
    (with-outputs-to squirrel_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to squirrel_stripped.timings %{deps})))))

(alias (name quick) (deps
                      squirrel_stripped.stacklang))

(rule (targets squirrel_stripped.cmi squirrel_stripped.mli.log)
  (deps squirrel_stripped.mli)
  (action
    (with-stdout-to squirrel_stripped.mli.dtimings
      (with-stderr-to squirrel_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c squirrel_stripped.mli)))))

(rule (targets squirrel_stripped.cmo squirrel_stripped.ml.log)
  (deps squirrel_stripped.ml squirrel_stripped.cmi)
  (action
    (with-stdout-to squirrel_stripped.ml.dtimings
      (with-stderr-to squirrel_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c squirrel_stripped.ml)))))

(rule (alias test)
  (action (diff squirrel_stripped.ml.log.exp squirrel_stripped.ml.log)))

(rule (target stanc3.opp.out) (deps stanc3.mly)
  (action
    (with-outputs-to stanc3.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff stanc3.opp.exp stanc3.opp.out)))

(rule
  (targets stanc3.out stanc3.automaton stanc3.automaton.resolved
    stanc3.conflicts stanc3.timings)
  (deps stanc3.mly)
  (action
    (with-outputs-to stanc3.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to stanc3.timings %{deps})))))

(rule (alias quick) (action (diff stanc3.exp stanc3.out)))

(rule (alias quick) (action (diff stanc3.automaton.exp stanc3.automaton)))

(rule (alias quick)
  (action (diff stanc3.automaton.resolved.exp stanc3.automaton.resolved)))

(rule (alias quick) (action (diff stanc3.conflicts.exp stanc3.conflicts)))

(rule (target stanc3_stripped.mly) (deps stanc3.mly)
  (action
    (with-stderr-to stanc3_stripped.ignored
      (with-stdout-to stanc3_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets stanc3_stripped.log stanc3_stripped.mli stanc3_stripped.ml
    stanc3_stripped.stacklang stanc3_stripped.timings stanc3_stripped.scount
    stanc3_stripped.dcount)
  (deps stanc3_stripped.mly)
  (action
    (with-outputs-to stanc3_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to stanc3_stripped.timings %{deps})))))

(alias (name quick) (deps
                      stanc3_stripped.stacklang))

(rule (targets stanc3_stripped.cmi stanc3_stripped.mli.log)
  (deps stanc3_stripped.mli)
  (action
    (with-stdout-to stanc3_stripped.mli.dtimings
      (with-stderr-to stanc3_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c stanc3_stripped.mli)))))

(rule (targets stanc3_stripped.cmo stanc3_stripped.ml.log)
  (deps stanc3_stripped.ml stanc3_stripped.cmi)
  (action
    (with-stdout-to stanc3_stripped.ml.dtimings
      (with-stderr-to stanc3_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c stanc3_stripped.ml)))))

(rule (alias test)
  (action (diff stanc3_stripped.ml.log.exp stanc3_stripped.ml.log)))

(rule (target statverif.1.97pl1.1-piparser.opp.out)
  (deps statverif.1.97pl1.1-piparser.mly)
  (action
    (with-outputs-to statverif.1.97pl1.1-piparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff statverif.1.97pl1.1-piparser.opp.exp
      statverif.1.97pl1.1-piparser.opp.out)))

(rule
  (targets statverif.1.97pl1.1-piparser.out
    statverif.1.97pl1.1-piparser.automaton
    statverif.1.97pl1.1-piparser.automaton.resolved
    statverif.1.97pl1.1-piparser.conflicts
    statverif.1.97pl1.1-piparser.timings)
  (deps statverif.1.97pl1.1-piparser.mly)
  (action
    (with-outputs-to statverif.1.97pl1.1-piparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to statverif.1.97pl1.1-piparser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff statverif.1.97pl1.1-piparser.exp statverif.1.97pl1.1-piparser.out)))

(rule (alias quick)
  (action
    (diff statverif.1.97pl1.1-piparser.automaton.exp
      statverif.1.97pl1.1-piparser.automaton)))

(rule (alias quick)
  (action
    (diff statverif.1.97pl1.1-piparser.automaton.resolved.exp
      statverif.1.97pl1.1-piparser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff statverif.1.97pl1.1-piparser.conflicts.exp
      statverif.1.97pl1.1-piparser.conflicts)))

(rule (target statverif_1_97pl1_1-piparser_stripped.mly)
  (deps statverif.1.97pl1.1-piparser.mly)
  (action
    (with-stderr-to statverif_1_97pl1_1-piparser_stripped.ignored
      (with-stdout-to statverif_1_97pl1_1-piparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets statverif_1_97pl1_1-piparser_stripped.log
    statverif_1_97pl1_1-piparser_stripped.mli
    statverif_1_97pl1_1-piparser_stripped.ml
    statverif_1_97pl1_1-piparser_stripped.stacklang
    statverif_1_97pl1_1-piparser_stripped.timings
    statverif_1_97pl1_1-piparser_stripped.scount
    statverif_1_97pl1_1-piparser_stripped.dcount)
  (deps statverif_1_97pl1_1-piparser_stripped.mly)
  (action
    (with-outputs-to statverif_1_97pl1_1-piparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to statverif_1_97pl1_1-piparser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      statverif_1_97pl1_1-piparser_stripped.stacklang))

(rule
  (targets statverif_1_97pl1_1-piparser_stripped.cmi
    statverif_1_97pl1_1-piparser_stripped.mli.log)
  (deps statverif_1_97pl1_1-piparser_stripped.mli)
  (action
    (with-stdout-to statverif_1_97pl1_1-piparser_stripped.mli.dtimings
      (with-stderr-to statverif_1_97pl1_1-piparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          statverif_1_97pl1_1-piparser_stripped.mli)))))

(rule
  (targets statverif_1_97pl1_1-piparser_stripped.cmo
    statverif_1_97pl1_1-piparser_stripped.ml.log)
  (deps statverif_1_97pl1_1-piparser_stripped.ml
    statverif_1_97pl1_1-piparser_stripped.cmi)
  (action
    (with-stdout-to statverif_1_97pl1_1-piparser_stripped.ml.dtimings
      (with-stderr-to statverif_1_97pl1_1-piparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          statverif_1_97pl1_1-piparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff statverif_1_97pl1_1-piparser_stripped.ml.log.exp
      statverif_1_97pl1_1-piparser_stripped.ml.log)))

(rule (target subiso.opp.out) (deps subiso.mly)
  (action
    (with-outputs-to subiso.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff subiso.opp.exp subiso.opp.out)))

(rule
  (targets subiso.out subiso.automaton subiso.automaton.resolved
    subiso.conflicts subiso.timings)
  (deps subiso.mly)
  (action
    (with-outputs-to subiso.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to subiso.timings %{deps})))))

(rule (alias quick) (action (diff subiso.exp subiso.out)))

(rule (alias quick) (action (diff subiso.automaton.exp subiso.automaton)))

(rule (alias quick)
  (action (diff subiso.automaton.resolved.exp subiso.automaton.resolved)))

(rule (alias quick) (action (diff subiso.conflicts.exp subiso.conflicts)))

(rule (target subiso_stripped.mly) (deps subiso.mly)
  (action
    (with-stderr-to subiso_stripped.ignored
      (with-stdout-to subiso_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets subiso_stripped.log subiso_stripped.mli subiso_stripped.ml
    subiso_stripped.stacklang subiso_stripped.timings subiso_stripped.scount
    subiso_stripped.dcount)
  (deps subiso_stripped.mly)
  (action
    (with-outputs-to subiso_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to subiso_stripped.timings %{deps})))))

(alias (name quick) (deps
                      subiso_stripped.stacklang))

(rule (targets subiso_stripped.cmi subiso_stripped.mli.log)
  (deps subiso_stripped.mli)
  (action
    (with-stdout-to subiso_stripped.mli.dtimings
      (with-stderr-to subiso_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c subiso_stripped.mli)))))

(rule (targets subiso_stripped.cmo subiso_stripped.ml.log)
  (deps subiso_stripped.ml subiso_stripped.cmi)
  (action
    (with-stdout-to subiso_stripped.ml.dtimings
      (with-stderr-to subiso_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c subiso_stripped.ml)))))

(rule (alias test)
  (action (diff subiso_stripped.ml.log.exp subiso_stripped.ml.log)))

(rule (target subtle-conflict-pager.opp.out) (deps subtle-conflict-pager.mly)
  (action
    (with-outputs-to subtle-conflict-pager.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff subtle-conflict-pager.opp.exp subtle-conflict-pager.opp.out)))

(rule
  (targets subtle-conflict-pager.out subtle-conflict-pager.automaton
    subtle-conflict-pager.automaton.resolved subtle-conflict-pager.conflicts
    subtle-conflict-pager.timings)
  (deps subtle-conflict-pager.mly)
  (action
    (with-outputs-to subtle-conflict-pager.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to subtle-conflict-pager.timings %{deps})))))

(rule (alias quick)
  (action (diff subtle-conflict-pager.exp subtle-conflict-pager.out)))

(rule (alias quick)
  (action
    (diff subtle-conflict-pager.automaton.exp
      subtle-conflict-pager.automaton)))

(rule (alias quick)
  (action
    (diff subtle-conflict-pager.automaton.resolved.exp
      subtle-conflict-pager.automaton.resolved)))

(rule (alias quick)
  (action
    (diff subtle-conflict-pager.conflicts.exp
      subtle-conflict-pager.conflicts)))

(rule (target subtle-conflict-pager_stripped.mly)
  (deps subtle-conflict-pager.mly)
  (action
    (with-stderr-to subtle-conflict-pager_stripped.ignored
      (with-stdout-to subtle-conflict-pager_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets subtle-conflict-pager_stripped.log
    subtle-conflict-pager_stripped.mli subtle-conflict-pager_stripped.ml
    subtle-conflict-pager_stripped.stacklang
    subtle-conflict-pager_stripped.timings
    subtle-conflict-pager_stripped.scount
    subtle-conflict-pager_stripped.dcount)
  (deps subtle-conflict-pager_stripped.mly)
  (action
    (with-outputs-to subtle-conflict-pager_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to subtle-conflict-pager_stripped.timings %{deps})))))

(alias (name quick) (deps
                      subtle-conflict-pager_stripped.stacklang))

(rule
  (targets subtle-conflict-pager_stripped.cmi
    subtle-conflict-pager_stripped.mli.log)
  (deps subtle-conflict-pager_stripped.mli)
  (action
    (with-stdout-to subtle-conflict-pager_stripped.mli.dtimings
      (with-stderr-to subtle-conflict-pager_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          subtle-conflict-pager_stripped.mli)))))

(rule
  (targets subtle-conflict-pager_stripped.cmo
    subtle-conflict-pager_stripped.ml.log)
  (deps subtle-conflict-pager_stripped.ml subtle-conflict-pager_stripped.cmi)
  (action
    (with-stdout-to subtle-conflict-pager_stripped.ml.dtimings
      (with-stderr-to subtle-conflict-pager_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          subtle-conflict-pager_stripped.ml)))))

(rule (alias test)
  (action
    (diff subtle-conflict-pager_stripped.ml.log.exp
      subtle-conflict-pager_stripped.ml.log)))

(rule (target swdogen.0.1.0-swgparser.opp.out)
  (deps swdogen.0.1.0-swgparser.mly)
  (action
    (with-outputs-to swdogen.0.1.0-swgparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff swdogen.0.1.0-swgparser.opp.exp swdogen.0.1.0-swgparser.opp.out)))

(rule
  (targets swdogen.0.1.0-swgparser.out swdogen.0.1.0-swgparser.automaton
    swdogen.0.1.0-swgparser.automaton.resolved
    swdogen.0.1.0-swgparser.conflicts swdogen.0.1.0-swgparser.timings)
  (deps swdogen.0.1.0-swgparser.mly)
  (action
    (with-outputs-to swdogen.0.1.0-swgparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to swdogen.0.1.0-swgparser.timings %{deps})))))

(rule (alias quick)
  (action (diff swdogen.0.1.0-swgparser.exp swdogen.0.1.0-swgparser.out)))

(rule (alias quick)
  (action
    (diff swdogen.0.1.0-swgparser.automaton.exp
      swdogen.0.1.0-swgparser.automaton)))

(rule (alias quick)
  (action
    (diff swdogen.0.1.0-swgparser.automaton.resolved.exp
      swdogen.0.1.0-swgparser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff swdogen.0.1.0-swgparser.conflicts.exp
      swdogen.0.1.0-swgparser.conflicts)))

(rule (target swdogen_0_1_0-swgparser_stripped.mly)
  (deps swdogen.0.1.0-swgparser.mly)
  (action
    (with-stderr-to swdogen_0_1_0-swgparser_stripped.ignored
      (with-stdout-to swdogen_0_1_0-swgparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets swdogen_0_1_0-swgparser_stripped.log
    swdogen_0_1_0-swgparser_stripped.mli swdogen_0_1_0-swgparser_stripped.ml
    swdogen_0_1_0-swgparser_stripped.stacklang
    swdogen_0_1_0-swgparser_stripped.timings
    swdogen_0_1_0-swgparser_stripped.scount
    swdogen_0_1_0-swgparser_stripped.dcount)
  (deps swdogen_0_1_0-swgparser_stripped.mly)
  (action
    (with-outputs-to swdogen_0_1_0-swgparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to swdogen_0_1_0-swgparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      swdogen_0_1_0-swgparser_stripped.stacklang))

(rule
  (targets swdogen_0_1_0-swgparser_stripped.cmi
    swdogen_0_1_0-swgparser_stripped.mli.log)
  (deps swdogen_0_1_0-swgparser_stripped.mli)
  (action
    (with-stdout-to swdogen_0_1_0-swgparser_stripped.mli.dtimings
      (with-stderr-to swdogen_0_1_0-swgparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          swdogen_0_1_0-swgparser_stripped.mli)))))

(rule
  (targets swdogen_0_1_0-swgparser_stripped.cmo
    swdogen_0_1_0-swgparser_stripped.ml.log)
  (deps swdogen_0_1_0-swgparser_stripped.ml
    swdogen_0_1_0-swgparser_stripped.cmi)
  (action
    (with-stdout-to swdogen_0_1_0-swgparser_stripped.ml.dtimings
      (with-stderr-to swdogen_0_1_0-swgparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          swdogen_0_1_0-swgparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff swdogen_0_1_0-swgparser_stripped.ml.log.exp
      swdogen_0_1_0-swgparser_stripped.ml.log)))

(rule (target symbolstartofs.opp.out) (deps symbolstartofs.mly)
  (action
    (with-outputs-to symbolstartofs.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff symbolstartofs.opp.exp symbolstartofs.opp.out)))

(rule
  (targets symbolstartofs.out symbolstartofs.automaton
    symbolstartofs.automaton.resolved symbolstartofs.conflicts
    symbolstartofs.timings)
  (deps symbolstartofs.mly)
  (action
    (with-outputs-to symbolstartofs.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to symbolstartofs.timings %{deps})))))

(rule (alias quick) (action (diff symbolstartofs.exp symbolstartofs.out)))

(rule (alias quick)
  (action (diff symbolstartofs.automaton.exp symbolstartofs.automaton)))

(rule (alias quick)
  (action
    (diff symbolstartofs.automaton.resolved.exp
      symbolstartofs.automaton.resolved)))

(rule (alias quick)
  (action (diff symbolstartofs.conflicts.exp symbolstartofs.conflicts)))

(rule (target symbolstartofs_stripped.mly) (deps symbolstartofs.mly)
  (action
    (with-stderr-to symbolstartofs_stripped.ignored
      (with-stdout-to symbolstartofs_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets symbolstartofs_stripped.log symbolstartofs_stripped.mli
    symbolstartofs_stripped.ml symbolstartofs_stripped.stacklang
    symbolstartofs_stripped.timings symbolstartofs_stripped.scount
    symbolstartofs_stripped.dcount)
  (deps symbolstartofs_stripped.mly)
  (action
    (with-outputs-to symbolstartofs_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to symbolstartofs_stripped.timings %{deps})))))

(alias (name quick) (deps
                      symbolstartofs_stripped.stacklang))

(rule (targets symbolstartofs_stripped.cmi symbolstartofs_stripped.mli.log)
  (deps symbolstartofs_stripped.mli)
  (action
    (with-stdout-to symbolstartofs_stripped.mli.dtimings
      (with-stderr-to symbolstartofs_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c symbolstartofs_stripped.mli)))))

(rule (targets symbolstartofs_stripped.cmo symbolstartofs_stripped.ml.log)
  (deps symbolstartofs_stripped.ml symbolstartofs_stripped.cmi)
  (action
    (with-stdout-to symbolstartofs_stripped.ml.dtimings
      (with-stderr-to symbolstartofs_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c symbolstartofs_stripped.ml)))))

(rule (alias test)
  (action
    (diff symbolstartofs_stripped.ml.log.exp symbolstartofs_stripped.ml.log)))

(rule (target symbolstartpos.opp.out) (deps symbolstartpos.mly)
  (action
    (with-outputs-to symbolstartpos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff symbolstartpos.opp.exp symbolstartpos.opp.out)))

(rule
  (targets symbolstartpos.out symbolstartpos.automaton
    symbolstartpos.automaton.resolved symbolstartpos.conflicts
    symbolstartpos.timings)
  (deps symbolstartpos.mly)
  (action
    (with-outputs-to symbolstartpos.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to symbolstartpos.timings %{deps})))))

(rule (alias quick) (action (diff symbolstartpos.exp symbolstartpos.out)))

(rule (alias quick)
  (action (diff symbolstartpos.automaton.exp symbolstartpos.automaton)))

(rule (alias quick)
  (action
    (diff symbolstartpos.automaton.resolved.exp
      symbolstartpos.automaton.resolved)))

(rule (alias quick)
  (action (diff symbolstartpos.conflicts.exp symbolstartpos.conflicts)))

(rule (target symbolstartpos_stripped.mly) (deps symbolstartpos.mly)
  (action
    (with-stderr-to symbolstartpos_stripped.ignored
      (with-stdout-to symbolstartpos_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets symbolstartpos_stripped.log symbolstartpos_stripped.mli
    symbolstartpos_stripped.ml symbolstartpos_stripped.stacklang
    symbolstartpos_stripped.timings symbolstartpos_stripped.scount
    symbolstartpos_stripped.dcount)
  (deps symbolstartpos_stripped.mly)
  (action
    (with-outputs-to symbolstartpos_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to symbolstartpos_stripped.timings %{deps})))))

(alias (name quick) (deps
                      symbolstartpos_stripped.stacklang))

(rule (targets symbolstartpos_stripped.cmi symbolstartpos_stripped.mli.log)
  (deps symbolstartpos_stripped.mli)
  (action
    (with-stdout-to symbolstartpos_stripped.mli.dtimings
      (with-stderr-to symbolstartpos_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c symbolstartpos_stripped.mli)))))

(rule (targets symbolstartpos_stripped.cmo symbolstartpos_stripped.ml.log)
  (deps symbolstartpos_stripped.ml symbolstartpos_stripped.cmi)
  (action
    (with-stdout-to symbolstartpos_stripped.ml.dtimings
      (with-stderr-to symbolstartpos_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c symbolstartpos_stripped.ml)))))

(rule (alias test)
  (action
    (diff symbolstartpos_stripped.ml.log.exp symbolstartpos_stripped.ml.log)))

(rule (target sysver.opp.out) (deps sysver.mly)
  (action
    (with-outputs-to sysver.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff sysver.opp.exp sysver.opp.out)))

(rule
  (targets sysver.out sysver.automaton sysver.automaton.resolved
    sysver.conflicts sysver.timings)
  (deps sysver.mly)
  (action
    (with-outputs-to sysver.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to sysver.timings %{deps})))))

(rule (alias quick) (action (diff sysver.exp sysver.out)))

(rule (alias quick) (action (diff sysver.automaton.exp sysver.automaton)))

(rule (alias quick)
  (action (diff sysver.automaton.resolved.exp sysver.automaton.resolved)))

(rule (alias quick) (action (diff sysver.conflicts.exp sysver.conflicts)))

(rule (target talparser.opp.out) (deps talparser.mly)
  (action
    (with-outputs-to talparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff talparser.opp.exp talparser.opp.out)))

(rule
  (targets talparser.out talparser.automaton talparser.automaton.resolved
    talparser.conflicts talparser.timings)
  (deps talparser.mly)
  (action
    (with-outputs-to talparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to talparser.timings %{deps})))))

(rule (alias quick) (action (diff talparser.exp talparser.out)))

(rule (alias quick)
  (action (diff talparser.automaton.exp talparser.automaton)))

(rule (alias quick)
  (action
    (diff talparser.automaton.resolved.exp talparser.automaton.resolved)))

(rule (alias quick)
  (action (diff talparser.conflicts.exp talparser.conflicts)))

(rule (target talparser_stripped.mly) (deps talparser.mly)
  (action
    (with-stderr-to talparser_stripped.ignored
      (with-stdout-to talparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets talparser_stripped.log talparser_stripped.mli
    talparser_stripped.ml talparser_stripped.stacklang
    talparser_stripped.timings talparser_stripped.scount
    talparser_stripped.dcount)
  (deps talparser_stripped.mly)
  (action
    (with-outputs-to talparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to talparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      talparser_stripped.stacklang))

(rule (targets talparser_stripped.cmi talparser_stripped.mli.log)
  (deps talparser_stripped.mli)
  (action
    (with-stdout-to talparser_stripped.mli.dtimings
      (with-stderr-to talparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c talparser_stripped.mli)))))

(rule (targets talparser_stripped.cmo talparser_stripped.ml.log)
  (deps talparser_stripped.ml talparser_stripped.cmi)
  (action
    (with-stdout-to talparser_stripped.ml.dtimings
      (with-stderr-to talparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c talparser_stripped.ml)))))

(rule (alias test)
  (action (diff talparser_stripped.ml.log.exp talparser_stripped.ml.log)))

(rule (target tilde-used-warning.opp.out) (deps tilde-used-warning.mly)
  (action
    (with-outputs-to tilde-used-warning.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff tilde-used-warning.opp.exp tilde-used-warning.opp.out)))

(rule
  (targets tilde-used-warning.out tilde-used-warning.automaton
    tilde-used-warning.automaton.resolved tilde-used-warning.conflicts
    tilde-used-warning.timings)
  (deps tilde-used-warning.mly)
  (action
    (with-outputs-to tilde-used-warning.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to tilde-used-warning.timings %{deps})))))

(rule (alias quick)
  (action (diff tilde-used-warning.exp tilde-used-warning.out)))

(rule (alias quick)
  (action
    (diff tilde-used-warning.automaton.exp tilde-used-warning.automaton)))

(rule (alias quick)
  (action
    (diff tilde-used-warning.automaton.resolved.exp
      tilde-used-warning.automaton.resolved)))

(rule (alias quick)
  (action
    (diff tilde-used-warning.conflicts.exp tilde-used-warning.conflicts)))

(rule (target tilde-used-warning_stripped.mly) (deps tilde-used-warning.mly)
  (action
    (with-stderr-to tilde-used-warning_stripped.ignored
      (with-stdout-to tilde-used-warning_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets tilde-used-warning_stripped.log tilde-used-warning_stripped.mli
    tilde-used-warning_stripped.ml tilde-used-warning_stripped.stacklang
    tilde-used-warning_stripped.timings tilde-used-warning_stripped.scount
    tilde-used-warning_stripped.dcount)
  (deps tilde-used-warning_stripped.mly)
  (action
    (with-outputs-to tilde-used-warning_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to tilde-used-warning_stripped.timings %{deps})))))

(alias (name quick) (deps
                      tilde-used-warning_stripped.stacklang))

(rule
  (targets tilde-used-warning_stripped.cmi
    tilde-used-warning_stripped.mli.log)
  (deps tilde-used-warning_stripped.mli)
  (action
    (with-stdout-to tilde-used-warning_stripped.mli.dtimings
      (with-stderr-to tilde-used-warning_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c tilde-used-warning_stripped.mli)))))

(rule
  (targets tilde-used-warning_stripped.cmo
    tilde-used-warning_stripped.ml.log)
  (deps tilde-used-warning_stripped.ml tilde-used-warning_stripped.cmi)
  (action
    (with-stdout-to tilde-used-warning_stripped.ml.dtimings
      (with-stderr-to tilde-used-warning_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c tilde-used-warning_stripped.ml)))))

(rule (alias test)
  (action
    (diff tilde-used-warning_stripped.ml.log.exp
      tilde-used-warning_stripped.ml.log)))

(rule (target toml_parser.opp.out) (deps toml_parser.mly)
  (action
    (with-outputs-to toml_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff toml_parser.opp.exp toml_parser.opp.out)))

(rule
  (targets toml_parser.out toml_parser.automaton
    toml_parser.automaton.resolved toml_parser.conflicts toml_parser.timings)
  (deps toml_parser.mly)
  (action
    (with-outputs-to toml_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to toml_parser.timings %{deps})))))

(rule (alias quick) (action (diff toml_parser.exp toml_parser.out)))

(rule (alias quick)
  (action (diff toml_parser.automaton.exp toml_parser.automaton)))

(rule (alias quick)
  (action
    (diff toml_parser.automaton.resolved.exp toml_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff toml_parser.conflicts.exp toml_parser.conflicts)))

(rule (target toml_parser_stripped.mly) (deps toml_parser.mly)
  (action
    (with-stderr-to toml_parser_stripped.ignored
      (with-stdout-to toml_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets toml_parser_stripped.log toml_parser_stripped.mli
    toml_parser_stripped.ml toml_parser_stripped.stacklang
    toml_parser_stripped.timings toml_parser_stripped.scount
    toml_parser_stripped.dcount)
  (deps toml_parser_stripped.mly)
  (action
    (with-outputs-to toml_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to toml_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      toml_parser_stripped.stacklang))

(rule (targets toml_parser_stripped.cmi toml_parser_stripped.mli.log)
  (deps toml_parser_stripped.mli)
  (action
    (with-stdout-to toml_parser_stripped.mli.dtimings
      (with-stderr-to toml_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c toml_parser_stripped.mli)))))

(rule (targets toml_parser_stripped.cmo toml_parser_stripped.ml.log)
  (deps toml_parser_stripped.ml toml_parser_stripped.cmi)
  (action
    (with-stdout-to toml_parser_stripped.ml.dtimings
      (with-stderr-to toml_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c toml_parser_stripped.ml)))))

(rule (alias test)
  (action (diff toml_parser_stripped.ml.log.exp toml_parser_stripped.ml.log)))

(rule (target tony-rc_parse.opp.out) (deps tony-rc_parse.mly)
  (action
    (with-outputs-to tony-rc_parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff tony-rc_parse.opp.exp tony-rc_parse.opp.out)))

(rule
  (targets tony-rc_parse.out tony-rc_parse.automaton
    tony-rc_parse.automaton.resolved tony-rc_parse.conflicts
    tony-rc_parse.timings)
  (deps tony-rc_parse.mly)
  (action
    (with-outputs-to tony-rc_parse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to tony-rc_parse.timings %{deps})))))

(rule (alias quick) (action (diff tony-rc_parse.exp tony-rc_parse.out)))

(rule (alias quick)
  (action (diff tony-rc_parse.automaton.exp tony-rc_parse.automaton)))

(rule (alias quick)
  (action
    (diff tony-rc_parse.automaton.resolved.exp
      tony-rc_parse.automaton.resolved)))

(rule (alias quick)
  (action (diff tony-rc_parse.conflicts.exp tony-rc_parse.conflicts)))

(rule (target tony-rc_parse_stripped.mly) (deps tony-rc_parse.mly)
  (action
    (with-stderr-to tony-rc_parse_stripped.ignored
      (with-stdout-to tony-rc_parse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets tony-rc_parse_stripped.log tony-rc_parse_stripped.mli
    tony-rc_parse_stripped.ml tony-rc_parse_stripped.stacklang
    tony-rc_parse_stripped.timings tony-rc_parse_stripped.scount
    tony-rc_parse_stripped.dcount)
  (deps tony-rc_parse_stripped.mly)
  (action
    (with-outputs-to tony-rc_parse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to tony-rc_parse_stripped.timings %{deps})))))

(alias (name quick) (deps
                      tony-rc_parse_stripped.stacklang))

(rule (targets tony-rc_parse_stripped.cmi tony-rc_parse_stripped.mli.log)
  (deps tony-rc_parse_stripped.mli)
  (action
    (with-stdout-to tony-rc_parse_stripped.mli.dtimings
      (with-stderr-to tony-rc_parse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c tony-rc_parse_stripped.mli)))))

(rule (targets tony-rc_parse_stripped.cmo tony-rc_parse_stripped.ml.log)
  (deps tony-rc_parse_stripped.ml tony-rc_parse_stripped.cmi)
  (action
    (with-stdout-to tony-rc_parse_stripped.ml.dtimings
      (with-stderr-to tony-rc_parse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c tony-rc_parse_stripped.ml)))))

(rule (alias test)
  (action
    (diff tony-rc_parse_stripped.ml.log.exp tony-rc_parse_stripped.ml.log)))

(rule (target tony-xmlparse.opp.out) (deps tony-xmlparse.mly)
  (action
    (with-outputs-to tony-xmlparse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff tony-xmlparse.opp.exp tony-xmlparse.opp.out)))

(rule
  (targets tony-xmlparse.out tony-xmlparse.automaton
    tony-xmlparse.automaton.resolved tony-xmlparse.conflicts
    tony-xmlparse.timings)
  (deps tony-xmlparse.mly)
  (action
    (with-outputs-to tony-xmlparse.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to tony-xmlparse.timings %{deps})))))

(rule (alias quick) (action (diff tony-xmlparse.exp tony-xmlparse.out)))

(rule (alias quick)
  (action (diff tony-xmlparse.automaton.exp tony-xmlparse.automaton)))

(rule (alias quick)
  (action
    (diff tony-xmlparse.automaton.resolved.exp
      tony-xmlparse.automaton.resolved)))

(rule (alias quick)
  (action (diff tony-xmlparse.conflicts.exp tony-xmlparse.conflicts)))

(rule (target tony-xmlparse_stripped.mly) (deps tony-xmlparse.mly)
  (action
    (with-stderr-to tony-xmlparse_stripped.ignored
      (with-stdout-to tony-xmlparse_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets tony-xmlparse_stripped.log tony-xmlparse_stripped.mli
    tony-xmlparse_stripped.ml tony-xmlparse_stripped.stacklang
    tony-xmlparse_stripped.timings tony-xmlparse_stripped.scount
    tony-xmlparse_stripped.dcount)
  (deps tony-xmlparse_stripped.mly)
  (action
    (with-outputs-to tony-xmlparse_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to tony-xmlparse_stripped.timings %{deps})))))

(alias (name quick) (deps
                      tony-xmlparse_stripped.stacklang))

(rule (targets tony-xmlparse_stripped.cmi tony-xmlparse_stripped.mli.log)
  (deps tony-xmlparse_stripped.mli)
  (action
    (with-stdout-to tony-xmlparse_stripped.mli.dtimings
      (with-stderr-to tony-xmlparse_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c tony-xmlparse_stripped.mli)))))

(rule (targets tony-xmlparse_stripped.cmo tony-xmlparse_stripped.ml.log)
  (deps tony-xmlparse_stripped.ml tony-xmlparse_stripped.cmi)
  (action
    (with-stdout-to tony-xmlparse_stripped.ml.dtimings
      (with-stderr-to tony-xmlparse_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c tony-xmlparse_stripped.ml)))))

(rule (alias test)
  (action
    (diff tony-xmlparse_stripped.ml.log.exp tony-xmlparse_stripped.ml.log)))

(rule (target touist.3.5.0-parser.opp.out) (deps touist.3.5.0-parser.mly)
  (action
    (with-outputs-to touist.3.5.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff touist.3.5.0-parser.opp.exp touist.3.5.0-parser.opp.out)))

(rule
  (targets touist.3.5.0-parser.out touist.3.5.0-parser.automaton
    touist.3.5.0-parser.automaton.resolved touist.3.5.0-parser.conflicts
    touist.3.5.0-parser.timings)
  (deps touist.3.5.0-parser.mly)
  (action
    (with-outputs-to touist.3.5.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to touist.3.5.0-parser.timings %{deps})))))

(rule (alias quick)
  (action (diff touist.3.5.0-parser.exp touist.3.5.0-parser.out)))

(rule (alias quick)
  (action
    (diff touist.3.5.0-parser.automaton.exp touist.3.5.0-parser.automaton)))

(rule (alias quick)
  (action
    (diff touist.3.5.0-parser.automaton.resolved.exp
      touist.3.5.0-parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff touist.3.5.0-parser.conflicts.exp touist.3.5.0-parser.conflicts)))

(rule (target touist_3_5_0-parser_stripped.mly)
  (deps touist.3.5.0-parser.mly)
  (action
    (with-stderr-to touist_3_5_0-parser_stripped.ignored
      (with-stdout-to touist_3_5_0-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets touist_3_5_0-parser_stripped.log touist_3_5_0-parser_stripped.mli
    touist_3_5_0-parser_stripped.ml touist_3_5_0-parser_stripped.stacklang
    touist_3_5_0-parser_stripped.timings touist_3_5_0-parser_stripped.scount
    touist_3_5_0-parser_stripped.dcount)
  (deps touist_3_5_0-parser_stripped.mly)
  (action
    (with-outputs-to touist_3_5_0-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to touist_3_5_0-parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      touist_3_5_0-parser_stripped.stacklang))

(rule
  (targets touist_3_5_0-parser_stripped.cmi
    touist_3_5_0-parser_stripped.mli.log)
  (deps touist_3_5_0-parser_stripped.mli)
  (action
    (with-stdout-to touist_3_5_0-parser_stripped.mli.dtimings
      (with-stderr-to touist_3_5_0-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          touist_3_5_0-parser_stripped.mli)))))

(rule
  (targets touist_3_5_0-parser_stripped.cmo
    touist_3_5_0-parser_stripped.ml.log)
  (deps touist_3_5_0-parser_stripped.ml touist_3_5_0-parser_stripped.cmi)
  (action
    (with-stdout-to touist_3_5_0-parser_stripped.ml.dtimings
      (with-stderr-to touist_3_5_0-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c touist_3_5_0-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff touist_3_5_0-parser_stripped.ml.log.exp
      touist_3_5_0-parser_stripped.ml.log)))

(rule (target toy.opp.out) (deps toy.mly)
  (action
    (with-outputs-to toy.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff toy.opp.exp toy.opp.out)))

(rule
  (targets toy.out toy.automaton toy.automaton.resolved toy.conflicts
    toy.timings)
  (deps toy.mly)
  (action
    (with-outputs-to toy.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to toy.timings %{deps})))))

(rule (alias quick) (action (diff toy.exp toy.out)))

(rule (alias quick) (action (diff toy.automaton.exp toy.automaton)))

(rule (alias quick)
  (action (diff toy.automaton.resolved.exp toy.automaton.resolved)))

(rule (alias quick) (action (diff toy.conflicts.exp toy.conflicts)))

(rule (target toy_stripped.mly) (deps toy.mly)
  (action
    (with-stderr-to toy_stripped.ignored
      (with-stdout-to toy_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets toy_stripped.log toy_stripped.mli toy_stripped.ml
    toy_stripped.stacklang toy_stripped.timings toy_stripped.scount
    toy_stripped.dcount)
  (deps toy_stripped.mly)
  (action
    (with-outputs-to toy_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to toy_stripped.timings %{deps})))))

(alias (name quick) (deps
                      toy_stripped.stacklang))

(rule (targets toy_stripped.cmi toy_stripped.mli.log) (deps toy_stripped.mli)
  (action
    (with-stdout-to toy_stripped.mli.dtimings
      (with-stderr-to toy_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c toy_stripped.mli)))))

(rule (targets toy_stripped.cmo toy_stripped.ml.log)
  (deps toy_stripped.ml toy_stripped.cmi)
  (action
    (with-stdout-to toy_stripped.ml.dtimings
      (with-stderr-to toy_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c toy_stripped.ml)))))

(rule (alias test)
  (action (diff toy_stripped.ml.log.exp toy_stripped.ml.log)))

(rule (target tptp2cime.opp.out) (deps tptp2cime.mly)
  (action
    (with-outputs-to tptp2cime.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff tptp2cime.opp.exp tptp2cime.opp.out)))

(rule
  (targets tptp2cime.out tptp2cime.automaton tptp2cime.automaton.resolved
    tptp2cime.conflicts tptp2cime.timings)
  (deps tptp2cime.mly)
  (action
    (with-outputs-to tptp2cime.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to tptp2cime.timings %{deps})))))

(rule (alias quick) (action (diff tptp2cime.exp tptp2cime.out)))

(rule (alias quick)
  (action (diff tptp2cime.automaton.exp tptp2cime.automaton)))

(rule (alias quick)
  (action
    (diff tptp2cime.automaton.resolved.exp tptp2cime.automaton.resolved)))

(rule (alias quick)
  (action (diff tptp2cime.conflicts.exp tptp2cime.conflicts)))

(rule (target tptp2cime_stripped.mly) (deps tptp2cime.mly)
  (action
    (with-stderr-to tptp2cime_stripped.ignored
      (with-stdout-to tptp2cime_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets tptp2cime_stripped.log tptp2cime_stripped.mli
    tptp2cime_stripped.ml tptp2cime_stripped.stacklang
    tptp2cime_stripped.timings tptp2cime_stripped.scount
    tptp2cime_stripped.dcount)
  (deps tptp2cime_stripped.mly)
  (action
    (with-outputs-to tptp2cime_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to tptp2cime_stripped.timings %{deps})))))

(alias (name quick) (deps
                      tptp2cime_stripped.stacklang))

(rule (targets tptp2cime_stripped.cmi tptp2cime_stripped.mli.log)
  (deps tptp2cime_stripped.mli)
  (action
    (with-stdout-to tptp2cime_stripped.mli.dtimings
      (with-stderr-to tptp2cime_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c tptp2cime_stripped.mli)))))

(rule (targets tptp2cime_stripped.cmo tptp2cime_stripped.ml.log)
  (deps tptp2cime_stripped.ml tptp2cime_stripped.cmi)
  (action
    (with-stdout-to tptp2cime_stripped.ml.dtimings
      (with-stderr-to tptp2cime_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c tptp2cime_stripped.ml)))))

(rule (alias test)
  (action (diff tptp2cime_stripped.ml.log.exp tptp2cime_stripped.ml.log)))

(rule (target typage.opp.out) (deps typage.mly)
  (action
    (with-outputs-to typage.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff typage.opp.exp typage.opp.out)))

(rule
  (targets typage.out typage.automaton typage.automaton.resolved
    typage.conflicts typage.timings)
  (deps typage.mly)
  (action
    (with-outputs-to typage.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to typage.timings %{deps})))))

(rule (alias quick) (action (diff typage.exp typage.out)))

(rule (alias quick) (action (diff typage.automaton.exp typage.automaton)))

(rule (alias quick)
  (action (diff typage.automaton.resolved.exp typage.automaton.resolved)))

(rule (alias quick) (action (diff typage.conflicts.exp typage.conflicts)))

(rule (target typage_stripped.mly) (deps typage.mly)
  (action
    (with-stderr-to typage_stripped.ignored
      (with-stdout-to typage_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets typage_stripped.log typage_stripped.mli typage_stripped.ml
    typage_stripped.stacklang typage_stripped.timings typage_stripped.scount
    typage_stripped.dcount)
  (deps typage_stripped.mly)
  (action
    (with-outputs-to typage_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to typage_stripped.timings %{deps})))))

(alias (name quick) (deps
                      typage_stripped.stacklang))

(rule (targets typage_stripped.cmi typage_stripped.mli.log)
  (deps typage_stripped.mli)
  (action
    (with-stdout-to typage_stripped.mli.dtimings
      (with-stderr-to typage_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c typage_stripped.mli)))))

(rule (targets typage_stripped.cmo typage_stripped.ml.log)
  (deps typage_stripped.ml typage_stripped.cmi)
  (action
    (with-stdout-to typage_stripped.ml.dtimings
      (with-stderr-to typage_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c typage_stripped.ml)))))

(rule (alias test)
  (action (diff typage_stripped.ml.log.exp typage_stripped.ml.log)))

(rule (target typed-freshml.opp.out) (deps typed-freshml.mly)
  (action
    (with-outputs-to typed-freshml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff typed-freshml.opp.exp typed-freshml.opp.out)))

(rule
  (targets typed-freshml.out typed-freshml.automaton
    typed-freshml.automaton.resolved typed-freshml.conflicts
    typed-freshml.timings)
  (deps typed-freshml.mly)
  (action
    (with-outputs-to typed-freshml.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to typed-freshml.timings %{deps})))))

(rule (alias quick) (action (diff typed-freshml.exp typed-freshml.out)))

(rule (alias quick)
  (action (diff typed-freshml.automaton.exp typed-freshml.automaton)))

(rule (alias quick)
  (action
    (diff typed-freshml.automaton.resolved.exp
      typed-freshml.automaton.resolved)))

(rule (alias quick)
  (action (diff typed-freshml.conflicts.exp typed-freshml.conflicts)))

(rule (target typed-freshml_stripped.mly) (deps typed-freshml.mly)
  (action
    (with-stderr-to typed-freshml_stripped.ignored
      (with-stdout-to typed-freshml_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets typed-freshml_stripped.log typed-freshml_stripped.mli
    typed-freshml_stripped.ml typed-freshml_stripped.stacklang
    typed-freshml_stripped.timings typed-freshml_stripped.scount
    typed-freshml_stripped.dcount)
  (deps typed-freshml_stripped.mly)
  (action
    (with-outputs-to typed-freshml_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to typed-freshml_stripped.timings %{deps})))))

(alias (name quick) (deps
                      typed-freshml_stripped.stacklang))

(rule (targets typed-freshml_stripped.cmi typed-freshml_stripped.mli.log)
  (deps typed-freshml_stripped.mli)
  (action
    (with-stdout-to typed-freshml_stripped.mli.dtimings
      (with-stderr-to typed-freshml_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c typed-freshml_stripped.mli)))))

(rule (targets typed-freshml_stripped.cmo typed-freshml_stripped.ml.log)
  (deps typed-freshml_stripped.ml typed-freshml_stripped.cmi)
  (action
    (with-stdout-to typed-freshml_stripped.ml.dtimings
      (with-stderr-to typed-freshml_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c typed-freshml_stripped.ml)))))

(rule (alias test)
  (action
    (diff typed-freshml_stripped.ml.log.exp typed-freshml_stripped.ml.log)))

(rule (target undetermined_sort.opp.out) (deps undetermined_sort.mly)
  (action
    (with-outputs-to undetermined_sort.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:undetermined_sort.flags}
          %{deps})))))

(rule (alias quick)
  (action (diff undetermined_sort.opp.exp undetermined_sort.opp.out)))

(rule
  (targets undetermined_sort.out undetermined_sort.automaton
    undetermined_sort.automaton.resolved undetermined_sort.conflicts
    undetermined_sort.timings)
  (deps undetermined_sort.mly)
  (action
    (with-outputs-to undetermined_sort.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to undetermined_sort.timings
          %{read-lines:undetermined_sort.flags} %{deps})))))

(rule (alias quick)
  (action (diff undetermined_sort.exp undetermined_sort.out)))

(rule (alias quick)
  (action (diff undetermined_sort.automaton.exp undetermined_sort.automaton)))

(rule (alias quick)
  (action
    (diff undetermined_sort.automaton.resolved.exp
      undetermined_sort.automaton.resolved)))

(rule (alias quick)
  (action (diff undetermined_sort.conflicts.exp undetermined_sort.conflicts)))

(rule (target undetermined_sort_stripped.mly) (deps undetermined_sort.mly)
  (action
    (with-stderr-to undetermined_sort_stripped.ignored
      (with-stdout-to undetermined_sort_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu
            %{read-lines:undetermined_sort.flags} %{deps}))))))

(rule
  (targets undetermined_sort_stripped.log undetermined_sort_stripped.mli
    undetermined_sort_stripped.ml undetermined_sort_stripped.stacklang
    undetermined_sort_stripped.timings undetermined_sort_stripped.scount
    undetermined_sort_stripped.dcount)
  (deps undetermined_sort_stripped.mly)
  (action
    (with-outputs-to undetermined_sort_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to undetermined_sort_stripped.timings
          %{read-lines:undetermined_sort.flags} %{deps})))))

(alias (name quick) (deps
                      undetermined_sort_stripped.stacklang))

(rule
  (targets undetermined_sort_stripped.cmi undetermined_sort_stripped.mli.log)
  (deps undetermined_sort_stripped.mli)
  (action
    (with-stdout-to undetermined_sort_stripped.mli.dtimings
      (with-stderr-to undetermined_sort_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c undetermined_sort_stripped.mli)))))

(rule
  (targets undetermined_sort_stripped.cmo undetermined_sort_stripped.ml.log)
  (deps undetermined_sort_stripped.ml undetermined_sort_stripped.cmi)
  (action
    (with-stdout-to undetermined_sort_stripped.ml.dtimings
      (with-stderr-to undetermined_sort_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c undetermined_sort_stripped.ml)))))

(rule (alias test)
  (action
    (diff undetermined_sort_stripped.ml.log.exp
      undetermined_sort_stripped.ml.log)))

(rule (target unigram.opp.out) (deps unigram.mly)
  (action
    (with-outputs-to unigram.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff unigram.opp.exp unigram.opp.out)))

(rule
  (targets unigram.out unigram.automaton unigram.automaton.resolved
    unigram.conflicts unigram.timings)
  (deps unigram.mly)
  (action
    (with-outputs-to unigram.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to unigram.timings %{deps})))))

(rule (alias quick) (action (diff unigram.exp unigram.out)))

(rule (alias quick) (action (diff unigram.automaton.exp unigram.automaton)))

(rule (alias quick)
  (action (diff unigram.automaton.resolved.exp unigram.automaton.resolved)))

(rule (alias quick) (action (diff unigram.conflicts.exp unigram.conflicts)))

(rule (target unigram_stripped.mly) (deps unigram.mly)
  (action
    (with-stderr-to unigram_stripped.ignored
      (with-stdout-to unigram_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets unigram_stripped.log unigram_stripped.mli unigram_stripped.ml
    unigram_stripped.stacklang unigram_stripped.timings
    unigram_stripped.scount unigram_stripped.dcount)
  (deps unigram_stripped.mly)
  (action
    (with-outputs-to unigram_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to unigram_stripped.timings %{deps})))))

(alias (name quick) (deps
                      unigram_stripped.stacklang))

(rule (targets unigram_stripped.cmi unigram_stripped.mli.log)
  (deps unigram_stripped.mli)
  (action
    (with-stdout-to unigram_stripped.mli.dtimings
      (with-stderr-to unigram_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c unigram_stripped.mli)))))

(rule (targets unigram_stripped.cmo unigram_stripped.ml.log)
  (deps unigram_stripped.ml unigram_stripped.cmi)
  (action
    (with-stdout-to unigram_stripped.ml.dtimings
      (with-stderr-to unigram_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c unigram_stripped.ml)))))

(rule (alias test)
  (action (diff unigram_stripped.ml.log.exp unigram_stripped.ml.log)))

(rule (target unit-new-syntax.opp.out) (deps unit-new-syntax.mly)
  (action
    (with-outputs-to unit-new-syntax.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff unit-new-syntax.opp.exp unit-new-syntax.opp.out)))

(rule
  (targets unit-new-syntax.out unit-new-syntax.automaton
    unit-new-syntax.automaton.resolved unit-new-syntax.conflicts
    unit-new-syntax.timings)
  (deps unit-new-syntax.mly)
  (action
    (with-outputs-to unit-new-syntax.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to unit-new-syntax.timings %{deps})))))

(rule (alias quick) (action (diff unit-new-syntax.exp unit-new-syntax.out)))

(rule (alias quick)
  (action (diff unit-new-syntax.automaton.exp unit-new-syntax.automaton)))

(rule (alias quick)
  (action
    (diff unit-new-syntax.automaton.resolved.exp
      unit-new-syntax.automaton.resolved)))

(rule (alias quick)
  (action (diff unit-new-syntax.conflicts.exp unit-new-syntax.conflicts)))

(rule (target unit-new-syntax_stripped.mly) (deps unit-new-syntax.mly)
  (action
    (with-stderr-to unit-new-syntax_stripped.ignored
      (with-stdout-to unit-new-syntax_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets unit-new-syntax_stripped.log unit-new-syntax_stripped.mli
    unit-new-syntax_stripped.ml unit-new-syntax_stripped.stacklang
    unit-new-syntax_stripped.timings unit-new-syntax_stripped.scount
    unit-new-syntax_stripped.dcount)
  (deps unit-new-syntax_stripped.mly)
  (action
    (with-outputs-to unit-new-syntax_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to unit-new-syntax_stripped.timings %{deps})))))

(alias (name quick) (deps
                      unit-new-syntax_stripped.stacklang))

(rule (targets unit-new-syntax_stripped.cmi unit-new-syntax_stripped.mli.log)
  (deps unit-new-syntax_stripped.mli)
  (action
    (with-stdout-to unit-new-syntax_stripped.mli.dtimings
      (with-stderr-to unit-new-syntax_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c unit-new-syntax_stripped.mli)))))

(rule (targets unit-new-syntax_stripped.cmo unit-new-syntax_stripped.ml.log)
  (deps unit-new-syntax_stripped.ml unit-new-syntax_stripped.cmi)
  (action
    (with-stdout-to unit-new-syntax_stripped.ml.dtimings
      (with-stderr-to unit-new-syntax_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c unit-new-syntax_stripped.ml)))))

(rule (alias test)
  (action
    (diff unit-new-syntax_stripped.ml.log.exp
      unit-new-syntax_stripped.ml.log)))

(rule (target unreachable-symbol.opp.out) (deps unreachable-symbol.mly)
  (action
    (with-outputs-to unreachable-symbol.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff unreachable-symbol.opp.exp unreachable-symbol.opp.out)))

(rule
  (targets unreachable-symbol.out unreachable-symbol.automaton
    unreachable-symbol.automaton.resolved unreachable-symbol.conflicts
    unreachable-symbol.timings)
  (deps unreachable-symbol.mly)
  (action
    (with-outputs-to unreachable-symbol.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to unreachable-symbol.timings %{deps})))))

(rule (alias quick)
  (action (diff unreachable-symbol.exp unreachable-symbol.out)))

(rule (alias quick)
  (action
    (diff unreachable-symbol.automaton.exp unreachable-symbol.automaton)))

(rule (alias quick)
  (action
    (diff unreachable-symbol.automaton.resolved.exp
      unreachable-symbol.automaton.resolved)))

(rule (alias quick)
  (action
    (diff unreachable-symbol.conflicts.exp unreachable-symbol.conflicts)))

(rule (target unreachable-symbol_stripped.mly) (deps unreachable-symbol.mly)
  (action
    (with-stderr-to unreachable-symbol_stripped.ignored
      (with-stdout-to unreachable-symbol_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets unreachable-symbol_stripped.log unreachable-symbol_stripped.mli
    unreachable-symbol_stripped.ml unreachable-symbol_stripped.stacklang
    unreachable-symbol_stripped.timings unreachable-symbol_stripped.scount
    unreachable-symbol_stripped.dcount)
  (deps unreachable-symbol_stripped.mly)
  (action
    (with-outputs-to unreachable-symbol_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to unreachable-symbol_stripped.timings %{deps})))))

(alias (name quick) (deps
                      unreachable-symbol_stripped.stacklang))

(rule
  (targets unreachable-symbol_stripped.cmi
    unreachable-symbol_stripped.mli.log)
  (deps unreachable-symbol_stripped.mli)
  (action
    (with-stdout-to unreachable-symbol_stripped.mli.dtimings
      (with-stderr-to unreachable-symbol_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c unreachable-symbol_stripped.mli)))))

(rule
  (targets unreachable-symbol_stripped.cmo
    unreachable-symbol_stripped.ml.log)
  (deps unreachable-symbol_stripped.ml unreachable-symbol_stripped.cmi)
  (action
    (with-stdout-to unreachable-symbol_stripped.ml.dtimings
      (with-stderr-to unreachable-symbol_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c unreachable-symbol_stripped.ml)))))

(rule (alias test)
  (action
    (diff unreachable-symbol_stripped.ml.log.exp
      unreachable-symbol_stripped.ml.log)))

(rule (target unused-attribute.opp.out) (deps unused-attribute.mly)
  (action
    (with-outputs-to unused-attribute.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff unused-attribute.opp.exp unused-attribute.opp.out)))

(rule
  (targets unused-attribute.out unused-attribute.automaton
    unused-attribute.automaton.resolved unused-attribute.conflicts
    unused-attribute.timings)
  (deps unused-attribute.mly)
  (action
    (with-outputs-to unused-attribute.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to unused-attribute.timings %{deps})))))

(rule (alias quick)
  (action (diff unused-attribute.exp unused-attribute.out)))

(rule (alias quick)
  (action (diff unused-attribute.automaton.exp unused-attribute.automaton)))

(rule (alias quick)
  (action
    (diff unused-attribute.automaton.resolved.exp
      unused-attribute.automaton.resolved)))

(rule (alias quick)
  (action (diff unused-attribute.conflicts.exp unused-attribute.conflicts)))

(rule (target unused-attribute_stripped.mly) (deps unused-attribute.mly)
  (action
    (with-stderr-to unused-attribute_stripped.ignored
      (with-stdout-to unused-attribute_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets unused-attribute_stripped.log unused-attribute_stripped.mli
    unused-attribute_stripped.ml unused-attribute_stripped.stacklang
    unused-attribute_stripped.timings unused-attribute_stripped.scount
    unused-attribute_stripped.dcount)
  (deps unused-attribute_stripped.mly)
  (action
    (with-outputs-to unused-attribute_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to unused-attribute_stripped.timings %{deps})))))

(alias (name quick) (deps
                      unused-attribute_stripped.stacklang))

(rule
  (targets unused-attribute_stripped.cmi unused-attribute_stripped.mli.log)
  (deps unused-attribute_stripped.mli)
  (action
    (with-stdout-to unused-attribute_stripped.mli.dtimings
      (with-stderr-to unused-attribute_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c unused-attribute_stripped.mli)))))

(rule
  (targets unused-attribute_stripped.cmo unused-attribute_stripped.ml.log)
  (deps unused-attribute_stripped.ml unused-attribute_stripped.cmi)
  (action
    (with-stdout-to unused-attribute_stripped.ml.dtimings
      (with-stderr-to unused-attribute_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c unused-attribute_stripped.ml)))))

(rule (alias test)
  (action
    (diff unused-attribute_stripped.ml.log.exp
      unused-attribute_stripped.ml.log)))

(rule (target unused-pseudo-token.opp.out) (deps unused-pseudo-token.mly)
  (action
    (with-outputs-to unused-pseudo-token.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff unused-pseudo-token.opp.exp unused-pseudo-token.opp.out)))

(rule
  (targets unused-pseudo-token.out unused-pseudo-token.automaton
    unused-pseudo-token.automaton.resolved unused-pseudo-token.conflicts
    unused-pseudo-token.timings)
  (deps unused-pseudo-token.mly)
  (action
    (with-outputs-to unused-pseudo-token.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to unused-pseudo-token.timings %{deps})))))

(rule (alias quick)
  (action (diff unused-pseudo-token.exp unused-pseudo-token.out)))

(rule (alias quick)
  (action
    (diff unused-pseudo-token.automaton.exp unused-pseudo-token.automaton)))

(rule (alias quick)
  (action
    (diff unused-pseudo-token.automaton.resolved.exp
      unused-pseudo-token.automaton.resolved)))

(rule (alias quick)
  (action
    (diff unused-pseudo-token.conflicts.exp unused-pseudo-token.conflicts)))

(rule (target unused-pseudo-token_stripped.mly)
  (deps unused-pseudo-token.mly)
  (action
    (with-stderr-to unused-pseudo-token_stripped.ignored
      (with-stdout-to unused-pseudo-token_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets unused-pseudo-token_stripped.log unused-pseudo-token_stripped.mli
    unused-pseudo-token_stripped.ml unused-pseudo-token_stripped.stacklang
    unused-pseudo-token_stripped.timings unused-pseudo-token_stripped.scount
    unused-pseudo-token_stripped.dcount)
  (deps unused-pseudo-token_stripped.mly)
  (action
    (with-outputs-to unused-pseudo-token_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to unused-pseudo-token_stripped.timings %{deps})))))

(alias (name quick) (deps
                      unused-pseudo-token_stripped.stacklang))

(rule
  (targets unused-pseudo-token_stripped.cmi
    unused-pseudo-token_stripped.mli.log)
  (deps unused-pseudo-token_stripped.mli)
  (action
    (with-stdout-to unused-pseudo-token_stripped.mli.dtimings
      (with-stderr-to unused-pseudo-token_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          unused-pseudo-token_stripped.mli)))))

(rule
  (targets unused-pseudo-token_stripped.cmo
    unused-pseudo-token_stripped.ml.log)
  (deps unused-pseudo-token_stripped.ml unused-pseudo-token_stripped.cmi)
  (action
    (with-stdout-to unused-pseudo-token_stripped.ml.dtimings
      (with-stderr-to unused-pseudo-token_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c unused-pseudo-token_stripped.ml)))))

(rule (alias test)
  (action
    (diff unused-pseudo-token_stripped.ml.log.exp
      unused-pseudo-token_stripped.ml.log)))

(rule (target unused-token1.opp.out) (deps unused-token1.mly)
  (action
    (with-outputs-to unused-token1.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff unused-token1.opp.exp unused-token1.opp.out)))

(rule
  (targets unused-token1.out unused-token1.automaton
    unused-token1.automaton.resolved unused-token1.conflicts
    unused-token1.timings)
  (deps unused-token1.mly)
  (action
    (with-outputs-to unused-token1.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to unused-token1.timings %{deps})))))

(rule (alias quick) (action (diff unused-token1.exp unused-token1.out)))

(rule (alias quick)
  (action (diff unused-token1.automaton.exp unused-token1.automaton)))

(rule (alias quick)
  (action
    (diff unused-token1.automaton.resolved.exp
      unused-token1.automaton.resolved)))

(rule (alias quick)
  (action (diff unused-token1.conflicts.exp unused-token1.conflicts)))

(rule (target unused-token1_stripped.mly) (deps unused-token1.mly)
  (action
    (with-stderr-to unused-token1_stripped.ignored
      (with-stdout-to unused-token1_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets unused-token1_stripped.log unused-token1_stripped.mli
    unused-token1_stripped.ml unused-token1_stripped.stacklang
    unused-token1_stripped.timings unused-token1_stripped.scount
    unused-token1_stripped.dcount)
  (deps unused-token1_stripped.mly)
  (action
    (with-outputs-to unused-token1_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to unused-token1_stripped.timings %{deps})))))

(alias (name quick) (deps
                      unused-token1_stripped.stacklang))

(rule (targets unused-token1_stripped.cmi unused-token1_stripped.mli.log)
  (deps unused-token1_stripped.mli)
  (action
    (with-stdout-to unused-token1_stripped.mli.dtimings
      (with-stderr-to unused-token1_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c unused-token1_stripped.mli)))))

(rule (targets unused-token1_stripped.cmo unused-token1_stripped.ml.log)
  (deps unused-token1_stripped.ml unused-token1_stripped.cmi)
  (action
    (with-stdout-to unused-token1_stripped.ml.dtimings
      (with-stderr-to unused-token1_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c unused-token1_stripped.ml)))))

(rule (alias test)
  (action
    (diff unused-token1_stripped.ml.log.exp unused-token1_stripped.ml.log)))

(rule (target unused-value.opp.out) (deps unused-value.mly)
  (action
    (with-outputs-to unused-value.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff unused-value.opp.exp unused-value.opp.out)))

(rule
  (targets unused-value.out unused-value.automaton
    unused-value.automaton.resolved unused-value.conflicts
    unused-value.timings)
  (deps unused-value.mly)
  (action
    (with-outputs-to unused-value.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to unused-value.timings %{deps})))))

(rule (alias quick) (action (diff unused-value.exp unused-value.out)))

(rule (alias quick)
  (action (diff unused-value.automaton.exp unused-value.automaton)))

(rule (alias quick)
  (action
    (diff unused-value.automaton.resolved.exp
      unused-value.automaton.resolved)))

(rule (alias quick)
  (action (diff unused-value.conflicts.exp unused-value.conflicts)))

(rule (target unused-value_stripped.mly) (deps unused-value.mly)
  (action
    (with-stderr-to unused-value_stripped.ignored
      (with-stdout-to unused-value_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets unused-value_stripped.log unused-value_stripped.mli
    unused-value_stripped.ml unused-value_stripped.stacklang
    unused-value_stripped.timings unused-value_stripped.scount
    unused-value_stripped.dcount)
  (deps unused-value_stripped.mly)
  (action
    (with-outputs-to unused-value_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to unused-value_stripped.timings %{deps})))))

(alias (name quick) (deps
                      unused-value_stripped.stacklang))

(rule (targets unused-value_stripped.cmi unused-value_stripped.mli.log)
  (deps unused-value_stripped.mli)
  (action
    (with-stdout-to unused-value_stripped.mli.dtimings
      (with-stderr-to unused-value_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c unused-value_stripped.mli)))))

(rule (targets unused-value_stripped.cmo unused-value_stripped.ml.log)
  (deps unused-value_stripped.ml unused-value_stripped.cmi)
  (action
    (with-stdout-to unused-value_stripped.ml.dtimings
      (with-stderr-to unused-value_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c unused-value_stripped.ml)))))

(rule (alias test)
  (action
    (diff unused-value_stripped.ml.log.exp unused-value_stripped.ml.log)))

(rule (target uppercase.opp.out) (deps uppercase.mly)
  (action
    (with-outputs-to uppercase.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff uppercase.opp.exp uppercase.opp.out)))

(rule
  (targets uppercase.out uppercase.automaton uppercase.automaton.resolved
    uppercase.conflicts uppercase.timings)
  (deps uppercase.mly)
  (action
    (with-outputs-to uppercase.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to uppercase.timings %{deps})))))

(rule (alias quick) (action (diff uppercase.exp uppercase.out)))

(rule (alias quick)
  (action (diff uppercase.automaton.exp uppercase.automaton)))

(rule (alias quick)
  (action
    (diff uppercase.automaton.resolved.exp uppercase.automaton.resolved)))

(rule (alias quick)
  (action (diff uppercase.conflicts.exp uppercase.conflicts)))

(rule (target uppercase_stripped.mly) (deps uppercase.mly)
  (action
    (with-stderr-to uppercase_stripped.ignored
      (with-stdout-to uppercase_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets uppercase_stripped.log uppercase_stripped.mli
    uppercase_stripped.ml uppercase_stripped.stacklang
    uppercase_stripped.timings uppercase_stripped.scount
    uppercase_stripped.dcount)
  (deps uppercase_stripped.mly)
  (action
    (with-outputs-to uppercase_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to uppercase_stripped.timings %{deps})))))

(alias (name quick) (deps
                      uppercase_stripped.stacklang))

(rule (targets uppercase_stripped.cmi uppercase_stripped.mli.log)
  (deps uppercase_stripped.mli)
  (action
    (with-stdout-to uppercase_stripped.mli.dtimings
      (with-stderr-to uppercase_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c uppercase_stripped.mli)))))

(rule (targets uppercase_stripped.cmo uppercase_stripped.ml.log)
  (deps uppercase_stripped.ml uppercase_stripped.cmi)
  (action
    (with-stdout-to uppercase_stripped.ml.dtimings
      (with-stderr-to uppercase_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c uppercase_stripped.ml)))))

(rule (alias test)
  (action (diff uppercase_stripped.ml.log.exp uppercase_stripped.ml.log)))

(rule (target useless-priorities.opp.out) (deps useless-priorities.mly)
  (action
    (with-outputs-to useless-priorities.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff useless-priorities.opp.exp useless-priorities.opp.out)))

(rule
  (targets useless-priorities.out useless-priorities.automaton
    useless-priorities.automaton.resolved useless-priorities.conflicts
    useless-priorities.timings)
  (deps useless-priorities.mly)
  (action
    (with-outputs-to useless-priorities.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to useless-priorities.timings %{deps})))))

(rule (alias quick)
  (action (diff useless-priorities.exp useless-priorities.out)))

(rule (alias quick)
  (action
    (diff useless-priorities.automaton.exp useless-priorities.automaton)))

(rule (alias quick)
  (action
    (diff useless-priorities.automaton.resolved.exp
      useless-priorities.automaton.resolved)))

(rule (alias quick)
  (action
    (diff useless-priorities.conflicts.exp useless-priorities.conflicts)))

(rule (target useless-priorities_stripped.mly) (deps useless-priorities.mly)
  (action
    (with-stderr-to useless-priorities_stripped.ignored
      (with-stdout-to useless-priorities_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets useless-priorities_stripped.log useless-priorities_stripped.mli
    useless-priorities_stripped.ml useless-priorities_stripped.stacklang
    useless-priorities_stripped.timings useless-priorities_stripped.scount
    useless-priorities_stripped.dcount)
  (deps useless-priorities_stripped.mly)
  (action
    (with-outputs-to useless-priorities_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to useless-priorities_stripped.timings %{deps})))))

(alias (name quick) (deps
                      useless-priorities_stripped.stacklang))

(rule
  (targets useless-priorities_stripped.cmi
    useless-priorities_stripped.mli.log)
  (deps useless-priorities_stripped.mli)
  (action
    (with-stdout-to useless-priorities_stripped.mli.dtimings
      (with-stderr-to useless-priorities_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c useless-priorities_stripped.mli)))))

(rule
  (targets useless-priorities_stripped.cmo
    useless-priorities_stripped.ml.log)
  (deps useless-priorities_stripped.ml useless-priorities_stripped.cmi)
  (action
    (with-stdout-to useless-priorities_stripped.ml.dtimings
      (with-stderr-to useless-priorities_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c useless-priorities_stripped.ml)))))

(rule (alias test)
  (action
    (diff useless-priorities_stripped.ml.log.exp
      useless-priorities_stripped.ml.log)))

(rule (target useless-pseudo-token.opp.out) (deps useless-pseudo-token.mly)
  (action
    (with-outputs-to useless-pseudo-token.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff useless-pseudo-token.opp.exp useless-pseudo-token.opp.out)))

(rule
  (targets useless-pseudo-token.out useless-pseudo-token.automaton
    useless-pseudo-token.automaton.resolved useless-pseudo-token.conflicts
    useless-pseudo-token.timings)
  (deps useless-pseudo-token.mly)
  (action
    (with-outputs-to useless-pseudo-token.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to useless-pseudo-token.timings %{deps})))))

(rule (alias quick)
  (action (diff useless-pseudo-token.exp useless-pseudo-token.out)))

(rule (alias quick)
  (action
    (diff useless-pseudo-token.automaton.exp useless-pseudo-token.automaton)))

(rule (alias quick)
  (action
    (diff useless-pseudo-token.automaton.resolved.exp
      useless-pseudo-token.automaton.resolved)))

(rule (alias quick)
  (action
    (diff useless-pseudo-token.conflicts.exp useless-pseudo-token.conflicts)))

(rule (target useless-pseudo-token_stripped.mly)
  (deps useless-pseudo-token.mly)
  (action
    (with-stderr-to useless-pseudo-token_stripped.ignored
      (with-stdout-to useless-pseudo-token_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets useless-pseudo-token_stripped.log
    useless-pseudo-token_stripped.mli useless-pseudo-token_stripped.ml
    useless-pseudo-token_stripped.stacklang
    useless-pseudo-token_stripped.timings
    useless-pseudo-token_stripped.scount
    useless-pseudo-token_stripped.dcount)
  (deps useless-pseudo-token_stripped.mly)
  (action
    (with-outputs-to useless-pseudo-token_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to useless-pseudo-token_stripped.timings %{deps})))))

(alias (name quick) (deps
                      useless-pseudo-token_stripped.stacklang))

(rule
  (targets useless-pseudo-token_stripped.cmi
    useless-pseudo-token_stripped.mli.log)
  (deps useless-pseudo-token_stripped.mli)
  (action
    (with-stdout-to useless-pseudo-token_stripped.mli.dtimings
      (with-stderr-to useless-pseudo-token_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          useless-pseudo-token_stripped.mli)))))

(rule
  (targets useless-pseudo-token_stripped.cmo
    useless-pseudo-token_stripped.ml.log)
  (deps useless-pseudo-token_stripped.ml useless-pseudo-token_stripped.cmi)
  (action
    (with-stdout-to useless-pseudo-token_stripped.ml.dtimings
      (with-stderr-to useless-pseudo-token_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          useless-pseudo-token_stripped.ml)))))

(rule (alias test)
  (action
    (diff useless-pseudo-token_stripped.ml.log.exp
      useless-pseudo-token_stripped.ml.log)))

(rule (target verilog.opp.out) (deps verilog.mly)
  (action
    (with-outputs-to verilog.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff verilog.opp.exp verilog.opp.out)))

(rule
  (targets verilog.out verilog.automaton verilog.automaton.resolved
    verilog.conflicts verilog.timings)
  (deps verilog.mly)
  (action
    (with-outputs-to verilog.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to verilog.timings %{deps})))))

(rule (alias quick) (action (diff verilog.exp verilog.out)))

(rule (alias quick) (action (diff verilog.automaton.exp verilog.automaton)))

(rule (alias quick)
  (action (diff verilog.automaton.resolved.exp verilog.automaton.resolved)))

(rule (alias quick) (action (diff verilog.conflicts.exp verilog.conflicts)))

(rule (target wallace.opp.out) (deps wallace.mly)
  (action
    (with-outputs-to wallace.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff wallace.opp.exp wallace.opp.out)))

(rule
  (targets wallace.out wallace.automaton wallace.automaton.resolved
    wallace.conflicts wallace.timings)
  (deps wallace.mly)
  (action
    (with-outputs-to wallace.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to wallace.timings %{deps})))))

(rule (alias quick) (action (diff wallace.exp wallace.out)))

(rule (alias quick) (action (diff wallace.automaton.exp wallace.automaton)))

(rule (alias quick)
  (action (diff wallace.automaton.resolved.exp wallace.automaton.resolved)))

(rule (alias quick) (action (diff wallace.conflicts.exp wallace.conflicts)))

(rule (target wallace_stripped.mly) (deps wallace.mly)
  (action
    (with-stderr-to wallace_stripped.ignored
      (with-stdout-to wallace_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets wallace_stripped.log wallace_stripped.mli wallace_stripped.ml
    wallace_stripped.stacklang wallace_stripped.timings
    wallace_stripped.scount wallace_stripped.dcount)
  (deps wallace_stripped.mly)
  (action
    (with-outputs-to wallace_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to wallace_stripped.timings %{deps})))))

(alias (name quick) (deps
                      wallace_stripped.stacklang))

(rule (targets wallace_stripped.cmi wallace_stripped.mli.log)
  (deps wallace_stripped.mli)
  (action
    (with-stdout-to wallace_stripped.mli.dtimings
      (with-stderr-to wallace_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c wallace_stripped.mli)))))

(rule (targets wallace_stripped.cmo wallace_stripped.ml.log)
  (deps wallace_stripped.ml wallace_stripped.cmi)
  (action
    (with-stdout-to wallace_stripped.ml.dtimings
      (with-stderr-to wallace_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c wallace_stripped.ml)))))

(rule (alias test)
  (action (diff wallace_stripped.ml.log.exp wallace_stripped.ml.log)))

(rule (target wasm.1.0-parser.opp.out) (deps wasm.1.0-parser.mly)
  (action
    (with-outputs-to wasm.1.0-parser.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:wasm.1.0-parser.flags}
          %{deps})))))

(rule (alias quick)
  (action (diff wasm.1.0-parser.opp.exp wasm.1.0-parser.opp.out)))

(rule
  (targets wasm.1.0-parser.out wasm.1.0-parser.automaton
    wasm.1.0-parser.automaton.resolved wasm.1.0-parser.conflicts
    wasm.1.0-parser.timings)
  (deps wasm.1.0-parser.mly)
  (action
    (with-outputs-to wasm.1.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to wasm.1.0-parser.timings
          %{read-lines:wasm.1.0-parser.flags} %{deps})))))

(rule (alias quick) (action (diff wasm.1.0-parser.exp wasm.1.0-parser.out)))

(rule (alias quick)
  (action (diff wasm.1.0-parser.automaton.exp wasm.1.0-parser.automaton)))

(rule (alias quick)
  (action
    (diff wasm.1.0-parser.automaton.resolved.exp
      wasm.1.0-parser.automaton.resolved)))

(rule (alias quick)
  (action (diff wasm.1.0-parser.conflicts.exp wasm.1.0-parser.conflicts)))

(rule (target wasm_1_0-parser_stripped.mly) (deps wasm.1.0-parser.mly)
  (action
    (with-stderr-to wasm_1_0-parser_stripped.ignored
      (with-stdout-to wasm_1_0-parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu
            %{read-lines:wasm.1.0-parser.flags} %{deps}))))))

(rule
  (targets wasm_1_0-parser_stripped.log wasm_1_0-parser_stripped.mli
    wasm_1_0-parser_stripped.ml wasm_1_0-parser_stripped.stacklang
    wasm_1_0-parser_stripped.timings wasm_1_0-parser_stripped.scount
    wasm_1_0-parser_stripped.dcount)
  (deps wasm_1_0-parser_stripped.mly)
  (action
    (with-outputs-to wasm_1_0-parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to wasm_1_0-parser_stripped.timings
          %{read-lines:wasm.1.0-parser.flags} %{deps})))))

(alias (name quick) (deps
                      wasm_1_0-parser_stripped.stacklang))

(rule (targets wasm_1_0-parser_stripped.cmi wasm_1_0-parser_stripped.mli.log)
  (deps wasm_1_0-parser_stripped.mli)
  (action
    (with-stdout-to wasm_1_0-parser_stripped.mli.dtimings
      (with-stderr-to wasm_1_0-parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c wasm_1_0-parser_stripped.mli)))))

(rule (targets wasm_1_0-parser_stripped.cmo wasm_1_0-parser_stripped.ml.log)
  (deps wasm_1_0-parser_stripped.ml wasm_1_0-parser_stripped.cmi)
  (action
    (with-stdout-to wasm_1_0-parser_stripped.ml.dtimings
      (with-stderr-to wasm_1_0-parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c wasm_1_0-parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff wasm_1_0-parser_stripped.ml.log.exp
      wasm_1_0-parser_stripped.ml.log)))

(rule (target webidl.1.4-parser00.opp.out)
  (deps webidl.1.4-parser00.mly webidl.1.4-parser01.mly
    webidl.1.4-parser03.mly webidl.1.4-parser04.mly)
  (action
    (with-outputs-to webidl.1.4-parser00.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base webidl.1.4-parser00 --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff webidl.1.4-parser00.opp.exp webidl.1.4-parser00.opp.out)))

(rule
  (targets webidl.1.4-parser00.out webidl.1.4-parser00.automaton
    webidl.1.4-parser00.automaton.resolved webidl.1.4-parser00.conflicts
    webidl.1.4-parser00.timings)
  (deps webidl.1.4-parser00.mly webidl.1.4-parser01.mly
    webidl.1.4-parser03.mly webidl.1.4-parser04.mly)
  (action
    (with-outputs-to webidl.1.4-parser00.out
      (with-accepted-exit-codes 0
        (run menhir --base webidl.1.4-parser00 --table --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to
          webidl.1.4-parser00.timings %{deps})))))

(rule (alias quick)
  (action (diff webidl.1.4-parser00.exp webidl.1.4-parser00.out)))

(rule (alias quick)
  (action
    (diff webidl.1.4-parser00.automaton.exp webidl.1.4-parser00.automaton)))

(rule (alias quick)
  (action
    (diff webidl.1.4-parser00.automaton.resolved.exp
      webidl.1.4-parser00.automaton.resolved)))

(rule (alias quick)
  (action
    (diff webidl.1.4-parser00.conflicts.exp webidl.1.4-parser00.conflicts)))

(rule (target webidl_1_4-parser00_stripped.mly)
  (deps webidl.1.4-parser00.mly webidl.1.4-parser01.mly
    webidl.1.4-parser03.mly webidl.1.4-parser04.mly)
  (action
    (with-stderr-to webidl_1_4-parser00_stripped.ignored
      (with-stdout-to webidl_1_4-parser00_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --base webidl.1.4-parser00 --only-preprocess-uu
            %{deps}))))))

(rule
  (targets webidl_1_4-parser00_stripped.log webidl_1_4-parser00_stripped.mli
    webidl_1_4-parser00_stripped.ml webidl_1_4-parser00_stripped.stacklang
    webidl_1_4-parser00_stripped.timings webidl_1_4-parser00_stripped.scount
    webidl_1_4-parser00_stripped.dcount)
  (deps webidl_1_4-parser00_stripped.mly)
  (action
    (with-outputs-to webidl_1_4-parser00_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to webidl_1_4-parser00_stripped.timings %{deps})))))

(alias (name quick) (deps
                      webidl_1_4-parser00_stripped.stacklang))

(rule
  (targets webidl_1_4-parser00_stripped.cmi
    webidl_1_4-parser00_stripped.mli.log)
  (deps webidl_1_4-parser00_stripped.mli)
  (action
    (with-stdout-to webidl_1_4-parser00_stripped.mli.dtimings
      (with-stderr-to webidl_1_4-parser00_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          webidl_1_4-parser00_stripped.mli)))))

(rule
  (targets webidl_1_4-parser00_stripped.cmo
    webidl_1_4-parser00_stripped.ml.log)
  (deps webidl_1_4-parser00_stripped.ml webidl_1_4-parser00_stripped.cmi)
  (action
    (with-stdout-to webidl_1_4-parser00_stripped.ml.dtimings
      (with-stderr-to webidl_1_4-parser00_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c webidl_1_4-parser00_stripped.ml)))))

(rule (alias test)
  (action
    (diff webidl_1_4-parser00_stripped.ml.log.exp
      webidl_1_4-parser00_stripped.ml.log)))

(rule (target why-clparser.opp.out) (deps why-clparser.mly)
  (action
    (with-outputs-to why-clparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff why-clparser.opp.exp why-clparser.opp.out)))

(rule
  (targets why-clparser.out why-clparser.automaton
    why-clparser.automaton.resolved why-clparser.conflicts
    why-clparser.timings)
  (deps why-clparser.mly)
  (action
    (with-outputs-to why-clparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to why-clparser.timings %{deps})))))

(rule (alias quick) (action (diff why-clparser.exp why-clparser.out)))

(rule (alias quick)
  (action (diff why-clparser.automaton.exp why-clparser.automaton)))

(rule (alias quick)
  (action
    (diff why-clparser.automaton.resolved.exp
      why-clparser.automaton.resolved)))

(rule (alias quick)
  (action (diff why-clparser.conflicts.exp why-clparser.conflicts)))

(rule (target why-clparser_stripped.mly) (deps why-clparser.mly)
  (action
    (with-stderr-to why-clparser_stripped.ignored
      (with-stdout-to why-clparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets why-clparser_stripped.log why-clparser_stripped.mli
    why-clparser_stripped.ml why-clparser_stripped.stacklang
    why-clparser_stripped.timings why-clparser_stripped.scount
    why-clparser_stripped.dcount)
  (deps why-clparser_stripped.mly)
  (action
    (with-outputs-to why-clparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to why-clparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      why-clparser_stripped.stacklang))

(rule (targets why-clparser_stripped.cmi why-clparser_stripped.mli.log)
  (deps why-clparser_stripped.mli)
  (action
    (with-stdout-to why-clparser_stripped.mli.dtimings
      (with-stderr-to why-clparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c why-clparser_stripped.mli)))))

(rule (targets why-clparser_stripped.cmo why-clparser_stripped.ml.log)
  (deps why-clparser_stripped.ml why-clparser_stripped.cmi)
  (action
    (with-stdout-to why-clparser_stripped.ml.dtimings
      (with-stderr-to why-clparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c why-clparser_stripped.ml)))))

(rule (alias test)
  (action
    (diff why-clparser_stripped.ml.log.exp why-clparser_stripped.ml.log)))

(rule (target why-cparser.opp.out) (deps why-cparser.mly)
  (action
    (with-outputs-to why-cparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff why-cparser.opp.exp why-cparser.opp.out)))

(rule
  (targets why-cparser.out why-cparser.automaton
    why-cparser.automaton.resolved why-cparser.conflicts why-cparser.timings)
  (deps why-cparser.mly)
  (action
    (with-outputs-to why-cparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to why-cparser.timings %{deps})))))

(rule (alias quick) (action (diff why-cparser.exp why-cparser.out)))

(rule (alias quick)
  (action (diff why-cparser.automaton.exp why-cparser.automaton)))

(rule (alias quick)
  (action
    (diff why-cparser.automaton.resolved.exp why-cparser.automaton.resolved)))

(rule (alias quick)
  (action (diff why-cparser.conflicts.exp why-cparser.conflicts)))

(rule (target why-cparser_stripped.mly) (deps why-cparser.mly)
  (action
    (with-stderr-to why-cparser_stripped.ignored
      (with-stdout-to why-cparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets why-cparser_stripped.log why-cparser_stripped.mli
    why-cparser_stripped.ml why-cparser_stripped.stacklang
    why-cparser_stripped.timings why-cparser_stripped.scount
    why-cparser_stripped.dcount)
  (deps why-cparser_stripped.mly)
  (action
    (with-outputs-to why-cparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to why-cparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      why-cparser_stripped.stacklang))

(rule (targets why-cparser_stripped.cmi why-cparser_stripped.mli.log)
  (deps why-cparser_stripped.mli)
  (action
    (with-stdout-to why-cparser_stripped.mli.dtimings
      (with-stderr-to why-cparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c why-cparser_stripped.mli)))))

(rule (targets why-cparser_stripped.cmo why-cparser_stripped.ml.log)
  (deps why-cparser_stripped.ml why-cparser_stripped.cmi)
  (action
    (with-stdout-to why-cparser_stripped.ml.dtimings
      (with-stderr-to why-cparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c why-cparser_stripped.ml)))))

(rule (alias test)
  (action (diff why-cparser_stripped.ml.log.exp why-cparser_stripped.ml.log)))

(rule (target why3.opp.out) (deps why3.mly)
  (action
    (with-outputs-to why3.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff why3.opp.exp why3.opp.out)))

(rule
  (targets why3.out why3.automaton why3.automaton.resolved why3.conflicts
    why3.timings)
  (deps why3.mly)
  (action
    (with-outputs-to why3.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to why3.timings %{deps})))))

(rule (alias quick) (action (diff why3.exp why3.out)))

(rule (alias quick) (action (diff why3.automaton.exp why3.automaton)))

(rule (alias quick)
  (action (diff why3.automaton.resolved.exp why3.automaton.resolved)))

(rule (alias quick) (action (diff why3.conflicts.exp why3.conflicts)))

(rule (target why3_stripped.mly) (deps why3.mly)
  (action
    (with-stderr-to why3_stripped.ignored
      (with-stdout-to why3_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets why3_stripped.log why3_stripped.mli why3_stripped.ml
    why3_stripped.stacklang why3_stripped.timings why3_stripped.scount
    why3_stripped.dcount)
  (deps why3_stripped.mly)
  (action
    (with-outputs-to why3_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to why3_stripped.timings %{deps})))))

(alias (name quick) (deps
                      why3_stripped.stacklang))

(rule (targets why3_stripped.cmi why3_stripped.mli.log)
  (deps why3_stripped.mli)
  (action
    (with-stdout-to why3_stripped.mli.dtimings
      (with-stderr-to why3_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c why3_stripped.mli)))))

(rule (targets why3_stripped.cmo why3_stripped.ml.log)
  (deps why3_stripped.ml why3_stripped.cmi)
  (action
    (with-stdout-to why3_stripped.ml.dtimings
      (with-stderr-to why3_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c why3_stripped.ml)))))

(rule (alias test)
  (action (diff why3_stripped.ml.log.exp why3_stripped.ml.log)))

(rule (target why3.1.1.0-py_parser.opp.out) (deps why3.1.1.0-py_parser.mly)
  (action
    (with-outputs-to why3.1.1.0-py_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff why3.1.1.0-py_parser.opp.exp why3.1.1.0-py_parser.opp.out)))

(rule
  (targets why3.1.1.0-py_parser.out why3.1.1.0-py_parser.automaton
    why3.1.1.0-py_parser.automaton.resolved why3.1.1.0-py_parser.conflicts
    why3.1.1.0-py_parser.timings)
  (deps why3.1.1.0-py_parser.mly)
  (action
    (with-outputs-to why3.1.1.0-py_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to why3.1.1.0-py_parser.timings %{deps})))))

(rule (alias quick)
  (action (diff why3.1.1.0-py_parser.exp why3.1.1.0-py_parser.out)))

(rule (alias quick)
  (action
    (diff why3.1.1.0-py_parser.automaton.exp why3.1.1.0-py_parser.automaton)))

(rule (alias quick)
  (action
    (diff why3.1.1.0-py_parser.automaton.resolved.exp
      why3.1.1.0-py_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff why3.1.1.0-py_parser.conflicts.exp why3.1.1.0-py_parser.conflicts)))

(rule (target why3_1_1_0-py_parser_stripped.mly)
  (deps why3.1.1.0-py_parser.mly)
  (action
    (with-stderr-to why3_1_1_0-py_parser_stripped.ignored
      (with-stdout-to why3_1_1_0-py_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets why3_1_1_0-py_parser_stripped.log
    why3_1_1_0-py_parser_stripped.mli why3_1_1_0-py_parser_stripped.ml
    why3_1_1_0-py_parser_stripped.stacklang
    why3_1_1_0-py_parser_stripped.timings
    why3_1_1_0-py_parser_stripped.scount
    why3_1_1_0-py_parser_stripped.dcount)
  (deps why3_1_1_0-py_parser_stripped.mly)
  (action
    (with-outputs-to why3_1_1_0-py_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to why3_1_1_0-py_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      why3_1_1_0-py_parser_stripped.stacklang))

(rule
  (targets why3_1_1_0-py_parser_stripped.cmi
    why3_1_1_0-py_parser_stripped.mli.log)
  (deps why3_1_1_0-py_parser_stripped.mli)
  (action
    (with-stdout-to why3_1_1_0-py_parser_stripped.mli.dtimings
      (with-stderr-to why3_1_1_0-py_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          why3_1_1_0-py_parser_stripped.mli)))))

(rule
  (targets why3_1_1_0-py_parser_stripped.cmo
    why3_1_1_0-py_parser_stripped.ml.log)
  (deps why3_1_1_0-py_parser_stripped.ml why3_1_1_0-py_parser_stripped.cmi)
  (action
    (with-stdout-to why3_1_1_0-py_parser_stripped.ml.dtimings
      (with-stderr-to why3_1_1_0-py_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          why3_1_1_0-py_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff why3_1_1_0-py_parser_stripped.ml.log.exp
      why3_1_1_0-py_parser_stripped.ml.log)))

(rule (target xpath_parser.opp.out) (deps xpath_parser.mly)
  (action
    (with-outputs-to xpath_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff xpath_parser.opp.exp xpath_parser.opp.out)))

(rule
  (targets xpath_parser.out xpath_parser.automaton
    xpath_parser.automaton.resolved xpath_parser.conflicts
    xpath_parser.timings)
  (deps xpath_parser.mly)
  (action
    (with-outputs-to xpath_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to xpath_parser.timings %{deps})))))

(rule (alias quick) (action (diff xpath_parser.exp xpath_parser.out)))

(rule (alias quick)
  (action (diff xpath_parser.automaton.exp xpath_parser.automaton)))

(rule (alias quick)
  (action
    (diff xpath_parser.automaton.resolved.exp
      xpath_parser.automaton.resolved)))

(rule (alias quick)
  (action (diff xpath_parser.conflicts.exp xpath_parser.conflicts)))

(rule (target xpath_parser_stripped.mly) (deps xpath_parser.mly)
  (action
    (with-stderr-to xpath_parser_stripped.ignored
      (with-stdout-to xpath_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets xpath_parser_stripped.log xpath_parser_stripped.mli
    xpath_parser_stripped.ml xpath_parser_stripped.stacklang
    xpath_parser_stripped.timings xpath_parser_stripped.scount
    xpath_parser_stripped.dcount)
  (deps xpath_parser_stripped.mly)
  (action
    (with-outputs-to xpath_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to xpath_parser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      xpath_parser_stripped.stacklang))

(rule (targets xpath_parser_stripped.cmi xpath_parser_stripped.mli.log)
  (deps xpath_parser_stripped.mli)
  (action
    (with-stdout-to xpath_parser_stripped.mli.dtimings
      (with-stderr-to xpath_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c xpath_parser_stripped.mli)))))

(rule (targets xpath_parser_stripped.cmo xpath_parser_stripped.ml.log)
  (deps xpath_parser_stripped.ml xpath_parser_stripped.cmi)
  (action
    (with-stdout-to xpath_parser_stripped.ml.dtimings
      (with-stderr-to xpath_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c xpath_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff xpath_parser_stripped.ml.log.exp xpath_parser_stripped.ml.log)))

(rule (target yann.opp.out) (deps yann.mly)
  (action
    (with-outputs-to yann.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff yann.opp.exp yann.opp.out)))

(rule
  (targets yann.out yann.automaton yann.automaton.resolved yann.conflicts
    yann.timings)
  (deps yann.mly)
  (action
    (with-outputs-to yann.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to yann.timings %{deps})))))

(rule (alias quick) (action (diff yann.exp yann.out)))

(rule (alias quick) (action (diff yann.automaton.exp yann.automaton)))

(rule (alias quick)
  (action (diff yann.automaton.resolved.exp yann.automaton.resolved)))

(rule (alias quick) (action (diff yann.conflicts.exp yann.conflicts)))

(rule (target yann_stripped.mly) (deps yann.mly)
  (action
    (with-stderr-to yann_stripped.ignored
      (with-stdout-to yann_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets yann_stripped.log yann_stripped.mli yann_stripped.ml
    yann_stripped.stacklang yann_stripped.timings yann_stripped.scount
    yann_stripped.dcount)
  (deps yann_stripped.mly)
  (action
    (with-outputs-to yann_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to yann_stripped.timings %{deps})))))

(alias (name quick) (deps
                      yann_stripped.stacklang))

(rule (targets yann_stripped.cmi yann_stripped.mli.log)
  (deps yann_stripped.mli)
  (action
    (with-stdout-to yann_stripped.mli.dtimings
      (with-stderr-to yann_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c yann_stripped.mli)))))

(rule (targets yann_stripped.cmo yann_stripped.ml.log)
  (deps yann_stripped.ml yann_stripped.cmi)
  (action
    (with-stdout-to yann_stripped.ml.dtimings
      (with-stderr-to yann_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c yann_stripped.ml)))))

(rule (alias test)
  (action (diff yann_stripped.ml.log.exp yann_stripped.ml.log)))

(rule (target yaparser.opp.out) (deps yaparser.mly)
  (action
    (with-outputs-to yaparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff yaparser.opp.exp yaparser.opp.out)))

(rule
  (targets yaparser.out yaparser.automaton yaparser.automaton.resolved
    yaparser.conflicts yaparser.timings)
  (deps yaparser.mly)
  (action
    (with-outputs-to yaparser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to yaparser.timings %{deps})))))

(rule (alias quick) (action (diff yaparser.exp yaparser.out)))

(rule (alias quick)
  (action (diff yaparser.automaton.exp yaparser.automaton)))

(rule (alias quick)
  (action (diff yaparser.automaton.resolved.exp yaparser.automaton.resolved)))

(rule (alias quick)
  (action (diff yaparser.conflicts.exp yaparser.conflicts)))

(rule (target yaparser_stripped.mly) (deps yaparser.mly)
  (action
    (with-stderr-to yaparser_stripped.ignored
      (with-stdout-to yaparser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets yaparser_stripped.log yaparser_stripped.mli yaparser_stripped.ml
    yaparser_stripped.stacklang yaparser_stripped.timings
    yaparser_stripped.scount yaparser_stripped.dcount)
  (deps yaparser_stripped.mly)
  (action
    (with-outputs-to yaparser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to yaparser_stripped.timings %{deps})))))

(alias (name quick) (deps
                      yaparser_stripped.stacklang))

(rule (targets yaparser_stripped.cmi yaparser_stripped.mli.log)
  (deps yaparser_stripped.mli)
  (action
    (with-stdout-to yaparser_stripped.mli.dtimings
      (with-stderr-to yaparser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c yaparser_stripped.mli)))))

(rule (targets yaparser_stripped.cmo yaparser_stripped.ml.log)
  (deps yaparser_stripped.ml yaparser_stripped.cmi)
  (action
    (with-stdout-to yaparser_stripped.ml.dtimings
      (with-stderr-to yaparser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c yaparser_stripped.ml)))))

(rule (alias test)
  (action (diff yaparser_stripped.ml.log.exp yaparser_stripped.ml.log)))

(rule (target zenon.opp.out) (deps zenon.mly)
  (action
    (with-outputs-to zenon.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff zenon.opp.exp zenon.opp.out)))

(rule
  (targets zenon.out zenon.automaton zenon.automaton.resolved zenon.conflicts
    zenon.timings)
  (deps zenon.mly)
  (action
    (with-outputs-to zenon.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to zenon.timings %{deps})))))

(rule (alias quick) (action (diff zenon.exp zenon.out)))

(rule (alias quick) (action (diff zenon.automaton.exp zenon.automaton)))

(rule (alias quick)
  (action (diff zenon.automaton.resolved.exp zenon.automaton.resolved)))

(rule (alias quick) (action (diff zenon.conflicts.exp zenon.conflicts)))

(rule (target zenon_stripped.mly) (deps zenon.mly)
  (action
    (with-stderr-to zenon_stripped.ignored
      (with-stdout-to zenon_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets zenon_stripped.log zenon_stripped.mli zenon_stripped.ml
    zenon_stripped.stacklang zenon_stripped.timings zenon_stripped.scount
    zenon_stripped.dcount)
  (deps zenon_stripped.mly)
  (action
    (with-outputs-to zenon_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to zenon_stripped.timings %{deps})))))

(alias (name quick) (deps
                      zenon_stripped.stacklang))

(rule (targets zenon_stripped.cmi zenon_stripped.mli.log)
  (deps zenon_stripped.mli)
  (action
    (with-stdout-to zenon_stripped.mli.dtimings
      (with-stderr-to zenon_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c zenon_stripped.mli)))))

(rule (targets zenon_stripped.cmo zenon_stripped.ml.log)
  (deps zenon_stripped.ml zenon_stripped.cmi)
  (action
    (with-stdout-to zenon_stripped.ml.dtimings
      (with-stderr-to zenon_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c zenon_stripped.ml)))))

(rule (alias test)
  (action (diff zenon_stripped.ml.log.exp zenon_stripped.ml.log)))

(rule (target zenon.0.8.4-parsecoq.opp.out) (deps zenon.0.8.4-parsecoq.mly)
  (action
    (with-outputs-to zenon.0.8.4-parsecoq.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action (diff zenon.0.8.4-parsecoq.opp.exp zenon.0.8.4-parsecoq.opp.out)))

(rule
  (targets zenon.0.8.4-parsecoq.out zenon.0.8.4-parsecoq.automaton
    zenon.0.8.4-parsecoq.automaton.resolved zenon.0.8.4-parsecoq.conflicts
    zenon.0.8.4-parsecoq.timings)
  (deps zenon.0.8.4-parsecoq.mly)
  (action
    (with-outputs-to zenon.0.8.4-parsecoq.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to zenon.0.8.4-parsecoq.timings %{deps})))))

(rule (alias quick)
  (action (diff zenon.0.8.4-parsecoq.exp zenon.0.8.4-parsecoq.out)))

(rule (alias quick)
  (action
    (diff zenon.0.8.4-parsecoq.automaton.exp zenon.0.8.4-parsecoq.automaton)))

(rule (alias quick)
  (action
    (diff zenon.0.8.4-parsecoq.automaton.resolved.exp
      zenon.0.8.4-parsecoq.automaton.resolved)))

(rule (alias quick)
  (action
    (diff zenon.0.8.4-parsecoq.conflicts.exp zenon.0.8.4-parsecoq.conflicts)))

(rule (target zenon_0_8_4-parsecoq_stripped.mly)
  (deps zenon.0.8.4-parsecoq.mly)
  (action
    (with-stderr-to zenon_0_8_4-parsecoq_stripped.ignored
      (with-stdout-to zenon_0_8_4-parsecoq_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets zenon_0_8_4-parsecoq_stripped.log
    zenon_0_8_4-parsecoq_stripped.mli zenon_0_8_4-parsecoq_stripped.ml
    zenon_0_8_4-parsecoq_stripped.stacklang
    zenon_0_8_4-parsecoq_stripped.timings
    zenon_0_8_4-parsecoq_stripped.scount
    zenon_0_8_4-parsecoq_stripped.dcount)
  (deps zenon_0_8_4-parsecoq_stripped.mly)
  (action
    (with-outputs-to zenon_0_8_4-parsecoq_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to zenon_0_8_4-parsecoq_stripped.timings %{deps})))))

(alias (name quick) (deps
                      zenon_0_8_4-parsecoq_stripped.stacklang))

(rule
  (targets zenon_0_8_4-parsecoq_stripped.cmi
    zenon_0_8_4-parsecoq_stripped.mli.log)
  (deps zenon_0_8_4-parsecoq_stripped.mli)
  (action
    (with-stdout-to zenon_0_8_4-parsecoq_stripped.mli.dtimings
      (with-stderr-to zenon_0_8_4-parsecoq_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          zenon_0_8_4-parsecoq_stripped.mli)))))

(rule
  (targets zenon_0_8_4-parsecoq_stripped.cmo
    zenon_0_8_4-parsecoq_stripped.ml.log)
  (deps zenon_0_8_4-parsecoq_stripped.ml zenon_0_8_4-parsecoq_stripped.cmi)
  (action
    (with-stdout-to zenon_0_8_4-parsecoq_stripped.ml.dtimings
      (with-stderr-to zenon_0_8_4-parsecoq_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          zenon_0_8_4-parsecoq_stripped.ml)))))

(rule (alias test)
  (action
    (diff zenon_0_8_4-parsecoq_stripped.ml.log.exp
      zenon_0_8_4-parsecoq_stripped.ml.log)))

(rule (target zipperposition.1.5-Parse_dk.opp.out)
  (deps zipperposition.1.5-Parse_dk.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_dk.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_dk.opp.exp
      zipperposition.1.5-Parse_dk.opp.out)))

(rule
  (targets zipperposition.1.5-Parse_dk.out
    zipperposition.1.5-Parse_dk.automaton
    zipperposition.1.5-Parse_dk.automaton.resolved
    zipperposition.1.5-Parse_dk.conflicts
    zipperposition.1.5-Parse_dk.timings)
  (deps zipperposition.1.5-Parse_dk.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_dk.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to zipperposition.1.5-Parse_dk.timings %{deps})))))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_dk.exp zipperposition.1.5-Parse_dk.out)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_dk.automaton.exp
      zipperposition.1.5-Parse_dk.automaton)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_dk.automaton.resolved.exp
      zipperposition.1.5-Parse_dk.automaton.resolved)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_dk.conflicts.exp
      zipperposition.1.5-Parse_dk.conflicts)))

(rule (target zipperposition_1_5-Parse_dk_stripped.mly)
  (deps zipperposition.1.5-Parse_dk.mly)
  (action
    (with-stderr-to zipperposition_1_5-Parse_dk_stripped.ignored
      (with-stdout-to zipperposition_1_5-Parse_dk_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets zipperposition_1_5-Parse_dk_stripped.log
    zipperposition_1_5-Parse_dk_stripped.mli
    zipperposition_1_5-Parse_dk_stripped.ml
    zipperposition_1_5-Parse_dk_stripped.stacklang
    zipperposition_1_5-Parse_dk_stripped.timings
    zipperposition_1_5-Parse_dk_stripped.scount
    zipperposition_1_5-Parse_dk_stripped.dcount)
  (deps zipperposition_1_5-Parse_dk_stripped.mly)
  (action
    (with-outputs-to zipperposition_1_5-Parse_dk_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to zipperposition_1_5-Parse_dk_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      zipperposition_1_5-Parse_dk_stripped.stacklang))

(rule
  (targets zipperposition_1_5-Parse_dk_stripped.cmi
    zipperposition_1_5-Parse_dk_stripped.mli.log)
  (deps zipperposition_1_5-Parse_dk_stripped.mli)
  (action
    (with-stdout-to zipperposition_1_5-Parse_dk_stripped.mli.dtimings
      (with-stderr-to zipperposition_1_5-Parse_dk_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          zipperposition_1_5-Parse_dk_stripped.mli)))))

(rule
  (targets zipperposition_1_5-Parse_dk_stripped.cmo
    zipperposition_1_5-Parse_dk_stripped.ml.log)
  (deps zipperposition_1_5-Parse_dk_stripped.ml
    zipperposition_1_5-Parse_dk_stripped.cmi)
  (action
    (with-stdout-to zipperposition_1_5-Parse_dk_stripped.ml.dtimings
      (with-stderr-to zipperposition_1_5-Parse_dk_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          zipperposition_1_5-Parse_dk_stripped.ml)))))

(rule (alias test)
  (action
    (diff zipperposition_1_5-Parse_dk_stripped.ml.log.exp
      zipperposition_1_5-Parse_dk_stripped.ml.log)))

(rule (target zipperposition.1.5-Parse_tptp.opp.out)
  (deps zipperposition.1.5-Parse_tptp.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_tptp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_tptp.opp.exp
      zipperposition.1.5-Parse_tptp.opp.out)))

(rule
  (targets zipperposition.1.5-Parse_tptp.out
    zipperposition.1.5-Parse_tptp.automaton
    zipperposition.1.5-Parse_tptp.automaton.resolved
    zipperposition.1.5-Parse_tptp.conflicts
    zipperposition.1.5-Parse_tptp.timings)
  (deps zipperposition.1.5-Parse_tptp.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_tptp.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to zipperposition.1.5-Parse_tptp.timings %{deps})))))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_tptp.exp
      zipperposition.1.5-Parse_tptp.out)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_tptp.automaton.exp
      zipperposition.1.5-Parse_tptp.automaton)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_tptp.automaton.resolved.exp
      zipperposition.1.5-Parse_tptp.automaton.resolved)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_tptp.conflicts.exp
      zipperposition.1.5-Parse_tptp.conflicts)))

(rule (target zipperposition_1_5-Parse_tptp_stripped.mly)
  (deps zipperposition.1.5-Parse_tptp.mly)
  (action
    (with-stderr-to zipperposition_1_5-Parse_tptp_stripped.ignored
      (with-stdout-to zipperposition_1_5-Parse_tptp_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets zipperposition_1_5-Parse_tptp_stripped.log
    zipperposition_1_5-Parse_tptp_stripped.mli
    zipperposition_1_5-Parse_tptp_stripped.ml
    zipperposition_1_5-Parse_tptp_stripped.stacklang
    zipperposition_1_5-Parse_tptp_stripped.timings
    zipperposition_1_5-Parse_tptp_stripped.scount
    zipperposition_1_5-Parse_tptp_stripped.dcount)
  (deps zipperposition_1_5-Parse_tptp_stripped.mly)
  (action
    (with-outputs-to zipperposition_1_5-Parse_tptp_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to zipperposition_1_5-Parse_tptp_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      zipperposition_1_5-Parse_tptp_stripped.stacklang))

(rule
  (targets zipperposition_1_5-Parse_tptp_stripped.cmi
    zipperposition_1_5-Parse_tptp_stripped.mli.log)
  (deps zipperposition_1_5-Parse_tptp_stripped.mli)
  (action
    (with-stdout-to zipperposition_1_5-Parse_tptp_stripped.mli.dtimings
      (with-stderr-to zipperposition_1_5-Parse_tptp_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          zipperposition_1_5-Parse_tptp_stripped.mli)))))

(rule
  (targets zipperposition_1_5-Parse_tptp_stripped.cmo
    zipperposition_1_5-Parse_tptp_stripped.ml.log)
  (deps zipperposition_1_5-Parse_tptp_stripped.ml
    zipperposition_1_5-Parse_tptp_stripped.cmi)
  (action
    (with-stdout-to zipperposition_1_5-Parse_tptp_stripped.ml.dtimings
      (with-stderr-to zipperposition_1_5-Parse_tptp_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          zipperposition_1_5-Parse_tptp_stripped.ml)))))

(rule (alias test)
  (action
    (diff zipperposition_1_5-Parse_tptp_stripped.ml.log.exp
      zipperposition_1_5-Parse_tptp_stripped.ml.log)))

(rule (target zipperposition.1.5-Parse_zf.opp.out)
  (deps zipperposition.1.5-Parse_zf.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_zf.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_zf.opp.exp
      zipperposition.1.5-Parse_zf.opp.out)))

(rule
  (targets zipperposition.1.5-Parse_zf.out
    zipperposition.1.5-Parse_zf.automaton
    zipperposition.1.5-Parse_zf.automaton.resolved
    zipperposition.1.5-Parse_zf.conflicts
    zipperposition.1.5-Parse_zf.timings)
  (deps zipperposition.1.5-Parse_zf.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_zf.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to zipperposition.1.5-Parse_zf.timings %{deps})))))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_zf.exp zipperposition.1.5-Parse_zf.out)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_zf.automaton.exp
      zipperposition.1.5-Parse_zf.automaton)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_zf.automaton.resolved.exp
      zipperposition.1.5-Parse_zf.automaton.resolved)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Parse_zf.conflicts.exp
      zipperposition.1.5-Parse_zf.conflicts)))

(rule (target zipperposition_1_5-Parse_zf_stripped.mly)
  (deps zipperposition.1.5-Parse_zf.mly)
  (action
    (with-stderr-to zipperposition_1_5-Parse_zf_stripped.ignored
      (with-stdout-to zipperposition_1_5-Parse_zf_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets zipperposition_1_5-Parse_zf_stripped.log
    zipperposition_1_5-Parse_zf_stripped.mli
    zipperposition_1_5-Parse_zf_stripped.ml
    zipperposition_1_5-Parse_zf_stripped.stacklang
    zipperposition_1_5-Parse_zf_stripped.timings
    zipperposition_1_5-Parse_zf_stripped.scount
    zipperposition_1_5-Parse_zf_stripped.dcount)
  (deps zipperposition_1_5-Parse_zf_stripped.mly)
  (action
    (with-outputs-to zipperposition_1_5-Parse_zf_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to zipperposition_1_5-Parse_zf_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      zipperposition_1_5-Parse_zf_stripped.stacklang))

(rule
  (targets zipperposition_1_5-Parse_zf_stripped.cmi
    zipperposition_1_5-Parse_zf_stripped.mli.log)
  (deps zipperposition_1_5-Parse_zf_stripped.mli)
  (action
    (with-stdout-to zipperposition_1_5-Parse_zf_stripped.mli.dtimings
      (with-stderr-to zipperposition_1_5-Parse_zf_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          zipperposition_1_5-Parse_zf_stripped.mli)))))

(rule
  (targets zipperposition_1_5-Parse_zf_stripped.cmo
    zipperposition_1_5-Parse_zf_stripped.ml.log)
  (deps zipperposition_1_5-Parse_zf_stripped.ml
    zipperposition_1_5-Parse_zf_stripped.cmi)
  (action
    (with-stdout-to zipperposition_1_5-Parse_zf_stripped.ml.dtimings
      (with-stderr-to zipperposition_1_5-Parse_zf_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          zipperposition_1_5-Parse_zf_stripped.ml)))))

(rule (alias test)
  (action
    (diff zipperposition_1_5-Parse_zf_stripped.ml.log.exp
      zipperposition_1_5-Parse_zf_stripped.ml.log)))

(rule (target zipperposition.1.5-Tip_parser.opp.out)
  (deps zipperposition.1.5-Tip_parser.mly)
  (action
    (with-outputs-to zipperposition.1.5-Tip_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Tip_parser.opp.exp
      zipperposition.1.5-Tip_parser.opp.out)))

(rule
  (targets zipperposition.1.5-Tip_parser.out
    zipperposition.1.5-Tip_parser.automaton
    zipperposition.1.5-Tip_parser.automaton.resolved
    zipperposition.1.5-Tip_parser.conflicts
    zipperposition.1.5-Tip_parser.timings)
  (deps zipperposition.1.5-Tip_parser.mly)
  (action
    (with-outputs-to zipperposition.1.5-Tip_parser.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to zipperposition.1.5-Tip_parser.timings %{deps})))))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Tip_parser.exp
      zipperposition.1.5-Tip_parser.out)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Tip_parser.automaton.exp
      zipperposition.1.5-Tip_parser.automaton)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Tip_parser.automaton.resolved.exp
      zipperposition.1.5-Tip_parser.automaton.resolved)))

(rule (alias quick)
  (action
    (diff zipperposition.1.5-Tip_parser.conflicts.exp
      zipperposition.1.5-Tip_parser.conflicts)))

(rule (target zipperposition_1_5-Tip_parser_stripped.mly)
  (deps zipperposition.1.5-Tip_parser.mly)
  (action
    (with-stderr-to zipperposition_1_5-Tip_parser_stripped.ignored
      (with-stdout-to zipperposition_1_5-Tip_parser_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets zipperposition_1_5-Tip_parser_stripped.log
    zipperposition_1_5-Tip_parser_stripped.mli
    zipperposition_1_5-Tip_parser_stripped.ml
    zipperposition_1_5-Tip_parser_stripped.stacklang
    zipperposition_1_5-Tip_parser_stripped.timings
    zipperposition_1_5-Tip_parser_stripped.scount
    zipperposition_1_5-Tip_parser_stripped.dcount)
  (deps zipperposition_1_5-Tip_parser_stripped.mly)
  (action
    (with-outputs-to zipperposition_1_5-Tip_parser_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to zipperposition_1_5-Tip_parser_stripped.timings
          %{deps})))))

(alias (name quick) (deps
                      zipperposition_1_5-Tip_parser_stripped.stacklang))

(rule
  (targets zipperposition_1_5-Tip_parser_stripped.cmi
    zipperposition_1_5-Tip_parser_stripped.mli.log)
  (deps zipperposition_1_5-Tip_parser_stripped.mli)
  (action
    (with-stdout-to zipperposition_1_5-Tip_parser_stripped.mli.dtimings
      (with-stderr-to zipperposition_1_5-Tip_parser_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c
          zipperposition_1_5-Tip_parser_stripped.mli)))))

(rule
  (targets zipperposition_1_5-Tip_parser_stripped.cmo
    zipperposition_1_5-Tip_parser_stripped.ml.log)
  (deps zipperposition_1_5-Tip_parser_stripped.ml
    zipperposition_1_5-Tip_parser_stripped.cmi)
  (action
    (with-stdout-to zipperposition_1_5-Tip_parser_stripped.ml.dtimings
      (with-stderr-to zipperposition_1_5-Tip_parser_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c
          zipperposition_1_5-Tip_parser_stripped.ml)))))

(rule (alias test)
  (action
    (diff zipperposition_1_5-Tip_parser_stripped.ml.log.exp
      zipperposition_1_5-Tip_parser_stripped.ml.log)))

(rule (target zyvaall.opp.out) (deps zyvaall.mly)
  (action
    (with-outputs-to zyvaall.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff zyvaall.opp.exp zyvaall.opp.out)))

(rule
  (targets zyvaall.out zyvaall.automaton zyvaall.automaton.resolved
    zyvaall.conflicts zyvaall.timings)
  (deps zyvaall.mly)
  (action
    (with-outputs-to zyvaall.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to zyvaall.timings %{deps})))))

(rule (alias quick) (action (diff zyvaall.exp zyvaall.out)))

(rule (alias quick) (action (diff zyvaall.automaton.exp zyvaall.automaton)))

(rule (alias quick)
  (action (diff zyvaall.automaton.resolved.exp zyvaall.automaton.resolved)))

(rule (alias quick) (action (diff zyvaall.conflicts.exp zyvaall.conflicts)))

(rule (target zyvaall_stripped.mly) (deps zyvaall.mly)
  (action
    (with-stderr-to zyvaall_stripped.ignored
      (with-stdout-to zyvaall_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets zyvaall_stripped.log zyvaall_stripped.mli zyvaall_stripped.ml
    zyvaall_stripped.stacklang zyvaall_stripped.timings
    zyvaall_stripped.scount zyvaall_stripped.dcount)
  (deps zyvaall_stripped.mly)
  (action
    (with-outputs-to zyvaall_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to zyvaall_stripped.timings %{deps})))))

(alias (name quick) (deps
                      zyvaall_stripped.stacklang))

(rule (targets zyvaall_stripped.cmi zyvaall_stripped.mli.log)
  (deps zyvaall_stripped.mli)
  (action
    (with-stdout-to zyvaall_stripped.mli.dtimings
      (with-stderr-to zyvaall_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c zyvaall_stripped.mli)))))

(rule (targets zyvaall_stripped.cmo zyvaall_stripped.ml.log)
  (deps zyvaall_stripped.ml zyvaall_stripped.cmi)
  (action
    (with-stdout-to zyvaall_stripped.ml.dtimings
      (with-stderr-to zyvaall_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c zyvaall_stripped.ml)))))

(rule (alias test)
  (action (diff zyvaall_stripped.ml.log.exp zyvaall_stripped.ml.log)))

(rule (target zyvaflo.opp.out) (deps zyvaflo.mly)
  (action
    (with-outputs-to zyvaflo.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias quick) (action (diff zyvaflo.opp.exp zyvaflo.opp.out)))

(rule
  (targets zyvaflo.out zyvaflo.automaton zyvaflo.automaton.resolved
    zyvaflo.conflicts zyvaflo.timings)
  (deps zyvaflo.mly)
  (action
    (with-outputs-to zyvaflo.out
      (with-accepted-exit-codes 0
        (run menhir --table --dump --dump-resolved --explain -lg 2 -la 2 -lc
          2 --timings-to zyvaflo.timings %{deps})))))

(rule (alias quick) (action (diff zyvaflo.exp zyvaflo.out)))

(rule (alias quick) (action (diff zyvaflo.automaton.exp zyvaflo.automaton)))

(rule (alias quick)
  (action (diff zyvaflo.automaton.resolved.exp zyvaflo.automaton.resolved)))

(rule (alias quick) (action (diff zyvaflo.conflicts.exp zyvaflo.conflicts)))

(rule (target zyvaflo_stripped.mly) (deps zyvaflo.mly)
  (action
    (with-stderr-to zyvaflo_stripped.ignored
      (with-stdout-to zyvaflo_stripped.mly
        (with-accepted-exit-codes 0
          (run menhir --only-preprocess-uu %{deps}))))))

(rule
  (targets zyvaflo_stripped.log zyvaflo_stripped.mli zyvaflo_stripped.ml
    zyvaflo_stripped.stacklang zyvaflo_stripped.timings
    zyvaflo_stripped.scount zyvaflo_stripped.dcount)
  (deps zyvaflo_stripped.mly)
  (action
    (with-outputs-to zyvaflo_stripped.log
      (with-accepted-exit-codes 0
        (run menhir --infer --stacklang-test --stacklang-dump -lg 2 -la 2 -lc
          2 --timings-to zyvaflo_stripped.timings %{deps})))))

(alias (name quick) (deps
                      zyvaflo_stripped.stacklang))

(rule (targets zyvaflo_stripped.cmi zyvaflo_stripped.mli.log)
  (deps zyvaflo_stripped.mli)
  (action
    (with-stdout-to zyvaflo_stripped.mli.dtimings
      (with-stderr-to zyvaflo_stripped.mli.log
        (run ocamlc -w A-24 -warn-error A -c zyvaflo_stripped.mli)))))

(rule (targets zyvaflo_stripped.cmo zyvaflo_stripped.ml.log)
  (deps zyvaflo_stripped.ml zyvaflo_stripped.cmi)
  (action
    (with-stdout-to zyvaflo_stripped.ml.dtimings
      (with-stderr-to zyvaflo_stripped.ml.log
        (run ocamlc -w A-24 -warn-error A -c zyvaflo_stripped.ml)))))

(rule (alias test)
  (action (diff zyvaflo_stripped.ml.log.exp zyvaflo_stripped.ml.log)))

(alias (name test) (deps
                     (alias quick)))

