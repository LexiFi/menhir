;; This file has been auto-generated. Please do not edit it.
;; Instead, edit [test.ml] and run [make depend].

(rule (target JSParse.opp.out) (deps JSParse.mly)
  (action
    (with-outputs-to JSParse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias JSParse) (action (diff JSParse.opp.exp JSParse.opp.out)))

(rule
  (targets JSParse.out JSParse.automaton JSParse.automaton.resolved
    JSParse.conflicts JSParse.timings)
  (deps JSParse.mly)
  (action
    (with-outputs-to JSParse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to JSParse.timings %{deps})))))

(rule (alias JSParse) (action (diff JSParse.exp JSParse.out)))

(rule (alias JSParse)
  (action (diff JSParse.automaton.exp JSParse.automaton)))

(rule (alias JSParse)
  (action (diff JSParse.automaton.resolved.exp JSParse.automaton.resolved)))

(rule (alias JSParse)
  (action (diff JSParse.conflicts.exp JSParse.conflicts)))

(rule (target K3Parser.opp.out) (deps K3Parser.mly)
  (action
    (with-outputs-to K3Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias K3Parser) (action (diff K3Parser.opp.exp K3Parser.opp.out)))

(rule
  (targets K3Parser.out K3Parser.automaton K3Parser.automaton.resolved
    K3Parser.conflicts K3Parser.timings)
  (deps K3Parser.mly)
  (action
    (with-outputs-to K3Parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to K3Parser.timings %{deps})))))

(rule (alias K3Parser) (action (diff K3Parser.exp K3Parser.out)))

(rule (alias K3Parser)
  (action (diff K3Parser.automaton.exp K3Parser.automaton)))

(rule (alias K3Parser)
  (action (diff K3Parser.automaton.resolved.exp K3Parser.automaton.resolved)))

(rule (alias K3Parser)
  (action (diff K3Parser.conflicts.exp K3Parser.conflicts)))

(rule (target KaSim.4.0.0-kappaParser.opp.out)
  (deps KaSim.4.0.0-kappaParser.mly)
  (action
    (with-outputs-to KaSim.4.0.0-kappaParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias KaSim.4.0.0-kappaParser)
  (action
    (diff KaSim.4.0.0-kappaParser.opp.exp KaSim.4.0.0-kappaParser.opp.out)))

(rule
  (targets KaSim.4.0.0-kappaParser.out KaSim.4.0.0-kappaParser.automaton
    KaSim.4.0.0-kappaParser.automaton.resolved
    KaSim.4.0.0-kappaParser.conflicts KaSim.4.0.0-kappaParser.timings)
  (deps KaSim.4.0.0-kappaParser.mly)
  (action
    (with-outputs-to KaSim.4.0.0-kappaParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to KaSim.4.0.0-kappaParser.timings %{deps})))))

(rule (alias KaSim.4.0.0-kappaParser)
  (action (diff KaSim.4.0.0-kappaParser.exp KaSim.4.0.0-kappaParser.out)))

(rule (alias KaSim.4.0.0-kappaParser)
  (action
    (diff KaSim.4.0.0-kappaParser.automaton.exp
      KaSim.4.0.0-kappaParser.automaton)))

(rule (alias KaSim.4.0.0-kappaParser)
  (action
    (diff KaSim.4.0.0-kappaParser.automaton.resolved.exp
      KaSim.4.0.0-kappaParser.automaton.resolved)))

(rule (alias KaSim.4.0.0-kappaParser)
  (action
    (diff KaSim.4.0.0-kappaParser.conflicts.exp
      KaSim.4.0.0-kappaParser.conflicts)))

(rule (target KaSim.4.0.0-kparser4.opp.out) (deps KaSim.4.0.0-kparser4.mly)
  (action
    (with-outputs-to KaSim.4.0.0-kparser4.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias KaSim.4.0.0-kparser4)
  (action (diff KaSim.4.0.0-kparser4.opp.exp KaSim.4.0.0-kparser4.opp.out)))

(rule
  (targets KaSim.4.0.0-kparser4.out KaSim.4.0.0-kparser4.automaton
    KaSim.4.0.0-kparser4.automaton.resolved KaSim.4.0.0-kparser4.conflicts
    KaSim.4.0.0-kparser4.timings)
  (deps KaSim.4.0.0-kparser4.mly)
  (action
    (with-outputs-to KaSim.4.0.0-kparser4.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to KaSim.4.0.0-kparser4.timings %{deps})))))

(rule (alias KaSim.4.0.0-kparser4)
  (action (diff KaSim.4.0.0-kparser4.exp KaSim.4.0.0-kparser4.out)))

(rule (alias KaSim.4.0.0-kparser4)
  (action
    (diff KaSim.4.0.0-kparser4.automaton.exp KaSim.4.0.0-kparser4.automaton)))

(rule (alias KaSim.4.0.0-kparser4)
  (action
    (diff KaSim.4.0.0-kparser4.automaton.resolved.exp
      KaSim.4.0.0-kparser4.automaton.resolved)))

(rule (alias KaSim.4.0.0-kparser4)
  (action
    (diff KaSim.4.0.0-kparser4.conflicts.exp KaSim.4.0.0-kparser4.conflicts)))

(rule (target albatross.opp.out) (deps albatross.mly)
  (action
    (with-outputs-to albatross.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias albatross) (action (diff albatross.opp.exp albatross.opp.out)))

(rule
  (targets albatross.out albatross.automaton albatross.automaton.resolved
    albatross.conflicts albatross.timings)
  (deps albatross.mly)
  (action
    (with-outputs-to albatross.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to albatross.timings %{deps})))))

(rule (alias albatross) (action (diff albatross.exp albatross.out)))

(rule (alias albatross)
  (action (diff albatross.automaton.exp albatross.automaton)))

(rule (alias albatross)
  (action
    (diff albatross.automaton.resolved.exp albatross.automaton.resolved)))

(rule (alias albatross)
  (action (diff albatross.conflicts.exp albatross.conflicts)))

(rule (target alphaCaml.opp.out) (deps alphaCaml.mly)
  (action
    (with-outputs-to alphaCaml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias alphaCaml) (action (diff alphaCaml.opp.exp alphaCaml.opp.out)))

(rule
  (targets alphaCaml.out alphaCaml.automaton alphaCaml.automaton.resolved
    alphaCaml.conflicts alphaCaml.timings)
  (deps alphaCaml.mly)
  (action
    (with-outputs-to alphaCaml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to alphaCaml.timings %{deps})))))

(rule (alias alphaCaml) (action (diff alphaCaml.exp alphaCaml.out)))

(rule (alias alphaCaml)
  (action (diff alphaCaml.automaton.exp alphaCaml.automaton)))

(rule (alias alphaCaml)
  (action
    (diff alphaCaml.automaton.resolved.exp alphaCaml.automaton.resolved)))

(rule (alias alphaCaml)
  (action (diff alphaCaml.conflicts.exp alphaCaml.conflicts)))

(rule (target alphaCaml-demos-interactive.opp.out)
  (deps alphaCaml-demos-interactive.mly)
  (action
    (with-outputs-to alphaCaml-demos-interactive.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias alphaCaml-demos-interactive)
  (action
    (diff alphaCaml-demos-interactive.opp.exp
      alphaCaml-demos-interactive.opp.out)))

(rule
  (targets alphaCaml-demos-interactive.out
    alphaCaml-demos-interactive.automaton
    alphaCaml-demos-interactive.automaton.resolved
    alphaCaml-demos-interactive.conflicts
    alphaCaml-demos-interactive.timings)
  (deps alphaCaml-demos-interactive.mly)
  (action
    (with-outputs-to alphaCaml-demos-interactive.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to alphaCaml-demos-interactive.timings %{deps})))))

(rule (alias alphaCaml-demos-interactive)
  (action
    (diff alphaCaml-demos-interactive.exp alphaCaml-demos-interactive.out)))

(rule (alias alphaCaml-demos-interactive)
  (action
    (diff alphaCaml-demos-interactive.automaton.exp
      alphaCaml-demos-interactive.automaton)))

(rule (alias alphaCaml-demos-interactive)
  (action
    (diff alphaCaml-demos-interactive.automaton.resolved.exp
      alphaCaml-demos-interactive.automaton.resolved)))

(rule (alias alphaCaml-demos-interactive)
  (action
    (diff alphaCaml-demos-interactive.conflicts.exp
      alphaCaml-demos-interactive.conflicts)))

(rule (target alphaCaml-demos-mixins.opp.out)
  (deps alphaCaml-demos-mixins.mly)
  (action
    (with-outputs-to alphaCaml-demos-mixins.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias alphaCaml-demos-mixins)
  (action
    (diff alphaCaml-demos-mixins.opp.exp alphaCaml-demos-mixins.opp.out)))

(rule
  (targets alphaCaml-demos-mixins.out alphaCaml-demos-mixins.automaton
    alphaCaml-demos-mixins.automaton.resolved
    alphaCaml-demos-mixins.conflicts alphaCaml-demos-mixins.timings)
  (deps alphaCaml-demos-mixins.mly)
  (action
    (with-outputs-to alphaCaml-demos-mixins.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to alphaCaml-demos-mixins.timings %{deps})))))

(rule (alias alphaCaml-demos-mixins)
  (action (diff alphaCaml-demos-mixins.exp alphaCaml-demos-mixins.out)))

(rule (alias alphaCaml-demos-mixins)
  (action
    (diff alphaCaml-demos-mixins.automaton.exp
      alphaCaml-demos-mixins.automaton)))

(rule (alias alphaCaml-demos-mixins)
  (action
    (diff alphaCaml-demos-mixins.automaton.resolved.exp
      alphaCaml-demos-mixins.automaton.resolved)))

(rule (alias alphaCaml-demos-mixins)
  (action
    (diff alphaCaml-demos-mixins.conflicts.exp
      alphaCaml-demos-mixins.conflicts)))

(rule (target alphaCaml-demos-poplmark.opp.out)
  (deps alphaCaml-demos-poplmark.mly)
  (action
    (with-outputs-to alphaCaml-demos-poplmark.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias alphaCaml-demos-poplmark)
  (action
    (diff alphaCaml-demos-poplmark.opp.exp alphaCaml-demos-poplmark.opp.out)))

(rule
  (targets alphaCaml-demos-poplmark.out alphaCaml-demos-poplmark.automaton
    alphaCaml-demos-poplmark.automaton.resolved
    alphaCaml-demos-poplmark.conflicts alphaCaml-demos-poplmark.timings)
  (deps alphaCaml-demos-poplmark.mly)
  (action
    (with-outputs-to alphaCaml-demos-poplmark.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to alphaCaml-demos-poplmark.timings %{deps})))))

(rule (alias alphaCaml-demos-poplmark)
  (action (diff alphaCaml-demos-poplmark.exp alphaCaml-demos-poplmark.out)))

(rule (alias alphaCaml-demos-poplmark)
  (action
    (diff alphaCaml-demos-poplmark.automaton.exp
      alphaCaml-demos-poplmark.automaton)))

(rule (alias alphaCaml-demos-poplmark)
  (action
    (diff alphaCaml-demos-poplmark.automaton.resolved.exp
      alphaCaml-demos-poplmark.automaton.resolved)))

(rule (alias alphaCaml-demos-poplmark)
  (action
    (diff alphaCaml-demos-poplmark.conflicts.exp
      alphaCaml-demos-poplmark.conflicts)))

(rule (target alphaprolog.opp.out) (deps alphaprolog.mly)
  (action
    (with-outputs-to alphaprolog.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias alphaprolog)
  (action (diff alphaprolog.opp.exp alphaprolog.opp.out)))

(rule
  (targets alphaprolog.out alphaprolog.automaton
    alphaprolog.automaton.resolved alphaprolog.conflicts alphaprolog.timings)
  (deps alphaprolog.mly)
  (action
    (with-outputs-to alphaprolog.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to alphaprolog.timings %{deps})))))

(rule (alias alphaprolog) (action (diff alphaprolog.exp alphaprolog.out)))

(rule (alias alphaprolog)
  (action (diff alphaprolog.automaton.exp alphaprolog.automaton)))

(rule (alias alphaprolog)
  (action
    (diff alphaprolog.automaton.resolved.exp alphaprolog.automaton.resolved)))

(rule (alias alphaprolog)
  (action (diff alphaprolog.conflicts.exp alphaprolog.conflicts)))

(rule (target amalthea.opp.out) (deps amalthea.mly)
  (action
    (with-outputs-to amalthea.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias amalthea) (action (diff amalthea.opp.exp amalthea.opp.out)))

(rule
  (targets amalthea.out amalthea.automaton amalthea.automaton.resolved
    amalthea.conflicts amalthea.timings)
  (deps amalthea.mly)
  (action
    (with-outputs-to amalthea.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to amalthea.timings %{deps})))))

(rule (alias amalthea) (action (diff amalthea.exp amalthea.out)))

(rule (alias amalthea)
  (action (diff amalthea.automaton.exp amalthea.automaton)))

(rule (alias amalthea)
  (action (diff amalthea.automaton.resolved.exp amalthea.automaton.resolved)))

(rule (alias amalthea)
  (action (diff amalthea.conflicts.exp amalthea.conflicts)))

(rule (target andromeda.opp.out) (deps andromeda.mly)
  (action
    (with-outputs-to andromeda.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias andromeda) (action (diff andromeda.opp.exp andromeda.opp.out)))

(rule
  (targets andromeda.out andromeda.automaton andromeda.automaton.resolved
    andromeda.conflicts andromeda.timings)
  (deps andromeda.mly)
  (action
    (with-outputs-to andromeda.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to andromeda.timings %{deps})))))

(rule (alias andromeda) (action (diff andromeda.exp andromeda.out)))

(rule (alias andromeda)
  (action (diff andromeda.automaton.exp andromeda.automaton)))

(rule (alias andromeda)
  (action
    (diff andromeda.automaton.resolved.exp andromeda.automaton.resolved)))

(rule (alias andromeda)
  (action (diff andromeda.conflicts.exp andromeda.conflicts)))

(rule (target anonymous.opp.out) (deps anonymous.mly)
  (action
    (with-outputs-to anonymous.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias anonymous) (action (diff anonymous.opp.exp anonymous.opp.out)))

(rule
  (targets anonymous.out anonymous.automaton anonymous.automaton.resolved
    anonymous.conflicts anonymous.timings)
  (deps anonymous.mly)
  (action
    (with-outputs-to anonymous.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to anonymous.timings %{deps})))))

(rule (alias anonymous) (action (diff anonymous.exp anonymous.out)))

(rule (alias anonymous)
  (action (diff anonymous.automaton.exp anonymous.automaton)))

(rule (alias anonymous)
  (action
    (diff anonymous.automaton.resolved.exp anonymous.automaton.resolved)))

(rule (alias anonymous)
  (action (diff anonymous.conflicts.exp anonymous.conflicts)))

(rule (target anonymous-nested.opp.out) (deps anonymous-nested.mly)
  (action
    (with-outputs-to anonymous-nested.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias anonymous-nested)
  (action (diff anonymous-nested.opp.exp anonymous-nested.opp.out)))

(rule
  (targets anonymous-nested.out anonymous-nested.automaton
    anonymous-nested.automaton.resolved anonymous-nested.conflicts
    anonymous-nested.timings)
  (deps anonymous-nested.mly)
  (action
    (with-outputs-to anonymous-nested.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to anonymous-nested.timings %{deps})))))

(rule (alias anonymous-nested)
  (action (diff anonymous-nested.exp anonymous-nested.out)))

(rule (alias anonymous-nested)
  (action (diff anonymous-nested.automaton.exp anonymous-nested.automaton)))

(rule (alias anonymous-nested)
  (action
    (diff anonymous-nested.automaton.resolved.exp
      anonymous-nested.automaton.resolved)))

(rule (alias anonymous-nested)
  (action (diff anonymous-nested.conflicts.exp anonymous-nested.conflicts)))

(rule (target anonymous-param.opp.out) (deps anonymous-param.mly)
  (action
    (with-outputs-to anonymous-param.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias anonymous-param)
  (action (diff anonymous-param.opp.exp anonymous-param.opp.out)))

(rule
  (targets anonymous-param.out anonymous-param.automaton
    anonymous-param.automaton.resolved anonymous-param.conflicts
    anonymous-param.timings)
  (deps anonymous-param.mly)
  (action
    (with-outputs-to anonymous-param.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to anonymous-param.timings %{deps})))))

(rule (alias anonymous-param)
  (action (diff anonymous-param.exp anonymous-param.out)))

(rule (alias anonymous-param)
  (action (diff anonymous-param.automaton.exp anonymous-param.automaton)))

(rule (alias anonymous-param)
  (action
    (diff anonymous-param.automaton.resolved.exp
      anonymous-param.automaton.resolved)))

(rule (alias anonymous-param)
  (action (diff anonymous-param.conflicts.exp anonymous-param.conflicts)))

(rule (target anonymous-param-redundant.opp.out)
  (deps anonymous-param-redundant.mly)
  (action
    (with-outputs-to anonymous-param-redundant.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias anonymous-param-redundant)
  (action
    (diff anonymous-param-redundant.opp.exp
      anonymous-param-redundant.opp.out)))

(rule
  (targets anonymous-param-redundant.out anonymous-param-redundant.automaton
    anonymous-param-redundant.automaton.resolved
    anonymous-param-redundant.conflicts anonymous-param-redundant.timings)
  (deps anonymous-param-redundant.mly)
  (action
    (with-outputs-to anonymous-param-redundant.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to anonymous-param-redundant.timings %{deps})))))

(rule (alias anonymous-param-redundant)
  (action (diff anonymous-param-redundant.exp anonymous-param-redundant.out)))

(rule (alias anonymous-param-redundant)
  (action
    (diff anonymous-param-redundant.automaton.exp
      anonymous-param-redundant.automaton)))

(rule (alias anonymous-param-redundant)
  (action
    (diff anonymous-param-redundant.automaton.resolved.exp
      anonymous-param-redundant.automaton.resolved)))

(rule (alias anonymous-param-redundant)
  (action
    (diff anonymous-param-redundant.conflicts.exp
      anonymous-param-redundant.conflicts)))

(rule (target apron.20160125-apron_parser.opp.out)
  (deps apron.20160125-apron_parser.mly)
  (action
    (with-outputs-to apron.20160125-apron_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias apron.20160125-apron_parser)
  (action
    (diff apron.20160125-apron_parser.opp.exp
      apron.20160125-apron_parser.opp.out)))

(rule
  (targets apron.20160125-apron_parser.out
    apron.20160125-apron_parser.automaton
    apron.20160125-apron_parser.automaton.resolved
    apron.20160125-apron_parser.conflicts
    apron.20160125-apron_parser.timings)
  (deps apron.20160125-apron_parser.mly)
  (action
    (with-outputs-to apron.20160125-apron_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to apron.20160125-apron_parser.timings %{deps})))))

(rule (alias apron.20160125-apron_parser)
  (action
    (diff apron.20160125-apron_parser.exp apron.20160125-apron_parser.out)))

(rule (alias apron.20160125-apron_parser)
  (action
    (diff apron.20160125-apron_parser.automaton.exp
      apron.20160125-apron_parser.automaton)))

(rule (alias apron.20160125-apron_parser)
  (action
    (diff apron.20160125-apron_parser.automaton.resolved.exp
      apron.20160125-apron_parser.automaton.resolved)))

(rule (alias apron.20160125-apron_parser)
  (action
    (diff apron.20160125-apron_parser.conflicts.exp
      apron.20160125-apron_parser.conflicts)))

(rule (target atd_parser.opp.out) (deps atd_parser.mly)
  (action
    (with-outputs-to atd_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias atd_parser)
  (action (diff atd_parser.opp.exp atd_parser.opp.out)))

(rule
  (targets atd_parser.out atd_parser.automaton atd_parser.automaton.resolved
    atd_parser.conflicts atd_parser.timings)
  (deps atd_parser.mly)
  (action
    (with-outputs-to atd_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to atd_parser.timings %{deps})))))

(rule (alias atd_parser) (action (diff atd_parser.exp atd_parser.out)))

(rule (alias atd_parser)
  (action (diff atd_parser.automaton.exp atd_parser.automaton)))

(rule (alias atd_parser)
  (action
    (diff atd_parser.automaton.resolved.exp atd_parser.automaton.resolved)))

(rule (alias atd_parser)
  (action (diff atd_parser.conflicts.exp atd_parser.conflicts)))

(rule (target attapl-deptypes.opp.out) (deps attapl-deptypes.mly)
  (action
    (with-outputs-to attapl-deptypes.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias attapl-deptypes)
  (action (diff attapl-deptypes.opp.exp attapl-deptypes.opp.out)))

(rule
  (targets attapl-deptypes.out attapl-deptypes.automaton
    attapl-deptypes.automaton.resolved attapl-deptypes.conflicts
    attapl-deptypes.timings)
  (deps attapl-deptypes.mly)
  (action
    (with-outputs-to attapl-deptypes.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to attapl-deptypes.timings %{deps})))))

(rule (alias attapl-deptypes)
  (action (diff attapl-deptypes.exp attapl-deptypes.out)))

(rule (alias attapl-deptypes)
  (action (diff attapl-deptypes.automaton.exp attapl-deptypes.automaton)))

(rule (alias attapl-deptypes)
  (action
    (diff attapl-deptypes.automaton.resolved.exp
      attapl-deptypes.automaton.resolved)))

(rule (alias attapl-deptypes)
  (action (diff attapl-deptypes.conflicts.exp attapl-deptypes.conflicts)))

(rule (target attapl-mini.opp.out) (deps attapl-mini.mly)
  (action
    (with-outputs-to attapl-mini.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias attapl-mini)
  (action (diff attapl-mini.opp.exp attapl-mini.opp.out)))

(rule
  (targets attapl-mini.out attapl-mini.automaton
    attapl-mini.automaton.resolved attapl-mini.conflicts attapl-mini.timings)
  (deps attapl-mini.mly)
  (action
    (with-outputs-to attapl-mini.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to attapl-mini.timings %{deps})))))

(rule (alias attapl-mini) (action (diff attapl-mini.exp attapl-mini.out)))

(rule (alias attapl-mini)
  (action (diff attapl-mini.automaton.exp attapl-mini.automaton)))

(rule (alias attapl-mini)
  (action
    (diff attapl-mini.automaton.resolved.exp attapl-mini.automaton.resolved)))

(rule (alias attapl-mini)
  (action (diff attapl-mini.conflicts.exp attapl-mini.conflicts)))

(rule (target attributes.opp.out) (deps attributes.mly)
  (action
    (with-outputs-to attributes.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias attributes)
  (action (diff attributes.opp.exp attributes.opp.out)))

(rule
  (targets attributes.out attributes.automaton attributes.automaton.resolved
    attributes.conflicts attributes.timings)
  (deps attributes.mly)
  (action
    (with-outputs-to attributes.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to attributes.timings %{deps})))))

(rule (alias attributes) (action (diff attributes.exp attributes.out)))

(rule (alias attributes)
  (action (diff attributes.automaton.exp attributes.automaton)))

(rule (alias attributes)
  (action
    (diff attributes.automaton.resolved.exp attributes.automaton.resolved)))

(rule (alias attributes)
  (action (diff attributes.conflicts.exp attributes.conflicts)))

(rule (target attributes-expansion.opp.out) (deps attributes-expansion.mly)
  (action
    (with-outputs-to attributes-expansion.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias attributes-expansion)
  (action (diff attributes-expansion.opp.exp attributes-expansion.opp.out)))

(rule
  (targets attributes-expansion.out attributes-expansion.automaton
    attributes-expansion.automaton.resolved attributes-expansion.conflicts
    attributes-expansion.timings)
  (deps attributes-expansion.mly)
  (action
    (with-outputs-to attributes-expansion.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to attributes-expansion.timings %{deps})))))

(rule (alias attributes-expansion)
  (action (diff attributes-expansion.exp attributes-expansion.out)))

(rule (alias attributes-expansion)
  (action
    (diff attributes-expansion.automaton.exp attributes-expansion.automaton)))

(rule (alias attributes-expansion)
  (action
    (diff attributes-expansion.automaton.resolved.exp
      attributes-expansion.automaton.resolved)))

(rule (alias attributes-expansion)
  (action
    (diff attributes-expansion.conflicts.exp attributes-expansion.conflicts)))

(rule (target bamboo.0.0.03-parser.opp.out) (deps bamboo.0.0.03-parser.mly)
  (action
    (with-outputs-to bamboo.0.0.03-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias bamboo.0.0.03-parser)
  (action (diff bamboo.0.0.03-parser.opp.exp bamboo.0.0.03-parser.opp.out)))

(rule
  (targets bamboo.0.0.03-parser.out bamboo.0.0.03-parser.automaton
    bamboo.0.0.03-parser.automaton.resolved bamboo.0.0.03-parser.conflicts
    bamboo.0.0.03-parser.timings)
  (deps bamboo.0.0.03-parser.mly)
  (action
    (with-outputs-to bamboo.0.0.03-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to bamboo.0.0.03-parser.timings %{deps})))))

(rule (alias bamboo.0.0.03-parser)
  (action (diff bamboo.0.0.03-parser.exp bamboo.0.0.03-parser.out)))

(rule (alias bamboo.0.0.03-parser)
  (action
    (diff bamboo.0.0.03-parser.automaton.exp bamboo.0.0.03-parser.automaton)))

(rule (alias bamboo.0.0.03-parser)
  (action
    (diff bamboo.0.0.03-parser.automaton.resolved.exp
      bamboo.0.0.03-parser.automaton.resolved)))

(rule (alias bamboo.0.0.03-parser)
  (action
    (diff bamboo.0.0.03-parser.conflicts.exp bamboo.0.0.03-parser.conflicts)))

(rule (target bare-bones.opp.out) (deps bare-bones.mly)
  (action
    (with-outputs-to bare-bones.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias bare-bones)
  (action (diff bare-bones.opp.exp bare-bones.opp.out)))

(rule
  (targets bare-bones.out bare-bones.automaton bare-bones.automaton.resolved
    bare-bones.conflicts bare-bones.timings)
  (deps bare-bones.mly)
  (action
    (with-outputs-to bare-bones.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to bare-bones.timings %{deps})))))

(rule (alias bare-bones) (action (diff bare-bones.exp bare-bones.out)))

(rule (alias bare-bones)
  (action (diff bare-bones.automaton.exp bare-bones.automaton)))

(rule (alias bare-bones)
  (action
    (diff bare-bones.automaton.resolved.exp bare-bones.automaton.resolved)))

(rule (alias bare-bones)
  (action (diff bare-bones.conflicts.exp bare-bones.conflicts)))

(rule (target basile.opp.out) (deps basile.mly)
  (action
    (with-outputs-to basile.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias basile) (action (diff basile.opp.exp basile.opp.out)))

(rule
  (targets basile.out basile.automaton basile.automaton.resolved
    basile.conflicts basile.timings)
  (deps basile.mly)
  (action
    (with-outputs-to basile.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to basile.timings %{deps})))))

(rule (alias basile) (action (diff basile.exp basile.out)))

(rule (alias basile) (action (diff basile.automaton.exp basile.automaton)))

(rule (alias basile)
  (action (diff basile.automaton.resolved.exp basile.automaton.resolved)))

(rule (alias basile) (action (diff basile.conflicts.exp basile.conflicts)))

(rule (target batsh.0.0.6-parser_yacc.opp.out)
  (deps batsh.0.0.6-parser_yacc.mly)
  (action
    (with-outputs-to batsh.0.0.6-parser_yacc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias batsh.0.0.6-parser_yacc)
  (action
    (diff batsh.0.0.6-parser_yacc.opp.exp batsh.0.0.6-parser_yacc.opp.out)))

(rule
  (targets batsh.0.0.6-parser_yacc.out batsh.0.0.6-parser_yacc.automaton
    batsh.0.0.6-parser_yacc.automaton.resolved
    batsh.0.0.6-parser_yacc.conflicts batsh.0.0.6-parser_yacc.timings)
  (deps batsh.0.0.6-parser_yacc.mly)
  (action
    (with-outputs-to batsh.0.0.6-parser_yacc.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to batsh.0.0.6-parser_yacc.timings %{deps})))))

(rule (alias batsh.0.0.6-parser_yacc)
  (action (diff batsh.0.0.6-parser_yacc.exp batsh.0.0.6-parser_yacc.out)))

(rule (alias batsh.0.0.6-parser_yacc)
  (action
    (diff batsh.0.0.6-parser_yacc.automaton.exp
      batsh.0.0.6-parser_yacc.automaton)))

(rule (alias batsh.0.0.6-parser_yacc)
  (action
    (diff batsh.0.0.6-parser_yacc.automaton.resolved.exp
      batsh.0.0.6-parser_yacc.automaton.resolved)))

(rule (alias batsh.0.0.6-parser_yacc)
  (action
    (diff batsh.0.0.6-parser_yacc.conflicts.exp
      batsh.0.0.6-parser_yacc.conflicts)))

(rule (target bauer.opp.out) (deps bauer.mly)
  (action
    (with-outputs-to bauer.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias bauer) (action (diff bauer.opp.exp bauer.opp.out)))

(rule
  (targets bauer.out bauer.automaton bauer.automaton.resolved bauer.conflicts
    bauer.timings)
  (deps bauer.mly)
  (action
    (with-outputs-to bauer.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to bauer.timings %{deps})))))

(rule (alias bauer) (action (diff bauer.exp bauer.out)))

(rule (alias bauer) (action (diff bauer.automaton.exp bauer.automaton)))

(rule (alias bauer)
  (action (diff bauer.automaton.resolved.exp bauer.automaton.resolved)))

(rule (alias bauer) (action (diff bauer.conflicts.exp bauer.conflicts)))

(rule (target belloeil.opp.out) (deps belloeil.mly)
  (action
    (with-outputs-to belloeil.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias belloeil) (action (diff belloeil.opp.exp belloeil.opp.out)))

(rule
  (targets belloeil.out belloeil.automaton belloeil.automaton.resolved
    belloeil.conflicts belloeil.timings)
  (deps belloeil.mly)
  (action
    (with-outputs-to belloeil.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to belloeil.timings %{deps})))))

(rule (alias belloeil) (action (diff belloeil.exp belloeil.out)))

(rule (alias belloeil)
  (action (diff belloeil.automaton.exp belloeil.automaton)))

(rule (alias belloeil)
  (action (diff belloeil.automaton.resolved.exp belloeil.automaton.resolved)))

(rule (alias belloeil)
  (action (diff belloeil.conflicts.exp belloeil.conflicts)))

(rule (target bibtex2html.1.99-bibtex_parser.opp.out)
  (deps bibtex2html.1.99-bibtex_parser.mly)
  (action
    (with-outputs-to bibtex2html.1.99-bibtex_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias bibtex2html.1.99-bibtex_parser)
  (action
    (diff bibtex2html.1.99-bibtex_parser.opp.exp
      bibtex2html.1.99-bibtex_parser.opp.out)))

(rule
  (targets bibtex2html.1.99-bibtex_parser.out
    bibtex2html.1.99-bibtex_parser.automaton
    bibtex2html.1.99-bibtex_parser.automaton.resolved
    bibtex2html.1.99-bibtex_parser.conflicts
    bibtex2html.1.99-bibtex_parser.timings)
  (deps bibtex2html.1.99-bibtex_parser.mly)
  (action
    (with-outputs-to bibtex2html.1.99-bibtex_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to bibtex2html.1.99-bibtex_parser.timings %{deps})))))

(rule (alias bibtex2html.1.99-bibtex_parser)
  (action
    (diff bibtex2html.1.99-bibtex_parser.exp
      bibtex2html.1.99-bibtex_parser.out)))

(rule (alias bibtex2html.1.99-bibtex_parser)
  (action
    (diff bibtex2html.1.99-bibtex_parser.automaton.exp
      bibtex2html.1.99-bibtex_parser.automaton)))

(rule (alias bibtex2html.1.99-bibtex_parser)
  (action
    (diff bibtex2html.1.99-bibtex_parser.automaton.resolved.exp
      bibtex2html.1.99-bibtex_parser.automaton.resolved)))

(rule (alias bibtex2html.1.99-bibtex_parser)
  (action
    (diff bibtex2html.1.99-bibtex_parser.conflicts.exp
      bibtex2html.1.99-bibtex_parser.conflicts)))

(rule (target bibtex_parser.opp.out) (deps bibtex_parser.mly)
  (action
    (with-outputs-to bibtex_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias bibtex_parser)
  (action (diff bibtex_parser.opp.exp bibtex_parser.opp.out)))

(rule
  (targets bibtex_parser.out bibtex_parser.automaton
    bibtex_parser.automaton.resolved bibtex_parser.conflicts
    bibtex_parser.timings)
  (deps bibtex_parser.mly)
  (action
    (with-outputs-to bibtex_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to bibtex_parser.timings %{deps})))))

(rule (alias bibtex_parser)
  (action (diff bibtex_parser.exp bibtex_parser.out)))

(rule (alias bibtex_parser)
  (action (diff bibtex_parser.automaton.exp bibtex_parser.automaton)))

(rule (alias bibtex_parser)
  (action
    (diff bibtex_parser.automaton.resolved.exp
      bibtex_parser.automaton.resolved)))

(rule (alias bibtex_parser)
  (action (diff bibtex_parser.conflicts.exp bibtex_parser.conflicts)))

(rule (target bison-mysterious-conflict.opp.out)
  (deps bison-mysterious-conflict.mly)
  (action
    (with-outputs-to bison-mysterious-conflict.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias bison-mysterious-conflict)
  (action
    (diff bison-mysterious-conflict.opp.exp
      bison-mysterious-conflict.opp.out)))

(rule
  (targets bison-mysterious-conflict.out bison-mysterious-conflict.automaton
    bison-mysterious-conflict.automaton.resolved
    bison-mysterious-conflict.conflicts bison-mysterious-conflict.timings)
  (deps bison-mysterious-conflict.mly)
  (action
    (with-outputs-to bison-mysterious-conflict.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to bison-mysterious-conflict.timings %{deps})))))

(rule (alias bison-mysterious-conflict)
  (action (diff bison-mysterious-conflict.exp bison-mysterious-conflict.out)))

(rule (alias bison-mysterious-conflict)
  (action
    (diff bison-mysterious-conflict.automaton.exp
      bison-mysterious-conflict.automaton)))

(rule (alias bison-mysterious-conflict)
  (action
    (diff bison-mysterious-conflict.automaton.resolved.exp
      bison-mysterious-conflict.automaton.resolved)))

(rule (alias bison-mysterious-conflict)
  (action
    (diff bison-mysterious-conflict.conflicts.exp
      bison-mysterious-conflict.conflicts)))

(rule (target bodin.opp.out) (deps bodin.mly)
  (action
    (with-outputs-to bodin.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias bodin) (action (diff bodin.opp.exp bodin.opp.out)))

(rule
  (targets bodin.out bodin.automaton bodin.automaton.resolved bodin.conflicts
    bodin.timings)
  (deps bodin.mly)
  (action
    (with-outputs-to bodin.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to bodin.timings %{deps})))))

(rule (alias bodin) (action (diff bodin.exp bodin.out)))

(rule (alias bodin) (action (diff bodin.automaton.exp bodin.automaton)))

(rule (alias bodin)
  (action (diff bodin.automaton.resolved.exp bodin.automaton.resolved)))

(rule (alias bodin) (action (diff bodin.conflicts.exp bodin.conflicts)))

(rule (target bodin_inlined.opp.out) (deps bodin_inlined.mly)
  (action
    (with-outputs-to bodin_inlined.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias bodin_inlined)
  (action (diff bodin_inlined.opp.exp bodin_inlined.opp.out)))

(rule
  (targets bodin_inlined.out bodin_inlined.automaton
    bodin_inlined.automaton.resolved bodin_inlined.conflicts
    bodin_inlined.timings)
  (deps bodin_inlined.mly)
  (action
    (with-outputs-to bodin_inlined.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to bodin_inlined.timings %{deps})))))

(rule (alias bodin_inlined)
  (action (diff bodin_inlined.exp bodin_inlined.out)))

(rule (alias bodin_inlined)
  (action (diff bodin_inlined.automaton.exp bodin_inlined.automaton)))

(rule (alias bodin_inlined)
  (action
    (diff bodin_inlined.automaton.resolved.exp
      bodin_inlined.automaton.resolved)))

(rule (alias bodin_inlined)
  (action (diff bodin_inlined.conflicts.exp bodin_inlined.conflicts)))

(rule (target boomerang-bparser.opp.out) (deps boomerang-bparser.mly)
  (action
    (with-outputs-to boomerang-bparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias boomerang-bparser)
  (action (diff boomerang-bparser.opp.exp boomerang-bparser.opp.out)))

(rule
  (targets boomerang-bparser.out boomerang-bparser.automaton
    boomerang-bparser.automaton.resolved boomerang-bparser.conflicts
    boomerang-bparser.timings)
  (deps boomerang-bparser.mly)
  (action
    (with-outputs-to boomerang-bparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to boomerang-bparser.timings %{deps})))))

(rule (alias boomerang-bparser)
  (action (diff boomerang-bparser.exp boomerang-bparser.out)))

(rule (alias boomerang-bparser)
  (action (diff boomerang-bparser.automaton.exp boomerang-bparser.automaton)))

(rule (alias boomerang-bparser)
  (action
    (diff boomerang-bparser.automaton.resolved.exp
      boomerang-bparser.automaton.resolved)))

(rule (alias boomerang-bparser)
  (action (diff boomerang-bparser.conflicts.exp boomerang-bparser.conflicts)))

(rule (target boris-mini.opp.out) (deps boris-mini.mly)
  (action
    (with-outputs-to boris-mini.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias boris-mini)
  (action (diff boris-mini.opp.exp boris-mini.opp.out)))

(rule
  (targets boris-mini.out boris-mini.automaton boris-mini.automaton.resolved
    boris-mini.conflicts boris-mini.timings)
  (deps boris-mini.mly)
  (action
    (with-outputs-to boris-mini.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to boris-mini.timings %{deps})))))

(rule (alias boris-mini) (action (diff boris-mini.exp boris-mini.out)))

(rule (alias boris-mini)
  (action (diff boris-mini.automaton.exp boris-mini.automaton)))

(rule (alias boris-mini)
  (action
    (diff boris-mini.automaton.resolved.exp boris-mini.automaton.resolved)))

(rule (alias boris-mini)
  (action (diff boris-mini.conflicts.exp boris-mini.conflicts)))

(rule (target boris-mini-no-eos.opp.out) (deps boris-mini-no-eos.mly)
  (action
    (with-outputs-to boris-mini-no-eos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias boris-mini-no-eos)
  (action (diff boris-mini-no-eos.opp.exp boris-mini-no-eos.opp.out)))

(rule
  (targets boris-mini-no-eos.out boris-mini-no-eos.automaton
    boris-mini-no-eos.automaton.resolved boris-mini-no-eos.conflicts
    boris-mini-no-eos.timings)
  (deps boris-mini-no-eos.mly)
  (action
    (with-outputs-to boris-mini-no-eos.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to boris-mini-no-eos.timings %{deps})))))

(rule (alias boris-mini-no-eos)
  (action (diff boris-mini-no-eos.exp boris-mini-no-eos.out)))

(rule (alias boris-mini-no-eos)
  (action (diff boris-mini-no-eos.automaton.exp boris-mini-no-eos.automaton)))

(rule (alias boris-mini-no-eos)
  (action
    (diff boris-mini-no-eos.automaton.resolved.exp
      boris-mini-no-eos.automaton.resolved)))

(rule (alias boris-mini-no-eos)
  (action (diff boris-mini-no-eos.conflicts.exp boris-mini-no-eos.conflicts)))

(rule (target bran.opp.out) (deps bran.mly)
  (action
    (with-outputs-to bran.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias bran) (action (diff bran.opp.exp bran.opp.out)))

(rule
  (targets bran.out bran.automaton bran.automaton.resolved bran.conflicts
    bran.timings)
  (deps bran.mly)
  (action
    (with-outputs-to bran.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to bran.timings %{deps})))))

(rule (alias bran) (action (diff bran.exp bran.out)))

(rule (alias bran) (action (diff bran.automaton.exp bran.automaton)))

(rule (alias bran)
  (action (diff bran.automaton.resolved.exp bran.automaton.resolved)))

(rule (alias bran) (action (diff bran.conflicts.exp bran.conflicts)))

(rule (target c.opp.out) (deps c.mly)
  (action
    (with-outputs-to c.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias c) (action (diff c.opp.exp c.opp.out)))

(rule (targets c.out c.automaton c.automaton.resolved c.conflicts c.timings)
  (deps c.mly)
  (action
    (with-outputs-to c.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to c.timings %{deps})))))

(rule (alias c) (action (diff c.exp c.out)))

(rule (alias c) (action (diff c.automaton.exp c.automaton)))

(rule (alias c)
  (action (diff c.automaton.resolved.exp c.automaton.resolved)))

(rule (alias c) (action (diff c.conflicts.exp c.conflicts)))

(rule (target c_unambiguous.opp.out) (deps c_unambiguous.mly)
  (action
    (with-outputs-to c_unambiguous.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias c_unambiguous)
  (action (diff c_unambiguous.opp.exp c_unambiguous.opp.out)))

(rule
  (targets c_unambiguous.out c_unambiguous.automaton
    c_unambiguous.automaton.resolved c_unambiguous.conflicts
    c_unambiguous.timings)
  (deps c_unambiguous.mly)
  (action
    (with-outputs-to c_unambiguous.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to c_unambiguous.timings %{deps})))))

(rule (alias c_unambiguous)
  (action (diff c_unambiguous.exp c_unambiguous.out)))

(rule (alias c_unambiguous)
  (action (diff c_unambiguous.automaton.exp c_unambiguous.automaton)))

(rule (alias c_unambiguous)
  (action
    (diff c_unambiguous.automaton.resolved.exp
      c_unambiguous.automaton.resolved)))

(rule (alias c_unambiguous)
  (action (diff c_unambiguous.conflicts.exp c_unambiguous.conflicts)))

(rule (target calc.opp.out) (deps calc.mly)
  (action
    (with-outputs-to calc.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:calc.flags} %{deps})))))

(rule (alias calc) (action (diff calc.opp.exp calc.opp.out)))

(rule
  (targets calc.out calc.automaton calc.automaton.resolved calc.conflicts
    calc.timings)
  (deps calc.mly)
  (action
    (with-outputs-to calc.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to calc.timings %{read-lines:calc.flags} %{deps})))))

(rule (alias calc) (action (diff calc.exp calc.out)))

(rule (alias calc) (action (diff calc.automaton.exp calc.automaton)))

(rule (alias calc)
  (action (diff calc.automaton.resolved.exp calc.automaton.resolved)))

(rule (alias calc) (action (diff calc.conflicts.exp calc.conflicts)))

(rule (target calc-anonymous.opp.out) (deps calc-anonymous.mly)
  (action
    (with-outputs-to calc-anonymous.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias calc-anonymous)
  (action (diff calc-anonymous.opp.exp calc-anonymous.opp.out)))

(rule
  (targets calc-anonymous.out calc-anonymous.automaton
    calc-anonymous.automaton.resolved calc-anonymous.conflicts
    calc-anonymous.timings)
  (deps calc-anonymous.mly)
  (action
    (with-outputs-to calc-anonymous.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to calc-anonymous.timings %{deps})))))

(rule (alias calc-anonymous)
  (action (diff calc-anonymous.exp calc-anonymous.out)))

(rule (alias calc-anonymous)
  (action (diff calc-anonymous.automaton.exp calc-anonymous.automaton)))

(rule (alias calc-anonymous)
  (action
    (diff calc-anonymous.automaton.resolved.exp
      calc-anonymous.automaton.resolved)))

(rule (alias calc-anonymous)
  (action (diff calc-anonymous.conflicts.exp calc-anonymous.conflicts)))

(rule (target calc-ast.opp.out) (deps calc-ast.mly)
  (action
    (with-outputs-to calc-ast.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias calc-ast) (action (diff calc-ast.opp.exp calc-ast.opp.out)))

(rule
  (targets calc-ast.out calc-ast.automaton calc-ast.automaton.resolved
    calc-ast.conflicts calc-ast.timings)
  (deps calc-ast.mly)
  (action
    (with-outputs-to calc-ast.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to calc-ast.timings %{deps})))))

(rule (alias calc-ast) (action (diff calc-ast.exp calc-ast.out)))

(rule (alias calc-ast)
  (action (diff calc-ast.automaton.exp calc-ast.automaton)))

(rule (alias calc-ast)
  (action (diff calc-ast.automaton.resolved.exp calc-ast.automaton.resolved)))

(rule (alias calc-ast)
  (action (diff calc-ast.conflicts.exp calc-ast.conflicts)))

(rule (target calc-locations.opp.out) (deps calc-locations.mly)
  (action
    (with-outputs-to calc-locations.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias calc-locations)
  (action (diff calc-locations.opp.exp calc-locations.opp.out)))

(rule
  (targets calc-locations.out calc-locations.automaton
    calc-locations.automaton.resolved calc-locations.conflicts
    calc-locations.timings)
  (deps calc-locations.mly)
  (action
    (with-outputs-to calc-locations.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to calc-locations.timings %{deps})))))

(rule (alias calc-locations)
  (action (diff calc-locations.exp calc-locations.out)))

(rule (alias calc-locations)
  (action (diff calc-locations.automaton.exp calc-locations.automaton)))

(rule (alias calc-locations)
  (action
    (diff calc-locations.automaton.resolved.exp
      calc-locations.automaton.resolved)))

(rule (alias calc-locations)
  (action (diff calc-locations.conflicts.exp calc-locations.conflicts)))

(rule (target calc-never-useful.opp.out) (deps calc-never-useful.mly)
  (action
    (with-outputs-to calc-never-useful.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:calc-never-useful.flags}
          %{deps})))))

(rule (alias calc-never-useful)
  (action (diff calc-never-useful.opp.exp calc-never-useful.opp.out)))

(rule
  (targets calc-never-useful.out calc-never-useful.automaton
    calc-never-useful.automaton.resolved calc-never-useful.conflicts
    calc-never-useful.timings)
  (deps calc-never-useful.mly)
  (action
    (with-outputs-to calc-never-useful.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to calc-never-useful.timings
          %{read-lines:calc-never-useful.flags} %{deps})))))

(rule (alias calc-never-useful)
  (action (diff calc-never-useful.exp calc-never-useful.out)))

(rule (alias calc-never-useful)
  (action (diff calc-never-useful.automaton.exp calc-never-useful.automaton)))

(rule (alias calc-never-useful)
  (action
    (diff calc-never-useful.automaton.resolved.exp
      calc-never-useful.automaton.resolved)))

(rule (alias calc-never-useful)
  (action (diff calc-never-useful.conflicts.exp calc-never-useful.conflicts)))

(rule (target calc-new-syntax.opp.out) (deps calc-new-syntax.mly)
  (action
    (with-outputs-to calc-new-syntax.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias calc-new-syntax)
  (action (diff calc-new-syntax.opp.exp calc-new-syntax.opp.out)))

(rule
  (targets calc-new-syntax.out calc-new-syntax.automaton
    calc-new-syntax.automaton.resolved calc-new-syntax.conflicts
    calc-new-syntax.timings)
  (deps calc-new-syntax.mly)
  (action
    (with-outputs-to calc-new-syntax.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to calc-new-syntax.timings %{deps})))))

(rule (alias calc-new-syntax)
  (action (diff calc-new-syntax.exp calc-new-syntax.out)))

(rule (alias calc-new-syntax)
  (action (diff calc-new-syntax.automaton.exp calc-new-syntax.automaton)))

(rule (alias calc-new-syntax)
  (action
    (diff calc-new-syntax.automaton.resolved.exp
      calc-new-syntax.automaton.resolved)))

(rule (alias calc-new-syntax)
  (action (diff calc-new-syntax.conflicts.exp calc-new-syntax.conflicts)))

(rule (target camltemplate.1.0.2-ctParser.opp.out)
  (deps camltemplate.1.0.2-ctParser.mly)
  (action
    (with-outputs-to camltemplate.1.0.2-ctParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias camltemplate.1.0.2-ctParser)
  (action
    (diff camltemplate.1.0.2-ctParser.opp.exp
      camltemplate.1.0.2-ctParser.opp.out)))

(rule
  (targets camltemplate.1.0.2-ctParser.out
    camltemplate.1.0.2-ctParser.automaton
    camltemplate.1.0.2-ctParser.automaton.resolved
    camltemplate.1.0.2-ctParser.conflicts
    camltemplate.1.0.2-ctParser.timings)
  (deps camltemplate.1.0.2-ctParser.mly)
  (action
    (with-outputs-to camltemplate.1.0.2-ctParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to camltemplate.1.0.2-ctParser.timings %{deps})))))

(rule (alias camltemplate.1.0.2-ctParser)
  (action
    (diff camltemplate.1.0.2-ctParser.exp camltemplate.1.0.2-ctParser.out)))

(rule (alias camltemplate.1.0.2-ctParser)
  (action
    (diff camltemplate.1.0.2-ctParser.automaton.exp
      camltemplate.1.0.2-ctParser.automaton)))

(rule (alias camltemplate.1.0.2-ctParser)
  (action
    (diff camltemplate.1.0.2-ctParser.automaton.resolved.exp
      camltemplate.1.0.2-ctParser.automaton.resolved)))

(rule (alias camltemplate.1.0.2-ctParser)
  (action
    (diff camltemplate.1.0.2-ctParser.conflicts.exp
      camltemplate.1.0.2-ctParser.conflicts)))

(rule (target camomile.1.0.1-colParser.opp.out)
  (deps camomile.1.0.1-colParser.mly)
  (action
    (with-outputs-to camomile.1.0.1-colParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias camomile.1.0.1-colParser)
  (action
    (diff camomile.1.0.1-colParser.opp.exp camomile.1.0.1-colParser.opp.out)))

(rule
  (targets camomile.1.0.1-colParser.out camomile.1.0.1-colParser.automaton
    camomile.1.0.1-colParser.automaton.resolved
    camomile.1.0.1-colParser.conflicts camomile.1.0.1-colParser.timings)
  (deps camomile.1.0.1-colParser.mly)
  (action
    (with-outputs-to camomile.1.0.1-colParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to camomile.1.0.1-colParser.timings %{deps})))))

(rule (alias camomile.1.0.1-colParser)
  (action (diff camomile.1.0.1-colParser.exp camomile.1.0.1-colParser.out)))

(rule (alias camomile.1.0.1-colParser)
  (action
    (diff camomile.1.0.1-colParser.automaton.exp
      camomile.1.0.1-colParser.automaton)))

(rule (alias camomile.1.0.1-colParser)
  (action
    (diff camomile.1.0.1-colParser.automaton.resolved.exp
      camomile.1.0.1-colParser.automaton.resolved)))

(rule (alias camomile.1.0.1-colParser)
  (action
    (diff camomile.1.0.1-colParser.conflicts.exp
      camomile.1.0.1-colParser.conflicts)))

(rule (target ccss.1.6-parser.opp.out) (deps ccss.1.6-parser.mly)
  (action
    (with-outputs-to ccss.1.6-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ccss.1.6-parser)
  (action (diff ccss.1.6-parser.opp.exp ccss.1.6-parser.opp.out)))

(rule
  (targets ccss.1.6-parser.out ccss.1.6-parser.automaton
    ccss.1.6-parser.automaton.resolved ccss.1.6-parser.conflicts
    ccss.1.6-parser.timings)
  (deps ccss.1.6-parser.mly)
  (action
    (with-outputs-to ccss.1.6-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ccss.1.6-parser.timings %{deps})))))

(rule (alias ccss.1.6-parser)
  (action (diff ccss.1.6-parser.exp ccss.1.6-parser.out)))

(rule (alias ccss.1.6-parser)
  (action (diff ccss.1.6-parser.automaton.exp ccss.1.6-parser.automaton)))

(rule (alias ccss.1.6-parser)
  (action
    (diff ccss.1.6-parser.automaton.resolved.exp
      ccss.1.6-parser.automaton.resolved)))

(rule (alias ccss.1.6-parser)
  (action (diff ccss.1.6-parser.conflicts.exp ccss.1.6-parser.conflicts)))

(rule (target charrua-client.0.9-dhcp_parser.opp.out)
  (deps charrua-client.0.9-dhcp_parser.mly)
  (action
    (with-outputs-to charrua-client.0.9-dhcp_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias charrua-client.0.9-dhcp_parser)
  (action
    (diff charrua-client.0.9-dhcp_parser.opp.exp
      charrua-client.0.9-dhcp_parser.opp.out)))

(rule
  (targets charrua-client.0.9-dhcp_parser.out
    charrua-client.0.9-dhcp_parser.automaton
    charrua-client.0.9-dhcp_parser.automaton.resolved
    charrua-client.0.9-dhcp_parser.conflicts
    charrua-client.0.9-dhcp_parser.timings)
  (deps charrua-client.0.9-dhcp_parser.mly)
  (action
    (with-outputs-to charrua-client.0.9-dhcp_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to charrua-client.0.9-dhcp_parser.timings %{deps})))))

(rule (alias charrua-client.0.9-dhcp_parser)
  (action
    (diff charrua-client.0.9-dhcp_parser.exp
      charrua-client.0.9-dhcp_parser.out)))

(rule (alias charrua-client.0.9-dhcp_parser)
  (action
    (diff charrua-client.0.9-dhcp_parser.automaton.exp
      charrua-client.0.9-dhcp_parser.automaton)))

(rule (alias charrua-client.0.9-dhcp_parser)
  (action
    (diff charrua-client.0.9-dhcp_parser.automaton.resolved.exp
      charrua-client.0.9-dhcp_parser.automaton.resolved)))

(rule (alias charrua-client.0.9-dhcp_parser)
  (action
    (diff charrua-client.0.9-dhcp_parser.conflicts.exp
      charrua-client.0.9-dhcp_parser.conflicts)))

(rule (target christian.opp.out) (deps christian.mly)
  (action
    (with-outputs-to christian.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias christian) (action (diff christian.opp.exp christian.opp.out)))

(rule
  (targets christian.out christian.automaton christian.automaton.resolved
    christian.conflicts christian.timings)
  (deps christian.mly)
  (action
    (with-outputs-to christian.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to christian.timings %{deps})))))

(rule (alias christian) (action (diff christian.exp christian.out)))

(rule (alias christian)
  (action (diff christian.automaton.exp christian.automaton)))

(rule (alias christian)
  (action
    (diff christian.automaton.resolved.exp christian.automaton.resolved)))

(rule (alias christian)
  (action (diff christian.conflicts.exp christian.conflicts)))

(rule (target cigen-cparser.opp.out) (deps cigen-cparser.mly)
  (action
    (with-outputs-to cigen-cparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cigen-cparser)
  (action (diff cigen-cparser.opp.exp cigen-cparser.opp.out)))

(rule
  (targets cigen-cparser.out cigen-cparser.automaton
    cigen-cparser.automaton.resolved cigen-cparser.conflicts
    cigen-cparser.timings)
  (deps cigen-cparser.mly)
  (action
    (with-outputs-to cigen-cparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cigen-cparser.timings %{deps})))))

(rule (alias cigen-cparser)
  (action (diff cigen-cparser.exp cigen-cparser.out)))

(rule (alias cigen-cparser)
  (action (diff cigen-cparser.automaton.exp cigen-cparser.automaton)))

(rule (alias cigen-cparser)
  (action
    (diff cigen-cparser.automaton.resolved.exp
      cigen-cparser.automaton.resolved)))

(rule (alias cigen-cparser)
  (action (diff cigen-cparser.conflicts.exp cigen-cparser.conflicts)))

(rule (target cil-cparser.opp.out) (deps cil-cparser.mly)
  (action
    (with-outputs-to cil-cparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cil-cparser)
  (action (diff cil-cparser.opp.exp cil-cparser.opp.out)))

(rule
  (targets cil-cparser.out cil-cparser.automaton
    cil-cparser.automaton.resolved cil-cparser.conflicts cil-cparser.timings)
  (deps cil-cparser.mly)
  (action
    (with-outputs-to cil-cparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cil-cparser.timings %{deps})))))

(rule (alias cil-cparser) (action (diff cil-cparser.exp cil-cparser.out)))

(rule (alias cil-cparser)
  (action (diff cil-cparser.automaton.exp cil-cparser.automaton)))

(rule (alias cil-cparser)
  (action
    (diff cil-cparser.automaton.resolved.exp cil-cparser.automaton.resolved)))

(rule (alias cil-cparser)
  (action (diff cil-cparser.conflicts.exp cil-cparser.conflicts)))

(rule (target cil-formatparse.opp.out) (deps cil-formatparse.mly)
  (action
    (with-outputs-to cil-formatparse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cil-formatparse)
  (action (diff cil-formatparse.opp.exp cil-formatparse.opp.out)))

(rule
  (targets cil-formatparse.out cil-formatparse.automaton
    cil-formatparse.automaton.resolved cil-formatparse.conflicts
    cil-formatparse.timings)
  (deps cil-formatparse.mly)
  (action
    (with-outputs-to cil-formatparse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cil-formatparse.timings %{deps})))))

(rule (alias cil-formatparse)
  (action (diff cil-formatparse.exp cil-formatparse.out)))

(rule (alias cil-formatparse)
  (action (diff cil-formatparse.automaton.exp cil-formatparse.automaton)))

(rule (alias cil-formatparse)
  (action
    (diff cil-formatparse.automaton.resolved.exp
      cil-formatparse.automaton.resolved)))

(rule (alias cil-formatparse)
  (action (diff cil-formatparse.conflicts.exp cil-formatparse.conflicts)))

(rule (target cime-coq.opp.out) (deps cime-coq.mly)
  (action
    (with-outputs-to cime-coq.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-coq) (action (diff cime-coq.opp.exp cime-coq.opp.out)))

(rule
  (targets cime-coq.out cime-coq.automaton cime-coq.automaton.resolved
    cime-coq.conflicts cime-coq.timings)
  (deps cime-coq.mly)
  (action
    (with-outputs-to cime-coq.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-coq.timings %{deps})))))

(rule (alias cime-coq) (action (diff cime-coq.exp cime-coq.out)))

(rule (alias cime-coq)
  (action (diff cime-coq.automaton.exp cime-coq.automaton)))

(rule (alias cime-coq)
  (action (diff cime-coq.automaton.resolved.exp cime-coq.automaton.resolved)))

(rule (alias cime-coq)
  (action (diff cime-coq.conflicts.exp cime-coq.conflicts)))

(rule (target cime-genpoly.opp.out) (deps cime-genpoly.mly)
  (action
    (with-outputs-to cime-genpoly.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-genpoly)
  (action (diff cime-genpoly.opp.exp cime-genpoly.opp.out)))

(rule
  (targets cime-genpoly.out cime-genpoly.automaton
    cime-genpoly.automaton.resolved cime-genpoly.conflicts
    cime-genpoly.timings)
  (deps cime-genpoly.mly)
  (action
    (with-outputs-to cime-genpoly.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-genpoly.timings %{deps})))))

(rule (alias cime-genpoly) (action (diff cime-genpoly.exp cime-genpoly.out)))

(rule (alias cime-genpoly)
  (action (diff cime-genpoly.automaton.exp cime-genpoly.automaton)))

(rule (alias cime-genpoly)
  (action
    (diff cime-genpoly.automaton.resolved.exp
      cime-genpoly.automaton.resolved)))

(rule (alias cime-genpoly)
  (action (diff cime-genpoly.conflicts.exp cime-genpoly.conflicts)))

(rule (target cime-parameterized-signatures.opp.out)
  (deps cime-parameterized-signatures.mly)
  (action
    (with-outputs-to cime-parameterized-signatures.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-parameterized-signatures)
  (action
    (diff cime-parameterized-signatures.opp.exp
      cime-parameterized-signatures.opp.out)))

(rule
  (targets cime-parameterized-signatures.out
    cime-parameterized-signatures.automaton
    cime-parameterized-signatures.automaton.resolved
    cime-parameterized-signatures.conflicts
    cime-parameterized-signatures.timings)
  (deps cime-parameterized-signatures.mly)
  (action
    (with-outputs-to cime-parameterized-signatures.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-parameterized-signatures.timings %{deps})))))

(rule (alias cime-parameterized-signatures)
  (action
    (diff cime-parameterized-signatures.exp
      cime-parameterized-signatures.out)))

(rule (alias cime-parameterized-signatures)
  (action
    (diff cime-parameterized-signatures.automaton.exp
      cime-parameterized-signatures.automaton)))

(rule (alias cime-parameterized-signatures)
  (action
    (diff cime-parameterized-signatures.automaton.resolved.exp
      cime-parameterized-signatures.automaton.resolved)))

(rule (alias cime-parameterized-signatures)
  (action
    (diff cime-parameterized-signatures.conflicts.exp
      cime-parameterized-signatures.conflicts)))

(rule (target cime-poly.opp.out) (deps cime-poly.mly)
  (action
    (with-outputs-to cime-poly.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-poly) (action (diff cime-poly.opp.exp cime-poly.opp.out)))

(rule
  (targets cime-poly.out cime-poly.automaton cime-poly.automaton.resolved
    cime-poly.conflicts cime-poly.timings)
  (deps cime-poly.mly)
  (action
    (with-outputs-to cime-poly.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-poly.timings %{deps})))))

(rule (alias cime-poly) (action (diff cime-poly.exp cime-poly.out)))

(rule (alias cime-poly)
  (action (diff cime-poly.automaton.exp cime-poly.automaton)))

(rule (alias cime-poly)
  (action
    (diff cime-poly.automaton.resolved.exp cime-poly.automaton.resolved)))

(rule (alias cime-poly)
  (action (diff cime-poly.conflicts.exp cime-poly.conflicts)))

(rule (target cime-poly-interp.opp.out) (deps cime-poly-interp.mly)
  (action
    (with-outputs-to cime-poly-interp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-poly-interp)
  (action (diff cime-poly-interp.opp.exp cime-poly-interp.opp.out)))

(rule
  (targets cime-poly-interp.out cime-poly-interp.automaton
    cime-poly-interp.automaton.resolved cime-poly-interp.conflicts
    cime-poly-interp.timings)
  (deps cime-poly-interp.mly)
  (action
    (with-outputs-to cime-poly-interp.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-poly-interp.timings %{deps})))))

(rule (alias cime-poly-interp)
  (action (diff cime-poly-interp.exp cime-poly-interp.out)))

(rule (alias cime-poly-interp)
  (action (diff cime-poly-interp.automaton.exp cime-poly-interp.automaton)))

(rule (alias cime-poly-interp)
  (action
    (diff cime-poly-interp.automaton.resolved.exp
      cime-poly-interp.automaton.resolved)))

(rule (alias cime-poly-interp)
  (action (diff cime-poly-interp.conflicts.exp cime-poly-interp.conflicts)))

(rule (target cime-signature.opp.out) (deps cime-signature.mly)
  (action
    (with-outputs-to cime-signature.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-signature)
  (action (diff cime-signature.opp.exp cime-signature.opp.out)))

(rule
  (targets cime-signature.out cime-signature.automaton
    cime-signature.automaton.resolved cime-signature.conflicts
    cime-signature.timings)
  (deps cime-signature.mly)
  (action
    (with-outputs-to cime-signature.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-signature.timings %{deps})))))

(rule (alias cime-signature)
  (action (diff cime-signature.exp cime-signature.out)))

(rule (alias cime-signature)
  (action (diff cime-signature.automaton.exp cime-signature.automaton)))

(rule (alias cime-signature)
  (action
    (diff cime-signature.automaton.resolved.exp
      cime-signature.automaton.resolved)))

(rule (alias cime-signature)
  (action (diff cime-signature.conflicts.exp cime-signature.conflicts)))

(rule (target cime-syntax.opp.out) (deps cime-syntax.mly)
  (action
    (with-outputs-to cime-syntax.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-syntax)
  (action (diff cime-syntax.opp.exp cime-syntax.opp.out)))

(rule
  (targets cime-syntax.out cime-syntax.automaton
    cime-syntax.automaton.resolved cime-syntax.conflicts cime-syntax.timings)
  (deps cime-syntax.mly)
  (action
    (with-outputs-to cime-syntax.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-syntax.timings %{deps})))))

(rule (alias cime-syntax) (action (diff cime-syntax.exp cime-syntax.out)))

(rule (alias cime-syntax)
  (action (diff cime-syntax.automaton.exp cime-syntax.automaton)))

(rule (alias cime-syntax)
  (action
    (diff cime-syntax.automaton.resolved.exp cime-syntax.automaton.resolved)))

(rule (alias cime-syntax)
  (action (diff cime-syntax.conflicts.exp cime-syntax.conflicts)))

(rule (target cime-term.opp.out) (deps cime-term.mly)
  (action
    (with-outputs-to cime-term.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-term) (action (diff cime-term.opp.exp cime-term.opp.out)))

(rule
  (targets cime-term.out cime-term.automaton cime-term.automaton.resolved
    cime-term.conflicts cime-term.timings)
  (deps cime-term.mly)
  (action
    (with-outputs-to cime-term.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-term.timings %{deps})))))

(rule (alias cime-term) (action (diff cime-term.exp cime-term.out)))

(rule (alias cime-term)
  (action (diff cime-term.automaton.exp cime-term.automaton)))

(rule (alias cime-term)
  (action
    (diff cime-term.automaton.resolved.exp cime-term.automaton.resolved)))

(rule (alias cime-term)
  (action (diff cime-term.conflicts.exp cime-term.conflicts)))

(rule (target cime-terms.opp.out) (deps cime-terms.mly)
  (action
    (with-outputs-to cime-terms.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-terms)
  (action (diff cime-terms.opp.exp cime-terms.opp.out)))

(rule
  (targets cime-terms.out cime-terms.automaton cime-terms.automaton.resolved
    cime-terms.conflicts cime-terms.timings)
  (deps cime-terms.mly)
  (action
    (with-outputs-to cime-terms.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-terms.timings %{deps})))))

(rule (alias cime-terms) (action (diff cime-terms.exp cime-terms.out)))

(rule (alias cime-terms)
  (action (diff cime-terms.automaton.exp cime-terms.automaton)))

(rule (alias cime-terms)
  (action
    (diff cime-terms.automaton.resolved.exp cime-terms.automaton.resolved)))

(rule (alias cime-terms)
  (action (diff cime-terms.conflicts.exp cime-terms.conflicts)))

(rule (target cime-terms-signature.opp.out) (deps cime-terms-signature.mly)
  (action
    (with-outputs-to cime-terms-signature.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-terms-signature)
  (action (diff cime-terms-signature.opp.exp cime-terms-signature.opp.out)))

(rule
  (targets cime-terms-signature.out cime-terms-signature.automaton
    cime-terms-signature.automaton.resolved cime-terms-signature.conflicts
    cime-terms-signature.timings)
  (deps cime-terms-signature.mly)
  (action
    (with-outputs-to cime-terms-signature.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-terms-signature.timings %{deps})))))

(rule (alias cime-terms-signature)
  (action (diff cime-terms-signature.exp cime-terms-signature.out)))

(rule (alias cime-terms-signature)
  (action
    (diff cime-terms-signature.automaton.exp cime-terms-signature.automaton)))

(rule (alias cime-terms-signature)
  (action
    (diff cime-terms-signature.automaton.resolved.exp
      cime-terms-signature.automaton.resolved)))

(rule (alias cime-terms-signature)
  (action
    (diff cime-terms-signature.conflicts.exp cime-terms-signature.conflicts)))

(rule (target cime-theory.opp.out) (deps cime-theory.mly)
  (action
    (with-outputs-to cime-theory.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-theory)
  (action (diff cime-theory.opp.exp cime-theory.opp.out)))

(rule
  (targets cime-theory.out cime-theory.automaton
    cime-theory.automaton.resolved cime-theory.conflicts cime-theory.timings)
  (deps cime-theory.mly)
  (action
    (with-outputs-to cime-theory.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-theory.timings %{deps})))))

(rule (alias cime-theory) (action (diff cime-theory.exp cime-theory.out)))

(rule (alias cime-theory)
  (action (diff cime-theory.automaton.exp cime-theory.automaton)))

(rule (alias cime-theory)
  (action
    (diff cime-theory.automaton.resolved.exp cime-theory.automaton.resolved)))

(rule (alias cime-theory)
  (action (diff cime-theory.conflicts.exp cime-theory.conflicts)))

(rule (target cime-toplevel.opp.out) (deps cime-toplevel.mly)
  (action
    (with-outputs-to cime-toplevel.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-toplevel)
  (action (diff cime-toplevel.opp.exp cime-toplevel.opp.out)))

(rule
  (targets cime-toplevel.out cime-toplevel.automaton
    cime-toplevel.automaton.resolved cime-toplevel.conflicts
    cime-toplevel.timings)
  (deps cime-toplevel.mly)
  (action
    (with-outputs-to cime-toplevel.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-toplevel.timings %{deps})))))

(rule (alias cime-toplevel)
  (action (diff cime-toplevel.exp cime-toplevel.out)))

(rule (alias cime-toplevel)
  (action (diff cime-toplevel.automaton.exp cime-toplevel.automaton)))

(rule (alias cime-toplevel)
  (action
    (diff cime-toplevel.automaton.resolved.exp
      cime-toplevel.automaton.resolved)))

(rule (alias cime-toplevel)
  (action (diff cime-toplevel.conflicts.exp cime-toplevel.conflicts)))

(rule (target cime-word.opp.out) (deps cime-word.mly)
  (action
    (with-outputs-to cime-word.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cime-word) (action (diff cime-word.opp.exp cime-word.opp.out)))

(rule
  (targets cime-word.out cime-word.automaton cime-word.automaton.resolved
    cime-word.conflicts cime-word.timings)
  (deps cime-word.mly)
  (action
    (with-outputs-to cime-word.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cime-word.timings %{deps})))))

(rule (alias cime-word) (action (diff cime-word.exp cime-word.out)))

(rule (alias cime-word)
  (action (diff cime-word.automaton.exp cime-word.automaton)))

(rule (alias cime-word)
  (action
    (diff cime-word.automaton.resolved.exp cime-word.automaton.resolved)))

(rule (alias cime-word)
  (action (diff cime-word.conflicts.exp cime-word.conflicts)))

(rule (target cminor.opp.out) (deps cminor.mly)
  (action
    (with-outputs-to cminor.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cminor) (action (diff cminor.opp.exp cminor.opp.out)))

(rule
  (targets cminor.out cminor.automaton cminor.automaton.resolved
    cminor.conflicts cminor.timings)
  (deps cminor.mly)
  (action
    (with-outputs-to cminor.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cminor.timings %{deps})))))

(rule (alias cminor) (action (diff cminor.exp cminor.out)))

(rule (alias cminor) (action (diff cminor.automaton.exp cminor.automaton)))

(rule (alias cminor)
  (action (diff cminor.automaton.resolved.exp cminor.automaton.resolved)))

(rule (alias cminor) (action (diff cminor.conflicts.exp cminor.conflicts)))

(rule (target cocci.opp.out) (deps cocci.mly)
  (action
    (with-outputs-to cocci.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cocci) (action (diff cocci.opp.exp cocci.opp.out)))

(rule
  (targets cocci.out cocci.automaton cocci.automaton.resolved cocci.conflicts
    cocci.timings)
  (deps cocci.mly)
  (action
    (with-outputs-to cocci.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cocci.timings %{deps})))))

(rule (alias cocci) (action (diff cocci.exp cocci.out)))

(rule (alias cocci) (action (diff cocci.automaton.exp cocci.automaton)))

(rule (alias cocci)
  (action (diff cocci.automaton.resolved.exp cocci.automaton.resolved)))

(rule (alias cocci) (action (diff cocci.conflicts.exp cocci.conflicts)))

(rule (target coccinelle.1.0.2-parser_c.opp.out)
  (deps coccinelle.1.0.2-parser_c.mly)
  (action
    (with-outputs-to coccinelle.1.0.2-parser_c.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias coccinelle.1.0.2-parser_c)
  (action
    (diff coccinelle.1.0.2-parser_c.opp.exp
      coccinelle.1.0.2-parser_c.opp.out)))

(rule
  (targets coccinelle.1.0.2-parser_c.out coccinelle.1.0.2-parser_c.automaton
    coccinelle.1.0.2-parser_c.automaton.resolved
    coccinelle.1.0.2-parser_c.conflicts coccinelle.1.0.2-parser_c.timings)
  (deps coccinelle.1.0.2-parser_c.mly)
  (action
    (with-outputs-to coccinelle.1.0.2-parser_c.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to coccinelle.1.0.2-parser_c.timings %{deps})))))

(rule (alias coccinelle.1.0.2-parser_c)
  (action (diff coccinelle.1.0.2-parser_c.exp coccinelle.1.0.2-parser_c.out)))

(rule (alias coccinelle.1.0.2-parser_c)
  (action
    (diff coccinelle.1.0.2-parser_c.automaton.exp
      coccinelle.1.0.2-parser_c.automaton)))

(rule (alias coccinelle.1.0.2-parser_c)
  (action
    (diff coccinelle.1.0.2-parser_c.automaton.resolved.exp
      coccinelle.1.0.2-parser_c.automaton.resolved)))

(rule (alias coccinelle.1.0.2-parser_c)
  (action
    (diff coccinelle.1.0.2-parser_c.conflicts.exp
      coccinelle.1.0.2-parser_c.conflicts)))

(rule (target coccinelle.1.0.2-parser_cocci_menhir.opp.out)
  (deps coccinelle.1.0.2-parser_cocci_menhir.mly)
  (action
    (with-outputs-to coccinelle.1.0.2-parser_cocci_menhir.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias coccinelle.1.0.2-parser_cocci_menhir)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.opp.exp
      coccinelle.1.0.2-parser_cocci_menhir.opp.out)))

(rule
  (targets coccinelle.1.0.2-parser_cocci_menhir.out
    coccinelle.1.0.2-parser_cocci_menhir.automaton
    coccinelle.1.0.2-parser_cocci_menhir.automaton.resolved
    coccinelle.1.0.2-parser_cocci_menhir.conflicts
    coccinelle.1.0.2-parser_cocci_menhir.timings)
  (deps coccinelle.1.0.2-parser_cocci_menhir.mly)
  (action
    (with-outputs-to coccinelle.1.0.2-parser_cocci_menhir.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to coccinelle.1.0.2-parser_cocci_menhir.timings %{deps})))))

(rule (alias coccinelle.1.0.2-parser_cocci_menhir)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.exp
      coccinelle.1.0.2-parser_cocci_menhir.out)))

(rule (alias coccinelle.1.0.2-parser_cocci_menhir)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.automaton.exp
      coccinelle.1.0.2-parser_cocci_menhir.automaton)))

(rule (alias coccinelle.1.0.2-parser_cocci_menhir)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.automaton.resolved.exp
      coccinelle.1.0.2-parser_cocci_menhir.automaton.resolved)))

(rule (alias coccinelle.1.0.2-parser_cocci_menhir)
  (action
    (diff coccinelle.1.0.2-parser_cocci_menhir.conflicts.exp
      coccinelle.1.0.2-parser_cocci_menhir.conflicts)))

(rule (target coercion-constraint.opp.out) (deps coercion-constraint.mly)
  (action
    (with-outputs-to coercion-constraint.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias coercion-constraint)
  (action (diff coercion-constraint.opp.exp coercion-constraint.opp.out)))

(rule
  (targets coercion-constraint.out coercion-constraint.automaton
    coercion-constraint.automaton.resolved coercion-constraint.conflicts
    coercion-constraint.timings)
  (deps coercion-constraint.mly)
  (action
    (with-outputs-to coercion-constraint.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to coercion-constraint.timings %{deps})))))

(rule (alias coercion-constraint)
  (action (diff coercion-constraint.exp coercion-constraint.out)))

(rule (alias coercion-constraint)
  (action
    (diff coercion-constraint.automaton.exp coercion-constraint.automaton)))

(rule (alias coercion-constraint)
  (action
    (diff coercion-constraint.automaton.resolved.exp
      coercion-constraint.automaton.resolved)))

(rule (alias coercion-constraint)
  (action
    (diff coercion-constraint.conflicts.exp coercion-constraint.conflicts)))

(rule (target coercion-mini.opp.out) (deps coercion-mini.mly)
  (action
    (with-outputs-to coercion-mini.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias coercion-mini)
  (action (diff coercion-mini.opp.exp coercion-mini.opp.out)))

(rule
  (targets coercion-mini.out coercion-mini.automaton
    coercion-mini.automaton.resolved coercion-mini.conflicts
    coercion-mini.timings)
  (deps coercion-mini.mly)
  (action
    (with-outputs-to coercion-mini.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to coercion-mini.timings %{deps})))))

(rule (alias coercion-mini)
  (action (diff coercion-mini.exp coercion-mini.out)))

(rule (alias coercion-mini)
  (action (diff coercion-mini.automaton.exp coercion-mini.automaton)))

(rule (alias coercion-mini)
  (action
    (diff coercion-mini.automaton.resolved.exp
      coercion-mini.automaton.resolved)))

(rule (alias coercion-mini)
  (action (diff coercion-mini.conflicts.exp coercion-mini.conflicts)))

(rule (target cohttp.1.2.0-accept_parser.opp.out)
  (deps cohttp.1.2.0-accept_parser.mly)
  (action
    (with-outputs-to cohttp.1.2.0-accept_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cohttp.1.2.0-accept_parser)
  (action
    (diff cohttp.1.2.0-accept_parser.opp.exp
      cohttp.1.2.0-accept_parser.opp.out)))

(rule
  (targets cohttp.1.2.0-accept_parser.out
    cohttp.1.2.0-accept_parser.automaton
    cohttp.1.2.0-accept_parser.automaton.resolved
    cohttp.1.2.0-accept_parser.conflicts cohttp.1.2.0-accept_parser.timings)
  (deps cohttp.1.2.0-accept_parser.mly)
  (action
    (with-outputs-to cohttp.1.2.0-accept_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cohttp.1.2.0-accept_parser.timings %{deps})))))

(rule (alias cohttp.1.2.0-accept_parser)
  (action
    (diff cohttp.1.2.0-accept_parser.exp cohttp.1.2.0-accept_parser.out)))

(rule (alias cohttp.1.2.0-accept_parser)
  (action
    (diff cohttp.1.2.0-accept_parser.automaton.exp
      cohttp.1.2.0-accept_parser.automaton)))

(rule (alias cohttp.1.2.0-accept_parser)
  (action
    (diff cohttp.1.2.0-accept_parser.automaton.resolved.exp
      cohttp.1.2.0-accept_parser.automaton.resolved)))

(rule (alias cohttp.1.2.0-accept_parser)
  (action
    (diff cohttp.1.2.0-accept_parser.conflicts.exp
      cohttp.1.2.0-accept_parser.conflicts)))

(rule (target compcert_pre_parser.opp.out) (deps compcert_pre_parser.mly)
  (action
    (with-outputs-to compcert_pre_parser.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:compcert_pre_parser.flags}
          %{deps})))))

(rule (alias compcert_pre_parser)
  (action (diff compcert_pre_parser.opp.exp compcert_pre_parser.opp.out)))

(rule
  (targets compcert_pre_parser.out compcert_pre_parser.automaton
    compcert_pre_parser.automaton.resolved compcert_pre_parser.conflicts
    compcert_pre_parser.timings)
  (deps compcert_pre_parser.mly)
  (action
    (with-outputs-to compcert_pre_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to compcert_pre_parser.timings
          %{read-lines:compcert_pre_parser.flags} %{deps})))))

(rule (alias compcert_pre_parser)
  (action (diff compcert_pre_parser.exp compcert_pre_parser.out)))

(rule (alias compcert_pre_parser)
  (action
    (diff compcert_pre_parser.automaton.exp compcert_pre_parser.automaton)))

(rule (alias compcert_pre_parser)
  (action
    (diff compcert_pre_parser.automaton.resolved.exp
      compcert_pre_parser.automaton.resolved)))

(rule (alias compcert_pre_parser)
  (action
    (diff compcert_pre_parser.conflicts.exp compcert_pre_parser.conflicts)))

(rule (target compcert_pre_parser_canonical.opp.out)
  (deps compcert_pre_parser_canonical.mly)
  (action
    (with-outputs-to compcert_pre_parser_canonical.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess
          %{read-lines:compcert_pre_parser_canonical.flags} %{deps})))))

(rule (alias compcert_pre_parser_canonical)
  (action
    (diff compcert_pre_parser_canonical.opp.exp
      compcert_pre_parser_canonical.opp.out)))

(rule
  (targets compcert_pre_parser_canonical.out
    compcert_pre_parser_canonical.automaton
    compcert_pre_parser_canonical.automaton.resolved
    compcert_pre_parser_canonical.conflicts
    compcert_pre_parser_canonical.timings)
  (deps compcert_pre_parser_canonical.mly)
  (action
    (with-outputs-to compcert_pre_parser_canonical.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to compcert_pre_parser_canonical.timings
          %{read-lines:compcert_pre_parser_canonical.flags} %{deps})))))

(rule (alias compcert_pre_parser_canonical)
  (action
    (diff compcert_pre_parser_canonical.exp
      compcert_pre_parser_canonical.out)))

(rule (alias compcert_pre_parser_canonical)
  (action
    (diff compcert_pre_parser_canonical.automaton.exp
      compcert_pre_parser_canonical.automaton)))

(rule (alias compcert_pre_parser_canonical)
  (action
    (diff compcert_pre_parser_canonical.automaton.resolved.exp
      compcert_pre_parser_canonical.automaton.resolved)))

(rule (alias compcert_pre_parser_canonical)
  (action
    (diff compcert_pre_parser_canonical.conflicts.exp
      compcert_pre_parser_canonical.conflicts)))

(rule (target compcert_pre_parser_new.opp.out)
  (deps compcert_pre_parser_new.mly)
  (action
    (with-outputs-to compcert_pre_parser_new.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess
          %{read-lines:compcert_pre_parser_new.flags} %{deps})))))

(rule (alias compcert_pre_parser_new)
  (action
    (diff compcert_pre_parser_new.opp.exp compcert_pre_parser_new.opp.out)))

(rule
  (targets compcert_pre_parser_new.out compcert_pre_parser_new.automaton
    compcert_pre_parser_new.automaton.resolved
    compcert_pre_parser_new.conflicts compcert_pre_parser_new.timings)
  (deps compcert_pre_parser_new.mly)
  (action
    (with-outputs-to compcert_pre_parser_new.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to compcert_pre_parser_new.timings
          %{read-lines:compcert_pre_parser_new.flags} %{deps})))))

(rule (alias compcert_pre_parser_new)
  (action (diff compcert_pre_parser_new.exp compcert_pre_parser_new.out)))

(rule (alias compcert_pre_parser_new)
  (action
    (diff compcert_pre_parser_new.automaton.exp
      compcert_pre_parser_new.automaton)))

(rule (alias compcert_pre_parser_new)
  (action
    (diff compcert_pre_parser_new.automaton.resolved.exp
      compcert_pre_parser_new.automaton.resolved)))

(rule (alias compcert_pre_parser_new)
  (action
    (diff compcert_pre_parser_new.conflicts.exp
      compcert_pre_parser_new.conflicts)))

(rule (target compsyn.opp.out) (deps compsyn.mly)
  (action
    (with-outputs-to compsyn.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias compsyn) (action (diff compsyn.opp.exp compsyn.opp.out)))

(rule
  (targets compsyn.out compsyn.automaton compsyn.automaton.resolved
    compsyn.conflicts compsyn.timings)
  (deps compsyn.mly)
  (action
    (with-outputs-to compsyn.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to compsyn.timings %{deps})))))

(rule (alias compsyn) (action (diff compsyn.exp compsyn.out)))

(rule (alias compsyn)
  (action (diff compsyn.automaton.exp compsyn.automaton)))

(rule (alias compsyn)
  (action (diff compsyn.automaton.resolved.exp compsyn.automaton.resolved)))

(rule (alias compsyn)
  (action (diff compsyn.conflicts.exp compsyn.conflicts)))

(rule (target condition_parser.opp.out) (deps condition_parser.mly)
  (action
    (with-outputs-to condition_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias condition_parser)
  (action (diff condition_parser.opp.exp condition_parser.opp.out)))

(rule
  (targets condition_parser.out condition_parser.automaton
    condition_parser.automaton.resolved condition_parser.conflicts
    condition_parser.timings)
  (deps condition_parser.mly)
  (action
    (with-outputs-to condition_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to condition_parser.timings %{deps})))))

(rule (alias condition_parser)
  (action (diff condition_parser.exp condition_parser.out)))

(rule (alias condition_parser)
  (action (diff condition_parser.automaton.exp condition_parser.automaton)))

(rule (alias condition_parser)
  (action
    (diff condition_parser.automaton.resolved.exp
      condition_parser.automaton.resolved)))

(rule (alias condition_parser)
  (action (diff condition_parser.conflicts.exp condition_parser.conflicts)))

(rule (target confluence.opp.out) (deps confluence.mly)
  (action
    (with-outputs-to confluence.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias confluence)
  (action (diff confluence.opp.exp confluence.opp.out)))

(rule
  (targets confluence.out confluence.automaton confluence.automaton.resolved
    confluence.conflicts confluence.timings)
  (deps confluence.mly)
  (action
    (with-outputs-to confluence.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to confluence.timings %{deps})))))

(rule (alias confluence) (action (diff confluence.exp confluence.out)))

(rule (alias confluence)
  (action (diff confluence.automaton.exp confluence.automaton)))

(rule (alias confluence)
  (action
    (diff confluence.automaton.resolved.exp confluence.automaton.resolved)))

(rule (alias confluence)
  (action (diff confluence.conflicts.exp confluence.conflicts)))

(rule (target confluence-fnf.opp.out) (deps confluence-fnf.mly)
  (action
    (with-outputs-to confluence-fnf.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias confluence-fnf)
  (action (diff confluence-fnf.opp.exp confluence-fnf.opp.out)))

(rule
  (targets confluence-fnf.out confluence-fnf.automaton
    confluence-fnf.automaton.resolved confluence-fnf.conflicts
    confluence-fnf.timings)
  (deps confluence-fnf.mly)
  (action
    (with-outputs-to confluence-fnf.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to confluence-fnf.timings %{deps})))))

(rule (alias confluence-fnf)
  (action (diff confluence-fnf.exp confluence-fnf.out)))

(rule (alias confluence-fnf)
  (action (diff confluence-fnf.automaton.exp confluence-fnf.automaton)))

(rule (alias confluence-fnf)
  (action
    (diff confluence-fnf.automaton.resolved.exp
      confluence-fnf.automaton.resolved)))

(rule (alias confluence-fnf)
  (action (diff confluence-fnf.conflicts.exp confluence-fnf.conflicts)))

(rule (target confluence-psl.opp.out) (deps confluence-psl.mly)
  (action
    (with-outputs-to confluence-psl.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias confluence-psl)
  (action (diff confluence-psl.opp.exp confluence-psl.opp.out)))

(rule
  (targets confluence-psl.out confluence-psl.automaton
    confluence-psl.automaton.resolved confluence-psl.conflicts
    confluence-psl.timings)
  (deps confluence-psl.mly)
  (action
    (with-outputs-to confluence-psl.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to confluence-psl.timings %{deps})))))

(rule (alias confluence-psl)
  (action (diff confluence-psl.exp confluence-psl.out)))

(rule (alias confluence-psl)
  (action (diff confluence-psl.automaton.exp confluence-psl.automaton)))

(rule (alias confluence-psl)
  (action
    (diff confluence-psl.automaton.resolved.exp
      confluence-psl.automaton.resolved)))

(rule (alias confluence-psl)
  (action (diff confluence-psl.conflicts.exp confluence-psl.conflicts)))

(rule (target couac.opp.out) (deps couac.mly)
  (action
    (with-outputs-to couac.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias couac) (action (diff couac.opp.exp couac.opp.out)))

(rule
  (targets couac.out couac.automaton couac.automaton.resolved couac.conflicts
    couac.timings)
  (deps couac.mly)
  (action
    (with-outputs-to couac.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to couac.timings %{deps})))))

(rule (alias couac) (action (diff couac.exp couac.out)))

(rule (alias couac) (action (diff couac.automaton.exp couac.automaton)))

(rule (alias couac)
  (action (diff couac.automaton.resolved.exp couac.automaton.resolved)))

(rule (alias couac) (action (diff couac.conflicts.exp couac.conflicts)))

(rule (target cppo_ocamlbuild.1.6.0-cppo_parser.opp.out)
  (deps cppo_ocamlbuild.1.6.0-cppo_parser.mly)
  (action
    (with-outputs-to cppo_ocamlbuild.1.6.0-cppo_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cppo_ocamlbuild.1.6.0-cppo_parser)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.opp.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.opp.out)))

(rule
  (targets cppo_ocamlbuild.1.6.0-cppo_parser.out
    cppo_ocamlbuild.1.6.0-cppo_parser.automaton
    cppo_ocamlbuild.1.6.0-cppo_parser.automaton.resolved
    cppo_ocamlbuild.1.6.0-cppo_parser.conflicts
    cppo_ocamlbuild.1.6.0-cppo_parser.timings)
  (deps cppo_ocamlbuild.1.6.0-cppo_parser.mly)
  (action
    (with-outputs-to cppo_ocamlbuild.1.6.0-cppo_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cppo_ocamlbuild.1.6.0-cppo_parser.timings %{deps})))))

(rule (alias cppo_ocamlbuild.1.6.0-cppo_parser)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.out)))

(rule (alias cppo_ocamlbuild.1.6.0-cppo_parser)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.automaton.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.automaton)))

(rule (alias cppo_ocamlbuild.1.6.0-cppo_parser)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.automaton.resolved.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.automaton.resolved)))

(rule (alias cppo_ocamlbuild.1.6.0-cppo_parser)
  (action
    (diff cppo_ocamlbuild.1.6.0-cppo_parser.conflicts.exp
      cppo_ocamlbuild.1.6.0-cppo_parser.conflicts)))

(rule (target cubicle.1.1.2-parser.opp.out) (deps cubicle.1.1.2-parser.mly)
  (action
    (with-outputs-to cubicle.1.1.2-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cubicle.1.1.2-parser)
  (action (diff cubicle.1.1.2-parser.opp.exp cubicle.1.1.2-parser.opp.out)))

(rule
  (targets cubicle.1.1.2-parser.out cubicle.1.1.2-parser.automaton
    cubicle.1.1.2-parser.automaton.resolved cubicle.1.1.2-parser.conflicts
    cubicle.1.1.2-parser.timings)
  (deps cubicle.1.1.2-parser.mly)
  (action
    (with-outputs-to cubicle.1.1.2-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cubicle.1.1.2-parser.timings %{deps})))))

(rule (alias cubicle.1.1.2-parser)
  (action (diff cubicle.1.1.2-parser.exp cubicle.1.1.2-parser.out)))

(rule (alias cubicle.1.1.2-parser)
  (action
    (diff cubicle.1.1.2-parser.automaton.exp cubicle.1.1.2-parser.automaton)))

(rule (alias cubicle.1.1.2-parser)
  (action
    (diff cubicle.1.1.2-parser.automaton.resolved.exp
      cubicle.1.1.2-parser.automaton.resolved)))

(rule (alias cubicle.1.1.2-parser)
  (action
    (diff cubicle.1.1.2-parser.conflicts.exp cubicle.1.1.2-parser.conflicts)))

(rule (target cudf.0.9-cudf_type_parser.opp.out)
  (deps cudf.0.9-cudf_type_parser.mly)
  (action
    (with-outputs-to cudf.0.9-cudf_type_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cudf.0.9-cudf_type_parser)
  (action
    (diff cudf.0.9-cudf_type_parser.opp.exp
      cudf.0.9-cudf_type_parser.opp.out)))

(rule
  (targets cudf.0.9-cudf_type_parser.out cudf.0.9-cudf_type_parser.automaton
    cudf.0.9-cudf_type_parser.automaton.resolved
    cudf.0.9-cudf_type_parser.conflicts cudf.0.9-cudf_type_parser.timings)
  (deps cudf.0.9-cudf_type_parser.mly)
  (action
    (with-outputs-to cudf.0.9-cudf_type_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cudf.0.9-cudf_type_parser.timings %{deps})))))

(rule (alias cudf.0.9-cudf_type_parser)
  (action (diff cudf.0.9-cudf_type_parser.exp cudf.0.9-cudf_type_parser.out)))

(rule (alias cudf.0.9-cudf_type_parser)
  (action
    (diff cudf.0.9-cudf_type_parser.automaton.exp
      cudf.0.9-cudf_type_parser.automaton)))

(rule (alias cudf.0.9-cudf_type_parser)
  (action
    (diff cudf.0.9-cudf_type_parser.automaton.resolved.exp
      cudf.0.9-cudf_type_parser.automaton.resolved)))

(rule (alias cudf.0.9-cudf_type_parser)
  (action
    (diff cudf.0.9-cudf_type_parser.conflicts.exp
      cudf.0.9-cudf_type_parser.conflicts)))

(rule (target cutdown.opp.out) (deps cutdown.mly)
  (action
    (with-outputs-to cutdown.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias cutdown) (action (diff cutdown.opp.exp cutdown.opp.out)))

(rule
  (targets cutdown.out cutdown.automaton cutdown.automaton.resolved
    cutdown.conflicts cutdown.timings)
  (deps cutdown.mly)
  (action
    (with-outputs-to cutdown.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to cutdown.timings %{deps})))))

(rule (alias cutdown) (action (diff cutdown.exp cutdown.out)))

(rule (alias cutdown)
  (action (diff cutdown.automaton.exp cutdown.automaton)))

(rule (alias cutdown)
  (action (diff cutdown.automaton.resolved.exp cutdown.automaton.resolved)))

(rule (alias cutdown)
  (action (diff cutdown.conflicts.exp cutdown.conflicts)))

(rule (target dario.opp.out) (deps dario.mly)
  (action
    (with-outputs-to dario.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias dario) (action (diff dario.opp.exp dario.opp.out)))

(rule
  (targets dario.out dario.automaton dario.automaton.resolved dario.conflicts
    dario.timings)
  (deps dario.mly)
  (action
    (with-outputs-to dario.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to dario.timings %{deps})))))

(rule (alias dario) (action (diff dario.exp dario.out)))

(rule (alias dario) (action (diff dario.automaton.exp dario.automaton)))

(rule (alias dario)
  (action (diff dario.automaton.resolved.exp dario.automaton.resolved)))

(rule (alias dario) (action (diff dario.conflicts.exp dario.conflicts)))

(rule (target datalog.0.5.2-topDownParser.opp.out)
  (deps datalog.0.5.2-topDownParser.mly)
  (action
    (with-outputs-to datalog.0.5.2-topDownParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias datalog.0.5.2-topDownParser)
  (action
    (diff datalog.0.5.2-topDownParser.opp.exp
      datalog.0.5.2-topDownParser.opp.out)))

(rule
  (targets datalog.0.5.2-topDownParser.out
    datalog.0.5.2-topDownParser.automaton
    datalog.0.5.2-topDownParser.automaton.resolved
    datalog.0.5.2-topDownParser.conflicts
    datalog.0.5.2-topDownParser.timings)
  (deps datalog.0.5.2-topDownParser.mly)
  (action
    (with-outputs-to datalog.0.5.2-topDownParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to datalog.0.5.2-topDownParser.timings %{deps})))))

(rule (alias datalog.0.5.2-topDownParser)
  (action
    (diff datalog.0.5.2-topDownParser.exp datalog.0.5.2-topDownParser.out)))

(rule (alias datalog.0.5.2-topDownParser)
  (action
    (diff datalog.0.5.2-topDownParser.automaton.exp
      datalog.0.5.2-topDownParser.automaton)))

(rule (alias datalog.0.5.2-topDownParser)
  (action
    (diff datalog.0.5.2-topDownParser.automaton.resolved.exp
      datalog.0.5.2-topDownParser.automaton.resolved)))

(rule (alias datalog.0.5.2-topDownParser)
  (action
    (diff datalog.0.5.2-topDownParser.conflicts.exp
      datalog.0.5.2-topDownParser.conflicts)))

(rule (target dbforge.2.0.1-sqml_parser.opp.out)
  (deps dbforge.2.0.1-sqml_parser.mly)
  (action
    (with-outputs-to dbforge.2.0.1-sqml_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias dbforge.2.0.1-sqml_parser)
  (action
    (diff dbforge.2.0.1-sqml_parser.opp.exp
      dbforge.2.0.1-sqml_parser.opp.out)))

(rule
  (targets dbforge.2.0.1-sqml_parser.out dbforge.2.0.1-sqml_parser.automaton
    dbforge.2.0.1-sqml_parser.automaton.resolved
    dbforge.2.0.1-sqml_parser.conflicts dbforge.2.0.1-sqml_parser.timings)
  (deps dbforge.2.0.1-sqml_parser.mly)
  (action
    (with-outputs-to dbforge.2.0.1-sqml_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to dbforge.2.0.1-sqml_parser.timings %{deps})))))

(rule (alias dbforge.2.0.1-sqml_parser)
  (action (diff dbforge.2.0.1-sqml_parser.exp dbforge.2.0.1-sqml_parser.out)))

(rule (alias dbforge.2.0.1-sqml_parser)
  (action
    (diff dbforge.2.0.1-sqml_parser.automaton.exp
      dbforge.2.0.1-sqml_parser.automaton)))

(rule (alias dbforge.2.0.1-sqml_parser)
  (action
    (diff dbforge.2.0.1-sqml_parser.automaton.resolved.exp
      dbforge.2.0.1-sqml_parser.automaton.resolved)))

(rule (alias dbforge.2.0.1-sqml_parser)
  (action
    (diff dbforge.2.0.1-sqml_parser.conflicts.exp
      dbforge.2.0.1-sqml_parser.conflicts)))

(rule (target debian-formats.0.1.1-DF822_parser.opp.out)
  (deps debian-formats.0.1.1-DF822_parser.mly)
  (action
    (with-outputs-to debian-formats.0.1.1-DF822_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias debian-formats.0.1.1-DF822_parser)
  (action
    (diff debian-formats.0.1.1-DF822_parser.opp.exp
      debian-formats.0.1.1-DF822_parser.opp.out)))

(rule
  (targets debian-formats.0.1.1-DF822_parser.out
    debian-formats.0.1.1-DF822_parser.automaton
    debian-formats.0.1.1-DF822_parser.automaton.resolved
    debian-formats.0.1.1-DF822_parser.conflicts
    debian-formats.0.1.1-DF822_parser.timings)
  (deps debian-formats.0.1.1-DF822_parser.mly)
  (action
    (with-outputs-to debian-formats.0.1.1-DF822_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to debian-formats.0.1.1-DF822_parser.timings %{deps})))))

(rule (alias debian-formats.0.1.1-DF822_parser)
  (action
    (diff debian-formats.0.1.1-DF822_parser.exp
      debian-formats.0.1.1-DF822_parser.out)))

(rule (alias debian-formats.0.1.1-DF822_parser)
  (action
    (diff debian-formats.0.1.1-DF822_parser.automaton.exp
      debian-formats.0.1.1-DF822_parser.automaton)))

(rule (alias debian-formats.0.1.1-DF822_parser)
  (action
    (diff debian-formats.0.1.1-DF822_parser.automaton.resolved.exp
      debian-formats.0.1.1-DF822_parser.automaton.resolved)))

(rule (alias debian-formats.0.1.1-DF822_parser)
  (action
    (diff debian-formats.0.1.1-DF822_parser.conflicts.exp
      debian-formats.0.1.1-DF822_parser.conflicts)))

(rule (target dedukti.2.6.0-menhir_parser.opp.out)
  (deps dedukti.2.6.0-menhir_parser.mly)
  (action
    (with-outputs-to dedukti.2.6.0-menhir_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias dedukti.2.6.0-menhir_parser)
  (action
    (diff dedukti.2.6.0-menhir_parser.opp.exp
      dedukti.2.6.0-menhir_parser.opp.out)))

(rule
  (targets dedukti.2.6.0-menhir_parser.out
    dedukti.2.6.0-menhir_parser.automaton
    dedukti.2.6.0-menhir_parser.automaton.resolved
    dedukti.2.6.0-menhir_parser.conflicts
    dedukti.2.6.0-menhir_parser.timings)
  (deps dedukti.2.6.0-menhir_parser.mly)
  (action
    (with-outputs-to dedukti.2.6.0-menhir_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to dedukti.2.6.0-menhir_parser.timings %{deps})))))

(rule (alias dedukti.2.6.0-menhir_parser)
  (action
    (diff dedukti.2.6.0-menhir_parser.exp dedukti.2.6.0-menhir_parser.out)))

(rule (alias dedukti.2.6.0-menhir_parser)
  (action
    (diff dedukti.2.6.0-menhir_parser.automaton.exp
      dedukti.2.6.0-menhir_parser.automaton)))

(rule (alias dedukti.2.6.0-menhir_parser)
  (action
    (diff dedukti.2.6.0-menhir_parser.automaton.resolved.exp
      dedukti.2.6.0-menhir_parser.automaton.resolved)))

(rule (alias dedukti.2.6.0-menhir_parser)
  (action
    (diff dedukti.2.6.0-menhir_parser.conflicts.exp
      dedukti.2.6.0-menhir_parser.conflicts)))

(rule (target diy.5.01-ARMParser.opp.out) (deps diy.5.01-ARMParser.mly)
  (action
    (with-outputs-to diy.5.01-ARMParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias diy.5.01-ARMParser)
  (action (diff diy.5.01-ARMParser.opp.exp diy.5.01-ARMParser.opp.out)))

(rule
  (targets diy.5.01-ARMParser.out diy.5.01-ARMParser.automaton
    diy.5.01-ARMParser.automaton.resolved diy.5.01-ARMParser.conflicts
    diy.5.01-ARMParser.timings)
  (deps diy.5.01-ARMParser.mly)
  (action
    (with-outputs-to diy.5.01-ARMParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to diy.5.01-ARMParser.timings %{deps})))))

(rule (alias diy.5.01-ARMParser)
  (action (diff diy.5.01-ARMParser.exp diy.5.01-ARMParser.out)))

(rule (alias diy.5.01-ARMParser)
  (action
    (diff diy.5.01-ARMParser.automaton.exp diy.5.01-ARMParser.automaton)))

(rule (alias diy.5.01-ARMParser)
  (action
    (diff diy.5.01-ARMParser.automaton.resolved.exp
      diy.5.01-ARMParser.automaton.resolved)))

(rule (alias diy.5.01-ARMParser)
  (action
    (diff diy.5.01-ARMParser.conflicts.exp diy.5.01-ARMParser.conflicts)))

(rule (target dml.opp.out) (deps dml.mly)
  (action
    (with-outputs-to dml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias dml) (action (diff dml.opp.exp dml.opp.out)))

(rule
  (targets dml.out dml.automaton dml.automaton.resolved dml.conflicts
    dml.timings)
  (deps dml.mly)
  (action
    (with-outputs-to dml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to dml.timings %{deps})))))

(rule (alias dml) (action (diff dml.exp dml.out)))

(rule (alias dml) (action (diff dml.automaton.exp dml.automaton)))

(rule (alias dml)
  (action (diff dml.automaton.resolved.exp dml.automaton.resolved)))

(rule (alias dml) (action (diff dml.conflicts.exp dml.conflicts)))

(rule (target dns_zone_parser.opp.out) (deps dns_zone_parser.mly)
  (action
    (with-outputs-to dns_zone_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias dns_zone_parser)
  (action (diff dns_zone_parser.opp.exp dns_zone_parser.opp.out)))

(rule
  (targets dns_zone_parser.out dns_zone_parser.automaton
    dns_zone_parser.automaton.resolved dns_zone_parser.conflicts
    dns_zone_parser.timings)
  (deps dns_zone_parser.mly)
  (action
    (with-outputs-to dns_zone_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to dns_zone_parser.timings %{deps})))))

(rule (alias dns_zone_parser)
  (action (diff dns_zone_parser.exp dns_zone_parser.out)))

(rule (alias dns_zone_parser)
  (action (diff dns_zone_parser.automaton.exp dns_zone_parser.automaton)))

(rule (alias dns_zone_parser)
  (action
    (diff dns_zone_parser.automaton.resolved.exp
      dns_zone_parser.automaton.resolved)))

(rule (alias dns_zone_parser)
  (action (diff dns_zone_parser.conflicts.exp dns_zone_parser.conflicts)))

(rule (target doc-ock-xml.1.2.1-docOckXmlParser.opp.out)
  (deps doc-ock-xml.1.2.1-docOckXmlParser.mly)
  (action
    (with-outputs-to doc-ock-xml.1.2.1-docOckXmlParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias doc-ock-xml.1.2.1-docOckXmlParser)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.opp.exp
      doc-ock-xml.1.2.1-docOckXmlParser.opp.out)))

(rule
  (targets doc-ock-xml.1.2.1-docOckXmlParser.out
    doc-ock-xml.1.2.1-docOckXmlParser.automaton
    doc-ock-xml.1.2.1-docOckXmlParser.automaton.resolved
    doc-ock-xml.1.2.1-docOckXmlParser.conflicts
    doc-ock-xml.1.2.1-docOckXmlParser.timings)
  (deps doc-ock-xml.1.2.1-docOckXmlParser.mly)
  (action
    (with-outputs-to doc-ock-xml.1.2.1-docOckXmlParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to doc-ock-xml.1.2.1-docOckXmlParser.timings %{deps})))))

(rule (alias doc-ock-xml.1.2.1-docOckXmlParser)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.exp
      doc-ock-xml.1.2.1-docOckXmlParser.out)))

(rule (alias doc-ock-xml.1.2.1-docOckXmlParser)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.automaton.exp
      doc-ock-xml.1.2.1-docOckXmlParser.automaton)))

(rule (alias doc-ock-xml.1.2.1-docOckXmlParser)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.automaton.resolved.exp
      doc-ock-xml.1.2.1-docOckXmlParser.automaton.resolved)))

(rule (alias doc-ock-xml.1.2.1-docOckXmlParser)
  (action
    (diff doc-ock-xml.1.2.1-docOckXmlParser.conflicts.exp
      doc-ock-xml.1.2.1-docOckXmlParser.conflicts)))

(rule (target docOckXmlParser.opp.out) (deps docOckXmlParser.mly)
  (action
    (with-outputs-to docOckXmlParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias docOckXmlParser)
  (action (diff docOckXmlParser.opp.exp docOckXmlParser.opp.out)))

(rule
  (targets docOckXmlParser.out docOckXmlParser.automaton
    docOckXmlParser.automaton.resolved docOckXmlParser.conflicts
    docOckXmlParser.timings)
  (deps docOckXmlParser.mly)
  (action
    (with-outputs-to docOckXmlParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to docOckXmlParser.timings %{deps})))))

(rule (alias docOckXmlParser)
  (action (diff docOckXmlParser.exp docOckXmlParser.out)))

(rule (alias docOckXmlParser)
  (action (diff docOckXmlParser.automaton.exp docOckXmlParser.automaton)))

(rule (alias docOckXmlParser)
  (action
    (diff docOckXmlParser.automaton.resolved.exp
      docOckXmlParser.automaton.resolved)))

(rule (alias docOckXmlParser)
  (action (diff docOckXmlParser.conflicts.exp docOckXmlParser.conflicts)))

(rule (target dolmen.0.2-parseDimacs.opp.out)
  (deps dolmen.0.2-parseDimacs.mly dolmen.0.2-parseDimacs01.mly)
  (action
    (with-outputs-to dolmen.0.2-parseDimacs.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen.0.2-parseDimacs --only-preprocess %{deps})))))

(rule (alias dolmen.0.2-parseDimacs)
  (action
    (diff dolmen.0.2-parseDimacs.opp.exp dolmen.0.2-parseDimacs.opp.out)))

(rule
  (targets dolmen.0.2-parseDimacs.out dolmen.0.2-parseDimacs.automaton
    dolmen.0.2-parseDimacs.automaton.resolved
    dolmen.0.2-parseDimacs.conflicts dolmen.0.2-parseDimacs.timings)
  (deps dolmen.0.2-parseDimacs.mly dolmen.0.2-parseDimacs01.mly)
  (action
    (with-outputs-to dolmen.0.2-parseDimacs.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen.0.2-parseDimacs --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to
          dolmen.0.2-parseDimacs.timings %{deps})))))

(rule (alias dolmen.0.2-parseDimacs)
  (action (diff dolmen.0.2-parseDimacs.exp dolmen.0.2-parseDimacs.out)))

(rule (alias dolmen.0.2-parseDimacs)
  (action
    (diff dolmen.0.2-parseDimacs.automaton.exp
      dolmen.0.2-parseDimacs.automaton)))

(rule (alias dolmen.0.2-parseDimacs)
  (action
    (diff dolmen.0.2-parseDimacs.automaton.resolved.exp
      dolmen.0.2-parseDimacs.automaton.resolved)))

(rule (alias dolmen.0.2-parseDimacs)
  (action
    (diff dolmen.0.2-parseDimacs.conflicts.exp
      dolmen.0.2-parseDimacs.conflicts)))

(rule (target dolmen.0.2-parseTptp.opp.out)
  (deps dolmen.0.2-parseTptp.mly dolmen.0.2-parseTptp01.mly)
  (action
    (with-outputs-to dolmen.0.2-parseTptp.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen.0.2-parseTptp --only-preprocess %{deps})))))

(rule (alias dolmen.0.2-parseTptp)
  (action (diff dolmen.0.2-parseTptp.opp.exp dolmen.0.2-parseTptp.opp.out)))

(rule
  (targets dolmen.0.2-parseTptp.out dolmen.0.2-parseTptp.automaton
    dolmen.0.2-parseTptp.automaton.resolved dolmen.0.2-parseTptp.conflicts
    dolmen.0.2-parseTptp.timings)
  (deps dolmen.0.2-parseTptp.mly dolmen.0.2-parseTptp01.mly)
  (action
    (with-outputs-to dolmen.0.2-parseTptp.out
      (with-accepted-exit-codes 0
        (run menhir --base dolmen.0.2-parseTptp --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to
          dolmen.0.2-parseTptp.timings %{deps})))))

(rule (alias dolmen.0.2-parseTptp)
  (action (diff dolmen.0.2-parseTptp.exp dolmen.0.2-parseTptp.out)))

(rule (alias dolmen.0.2-parseTptp)
  (action
    (diff dolmen.0.2-parseTptp.automaton.exp dolmen.0.2-parseTptp.automaton)))

(rule (alias dolmen.0.2-parseTptp)
  (action
    (diff dolmen.0.2-parseTptp.automaton.resolved.exp
      dolmen.0.2-parseTptp.automaton.resolved)))

(rule (alias dolmen.0.2-parseTptp)
  (action
    (diff dolmen.0.2-parseTptp.conflicts.exp dolmen.0.2-parseTptp.conflicts)))

(rule (target dule.opp.out) (deps dule.mly)
  (action
    (with-outputs-to dule.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias dule) (action (diff dule.opp.exp dule.opp.out)))

(rule
  (targets dule.out dule.automaton dule.automaton.resolved dule.conflicts
    dule.timings)
  (deps dule.mly)
  (action
    (with-outputs-to dule.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to dule.timings %{deps})))))

(rule (alias dule) (action (diff dule.exp dule.out)))

(rule (alias dule) (action (diff dule.automaton.exp dule.automaton)))

(rule (alias dule)
  (action (diff dule.automaton.resolved.exp dule.automaton.resolved)))

(rule (alias dule) (action (diff dule.conflicts.exp dule.conflicts)))

(rule (target dune.1.4.0-opamBaseParser.opp.out)
  (deps dune.1.4.0-opamBaseParser.mly)
  (action
    (with-outputs-to dune.1.4.0-opamBaseParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias dune.1.4.0-opamBaseParser)
  (action
    (diff dune.1.4.0-opamBaseParser.opp.exp
      dune.1.4.0-opamBaseParser.opp.out)))

(rule
  (targets dune.1.4.0-opamBaseParser.out dune.1.4.0-opamBaseParser.automaton
    dune.1.4.0-opamBaseParser.automaton.resolved
    dune.1.4.0-opamBaseParser.conflicts dune.1.4.0-opamBaseParser.timings)
  (deps dune.1.4.0-opamBaseParser.mly)
  (action
    (with-outputs-to dune.1.4.0-opamBaseParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to dune.1.4.0-opamBaseParser.timings %{deps})))))

(rule (alias dune.1.4.0-opamBaseParser)
  (action (diff dune.1.4.0-opamBaseParser.exp dune.1.4.0-opamBaseParser.out)))

(rule (alias dune.1.4.0-opamBaseParser)
  (action
    (diff dune.1.4.0-opamBaseParser.automaton.exp
      dune.1.4.0-opamBaseParser.automaton)))

(rule (alias dune.1.4.0-opamBaseParser)
  (action
    (diff dune.1.4.0-opamBaseParser.automaton.resolved.exp
      dune.1.4.0-opamBaseParser.automaton.resolved)))

(rule (alias dune.1.4.0-opamBaseParser)
  (action
    (diff dune.1.4.0-opamBaseParser.conflicts.exp
      dune.1.4.0-opamBaseParser.conflicts)))

(rule (target duplicated_prec.opp.out) (deps duplicated_prec.mly)
  (action
    (with-outputs-to duplicated_prec.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias duplicated_prec)
  (action (diff duplicated_prec.opp.exp duplicated_prec.opp.out)))

(rule
  (targets duplicated_prec.out duplicated_prec.automaton
    duplicated_prec.automaton.resolved duplicated_prec.conflicts
    duplicated_prec.timings)
  (deps duplicated_prec.mly)
  (action
    (with-outputs-to duplicated_prec.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to duplicated_prec.timings %{deps})))))

(rule (alias duplicated_prec)
  (action (diff duplicated_prec.exp duplicated_prec.out)))

(rule (alias duplicated_prec)
  (action (diff duplicated_prec.automaton.exp duplicated_prec.automaton)))

(rule (alias duplicated_prec)
  (action
    (diff duplicated_prec.automaton.resolved.exp
      duplicated_prec.automaton.resolved)))

(rule (alias duplicated_prec)
  (action (diff duplicated_prec.conflicts.exp duplicated_prec.conflicts)))

(rule (target efuns.opp.out) (deps efuns.mly)
  (action
    (with-outputs-to efuns.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias efuns) (action (diff efuns.opp.exp efuns.opp.out)))

(rule
  (targets efuns.out efuns.automaton efuns.automaton.resolved efuns.conflicts
    efuns.timings)
  (deps efuns.mly)
  (action
    (with-outputs-to efuns.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to efuns.timings %{deps})))))

(rule (alias efuns) (action (diff efuns.exp efuns.out)))

(rule (alias efuns) (action (diff efuns.automaton.exp efuns.automaton)))

(rule (alias efuns)
  (action (diff efuns.automaton.resolved.exp efuns.automaton.resolved)))

(rule (alias efuns) (action (diff efuns.conflicts.exp efuns.conflicts)))

(rule (target electrod.0.1.7-Parser.opp.out) (deps electrod.0.1.7-Parser.mly)
  (action
    (with-outputs-to electrod.0.1.7-Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias electrod.0.1.7-Parser)
  (action (diff electrod.0.1.7-Parser.opp.exp electrod.0.1.7-Parser.opp.out)))

(rule
  (targets electrod.0.1.7-Parser.out electrod.0.1.7-Parser.automaton
    electrod.0.1.7-Parser.automaton.resolved electrod.0.1.7-Parser.conflicts
    electrod.0.1.7-Parser.timings)
  (deps electrod.0.1.7-Parser.mly)
  (action
    (with-outputs-to electrod.0.1.7-Parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to electrod.0.1.7-Parser.timings %{deps})))))

(rule (alias electrod.0.1.7-Parser)
  (action (diff electrod.0.1.7-Parser.exp electrod.0.1.7-Parser.out)))

(rule (alias electrod.0.1.7-Parser)
  (action
    (diff electrod.0.1.7-Parser.automaton.exp
      electrod.0.1.7-Parser.automaton)))

(rule (alias electrod.0.1.7-Parser)
  (action
    (diff electrod.0.1.7-Parser.automaton.resolved.exp
      electrod.0.1.7-Parser.automaton.resolved)))

(rule (alias electrod.0.1.7-Parser)
  (action
    (diff electrod.0.1.7-Parser.conflicts.exp
      electrod.0.1.7-Parser.conflicts)))

(rule (target electrum00.opp.out)
  (deps electrum00.mly electrum01.mly electrum02.mly electrum03.mly
    electrum04.mly)
  (action
    (with-outputs-to electrum00.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base electrum00 --only-preprocess %{deps})))))

(rule (alias electrum00)
  (action (diff electrum00.opp.exp electrum00.opp.out)))

(rule
  (targets electrum00.out electrum00.automaton electrum00.automaton.resolved
    electrum00.conflicts electrum00.timings)
  (deps electrum00.mly electrum01.mly electrum02.mly electrum03.mly
    electrum04.mly)
  (action
    (with-outputs-to electrum00.out
      (with-accepted-exit-codes 0
        (run menhir --base electrum00 --dump --dump-resolved --explain -lg 2
          -la 2 -lc 2 --timings-to electrum00.timings %{deps})))))

(rule (alias electrum00) (action (diff electrum00.exp electrum00.out)))

(rule (alias electrum00)
  (action (diff electrum00.automaton.exp electrum00.automaton)))

(rule (alias electrum00)
  (action
    (diff electrum00.automaton.resolved.exp electrum00.automaton.resolved)))

(rule (alias electrum00)
  (action (diff electrum00.conflicts.exp electrum00.conflicts)))

(rule (target empty-action.opp.out) (deps empty-action.mly)
  (action
    (with-outputs-to empty-action.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias empty-action)
  (action (diff empty-action.opp.exp empty-action.opp.out)))

(rule
  (targets empty-action.out empty-action.automaton
    empty-action.automaton.resolved empty-action.conflicts
    empty-action.timings)
  (deps empty-action.mly)
  (action
    (with-outputs-to empty-action.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to empty-action.timings %{deps})))))

(rule (alias empty-action) (action (diff empty-action.exp empty-action.out)))

(rule (alias empty-action)
  (action (diff empty-action.automaton.exp empty-action.automaton)))

(rule (alias empty-action)
  (action
    (diff empty-action.automaton.resolved.exp
      empty-action.automaton.resolved)))

(rule (alias empty-action)
  (action (diff empty-action.conflicts.exp empty-action.conflicts)))

(rule (target end-of-stream-conflict.opp.out)
  (deps end-of-stream-conflict.mly)
  (action
    (with-outputs-to end-of-stream-conflict.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias end-of-stream-conflict)
  (action
    (diff end-of-stream-conflict.opp.exp end-of-stream-conflict.opp.out)))

(rule
  (targets end-of-stream-conflict.out end-of-stream-conflict.automaton
    end-of-stream-conflict.automaton.resolved
    end-of-stream-conflict.conflicts end-of-stream-conflict.timings)
  (deps end-of-stream-conflict.mly)
  (action
    (with-outputs-to end-of-stream-conflict.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to end-of-stream-conflict.timings %{deps})))))

(rule (alias end-of-stream-conflict)
  (action (diff end-of-stream-conflict.exp end-of-stream-conflict.out)))

(rule (alias end-of-stream-conflict)
  (action
    (diff end-of-stream-conflict.automaton.exp
      end-of-stream-conflict.automaton)))

(rule (alias end-of-stream-conflict)
  (action
    (diff end-of-stream-conflict.automaton.resolved.exp
      end-of-stream-conflict.automaton.resolved)))

(rule (alias end-of-stream-conflict)
  (action
    (diff end-of-stream-conflict.conflicts.exp
      end-of-stream-conflict.conflicts)))

(rule (target execparser.opp.out) (deps execparser.mly)
  (action
    (with-outputs-to execparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias execparser)
  (action (diff execparser.opp.exp execparser.opp.out)))

(rule
  (targets execparser.out execparser.automaton execparser.automaton.resolved
    execparser.conflicts execparser.timings)
  (deps execparser.mly)
  (action
    (with-outputs-to execparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to execparser.timings %{deps})))))

(rule (alias execparser) (action (diff execparser.exp execparser.out)))

(rule (alias execparser)
  (action (diff execparser.automaton.exp execparser.automaton)))

(rule (alias execparser)
  (action
    (diff execparser.automaton.resolved.exp execparser.automaton.resolved)))

(rule (alias execparser)
  (action (diff execparser.conflicts.exp execparser.conflicts)))

(rule (target expansion_ok.opp.out) (deps expansion_ok.mly)
  (action
    (with-outputs-to expansion_ok.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias expansion_ok)
  (action (diff expansion_ok.opp.exp expansion_ok.opp.out)))

(rule
  (targets expansion_ok.out expansion_ok.automaton
    expansion_ok.automaton.resolved expansion_ok.conflicts
    expansion_ok.timings)
  (deps expansion_ok.mly)
  (action
    (with-outputs-to expansion_ok.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to expansion_ok.timings %{deps})))))

(rule (alias expansion_ok) (action (diff expansion_ok.exp expansion_ok.out)))

(rule (alias expansion_ok)
  (action (diff expansion_ok.automaton.exp expansion_ok.automaton)))

(rule (alias expansion_ok)
  (action
    (diff expansion_ok.automaton.resolved.exp
      expansion_ok.automaton.resolved)))

(rule (alias expansion_ok)
  (action (diff expansion_ok.conflicts.exp expansion_ok.conflicts)))

(rule (target expansion_unused.opp.out) (deps expansion_unused.mly)
  (action
    (with-outputs-to expansion_unused.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias expansion_unused)
  (action (diff expansion_unused.opp.exp expansion_unused.opp.out)))

(rule
  (targets expansion_unused.out expansion_unused.automaton
    expansion_unused.automaton.resolved expansion_unused.conflicts
    expansion_unused.timings)
  (deps expansion_unused.mly)
  (action
    (with-outputs-to expansion_unused.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to expansion_unused.timings %{deps})))))

(rule (alias expansion_unused)
  (action (diff expansion_unused.exp expansion_unused.out)))

(rule (alias expansion_unused)
  (action (diff expansion_unused.automaton.exp expansion_unused.automaton)))

(rule (alias expansion_unused)
  (action
    (diff expansion_unused.automaton.resolved.exp
      expansion_unused.automaton.resolved)))

(rule (alias expansion_unused)
  (action (diff expansion_unused.conflicts.exp expansion_unused.conflicts)))

(rule (target featherweight.opp.out) (deps featherweight.mly)
  (action
    (with-outputs-to featherweight.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias featherweight)
  (action (diff featherweight.opp.exp featherweight.opp.out)))

(rule
  (targets featherweight.out featherweight.automaton
    featherweight.automaton.resolved featherweight.conflicts
    featherweight.timings)
  (deps featherweight.mly)
  (action
    (with-outputs-to featherweight.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to featherweight.timings %{deps})))))

(rule (alias featherweight)
  (action (diff featherweight.exp featherweight.out)))

(rule (alias featherweight)
  (action (diff featherweight.automaton.exp featherweight.automaton)))

(rule (alias featherweight)
  (action
    (diff featherweight.automaton.resolved.exp
      featherweight.automaton.resolved)))

(rule (alias featherweight)
  (action (diff featherweight.conflicts.exp featherweight.conflicts)))

(rule (target fibonacci.opp.out) (deps fibonacci.mly)
  (action
    (with-outputs-to fibonacci.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias fibonacci) (action (diff fibonacci.opp.exp fibonacci.opp.out)))

(rule
  (targets fibonacci.out fibonacci.automaton fibonacci.automaton.resolved
    fibonacci.conflicts fibonacci.timings)
  (deps fibonacci.mly)
  (action
    (with-outputs-to fibonacci.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to fibonacci.timings %{deps})))))

(rule (alias fibonacci) (action (diff fibonacci.exp fibonacci.out)))

(rule (alias fibonacci)
  (action (diff fibonacci.automaton.exp fibonacci.automaton)))

(rule (alias fibonacci)
  (action
    (diff fibonacci.automaton.resolved.exp fibonacci.automaton.resolved)))

(rule (alias fibonacci)
  (action (diff fibonacci.conflicts.exp fibonacci.conflicts)))

(rule (target filiot.opp.out) (deps filiot.mly)
  (action
    (with-outputs-to filiot.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias filiot) (action (diff filiot.opp.exp filiot.opp.out)))

(rule
  (targets filiot.out filiot.automaton filiot.automaton.resolved
    filiot.conflicts filiot.timings)
  (deps filiot.mly)
  (action
    (with-outputs-to filiot.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to filiot.timings %{deps})))))

(rule (alias filiot) (action (diff filiot.exp filiot.out)))

(rule (alias filiot) (action (diff filiot.automaton.exp filiot.automaton)))

(rule (alias filiot)
  (action (diff filiot.automaton.resolved.exp filiot.automaton.resolved)))

(rule (alias filiot) (action (diff filiot.conflicts.exp filiot.conflicts)))

(rule (target flowcaml.opp.out) (deps flowcaml.mly)
  (action
    (with-outputs-to flowcaml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias flowcaml) (action (diff flowcaml.opp.exp flowcaml.opp.out)))

(rule
  (targets flowcaml.out flowcaml.automaton flowcaml.automaton.resolved
    flowcaml.conflicts flowcaml.timings)
  (deps flowcaml.mly)
  (action
    (with-outputs-to flowcaml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to flowcaml.timings %{deps})))))

(rule (alias flowcaml) (action (diff flowcaml.exp flowcaml.out)))

(rule (alias flowcaml)
  (action (diff flowcaml.automaton.exp flowcaml.automaton)))

(rule (alias flowcaml)
  (action (diff flowcaml.automaton.resolved.exp flowcaml.automaton.resolved)))

(rule (alias flowcaml)
  (action (diff flowcaml.conflicts.exp flowcaml.conflicts)))

(rule (target flowcaml-docgen.opp.out) (deps flowcaml-docgen.mly)
  (action
    (with-outputs-to flowcaml-docgen.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias flowcaml-docgen)
  (action (diff flowcaml-docgen.opp.exp flowcaml-docgen.opp.out)))

(rule
  (targets flowcaml-docgen.out flowcaml-docgen.automaton
    flowcaml-docgen.automaton.resolved flowcaml-docgen.conflicts
    flowcaml-docgen.timings)
  (deps flowcaml-docgen.mly)
  (action
    (with-outputs-to flowcaml-docgen.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to flowcaml-docgen.timings %{deps})))))

(rule (alias flowcaml-docgen)
  (action (diff flowcaml-docgen.exp flowcaml-docgen.out)))

(rule (alias flowcaml-docgen)
  (action (diff flowcaml-docgen.automaton.exp flowcaml-docgen.automaton)))

(rule (alias flowcaml-docgen)
  (action
    (diff flowcaml-docgen.automaton.resolved.exp
      flowcaml-docgen.automaton.resolved)))

(rule (alias flowcaml-docgen)
  (action (diff flowcaml-docgen.conflicts.exp flowcaml-docgen.conflicts)))

(rule (target focc-pure-def.opp.out) (deps focc-pure-def.mly)
  (action
    (with-outputs-to focc-pure-def.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias focc-pure-def)
  (action (diff focc-pure-def.opp.exp focc-pure-def.opp.out)))

(rule
  (targets focc-pure-def.out focc-pure-def.automaton
    focc-pure-def.automaton.resolved focc-pure-def.conflicts
    focc-pure-def.timings)
  (deps focc-pure-def.mly)
  (action
    (with-outputs-to focc-pure-def.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to focc-pure-def.timings %{deps})))))

(rule (alias focc-pure-def)
  (action (diff focc-pure-def.exp focc-pure-def.out)))

(rule (alias focc-pure-def)
  (action (diff focc-pure-def.automaton.exp focc-pure-def.automaton)))

(rule (alias focc-pure-def)
  (action
    (diff focc-pure-def.automaton.resolved.exp
      focc-pure-def.automaton.resolved)))

(rule (alias focc-pure-def)
  (action (diff focc-pure-def.conflicts.exp focc-pure-def.conflicts)))

(rule (target foo.opp.out) (deps foo.mly)
  (action
    (with-outputs-to foo.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias foo) (action (diff foo.opp.exp foo.opp.out)))

(rule
  (targets foo.out foo.automaton foo.automaton.resolved foo.conflicts
    foo.timings)
  (deps foo.mly)
  (action
    (with-outputs-to foo.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to foo.timings %{deps})))))

(rule (alias foo) (action (diff foo.exp foo.out)))

(rule (alias foo) (action (diff foo.automaton.exp foo.automaton)))

(rule (alias foo)
  (action (diff foo.automaton.resolved.exp foo.automaton.resolved)))

(rule (alias foo) (action (diff foo.conflicts.exp foo.conflicts)))

(rule (target fork.opp.out) (deps fork.mly)
  (action
    (with-outputs-to fork.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias fork) (action (diff fork.opp.exp fork.opp.out)))

(rule
  (targets fork.out fork.automaton fork.automaton.resolved fork.conflicts
    fork.timings)
  (deps fork.mly)
  (action
    (with-outputs-to fork.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to fork.timings %{deps})))))

(rule (alias fork) (action (diff fork.exp fork.out)))

(rule (alias fork) (action (diff fork.automaton.exp fork.automaton)))

(rule (alias fork)
  (action (diff fork.automaton.resolved.exp fork.automaton.resolved)))

(rule (alias fork) (action (diff fork.conflicts.exp fork.conflicts)))

(rule (target fp.opp.out) (deps fp.mly)
  (action
    (with-outputs-to fp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias fp) (action (diff fp.opp.exp fp.opp.out)))

(rule
  (targets fp.out fp.automaton fp.automaton.resolved fp.conflicts fp.timings)
  (deps fp.mly)
  (action
    (with-outputs-to fp.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to fp.timings %{deps})))))

(rule (alias fp) (action (diff fp.exp fp.out)))

(rule (alias fp) (action (diff fp.automaton.exp fp.automaton)))

(rule (alias fp)
  (action (diff fp.automaton.resolved.exp fp.automaton.resolved)))

(rule (alias fp) (action (diff fp.conflicts.exp fp.conflicts)))

(rule (target frama-c-base.20170501-logic_parser.opp.out)
  (deps frama-c-base.20170501-logic_parser.mly)
  (action
    (with-outputs-to frama-c-base.20170501-logic_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias frama-c-base.20170501-logic_parser)
  (action
    (diff frama-c-base.20170501-logic_parser.opp.exp
      frama-c-base.20170501-logic_parser.opp.out)))

(rule
  (targets frama-c-base.20170501-logic_parser.out
    frama-c-base.20170501-logic_parser.automaton
    frama-c-base.20170501-logic_parser.automaton.resolved
    frama-c-base.20170501-logic_parser.conflicts
    frama-c-base.20170501-logic_parser.timings)
  (deps frama-c-base.20170501-logic_parser.mly)
  (action
    (with-outputs-to frama-c-base.20170501-logic_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to frama-c-base.20170501-logic_parser.timings %{deps})))))

(rule (alias frama-c-base.20170501-logic_parser)
  (action
    (diff frama-c-base.20170501-logic_parser.exp
      frama-c-base.20170501-logic_parser.out)))

(rule (alias frama-c-base.20170501-logic_parser)
  (action
    (diff frama-c-base.20170501-logic_parser.automaton.exp
      frama-c-base.20170501-logic_parser.automaton)))

(rule (alias frama-c-base.20170501-logic_parser)
  (action
    (diff frama-c-base.20170501-logic_parser.automaton.resolved.exp
      frama-c-base.20170501-logic_parser.automaton.resolved)))

(rule (alias frama-c-base.20170501-logic_parser)
  (action
    (diff frama-c-base.20170501-logic_parser.conflicts.exp
      frama-c-base.20170501-logic_parser.conflicts)))

(rule (target framac-cparser.opp.out) (deps framac-cparser.mly)
  (action
    (with-outputs-to framac-cparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias framac-cparser)
  (action (diff framac-cparser.opp.exp framac-cparser.opp.out)))

(rule
  (targets framac-cparser.out framac-cparser.automaton
    framac-cparser.automaton.resolved framac-cparser.conflicts
    framac-cparser.timings)
  (deps framac-cparser.mly)
  (action
    (with-outputs-to framac-cparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to framac-cparser.timings %{deps})))))

(rule (alias framac-cparser)
  (action (diff framac-cparser.exp framac-cparser.out)))

(rule (alias framac-cparser)
  (action (diff framac-cparser.automaton.exp framac-cparser.automaton)))

(rule (alias framac-cparser)
  (action
    (diff framac-cparser.automaton.resolved.exp
      framac-cparser.automaton.resolved)))

(rule (alias framac-cparser)
  (action (diff framac-cparser.conflicts.exp framac-cparser.conflicts)))

(rule (target framac-print_api-grammar.opp.out)
  (deps framac-print_api-grammar.mly)
  (action
    (with-outputs-to framac-print_api-grammar.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias framac-print_api-grammar)
  (action
    (diff framac-print_api-grammar.opp.exp framac-print_api-grammar.opp.out)))

(rule
  (targets framac-print_api-grammar.out framac-print_api-grammar.automaton
    framac-print_api-grammar.automaton.resolved
    framac-print_api-grammar.conflicts framac-print_api-grammar.timings)
  (deps framac-print_api-grammar.mly)
  (action
    (with-outputs-to framac-print_api-grammar.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to framac-print_api-grammar.timings %{deps})))))

(rule (alias framac-print_api-grammar)
  (action (diff framac-print_api-grammar.exp framac-print_api-grammar.out)))

(rule (alias framac-print_api-grammar)
  (action
    (diff framac-print_api-grammar.automaton.exp
      framac-print_api-grammar.automaton)))

(rule (alias framac-print_api-grammar)
  (action
    (diff framac-print_api-grammar.automaton.resolved.exp
      framac-print_api-grammar.automaton.resolved)))

(rule (alias framac-print_api-grammar)
  (action
    (diff framac-print_api-grammar.conflicts.exp
      framac-print_api-grammar.conflicts)))

(rule (target fsharp.opp.out) (deps fsharp.mly)
  (action
    (with-outputs-to fsharp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias fsharp) (action (diff fsharp.opp.exp fsharp.opp.out)))

(rule
  (targets fsharp.out fsharp.automaton fsharp.automaton.resolved
    fsharp.conflicts fsharp.timings)
  (deps fsharp.mly)
  (action
    (with-outputs-to fsharp.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to fsharp.timings %{deps})))))

(rule (alias fsharp) (action (diff fsharp.exp fsharp.out)))

(rule (alias fsharp) (action (diff fsharp.automaton.exp fsharp.automaton)))

(rule (alias fsharp)
  (action (diff fsharp.automaton.resolved.exp fsharp.automaton.resolved)))

(rule (alias fsharp) (action (diff fsharp.conflicts.exp fsharp.conflicts)))

(rule (target fslexpars.opp.out) (deps fslexpars.mly)
  (action
    (with-outputs-to fslexpars.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias fslexpars) (action (diff fslexpars.opp.exp fslexpars.opp.out)))

(rule
  (targets fslexpars.out fslexpars.automaton fslexpars.automaton.resolved
    fslexpars.conflicts fslexpars.timings)
  (deps fslexpars.mly)
  (action
    (with-outputs-to fslexpars.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to fslexpars.timings %{deps})))))

(rule (alias fslexpars) (action (diff fslexpars.exp fslexpars.out)))

(rule (alias fslexpars)
  (action (diff fslexpars.automaton.exp fslexpars.automaton)))

(rule (alias fslexpars)
  (action
    (diff fslexpars.automaton.resolved.exp fslexpars.automaton.resolved)))

(rule (alias fslexpars)
  (action (diff fslexpars.conflicts.exp fslexpars.conflicts)))

(rule (target fstar.opp.out) (deps fstar.mly)
  (action
    (with-outputs-to fstar.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias fstar) (action (diff fstar.opp.exp fstar.opp.out)))

(rule
  (targets fstar.out fstar.automaton fstar.automaton.resolved fstar.conflicts
    fstar.timings)
  (deps fstar.mly)
  (action
    (with-outputs-to fstar.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to fstar.timings %{deps})))))

(rule (alias fstar) (action (diff fstar.exp fstar.out)))

(rule (alias fstar) (action (diff fstar.automaton.exp fstar.automaton)))

(rule (alias fstar)
  (action (diff fstar.automaton.resolved.exp fstar.automaton.resolved)))

(rule (alias fstar) (action (diff fstar.conflicts.exp fstar.conflicts)))

(rule (target fstar.0.9.6.0~alpha1-parse.opp.out)
  (deps fstar.0.9.6.0~alpha1-parse.mly)
  (action
    (with-outputs-to fstar.0.9.6.0~alpha1-parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias fstar.0.9.6.0~alpha1-parse)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.opp.exp
      fstar.0.9.6.0~alpha1-parse.opp.out)))

(rule
  (targets fstar.0.9.6.0~alpha1-parse.out
    fstar.0.9.6.0~alpha1-parse.automaton
    fstar.0.9.6.0~alpha1-parse.automaton.resolved
    fstar.0.9.6.0~alpha1-parse.conflicts fstar.0.9.6.0~alpha1-parse.timings)
  (deps fstar.0.9.6.0~alpha1-parse.mly)
  (action
    (with-outputs-to fstar.0.9.6.0~alpha1-parse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to fstar.0.9.6.0~alpha1-parse.timings %{deps})))))

(rule (alias fstar.0.9.6.0~alpha1-parse)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.exp fstar.0.9.6.0~alpha1-parse.out)))

(rule (alias fstar.0.9.6.0~alpha1-parse)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.automaton.exp
      fstar.0.9.6.0~alpha1-parse.automaton)))

(rule (alias fstar.0.9.6.0~alpha1-parse)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.automaton.resolved.exp
      fstar.0.9.6.0~alpha1-parse.automaton.resolved)))

(rule (alias fstar.0.9.6.0~alpha1-parse)
  (action
    (diff fstar.0.9.6.0~alpha1-parse.conflicts.exp
      fstar.0.9.6.0~alpha1-parse.conflicts)))

(rule (target fsyaccpars.opp.out) (deps fsyaccpars.mly)
  (action
    (with-outputs-to fsyaccpars.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias fsyaccpars)
  (action (diff fsyaccpars.opp.exp fsyaccpars.opp.out)))

(rule
  (targets fsyaccpars.out fsyaccpars.automaton fsyaccpars.automaton.resolved
    fsyaccpars.conflicts fsyaccpars.timings)
  (deps fsyaccpars.mly)
  (action
    (with-outputs-to fsyaccpars.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to fsyaccpars.timings %{deps})))))

(rule (alias fsyaccpars) (action (diff fsyaccpars.exp fsyaccpars.out)))

(rule (alias fsyaccpars)
  (action (diff fsyaccpars.automaton.exp fsyaccpars.automaton)))

(rule (alias fsyaccpars)
  (action
    (diff fsyaccpars.automaton.resolved.exp fsyaccpars.automaton.resolved)))

(rule (alias fsyaccpars)
  (action (diff fsyaccpars.conflicts.exp fsyaccpars.conflicts)))

(rule (target gdb.0.3-gdbmi_parser.opp.out) (deps gdb.0.3-gdbmi_parser.mly)
  (action
    (with-outputs-to gdb.0.3-gdbmi_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias gdb.0.3-gdbmi_parser)
  (action (diff gdb.0.3-gdbmi_parser.opp.exp gdb.0.3-gdbmi_parser.opp.out)))

(rule
  (targets gdb.0.3-gdbmi_parser.out gdb.0.3-gdbmi_parser.automaton
    gdb.0.3-gdbmi_parser.automaton.resolved gdb.0.3-gdbmi_parser.conflicts
    gdb.0.3-gdbmi_parser.timings)
  (deps gdb.0.3-gdbmi_parser.mly)
  (action
    (with-outputs-to gdb.0.3-gdbmi_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to gdb.0.3-gdbmi_parser.timings %{deps})))))

(rule (alias gdb.0.3-gdbmi_parser)
  (action (diff gdb.0.3-gdbmi_parser.exp gdb.0.3-gdbmi_parser.out)))

(rule (alias gdb.0.3-gdbmi_parser)
  (action
    (diff gdb.0.3-gdbmi_parser.automaton.exp gdb.0.3-gdbmi_parser.automaton)))

(rule (alias gdb.0.3-gdbmi_parser)
  (action
    (diff gdb.0.3-gdbmi_parser.automaton.resolved.exp
      gdb.0.3-gdbmi_parser.automaton.resolved)))

(rule (alias gdb.0.3-gdbmi_parser)
  (action
    (diff gdb.0.3-gdbmi_parser.conflicts.exp gdb.0.3-gdbmi_parser.conflicts)))

(rule (target gettext.0.3.8-gettextPo_parser.opp.out)
  (deps gettext.0.3.8-gettextPo_parser.mly)
  (action
    (with-outputs-to gettext.0.3.8-gettextPo_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias gettext.0.3.8-gettextPo_parser)
  (action
    (diff gettext.0.3.8-gettextPo_parser.opp.exp
      gettext.0.3.8-gettextPo_parser.opp.out)))

(rule
  (targets gettext.0.3.8-gettextPo_parser.out
    gettext.0.3.8-gettextPo_parser.automaton
    gettext.0.3.8-gettextPo_parser.automaton.resolved
    gettext.0.3.8-gettextPo_parser.conflicts
    gettext.0.3.8-gettextPo_parser.timings)
  (deps gettext.0.3.8-gettextPo_parser.mly)
  (action
    (with-outputs-to gettext.0.3.8-gettextPo_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to gettext.0.3.8-gettextPo_parser.timings %{deps})))))

(rule (alias gettext.0.3.8-gettextPo_parser)
  (action
    (diff gettext.0.3.8-gettextPo_parser.exp
      gettext.0.3.8-gettextPo_parser.out)))

(rule (alias gettext.0.3.8-gettextPo_parser)
  (action
    (diff gettext.0.3.8-gettextPo_parser.automaton.exp
      gettext.0.3.8-gettextPo_parser.automaton)))

(rule (alias gettext.0.3.8-gettextPo_parser)
  (action
    (diff gettext.0.3.8-gettextPo_parser.automaton.resolved.exp
      gettext.0.3.8-gettextPo_parser.automaton.resolved)))

(rule (alias gettext.0.3.8-gettextPo_parser)
  (action
    (diff gettext.0.3.8-gettextPo_parser.conflicts.exp
      gettext.0.3.8-gettextPo_parser.conflicts)))

(rule (target godiva.opp.out) (deps godiva.mly)
  (action
    (with-outputs-to godiva.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias godiva) (action (diff godiva.opp.exp godiva.opp.out)))

(rule
  (targets godiva.out godiva.automaton godiva.automaton.resolved
    godiva.conflicts godiva.timings)
  (deps godiva.mly)
  (action
    (with-outputs-to godiva.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to godiva.timings %{deps})))))

(rule (alias godiva) (action (diff godiva.exp godiva.out)))

(rule (alias godiva) (action (diff godiva.automaton.exp godiva.automaton)))

(rule (alias godiva)
  (action (diff godiva.automaton.resolved.exp godiva.automaton.resolved)))

(rule (alias godiva) (action (diff godiva.conflicts.exp godiva.conflicts)))

(rule (target gromit.opp.out) (deps gromit.mly)
  (action
    (with-outputs-to gromit.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias gromit) (action (diff gromit.opp.exp gromit.opp.out)))

(rule
  (targets gromit.out gromit.automaton gromit.automaton.resolved
    gromit.conflicts gromit.timings)
  (deps gromit.mly)
  (action
    (with-outputs-to gromit.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to gromit.timings %{deps})))))

(rule (alias gromit) (action (diff gromit.exp gromit.out)))

(rule (alias gromit) (action (diff gromit.automaton.exp gromit.automaton)))

(rule (alias gromit)
  (action (diff gromit.automaton.resolved.exp gromit.automaton.resolved)))

(rule (alias gromit) (action (diff gromit.conflicts.exp gromit.conflicts)))

(rule (target grune924.opp.out) (deps grune924.mly)
  (action
    (with-outputs-to grune924.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias grune924) (action (diff grune924.opp.exp grune924.opp.out)))

(rule
  (targets grune924.out grune924.automaton grune924.automaton.resolved
    grune924.conflicts grune924.timings)
  (deps grune924.mly)
  (action
    (with-outputs-to grune924.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to grune924.timings %{deps})))))

(rule (alias grune924) (action (diff grune924.exp grune924.out)))

(rule (alias grune924)
  (action (diff grune924.automaton.exp grune924.automaton)))

(rule (alias grune924)
  (action (diff grune924.automaton.resolved.exp grune924.automaton.resolved)))

(rule (alias grune924)
  (action (diff grune924.conflicts.exp grune924.conflicts)))

(rule (target heptagon.1.05.00-hept_parser.opp.out)
  (deps heptagon.1.05.00-hept_parser.mly)
  (action
    (with-outputs-to heptagon.1.05.00-hept_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias heptagon.1.05.00-hept_parser)
  (action
    (diff heptagon.1.05.00-hept_parser.opp.exp
      heptagon.1.05.00-hept_parser.opp.out)))

(rule
  (targets heptagon.1.05.00-hept_parser.out
    heptagon.1.05.00-hept_parser.automaton
    heptagon.1.05.00-hept_parser.automaton.resolved
    heptagon.1.05.00-hept_parser.conflicts
    heptagon.1.05.00-hept_parser.timings)
  (deps heptagon.1.05.00-hept_parser.mly)
  (action
    (with-outputs-to heptagon.1.05.00-hept_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to heptagon.1.05.00-hept_parser.timings %{deps})))))

(rule (alias heptagon.1.05.00-hept_parser)
  (action
    (diff heptagon.1.05.00-hept_parser.exp heptagon.1.05.00-hept_parser.out)))

(rule (alias heptagon.1.05.00-hept_parser)
  (action
    (diff heptagon.1.05.00-hept_parser.automaton.exp
      heptagon.1.05.00-hept_parser.automaton)))

(rule (alias heptagon.1.05.00-hept_parser)
  (action
    (diff heptagon.1.05.00-hept_parser.automaton.resolved.exp
      heptagon.1.05.00-hept_parser.automaton.resolved)))

(rule (alias heptagon.1.05.00-hept_parser)
  (action
    (diff heptagon.1.05.00-hept_parser.conflicts.exp
      heptagon.1.05.00-hept_parser.conflicts)))

(rule (target herdtools7.7.51-AArch64Parser.opp.out)
  (deps herdtools7.7.51-AArch64Parser.mly)
  (action
    (with-outputs-to herdtools7.7.51-AArch64Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias herdtools7.7.51-AArch64Parser)
  (action
    (diff herdtools7.7.51-AArch64Parser.opp.exp
      herdtools7.7.51-AArch64Parser.opp.out)))

(rule
  (targets herdtools7.7.51-AArch64Parser.out
    herdtools7.7.51-AArch64Parser.automaton
    herdtools7.7.51-AArch64Parser.automaton.resolved
    herdtools7.7.51-AArch64Parser.conflicts
    herdtools7.7.51-AArch64Parser.timings)
  (deps herdtools7.7.51-AArch64Parser.mly)
  (action
    (with-outputs-to herdtools7.7.51-AArch64Parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to herdtools7.7.51-AArch64Parser.timings %{deps})))))

(rule (alias herdtools7.7.51-AArch64Parser)
  (action
    (diff herdtools7.7.51-AArch64Parser.exp
      herdtools7.7.51-AArch64Parser.out)))

(rule (alias herdtools7.7.51-AArch64Parser)
  (action
    (diff herdtools7.7.51-AArch64Parser.automaton.exp
      herdtools7.7.51-AArch64Parser.automaton)))

(rule (alias herdtools7.7.51-AArch64Parser)
  (action
    (diff herdtools7.7.51-AArch64Parser.automaton.resolved.exp
      herdtools7.7.51-AArch64Parser.automaton.resolved)))

(rule (alias herdtools7.7.51-AArch64Parser)
  (action
    (diff herdtools7.7.51-AArch64Parser.conflicts.exp
      herdtools7.7.51-AArch64Parser.conflicts)))

(rule (target herdtools7.7.51-ARMParser.opp.out)
  (deps herdtools7.7.51-ARMParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-ARMParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias herdtools7.7.51-ARMParser)
  (action
    (diff herdtools7.7.51-ARMParser.opp.exp
      herdtools7.7.51-ARMParser.opp.out)))

(rule
  (targets herdtools7.7.51-ARMParser.out herdtools7.7.51-ARMParser.automaton
    herdtools7.7.51-ARMParser.automaton.resolved
    herdtools7.7.51-ARMParser.conflicts herdtools7.7.51-ARMParser.timings)
  (deps herdtools7.7.51-ARMParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-ARMParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to herdtools7.7.51-ARMParser.timings %{deps})))))

(rule (alias herdtools7.7.51-ARMParser)
  (action (diff herdtools7.7.51-ARMParser.exp herdtools7.7.51-ARMParser.out)))

(rule (alias herdtools7.7.51-ARMParser)
  (action
    (diff herdtools7.7.51-ARMParser.automaton.exp
      herdtools7.7.51-ARMParser.automaton)))

(rule (alias herdtools7.7.51-ARMParser)
  (action
    (diff herdtools7.7.51-ARMParser.automaton.resolved.exp
      herdtools7.7.51-ARMParser.automaton.resolved)))

(rule (alias herdtools7.7.51-ARMParser)
  (action
    (diff herdtools7.7.51-ARMParser.conflicts.exp
      herdtools7.7.51-ARMParser.conflicts)))

(rule (target herdtools7.7.51-CParser.opp.out)
  (deps herdtools7.7.51-CParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-CParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias herdtools7.7.51-CParser)
  (action
    (diff herdtools7.7.51-CParser.opp.exp herdtools7.7.51-CParser.opp.out)))

(rule
  (targets herdtools7.7.51-CParser.out herdtools7.7.51-CParser.automaton
    herdtools7.7.51-CParser.automaton.resolved
    herdtools7.7.51-CParser.conflicts herdtools7.7.51-CParser.timings)
  (deps herdtools7.7.51-CParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-CParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to herdtools7.7.51-CParser.timings %{deps})))))

(rule (alias herdtools7.7.51-CParser)
  (action (diff herdtools7.7.51-CParser.exp herdtools7.7.51-CParser.out)))

(rule (alias herdtools7.7.51-CParser)
  (action
    (diff herdtools7.7.51-CParser.automaton.exp
      herdtools7.7.51-CParser.automaton)))

(rule (alias herdtools7.7.51-CParser)
  (action
    (diff herdtools7.7.51-CParser.automaton.resolved.exp
      herdtools7.7.51-CParser.automaton.resolved)))

(rule (alias herdtools7.7.51-CParser)
  (action
    (diff herdtools7.7.51-CParser.conflicts.exp
      herdtools7.7.51-CParser.conflicts)))

(rule (target herdtools7.7.51-LISAParser.opp.out)
  (deps herdtools7.7.51-LISAParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-LISAParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias herdtools7.7.51-LISAParser)
  (action
    (diff herdtools7.7.51-LISAParser.opp.exp
      herdtools7.7.51-LISAParser.opp.out)))

(rule
  (targets herdtools7.7.51-LISAParser.out
    herdtools7.7.51-LISAParser.automaton
    herdtools7.7.51-LISAParser.automaton.resolved
    herdtools7.7.51-LISAParser.conflicts herdtools7.7.51-LISAParser.timings)
  (deps herdtools7.7.51-LISAParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-LISAParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to herdtools7.7.51-LISAParser.timings %{deps})))))

(rule (alias herdtools7.7.51-LISAParser)
  (action
    (diff herdtools7.7.51-LISAParser.exp herdtools7.7.51-LISAParser.out)))

(rule (alias herdtools7.7.51-LISAParser)
  (action
    (diff herdtools7.7.51-LISAParser.automaton.exp
      herdtools7.7.51-LISAParser.automaton)))

(rule (alias herdtools7.7.51-LISAParser)
  (action
    (diff herdtools7.7.51-LISAParser.automaton.resolved.exp
      herdtools7.7.51-LISAParser.automaton.resolved)))

(rule (alias herdtools7.7.51-LISAParser)
  (action
    (diff herdtools7.7.51-LISAParser.conflicts.exp
      herdtools7.7.51-LISAParser.conflicts)))

(rule (target herdtools7.7.51-PPCParser.opp.out)
  (deps herdtools7.7.51-PPCParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-PPCParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias herdtools7.7.51-PPCParser)
  (action
    (diff herdtools7.7.51-PPCParser.opp.exp
      herdtools7.7.51-PPCParser.opp.out)))

(rule
  (targets herdtools7.7.51-PPCParser.out herdtools7.7.51-PPCParser.automaton
    herdtools7.7.51-PPCParser.automaton.resolved
    herdtools7.7.51-PPCParser.conflicts herdtools7.7.51-PPCParser.timings)
  (deps herdtools7.7.51-PPCParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-PPCParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to herdtools7.7.51-PPCParser.timings %{deps})))))

(rule (alias herdtools7.7.51-PPCParser)
  (action (diff herdtools7.7.51-PPCParser.exp herdtools7.7.51-PPCParser.out)))

(rule (alias herdtools7.7.51-PPCParser)
  (action
    (diff herdtools7.7.51-PPCParser.automaton.exp
      herdtools7.7.51-PPCParser.automaton)))

(rule (alias herdtools7.7.51-PPCParser)
  (action
    (diff herdtools7.7.51-PPCParser.automaton.resolved.exp
      herdtools7.7.51-PPCParser.automaton.resolved)))

(rule (alias herdtools7.7.51-PPCParser)
  (action
    (diff herdtools7.7.51-PPCParser.conflicts.exp
      herdtools7.7.51-PPCParser.conflicts)))

(rule (target herdtools7.7.51-RISCVParser.opp.out)
  (deps herdtools7.7.51-RISCVParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-RISCVParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias herdtools7.7.51-RISCVParser)
  (action
    (diff herdtools7.7.51-RISCVParser.opp.exp
      herdtools7.7.51-RISCVParser.opp.out)))

(rule
  (targets herdtools7.7.51-RISCVParser.out
    herdtools7.7.51-RISCVParser.automaton
    herdtools7.7.51-RISCVParser.automaton.resolved
    herdtools7.7.51-RISCVParser.conflicts
    herdtools7.7.51-RISCVParser.timings)
  (deps herdtools7.7.51-RISCVParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-RISCVParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to herdtools7.7.51-RISCVParser.timings %{deps})))))

(rule (alias herdtools7.7.51-RISCVParser)
  (action
    (diff herdtools7.7.51-RISCVParser.exp herdtools7.7.51-RISCVParser.out)))

(rule (alias herdtools7.7.51-RISCVParser)
  (action
    (diff herdtools7.7.51-RISCVParser.automaton.exp
      herdtools7.7.51-RISCVParser.automaton)))

(rule (alias herdtools7.7.51-RISCVParser)
  (action
    (diff herdtools7.7.51-RISCVParser.automaton.resolved.exp
      herdtools7.7.51-RISCVParser.automaton.resolved)))

(rule (alias herdtools7.7.51-RISCVParser)
  (action
    (diff herdtools7.7.51-RISCVParser.conflicts.exp
      herdtools7.7.51-RISCVParser.conflicts)))

(rule (target herdtools7.7.51-X86Parser.opp.out)
  (deps herdtools7.7.51-X86Parser.mly)
  (action
    (with-outputs-to herdtools7.7.51-X86Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias herdtools7.7.51-X86Parser)
  (action
    (diff herdtools7.7.51-X86Parser.opp.exp
      herdtools7.7.51-X86Parser.opp.out)))

(rule
  (targets herdtools7.7.51-X86Parser.out herdtools7.7.51-X86Parser.automaton
    herdtools7.7.51-X86Parser.automaton.resolved
    herdtools7.7.51-X86Parser.conflicts herdtools7.7.51-X86Parser.timings)
  (deps herdtools7.7.51-X86Parser.mly)
  (action
    (with-outputs-to herdtools7.7.51-X86Parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to herdtools7.7.51-X86Parser.timings %{deps})))))

(rule (alias herdtools7.7.51-X86Parser)
  (action (diff herdtools7.7.51-X86Parser.exp herdtools7.7.51-X86Parser.out)))

(rule (alias herdtools7.7.51-X86Parser)
  (action
    (diff herdtools7.7.51-X86Parser.automaton.exp
      herdtools7.7.51-X86Parser.automaton)))

(rule (alias herdtools7.7.51-X86Parser)
  (action
    (diff herdtools7.7.51-X86Parser.automaton.resolved.exp
      herdtools7.7.51-X86Parser.automaton.resolved)))

(rule (alias herdtools7.7.51-X86Parser)
  (action
    (diff herdtools7.7.51-X86Parser.conflicts.exp
      herdtools7.7.51-X86Parser.conflicts)))

(rule (target herdtools7.7.51-modelParser.opp.out)
  (deps herdtools7.7.51-modelParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-modelParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias herdtools7.7.51-modelParser)
  (action
    (diff herdtools7.7.51-modelParser.opp.exp
      herdtools7.7.51-modelParser.opp.out)))

(rule
  (targets herdtools7.7.51-modelParser.out
    herdtools7.7.51-modelParser.automaton
    herdtools7.7.51-modelParser.automaton.resolved
    herdtools7.7.51-modelParser.conflicts
    herdtools7.7.51-modelParser.timings)
  (deps herdtools7.7.51-modelParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-modelParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to herdtools7.7.51-modelParser.timings %{deps})))))

(rule (alias herdtools7.7.51-modelParser)
  (action
    (diff herdtools7.7.51-modelParser.exp herdtools7.7.51-modelParser.out)))

(rule (alias herdtools7.7.51-modelParser)
  (action
    (diff herdtools7.7.51-modelParser.automaton.exp
      herdtools7.7.51-modelParser.automaton)))

(rule (alias herdtools7.7.51-modelParser)
  (action
    (diff herdtools7.7.51-modelParser.automaton.resolved.exp
      herdtools7.7.51-modelParser.automaton.resolved)))

(rule (alias herdtools7.7.51-modelParser)
  (action
    (diff herdtools7.7.51-modelParser.conflicts.exp
      herdtools7.7.51-modelParser.conflicts)))

(rule (target herdtools7.7.51-stateParser.opp.out)
  (deps herdtools7.7.51-stateParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-stateParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias herdtools7.7.51-stateParser)
  (action
    (diff herdtools7.7.51-stateParser.opp.exp
      herdtools7.7.51-stateParser.opp.out)))

(rule
  (targets herdtools7.7.51-stateParser.out
    herdtools7.7.51-stateParser.automaton
    herdtools7.7.51-stateParser.automaton.resolved
    herdtools7.7.51-stateParser.conflicts
    herdtools7.7.51-stateParser.timings)
  (deps herdtools7.7.51-stateParser.mly)
  (action
    (with-outputs-to herdtools7.7.51-stateParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to herdtools7.7.51-stateParser.timings %{deps})))))

(rule (alias herdtools7.7.51-stateParser)
  (action
    (diff herdtools7.7.51-stateParser.exp herdtools7.7.51-stateParser.out)))

(rule (alias herdtools7.7.51-stateParser)
  (action
    (diff herdtools7.7.51-stateParser.automaton.exp
      herdtools7.7.51-stateParser.automaton)))

(rule (alias herdtools7.7.51-stateParser)
  (action
    (diff herdtools7.7.51-stateParser.automaton.resolved.exp
      herdtools7.7.51-stateParser.automaton.resolved)))

(rule (alias herdtools7.7.51-stateParser)
  (action
    (diff herdtools7.7.51-stateParser.conflicts.exp
      herdtools7.7.51-stateParser.conflicts)))

(rule (target hmx-multi.opp.out) (deps hmx-multi.mly)
  (action
    (with-outputs-to hmx-multi.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias hmx-multi) (action (diff hmx-multi.opp.exp hmx-multi.opp.out)))

(rule
  (targets hmx-multi.out hmx-multi.automaton hmx-multi.automaton.resolved
    hmx-multi.conflicts hmx-multi.timings)
  (deps hmx-multi.mly)
  (action
    (with-outputs-to hmx-multi.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to hmx-multi.timings %{deps})))))

(rule (alias hmx-multi) (action (diff hmx-multi.exp hmx-multi.out)))

(rule (alias hmx-multi)
  (action (diff hmx-multi.automaton.exp hmx-multi.automaton)))

(rule (alias hmx-multi)
  (action
    (diff hmx-multi.automaton.resolved.exp hmx-multi.automaton.resolved)))

(rule (alias hmx-multi)
  (action (diff hmx-multi.conflicts.exp hmx-multi.conflicts)))

(rule (target hmx-sets.opp.out) (deps hmx-sets.mly)
  (action
    (with-outputs-to hmx-sets.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias hmx-sets) (action (diff hmx-sets.opp.exp hmx-sets.opp.out)))

(rule
  (targets hmx-sets.out hmx-sets.automaton hmx-sets.automaton.resolved
    hmx-sets.conflicts hmx-sets.timings)
  (deps hmx-sets.mly)
  (action
    (with-outputs-to hmx-sets.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to hmx-sets.timings %{deps})))))

(rule (alias hmx-sets) (action (diff hmx-sets.exp hmx-sets.out)))

(rule (alias hmx-sets)
  (action (diff hmx-sets.automaton.exp hmx-sets.automaton)))

(rule (alias hmx-sets)
  (action (diff hmx-sets.automaton.resolved.exp hmx-sets.automaton.resolved)))

(rule (alias hmx-sets)
  (action (diff hmx-sets.conflicts.exp hmx-sets.conflicts)))

(rule (target ho.opp.out) (deps ho.mly)
  (action
    (with-outputs-to ho.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ho) (action (diff ho.opp.exp ho.opp.out)))

(rule
  (targets ho.out ho.automaton ho.automaton.resolved ho.conflicts ho.timings)
  (deps ho.mly)
  (action
    (with-outputs-to ho.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ho.timings %{deps})))))

(rule (alias ho) (action (diff ho.exp ho.out)))

(rule (alias ho) (action (diff ho.automaton.exp ho.automaton)))

(rule (alias ho)
  (action (diff ho.automaton.resolved.exp ho.automaton.resolved)))

(rule (alias ho) (action (diff ho.conflicts.exp ho.conflicts)))

(rule (target htparser.opp.out) (deps htparser.mly)
  (action
    (with-outputs-to htparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias htparser) (action (diff htparser.opp.exp htparser.opp.out)))

(rule
  (targets htparser.out htparser.automaton htparser.automaton.resolved
    htparser.conflicts htparser.timings)
  (deps htparser.mly)
  (action
    (with-outputs-to htparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to htparser.timings %{deps})))))

(rule (alias htparser) (action (diff htparser.exp htparser.out)))

(rule (alias htparser)
  (action (diff htparser.automaton.exp htparser.automaton)))

(rule (alias htparser)
  (action (diff htparser.automaton.resolved.exp htparser.automaton.resolved)))

(rule (alias htparser)
  (action (diff htparser.conflicts.exp htparser.conflicts)))

(rule (target hydro.0.7.1-hgen_parser.opp.out)
  (deps hydro.0.7.1-hgen_parser.mly)
  (action
    (with-outputs-to hydro.0.7.1-hgen_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias hydro.0.7.1-hgen_parser)
  (action
    (diff hydro.0.7.1-hgen_parser.opp.exp hydro.0.7.1-hgen_parser.opp.out)))

(rule
  (targets hydro.0.7.1-hgen_parser.out hydro.0.7.1-hgen_parser.automaton
    hydro.0.7.1-hgen_parser.automaton.resolved
    hydro.0.7.1-hgen_parser.conflicts hydro.0.7.1-hgen_parser.timings)
  (deps hydro.0.7.1-hgen_parser.mly)
  (action
    (with-outputs-to hydro.0.7.1-hgen_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to hydro.0.7.1-hgen_parser.timings %{deps})))))

(rule (alias hydro.0.7.1-hgen_parser)
  (action (diff hydro.0.7.1-hgen_parser.exp hydro.0.7.1-hgen_parser.out)))

(rule (alias hydro.0.7.1-hgen_parser)
  (action
    (diff hydro.0.7.1-hgen_parser.automaton.exp
      hydro.0.7.1-hgen_parser.automaton)))

(rule (alias hydro.0.7.1-hgen_parser)
  (action
    (diff hydro.0.7.1-hgen_parser.automaton.resolved.exp
      hydro.0.7.1-hgen_parser.automaton.resolved)))

(rule (alias hydro.0.7.1-hgen_parser)
  (action
    (diff hydro.0.7.1-hgen_parser.conflicts.exp
      hydro.0.7.1-hgen_parser.conflicts)))

(rule (target ibal.opp.out) (deps ibal.mly)
  (action
    (with-outputs-to ibal.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ibal) (action (diff ibal.opp.exp ibal.opp.out)))

(rule
  (targets ibal.out ibal.automaton ibal.automaton.resolved ibal.conflicts
    ibal.timings)
  (deps ibal.mly)
  (action
    (with-outputs-to ibal.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ibal.timings %{deps})))))

(rule (alias ibal) (action (diff ibal.exp ibal.out)))

(rule (alias ibal) (action (diff ibal.automaton.exp ibal.automaton)))

(rule (alias ibal)
  (action (diff ibal.automaton.resolved.exp ibal.automaton.resolved)))

(rule (alias ibal) (action (diff ibal.conflicts.exp ibal.conflicts)))

(rule (target ics.opp.out) (deps ics.mly)
  (action
    (with-outputs-to ics.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ics) (action (diff ics.opp.exp ics.opp.out)))

(rule
  (targets ics.out ics.automaton ics.automaton.resolved ics.conflicts
    ics.timings)
  (deps ics.mly)
  (action
    (with-outputs-to ics.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ics.timings %{deps})))))

(rule (alias ics) (action (diff ics.exp ics.out)))

(rule (alias ics) (action (diff ics.automaton.exp ics.automaton)))

(rule (alias ics)
  (action (diff ics.automaton.resolved.exp ics.automaton.resolved)))

(rule (alias ics) (action (diff ics.conflicts.exp ics.conflicts)))

(rule (target idl_parser.opp.out) (deps idl_parser.mly)
  (action
    (with-outputs-to idl_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias idl_parser)
  (action (diff idl_parser.opp.exp idl_parser.opp.out)))

(rule
  (targets idl_parser.out idl_parser.automaton idl_parser.automaton.resolved
    idl_parser.conflicts idl_parser.timings)
  (deps idl_parser.mly)
  (action
    (with-outputs-to idl_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to idl_parser.timings %{deps})))))

(rule (alias idl_parser) (action (diff idl_parser.exp idl_parser.out)))

(rule (alias idl_parser)
  (action (diff idl_parser.automaton.exp idl_parser.automaton)))

(rule (alias idl_parser)
  (action
    (diff idl_parser.automaton.resolved.exp idl_parser.automaton.resolved)))

(rule (alias idl_parser)
  (action (diff idl_parser.conflicts.exp idl_parser.conflicts)))

(rule (target ilpars.opp.out) (deps ilpars.mly)
  (action
    (with-outputs-to ilpars.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ilpars) (action (diff ilpars.opp.exp ilpars.opp.out)))

(rule
  (targets ilpars.out ilpars.automaton ilpars.automaton.resolved
    ilpars.conflicts ilpars.timings)
  (deps ilpars.mly)
  (action
    (with-outputs-to ilpars.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ilpars.timings %{deps})))))

(rule (alias ilpars) (action (diff ilpars.exp ilpars.out)))

(rule (alias ilpars) (action (diff ilpars.automaton.exp ilpars.automaton)))

(rule (alias ilpars)
  (action (diff ilpars.automaton.resolved.exp ilpars.automaton.resolved)))

(rule (alias ilpars) (action (diff ilpars.conflicts.exp ilpars.conflicts)))

(rule (target imaplet-lwt.0.1.9-parser.opp.out)
  (deps imaplet-lwt.0.1.9-parser.mly)
  (action
    (with-outputs-to imaplet-lwt.0.1.9-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias imaplet-lwt.0.1.9-parser)
  (action
    (diff imaplet-lwt.0.1.9-parser.opp.exp imaplet-lwt.0.1.9-parser.opp.out)))

(rule
  (targets imaplet-lwt.0.1.9-parser.out imaplet-lwt.0.1.9-parser.automaton
    imaplet-lwt.0.1.9-parser.automaton.resolved
    imaplet-lwt.0.1.9-parser.conflicts imaplet-lwt.0.1.9-parser.timings)
  (deps imaplet-lwt.0.1.9-parser.mly)
  (action
    (with-outputs-to imaplet-lwt.0.1.9-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to imaplet-lwt.0.1.9-parser.timings %{deps})))))

(rule (alias imaplet-lwt.0.1.9-parser)
  (action (diff imaplet-lwt.0.1.9-parser.exp imaplet-lwt.0.1.9-parser.out)))

(rule (alias imaplet-lwt.0.1.9-parser)
  (action
    (diff imaplet-lwt.0.1.9-parser.automaton.exp
      imaplet-lwt.0.1.9-parser.automaton)))

(rule (alias imaplet-lwt.0.1.9-parser)
  (action
    (diff imaplet-lwt.0.1.9-parser.automaton.resolved.exp
      imaplet-lwt.0.1.9-parser.automaton.resolved)))

(rule (alias imaplet-lwt.0.1.9-parser)
  (action
    (diff imaplet-lwt.0.1.9-parser.conflicts.exp
      imaplet-lwt.0.1.9-parser.conflicts)))

(rule (target infinite.opp.out) (deps infinite.mly)
  (action
    (with-outputs-to infinite.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias infinite) (action (diff infinite.opp.exp infinite.opp.out)))

(rule
  (targets infinite.out infinite.automaton infinite.automaton.resolved
    infinite.conflicts infinite.timings)
  (deps infinite.mly)
  (action
    (with-outputs-to infinite.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to infinite.timings %{deps})))))

(rule (alias infinite) (action (diff infinite.exp infinite.out)))

(rule (alias infinite)
  (action (diff infinite.automaton.exp infinite.automaton)))

(rule (alias infinite)
  (action (diff infinite.automaton.resolved.exp infinite.automaton.resolved)))

(rule (alias infinite)
  (action (diff infinite.conflicts.exp infinite.conflicts)))

(rule (target inline-multi-level.opp.out) (deps inline-multi-level.mly)
  (action
    (with-outputs-to inline-multi-level.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inline-multi-level)
  (action (diff inline-multi-level.opp.exp inline-multi-level.opp.out)))

(rule
  (targets inline-multi-level.out inline-multi-level.automaton
    inline-multi-level.automaton.resolved inline-multi-level.conflicts
    inline-multi-level.timings)
  (deps inline-multi-level.mly)
  (action
    (with-outputs-to inline-multi-level.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inline-multi-level.timings %{deps})))))

(rule (alias inline-multi-level)
  (action (diff inline-multi-level.exp inline-multi-level.out)))

(rule (alias inline-multi-level)
  (action
    (diff inline-multi-level.automaton.exp inline-multi-level.automaton)))

(rule (alias inline-multi-level)
  (action
    (diff inline-multi-level.automaton.resolved.exp
      inline-multi-level.automaton.resolved)))

(rule (alias inline-multi-level)
  (action
    (diff inline-multi-level.conflicts.exp inline-multi-level.conflicts)))

(rule (target inline-multi-sons.opp.out) (deps inline-multi-sons.mly)
  (action
    (with-outputs-to inline-multi-sons.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inline-multi-sons)
  (action (diff inline-multi-sons.opp.exp inline-multi-sons.opp.out)))

(rule
  (targets inline-multi-sons.out inline-multi-sons.automaton
    inline-multi-sons.automaton.resolved inline-multi-sons.conflicts
    inline-multi-sons.timings)
  (deps inline-multi-sons.mly)
  (action
    (with-outputs-to inline-multi-sons.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inline-multi-sons.timings %{deps})))))

(rule (alias inline-multi-sons)
  (action (diff inline-multi-sons.exp inline-multi-sons.out)))

(rule (alias inline-multi-sons)
  (action (diff inline-multi-sons.automaton.exp inline-multi-sons.automaton)))

(rule (alias inline-multi-sons)
  (action
    (diff inline-multi-sons.automaton.resolved.exp
      inline-multi-sons.automaton.resolved)))

(rule (alias inline-multi-sons)
  (action (diff inline-multi-sons.conflicts.exp inline-multi-sons.conflicts)))

(rule (target inline-position.opp.out) (deps inline-position.mly)
  (action
    (with-outputs-to inline-position.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inline-position)
  (action (diff inline-position.opp.exp inline-position.opp.out)))

(rule
  (targets inline-position.out inline-position.automaton
    inline-position.automaton.resolved inline-position.conflicts
    inline-position.timings)
  (deps inline-position.mly)
  (action
    (with-outputs-to inline-position.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inline-position.timings %{deps})))))

(rule (alias inline-position)
  (action (diff inline-position.exp inline-position.out)))

(rule (alias inline-position)
  (action (diff inline-position.automaton.exp inline-position.automaton)))

(rule (alias inline-position)
  (action
    (diff inline-position.automaton.resolved.exp
      inline-position.automaton.resolved)))

(rule (alias inline-position)
  (action (diff inline-position.conflicts.exp inline-position.conflicts)))

(rule (target inline-rename.opp.out) (deps inline-rename.mly)
  (action
    (with-outputs-to inline-rename.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inline-rename)
  (action (diff inline-rename.opp.exp inline-rename.opp.out)))

(rule
  (targets inline-rename.out inline-rename.automaton
    inline-rename.automaton.resolved inline-rename.conflicts
    inline-rename.timings)
  (deps inline-rename.mly)
  (action
    (with-outputs-to inline-rename.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inline-rename.timings %{deps})))))

(rule (alias inline-rename)
  (action (diff inline-rename.exp inline-rename.out)))

(rule (alias inline-rename)
  (action (diff inline-rename.automaton.exp inline-rename.automaton)))

(rule (alias inline-rename)
  (action
    (diff inline-rename.automaton.resolved.exp
      inline-rename.automaton.resolved)))

(rule (alias inline-rename)
  (action (diff inline-rename.conflicts.exp inline-rename.conflicts)))

(rule (target inline-shift.opp.out) (deps inline-shift.mly)
  (action
    (with-outputs-to inline-shift.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inline-shift)
  (action (diff inline-shift.opp.exp inline-shift.opp.out)))

(rule
  (targets inline-shift.out inline-shift.automaton
    inline-shift.automaton.resolved inline-shift.conflicts
    inline-shift.timings)
  (deps inline-shift.mly)
  (action
    (with-outputs-to inline-shift.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inline-shift.timings %{deps})))))

(rule (alias inline-shift) (action (diff inline-shift.exp inline-shift.out)))

(rule (alias inline-shift)
  (action (diff inline-shift.automaton.exp inline-shift.automaton)))

(rule (alias inline-shift)
  (action
    (diff inline-shift.automaton.resolved.exp
      inline-shift.automaton.resolved)))

(rule (alias inline-shift)
  (action (diff inline-shift.conflicts.exp inline-shift.conflicts)))

(rule (target inline-test.opp.out) (deps inline-test.mly)
  (action
    (with-outputs-to inline-test.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inline-test)
  (action (diff inline-test.opp.exp inline-test.opp.out)))

(rule
  (targets inline-test.out inline-test.automaton
    inline-test.automaton.resolved inline-test.conflicts inline-test.timings)
  (deps inline-test.mly)
  (action
    (with-outputs-to inline-test.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inline-test.timings %{deps})))))

(rule (alias inline-test) (action (diff inline-test.exp inline-test.out)))

(rule (alias inline-test)
  (action (diff inline-test.automaton.exp inline-test.automaton)))

(rule (alias inline-test)
  (action
    (diff inline-test.automaton.resolved.exp inline-test.automaton.resolved)))

(rule (alias inline-test)
  (action (diff inline-test.conflicts.exp inline-test.conflicts)))

(rule (target inline-with-dollar.opp.out) (deps inline-with-dollar.mly)
  (action
    (with-outputs-to inline-with-dollar.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inline-with-dollar)
  (action (diff inline-with-dollar.opp.exp inline-with-dollar.opp.out)))

(rule
  (targets inline-with-dollar.out inline-with-dollar.automaton
    inline-with-dollar.automaton.resolved inline-with-dollar.conflicts
    inline-with-dollar.timings)
  (deps inline-with-dollar.mly)
  (action
    (with-outputs-to inline-with-dollar.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inline-with-dollar.timings %{deps})))))

(rule (alias inline-with-dollar)
  (action (diff inline-with-dollar.exp inline-with-dollar.out)))

(rule (alias inline-with-dollar)
  (action
    (diff inline-with-dollar.automaton.exp inline-with-dollar.automaton)))

(rule (alias inline-with-dollar)
  (action
    (diff inline-with-dollar.automaton.resolved.exp
      inline-with-dollar.automaton.resolved)))

(rule (alias inline-with-dollar)
  (action
    (diff inline-with-dollar.conflicts.exp inline-with-dollar.conflicts)))

(rule (target inlined-dollar.opp.out) (deps inlined-dollar.mly)
  (action
    (with-outputs-to inlined-dollar.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inlined-dollar)
  (action (diff inlined-dollar.opp.exp inlined-dollar.opp.out)))

(rule
  (targets inlined-dollar.out inlined-dollar.automaton
    inlined-dollar.automaton.resolved inlined-dollar.conflicts
    inlined-dollar.timings)
  (deps inlined-dollar.mly)
  (action
    (with-outputs-to inlined-dollar.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inlined-dollar.timings %{deps})))))

(rule (alias inlined-dollar)
  (action (diff inlined-dollar.exp inlined-dollar.out)))

(rule (alias inlined-dollar)
  (action (diff inlined-dollar.automaton.exp inlined-dollar.automaton)))

(rule (alias inlined-dollar)
  (action
    (diff inlined-dollar.automaton.resolved.exp
      inlined-dollar.automaton.resolved)))

(rule (alias inlined-dollar)
  (action (diff inlined-dollar.conflicts.exp inlined-dollar.conflicts)))

(rule (target inlining-capture.opp.out) (deps inlining-capture.mly)
  (action
    (with-outputs-to inlining-capture.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inlining-capture)
  (action (diff inlining-capture.opp.exp inlining-capture.opp.out)))

(rule
  (targets inlining-capture.out inlining-capture.automaton
    inlining-capture.automaton.resolved inlining-capture.conflicts
    inlining-capture.timings)
  (deps inlining-capture.mly)
  (action
    (with-outputs-to inlining-capture.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inlining-capture.timings %{deps})))))

(rule (alias inlining-capture)
  (action (diff inlining-capture.exp inlining-capture.out)))

(rule (alias inlining-capture)
  (action (diff inlining-capture.automaton.exp inlining-capture.automaton)))

(rule (alias inlining-capture)
  (action
    (diff inlining-capture.automaton.resolved.exp
      inlining-capture.automaton.resolved)))

(rule (alias inlining-capture)
  (action (diff inlining-capture.conflicts.exp inlining-capture.conflicts)))

(rule (target inliningWithSideEffects.opp.out)
  (deps inliningWithSideEffects.mly)
  (action
    (with-outputs-to inliningWithSideEffects.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias inliningWithSideEffects)
  (action
    (diff inliningWithSideEffects.opp.exp inliningWithSideEffects.opp.out)))

(rule
  (targets inliningWithSideEffects.out inliningWithSideEffects.automaton
    inliningWithSideEffects.automaton.resolved
    inliningWithSideEffects.conflicts inliningWithSideEffects.timings)
  (deps inliningWithSideEffects.mly)
  (action
    (with-outputs-to inliningWithSideEffects.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to inliningWithSideEffects.timings %{deps})))))

(rule (alias inliningWithSideEffects)
  (action (diff inliningWithSideEffects.exp inliningWithSideEffects.out)))

(rule (alias inliningWithSideEffects)
  (action
    (diff inliningWithSideEffects.automaton.exp
      inliningWithSideEffects.automaton)))

(rule (alias inliningWithSideEffects)
  (action
    (diff inliningWithSideEffects.automaton.resolved.exp
      inliningWithSideEffects.automaton.resolved)))

(rule (alias inliningWithSideEffects)
  (action
    (diff inliningWithSideEffects.conflicts.exp
      inliningWithSideEffects.conflicts)))

(rule (target issue21_longer.opp.out) (deps issue21_longer.mly)
  (action
    (with-outputs-to issue21_longer.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias issue21_longer)
  (action (diff issue21_longer.opp.exp issue21_longer.opp.out)))

(rule
  (targets issue21_longer.out issue21_longer.automaton
    issue21_longer.automaton.resolved issue21_longer.conflicts
    issue21_longer.timings)
  (deps issue21_longer.mly)
  (action
    (with-outputs-to issue21_longer.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to issue21_longer.timings %{deps})))))

(rule (alias issue21_longer)
  (action (diff issue21_longer.exp issue21_longer.out)))

(rule (alias issue21_longer)
  (action (diff issue21_longer.automaton.exp issue21_longer.automaton)))

(rule (alias issue21_longer)
  (action
    (diff issue21_longer.automaton.resolved.exp
      issue21_longer.automaton.resolved)))

(rule (alias issue21_longer)
  (action (diff issue21_longer.conflicts.exp issue21_longer.conflicts)))

(rule (target issue21_shorter.opp.out) (deps issue21_shorter.mly)
  (action
    (with-outputs-to issue21_shorter.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias issue21_shorter)
  (action (diff issue21_shorter.opp.exp issue21_shorter.opp.out)))

(rule
  (targets issue21_shorter.out issue21_shorter.automaton
    issue21_shorter.automaton.resolved issue21_shorter.conflicts
    issue21_shorter.timings)
  (deps issue21_shorter.mly)
  (action
    (with-outputs-to issue21_shorter.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to issue21_shorter.timings %{deps})))))

(rule (alias issue21_shorter)
  (action (diff issue21_shorter.exp issue21_shorter.out)))

(rule (alias issue21_shorter)
  (action (diff issue21_shorter.automaton.exp issue21_shorter.automaton)))

(rule (alias issue21_shorter)
  (action
    (diff issue21_shorter.automaton.resolved.exp
      issue21_shorter.automaton.resolved)))

(rule (alias issue21_shorter)
  (action (diff issue21_shorter.conflicts.exp issue21_shorter.conflicts)))

(rule (target jasmc.opp.out) (deps jasmc.mly)
  (action
    (with-outputs-to jasmc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias jasmc) (action (diff jasmc.opp.exp jasmc.opp.out)))

(rule
  (targets jasmc.out jasmc.automaton jasmc.automaton.resolved jasmc.conflicts
    jasmc.timings)
  (deps jasmc.mly)
  (action
    (with-outputs-to jasmc.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to jasmc.timings %{deps})))))

(rule (alias jasmc) (action (diff jasmc.exp jasmc.out)))

(rule (alias jasmc) (action (diff jasmc.automaton.exp jasmc.automaton)))

(rule (alias jasmc)
  (action (diff jasmc.automaton.resolved.exp jasmc.automaton.resolved)))

(rule (alias jasmc) (action (diff jasmc.conflicts.exp jasmc.conflicts)))

(rule (target java.opp.out) (deps java.mly)
  (action
    (with-outputs-to java.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias java) (action (diff java.opp.exp java.opp.out)))

(rule
  (targets java.out java.automaton java.automaton.resolved java.conflicts
    java.timings)
  (deps java.mly)
  (action
    (with-outputs-to java.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to java.timings %{deps})))))

(rule (alias java) (action (diff java.exp java.out)))

(rule (alias java) (action (diff java.automaton.exp java.automaton)))

(rule (alias java)
  (action (diff java.automaton.resolved.exp java.automaton.resolved)))

(rule (alias java) (action (diff java.conflicts.exp java.conflicts)))

(rule (target jingoo.1.2.9-jg_parser.opp.out)
  (deps jingoo.1.2.9-jg_parser.mly)
  (action
    (with-outputs-to jingoo.1.2.9-jg_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias jingoo.1.2.9-jg_parser)
  (action
    (diff jingoo.1.2.9-jg_parser.opp.exp jingoo.1.2.9-jg_parser.opp.out)))

(rule
  (targets jingoo.1.2.9-jg_parser.out jingoo.1.2.9-jg_parser.automaton
    jingoo.1.2.9-jg_parser.automaton.resolved
    jingoo.1.2.9-jg_parser.conflicts jingoo.1.2.9-jg_parser.timings)
  (deps jingoo.1.2.9-jg_parser.mly)
  (action
    (with-outputs-to jingoo.1.2.9-jg_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to jingoo.1.2.9-jg_parser.timings %{deps})))))

(rule (alias jingoo.1.2.9-jg_parser)
  (action (diff jingoo.1.2.9-jg_parser.exp jingoo.1.2.9-jg_parser.out)))

(rule (alias jingoo.1.2.9-jg_parser)
  (action
    (diff jingoo.1.2.9-jg_parser.automaton.exp
      jingoo.1.2.9-jg_parser.automaton)))

(rule (alias jingoo.1.2.9-jg_parser)
  (action
    (diff jingoo.1.2.9-jg_parser.automaton.resolved.exp
      jingoo.1.2.9-jg_parser.automaton.resolved)))

(rule (alias jingoo.1.2.9-jg_parser)
  (action
    (diff jingoo.1.2.9-jg_parser.conflicts.exp
      jingoo.1.2.9-jg_parser.conflicts)))

(rule (target jml.opp.out) (deps jml.mly)
  (action
    (with-outputs-to jml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias jml) (action (diff jml.opp.exp jml.opp.out)))

(rule
  (targets jml.out jml.automaton jml.automaton.resolved jml.conflicts
    jml.timings)
  (deps jml.mly)
  (action
    (with-outputs-to jml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to jml.timings %{deps})))))

(rule (alias jml) (action (diff jml.exp jml.out)))

(rule (alias jml) (action (diff jml.automaton.exp jml.automaton)))

(rule (alias jml)
  (action (diff jml.automaton.resolved.exp jml.automaton.resolved)))

(rule (alias jml) (action (diff jml.conflicts.exp jml.conflicts)))

(rule (target jocaml.opp.out) (deps jocaml.mly)
  (action
    (with-outputs-to jocaml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias jocaml) (action (diff jocaml.opp.exp jocaml.opp.out)))

(rule
  (targets jocaml.out jocaml.automaton jocaml.automaton.resolved
    jocaml.conflicts jocaml.timings)
  (deps jocaml.mly)
  (action
    (with-outputs-to jocaml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to jocaml.timings %{deps})))))

(rule (alias jocaml) (action (diff jocaml.exp jocaml.out)))

(rule (alias jocaml) (action (diff jocaml.automaton.exp jocaml.automaton)))

(rule (alias jocaml)
  (action (diff jocaml.automaton.resolved.exp jocaml.automaton.resolved)))

(rule (alias jocaml) (action (diff jocaml.conflicts.exp jocaml.conflicts)))

(rule (target jocaml-ambients.opp.out) (deps jocaml-ambients.mly)
  (action
    (with-outputs-to jocaml-ambients.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias jocaml-ambients)
  (action (diff jocaml-ambients.opp.exp jocaml-ambients.opp.out)))

(rule
  (targets jocaml-ambients.out jocaml-ambients.automaton
    jocaml-ambients.automaton.resolved jocaml-ambients.conflicts
    jocaml-ambients.timings)
  (deps jocaml-ambients.mly)
  (action
    (with-outputs-to jocaml-ambients.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to jocaml-ambients.timings %{deps})))))

(rule (alias jocaml-ambients)
  (action (diff jocaml-ambients.exp jocaml-ambients.out)))

(rule (alias jocaml-ambients)
  (action (diff jocaml-ambients.automaton.exp jocaml-ambients.automaton)))

(rule (alias jocaml-ambients)
  (action
    (diff jocaml-ambients.automaton.resolved.exp
      jocaml-ambients.automaton.resolved)))

(rule (alias jocaml-ambients)
  (action (diff jocaml-ambients.conflicts.exp jocaml-ambients.conflicts)))

(rule (target jocaml-new-parser.opp.out) (deps jocaml-new-parser.mly)
  (action
    (with-outputs-to jocaml-new-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias jocaml-new-parser)
  (action (diff jocaml-new-parser.opp.exp jocaml-new-parser.opp.out)))

(rule
  (targets jocaml-new-parser.out jocaml-new-parser.automaton
    jocaml-new-parser.automaton.resolved jocaml-new-parser.conflicts
    jocaml-new-parser.timings)
  (deps jocaml-new-parser.mly)
  (action
    (with-outputs-to jocaml-new-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to jocaml-new-parser.timings %{deps})))))

(rule (alias jocaml-new-parser)
  (action (diff jocaml-new-parser.exp jocaml-new-parser.out)))

(rule (alias jocaml-new-parser)
  (action (diff jocaml-new-parser.automaton.exp jocaml-new-parser.automaton)))

(rule (alias jocaml-new-parser)
  (action
    (diff jocaml-new-parser.automaton.resolved.exp
      jocaml-new-parser.automaton.resolved)))

(rule (alias jocaml-new-parser)
  (action (diff jocaml-new-parser.conflicts.exp jocaml-new-parser.conflicts)))

(rule (target joe_parser2.opp.out) (deps joe_parser2.mly)
  (action
    (with-outputs-to joe_parser2.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias joe_parser2)
  (action (diff joe_parser2.opp.exp joe_parser2.opp.out)))

(rule
  (targets joe_parser2.out joe_parser2.automaton
    joe_parser2.automaton.resolved joe_parser2.conflicts joe_parser2.timings)
  (deps joe_parser2.mly)
  (action
    (with-outputs-to joe_parser2.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to joe_parser2.timings %{deps})))))

(rule (alias joe_parser2) (action (diff joe_parser2.exp joe_parser2.out)))

(rule (alias joe_parser2)
  (action (diff joe_parser2.automaton.exp joe_parser2.automaton)))

(rule (alias joe_parser2)
  (action
    (diff joe_parser2.automaton.resolved.exp joe_parser2.automaton.resolved)))

(rule (alias joe_parser2)
  (action (diff joe_parser2.conflicts.exp joe_parser2.conflicts)))

(rule (target jparser.opp.out) (deps jparser.mly)
  (action
    (with-outputs-to jparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias jparser) (action (diff jparser.opp.exp jparser.opp.out)))

(rule
  (targets jparser.out jparser.automaton jparser.automaton.resolved
    jparser.conflicts jparser.timings)
  (deps jparser.mly)
  (action
    (with-outputs-to jparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to jparser.timings %{deps})))))

(rule (alias jparser) (action (diff jparser.exp jparser.out)))

(rule (alias jparser)
  (action (diff jparser.automaton.exp jparser.automaton)))

(rule (alias jparser)
  (action (diff jparser.automaton.resolved.exp jparser.automaton.resolved)))

(rule (alias jparser)
  (action (diff jparser.conflicts.exp jparser.conflicts)))

(rule (target js_of_ocaml.3.2.0-js_parser.opp.out)
  (deps js_of_ocaml.3.2.0-js_parser.mly)
  (action
    (with-outputs-to js_of_ocaml.3.2.0-js_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias js_of_ocaml.3.2.0-js_parser)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.opp.exp
      js_of_ocaml.3.2.0-js_parser.opp.out)))

(rule
  (targets js_of_ocaml.3.2.0-js_parser.out
    js_of_ocaml.3.2.0-js_parser.automaton
    js_of_ocaml.3.2.0-js_parser.automaton.resolved
    js_of_ocaml.3.2.0-js_parser.conflicts
    js_of_ocaml.3.2.0-js_parser.timings)
  (deps js_of_ocaml.3.2.0-js_parser.mly)
  (action
    (with-outputs-to js_of_ocaml.3.2.0-js_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to js_of_ocaml.3.2.0-js_parser.timings %{deps})))))

(rule (alias js_of_ocaml.3.2.0-js_parser)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.exp js_of_ocaml.3.2.0-js_parser.out)))

(rule (alias js_of_ocaml.3.2.0-js_parser)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.automaton.exp
      js_of_ocaml.3.2.0-js_parser.automaton)))

(rule (alias js_of_ocaml.3.2.0-js_parser)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.automaton.resolved.exp
      js_of_ocaml.3.2.0-js_parser.automaton.resolved)))

(rule (alias js_of_ocaml.3.2.0-js_parser)
  (action
    (diff js_of_ocaml.3.2.0-js_parser.conflicts.exp
      js_of_ocaml.3.2.0-js_parser.conflicts)))

(rule (target judicael.opp.out) (deps judicael.mly)
  (action
    (with-outputs-to judicael.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias judicael) (action (diff judicael.opp.exp judicael.opp.out)))

(rule
  (targets judicael.out judicael.automaton judicael.automaton.resolved
    judicael.conflicts judicael.timings)
  (deps judicael.mly)
  (action
    (with-outputs-to judicael.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to judicael.timings %{deps})))))

(rule (alias judicael) (action (diff judicael.exp judicael.out)))

(rule (alias judicael)
  (action (diff judicael.automaton.exp judicael.automaton)))

(rule (alias judicael)
  (action (diff judicael.automaton.resolved.exp judicael.automaton.resolved)))

(rule (alias judicael)
  (action (diff judicael.conflicts.exp judicael.conflicts)))

(rule (target julia.opp.out) (deps julia.mly)
  (action
    (with-outputs-to julia.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias julia) (action (diff julia.opp.exp julia.opp.out)))

(rule
  (targets julia.out julia.automaton julia.automaton.resolved julia.conflicts
    julia.timings)
  (deps julia.mly)
  (action
    (with-outputs-to julia.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to julia.timings %{deps})))))

(rule (alias julia) (action (diff julia.exp julia.out)))

(rule (alias julia) (action (diff julia.automaton.exp julia.automaton)))

(rule (alias julia)
  (action (diff julia.automaton.resolved.exp julia.automaton.resolved)))

(rule (alias julia) (action (diff julia.conflicts.exp julia.conflicts)))

(rule (target ketti.opp.out) (deps ketti.mly)
  (action
    (with-outputs-to ketti.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ketti) (action (diff ketti.opp.exp ketti.opp.out)))

(rule
  (targets ketti.out ketti.automaton ketti.automaton.resolved ketti.conflicts
    ketti.timings)
  (deps ketti.mly)
  (action
    (with-outputs-to ketti.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ketti.timings %{deps})))))

(rule (alias ketti) (action (diff ketti.exp ketti.out)))

(rule (alias ketti) (action (diff ketti.automaton.exp ketti.automaton)))

(rule (alias ketti)
  (action (diff ketti.automaton.resolved.exp ketti.automaton.resolved)))

(rule (alias ketti) (action (diff ketti.conflicts.exp ketti.conflicts)))

(rule (target kimmit.opp.out) (deps kimmit.mly)
  (action
    (with-outputs-to kimmit.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias kimmit) (action (diff kimmit.opp.exp kimmit.opp.out)))

(rule
  (targets kimmit.out kimmit.automaton kimmit.automaton.resolved
    kimmit.conflicts kimmit.timings)
  (deps kimmit.mly)
  (action
    (with-outputs-to kimmit.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to kimmit.timings %{deps})))))

(rule (alias kimmit) (action (diff kimmit.exp kimmit.out)))

(rule (alias kimmit) (action (diff kimmit.automaton.exp kimmit.automaton)))

(rule (alias kimmit)
  (action (diff kimmit.automaton.resolved.exp kimmit.automaton.resolved)))

(rule (alias kimmit) (action (diff kimmit.conflicts.exp kimmit.conflicts)))

(rule (target kremlin.0.9.6.0-parser.opp.out)
  (deps kremlin.0.9.6.0-parser.mly)
  (action
    (with-outputs-to kremlin.0.9.6.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias kremlin.0.9.6.0-parser)
  (action
    (diff kremlin.0.9.6.0-parser.opp.exp kremlin.0.9.6.0-parser.opp.out)))

(rule
  (targets kremlin.0.9.6.0-parser.out kremlin.0.9.6.0-parser.automaton
    kremlin.0.9.6.0-parser.automaton.resolved
    kremlin.0.9.6.0-parser.conflicts kremlin.0.9.6.0-parser.timings)
  (deps kremlin.0.9.6.0-parser.mly)
  (action
    (with-outputs-to kremlin.0.9.6.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to kremlin.0.9.6.0-parser.timings %{deps})))))

(rule (alias kremlin.0.9.6.0-parser)
  (action (diff kremlin.0.9.6.0-parser.exp kremlin.0.9.6.0-parser.out)))

(rule (alias kremlin.0.9.6.0-parser)
  (action
    (diff kremlin.0.9.6.0-parser.automaton.exp
      kremlin.0.9.6.0-parser.automaton)))

(rule (alias kremlin.0.9.6.0-parser)
  (action
    (diff kremlin.0.9.6.0-parser.automaton.resolved.exp
      kremlin.0.9.6.0-parser.automaton.resolved)))

(rule (alias kremlin.0.9.6.0-parser)
  (action
    (diff kremlin.0.9.6.0-parser.conflicts.exp
      kremlin.0.9.6.0-parser.conflicts)))

(rule (target labltk-compiler.opp.out) (deps labltk-compiler.mly)
  (action
    (with-outputs-to labltk-compiler.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias labltk-compiler)
  (action (diff labltk-compiler.opp.exp labltk-compiler.opp.out)))

(rule
  (targets labltk-compiler.out labltk-compiler.automaton
    labltk-compiler.automaton.resolved labltk-compiler.conflicts
    labltk-compiler.timings)
  (deps labltk-compiler.mly)
  (action
    (with-outputs-to labltk-compiler.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to labltk-compiler.timings %{deps})))))

(rule (alias labltk-compiler)
  (action (diff labltk-compiler.exp labltk-compiler.out)))

(rule (alias labltk-compiler)
  (action (diff labltk-compiler.automaton.exp labltk-compiler.automaton)))

(rule (alias labltk-compiler)
  (action
    (diff labltk-compiler.automaton.resolved.exp
      labltk-compiler.automaton.resolved)))

(rule (alias labltk-compiler)
  (action (diff labltk-compiler.conflicts.exp labltk-compiler.conflicts)))

(rule (target labltk-ppyac.opp.out) (deps labltk-ppyac.mly)
  (action
    (with-outputs-to labltk-ppyac.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias labltk-ppyac)
  (action (diff labltk-ppyac.opp.exp labltk-ppyac.opp.out)))

(rule
  (targets labltk-ppyac.out labltk-ppyac.automaton
    labltk-ppyac.automaton.resolved labltk-ppyac.conflicts
    labltk-ppyac.timings)
  (deps labltk-ppyac.mly)
  (action
    (with-outputs-to labltk-ppyac.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to labltk-ppyac.timings %{deps})))))

(rule (alias labltk-ppyac) (action (diff labltk-ppyac.exp labltk-ppyac.out)))

(rule (alias labltk-ppyac)
  (action (diff labltk-ppyac.automaton.exp labltk-ppyac.automaton)))

(rule (alias labltk-ppyac)
  (action
    (diff labltk-ppyac.automaton.resolved.exp
      labltk-ppyac.automaton.resolved)))

(rule (alias labltk-ppyac)
  (action (diff labltk-ppyac.conflicts.exp labltk-ppyac.conflicts)))

(rule (target labrys.0.1-parser.opp.out) (deps labrys.0.1-parser.mly)
  (action
    (with-outputs-to labrys.0.1-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias labrys.0.1-parser)
  (action (diff labrys.0.1-parser.opp.exp labrys.0.1-parser.opp.out)))

(rule
  (targets labrys.0.1-parser.out labrys.0.1-parser.automaton
    labrys.0.1-parser.automaton.resolved labrys.0.1-parser.conflicts
    labrys.0.1-parser.timings)
  (deps labrys.0.1-parser.mly)
  (action
    (with-outputs-to labrys.0.1-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to labrys.0.1-parser.timings %{deps})))))

(rule (alias labrys.0.1-parser)
  (action (diff labrys.0.1-parser.exp labrys.0.1-parser.out)))

(rule (alias labrys.0.1-parser)
  (action (diff labrys.0.1-parser.automaton.exp labrys.0.1-parser.automaton)))

(rule (alias labrys.0.1-parser)
  (action
    (diff labrys.0.1-parser.automaton.resolved.exp
      labrys.0.1-parser.automaton.resolved)))

(rule (alias labrys.0.1-parser)
  (action (diff labrys.0.1-parser.conflicts.exp labrys.0.1-parser.conflicts)))

(rule (target lambdapi.1.0-menhir_parser.opp.out)
  (deps lambdapi.1.0-menhir_parser.mly)
  (action
    (with-outputs-to lambdapi.1.0-menhir_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias lambdapi.1.0-menhir_parser)
  (action
    (diff lambdapi.1.0-menhir_parser.opp.exp
      lambdapi.1.0-menhir_parser.opp.out)))

(rule
  (targets lambdapi.1.0-menhir_parser.out
    lambdapi.1.0-menhir_parser.automaton
    lambdapi.1.0-menhir_parser.automaton.resolved
    lambdapi.1.0-menhir_parser.conflicts lambdapi.1.0-menhir_parser.timings)
  (deps lambdapi.1.0-menhir_parser.mly)
  (action
    (with-outputs-to lambdapi.1.0-menhir_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to lambdapi.1.0-menhir_parser.timings %{deps})))))

(rule (alias lambdapi.1.0-menhir_parser)
  (action
    (diff lambdapi.1.0-menhir_parser.exp lambdapi.1.0-menhir_parser.out)))

(rule (alias lambdapi.1.0-menhir_parser)
  (action
    (diff lambdapi.1.0-menhir_parser.automaton.exp
      lambdapi.1.0-menhir_parser.automaton)))

(rule (alias lambdapi.1.0-menhir_parser)
  (action
    (diff lambdapi.1.0-menhir_parser.automaton.resolved.exp
      lambdapi.1.0-menhir_parser.automaton.resolved)))

(rule (alias lambdapi.1.0-menhir_parser)
  (action
    (diff lambdapi.1.0-menhir_parser.conflicts.exp
      lambdapi.1.0-menhir_parser.conflicts)))

(rule (target lambdoc_rlambtex_parser.opp.out)
  (deps lambdoc_rlambtex_parser.mly)
  (action
    (with-outputs-to lambdoc_rlambtex_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias lambdoc_rlambtex_parser)
  (action
    (diff lambdoc_rlambtex_parser.opp.exp lambdoc_rlambtex_parser.opp.out)))

(rule
  (targets lambdoc_rlambtex_parser.out lambdoc_rlambtex_parser.automaton
    lambdoc_rlambtex_parser.automaton.resolved
    lambdoc_rlambtex_parser.conflicts lambdoc_rlambtex_parser.timings)
  (deps lambdoc_rlambtex_parser.mly)
  (action
    (with-outputs-to lambdoc_rlambtex_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to lambdoc_rlambtex_parser.timings %{deps})))))

(rule (alias lambdoc_rlambtex_parser)
  (action (diff lambdoc_rlambtex_parser.exp lambdoc_rlambtex_parser.out)))

(rule (alias lambdoc_rlambtex_parser)
  (action
    (diff lambdoc_rlambtex_parser.automaton.exp
      lambdoc_rlambtex_parser.automaton)))

(rule (alias lambdoc_rlambtex_parser)
  (action
    (diff lambdoc_rlambtex_parser.automaton.resolved.exp
      lambdoc_rlambtex_parser.automaton.resolved)))

(rule (alias lambdoc_rlambtex_parser)
  (action
    (diff lambdoc_rlambtex_parser.conflicts.exp
      lambdoc_rlambtex_parser.conflicts)))

(rule (target ldap.2.4.0-ldap_filterparser.opp.out)
  (deps ldap.2.4.0-ldap_filterparser.mly)
  (action
    (with-outputs-to ldap.2.4.0-ldap_filterparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ldap.2.4.0-ldap_filterparser)
  (action
    (diff ldap.2.4.0-ldap_filterparser.opp.exp
      ldap.2.4.0-ldap_filterparser.opp.out)))

(rule
  (targets ldap.2.4.0-ldap_filterparser.out
    ldap.2.4.0-ldap_filterparser.automaton
    ldap.2.4.0-ldap_filterparser.automaton.resolved
    ldap.2.4.0-ldap_filterparser.conflicts
    ldap.2.4.0-ldap_filterparser.timings)
  (deps ldap.2.4.0-ldap_filterparser.mly)
  (action
    (with-outputs-to ldap.2.4.0-ldap_filterparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ldap.2.4.0-ldap_filterparser.timings %{deps})))))

(rule (alias ldap.2.4.0-ldap_filterparser)
  (action
    (diff ldap.2.4.0-ldap_filterparser.exp ldap.2.4.0-ldap_filterparser.out)))

(rule (alias ldap.2.4.0-ldap_filterparser)
  (action
    (diff ldap.2.4.0-ldap_filterparser.automaton.exp
      ldap.2.4.0-ldap_filterparser.automaton)))

(rule (alias ldap.2.4.0-ldap_filterparser)
  (action
    (diff ldap.2.4.0-ldap_filterparser.automaton.resolved.exp
      ldap.2.4.0-ldap_filterparser.automaton.resolved)))

(rule (alias ldap.2.4.0-ldap_filterparser)
  (action
    (diff ldap.2.4.0-ldap_filterparser.conflicts.exp
      ldap.2.4.0-ldap_filterparser.conflicts)))

(rule (target lem.opp.out) (deps lem.mly)
  (action
    (with-outputs-to lem.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias lem) (action (diff lem.opp.exp lem.opp.out)))

(rule
  (targets lem.out lem.automaton lem.automaton.resolved lem.conflicts
    lem.timings)
  (deps lem.mly)
  (action
    (with-outputs-to lem.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to lem.timings %{deps})))))

(rule (alias lem) (action (diff lem.exp lem.out)))

(rule (alias lem) (action (diff lem.automaton.exp lem.automaton)))

(rule (alias lem)
  (action (diff lem.automaton.resolved.exp lem.automaton.resolved)))

(rule (alias lem) (action (diff lem.conflicts.exp lem.conflicts)))

(rule (target liberty_parser.opp.out) (deps liberty_parser.mly)
  (action
    (with-outputs-to liberty_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias liberty_parser)
  (action (diff liberty_parser.opp.exp liberty_parser.opp.out)))

(rule
  (targets liberty_parser.out liberty_parser.automaton
    liberty_parser.automaton.resolved liberty_parser.conflicts
    liberty_parser.timings)
  (deps liberty_parser.mly)
  (action
    (with-outputs-to liberty_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to liberty_parser.timings %{deps})))))

(rule (alias liberty_parser)
  (action (diff liberty_parser.exp liberty_parser.out)))

(rule (alias liberty_parser)
  (action (diff liberty_parser.automaton.exp liberty_parser.automaton)))

(rule (alias liberty_parser)
  (action
    (diff liberty_parser.automaton.resolved.exp
      liberty_parser.automaton.resolved)))

(rule (alias liberty_parser)
  (action (diff liberty_parser.conflicts.exp liberty_parser.conflicts)))

(rule (target link.opp.out) (deps link.mly)
  (action
    (with-outputs-to link.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias link) (action (diff link.opp.exp link.opp.out)))

(rule
  (targets link.out link.automaton link.automaton.resolved link.conflicts
    link.timings)
  (deps link.mly)
  (action
    (with-outputs-to link.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to link.timings %{deps})))))

(rule (alias link) (action (diff link.exp link.out)))

(rule (alias link) (action (diff link.automaton.exp link.automaton)))

(rule (alias link)
  (action (diff link.automaton.resolved.exp link.automaton.resolved)))

(rule (alias link) (action (diff link.conflicts.exp link.conflicts)))

(rule (target links.opp.out) (deps links.mly)
  (action
    (with-outputs-to links.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias links) (action (diff links.opp.exp links.opp.out)))

(rule
  (targets links.out links.automaton links.automaton.resolved links.conflicts
    links.timings)
  (deps links.mly)
  (action
    (with-outputs-to links.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to links.timings %{deps})))))

(rule (alias links) (action (diff links.exp links.out)))

(rule (alias links) (action (diff links.automaton.exp links.automaton)))

(rule (alias links)
  (action (diff links.automaton.resolved.exp links.automaton.resolved)))

(rule (alias links) (action (diff links.conflicts.exp links.conflicts)))

(rule (target links.0.8-jsonparse.opp.out) (deps links.0.8-jsonparse.mly)
  (action
    (with-outputs-to links.0.8-jsonparse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias links.0.8-jsonparse)
  (action (diff links.0.8-jsonparse.opp.exp links.0.8-jsonparse.opp.out)))

(rule
  (targets links.0.8-jsonparse.out links.0.8-jsonparse.automaton
    links.0.8-jsonparse.automaton.resolved links.0.8-jsonparse.conflicts
    links.0.8-jsonparse.timings)
  (deps links.0.8-jsonparse.mly)
  (action
    (with-outputs-to links.0.8-jsonparse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to links.0.8-jsonparse.timings %{deps})))))

(rule (alias links.0.8-jsonparse)
  (action (diff links.0.8-jsonparse.exp links.0.8-jsonparse.out)))

(rule (alias links.0.8-jsonparse)
  (action
    (diff links.0.8-jsonparse.automaton.exp links.0.8-jsonparse.automaton)))

(rule (alias links.0.8-jsonparse)
  (action
    (diff links.0.8-jsonparse.automaton.resolved.exp
      links.0.8-jsonparse.automaton.resolved)))

(rule (alias links.0.8-jsonparse)
  (action
    (diff links.0.8-jsonparse.conflicts.exp links.0.8-jsonparse.conflicts)))

(rule (target links.0.8-parser.opp.out) (deps links.0.8-parser.mly)
  (action
    (with-outputs-to links.0.8-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias links.0.8-parser)
  (action (diff links.0.8-parser.opp.exp links.0.8-parser.opp.out)))

(rule
  (targets links.0.8-parser.out links.0.8-parser.automaton
    links.0.8-parser.automaton.resolved links.0.8-parser.conflicts
    links.0.8-parser.timings)
  (deps links.0.8-parser.mly)
  (action
    (with-outputs-to links.0.8-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to links.0.8-parser.timings %{deps})))))

(rule (alias links.0.8-parser)
  (action (diff links.0.8-parser.exp links.0.8-parser.out)))

(rule (alias links.0.8-parser)
  (action (diff links.0.8-parser.automaton.exp links.0.8-parser.automaton)))

(rule (alias links.0.8-parser)
  (action
    (diff links.0.8-parser.automaton.resolved.exp
      links.0.8-parser.automaton.resolved)))

(rule (alias links.0.8-parser)
  (action (diff links.0.8-parser.conflicts.exp links.0.8-parser.conflicts)))

(rule (target links.0.8-xmlParser.opp.out) (deps links.0.8-xmlParser.mly)
  (action
    (with-outputs-to links.0.8-xmlParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias links.0.8-xmlParser)
  (action (diff links.0.8-xmlParser.opp.exp links.0.8-xmlParser.opp.out)))

(rule
  (targets links.0.8-xmlParser.out links.0.8-xmlParser.automaton
    links.0.8-xmlParser.automaton.resolved links.0.8-xmlParser.conflicts
    links.0.8-xmlParser.timings)
  (deps links.0.8-xmlParser.mly)
  (action
    (with-outputs-to links.0.8-xmlParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to links.0.8-xmlParser.timings %{deps})))))

(rule (alias links.0.8-xmlParser)
  (action (diff links.0.8-xmlParser.exp links.0.8-xmlParser.out)))

(rule (alias links.0.8-xmlParser)
  (action
    (diff links.0.8-xmlParser.automaton.exp links.0.8-xmlParser.automaton)))

(rule (alias links.0.8-xmlParser)
  (action
    (diff links.0.8-xmlParser.automaton.resolved.exp
      links.0.8-xmlParser.automaton.resolved)))

(rule (alias links.0.8-xmlParser)
  (action
    (diff links.0.8-xmlParser.conflicts.exp links.0.8-xmlParser.conflicts)))

(rule (target liquidsoap.1.3.4-lang_parser.opp.out)
  (deps liquidsoap.1.3.4-lang_parser.mly)
  (action
    (with-outputs-to liquidsoap.1.3.4-lang_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias liquidsoap.1.3.4-lang_parser)
  (action
    (diff liquidsoap.1.3.4-lang_parser.opp.exp
      liquidsoap.1.3.4-lang_parser.opp.out)))

(rule
  (targets liquidsoap.1.3.4-lang_parser.out
    liquidsoap.1.3.4-lang_parser.automaton
    liquidsoap.1.3.4-lang_parser.automaton.resolved
    liquidsoap.1.3.4-lang_parser.conflicts
    liquidsoap.1.3.4-lang_parser.timings)
  (deps liquidsoap.1.3.4-lang_parser.mly)
  (action
    (with-outputs-to liquidsoap.1.3.4-lang_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to liquidsoap.1.3.4-lang_parser.timings %{deps})))))

(rule (alias liquidsoap.1.3.4-lang_parser)
  (action
    (diff liquidsoap.1.3.4-lang_parser.exp liquidsoap.1.3.4-lang_parser.out)))

(rule (alias liquidsoap.1.3.4-lang_parser)
  (action
    (diff liquidsoap.1.3.4-lang_parser.automaton.exp
      liquidsoap.1.3.4-lang_parser.automaton)))

(rule (alias liquidsoap.1.3.4-lang_parser)
  (action
    (diff liquidsoap.1.3.4-lang_parser.automaton.resolved.exp
      liquidsoap.1.3.4-lang_parser.automaton.resolved)))

(rule (alias liquidsoap.1.3.4-lang_parser)
  (action
    (diff liquidsoap.1.3.4-lang_parser.conflicts.exp
      liquidsoap.1.3.4-lang_parser.conflicts)))

(rule (target llparse.opp.out) (deps llparse.mly)
  (action
    (with-outputs-to llparse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias llparse) (action (diff llparse.opp.exp llparse.opp.out)))

(rule
  (targets llparse.out llparse.automaton llparse.automaton.resolved
    llparse.conflicts llparse.timings)
  (deps llparse.mly)
  (action
    (with-outputs-to llparse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to llparse.timings %{deps})))))

(rule (alias llparse) (action (diff llparse.exp llparse.out)))

(rule (alias llparse)
  (action (diff llparse.automaton.exp llparse.automaton)))

(rule (alias llparse)
  (action (diff llparse.automaton.resolved.exp llparse.automaton.resolved)))

(rule (alias llparse)
  (action (diff llparse.conflicts.exp llparse.conflicts)))

(rule (target logic_parser.opp.out) (deps logic_parser.mly)
  (action
    (with-outputs-to logic_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias logic_parser)
  (action (diff logic_parser.opp.exp logic_parser.opp.out)))

(rule
  (targets logic_parser.out logic_parser.automaton
    logic_parser.automaton.resolved logic_parser.conflicts
    logic_parser.timings)
  (deps logic_parser.mly)
  (action
    (with-outputs-to logic_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to logic_parser.timings %{deps})))))

(rule (alias logic_parser) (action (diff logic_parser.exp logic_parser.out)))

(rule (alias logic_parser)
  (action (diff logic_parser.automaton.exp logic_parser.automaton)))

(rule (alias logic_parser)
  (action
    (diff logic_parser.automaton.resolved.exp
      logic_parser.automaton.resolved)))

(rule (alias logic_parser)
  (action (diff logic_parser.conflicts.exp logic_parser.conflicts)))

(rule (target logtk.0.8.1-parse_theory.opp.out)
  (deps logtk.0.8.1-parse_theory.mly)
  (action
    (with-outputs-to logtk.0.8.1-parse_theory.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias logtk.0.8.1-parse_theory)
  (action
    (diff logtk.0.8.1-parse_theory.opp.exp logtk.0.8.1-parse_theory.opp.out)))

(rule
  (targets logtk.0.8.1-parse_theory.out logtk.0.8.1-parse_theory.automaton
    logtk.0.8.1-parse_theory.automaton.resolved
    logtk.0.8.1-parse_theory.conflicts logtk.0.8.1-parse_theory.timings)
  (deps logtk.0.8.1-parse_theory.mly)
  (action
    (with-outputs-to logtk.0.8.1-parse_theory.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to logtk.0.8.1-parse_theory.timings %{deps})))))

(rule (alias logtk.0.8.1-parse_theory)
  (action (diff logtk.0.8.1-parse_theory.exp logtk.0.8.1-parse_theory.out)))

(rule (alias logtk.0.8.1-parse_theory)
  (action
    (diff logtk.0.8.1-parse_theory.automaton.exp
      logtk.0.8.1-parse_theory.automaton)))

(rule (alias logtk.0.8.1-parse_theory)
  (action
    (diff logtk.0.8.1-parse_theory.automaton.resolved.exp
      logtk.0.8.1-parse_theory.automaton.resolved)))

(rule (alias logtk.0.8.1-parse_theory)
  (action
    (diff logtk.0.8.1-parse_theory.conflicts.exp
      logtk.0.8.1-parse_theory.conflicts)))

(rule (target loop.opp.out) (deps loop.mly)
  (action
    (with-outputs-to loop.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias loop) (action (diff loop.opp.exp loop.opp.out)))

(rule
  (targets loop.out loop.automaton loop.automaton.resolved loop.conflicts
    loop.timings)
  (deps loop.mly)
  (action
    (with-outputs-to loop.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to loop.timings %{deps})))))

(rule (alias loop) (action (diff loop.exp loop.out)))

(rule (alias loop) (action (diff loop.automaton.exp loop.automaton)))

(rule (alias loop)
  (action (diff loop.automaton.resolved.exp loop.automaton.resolved)))

(rule (alias loop) (action (diff loop.conflicts.exp loop.conflicts)))

(rule (target lr-but-not-lalr.opp.out) (deps lr-but-not-lalr.mly)
  (action
    (with-outputs-to lr-but-not-lalr.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias lr-but-not-lalr)
  (action (diff lr-but-not-lalr.opp.exp lr-but-not-lalr.opp.out)))

(rule
  (targets lr-but-not-lalr.out lr-but-not-lalr.automaton
    lr-but-not-lalr.automaton.resolved lr-but-not-lalr.conflicts
    lr-but-not-lalr.timings)
  (deps lr-but-not-lalr.mly)
  (action
    (with-outputs-to lr-but-not-lalr.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to lr-but-not-lalr.timings %{deps})))))

(rule (alias lr-but-not-lalr)
  (action (diff lr-but-not-lalr.exp lr-but-not-lalr.out)))

(rule (alias lr-but-not-lalr)
  (action (diff lr-but-not-lalr.automaton.exp lr-but-not-lalr.automaton)))

(rule (alias lr-but-not-lalr)
  (action
    (diff lr-but-not-lalr.automaton.resolved.exp
      lr-but-not-lalr.automaton.resolved)))

(rule (alias lr-but-not-lalr)
  (action (diff lr-but-not-lalr.conflicts.exp lr-but-not-lalr.conflicts)))

(rule (target ltlparser.opp.out) (deps ltlparser.mly)
  (action
    (with-outputs-to ltlparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ltlparser) (action (diff ltlparser.opp.exp ltlparser.opp.out)))

(rule
  (targets ltlparser.out ltlparser.automaton ltlparser.automaton.resolved
    ltlparser.conflicts ltlparser.timings)
  (deps ltlparser.mly)
  (action
    (with-outputs-to ltlparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ltlparser.timings %{deps})))))

(rule (alias ltlparser) (action (diff ltlparser.exp ltlparser.out)))

(rule (alias ltlparser)
  (action (diff ltlparser.automaton.exp ltlparser.automaton)))

(rule (alias ltlparser)
  (action
    (diff ltlparser.automaton.resolved.exp ltlparser.automaton.resolved)))

(rule (alias ltlparser)
  (action (diff ltlparser.conflicts.exp ltlparser.conflicts)))

(rule (target lustre-v6.1.737-lv6parser.opp.out)
  (deps lustre-v6.1.737-lv6parser.mly)
  (action
    (with-outputs-to lustre-v6.1.737-lv6parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias lustre-v6.1.737-lv6parser)
  (action
    (diff lustre-v6.1.737-lv6parser.opp.exp
      lustre-v6.1.737-lv6parser.opp.out)))

(rule
  (targets lustre-v6.1.737-lv6parser.out lustre-v6.1.737-lv6parser.automaton
    lustre-v6.1.737-lv6parser.automaton.resolved
    lustre-v6.1.737-lv6parser.conflicts lustre-v6.1.737-lv6parser.timings)
  (deps lustre-v6.1.737-lv6parser.mly)
  (action
    (with-outputs-to lustre-v6.1.737-lv6parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to lustre-v6.1.737-lv6parser.timings %{deps})))))

(rule (alias lustre-v6.1.737-lv6parser)
  (action (diff lustre-v6.1.737-lv6parser.exp lustre-v6.1.737-lv6parser.out)))

(rule (alias lustre-v6.1.737-lv6parser)
  (action
    (diff lustre-v6.1.737-lv6parser.automaton.exp
      lustre-v6.1.737-lv6parser.automaton)))

(rule (alias lustre-v6.1.737-lv6parser)
  (action
    (diff lustre-v6.1.737-lv6parser.automaton.resolved.exp
      lustre-v6.1.737-lv6parser.automaton.resolved)))

(rule (alias lustre-v6.1.737-lv6parser)
  (action
    (diff lustre-v6.1.737-lv6parser.conflicts.exp
      lustre-v6.1.737-lv6parser.conflicts)))

(rule (target lustreParser.opp.out) (deps lustreParser.mly)
  (action
    (with-outputs-to lustreParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias lustreParser)
  (action (diff lustreParser.opp.exp lustreParser.opp.out)))

(rule
  (targets lustreParser.out lustreParser.automaton
    lustreParser.automaton.resolved lustreParser.conflicts
    lustreParser.timings)
  (deps lustreParser.mly)
  (action
    (with-outputs-to lustreParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to lustreParser.timings %{deps})))))

(rule (alias lustreParser) (action (diff lustreParser.exp lustreParser.out)))

(rule (alias lustreParser)
  (action (diff lustreParser.automaton.exp lustreParser.automaton)))

(rule (alias lustreParser)
  (action
    (diff lustreParser.automaton.resolved.exp
      lustreParser.automaton.resolved)))

(rule (alias lustreParser)
  (action (diff lustreParser.conflicts.exp lustreParser.conflicts)))

(rule (target lutin.2.56-lutParser.opp.out) (deps lutin.2.56-lutParser.mly)
  (action
    (with-outputs-to lutin.2.56-lutParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias lutin.2.56-lutParser)
  (action (diff lutin.2.56-lutParser.opp.exp lutin.2.56-lutParser.opp.out)))

(rule
  (targets lutin.2.56-lutParser.out lutin.2.56-lutParser.automaton
    lutin.2.56-lutParser.automaton.resolved lutin.2.56-lutParser.conflicts
    lutin.2.56-lutParser.timings)
  (deps lutin.2.56-lutParser.mly)
  (action
    (with-outputs-to lutin.2.56-lutParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to lutin.2.56-lutParser.timings %{deps})))))

(rule (alias lutin.2.56-lutParser)
  (action (diff lutin.2.56-lutParser.exp lutin.2.56-lutParser.out)))

(rule (alias lutin.2.56-lutParser)
  (action
    (diff lutin.2.56-lutParser.automaton.exp lutin.2.56-lutParser.automaton)))

(rule (alias lutin.2.56-lutParser)
  (action
    (diff lutin.2.56-lutParser.automaton.resolved.exp
      lutin.2.56-lutParser.automaton.resolved)))

(rule (alias lutin.2.56-lutParser)
  (action
    (diff lutin.2.56-lutParser.conflicts.exp lutin.2.56-lutParser.conflicts)))

(rule (target macrodown.opp.out) (deps macrodown.mly)
  (action
    (with-outputs-to macrodown.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias macrodown) (action (diff macrodown.opp.exp macrodown.opp.out)))

(rule
  (targets macrodown.out macrodown.automaton macrodown.automaton.resolved
    macrodown.conflicts macrodown.timings)
  (deps macrodown.mly)
  (action
    (with-outputs-to macrodown.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to macrodown.timings %{deps})))))

(rule (alias macrodown) (action (diff macrodown.exp macrodown.out)))

(rule (alias macrodown)
  (action (diff macrodown.automaton.exp macrodown.automaton)))

(rule (alias macrodown)
  (action
    (diff macrodown.automaton.resolved.exp macrodown.automaton.resolved)))

(rule (alias macrodown)
  (action (diff macrodown.conflicts.exp macrodown.conflicts)))

(rule (target maple.opp.out) (deps maple.mly)
  (action
    (with-outputs-to maple.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias maple) (action (diff maple.opp.exp maple.opp.out)))

(rule
  (targets maple.out maple.automaton maple.automaton.resolved maple.conflicts
    maple.timings)
  (deps maple.mly)
  (action
    (with-outputs-to maple.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to maple.timings %{deps})))))

(rule (alias maple) (action (diff maple.exp maple.out)))

(rule (alias maple) (action (diff maple.automaton.exp maple.automaton)))

(rule (alias maple)
  (action (diff maple.automaton.resolved.exp maple.automaton.resolved)))

(rule (alias maple) (action (diff maple.conflicts.exp maple.conflicts)))

(rule (target mcc-fc.opp.out) (deps mcc-fc.mly)
  (action
    (with-outputs-to mcc-fc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-fc) (action (diff mcc-fc.opp.exp mcc-fc.opp.out)))

(rule
  (targets mcc-fc.out mcc-fc.automaton mcc-fc.automaton.resolved
    mcc-fc.conflicts mcc-fc.timings)
  (deps mcc-fc.mly)
  (action
    (with-outputs-to mcc-fc.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-fc.timings %{deps})))))

(rule (alias mcc-fc) (action (diff mcc-fc.exp mcc-fc.out)))

(rule (alias mcc-fc) (action (diff mcc-fc.automaton.exp mcc-fc.automaton)))

(rule (alias mcc-fc)
  (action (diff mcc-fc.automaton.resolved.exp mcc-fc.automaton.resolved)))

(rule (alias mcc-fc) (action (diff mcc-fc.conflicts.exp mcc-fc.conflicts)))

(rule (target mcc-fj.opp.out) (deps mcc-fj.mly)
  (action
    (with-outputs-to mcc-fj.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-fj) (action (diff mcc-fj.opp.exp mcc-fj.opp.out)))

(rule
  (targets mcc-fj.out mcc-fj.automaton mcc-fj.automaton.resolved
    mcc-fj.conflicts mcc-fj.timings)
  (deps mcc-fj.mly)
  (action
    (with-outputs-to mcc-fj.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-fj.timings %{deps})))))

(rule (alias mcc-fj) (action (diff mcc-fj.exp mcc-fj.out)))

(rule (alias mcc-fj) (action (diff mcc-fj.automaton.exp mcc-fj.automaton)))

(rule (alias mcc-fj)
  (action (diff mcc-fj.automaton.resolved.exp mcc-fj.automaton.resolved)))

(rule (alias mcc-fj) (action (diff mcc-fj.conflicts.exp mcc-fj.conflicts)))

(rule (target mcc-frontends.opp.out) (deps mcc-frontends.mly)
  (action
    (with-outputs-to mcc-frontends.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-frontends)
  (action (diff mcc-frontends.opp.exp mcc-frontends.opp.out)))

(rule
  (targets mcc-frontends.out mcc-frontends.automaton
    mcc-frontends.automaton.resolved mcc-frontends.conflicts
    mcc-frontends.timings)
  (deps mcc-frontends.mly)
  (action
    (with-outputs-to mcc-frontends.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-frontends.timings %{deps})))))

(rule (alias mcc-frontends)
  (action (diff mcc-frontends.exp mcc-frontends.out)))

(rule (alias mcc-frontends)
  (action (diff mcc-frontends.automaton.exp mcc-frontends.automaton)))

(rule (alias mcc-frontends)
  (action
    (diff mcc-frontends.automaton.resolved.exp
      mcc-frontends.automaton.resolved)))

(rule (alias mcc-frontends)
  (action (diff mcc-frontends.conflicts.exp mcc-frontends.conflicts)))

(rule (target mcc-mc.opp.out) (deps mcc-mc.mly)
  (action
    (with-outputs-to mcc-mc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-mc) (action (diff mcc-mc.opp.exp mcc-mc.opp.out)))

(rule
  (targets mcc-mc.out mcc-mc.automaton mcc-mc.automaton.resolved
    mcc-mc.conflicts mcc-mc.timings)
  (deps mcc-mc.mly)
  (action
    (with-outputs-to mcc-mc.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-mc.timings %{deps})))))

(rule (alias mcc-mc) (action (diff mcc-mc.exp mcc-mc.out)))

(rule (alias mcc-mc) (action (diff mcc-mc.automaton.exp mcc-mc.automaton)))

(rule (alias mcc-mc)
  (action (diff mcc-mc.automaton.resolved.exp mcc-mc.automaton.resolved)))

(rule (alias mcc-mc) (action (diff mcc-mc.conflicts.exp mcc-mc.conflicts)))

(rule (target mcc-moogle.opp.out) (deps mcc-moogle.mly)
  (action
    (with-outputs-to mcc-moogle.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-moogle)
  (action (diff mcc-moogle.opp.exp mcc-moogle.opp.out)))

(rule
  (targets mcc-moogle.out mcc-moogle.automaton mcc-moogle.automaton.resolved
    mcc-moogle.conflicts mcc-moogle.timings)
  (deps mcc-moogle.mly)
  (action
    (with-outputs-to mcc-moogle.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-moogle.timings %{deps})))))

(rule (alias mcc-moogle) (action (diff mcc-moogle.exp mcc-moogle.out)))

(rule (alias mcc-moogle)
  (action (diff mcc-moogle.automaton.exp mcc-moogle.automaton)))

(rule (alias mcc-moogle)
  (action
    (diff mcc-moogle.automaton.resolved.exp mcc-moogle.automaton.resolved)))

(rule (alias mcc-moogle)
  (action (diff mcc-moogle.conflicts.exp mcc-moogle.conflicts)))

(rule (target mcc-naml.opp.out) (deps mcc-naml.mly)
  (action
    (with-outputs-to mcc-naml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-naml) (action (diff mcc-naml.opp.exp mcc-naml.opp.out)))

(rule
  (targets mcc-naml.out mcc-naml.automaton mcc-naml.automaton.resolved
    mcc-naml.conflicts mcc-naml.timings)
  (deps mcc-naml.mly)
  (action
    (with-outputs-to mcc-naml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-naml.timings %{deps})))))

(rule (alias mcc-naml) (action (diff mcc-naml.exp mcc-naml.out)))

(rule (alias mcc-naml)
  (action (diff mcc-naml.automaton.exp mcc-naml.automaton)))

(rule (alias mcc-naml)
  (action (diff mcc-naml.automaton.resolved.exp mcc-naml.automaton.resolved)))

(rule (alias mcc-naml)
  (action (diff mcc-naml.conflicts.exp mcc-naml.conflicts)))

(rule (target mcc-pascal.opp.out) (deps mcc-pascal.mly)
  (action
    (with-outputs-to mcc-pascal.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-pascal)
  (action (diff mcc-pascal.opp.exp mcc-pascal.opp.out)))

(rule
  (targets mcc-pascal.out mcc-pascal.automaton mcc-pascal.automaton.resolved
    mcc-pascal.conflicts mcc-pascal.timings)
  (deps mcc-pascal.mly)
  (action
    (with-outputs-to mcc-pascal.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-pascal.timings %{deps})))))

(rule (alias mcc-pascal) (action (diff mcc-pascal.exp mcc-pascal.out)))

(rule (alias mcc-pascal)
  (action (diff mcc-pascal.automaton.exp mcc-pascal.automaton)))

(rule (alias mcc-pascal)
  (action
    (diff mcc-pascal.automaton.resolved.exp mcc-pascal.automaton.resolved)))

(rule (alias mcc-pascal)
  (action (diff mcc-pascal.conflicts.exp mcc-pascal.conflicts)))

(rule (target mcc-pasqual.opp.out) (deps mcc-pasqual.mly)
  (action
    (with-outputs-to mcc-pasqual.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-pasqual)
  (action (diff mcc-pasqual.opp.exp mcc-pasqual.opp.out)))

(rule
  (targets mcc-pasqual.out mcc-pasqual.automaton
    mcc-pasqual.automaton.resolved mcc-pasqual.conflicts mcc-pasqual.timings)
  (deps mcc-pasqual.mly)
  (action
    (with-outputs-to mcc-pasqual.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-pasqual.timings %{deps})))))

(rule (alias mcc-pasqual) (action (diff mcc-pasqual.exp mcc-pasqual.out)))

(rule (alias mcc-pasqual)
  (action (diff mcc-pasqual.automaton.exp mcc-pasqual.automaton)))

(rule (alias mcc-pasqual)
  (action
    (diff mcc-pasqual.automaton.resolved.exp mcc-pasqual.automaton.resolved)))

(rule (alias mcc-pasqual)
  (action (diff mcc-pasqual.conflicts.exp mcc-pasqual.conflicts)))

(rule (target mcc-phobos.opp.out) (deps mcc-phobos.mly)
  (action
    (with-outputs-to mcc-phobos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-phobos)
  (action (diff mcc-phobos.opp.exp mcc-phobos.opp.out)))

(rule
  (targets mcc-phobos.out mcc-phobos.automaton mcc-phobos.automaton.resolved
    mcc-phobos.conflicts mcc-phobos.timings)
  (deps mcc-phobos.mly)
  (action
    (with-outputs-to mcc-phobos.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-phobos.timings %{deps})))))

(rule (alias mcc-phobos) (action (diff mcc-phobos.exp mcc-phobos.out)))

(rule (alias mcc-phobos)
  (action (diff mcc-phobos.automaton.exp mcc-phobos.automaton)))

(rule (alias mcc-phobos)
  (action
    (diff mcc-phobos.automaton.resolved.exp mcc-phobos.automaton.resolved)))

(rule (alias mcc-phobos)
  (action (diff mcc-phobos.conflicts.exp mcc-phobos.conflicts)))

(rule (target mcc-prof.opp.out) (deps mcc-prof.mly)
  (action
    (with-outputs-to mcc-prof.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-prof) (action (diff mcc-prof.opp.exp mcc-prof.opp.out)))

(rule
  (targets mcc-prof.out mcc-prof.automaton mcc-prof.automaton.resolved
    mcc-prof.conflicts mcc-prof.timings)
  (deps mcc-prof.mly)
  (action
    (with-outputs-to mcc-prof.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-prof.timings %{deps})))))

(rule (alias mcc-prof) (action (diff mcc-prof.exp mcc-prof.out)))

(rule (alias mcc-prof)
  (action (diff mcc-prof.automaton.exp mcc-prof.automaton)))

(rule (alias mcc-prof)
  (action (diff mcc-prof.automaton.resolved.exp mcc-prof.automaton.resolved)))

(rule (alias mcc-prof)
  (action (diff mcc-prof.conflicts.exp mcc-prof.conflicts)))

(rule (target mcc-python.opp.out) (deps mcc-python.mly)
  (action
    (with-outputs-to mcc-python.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mcc-python)
  (action (diff mcc-python.opp.exp mcc-python.opp.out)))

(rule
  (targets mcc-python.out mcc-python.automaton mcc-python.automaton.resolved
    mcc-python.conflicts mcc-python.timings)
  (deps mcc-python.mly)
  (action
    (with-outputs-to mcc-python.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mcc-python.timings %{deps})))))

(rule (alias mcc-python) (action (diff mcc-python.exp mcc-python.out)))

(rule (alias mcc-python)
  (action (diff mcc-python.automaton.exp mcc-python.automaton)))

(rule (alias mcc-python)
  (action
    (diff mcc-python.automaton.resolved.exp mcc-python.automaton.resolved)))

(rule (alias mcc-python)
  (action (diff mcc-python.conflicts.exp mcc-python.conflicts)))

(rule (target memcad.1.0.0-mc_parser.opp.out)
  (deps memcad.1.0.0-mc_parser.mly)
  (action
    (with-outputs-to memcad.1.0.0-mc_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias memcad.1.0.0-mc_parser)
  (action
    (diff memcad.1.0.0-mc_parser.opp.exp memcad.1.0.0-mc_parser.opp.out)))

(rule
  (targets memcad.1.0.0-mc_parser.out memcad.1.0.0-mc_parser.automaton
    memcad.1.0.0-mc_parser.automaton.resolved
    memcad.1.0.0-mc_parser.conflicts memcad.1.0.0-mc_parser.timings)
  (deps memcad.1.0.0-mc_parser.mly)
  (action
    (with-outputs-to memcad.1.0.0-mc_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to memcad.1.0.0-mc_parser.timings %{deps})))))

(rule (alias memcad.1.0.0-mc_parser)
  (action (diff memcad.1.0.0-mc_parser.exp memcad.1.0.0-mc_parser.out)))

(rule (alias memcad.1.0.0-mc_parser)
  (action
    (diff memcad.1.0.0-mc_parser.automaton.exp
      memcad.1.0.0-mc_parser.automaton)))

(rule (alias memcad.1.0.0-mc_parser)
  (action
    (diff memcad.1.0.0-mc_parser.automaton.resolved.exp
      memcad.1.0.0-mc_parser.automaton.resolved)))

(rule (alias memcad.1.0.0-mc_parser)
  (action
    (diff memcad.1.0.0-mc_parser.conflicts.exp
      memcad.1.0.0-mc_parser.conflicts)))

(rule (target metaocaml.opp.out) (deps metaocaml.mly)
  (action
    (with-outputs-to metaocaml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias metaocaml) (action (diff metaocaml.opp.exp metaocaml.opp.out)))

(rule
  (targets metaocaml.out metaocaml.automaton metaocaml.automaton.resolved
    metaocaml.conflicts metaocaml.timings)
  (deps metaocaml.mly)
  (action
    (with-outputs-to metaocaml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to metaocaml.timings %{deps})))))

(rule (alias metaocaml) (action (diff metaocaml.exp metaocaml.out)))

(rule (alias metaocaml)
  (action (diff metaocaml.automaton.exp metaocaml.automaton)))

(rule (alias metaocaml)
  (action
    (diff metaocaml.automaton.resolved.exp metaocaml.automaton.resolved)))

(rule (alias metaocaml)
  (action (diff metaocaml.conflicts.exp metaocaml.conflicts)))

(rule (target mezzo.opp.out) (deps mezzo.mly)
  (action
    (with-outputs-to mezzo.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:mezzo.flags} %{deps})))))

(rule (alias mezzo) (action (diff mezzo.opp.exp mezzo.opp.out)))

(rule
  (targets mezzo.out mezzo.automaton mezzo.automaton.resolved mezzo.conflicts
    mezzo.timings)
  (deps mezzo.mly)
  (action
    (with-outputs-to mezzo.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mezzo.timings %{read-lines:mezzo.flags} %{deps})))))

(rule (alias mezzo) (action (diff mezzo.exp mezzo.out)))

(rule (alias mezzo) (action (diff mezzo.automaton.exp mezzo.automaton)))

(rule (alias mezzo)
  (action (diff mezzo.automaton.resolved.exp mezzo.automaton.resolved)))

(rule (alias mezzo) (action (diff mezzo.conflicts.exp mezzo.conflicts)))

(rule (target mezzo_canonical.opp.out) (deps mezzo_canonical.mly)
  (action
    (with-outputs-to mezzo_canonical.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:mezzo_canonical.flags}
          %{deps})))))

(rule (alias mezzo_canonical)
  (action (diff mezzo_canonical.opp.exp mezzo_canonical.opp.out)))

(rule
  (targets mezzo_canonical.out mezzo_canonical.automaton
    mezzo_canonical.automaton.resolved mezzo_canonical.conflicts
    mezzo_canonical.timings)
  (deps mezzo_canonical.mly)
  (action
    (with-outputs-to mezzo_canonical.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mezzo_canonical.timings
          %{read-lines:mezzo_canonical.flags} %{deps})))))

(rule (alias mezzo_canonical)
  (action (diff mezzo_canonical.exp mezzo_canonical.out)))

(rule (alias mezzo_canonical)
  (action (diff mezzo_canonical.automaton.exp mezzo_canonical.automaton)))

(rule (alias mezzo_canonical)
  (action
    (diff mezzo_canonical.automaton.resolved.exp
      mezzo_canonical.automaton.resolved)))

(rule (alias mezzo_canonical)
  (action (diff mezzo_canonical.conflicts.exp mezzo_canonical.conflicts)))

(rule (target mezzo_inclusion_only.opp.out) (deps mezzo_inclusion_only.mly)
  (action
    (with-outputs-to mezzo_inclusion_only.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess
          %{read-lines:mezzo_inclusion_only.flags} %{deps})))))

(rule (alias mezzo_inclusion_only)
  (action (diff mezzo_inclusion_only.opp.exp mezzo_inclusion_only.opp.out)))

(rule
  (targets mezzo_inclusion_only.out mezzo_inclusion_only.automaton
    mezzo_inclusion_only.automaton.resolved mezzo_inclusion_only.conflicts
    mezzo_inclusion_only.timings)
  (deps mezzo_inclusion_only.mly)
  (action
    (with-outputs-to mezzo_inclusion_only.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mezzo_inclusion_only.timings
          %{read-lines:mezzo_inclusion_only.flags} %{deps})))))

(rule (alias mezzo_inclusion_only)
  (action (diff mezzo_inclusion_only.exp mezzo_inclusion_only.out)))

(rule (alias mezzo_inclusion_only)
  (action
    (diff mezzo_inclusion_only.automaton.exp mezzo_inclusion_only.automaton)))

(rule (alias mezzo_inclusion_only)
  (action
    (diff mezzo_inclusion_only.automaton.resolved.exp
      mezzo_inclusion_only.automaton.resolved)))

(rule (alias mezzo_inclusion_only)
  (action
    (diff mezzo_inclusion_only.conflicts.exp mezzo_inclusion_only.conflicts)))

(rule (target miniCparser.opp.out) (deps miniCparser.mly)
  (action
    (with-outputs-to miniCparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias miniCparser)
  (action (diff miniCparser.opp.exp miniCparser.opp.out)))

(rule
  (targets miniCparser.out miniCparser.automaton
    miniCparser.automaton.resolved miniCparser.conflicts miniCparser.timings)
  (deps miniCparser.mly)
  (action
    (with-outputs-to miniCparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to miniCparser.timings %{deps})))))

(rule (alias miniCparser) (action (diff miniCparser.exp miniCparser.out)))

(rule (alias miniCparser)
  (action (diff miniCparser.automaton.exp miniCparser.automaton)))

(rule (alias miniCparser)
  (action
    (diff miniCparser.automaton.resolved.exp miniCparser.automaton.resolved)))

(rule (alias miniCparser)
  (action (diff miniCparser.conflicts.exp miniCparser.conflicts)))

(rule (target miniMLparser.opp.out) (deps miniMLparser.mly)
  (action
    (with-outputs-to miniMLparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias miniMLparser)
  (action (diff miniMLparser.opp.exp miniMLparser.opp.out)))

(rule
  (targets miniMLparser.out miniMLparser.automaton
    miniMLparser.automaton.resolved miniMLparser.conflicts
    miniMLparser.timings)
  (deps miniMLparser.mly)
  (action
    (with-outputs-to miniMLparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to miniMLparser.timings %{deps})))))

(rule (alias miniMLparser) (action (diff miniMLparser.exp miniMLparser.out)))

(rule (alias miniMLparser)
  (action (diff miniMLparser.automaton.exp miniMLparser.automaton)))

(rule (alias miniMLparser)
  (action
    (diff miniMLparser.automaton.resolved.exp
      miniMLparser.automaton.resolved)))

(rule (alias miniMLparser)
  (action (diff miniMLparser.conflicts.exp miniMLparser.conflicts)))

(rule (target mlpost.0.8.2-pfb_parser.opp.out)
  (deps mlpost.0.8.2-pfb_parser.mly)
  (action
    (with-outputs-to mlpost.0.8.2-pfb_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mlpost.0.8.2-pfb_parser)
  (action
    (diff mlpost.0.8.2-pfb_parser.opp.exp mlpost.0.8.2-pfb_parser.opp.out)))

(rule
  (targets mlpost.0.8.2-pfb_parser.out mlpost.0.8.2-pfb_parser.automaton
    mlpost.0.8.2-pfb_parser.automaton.resolved
    mlpost.0.8.2-pfb_parser.conflicts mlpost.0.8.2-pfb_parser.timings)
  (deps mlpost.0.8.2-pfb_parser.mly)
  (action
    (with-outputs-to mlpost.0.8.2-pfb_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mlpost.0.8.2-pfb_parser.timings %{deps})))))

(rule (alias mlpost.0.8.2-pfb_parser)
  (action (diff mlpost.0.8.2-pfb_parser.exp mlpost.0.8.2-pfb_parser.out)))

(rule (alias mlpost.0.8.2-pfb_parser)
  (action
    (diff mlpost.0.8.2-pfb_parser.automaton.exp
      mlpost.0.8.2-pfb_parser.automaton)))

(rule (alias mlpost.0.8.2-pfb_parser)
  (action
    (diff mlpost.0.8.2-pfb_parser.automaton.resolved.exp
      mlpost.0.8.2-pfb_parser.automaton.resolved)))

(rule (alias mlpost.0.8.2-pfb_parser)
  (action
    (diff mlpost.0.8.2-pfb_parser.conflicts.exp
      mlpost.0.8.2-pfb_parser.conflicts)))

(rule (target modelica.opp.out) (deps modelica.mly)
  (action
    (with-outputs-to modelica.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias modelica) (action (diff modelica.opp.exp modelica.opp.out)))

(rule
  (targets modelica.out modelica.automaton modelica.automaton.resolved
    modelica.conflicts modelica.timings)
  (deps modelica.mly)
  (action
    (with-outputs-to modelica.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to modelica.timings %{deps})))))

(rule (alias modelica) (action (diff modelica.exp modelica.out)))

(rule (alias modelica)
  (action (diff modelica.automaton.exp modelica.automaton)))

(rule (alias modelica)
  (action (diff modelica.automaton.resolved.exp modelica.automaton.resolved)))

(rule (alias modelica)
  (action (diff modelica.conflicts.exp modelica.conflicts)))

(rule (target modelyze.opp.out) (deps modelyze.mly)
  (action
    (with-outputs-to modelyze.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias modelyze) (action (diff modelyze.opp.exp modelyze.opp.out)))

(rule
  (targets modelyze.out modelyze.automaton modelyze.automaton.resolved
    modelyze.conflicts modelyze.timings)
  (deps modelyze.mly)
  (action
    (with-outputs-to modelyze.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to modelyze.timings %{deps})))))

(rule (alias modelyze) (action (diff modelyze.exp modelyze.out)))

(rule (alias modelyze)
  (action (diff modelyze.automaton.exp modelyze.automaton)))

(rule (alias modelyze)
  (action (diff modelyze.automaton.resolved.exp modelyze.automaton.resolved)))

(rule (alias modelyze)
  (action (diff modelyze.conflicts.exp modelyze.conflicts)))

(rule (target modulo.opp.out) (deps modulo.mly)
  (action
    (with-outputs-to modulo.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias modulo) (action (diff modulo.opp.exp modulo.opp.out)))

(rule
  (targets modulo.out modulo.automaton modulo.automaton.resolved
    modulo.conflicts modulo.timings)
  (deps modulo.mly)
  (action
    (with-outputs-to modulo.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to modulo.timings %{deps})))))

(rule (alias modulo) (action (diff modulo.exp modulo.out)))

(rule (alias modulo) (action (diff modulo.automaton.exp modulo.automaton)))

(rule (alias modulo)
  (action (diff modulo.automaton.resolved.exp modulo.automaton.resolved)))

(rule (alias modulo) (action (diff modulo.conflicts.exp modulo.conflicts)))

(rule (target morbig.0.9.1-parser.opp.out) (deps morbig.0.9.1-parser.mly)
  (action
    (with-outputs-to morbig.0.9.1-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias morbig.0.9.1-parser)
  (action (diff morbig.0.9.1-parser.opp.exp morbig.0.9.1-parser.opp.out)))

(rule
  (targets morbig.0.9.1-parser.out morbig.0.9.1-parser.automaton
    morbig.0.9.1-parser.automaton.resolved morbig.0.9.1-parser.conflicts
    morbig.0.9.1-parser.timings)
  (deps morbig.0.9.1-parser.mly)
  (action
    (with-outputs-to morbig.0.9.1-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to morbig.0.9.1-parser.timings %{deps})))))

(rule (alias morbig.0.9.1-parser)
  (action (diff morbig.0.9.1-parser.exp morbig.0.9.1-parser.out)))

(rule (alias morbig.0.9.1-parser)
  (action
    (diff morbig.0.9.1-parser.automaton.exp morbig.0.9.1-parser.automaton)))

(rule (alias morbig.0.9.1-parser)
  (action
    (diff morbig.0.9.1-parser.automaton.resolved.exp
      morbig.0.9.1-parser.automaton.resolved)))

(rule (alias morbig.0.9.1-parser)
  (action
    (diff morbig.0.9.1-parser.conflicts.exp morbig.0.9.1-parser.conflicts)))

(rule (target mpri.opp.out) (deps mpri.mly)
  (action
    (with-outputs-to mpri.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias mpri) (action (diff mpri.opp.exp mpri.opp.out)))

(rule
  (targets mpri.out mpri.automaton mpri.automaton.resolved mpri.conflicts
    mpri.timings)
  (deps mpri.mly)
  (action
    (with-outputs-to mpri.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to mpri.timings %{deps})))))

(rule (alias mpri) (action (diff mpri.exp mpri.out)))

(rule (alias mpri) (action (diff mpri.automaton.exp mpri.automaton)))

(rule (alias mpri)
  (action (diff mpri.automaton.resolved.exp mpri.automaton.resolved)))

(rule (alias mpri) (action (diff mpri.conflicts.exp mpri.conflicts)))

(rule (target multi-token-alias-0.opp.out)
  (deps multi-token-alias-0.mly multi-token-alias-1.mly
    multi-token-alias-2.mly multi-token-alias-3.mly)
  (action
    (with-outputs-to multi-token-alias-0.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base multi-token-alias-0 --only-preprocess %{deps})))))

(rule (alias multi-token-alias-0)
  (action (diff multi-token-alias-0.opp.exp multi-token-alias-0.opp.out)))

(rule
  (targets multi-token-alias-0.out multi-token-alias-0.automaton
    multi-token-alias-0.automaton.resolved multi-token-alias-0.conflicts
    multi-token-alias-0.timings)
  (deps multi-token-alias-0.mly multi-token-alias-1.mly
    multi-token-alias-2.mly multi-token-alias-3.mly)
  (action
    (with-outputs-to multi-token-alias-0.out
      (with-accepted-exit-codes 0
        (run menhir --base multi-token-alias-0 --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to
          multi-token-alias-0.timings %{deps})))))

(rule (alias multi-token-alias-0)
  (action (diff multi-token-alias-0.exp multi-token-alias-0.out)))

(rule (alias multi-token-alias-0)
  (action
    (diff multi-token-alias-0.automaton.exp multi-token-alias-0.automaton)))

(rule (alias multi-token-alias-0)
  (action
    (diff multi-token-alias-0.automaton.resolved.exp
      multi-token-alias-0.automaton.resolved)))

(rule (alias multi-token-alias-0)
  (action
    (diff multi-token-alias-0.conflicts.exp multi-token-alias-0.conflicts)))

(rule (target multiple-functor.opp.out) (deps multiple-functor.mly)
  (action
    (with-outputs-to multiple-functor.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias multiple-functor)
  (action (diff multiple-functor.opp.exp multiple-functor.opp.out)))

(rule
  (targets multiple-functor.out multiple-functor.automaton
    multiple-functor.automaton.resolved multiple-functor.conflicts
    multiple-functor.timings)
  (deps multiple-functor.mly)
  (action
    (with-outputs-to multiple-functor.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to multiple-functor.timings %{deps})))))

(rule (alias multiple-functor)
  (action (diff multiple-functor.exp multiple-functor.out)))

(rule (alias multiple-functor)
  (action (diff multiple-functor.automaton.exp multiple-functor.automaton)))

(rule (alias multiple-functor)
  (action
    (diff multiple-functor.automaton.resolved.exp
      multiple-functor.automaton.resolved)))

(rule (alias multiple-functor)
  (action (diff multiple-functor.conflicts.exp multiple-functor.conflicts)))

(rule (target name-clash-1.opp.out) (deps name-clash-1.mly name-clash-2.mly)
  (action
    (with-outputs-to name-clash-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base name-clash-1 --only-preprocess %{deps})))))

(rule (alias name-clash-1)
  (action (diff name-clash-1.opp.exp name-clash-1.opp.out)))

(rule
  (targets name-clash-1.out name-clash-1.automaton
    name-clash-1.automaton.resolved name-clash-1.conflicts
    name-clash-1.timings)
  (deps name-clash-1.mly name-clash-2.mly)
  (action
    (with-outputs-to name-clash-1.out
      (with-accepted-exit-codes 0
        (run menhir --base name-clash-1 --dump --dump-resolved --explain -lg
          2 -la 2 -lc 2 --timings-to name-clash-1.timings %{deps})))))

(rule (alias name-clash-1) (action (diff name-clash-1.exp name-clash-1.out)))

(rule (alias name-clash-1)
  (action (diff name-clash-1.automaton.exp name-clash-1.automaton)))

(rule (alias name-clash-1)
  (action
    (diff name-clash-1.automaton.resolved.exp
      name-clash-1.automaton.resolved)))

(rule (alias name-clash-1)
  (action (diff name-clash-1.conflicts.exp name-clash-1.conflicts)))

(rule (target netsem.opp.out) (deps netsem.mly)
  (action
    (with-outputs-to netsem.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias netsem) (action (diff netsem.opp.exp netsem.opp.out)))

(rule
  (targets netsem.out netsem.automaton netsem.automaton.resolved
    netsem.conflicts netsem.timings)
  (deps netsem.mly)
  (action
    (with-outputs-to netsem.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to netsem.timings %{deps})))))

(rule (alias netsem) (action (diff netsem.exp netsem.out)))

(rule (alias netsem) (action (diff netsem.automaton.exp netsem.automaton)))

(rule (alias netsem)
  (action (diff netsem.automaton.resolved.exp netsem.automaton.resolved)))

(rule (alias netsem) (action (diff netsem.conflicts.exp netsem.conflicts)))

(rule (target nexus.opp.out) (deps nexus.mly)
  (action
    (with-outputs-to nexus.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias nexus) (action (diff nexus.opp.exp nexus.opp.out)))

(rule
  (targets nexus.out nexus.automaton nexus.automaton.resolved nexus.conflicts
    nexus.timings)
  (deps nexus.mly)
  (action
    (with-outputs-to nexus.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to nexus.timings %{deps})))))

(rule (alias nexus) (action (diff nexus.exp nexus.out)))

(rule (alias nexus) (action (diff nexus.automaton.exp nexus.automaton)))

(rule (alias nexus)
  (action (diff nexus.automaton.resolved.exp nexus.automaton.resolved)))

(rule (alias nexus) (action (diff nexus.conflicts.exp nexus.conflicts)))

(rule (target nml-ip-parser.opp.out) (deps nml-ip-parser.mly)
  (action
    (with-outputs-to nml-ip-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias nml-ip-parser)
  (action (diff nml-ip-parser.opp.exp nml-ip-parser.opp.out)))

(rule
  (targets nml-ip-parser.out nml-ip-parser.automaton
    nml-ip-parser.automaton.resolved nml-ip-parser.conflicts
    nml-ip-parser.timings)
  (deps nml-ip-parser.mly)
  (action
    (with-outputs-to nml-ip-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to nml-ip-parser.timings %{deps})))))

(rule (alias nml-ip-parser)
  (action (diff nml-ip-parser.exp nml-ip-parser.out)))

(rule (alias nml-ip-parser)
  (action (diff nml-ip-parser.automaton.exp nml-ip-parser.automaton)))

(rule (alias nml-ip-parser)
  (action
    (diff nml-ip-parser.automaton.resolved.exp
      nml-ip-parser.automaton.resolved)))

(rule (alias nml-ip-parser)
  (action (diff nml-ip-parser.conflicts.exp nml-ip-parser.conflicts)))

(rule (target no-end-of-stream-conflict.opp.out)
  (deps no-end-of-stream-conflict.mly)
  (action
    (with-outputs-to no-end-of-stream-conflict.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias no-end-of-stream-conflict)
  (action
    (diff no-end-of-stream-conflict.opp.exp
      no-end-of-stream-conflict.opp.out)))

(rule
  (targets no-end-of-stream-conflict.out no-end-of-stream-conflict.automaton
    no-end-of-stream-conflict.automaton.resolved
    no-end-of-stream-conflict.conflicts no-end-of-stream-conflict.timings)
  (deps no-end-of-stream-conflict.mly)
  (action
    (with-outputs-to no-end-of-stream-conflict.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to no-end-of-stream-conflict.timings %{deps})))))

(rule (alias no-end-of-stream-conflict)
  (action (diff no-end-of-stream-conflict.exp no-end-of-stream-conflict.out)))

(rule (alias no-end-of-stream-conflict)
  (action
    (diff no-end-of-stream-conflict.automaton.exp
      no-end-of-stream-conflict.automaton)))

(rule (alias no-end-of-stream-conflict)
  (action
    (diff no-end-of-stream-conflict.automaton.resolved.exp
      no-end-of-stream-conflict.automaton.resolved)))

(rule (alias no-end-of-stream-conflict)
  (action
    (diff no-end-of-stream-conflict.conflicts.exp
      no-end-of-stream-conflict.conflicts)))

(rule (target no_future.opp.out) (deps no_future.mly)
  (action
    (with-outputs-to no_future.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias no_future) (action (diff no_future.opp.exp no_future.opp.out)))

(rule
  (targets no_future.out no_future.automaton no_future.automaton.resolved
    no_future.conflicts no_future.timings)
  (deps no_future.mly)
  (action
    (with-outputs-to no_future.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to no_future.timings %{deps})))))

(rule (alias no_future) (action (diff no_future.exp no_future.out)))

(rule (alias no_future)
  (action (diff no_future.automaton.exp no_future.automaton)))

(rule (alias no_future)
  (action
    (diff no_future.automaton.resolved.exp no_future.automaton.resolved)))

(rule (alias no_future)
  (action (diff no_future.conflicts.exp no_future.conflicts)))

(rule (target nunchaku.0.6-Parser.opp.out) (deps nunchaku.0.6-Parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-Parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias nunchaku.0.6-Parser)
  (action (diff nunchaku.0.6-Parser.opp.exp nunchaku.0.6-Parser.opp.out)))

(rule
  (targets nunchaku.0.6-Parser.out nunchaku.0.6-Parser.automaton
    nunchaku.0.6-Parser.automaton.resolved nunchaku.0.6-Parser.conflicts
    nunchaku.0.6-Parser.timings)
  (deps nunchaku.0.6-Parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-Parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to nunchaku.0.6-Parser.timings %{deps})))))

(rule (alias nunchaku.0.6-Parser)
  (action (diff nunchaku.0.6-Parser.exp nunchaku.0.6-Parser.out)))

(rule (alias nunchaku.0.6-Parser)
  (action
    (diff nunchaku.0.6-Parser.automaton.exp nunchaku.0.6-Parser.automaton)))

(rule (alias nunchaku.0.6-Parser)
  (action
    (diff nunchaku.0.6-Parser.automaton.resolved.exp
      nunchaku.0.6-Parser.automaton.resolved)))

(rule (alias nunchaku.0.6-Parser)
  (action
    (diff nunchaku.0.6-Parser.conflicts.exp nunchaku.0.6-Parser.conflicts)))

(rule (target nunchaku.0.6-TPTP_parser.opp.out)
  (deps nunchaku.0.6-TPTP_parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-TPTP_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias nunchaku.0.6-TPTP_parser)
  (action
    (diff nunchaku.0.6-TPTP_parser.opp.exp nunchaku.0.6-TPTP_parser.opp.out)))

(rule
  (targets nunchaku.0.6-TPTP_parser.out nunchaku.0.6-TPTP_parser.automaton
    nunchaku.0.6-TPTP_parser.automaton.resolved
    nunchaku.0.6-TPTP_parser.conflicts nunchaku.0.6-TPTP_parser.timings)
  (deps nunchaku.0.6-TPTP_parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-TPTP_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to nunchaku.0.6-TPTP_parser.timings %{deps})))))

(rule (alias nunchaku.0.6-TPTP_parser)
  (action (diff nunchaku.0.6-TPTP_parser.exp nunchaku.0.6-TPTP_parser.out)))

(rule (alias nunchaku.0.6-TPTP_parser)
  (action
    (diff nunchaku.0.6-TPTP_parser.automaton.exp
      nunchaku.0.6-TPTP_parser.automaton)))

(rule (alias nunchaku.0.6-TPTP_parser)
  (action
    (diff nunchaku.0.6-TPTP_parser.automaton.resolved.exp
      nunchaku.0.6-TPTP_parser.automaton.resolved)))

(rule (alias nunchaku.0.6-TPTP_parser)
  (action
    (diff nunchaku.0.6-TPTP_parser.conflicts.exp
      nunchaku.0.6-TPTP_parser.conflicts)))

(rule (target nunchaku.0.6-Tip_parser.opp.out)
  (deps nunchaku.0.6-Tip_parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-Tip_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias nunchaku.0.6-Tip_parser)
  (action
    (diff nunchaku.0.6-Tip_parser.opp.exp nunchaku.0.6-Tip_parser.opp.out)))

(rule
  (targets nunchaku.0.6-Tip_parser.out nunchaku.0.6-Tip_parser.automaton
    nunchaku.0.6-Tip_parser.automaton.resolved
    nunchaku.0.6-Tip_parser.conflicts nunchaku.0.6-Tip_parser.timings)
  (deps nunchaku.0.6-Tip_parser.mly)
  (action
    (with-outputs-to nunchaku.0.6-Tip_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to nunchaku.0.6-Tip_parser.timings %{deps})))))

(rule (alias nunchaku.0.6-Tip_parser)
  (action (diff nunchaku.0.6-Tip_parser.exp nunchaku.0.6-Tip_parser.out)))

(rule (alias nunchaku.0.6-Tip_parser)
  (action
    (diff nunchaku.0.6-Tip_parser.automaton.exp
      nunchaku.0.6-Tip_parser.automaton)))

(rule (alias nunchaku.0.6-Tip_parser)
  (action
    (diff nunchaku.0.6-Tip_parser.automaton.resolved.exp
      nunchaku.0.6-Tip_parser.automaton.resolved)))

(rule (alias nunchaku.0.6-Tip_parser)
  (action
    (diff nunchaku.0.6-Tip_parser.conflicts.exp
      nunchaku.0.6-Tip_parser.conflicts)))

(rule (target obc.opp.out) (deps obc.mly)
  (action
    (with-outputs-to obc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias obc) (action (diff obc.opp.exp obc.opp.out)))

(rule
  (targets obc.out obc.automaton obc.automaton.resolved obc.conflicts
    obc.timings)
  (deps obc.mly)
  (action
    (with-outputs-to obc.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to obc.timings %{deps})))))

(rule (alias obc) (action (diff obc.exp obc.out)))

(rule (alias obc) (action (diff obc.automaton.exp obc.automaton)))

(rule (alias obc)
  (action (diff obc.automaton.resolved.exp obc.automaton.resolved)))

(rule (alias obc) (action (diff obc.conflicts.exp obc.conflicts)))

(rule (target obc-sym.opp.out) (deps obc-sym.mly)
  (action
    (with-outputs-to obc-sym.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias obc-sym) (action (diff obc-sym.opp.exp obc-sym.opp.out)))

(rule
  (targets obc-sym.out obc-sym.automaton obc-sym.automaton.resolved
    obc-sym.conflicts obc-sym.timings)
  (deps obc-sym.mly)
  (action
    (with-outputs-to obc-sym.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to obc-sym.timings %{deps})))))

(rule (alias obc-sym) (action (diff obc-sym.exp obc-sym.out)))

(rule (alias obc-sym)
  (action (diff obc-sym.automaton.exp obc-sym.automaton)))

(rule (alias obc-sym)
  (action (diff obc-sym.automaton.resolved.exp obc-sym.automaton.resolved)))

(rule (alias obc-sym)
  (action (diff obc-sym.conflicts.exp obc-sym.conflicts)))

(rule (target obelisk.0.3.2-zelus.opp.out) (deps obelisk.0.3.2-zelus.mly)
  (action
    (with-outputs-to obelisk.0.3.2-zelus.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias obelisk.0.3.2-zelus)
  (action (diff obelisk.0.3.2-zelus.opp.exp obelisk.0.3.2-zelus.opp.out)))

(rule
  (targets obelisk.0.3.2-zelus.out obelisk.0.3.2-zelus.automaton
    obelisk.0.3.2-zelus.automaton.resolved obelisk.0.3.2-zelus.conflicts
    obelisk.0.3.2-zelus.timings)
  (deps obelisk.0.3.2-zelus.mly)
  (action
    (with-outputs-to obelisk.0.3.2-zelus.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to obelisk.0.3.2-zelus.timings %{deps})))))

(rule (alias obelisk.0.3.2-zelus)
  (action (diff obelisk.0.3.2-zelus.exp obelisk.0.3.2-zelus.out)))

(rule (alias obelisk.0.3.2-zelus)
  (action
    (diff obelisk.0.3.2-zelus.automaton.exp obelisk.0.3.2-zelus.automaton)))

(rule (alias obelisk.0.3.2-zelus)
  (action
    (diff obelisk.0.3.2-zelus.automaton.resolved.exp
      obelisk.0.3.2-zelus.automaton.resolved)))

(rule (alias obelisk.0.3.2-zelus)
  (action
    (diff obelisk.0.3.2-zelus.conflicts.exp obelisk.0.3.2-zelus.conflicts)))

(rule (target ocaml.opp.out) (deps ocaml.mly)
  (action
    (with-outputs-to ocaml.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:ocaml.flags} %{deps})))))

(rule (alias ocaml) (action (diff ocaml.opp.exp ocaml.opp.out)))

(rule
  (targets ocaml.out ocaml.automaton ocaml.automaton.resolved ocaml.conflicts
    ocaml.timings)
  (deps ocaml.mly)
  (action
    (with-outputs-to ocaml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocaml.timings %{read-lines:ocaml.flags} %{deps})))))

(rule (alias ocaml) (action (diff ocaml.exp ocaml.out)))

(rule (alias ocaml) (action (diff ocaml.automaton.exp ocaml.automaton)))

(rule (alias ocaml)
  (action (diff ocaml.automaton.resolved.exp ocaml.automaton.resolved)))

(rule (alias ocaml) (action (diff ocaml.conflicts.exp ocaml.conflicts)))

(rule (target ocaml-base-compiler.4.07.1-parsecmm.opp.out)
  (deps ocaml-base-compiler.4.07.1-parsecmm.mly)
  (action
    (with-outputs-to ocaml-base-compiler.4.07.1-parsecmm.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocaml-base-compiler.4.07.1-parsecmm)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.opp.exp
      ocaml-base-compiler.4.07.1-parsecmm.opp.out)))

(rule
  (targets ocaml-base-compiler.4.07.1-parsecmm.out
    ocaml-base-compiler.4.07.1-parsecmm.automaton
    ocaml-base-compiler.4.07.1-parsecmm.automaton.resolved
    ocaml-base-compiler.4.07.1-parsecmm.conflicts
    ocaml-base-compiler.4.07.1-parsecmm.timings)
  (deps ocaml-base-compiler.4.07.1-parsecmm.mly)
  (action
    (with-outputs-to ocaml-base-compiler.4.07.1-parsecmm.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocaml-base-compiler.4.07.1-parsecmm.timings %{deps})))))

(rule (alias ocaml-base-compiler.4.07.1-parsecmm)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.exp
      ocaml-base-compiler.4.07.1-parsecmm.out)))

(rule (alias ocaml-base-compiler.4.07.1-parsecmm)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.automaton.exp
      ocaml-base-compiler.4.07.1-parsecmm.automaton)))

(rule (alias ocaml-base-compiler.4.07.1-parsecmm)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.automaton.resolved.exp
      ocaml-base-compiler.4.07.1-parsecmm.automaton.resolved)))

(rule (alias ocaml-base-compiler.4.07.1-parsecmm)
  (action
    (diff ocaml-base-compiler.4.07.1-parsecmm.conflicts.exp
      ocaml-base-compiler.4.07.1-parsecmm.conflicts)))

(rule (target ocaml-debugger.opp.out) (deps ocaml-debugger.mly)
  (action
    (with-outputs-to ocaml-debugger.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocaml-debugger)
  (action (diff ocaml-debugger.opp.exp ocaml-debugger.opp.out)))

(rule
  (targets ocaml-debugger.out ocaml-debugger.automaton
    ocaml-debugger.automaton.resolved ocaml-debugger.conflicts
    ocaml-debugger.timings)
  (deps ocaml-debugger.mly)
  (action
    (with-outputs-to ocaml-debugger.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocaml-debugger.timings %{deps})))))

(rule (alias ocaml-debugger)
  (action (diff ocaml-debugger.exp ocaml-debugger.out)))

(rule (alias ocaml-debugger)
  (action (diff ocaml-debugger.automaton.exp ocaml-debugger.automaton)))

(rule (alias ocaml-debugger)
  (action
    (diff ocaml-debugger.automaton.resolved.exp
      ocaml-debugger.automaton.resolved)))

(rule (alias ocaml-debugger)
  (action (diff ocaml-debugger.conflicts.exp ocaml-debugger.conflicts)))

(rule (target ocaml-lex.opp.out) (deps ocaml-lex.mly)
  (action
    (with-outputs-to ocaml-lex.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocaml-lex) (action (diff ocaml-lex.opp.exp ocaml-lex.opp.out)))

(rule
  (targets ocaml-lex.out ocaml-lex.automaton ocaml-lex.automaton.resolved
    ocaml-lex.conflicts ocaml-lex.timings)
  (deps ocaml-lex.mly)
  (action
    (with-outputs-to ocaml-lex.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocaml-lex.timings %{deps})))))

(rule (alias ocaml-lex) (action (diff ocaml-lex.exp ocaml-lex.out)))

(rule (alias ocaml-lex)
  (action (diff ocaml-lex.automaton.exp ocaml-lex.automaton)))

(rule (alias ocaml-lex)
  (action
    (diff ocaml-lex.automaton.resolved.exp ocaml-lex.automaton.resolved)))

(rule (alias ocaml-lex)
  (action (diff ocaml-lex.conflicts.exp ocaml-lex.conflicts)))

(rule (target ocaml-protoc.1.2.0-pb_parsing_parser.opp.out)
  (deps ocaml-protoc.1.2.0-pb_parsing_parser.mly)
  (action
    (with-outputs-to ocaml-protoc.1.2.0-pb_parsing_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocaml-protoc.1.2.0-pb_parsing_parser)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.opp.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.opp.out)))

(rule
  (targets ocaml-protoc.1.2.0-pb_parsing_parser.out
    ocaml-protoc.1.2.0-pb_parsing_parser.automaton
    ocaml-protoc.1.2.0-pb_parsing_parser.automaton.resolved
    ocaml-protoc.1.2.0-pb_parsing_parser.conflicts
    ocaml-protoc.1.2.0-pb_parsing_parser.timings)
  (deps ocaml-protoc.1.2.0-pb_parsing_parser.mly)
  (action
    (with-outputs-to ocaml-protoc.1.2.0-pb_parsing_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocaml-protoc.1.2.0-pb_parsing_parser.timings %{deps})))))

(rule (alias ocaml-protoc.1.2.0-pb_parsing_parser)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.out)))

(rule (alias ocaml-protoc.1.2.0-pb_parsing_parser)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.automaton.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.automaton)))

(rule (alias ocaml-protoc.1.2.0-pb_parsing_parser)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.automaton.resolved.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.automaton.resolved)))

(rule (alias ocaml-protoc.1.2.0-pb_parsing_parser)
  (action
    (diff ocaml-protoc.1.2.0-pb_parsing_parser.conflicts.exp
      ocaml-protoc.1.2.0-pb_parsing_parser.conflicts)))

(rule (target ocaml-test-Lex.opp.out) (deps ocaml-test-Lex.mly)
  (action
    (with-outputs-to ocaml-test-Lex.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocaml-test-Lex)
  (action (diff ocaml-test-Lex.opp.exp ocaml-test-Lex.opp.out)))

(rule
  (targets ocaml-test-Lex.out ocaml-test-Lex.automaton
    ocaml-test-Lex.automaton.resolved ocaml-test-Lex.conflicts
    ocaml-test-Lex.timings)
  (deps ocaml-test-Lex.mly)
  (action
    (with-outputs-to ocaml-test-Lex.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocaml-test-Lex.timings %{deps})))))

(rule (alias ocaml-test-Lex)
  (action (diff ocaml-test-Lex.exp ocaml-test-Lex.out)))

(rule (alias ocaml-test-Lex)
  (action (diff ocaml-test-Lex.automaton.exp ocaml-test-Lex.automaton)))

(rule (alias ocaml-test-Lex)
  (action
    (diff ocaml-test-Lex.automaton.resolved.exp
      ocaml-test-Lex.automaton.resolved)))

(rule (alias ocaml-test-Lex)
  (action (diff ocaml-test-Lex.conflicts.exp ocaml-test-Lex.conflicts)))

(rule (target ocaml-testasmcomp-cmm.opp.out) (deps ocaml-testasmcomp-cmm.mly)
  (action
    (with-outputs-to ocaml-testasmcomp-cmm.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocaml-testasmcomp-cmm)
  (action (diff ocaml-testasmcomp-cmm.opp.exp ocaml-testasmcomp-cmm.opp.out)))

(rule
  (targets ocaml-testasmcomp-cmm.out ocaml-testasmcomp-cmm.automaton
    ocaml-testasmcomp-cmm.automaton.resolved ocaml-testasmcomp-cmm.conflicts
    ocaml-testasmcomp-cmm.timings)
  (deps ocaml-testasmcomp-cmm.mly)
  (action
    (with-outputs-to ocaml-testasmcomp-cmm.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocaml-testasmcomp-cmm.timings %{deps})))))

(rule (alias ocaml-testasmcomp-cmm)
  (action (diff ocaml-testasmcomp-cmm.exp ocaml-testasmcomp-cmm.out)))

(rule (alias ocaml-testasmcomp-cmm)
  (action
    (diff ocaml-testasmcomp-cmm.automaton.exp
      ocaml-testasmcomp-cmm.automaton)))

(rule (alias ocaml-testasmcomp-cmm)
  (action
    (diff ocaml-testasmcomp-cmm.automaton.resolved.exp
      ocaml-testasmcomp-cmm.automaton.resolved)))

(rule (alias ocaml-testasmcomp-cmm)
  (action
    (diff ocaml-testasmcomp-cmm.conflicts.exp
      ocaml-testasmcomp-cmm.conflicts)))

(rule (target ocaml_lua_parser.opp.out) (deps ocaml_lua_parser.mly)
  (action
    (with-outputs-to ocaml_lua_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocaml_lua_parser)
  (action (diff ocaml_lua_parser.opp.exp ocaml_lua_parser.opp.out)))

(rule
  (targets ocaml_lua_parser.out ocaml_lua_parser.automaton
    ocaml_lua_parser.automaton.resolved ocaml_lua_parser.conflicts
    ocaml_lua_parser.timings)
  (deps ocaml_lua_parser.mly)
  (action
    (with-outputs-to ocaml_lua_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocaml_lua_parser.timings %{deps})))))

(rule (alias ocaml_lua_parser)
  (action (diff ocaml_lua_parser.exp ocaml_lua_parser.out)))

(rule (alias ocaml_lua_parser)
  (action (diff ocaml_lua_parser.automaton.exp ocaml_lua_parser.automaton)))

(rule (alias ocaml_lua_parser)
  (action
    (diff ocaml_lua_parser.automaton.resolved.exp
      ocaml_lua_parser.automaton.resolved)))

(rule (alias ocaml_lua_parser)
  (action (diff ocaml_lua_parser.conflicts.exp ocaml_lua_parser.conflicts)))

(rule (target ocaml_parser_menhir.opp.out) (deps ocaml_parser_menhir.mly)
  (action
    (with-outputs-to ocaml_parser_menhir.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:ocaml_parser_menhir.flags}
          %{deps})))))

(rule (alias ocaml_parser_menhir)
  (action (diff ocaml_parser_menhir.opp.exp ocaml_parser_menhir.opp.out)))

(rule
  (targets ocaml_parser_menhir.out ocaml_parser_menhir.automaton
    ocaml_parser_menhir.automaton.resolved ocaml_parser_menhir.conflicts
    ocaml_parser_menhir.timings)
  (deps ocaml_parser_menhir.mly)
  (action
    (with-outputs-to ocaml_parser_menhir.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocaml_parser_menhir.timings
          %{read-lines:ocaml_parser_menhir.flags} %{deps})))))

(rule (alias ocaml_parser_menhir)
  (action (diff ocaml_parser_menhir.exp ocaml_parser_menhir.out)))

(rule (alias ocaml_parser_menhir)
  (action
    (diff ocaml_parser_menhir.automaton.exp ocaml_parser_menhir.automaton)))

(rule (alias ocaml_parser_menhir)
  (action
    (diff ocaml_parser_menhir.automaton.resolved.exp
      ocaml_parser_menhir.automaton.resolved)))

(rule (alias ocaml_parser_menhir)
  (action
    (diff ocaml_parser_menhir.conflicts.exp ocaml_parser_menhir.conflicts)))

(rule (target ocamldoc-odoc.opp.out) (deps ocamldoc-odoc.mly)
  (action
    (with-outputs-to ocamldoc-odoc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocamldoc-odoc)
  (action (diff ocamldoc-odoc.opp.exp ocamldoc-odoc.opp.out)))

(rule
  (targets ocamldoc-odoc.out ocamldoc-odoc.automaton
    ocamldoc-odoc.automaton.resolved ocamldoc-odoc.conflicts
    ocamldoc-odoc.timings)
  (deps ocamldoc-odoc.mly)
  (action
    (with-outputs-to ocamldoc-odoc.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocamldoc-odoc.timings %{deps})))))

(rule (alias ocamldoc-odoc)
  (action (diff ocamldoc-odoc.exp ocamldoc-odoc.out)))

(rule (alias ocamldoc-odoc)
  (action (diff ocamldoc-odoc.automaton.exp ocamldoc-odoc.automaton)))

(rule (alias ocamldoc-odoc)
  (action
    (diff ocamldoc-odoc.automaton.resolved.exp
      ocamldoc-odoc.automaton.resolved)))

(rule (alias ocamldoc-odoc)
  (action (diff ocamldoc-odoc.conflicts.exp ocamldoc-odoc.conflicts)))

(rule (target ocamldoc-odoc_text.opp.out) (deps ocamldoc-odoc_text.mly)
  (action
    (with-outputs-to ocamldoc-odoc_text.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocamldoc-odoc_text)
  (action (diff ocamldoc-odoc_text.opp.exp ocamldoc-odoc_text.opp.out)))

(rule
  (targets ocamldoc-odoc_text.out ocamldoc-odoc_text.automaton
    ocamldoc-odoc_text.automaton.resolved ocamldoc-odoc_text.conflicts
    ocamldoc-odoc_text.timings)
  (deps ocamldoc-odoc_text.mly)
  (action
    (with-outputs-to ocamldoc-odoc_text.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocamldoc-odoc_text.timings %{deps})))))

(rule (alias ocamldoc-odoc_text)
  (action (diff ocamldoc-odoc_text.exp ocamldoc-odoc_text.out)))

(rule (alias ocamldoc-odoc_text)
  (action
    (diff ocamldoc-odoc_text.automaton.exp ocamldoc-odoc_text.automaton)))

(rule (alias ocamldoc-odoc_text)
  (action
    (diff ocamldoc-odoc_text.automaton.resolved.exp
      ocamldoc-odoc_text.automaton.resolved)))

(rule (alias ocamldoc-odoc_text)
  (action
    (diff ocamldoc-odoc_text.conflicts.exp ocamldoc-odoc_text.conflicts)))

(rule (target ocamlweb-yacc.opp.out) (deps ocamlweb-yacc.mly)
  (action
    (with-outputs-to ocamlweb-yacc.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocamlweb-yacc)
  (action (diff ocamlweb-yacc.opp.exp ocamlweb-yacc.opp.out)))

(rule
  (targets ocamlweb-yacc.out ocamlweb-yacc.automaton
    ocamlweb-yacc.automaton.resolved ocamlweb-yacc.conflicts
    ocamlweb-yacc.timings)
  (deps ocamlweb-yacc.mly)
  (action
    (with-outputs-to ocamlweb-yacc.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocamlweb-yacc.timings %{deps})))))

(rule (alias ocamlweb-yacc)
  (action (diff ocamlweb-yacc.exp ocamlweb-yacc.out)))

(rule (alias ocamlweb-yacc)
  (action (diff ocamlweb-yacc.automaton.exp ocamlweb-yacc.automaton)))

(rule (alias ocamlweb-yacc)
  (action
    (diff ocamlweb-yacc.automaton.resolved.exp
      ocamlweb-yacc.automaton.resolved)))

(rule (alias ocamlweb-yacc)
  (action (diff ocamlweb-yacc.conflicts.exp ocamlweb-yacc.conflicts)))

(rule (target ocapic.3.3-parser.opp.out) (deps ocapic.3.3-parser.mly)
  (action
    (with-outputs-to ocapic.3.3-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ocapic.3.3-parser)
  (action (diff ocapic.3.3-parser.opp.exp ocapic.3.3-parser.opp.out)))

(rule
  (targets ocapic.3.3-parser.out ocapic.3.3-parser.automaton
    ocapic.3.3-parser.automaton.resolved ocapic.3.3-parser.conflicts
    ocapic.3.3-parser.timings)
  (deps ocapic.3.3-parser.mly)
  (action
    (with-outputs-to ocapic.3.3-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ocapic.3.3-parser.timings %{deps})))))

(rule (alias ocapic.3.3-parser)
  (action (diff ocapic.3.3-parser.exp ocapic.3.3-parser.out)))

(rule (alias ocapic.3.3-parser)
  (action (diff ocapic.3.3-parser.automaton.exp ocapic.3.3-parser.automaton)))

(rule (alias ocapic.3.3-parser)
  (action
    (diff ocapic.3.3-parser.automaton.resolved.exp
      ocapic.3.3-parser.automaton.resolved)))

(rule (alias ocapic.3.3-parser)
  (action (diff ocapic.3.3-parser.conflicts.exp ocapic.3.3-parser.conflicts)))

(rule (target oclisp.opp.out) (deps oclisp.mly)
  (action
    (with-outputs-to oclisp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias oclisp) (action (diff oclisp.opp.exp oclisp.opp.out)))

(rule
  (targets oclisp.out oclisp.automaton oclisp.automaton.resolved
    oclisp.conflicts oclisp.timings)
  (deps oclisp.mly)
  (action
    (with-outputs-to oclisp.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to oclisp.timings %{deps})))))

(rule (alias oclisp) (action (diff oclisp.exp oclisp.out)))

(rule (alias oclisp) (action (diff oclisp.automaton.exp oclisp.automaton)))

(rule (alias oclisp)
  (action (diff oclisp.automaton.resolved.exp oclisp.automaton.resolved)))

(rule (alias oclisp) (action (diff oclisp.conflicts.exp oclisp.conflicts)))

(rule (target octavius.1.2.0-octParser.opp.out)
  (deps octavius.1.2.0-octParser.mly)
  (action
    (with-outputs-to octavius.1.2.0-octParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias octavius.1.2.0-octParser)
  (action
    (diff octavius.1.2.0-octParser.opp.exp octavius.1.2.0-octParser.opp.out)))

(rule
  (targets octavius.1.2.0-octParser.out octavius.1.2.0-octParser.automaton
    octavius.1.2.0-octParser.automaton.resolved
    octavius.1.2.0-octParser.conflicts octavius.1.2.0-octParser.timings)
  (deps octavius.1.2.0-octParser.mly)
  (action
    (with-outputs-to octavius.1.2.0-octParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to octavius.1.2.0-octParser.timings %{deps})))))

(rule (alias octavius.1.2.0-octParser)
  (action (diff octavius.1.2.0-octParser.exp octavius.1.2.0-octParser.out)))

(rule (alias octavius.1.2.0-octParser)
  (action
    (diff octavius.1.2.0-octParser.automaton.exp
      octavius.1.2.0-octParser.automaton)))

(rule (alias octavius.1.2.0-octParser)
  (action
    (diff octavius.1.2.0-octParser.automaton.resolved.exp
      octavius.1.2.0-octParser.automaton.resolved)))

(rule (alias octavius.1.2.0-octParser)
  (action
    (diff octavius.1.2.0-octParser.conflicts.exp
      octavius.1.2.0-octParser.conflicts)))

(rule (target odds.1.0-parser.opp.out) (deps odds.1.0-parser.mly)
  (action
    (with-outputs-to odds.1.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias odds.1.0-parser)
  (action (diff odds.1.0-parser.opp.exp odds.1.0-parser.opp.out)))

(rule
  (targets odds.1.0-parser.out odds.1.0-parser.automaton
    odds.1.0-parser.automaton.resolved odds.1.0-parser.conflicts
    odds.1.0-parser.timings)
  (deps odds.1.0-parser.mly)
  (action
    (with-outputs-to odds.1.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to odds.1.0-parser.timings %{deps})))))

(rule (alias odds.1.0-parser)
  (action (diff odds.1.0-parser.exp odds.1.0-parser.out)))

(rule (alias odds.1.0-parser)
  (action (diff odds.1.0-parser.automaton.exp odds.1.0-parser.automaton)))

(rule (alias odds.1.0-parser)
  (action
    (diff odds.1.0-parser.automaton.resolved.exp
      odds.1.0-parser.automaton.resolved)))

(rule (alias odds.1.0-parser)
  (action (diff odds.1.0-parser.conflicts.exp odds.1.0-parser.conflicts)))

(rule (target oflux.opp.out) (deps oflux.mly)
  (action
    (with-outputs-to oflux.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias oflux) (action (diff oflux.opp.exp oflux.opp.out)))

(rule
  (targets oflux.out oflux.automaton oflux.automaton.resolved oflux.conflicts
    oflux.timings)
  (deps oflux.mly)
  (action
    (with-outputs-to oflux.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to oflux.timings %{deps})))))

(rule (alias oflux) (action (diff oflux.exp oflux.out)))

(rule (alias oflux) (action (diff oflux.automaton.exp oflux.automaton)))

(rule (alias oflux)
  (action (diff oflux.automaton.resolved.exp oflux.automaton.resolved)))

(rule (alias oflux) (action (diff oflux.conflicts.exp oflux.conflicts)))

(rule (target ojacare.opp.out) (deps ojacare.mly)
  (action
    (with-outputs-to ojacare.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ojacare) (action (diff ojacare.opp.exp ojacare.opp.out)))

(rule
  (targets ojacare.out ojacare.automaton ojacare.automaton.resolved
    ojacare.conflicts ojacare.timings)
  (deps ojacare.mly)
  (action
    (with-outputs-to ojacare.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ojacare.timings %{deps})))))

(rule (alias ojacare) (action (diff ojacare.exp ojacare.out)))

(rule (alias ojacare)
  (action (diff ojacare.automaton.exp ojacare.automaton)))

(rule (alias ojacare)
  (action (diff ojacare.automaton.resolved.exp ojacare.automaton.resolved)))

(rule (alias ojacare)
  (action (diff ojacare.conflicts.exp ojacare.conflicts)))

(rule (target ollvm.0.99-ollvm_parser.opp.out)
  (deps ollvm.0.99-ollvm_parser.mly)
  (action
    (with-outputs-to ollvm.0.99-ollvm_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ollvm.0.99-ollvm_parser)
  (action
    (diff ollvm.0.99-ollvm_parser.opp.exp ollvm.0.99-ollvm_parser.opp.out)))

(rule
  (targets ollvm.0.99-ollvm_parser.out ollvm.0.99-ollvm_parser.automaton
    ollvm.0.99-ollvm_parser.automaton.resolved
    ollvm.0.99-ollvm_parser.conflicts ollvm.0.99-ollvm_parser.timings)
  (deps ollvm.0.99-ollvm_parser.mly)
  (action
    (with-outputs-to ollvm.0.99-ollvm_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ollvm.0.99-ollvm_parser.timings %{deps})))))

(rule (alias ollvm.0.99-ollvm_parser)
  (action (diff ollvm.0.99-ollvm_parser.exp ollvm.0.99-ollvm_parser.out)))

(rule (alias ollvm.0.99-ollvm_parser)
  (action
    (diff ollvm.0.99-ollvm_parser.automaton.exp
      ollvm.0.99-ollvm_parser.automaton)))

(rule (alias ollvm.0.99-ollvm_parser)
  (action
    (diff ollvm.0.99-ollvm_parser.automaton.resolved.exp
      ollvm.0.99-ollvm_parser.automaton.resolved)))

(rule (alias ollvm.0.99-ollvm_parser)
  (action
    (diff ollvm.0.99-ollvm_parser.conflicts.exp
      ollvm.0.99-ollvm_parser.conflicts)))

(rule (target omake.0.9.8.7-omake_shell_parse.opp.out)
  (deps omake.0.9.8.7-omake_shell_parse.mly)
  (action
    (with-outputs-to omake.0.9.8.7-omake_shell_parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias omake.0.9.8.7-omake_shell_parse)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.opp.exp
      omake.0.9.8.7-omake_shell_parse.opp.out)))

(rule
  (targets omake.0.9.8.7-omake_shell_parse.out
    omake.0.9.8.7-omake_shell_parse.automaton
    omake.0.9.8.7-omake_shell_parse.automaton.resolved
    omake.0.9.8.7-omake_shell_parse.conflicts
    omake.0.9.8.7-omake_shell_parse.timings)
  (deps omake.0.9.8.7-omake_shell_parse.mly)
  (action
    (with-outputs-to omake.0.9.8.7-omake_shell_parse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to omake.0.9.8.7-omake_shell_parse.timings %{deps})))))

(rule (alias omake.0.9.8.7-omake_shell_parse)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.exp
      omake.0.9.8.7-omake_shell_parse.out)))

(rule (alias omake.0.9.8.7-omake_shell_parse)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.automaton.exp
      omake.0.9.8.7-omake_shell_parse.automaton)))

(rule (alias omake.0.9.8.7-omake_shell_parse)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.automaton.resolved.exp
      omake.0.9.8.7-omake_shell_parse.automaton.resolved)))

(rule (alias omake.0.9.8.7-omake_shell_parse)
  (action
    (diff omake.0.9.8.7-omake_shell_parse.conflicts.exp
      omake.0.9.8.7-omake_shell_parse.conflicts)))

(rule (target omake_ast_parse.opp.out) (deps omake_ast_parse.mly)
  (action
    (with-outputs-to omake_ast_parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias omake_ast_parse)
  (action (diff omake_ast_parse.opp.exp omake_ast_parse.opp.out)))

(rule
  (targets omake_ast_parse.out omake_ast_parse.automaton
    omake_ast_parse.automaton.resolved omake_ast_parse.conflicts
    omake_ast_parse.timings)
  (deps omake_ast_parse.mly)
  (action
    (with-outputs-to omake_ast_parse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to omake_ast_parse.timings %{deps})))))

(rule (alias omake_ast_parse)
  (action (diff omake_ast_parse.exp omake_ast_parse.out)))

(rule (alias omake_ast_parse)
  (action (diff omake_ast_parse.automaton.exp omake_ast_parse.automaton)))

(rule (alias omake_ast_parse)
  (action
    (diff omake_ast_parse.automaton.resolved.exp
      omake_ast_parse.automaton.resolved)))

(rule (alias omake_ast_parse)
  (action (diff omake_ast_parse.conflicts.exp omake_ast_parse.conflicts)))

(rule (target omake_shell_parse.opp.out) (deps omake_shell_parse.mly)
  (action
    (with-outputs-to omake_shell_parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias omake_shell_parse)
  (action (diff omake_shell_parse.opp.exp omake_shell_parse.opp.out)))

(rule
  (targets omake_shell_parse.out omake_shell_parse.automaton
    omake_shell_parse.automaton.resolved omake_shell_parse.conflicts
    omake_shell_parse.timings)
  (deps omake_shell_parse.mly)
  (action
    (with-outputs-to omake_shell_parse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to omake_shell_parse.timings %{deps})))))

(rule (alias omake_shell_parse)
  (action (diff omake_shell_parse.exp omake_shell_parse.out)))

(rule (alias omake_shell_parse)
  (action (diff omake_shell_parse.automaton.exp omake_shell_parse.automaton)))

(rule (alias omake_shell_parse)
  (action
    (diff omake_shell_parse.automaton.resolved.exp
      omake_shell_parse.automaton.resolved)))

(rule (alias omake_shell_parse)
  (action (diff omake_shell_parse.conflicts.exp omake_shell_parse.conflicts)))

(rule (target on-error-reduce-inlined.opp.out)
  (deps on-error-reduce-inlined.mly)
  (action
    (with-outputs-to on-error-reduce-inlined.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias on-error-reduce-inlined)
  (action
    (diff on-error-reduce-inlined.opp.exp on-error-reduce-inlined.opp.out)))

(rule
  (targets on-error-reduce-inlined.out on-error-reduce-inlined.automaton
    on-error-reduce-inlined.automaton.resolved
    on-error-reduce-inlined.conflicts on-error-reduce-inlined.timings)
  (deps on-error-reduce-inlined.mly)
  (action
    (with-outputs-to on-error-reduce-inlined.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to on-error-reduce-inlined.timings %{deps})))))

(rule (alias on-error-reduce-inlined)
  (action (diff on-error-reduce-inlined.exp on-error-reduce-inlined.out)))

(rule (alias on-error-reduce-inlined)
  (action
    (diff on-error-reduce-inlined.automaton.exp
      on-error-reduce-inlined.automaton)))

(rule (alias on-error-reduce-inlined)
  (action
    (diff on-error-reduce-inlined.automaton.resolved.exp
      on-error-reduce-inlined.automaton.resolved)))

(rule (alias on-error-reduce-inlined)
  (action
    (diff on-error-reduce-inlined.conflicts.exp
      on-error-reduce-inlined.conflicts)))

(rule (target on-error-reduce-unreachable.opp.out)
  (deps on-error-reduce-unreachable.mly)
  (action
    (with-outputs-to on-error-reduce-unreachable.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias on-error-reduce-unreachable)
  (action
    (diff on-error-reduce-unreachable.opp.exp
      on-error-reduce-unreachable.opp.out)))

(rule
  (targets on-error-reduce-unreachable.out
    on-error-reduce-unreachable.automaton
    on-error-reduce-unreachable.automaton.resolved
    on-error-reduce-unreachable.conflicts
    on-error-reduce-unreachable.timings)
  (deps on-error-reduce-unreachable.mly)
  (action
    (with-outputs-to on-error-reduce-unreachable.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to on-error-reduce-unreachable.timings %{deps})))))

(rule (alias on-error-reduce-unreachable)
  (action
    (diff on-error-reduce-unreachable.exp on-error-reduce-unreachable.out)))

(rule (alias on-error-reduce-unreachable)
  (action
    (diff on-error-reduce-unreachable.automaton.exp
      on-error-reduce-unreachable.automaton)))

(rule (alias on-error-reduce-unreachable)
  (action
    (diff on-error-reduce-unreachable.automaton.resolved.exp
      on-error-reduce-unreachable.automaton.resolved)))

(rule (alias on-error-reduce-unreachable)
  (action
    (diff on-error-reduce-unreachable.conflicts.exp
      on-error-reduce-unreachable.conflicts)))

(rule (target opam-doc.0.9.3-info_parser.opp.out)
  (deps opam-doc.0.9.3-info_parser.mly)
  (action
    (with-outputs-to opam-doc.0.9.3-info_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias opam-doc.0.9.3-info_parser)
  (action
    (diff opam-doc.0.9.3-info_parser.opp.exp
      opam-doc.0.9.3-info_parser.opp.out)))

(rule
  (targets opam-doc.0.9.3-info_parser.out
    opam-doc.0.9.3-info_parser.automaton
    opam-doc.0.9.3-info_parser.automaton.resolved
    opam-doc.0.9.3-info_parser.conflicts opam-doc.0.9.3-info_parser.timings)
  (deps opam-doc.0.9.3-info_parser.mly)
  (action
    (with-outputs-to opam-doc.0.9.3-info_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to opam-doc.0.9.3-info_parser.timings %{deps})))))

(rule (alias opam-doc.0.9.3-info_parser)
  (action
    (diff opam-doc.0.9.3-info_parser.exp opam-doc.0.9.3-info_parser.out)))

(rule (alias opam-doc.0.9.3-info_parser)
  (action
    (diff opam-doc.0.9.3-info_parser.automaton.exp
      opam-doc.0.9.3-info_parser.automaton)))

(rule (alias opam-doc.0.9.3-info_parser)
  (action
    (diff opam-doc.0.9.3-info_parser.automaton.resolved.exp
      opam-doc.0.9.3-info_parser.automaton.resolved)))

(rule (alias opam-doc.0.9.3-info_parser)
  (action
    (diff opam-doc.0.9.3-info_parser.conflicts.exp
      opam-doc.0.9.3-info_parser.conflicts)))

(rule (target option2.opp.out) (deps option2.mly)
  (action
    (with-outputs-to option2.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias option2) (action (diff option2.opp.exp option2.opp.out)))

(rule
  (targets option2.out option2.automaton option2.automaton.resolved
    option2.conflicts option2.timings)
  (deps option2.mly)
  (action
    (with-outputs-to option2.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to option2.timings %{deps})))))

(rule (alias option2) (action (diff option2.exp option2.out)))

(rule (alias option2)
  (action (diff option2.automaton.exp option2.automaton)))

(rule (alias option2)
  (action (diff option2.automaton.resolved.exp option2.automaton.resolved)))

(rule (alias option2)
  (action (diff option2.conflicts.exp option2.conflicts)))

(rule (target options.opp.out) (deps options.mly)
  (action
    (with-outputs-to options.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias options) (action (diff options.opp.exp options.opp.out)))

(rule
  (targets options.out options.automaton options.automaton.resolved
    options.conflicts options.timings)
  (deps options.mly)
  (action
    (with-outputs-to options.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to options.timings %{deps})))))

(rule (alias options) (action (diff options.exp options.out)))

(rule (alias options)
  (action (diff options.automaton.exp options.automaton)))

(rule (alias options)
  (action (diff options.automaton.resolved.exp options.automaton.resolved)))

(rule (alias options)
  (action (diff options.conflicts.exp options.conflicts)))

(rule (target orpie.1.6.0-txtin_parser.opp.out)
  (deps orpie.1.6.0-txtin_parser.mly)
  (action
    (with-outputs-to orpie.1.6.0-txtin_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias orpie.1.6.0-txtin_parser)
  (action
    (diff orpie.1.6.0-txtin_parser.opp.exp orpie.1.6.0-txtin_parser.opp.out)))

(rule
  (targets orpie.1.6.0-txtin_parser.out orpie.1.6.0-txtin_parser.automaton
    orpie.1.6.0-txtin_parser.automaton.resolved
    orpie.1.6.0-txtin_parser.conflicts orpie.1.6.0-txtin_parser.timings)
  (deps orpie.1.6.0-txtin_parser.mly)
  (action
    (with-outputs-to orpie.1.6.0-txtin_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to orpie.1.6.0-txtin_parser.timings %{deps})))))

(rule (alias orpie.1.6.0-txtin_parser)
  (action (diff orpie.1.6.0-txtin_parser.exp orpie.1.6.0-txtin_parser.out)))

(rule (alias orpie.1.6.0-txtin_parser)
  (action
    (diff orpie.1.6.0-txtin_parser.automaton.exp
      orpie.1.6.0-txtin_parser.automaton)))

(rule (alias orpie.1.6.0-txtin_parser)
  (action
    (diff orpie.1.6.0-txtin_parser.automaton.resolved.exp
      orpie.1.6.0-txtin_parser.automaton.resolved)))

(rule (alias orpie.1.6.0-txtin_parser)
  (action
    (diff orpie.1.6.0-txtin_parser.conflicts.exp
      orpie.1.6.0-txtin_parser.conflicts)))

(rule (target osdp.0.6.0-pa_parser.opp.out) (deps osdp.0.6.0-pa_parser.mly)
  (action
    (with-outputs-to osdp.0.6.0-pa_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias osdp.0.6.0-pa_parser)
  (action (diff osdp.0.6.0-pa_parser.opp.exp osdp.0.6.0-pa_parser.opp.out)))

(rule
  (targets osdp.0.6.0-pa_parser.out osdp.0.6.0-pa_parser.automaton
    osdp.0.6.0-pa_parser.automaton.resolved osdp.0.6.0-pa_parser.conflicts
    osdp.0.6.0-pa_parser.timings)
  (deps osdp.0.6.0-pa_parser.mly)
  (action
    (with-outputs-to osdp.0.6.0-pa_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to osdp.0.6.0-pa_parser.timings %{deps})))))

(rule (alias osdp.0.6.0-pa_parser)
  (action (diff osdp.0.6.0-pa_parser.exp osdp.0.6.0-pa_parser.out)))

(rule (alias osdp.0.6.0-pa_parser)
  (action
    (diff osdp.0.6.0-pa_parser.automaton.exp osdp.0.6.0-pa_parser.automaton)))

(rule (alias osdp.0.6.0-pa_parser)
  (action
    (diff osdp.0.6.0-pa_parser.automaton.resolved.exp
      osdp.0.6.0-pa_parser.automaton.resolved)))

(rule (alias osdp.0.6.0-pa_parser)
  (action
    (diff osdp.0.6.0-pa_parser.conflicts.exp osdp.0.6.0-pa_parser.conflicts)))

(rule (target pager.opp.out) (deps pager.mly)
  (action
    (with-outputs-to pager.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias pager) (action (diff pager.opp.exp pager.opp.out)))

(rule
  (targets pager.out pager.automaton pager.automaton.resolved pager.conflicts
    pager.timings)
  (deps pager.mly)
  (action
    (with-outputs-to pager.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to pager.timings %{deps})))))

(rule (alias pager) (action (diff pager.exp pager.out)))

(rule (alias pager) (action (diff pager.automaton.exp pager.automaton)))

(rule (alias pager)
  (action (diff pager.automaton.resolved.exp pager.automaton.resolved)))

(rule (alias pager) (action (diff pager.conflicts.exp pager.conflicts)))

(rule (target pair-new-syntax.opp.out) (deps pair-new-syntax.mly)
  (action
    (with-outputs-to pair-new-syntax.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias pair-new-syntax)
  (action (diff pair-new-syntax.opp.exp pair-new-syntax.opp.out)))

(rule
  (targets pair-new-syntax.out pair-new-syntax.automaton
    pair-new-syntax.automaton.resolved pair-new-syntax.conflicts
    pair-new-syntax.timings)
  (deps pair-new-syntax.mly)
  (action
    (with-outputs-to pair-new-syntax.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to pair-new-syntax.timings %{deps})))))

(rule (alias pair-new-syntax)
  (action (diff pair-new-syntax.exp pair-new-syntax.out)))

(rule (alias pair-new-syntax)
  (action (diff pair-new-syntax.automaton.exp pair-new-syntax.automaton)))

(rule (alias pair-new-syntax)
  (action
    (diff pair-new-syntax.automaton.resolved.exp
      pair-new-syntax.automaton.resolved)))

(rule (alias pair-new-syntax)
  (action (diff pair-new-syntax.conflicts.exp pair-new-syntax.conflicts)))

(rule (target parameterized-nonterminal.opp.out)
  (deps parameterized-nonterminal.mly)
  (action
    (with-outputs-to parameterized-nonterminal.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias parameterized-nonterminal)
  (action
    (diff parameterized-nonterminal.opp.exp
      parameterized-nonterminal.opp.out)))

(rule
  (targets parameterized-nonterminal.out parameterized-nonterminal.automaton
    parameterized-nonterminal.automaton.resolved
    parameterized-nonterminal.conflicts parameterized-nonterminal.timings)
  (deps parameterized-nonterminal.mly)
  (action
    (with-outputs-to parameterized-nonterminal.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to parameterized-nonterminal.timings %{deps})))))

(rule (alias parameterized-nonterminal)
  (action (diff parameterized-nonterminal.exp parameterized-nonterminal.out)))

(rule (alias parameterized-nonterminal)
  (action
    (diff parameterized-nonterminal.automaton.exp
      parameterized-nonterminal.automaton)))

(rule (alias parameterized-nonterminal)
  (action
    (diff parameterized-nonterminal.automaton.resolved.exp
      parameterized-nonterminal.automaton.resolved)))

(rule (alias parameterized-nonterminal)
  (action
    (diff parameterized-nonterminal.conflicts.exp
      parameterized-nonterminal.conflicts)))

(rule (target parse_xquery.opp.out) (deps parse_xquery.mly)
  (action
    (with-outputs-to parse_xquery.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias parse_xquery)
  (action (diff parse_xquery.opp.exp parse_xquery.opp.out)))

(rule
  (targets parse_xquery.out parse_xquery.automaton
    parse_xquery.automaton.resolved parse_xquery.conflicts
    parse_xquery.timings)
  (deps parse_xquery.mly)
  (action
    (with-outputs-to parse_xquery.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to parse_xquery.timings %{deps})))))

(rule (alias parse_xquery) (action (diff parse_xquery.exp parse_xquery.out)))

(rule (alias parse_xquery)
  (action (diff parse_xquery.automaton.exp parse_xquery.automaton)))

(rule (alias parse_xquery)
  (action
    (diff parse_xquery.automaton.resolved.exp
      parse_xquery.automaton.resolved)))

(rule (alias parse_xquery)
  (action (diff parse_xquery.conflicts.exp parse_xquery.conflicts)))

(rule (target parser_cocci_menhir.opp.out) (deps parser_cocci_menhir.mly)
  (action
    (with-outputs-to parser_cocci_menhir.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias parser_cocci_menhir)
  (action (diff parser_cocci_menhir.opp.exp parser_cocci_menhir.opp.out)))

(rule
  (targets parser_cocci_menhir.out parser_cocci_menhir.automaton
    parser_cocci_menhir.automaton.resolved parser_cocci_menhir.conflicts
    parser_cocci_menhir.timings)
  (deps parser_cocci_menhir.mly)
  (action
    (with-outputs-to parser_cocci_menhir.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to parser_cocci_menhir.timings %{deps})))))

(rule (alias parser_cocci_menhir)
  (action (diff parser_cocci_menhir.exp parser_cocci_menhir.out)))

(rule (alias parser_cocci_menhir)
  (action
    (diff parser_cocci_menhir.automaton.exp parser_cocci_menhir.automaton)))

(rule (alias parser_cocci_menhir)
  (action
    (diff parser_cocci_menhir.automaton.resolved.exp
      parser_cocci_menhir.automaton.resolved)))

(rule (alias parser_cocci_menhir)
  (action
    (diff parser_cocci_menhir.conflicts.exp parser_cocci_menhir.conflicts)))

(rule (target parser_cpp.opp.out) (deps parser_cpp.mly)
  (action
    (with-outputs-to parser_cpp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias parser_cpp)
  (action (diff parser_cpp.opp.exp parser_cpp.opp.out)))

(rule
  (targets parser_cpp.out parser_cpp.automaton parser_cpp.automaton.resolved
    parser_cpp.conflicts parser_cpp.timings)
  (deps parser_cpp.mly)
  (action
    (with-outputs-to parser_cpp.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to parser_cpp.timings %{deps})))))

(rule (alias parser_cpp) (action (diff parser_cpp.exp parser_cpp.out)))

(rule (alias parser_cpp)
  (action (diff parser_cpp.automaton.exp parser_cpp.automaton)))

(rule (alias parser_cpp)
  (action
    (diff parser_cpp.automaton.resolved.exp parser_cpp.automaton.resolved)))

(rule (alias parser_cpp)
  (action (diff parser_cpp.conflicts.exp parser_cpp.conflicts)))

(rule (target parser_css.opp.out) (deps parser_css.mly)
  (action
    (with-outputs-to parser_css.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias parser_css)
  (action (diff parser_css.opp.exp parser_css.opp.out)))

(rule
  (targets parser_css.out parser_css.automaton parser_css.automaton.resolved
    parser_css.conflicts parser_css.timings)
  (deps parser_css.mly)
  (action
    (with-outputs-to parser_css.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to parser_css.timings %{deps})))))

(rule (alias parser_css) (action (diff parser_css.exp parser_css.out)))

(rule (alias parser_css)
  (action (diff parser_css.automaton.exp parser_css.automaton)))

(rule (alias parser_css)
  (action
    (diff parser_css.automaton.resolved.exp parser_css.automaton.resolved)))

(rule (alias parser_css)
  (action (diff parser_css.conflicts.exp parser_css.conflicts)))

(rule (target parser_java.opp.out) (deps parser_java.mly)
  (action
    (with-outputs-to parser_java.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias parser_java)
  (action (diff parser_java.opp.exp parser_java.opp.out)))

(rule
  (targets parser_java.out parser_java.automaton
    parser_java.automaton.resolved parser_java.conflicts parser_java.timings)
  (deps parser_java.mly)
  (action
    (with-outputs-to parser_java.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to parser_java.timings %{deps})))))

(rule (alias parser_java) (action (diff parser_java.exp parser_java.out)))

(rule (alias parser_java)
  (action (diff parser_java.automaton.exp parser_java.automaton)))

(rule (alias parser_java)
  (action
    (diff parser_java.automaton.resolved.exp parser_java.automaton.resolved)))

(rule (alias parser_java)
  (action (diff parser_java.conflicts.exp parser_java.conflicts)))

(rule (target parser_js.opp.out) (deps parser_js.mly)
  (action
    (with-outputs-to parser_js.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias parser_js) (action (diff parser_js.opp.exp parser_js.opp.out)))

(rule
  (targets parser_js.out parser_js.automaton parser_js.automaton.resolved
    parser_js.conflicts parser_js.timings)
  (deps parser_js.mly)
  (action
    (with-outputs-to parser_js.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to parser_js.timings %{deps})))))

(rule (alias parser_js) (action (diff parser_js.exp parser_js.out)))

(rule (alias parser_js)
  (action (diff parser_js.automaton.exp parser_js.automaton)))

(rule (alias parser_js)
  (action
    (diff parser_js.automaton.resolved.exp parser_js.automaton.resolved)))

(rule (alias parser_js)
  (action (diff parser_js.conflicts.exp parser_js.conflicts)))

(rule (target parser_php.opp.out) (deps parser_php.mly)
  (action
    (with-outputs-to parser_php.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias parser_php)
  (action (diff parser_php.opp.exp parser_php.opp.out)))

(rule
  (targets parser_php.out parser_php.automaton parser_php.automaton.resolved
    parser_php.conflicts parser_php.timings)
  (deps parser_php.mly)
  (action
    (with-outputs-to parser_php.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to parser_php.timings %{deps})))))

(rule (alias parser_php) (action (diff parser_php.exp parser_php.out)))

(rule (alias parser_php)
  (action (diff parser_php.automaton.exp parser_php.automaton)))

(rule (alias parser_php)
  (action
    (diff parser_php.automaton.resolved.exp parser_php.automaton.resolved)))

(rule (alias parser_php)
  (action (diff parser_php.conflicts.exp parser_php.conflicts)))

(rule (target parser_raw.opp.out) (deps parser_raw.mly)
  (action
    (with-outputs-to parser_raw.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias parser_raw)
  (action (diff parser_raw.opp.exp parser_raw.opp.out)))

(rule
  (targets parser_raw.out parser_raw.automaton parser_raw.automaton.resolved
    parser_raw.conflicts parser_raw.timings)
  (deps parser_raw.mly)
  (action
    (with-outputs-to parser_raw.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to parser_raw.timings %{deps})))))

(rule (alias parser_raw) (action (diff parser_raw.exp parser_raw.out)))

(rule (alias parser_raw)
  (action (diff parser_raw.automaton.exp parser_raw.automaton)))

(rule (alias parser_raw)
  (action
    (diff parser_raw.automaton.resolved.exp parser_raw.automaton.resolved)))

(rule (alias parser_raw)
  (action (diff parser_raw.conflicts.exp parser_raw.conflicts)))

(rule (target partest.opp.out) (deps partest.mly)
  (action
    (with-outputs-to partest.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias partest) (action (diff partest.opp.exp partest.opp.out)))

(rule
  (targets partest.out partest.automaton partest.automaton.resolved
    partest.conflicts partest.timings)
  (deps partest.mly)
  (action
    (with-outputs-to partest.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to partest.timings %{deps})))))

(rule (alias partest) (action (diff partest.exp partest.out)))

(rule (alias partest)
  (action (diff partest.automaton.exp partest.automaton)))

(rule (alias partest)
  (action (diff partest.automaton.resolved.exp partest.automaton.resolved)))

(rule (alias partest)
  (action (diff partest.conflicts.exp partest.conflicts)))

(rule (target permutation.opp.out) (deps permutation.mly)
  (action
    (with-outputs-to permutation.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias permutation)
  (action (diff permutation.opp.exp permutation.opp.out)))

(rule
  (targets permutation.out permutation.automaton
    permutation.automaton.resolved permutation.conflicts permutation.timings)
  (deps permutation.mly)
  (action
    (with-outputs-to permutation.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to permutation.timings %{deps})))))

(rule (alias permutation) (action (diff permutation.exp permutation.out)))

(rule (alias permutation)
  (action (diff permutation.automaton.exp permutation.automaton)))

(rule (alias permutation)
  (action
    (diff permutation.automaton.resolved.exp permutation.automaton.resolved)))

(rule (alias permutation)
  (action (diff permutation.conflicts.exp permutation.conflicts)))

(rule (target permutation-growth.opp.out) (deps permutation-growth.mly)
  (action
    (with-outputs-to permutation-growth.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias permutation-growth)
  (action (diff permutation-growth.opp.exp permutation-growth.opp.out)))

(rule
  (targets permutation-growth.out permutation-growth.automaton
    permutation-growth.automaton.resolved permutation-growth.conflicts
    permutation-growth.timings)
  (deps permutation-growth.mly)
  (action
    (with-outputs-to permutation-growth.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to permutation-growth.timings %{deps})))))

(rule (alias permutation-growth)
  (action (diff permutation-growth.exp permutation-growth.out)))

(rule (alias permutation-growth)
  (action
    (diff permutation-growth.automaton.exp permutation-growth.automaton)))

(rule (alias permutation-growth)
  (action
    (diff permutation-growth.automaton.resolved.exp
      permutation-growth.automaton.resolved)))

(rule (alias permutation-growth)
  (action
    (diff permutation-growth.conflicts.exp permutation-growth.conflicts)))

(rule (target petit-1.opp.out) (deps petit-1.mly petit-2.mly)
  (action
    (with-outputs-to petit-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base petit-1 --only-preprocess %{deps})))))

(rule (alias petit-1) (action (diff petit-1.opp.exp petit-1.opp.out)))

(rule
  (targets petit-1.out petit-1.automaton petit-1.automaton.resolved
    petit-1.conflicts petit-1.timings)
  (deps petit-1.mly petit-2.mly)
  (action
    (with-outputs-to petit-1.out
      (with-accepted-exit-codes 0
        (run menhir --base petit-1 --dump --dump-resolved --explain -lg 2 -la
          2 -lc 2 --timings-to petit-1.timings %{deps})))))

(rule (alias petit-1) (action (diff petit-1.exp petit-1.out)))

(rule (alias petit-1)
  (action (diff petit-1.automaton.exp petit-1.automaton)))

(rule (alias petit-1)
  (action (diff petit-1.automaton.resolved.exp petit-1.automaton.resolved)))

(rule (alias petit-1)
  (action (diff petit-1.conflicts.exp petit-1.conflicts)))

(rule (target petr4.opp.out) (deps petr4.mly)
  (action
    (with-outputs-to petr4.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias petr4) (action (diff petr4.opp.exp petr4.opp.out)))

(rule
  (targets petr4.out petr4.automaton petr4.automaton.resolved petr4.conflicts
    petr4.timings)
  (deps petr4.mly)
  (action
    (with-outputs-to petr4.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to petr4.timings %{deps})))))

(rule (alias petr4) (action (diff petr4.exp petr4.out)))

(rule (alias petr4) (action (diff petr4.automaton.exp petr4.automaton)))

(rule (alias petr4)
  (action (diff petr4.automaton.resolved.exp petr4.automaton.resolved)))

(rule (alias petr4) (action (diff petr4.conflicts.exp petr4.conflicts)))

(rule (target photos.opp.out) (deps photos.mly)
  (action
    (with-outputs-to photos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias photos) (action (diff photos.opp.exp photos.opp.out)))

(rule
  (targets photos.out photos.automaton photos.automaton.resolved
    photos.conflicts photos.timings)
  (deps photos.mly)
  (action
    (with-outputs-to photos.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to photos.timings %{deps})))))

(rule (alias photos) (action (diff photos.exp photos.out)))

(rule (alias photos) (action (diff photos.automaton.exp photos.automaton)))

(rule (alias photos)
  (action (diff photos.automaton.resolved.exp photos.automaton.resolved)))

(rule (alias photos) (action (diff photos.conflicts.exp photos.conflicts)))

(rule (target phpparser.opp.out) (deps phpparser.mly)
  (action
    (with-outputs-to phpparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias phpparser) (action (diff phpparser.opp.exp phpparser.opp.out)))

(rule
  (targets phpparser.out phpparser.automaton phpparser.automaton.resolved
    phpparser.conflicts phpparser.timings)
  (deps phpparser.mly)
  (action
    (with-outputs-to phpparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to phpparser.timings %{deps})))))

(rule (alias phpparser) (action (diff phpparser.exp phpparser.out)))

(rule (alias phpparser)
  (action (diff phpparser.automaton.exp phpparser.automaton)))

(rule (alias phpparser)
  (action
    (diff phpparser.automaton.resolved.exp phpparser.automaton.resolved)))

(rule (alias phpparser)
  (action (diff phpparser.conflicts.exp phpparser.conflicts)))

(rule (target pippijn.opp.out) (deps pippijn.mly)
  (action
    (with-outputs-to pippijn.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:pippijn.flags} %{deps})))))

(rule (alias pippijn) (action (diff pippijn.opp.exp pippijn.opp.out)))

(rule
  (targets pippijn.out pippijn.automaton pippijn.automaton.resolved
    pippijn.conflicts pippijn.timings)
  (deps pippijn.mly)
  (action
    (with-outputs-to pippijn.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to pippijn.timings %{read-lines:pippijn.flags} %{deps})))))

(rule (alias pippijn) (action (diff pippijn.exp pippijn.out)))

(rule (alias pippijn)
  (action (diff pippijn.automaton.exp pippijn.automaton)))

(rule (alias pippijn)
  (action (diff pippijn.automaton.resolved.exp pippijn.automaton.resolved)))

(rule (alias pippijn)
  (action (diff pippijn.conflicts.exp pippijn.conflicts)))

(rule (target pre_parser.opp.out) (deps pre_parser.mly)
  (action
    (with-outputs-to pre_parser.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:pre_parser.flags} %{deps})))))

(rule (alias pre_parser)
  (action (diff pre_parser.opp.exp pre_parser.opp.out)))

(rule
  (targets pre_parser.out pre_parser.automaton pre_parser.automaton.resolved
    pre_parser.conflicts pre_parser.timings)
  (deps pre_parser.mly)
  (action
    (with-outputs-to pre_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to pre_parser.timings %{read-lines:pre_parser.flags}
          %{deps})))))

(rule (alias pre_parser) (action (diff pre_parser.exp pre_parser.out)))

(rule (alias pre_parser)
  (action (diff pre_parser.automaton.exp pre_parser.automaton)))

(rule (alias pre_parser)
  (action
    (diff pre_parser.automaton.resolved.exp pre_parser.automaton.resolved)))

(rule (alias pre_parser)
  (action (diff pre_parser.conflicts.exp pre_parser.conflicts)))

(rule (target prec_inline.opp.out) (deps prec_inline.mly)
  (action
    (with-outputs-to prec_inline.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias prec_inline)
  (action (diff prec_inline.opp.exp prec_inline.opp.out)))

(rule
  (targets prec_inline.out prec_inline.automaton
    prec_inline.automaton.resolved prec_inline.conflicts prec_inline.timings)
  (deps prec_inline.mly)
  (action
    (with-outputs-to prec_inline.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to prec_inline.timings %{deps})))))

(rule (alias prec_inline) (action (diff prec_inline.exp prec_inline.out)))

(rule (alias prec_inline)
  (action (diff prec_inline.automaton.exp prec_inline.automaton)))

(rule (alias prec_inline)
  (action
    (diff prec_inline.automaton.resolved.exp prec_inline.automaton.resolved)))

(rule (alias prec_inline)
  (action (diff prec_inline.conflicts.exp prec_inline.conflicts)))

(rule (target private-and-public-1.opp.out)
  (deps private-and-public-1.mly private-and-public-2.mly
    private-and-public-3.mly)
  (action
    (with-outputs-to private-and-public-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base private-and-public-1 --only-preprocess %{deps})))))

(rule (alias private-and-public-1)
  (action (diff private-and-public-1.opp.exp private-and-public-1.opp.out)))

(rule
  (targets private-and-public-1.out private-and-public-1.automaton
    private-and-public-1.automaton.resolved private-and-public-1.conflicts
    private-and-public-1.timings)
  (deps private-and-public-1.mly private-and-public-2.mly
    private-and-public-3.mly)
  (action
    (with-outputs-to private-and-public-1.out
      (with-accepted-exit-codes 0
        (run menhir --base private-and-public-1 --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to
          private-and-public-1.timings %{deps})))))

(rule (alias private-and-public-1)
  (action (diff private-and-public-1.exp private-and-public-1.out)))

(rule (alias private-and-public-1)
  (action
    (diff private-and-public-1.automaton.exp private-and-public-1.automaton)))

(rule (alias private-and-public-1)
  (action
    (diff private-and-public-1.automaton.resolved.exp
      private-and-public-1.automaton.resolved)))

(rule (alias private-and-public-1)
  (action
    (diff private-and-public-1.conflicts.exp private-and-public-1.conflicts)))

(rule (target promelaparser.opp.out) (deps promelaparser.mly)
  (action
    (with-outputs-to promelaparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias promelaparser)
  (action (diff promelaparser.opp.exp promelaparser.opp.out)))

(rule
  (targets promelaparser.out promelaparser.automaton
    promelaparser.automaton.resolved promelaparser.conflicts
    promelaparser.timings)
  (deps promelaparser.mly)
  (action
    (with-outputs-to promelaparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to promelaparser.timings %{deps})))))

(rule (alias promelaparser)
  (action (diff promelaparser.exp promelaparser.out)))

(rule (alias promelaparser)
  (action (diff promelaparser.automaton.exp promelaparser.automaton)))

(rule (alias promelaparser)
  (action
    (diff promelaparser.automaton.resolved.exp
      promelaparser.automaton.resolved)))

(rule (alias promelaparser)
  (action (diff promelaparser.conflicts.exp promelaparser.conflicts)))

(rule (target promelaparser_withexps.opp.out)
  (deps promelaparser_withexps.mly)
  (action
    (with-outputs-to promelaparser_withexps.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias promelaparser_withexps)
  (action
    (diff promelaparser_withexps.opp.exp promelaparser_withexps.opp.out)))

(rule
  (targets promelaparser_withexps.out promelaparser_withexps.automaton
    promelaparser_withexps.automaton.resolved
    promelaparser_withexps.conflicts promelaparser_withexps.timings)
  (deps promelaparser_withexps.mly)
  (action
    (with-outputs-to promelaparser_withexps.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to promelaparser_withexps.timings %{deps})))))

(rule (alias promelaparser_withexps)
  (action (diff promelaparser_withexps.exp promelaparser_withexps.out)))

(rule (alias promelaparser_withexps)
  (action
    (diff promelaparser_withexps.automaton.exp
      promelaparser_withexps.automaton)))

(rule (alias promelaparser_withexps)
  (action
    (diff promelaparser_withexps.automaton.resolved.exp
      promelaparser_withexps.automaton.resolved)))

(rule (alias promelaparser_withexps)
  (action
    (diff promelaparser_withexps.conflicts.exp
      promelaparser_withexps.conflicts)))

(rule (target prooflang.opp.out) (deps prooflang.mly)
  (action
    (with-outputs-to prooflang.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias prooflang) (action (diff prooflang.opp.exp prooflang.opp.out)))

(rule
  (targets prooflang.out prooflang.automaton prooflang.automaton.resolved
    prooflang.conflicts prooflang.timings)
  (deps prooflang.mly)
  (action
    (with-outputs-to prooflang.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to prooflang.timings %{deps})))))

(rule (alias prooflang) (action (diff prooflang.exp prooflang.out)))

(rule (alias prooflang)
  (action (diff prooflang.automaton.exp prooflang.automaton)))

(rule (alias prooflang)
  (action
    (diff prooflang.automaton.resolved.exp prooflang.automaton.resolved)))

(rule (alias prooflang)
  (action (diff prooflang.conflicts.exp prooflang.conflicts)))

(rule (target proverif.2.00-parser.opp.out) (deps proverif.2.00-parser.mly)
  (action
    (with-outputs-to proverif.2.00-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias proverif.2.00-parser)
  (action (diff proverif.2.00-parser.opp.exp proverif.2.00-parser.opp.out)))

(rule
  (targets proverif.2.00-parser.out proverif.2.00-parser.automaton
    proverif.2.00-parser.automaton.resolved proverif.2.00-parser.conflicts
    proverif.2.00-parser.timings)
  (deps proverif.2.00-parser.mly)
  (action
    (with-outputs-to proverif.2.00-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to proverif.2.00-parser.timings %{deps})))))

(rule (alias proverif.2.00-parser)
  (action (diff proverif.2.00-parser.exp proverif.2.00-parser.out)))

(rule (alias proverif.2.00-parser)
  (action
    (diff proverif.2.00-parser.automaton.exp proverif.2.00-parser.automaton)))

(rule (alias proverif.2.00-parser)
  (action
    (diff proverif.2.00-parser.automaton.resolved.exp
      proverif.2.00-parser.automaton.resolved)))

(rule (alias proverif.2.00-parser)
  (action
    (diff proverif.2.00-parser.conflicts.exp proverif.2.00-parser.conflicts)))

(rule (target proverif.2.00-pitparser.opp.out)
  (deps proverif.2.00-pitparser.mly)
  (action
    (with-outputs-to proverif.2.00-pitparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias proverif.2.00-pitparser)
  (action
    (diff proverif.2.00-pitparser.opp.exp proverif.2.00-pitparser.opp.out)))

(rule
  (targets proverif.2.00-pitparser.out proverif.2.00-pitparser.automaton
    proverif.2.00-pitparser.automaton.resolved
    proverif.2.00-pitparser.conflicts proverif.2.00-pitparser.timings)
  (deps proverif.2.00-pitparser.mly)
  (action
    (with-outputs-to proverif.2.00-pitparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to proverif.2.00-pitparser.timings %{deps})))))

(rule (alias proverif.2.00-pitparser)
  (action (diff proverif.2.00-pitparser.exp proverif.2.00-pitparser.out)))

(rule (alias proverif.2.00-pitparser)
  (action
    (diff proverif.2.00-pitparser.automaton.exp
      proverif.2.00-pitparser.automaton)))

(rule (alias proverif.2.00-pitparser)
  (action
    (diff proverif.2.00-pitparser.automaton.resolved.exp
      proverif.2.00-pitparser.automaton.resolved)))

(rule (alias proverif.2.00-pitparser)
  (action
    (diff proverif.2.00-pitparser.conflicts.exp
      proverif.2.00-pitparser.conflicts)))

(rule (target psmt2-frontend.0.1-smtlib_parser.opp.out)
  (deps psmt2-frontend.0.1-smtlib_parser.mly)
  (action
    (with-outputs-to psmt2-frontend.0.1-smtlib_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias psmt2-frontend.0.1-smtlib_parser)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.opp.exp
      psmt2-frontend.0.1-smtlib_parser.opp.out)))

(rule
  (targets psmt2-frontend.0.1-smtlib_parser.out
    psmt2-frontend.0.1-smtlib_parser.automaton
    psmt2-frontend.0.1-smtlib_parser.automaton.resolved
    psmt2-frontend.0.1-smtlib_parser.conflicts
    psmt2-frontend.0.1-smtlib_parser.timings)
  (deps psmt2-frontend.0.1-smtlib_parser.mly)
  (action
    (with-outputs-to psmt2-frontend.0.1-smtlib_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to psmt2-frontend.0.1-smtlib_parser.timings %{deps})))))

(rule (alias psmt2-frontend.0.1-smtlib_parser)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.exp
      psmt2-frontend.0.1-smtlib_parser.out)))

(rule (alias psmt2-frontend.0.1-smtlib_parser)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.automaton.exp
      psmt2-frontend.0.1-smtlib_parser.automaton)))

(rule (alias psmt2-frontend.0.1-smtlib_parser)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.automaton.resolved.exp
      psmt2-frontend.0.1-smtlib_parser.automaton.resolved)))

(rule (alias psmt2-frontend.0.1-smtlib_parser)
  (action
    (diff psmt2-frontend.0.1-smtlib_parser.conflicts.exp
      psmt2-frontend.0.1-smtlib_parser.conflicts)))

(rule (target public-1.opp.out) (deps public-1.mly public-2.mly)
  (action
    (with-outputs-to public-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base public-1 --only-preprocess %{deps})))))

(rule (alias public-1) (action (diff public-1.opp.exp public-1.opp.out)))

(rule
  (targets public-1.out public-1.automaton public-1.automaton.resolved
    public-1.conflicts public-1.timings)
  (deps public-1.mly public-2.mly)
  (action
    (with-outputs-to public-1.out
      (with-accepted-exit-codes 0
        (run menhir --base public-1 --dump --dump-resolved --explain -lg 2
          -la 2 -lc 2 --timings-to public-1.timings %{deps})))))

(rule (alias public-1) (action (diff public-1.exp public-1.out)))

(rule (alias public-1)
  (action (diff public-1.automaton.exp public-1.automaton)))

(rule (alias public-1)
  (action (diff public-1.automaton.resolved.exp public-1.automaton.resolved)))

(rule (alias public-1)
  (action (diff public-1.conflicts.exp public-1.conflicts)))

(rule (target public-inline-1.opp.out)
  (deps public-inline-1.mly public-inline-2.mly)
  (action
    (with-outputs-to public-inline-1.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base public-inline-1 --only-preprocess %{deps})))))

(rule (alias public-inline-1)
  (action (diff public-inline-1.opp.exp public-inline-1.opp.out)))

(rule
  (targets public-inline-1.out public-inline-1.automaton
    public-inline-1.automaton.resolved public-inline-1.conflicts
    public-inline-1.timings)
  (deps public-inline-1.mly public-inline-2.mly)
  (action
    (with-outputs-to public-inline-1.out
      (with-accepted-exit-codes 0
        (run menhir --base public-inline-1 --dump --dump-resolved --explain
          -lg 2 -la 2 -lc 2 --timings-to public-inline-1.timings %{deps})))))

(rule (alias public-inline-1)
  (action (diff public-inline-1.exp public-inline-1.out)))

(rule (alias public-inline-1)
  (action (diff public-inline-1.automaton.exp public-inline-1.automaton)))

(rule (alias public-inline-1)
  (action
    (diff public-inline-1.automaton.resolved.exp
      public-inline-1.automaton.resolved)))

(rule (alias public-inline-1)
  (action (diff public-inline-1.conflicts.exp public-inline-1.conflicts)))

(rule (target pxp-m2parsergen.opp.out) (deps pxp-m2parsergen.mly)
  (action
    (with-outputs-to pxp-m2parsergen.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias pxp-m2parsergen)
  (action (diff pxp-m2parsergen.opp.exp pxp-m2parsergen.opp.out)))

(rule
  (targets pxp-m2parsergen.out pxp-m2parsergen.automaton
    pxp-m2parsergen.automaton.resolved pxp-m2parsergen.conflicts
    pxp-m2parsergen.timings)
  (deps pxp-m2parsergen.mly)
  (action
    (with-outputs-to pxp-m2parsergen.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to pxp-m2parsergen.timings %{deps})))))

(rule (alias pxp-m2parsergen)
  (action (diff pxp-m2parsergen.exp pxp-m2parsergen.out)))

(rule (alias pxp-m2parsergen)
  (action (diff pxp-m2parsergen.automaton.exp pxp-m2parsergen.automaton)))

(rule (alias pxp-m2parsergen)
  (action
    (diff pxp-m2parsergen.automaton.resolved.exp
      pxp-m2parsergen.automaton.resolved)))

(rule (alias pxp-m2parsergen)
  (action (diff pxp-m2parsergen.conflicts.exp pxp-m2parsergen.conflicts)))

(rule (target pxp-ucs2_to_utf8.opp.out) (deps pxp-ucs2_to_utf8.mly)
  (action
    (with-outputs-to pxp-ucs2_to_utf8.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias pxp-ucs2_to_utf8)
  (action (diff pxp-ucs2_to_utf8.opp.exp pxp-ucs2_to_utf8.opp.out)))

(rule
  (targets pxp-ucs2_to_utf8.out pxp-ucs2_to_utf8.automaton
    pxp-ucs2_to_utf8.automaton.resolved pxp-ucs2_to_utf8.conflicts
    pxp-ucs2_to_utf8.timings)
  (deps pxp-ucs2_to_utf8.mly)
  (action
    (with-outputs-to pxp-ucs2_to_utf8.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to pxp-ucs2_to_utf8.timings %{deps})))))

(rule (alias pxp-ucs2_to_utf8)
  (action (diff pxp-ucs2_to_utf8.exp pxp-ucs2_to_utf8.out)))

(rule (alias pxp-ucs2_to_utf8)
  (action (diff pxp-ucs2_to_utf8.automaton.exp pxp-ucs2_to_utf8.automaton)))

(rule (alias pxp-ucs2_to_utf8)
  (action
    (diff pxp-ucs2_to_utf8.automaton.resolved.exp
      pxp-ucs2_to_utf8.automaton.resolved)))

(rule (alias pxp-ucs2_to_utf8)
  (action (diff pxp-ucs2_to_utf8.conflicts.exp pxp-ucs2_to_utf8.conflicts)))

(rule (target rdf_sparql_parser.opp.out) (deps rdf_sparql_parser.mly)
  (action
    (with-outputs-to rdf_sparql_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias rdf_sparql_parser)
  (action (diff rdf_sparql_parser.opp.exp rdf_sparql_parser.opp.out)))

(rule
  (targets rdf_sparql_parser.out rdf_sparql_parser.automaton
    rdf_sparql_parser.automaton.resolved rdf_sparql_parser.conflicts
    rdf_sparql_parser.timings)
  (deps rdf_sparql_parser.mly)
  (action
    (with-outputs-to rdf_sparql_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to rdf_sparql_parser.timings %{deps})))))

(rule (alias rdf_sparql_parser)
  (action (diff rdf_sparql_parser.exp rdf_sparql_parser.out)))

(rule (alias rdf_sparql_parser)
  (action (diff rdf_sparql_parser.automaton.exp rdf_sparql_parser.automaton)))

(rule (alias rdf_sparql_parser)
  (action
    (diff rdf_sparql_parser.automaton.resolved.exp
      rdf_sparql_parser.automaton.resolved)))

(rule (alias rdf_sparql_parser)
  (action (diff rdf_sparql_parser.conflicts.exp rdf_sparql_parser.conflicts)))

(rule (target reason.3.3.7-reason_parser.opp.out)
  (deps reason.3.3.7-reason_parser.mly)
  (action
    (with-outputs-to reason.3.3.7-reason_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias reason.3.3.7-reason_parser)
  (action
    (diff reason.3.3.7-reason_parser.opp.exp
      reason.3.3.7-reason_parser.opp.out)))

(rule
  (targets reason.3.3.7-reason_parser.out
    reason.3.3.7-reason_parser.automaton
    reason.3.3.7-reason_parser.automaton.resolved
    reason.3.3.7-reason_parser.conflicts reason.3.3.7-reason_parser.timings)
  (deps reason.3.3.7-reason_parser.mly)
  (action
    (with-outputs-to reason.3.3.7-reason_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to reason.3.3.7-reason_parser.timings %{deps})))))

(rule (alias reason.3.3.7-reason_parser)
  (action
    (diff reason.3.3.7-reason_parser.exp reason.3.3.7-reason_parser.out)))

(rule (alias reason.3.3.7-reason_parser)
  (action
    (diff reason.3.3.7-reason_parser.automaton.exp
      reason.3.3.7-reason_parser.automaton)))

(rule (alias reason.3.3.7-reason_parser)
  (action
    (diff reason.3.3.7-reason_parser.automaton.resolved.exp
      reason.3.3.7-reason_parser.automaton.resolved)))

(rule (alias reason.3.3.7-reason_parser)
  (action
    (diff reason.3.3.7-reason_parser.conflicts.exp
      reason.3.3.7-reason_parser.conflicts)))

(rule (target reason_parser.opp.out) (deps reason_parser.mly)
  (action
    (with-outputs-to reason_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias reason_parser)
  (action (diff reason_parser.opp.exp reason_parser.opp.out)))

(rule
  (targets reason_parser.out reason_parser.automaton
    reason_parser.automaton.resolved reason_parser.conflicts
    reason_parser.timings)
  (deps reason_parser.mly)
  (action
    (with-outputs-to reason_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to reason_parser.timings %{deps})))))

(rule (alias reason_parser)
  (action (diff reason_parser.exp reason_parser.out)))

(rule (alias reason_parser)
  (action (diff reason_parser.automaton.exp reason_parser.automaton)))

(rule (alias reason_parser)
  (action
    (diff reason_parser.automaton.resolved.exp
      reason_parser.automaton.resolved)))

(rule (alias reason_parser)
  (action (diff reason_parser.conflicts.exp reason_parser.conflicts)))

(rule (target regstab.2.0.0-parser.opp.out) (deps regstab.2.0.0-parser.mly)
  (action
    (with-outputs-to regstab.2.0.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias regstab.2.0.0-parser)
  (action (diff regstab.2.0.0-parser.opp.exp regstab.2.0.0-parser.opp.out)))

(rule
  (targets regstab.2.0.0-parser.out regstab.2.0.0-parser.automaton
    regstab.2.0.0-parser.automaton.resolved regstab.2.0.0-parser.conflicts
    regstab.2.0.0-parser.timings)
  (deps regstab.2.0.0-parser.mly)
  (action
    (with-outputs-to regstab.2.0.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to regstab.2.0.0-parser.timings %{deps})))))

(rule (alias regstab.2.0.0-parser)
  (action (diff regstab.2.0.0-parser.exp regstab.2.0.0-parser.out)))

(rule (alias regstab.2.0.0-parser)
  (action
    (diff regstab.2.0.0-parser.automaton.exp regstab.2.0.0-parser.automaton)))

(rule (alias regstab.2.0.0-parser)
  (action
    (diff regstab.2.0.0-parser.automaton.resolved.exp
      regstab.2.0.0-parser.automaton.resolved)))

(rule (alias regstab.2.0.0-parser)
  (action
    (diff regstab.2.0.0-parser.conflicts.exp regstab.2.0.0-parser.conflicts)))

(rule (target rfsm.1.0-main_parser.opp.out) (deps rfsm.1.0-main_parser.mly)
  (action
    (with-outputs-to rfsm.1.0-main_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias rfsm.1.0-main_parser)
  (action (diff rfsm.1.0-main_parser.opp.exp rfsm.1.0-main_parser.opp.out)))

(rule
  (targets rfsm.1.0-main_parser.out rfsm.1.0-main_parser.automaton
    rfsm.1.0-main_parser.automaton.resolved rfsm.1.0-main_parser.conflicts
    rfsm.1.0-main_parser.timings)
  (deps rfsm.1.0-main_parser.mly)
  (action
    (with-outputs-to rfsm.1.0-main_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to rfsm.1.0-main_parser.timings %{deps})))))

(rule (alias rfsm.1.0-main_parser)
  (action (diff rfsm.1.0-main_parser.exp rfsm.1.0-main_parser.out)))

(rule (alias rfsm.1.0-main_parser)
  (action
    (diff rfsm.1.0-main_parser.automaton.exp rfsm.1.0-main_parser.automaton)))

(rule (alias rfsm.1.0-main_parser)
  (action
    (diff rfsm.1.0-main_parser.automaton.resolved.exp
      rfsm.1.0-main_parser.automaton.resolved)))

(rule (alias rfsm.1.0-main_parser)
  (action
    (diff rfsm.1.0-main_parser.conflicts.exp rfsm.1.0-main_parser.conflicts)))

(rule (target rml.1.09.05-parser.opp.out) (deps rml.1.09.05-parser.mly)
  (action
    (with-outputs-to rml.1.09.05-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias rml.1.09.05-parser)
  (action (diff rml.1.09.05-parser.opp.exp rml.1.09.05-parser.opp.out)))

(rule
  (targets rml.1.09.05-parser.out rml.1.09.05-parser.automaton
    rml.1.09.05-parser.automaton.resolved rml.1.09.05-parser.conflicts
    rml.1.09.05-parser.timings)
  (deps rml.1.09.05-parser.mly)
  (action
    (with-outputs-to rml.1.09.05-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to rml.1.09.05-parser.timings %{deps})))))

(rule (alias rml.1.09.05-parser)
  (action (diff rml.1.09.05-parser.exp rml.1.09.05-parser.out)))

(rule (alias rml.1.09.05-parser)
  (action
    (diff rml.1.09.05-parser.automaton.exp rml.1.09.05-parser.automaton)))

(rule (alias rml.1.09.05-parser)
  (action
    (diff rml.1.09.05-parser.automaton.resolved.exp
      rml.1.09.05-parser.automaton.resolved)))

(rule (alias rml.1.09.05-parser)
  (action
    (diff rml.1.09.05-parser.conflicts.exp rml.1.09.05-parser.conflicts)))

(rule (target ruby18_parser.opp.out) (deps ruby18_parser.mly)
  (action
    (with-outputs-to ruby18_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias ruby18_parser)
  (action (diff ruby18_parser.opp.exp ruby18_parser.opp.out)))

(rule
  (targets ruby18_parser.out ruby18_parser.automaton
    ruby18_parser.automaton.resolved ruby18_parser.conflicts
    ruby18_parser.timings)
  (deps ruby18_parser.mly)
  (action
    (with-outputs-to ruby18_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to ruby18_parser.timings %{deps})))))

(rule (alias ruby18_parser)
  (action (diff ruby18_parser.exp ruby18_parser.out)))

(rule (alias ruby18_parser)
  (action (diff ruby18_parser.automaton.exp ruby18_parser.automaton)))

(rule (alias ruby18_parser)
  (action
    (diff ruby18_parser.automaton.resolved.exp
      ruby18_parser.automaton.resolved)))

(rule (alias ruby18_parser)
  (action (diff ruby18_parser.conflicts.exp ruby18_parser.conflicts)))

(rule (target sage.opp.out) (deps sage.mly)
  (action
    (with-outputs-to sage.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias sage) (action (diff sage.opp.exp sage.opp.out)))

(rule
  (targets sage.out sage.automaton sage.automaton.resolved sage.conflicts
    sage.timings)
  (deps sage.mly)
  (action
    (with-outputs-to sage.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to sage.timings %{deps})))))

(rule (alias sage) (action (diff sage.exp sage.out)))

(rule (alias sage) (action (diff sage.automaton.exp sage.automaton)))

(rule (alias sage)
  (action (diff sage.automaton.resolved.exp sage.automaton.resolved)))

(rule (alias sage) (action (diff sage.conflicts.exp sage.conflicts)))

(rule (target scilabParser.opp.out) (deps scilabParser.mly)
  (action
    (with-outputs-to scilabParser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias scilabParser)
  (action (diff scilabParser.opp.exp scilabParser.opp.out)))

(rule
  (targets scilabParser.out scilabParser.automaton
    scilabParser.automaton.resolved scilabParser.conflicts
    scilabParser.timings)
  (deps scilabParser.mly)
  (action
    (with-outputs-to scilabParser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to scilabParser.timings %{deps})))))

(rule (alias scilabParser) (action (diff scilabParser.exp scilabParser.out)))

(rule (alias scilabParser)
  (action (diff scilabParser.automaton.exp scilabParser.automaton)))

(rule (alias scilabParser)
  (action
    (diff scilabParser.automaton.resolved.exp
      scilabParser.automaton.resolved)))

(rule (alias scilabParser)
  (action (diff scilabParser.conflicts.exp scilabParser.conflicts)))

(rule (target self.opp.out) (deps self.mly)
  (action
    (with-outputs-to self.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias self) (action (diff self.opp.exp self.opp.out)))

(rule
  (targets self.out self.automaton self.automaton.resolved self.conflicts
    self.timings)
  (deps self.mly)
  (action
    (with-outputs-to self.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to self.timings %{deps})))))

(rule (alias self) (action (diff self.exp self.out)))

(rule (alias self) (action (diff self.automaton.exp self.automaton)))

(rule (alias self)
  (action (diff self.automaton.resolved.exp self.automaton.resolved)))

(rule (alias self) (action (diff self.conflicts.exp self.conflicts)))

(rule (target self_ground.opp.out) (deps self_ground.mly)
  (action
    (with-outputs-to self_ground.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias self_ground)
  (action (diff self_ground.opp.exp self_ground.opp.out)))

(rule
  (targets self_ground.out self_ground.automaton
    self_ground.automaton.resolved self_ground.conflicts self_ground.timings)
  (deps self_ground.mly)
  (action
    (with-outputs-to self_ground.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to self_ground.timings %{deps})))))

(rule (alias self_ground) (action (diff self_ground.exp self_ground.out)))

(rule (alias self_ground)
  (action (diff self_ground.automaton.exp self_ground.automaton)))

(rule (alias self_ground)
  (action
    (diff self_ground.automaton.resolved.exp self_ground.automaton.resolved)))

(rule (alias self_ground)
  (action (diff self_ground.conflicts.exp self_ground.conflicts)))

(rule (target sibylfs-lem.0.4.0-parser.opp.out)
  (deps sibylfs-lem.0.4.0-parser.mly)
  (action
    (with-outputs-to sibylfs-lem.0.4.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias sibylfs-lem.0.4.0-parser)
  (action
    (diff sibylfs-lem.0.4.0-parser.opp.exp sibylfs-lem.0.4.0-parser.opp.out)))

(rule
  (targets sibylfs-lem.0.4.0-parser.out sibylfs-lem.0.4.0-parser.automaton
    sibylfs-lem.0.4.0-parser.automaton.resolved
    sibylfs-lem.0.4.0-parser.conflicts sibylfs-lem.0.4.0-parser.timings)
  (deps sibylfs-lem.0.4.0-parser.mly)
  (action
    (with-outputs-to sibylfs-lem.0.4.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to sibylfs-lem.0.4.0-parser.timings %{deps})))))

(rule (alias sibylfs-lem.0.4.0-parser)
  (action (diff sibylfs-lem.0.4.0-parser.exp sibylfs-lem.0.4.0-parser.out)))

(rule (alias sibylfs-lem.0.4.0-parser)
  (action
    (diff sibylfs-lem.0.4.0-parser.automaton.exp
      sibylfs-lem.0.4.0-parser.automaton)))

(rule (alias sibylfs-lem.0.4.0-parser)
  (action
    (diff sibylfs-lem.0.4.0-parser.automaton.resolved.exp
      sibylfs-lem.0.4.0-parser.automaton.resolved)))

(rule (alias sibylfs-lem.0.4.0-parser)
  (action
    (diff sibylfs-lem.0.4.0-parser.conflicts.exp
      sibylfs-lem.0.4.0-parser.conflicts)))

(rule (target simnml.opp.out) (deps simnml.mly)
  (action
    (with-outputs-to simnml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias simnml) (action (diff simnml.opp.exp simnml.opp.out)))

(rule
  (targets simnml.out simnml.automaton simnml.automaton.resolved
    simnml.conflicts simnml.timings)
  (deps simnml.mly)
  (action
    (with-outputs-to simnml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to simnml.timings %{deps})))))

(rule (alias simnml) (action (diff simnml.exp simnml.out)))

(rule (alias simnml) (action (diff simnml.automaton.exp simnml.automaton)))

(rule (alias simnml)
  (action (diff simnml.automaton.resolved.exp simnml.automaton.resolved)))

(rule (alias simnml) (action (diff simnml.conflicts.exp simnml.conflicts)))

(rule (target simple-if-conflict.opp.out) (deps simple-if-conflict.mly)
  (action
    (with-outputs-to simple-if-conflict.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias simple-if-conflict)
  (action (diff simple-if-conflict.opp.exp simple-if-conflict.opp.out)))

(rule
  (targets simple-if-conflict.out simple-if-conflict.automaton
    simple-if-conflict.automaton.resolved simple-if-conflict.conflicts
    simple-if-conflict.timings)
  (deps simple-if-conflict.mly)
  (action
    (with-outputs-to simple-if-conflict.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to simple-if-conflict.timings %{deps})))))

(rule (alias simple-if-conflict)
  (action (diff simple-if-conflict.exp simple-if-conflict.out)))

(rule (alias simple-if-conflict)
  (action
    (diff simple-if-conflict.automaton.exp simple-if-conflict.automaton)))

(rule (alias simple-if-conflict)
  (action
    (diff simple-if-conflict.automaton.resolved.exp
      simple-if-conflict.automaton.resolved)))

(rule (alias simple-if-conflict)
  (action
    (diff simple-if-conflict.conflicts.exp simple-if-conflict.conflicts)))

(rule (target simple-if-conflict-no-eos.opp.out)
  (deps simple-if-conflict-no-eos.mly)
  (action
    (with-outputs-to simple-if-conflict-no-eos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias simple-if-conflict-no-eos)
  (action
    (diff simple-if-conflict-no-eos.opp.exp
      simple-if-conflict-no-eos.opp.out)))

(rule
  (targets simple-if-conflict-no-eos.out simple-if-conflict-no-eos.automaton
    simple-if-conflict-no-eos.automaton.resolved
    simple-if-conflict-no-eos.conflicts simple-if-conflict-no-eos.timings)
  (deps simple-if-conflict-no-eos.mly)
  (action
    (with-outputs-to simple-if-conflict-no-eos.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to simple-if-conflict-no-eos.timings %{deps})))))

(rule (alias simple-if-conflict-no-eos)
  (action (diff simple-if-conflict-no-eos.exp simple-if-conflict-no-eos.out)))

(rule (alias simple-if-conflict-no-eos)
  (action
    (diff simple-if-conflict-no-eos.automaton.exp
      simple-if-conflict-no-eos.automaton)))

(rule (alias simple-if-conflict-no-eos)
  (action
    (diff simple-if-conflict-no-eos.automaton.resolved.exp
      simple-if-conflict-no-eos.automaton.resolved)))

(rule (alias simple-if-conflict-no-eos)
  (action
    (diff simple-if-conflict-no-eos.conflicts.exp
      simple-if-conflict-no-eos.conflicts)))

(rule (target solidity.opp.out) (deps solidity.mly)
  (action
    (with-outputs-to solidity.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias solidity) (action (diff solidity.opp.exp solidity.opp.out)))

(rule
  (targets solidity.out solidity.automaton solidity.automaton.resolved
    solidity.conflicts solidity.timings)
  (deps solidity.mly)
  (action
    (with-outputs-to solidity.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to solidity.timings %{deps})))))

(rule (alias solidity) (action (diff solidity.exp solidity.out)))

(rule (alias solidity)
  (action (diff solidity.automaton.exp solidity.automaton)))

(rule (alias solidity)
  (action (diff solidity.automaton.resolved.exp solidity.automaton.resolved)))

(rule (alias solidity)
  (action (diff solidity.conflicts.exp solidity.conflicts)))

(rule (target spike.opp.out) (deps spike.mly)
  (action
    (with-outputs-to spike.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias spike) (action (diff spike.opp.exp spike.opp.out)))

(rule
  (targets spike.out spike.automaton spike.automaton.resolved spike.conflicts
    spike.timings)
  (deps spike.mly)
  (action
    (with-outputs-to spike.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to spike.timings %{deps})))))

(rule (alias spike) (action (diff spike.exp spike.out)))

(rule (alias spike) (action (diff spike.automaton.exp spike.automaton)))

(rule (alias spike)
  (action (diff spike.automaton.resolved.exp spike.automaton.resolved)))

(rule (alias spike) (action (diff spike.conflicts.exp spike.conflicts)))

(rule (target split-public-symbol.opp.out) (deps split-public-symbol.mly)
  (action
    (with-outputs-to split-public-symbol.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias split-public-symbol)
  (action (diff split-public-symbol.opp.exp split-public-symbol.opp.out)))

(rule
  (targets split-public-symbol.out split-public-symbol.automaton
    split-public-symbol.automaton.resolved split-public-symbol.conflicts
    split-public-symbol.timings)
  (deps split-public-symbol.mly)
  (action
    (with-outputs-to split-public-symbol.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to split-public-symbol.timings %{deps})))))

(rule (alias split-public-symbol)
  (action (diff split-public-symbol.exp split-public-symbol.out)))

(rule (alias split-public-symbol)
  (action
    (diff split-public-symbol.automaton.exp split-public-symbol.automaton)))

(rule (alias split-public-symbol)
  (action
    (diff split-public-symbol.automaton.resolved.exp
      split-public-symbol.automaton.resolved)))

(rule (alias split-public-symbol)
  (action
    (diff split-public-symbol.conflicts.exp split-public-symbol.conflicts)))

(rule (target split-public-symbol-with-renaming.opp.out)
  (deps split-public-symbol-with-renaming.mly)
  (action
    (with-outputs-to split-public-symbol-with-renaming.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias split-public-symbol-with-renaming)
  (action
    (diff split-public-symbol-with-renaming.opp.exp
      split-public-symbol-with-renaming.opp.out)))

(rule
  (targets split-public-symbol-with-renaming.out
    split-public-symbol-with-renaming.automaton
    split-public-symbol-with-renaming.automaton.resolved
    split-public-symbol-with-renaming.conflicts
    split-public-symbol-with-renaming.timings)
  (deps split-public-symbol-with-renaming.mly)
  (action
    (with-outputs-to split-public-symbol-with-renaming.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to split-public-symbol-with-renaming.timings %{deps})))))

(rule (alias split-public-symbol-with-renaming)
  (action
    (diff split-public-symbol-with-renaming.exp
      split-public-symbol-with-renaming.out)))

(rule (alias split-public-symbol-with-renaming)
  (action
    (diff split-public-symbol-with-renaming.automaton.exp
      split-public-symbol-with-renaming.automaton)))

(rule (alias split-public-symbol-with-renaming)
  (action
    (diff split-public-symbol-with-renaming.automaton.resolved.exp
      split-public-symbol-with-renaming.automaton.resolved)))

(rule (alias split-public-symbol-with-renaming)
  (action
    (diff split-public-symbol-with-renaming.conflicts.exp
      split-public-symbol-with-renaming.conflicts)))

(rule (target sqlgg.0.4.5-sql_parser.opp.out)
  (deps sqlgg.0.4.5-sql_parser.mly)
  (action
    (with-outputs-to sqlgg.0.4.5-sql_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias sqlgg.0.4.5-sql_parser)
  (action
    (diff sqlgg.0.4.5-sql_parser.opp.exp sqlgg.0.4.5-sql_parser.opp.out)))

(rule
  (targets sqlgg.0.4.5-sql_parser.out sqlgg.0.4.5-sql_parser.automaton
    sqlgg.0.4.5-sql_parser.automaton.resolved
    sqlgg.0.4.5-sql_parser.conflicts sqlgg.0.4.5-sql_parser.timings)
  (deps sqlgg.0.4.5-sql_parser.mly)
  (action
    (with-outputs-to sqlgg.0.4.5-sql_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to sqlgg.0.4.5-sql_parser.timings %{deps})))))

(rule (alias sqlgg.0.4.5-sql_parser)
  (action (diff sqlgg.0.4.5-sql_parser.exp sqlgg.0.4.5-sql_parser.out)))

(rule (alias sqlgg.0.4.5-sql_parser)
  (action
    (diff sqlgg.0.4.5-sql_parser.automaton.exp
      sqlgg.0.4.5-sql_parser.automaton)))

(rule (alias sqlgg.0.4.5-sql_parser)
  (action
    (diff sqlgg.0.4.5-sql_parser.automaton.resolved.exp
      sqlgg.0.4.5-sql_parser.automaton.resolved)))

(rule (alias sqlgg.0.4.5-sql_parser)
  (action
    (diff sqlgg.0.4.5-sql_parser.conflicts.exp
      sqlgg.0.4.5-sql_parser.conflicts)))

(rule (target statverif.1.97pl1.1-piparser.opp.out)
  (deps statverif.1.97pl1.1-piparser.mly)
  (action
    (with-outputs-to statverif.1.97pl1.1-piparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias statverif.1.97pl1.1-piparser)
  (action
    (diff statverif.1.97pl1.1-piparser.opp.exp
      statverif.1.97pl1.1-piparser.opp.out)))

(rule
  (targets statverif.1.97pl1.1-piparser.out
    statverif.1.97pl1.1-piparser.automaton
    statverif.1.97pl1.1-piparser.automaton.resolved
    statverif.1.97pl1.1-piparser.conflicts
    statverif.1.97pl1.1-piparser.timings)
  (deps statverif.1.97pl1.1-piparser.mly)
  (action
    (with-outputs-to statverif.1.97pl1.1-piparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to statverif.1.97pl1.1-piparser.timings %{deps})))))

(rule (alias statverif.1.97pl1.1-piparser)
  (action
    (diff statverif.1.97pl1.1-piparser.exp statverif.1.97pl1.1-piparser.out)))

(rule (alias statverif.1.97pl1.1-piparser)
  (action
    (diff statverif.1.97pl1.1-piparser.automaton.exp
      statverif.1.97pl1.1-piparser.automaton)))

(rule (alias statverif.1.97pl1.1-piparser)
  (action
    (diff statverif.1.97pl1.1-piparser.automaton.resolved.exp
      statverif.1.97pl1.1-piparser.automaton.resolved)))

(rule (alias statverif.1.97pl1.1-piparser)
  (action
    (diff statverif.1.97pl1.1-piparser.conflicts.exp
      statverif.1.97pl1.1-piparser.conflicts)))

(rule (target subiso.opp.out) (deps subiso.mly)
  (action
    (with-outputs-to subiso.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias subiso) (action (diff subiso.opp.exp subiso.opp.out)))

(rule
  (targets subiso.out subiso.automaton subiso.automaton.resolved
    subiso.conflicts subiso.timings)
  (deps subiso.mly)
  (action
    (with-outputs-to subiso.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to subiso.timings %{deps})))))

(rule (alias subiso) (action (diff subiso.exp subiso.out)))

(rule (alias subiso) (action (diff subiso.automaton.exp subiso.automaton)))

(rule (alias subiso)
  (action (diff subiso.automaton.resolved.exp subiso.automaton.resolved)))

(rule (alias subiso) (action (diff subiso.conflicts.exp subiso.conflicts)))

(rule (target subtle-conflict-pager.opp.out) (deps subtle-conflict-pager.mly)
  (action
    (with-outputs-to subtle-conflict-pager.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias subtle-conflict-pager)
  (action (diff subtle-conflict-pager.opp.exp subtle-conflict-pager.opp.out)))

(rule
  (targets subtle-conflict-pager.out subtle-conflict-pager.automaton
    subtle-conflict-pager.automaton.resolved subtle-conflict-pager.conflicts
    subtle-conflict-pager.timings)
  (deps subtle-conflict-pager.mly)
  (action
    (with-outputs-to subtle-conflict-pager.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to subtle-conflict-pager.timings %{deps})))))

(rule (alias subtle-conflict-pager)
  (action (diff subtle-conflict-pager.exp subtle-conflict-pager.out)))

(rule (alias subtle-conflict-pager)
  (action
    (diff subtle-conflict-pager.automaton.exp
      subtle-conflict-pager.automaton)))

(rule (alias subtle-conflict-pager)
  (action
    (diff subtle-conflict-pager.automaton.resolved.exp
      subtle-conflict-pager.automaton.resolved)))

(rule (alias subtle-conflict-pager)
  (action
    (diff subtle-conflict-pager.conflicts.exp
      subtle-conflict-pager.conflicts)))

(rule (target swdogen.0.1.0-swgparser.opp.out)
  (deps swdogen.0.1.0-swgparser.mly)
  (action
    (with-outputs-to swdogen.0.1.0-swgparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias swdogen.0.1.0-swgparser)
  (action
    (diff swdogen.0.1.0-swgparser.opp.exp swdogen.0.1.0-swgparser.opp.out)))

(rule
  (targets swdogen.0.1.0-swgparser.out swdogen.0.1.0-swgparser.automaton
    swdogen.0.1.0-swgparser.automaton.resolved
    swdogen.0.1.0-swgparser.conflicts swdogen.0.1.0-swgparser.timings)
  (deps swdogen.0.1.0-swgparser.mly)
  (action
    (with-outputs-to swdogen.0.1.0-swgparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to swdogen.0.1.0-swgparser.timings %{deps})))))

(rule (alias swdogen.0.1.0-swgparser)
  (action (diff swdogen.0.1.0-swgparser.exp swdogen.0.1.0-swgparser.out)))

(rule (alias swdogen.0.1.0-swgparser)
  (action
    (diff swdogen.0.1.0-swgparser.automaton.exp
      swdogen.0.1.0-swgparser.automaton)))

(rule (alias swdogen.0.1.0-swgparser)
  (action
    (diff swdogen.0.1.0-swgparser.automaton.resolved.exp
      swdogen.0.1.0-swgparser.automaton.resolved)))

(rule (alias swdogen.0.1.0-swgparser)
  (action
    (diff swdogen.0.1.0-swgparser.conflicts.exp
      swdogen.0.1.0-swgparser.conflicts)))

(rule (target symbolstartofs.opp.out) (deps symbolstartofs.mly)
  (action
    (with-outputs-to symbolstartofs.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias symbolstartofs)
  (action (diff symbolstartofs.opp.exp symbolstartofs.opp.out)))

(rule
  (targets symbolstartofs.out symbolstartofs.automaton
    symbolstartofs.automaton.resolved symbolstartofs.conflicts
    symbolstartofs.timings)
  (deps symbolstartofs.mly)
  (action
    (with-outputs-to symbolstartofs.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to symbolstartofs.timings %{deps})))))

(rule (alias symbolstartofs)
  (action (diff symbolstartofs.exp symbolstartofs.out)))

(rule (alias symbolstartofs)
  (action (diff symbolstartofs.automaton.exp symbolstartofs.automaton)))

(rule (alias symbolstartofs)
  (action
    (diff symbolstartofs.automaton.resolved.exp
      symbolstartofs.automaton.resolved)))

(rule (alias symbolstartofs)
  (action (diff symbolstartofs.conflicts.exp symbolstartofs.conflicts)))

(rule (target symbolstartpos.opp.out) (deps symbolstartpos.mly)
  (action
    (with-outputs-to symbolstartpos.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias symbolstartpos)
  (action (diff symbolstartpos.opp.exp symbolstartpos.opp.out)))

(rule
  (targets symbolstartpos.out symbolstartpos.automaton
    symbolstartpos.automaton.resolved symbolstartpos.conflicts
    symbolstartpos.timings)
  (deps symbolstartpos.mly)
  (action
    (with-outputs-to symbolstartpos.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to symbolstartpos.timings %{deps})))))

(rule (alias symbolstartpos)
  (action (diff symbolstartpos.exp symbolstartpos.out)))

(rule (alias symbolstartpos)
  (action (diff symbolstartpos.automaton.exp symbolstartpos.automaton)))

(rule (alias symbolstartpos)
  (action
    (diff symbolstartpos.automaton.resolved.exp
      symbolstartpos.automaton.resolved)))

(rule (alias symbolstartpos)
  (action (diff symbolstartpos.conflicts.exp symbolstartpos.conflicts)))

(rule (target sysver.opp.out) (deps sysver.mly)
  (action
    (with-outputs-to sysver.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias sysver) (action (diff sysver.opp.exp sysver.opp.out)))

(rule
  (targets sysver.out sysver.automaton sysver.automaton.resolved
    sysver.conflicts sysver.timings)
  (deps sysver.mly)
  (action
    (with-outputs-to sysver.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to sysver.timings %{deps})))))

(rule (alias sysver) (action (diff sysver.exp sysver.out)))

(rule (alias sysver) (action (diff sysver.automaton.exp sysver.automaton)))

(rule (alias sysver)
  (action (diff sysver.automaton.resolved.exp sysver.automaton.resolved)))

(rule (alias sysver) (action (diff sysver.conflicts.exp sysver.conflicts)))

(rule (target talparser.opp.out) (deps talparser.mly)
  (action
    (with-outputs-to talparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias talparser) (action (diff talparser.opp.exp talparser.opp.out)))

(rule
  (targets talparser.out talparser.automaton talparser.automaton.resolved
    talparser.conflicts talparser.timings)
  (deps talparser.mly)
  (action
    (with-outputs-to talparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to talparser.timings %{deps})))))

(rule (alias talparser) (action (diff talparser.exp talparser.out)))

(rule (alias talparser)
  (action (diff talparser.automaton.exp talparser.automaton)))

(rule (alias talparser)
  (action
    (diff talparser.automaton.resolved.exp talparser.automaton.resolved)))

(rule (alias talparser)
  (action (diff talparser.conflicts.exp talparser.conflicts)))

(rule (target tilde-used-warning.opp.out) (deps tilde-used-warning.mly)
  (action
    (with-outputs-to tilde-used-warning.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias tilde-used-warning)
  (action (diff tilde-used-warning.opp.exp tilde-used-warning.opp.out)))

(rule
  (targets tilde-used-warning.out tilde-used-warning.automaton
    tilde-used-warning.automaton.resolved tilde-used-warning.conflicts
    tilde-used-warning.timings)
  (deps tilde-used-warning.mly)
  (action
    (with-outputs-to tilde-used-warning.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to tilde-used-warning.timings %{deps})))))

(rule (alias tilde-used-warning)
  (action (diff tilde-used-warning.exp tilde-used-warning.out)))

(rule (alias tilde-used-warning)
  (action
    (diff tilde-used-warning.automaton.exp tilde-used-warning.automaton)))

(rule (alias tilde-used-warning)
  (action
    (diff tilde-used-warning.automaton.resolved.exp
      tilde-used-warning.automaton.resolved)))

(rule (alias tilde-used-warning)
  (action
    (diff tilde-used-warning.conflicts.exp tilde-used-warning.conflicts)))

(rule (target tony-rc_parse.opp.out) (deps tony-rc_parse.mly)
  (action
    (with-outputs-to tony-rc_parse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias tony-rc_parse)
  (action (diff tony-rc_parse.opp.exp tony-rc_parse.opp.out)))

(rule
  (targets tony-rc_parse.out tony-rc_parse.automaton
    tony-rc_parse.automaton.resolved tony-rc_parse.conflicts
    tony-rc_parse.timings)
  (deps tony-rc_parse.mly)
  (action
    (with-outputs-to tony-rc_parse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to tony-rc_parse.timings %{deps})))))

(rule (alias tony-rc_parse)
  (action (diff tony-rc_parse.exp tony-rc_parse.out)))

(rule (alias tony-rc_parse)
  (action (diff tony-rc_parse.automaton.exp tony-rc_parse.automaton)))

(rule (alias tony-rc_parse)
  (action
    (diff tony-rc_parse.automaton.resolved.exp
      tony-rc_parse.automaton.resolved)))

(rule (alias tony-rc_parse)
  (action (diff tony-rc_parse.conflicts.exp tony-rc_parse.conflicts)))

(rule (target tony-xmlparse.opp.out) (deps tony-xmlparse.mly)
  (action
    (with-outputs-to tony-xmlparse.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias tony-xmlparse)
  (action (diff tony-xmlparse.opp.exp tony-xmlparse.opp.out)))

(rule
  (targets tony-xmlparse.out tony-xmlparse.automaton
    tony-xmlparse.automaton.resolved tony-xmlparse.conflicts
    tony-xmlparse.timings)
  (deps tony-xmlparse.mly)
  (action
    (with-outputs-to tony-xmlparse.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to tony-xmlparse.timings %{deps})))))

(rule (alias tony-xmlparse)
  (action (diff tony-xmlparse.exp tony-xmlparse.out)))

(rule (alias tony-xmlparse)
  (action (diff tony-xmlparse.automaton.exp tony-xmlparse.automaton)))

(rule (alias tony-xmlparse)
  (action
    (diff tony-xmlparse.automaton.resolved.exp
      tony-xmlparse.automaton.resolved)))

(rule (alias tony-xmlparse)
  (action (diff tony-xmlparse.conflicts.exp tony-xmlparse.conflicts)))

(rule (target touist.3.5.0-parser.opp.out) (deps touist.3.5.0-parser.mly)
  (action
    (with-outputs-to touist.3.5.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias touist.3.5.0-parser)
  (action (diff touist.3.5.0-parser.opp.exp touist.3.5.0-parser.opp.out)))

(rule
  (targets touist.3.5.0-parser.out touist.3.5.0-parser.automaton
    touist.3.5.0-parser.automaton.resolved touist.3.5.0-parser.conflicts
    touist.3.5.0-parser.timings)
  (deps touist.3.5.0-parser.mly)
  (action
    (with-outputs-to touist.3.5.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to touist.3.5.0-parser.timings %{deps})))))

(rule (alias touist.3.5.0-parser)
  (action (diff touist.3.5.0-parser.exp touist.3.5.0-parser.out)))

(rule (alias touist.3.5.0-parser)
  (action
    (diff touist.3.5.0-parser.automaton.exp touist.3.5.0-parser.automaton)))

(rule (alias touist.3.5.0-parser)
  (action
    (diff touist.3.5.0-parser.automaton.resolved.exp
      touist.3.5.0-parser.automaton.resolved)))

(rule (alias touist.3.5.0-parser)
  (action
    (diff touist.3.5.0-parser.conflicts.exp touist.3.5.0-parser.conflicts)))

(rule (target toy.opp.out) (deps toy.mly)
  (action
    (with-outputs-to toy.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias toy) (action (diff toy.opp.exp toy.opp.out)))

(rule
  (targets toy.out toy.automaton toy.automaton.resolved toy.conflicts
    toy.timings)
  (deps toy.mly)
  (action
    (with-outputs-to toy.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to toy.timings %{deps})))))

(rule (alias toy) (action (diff toy.exp toy.out)))

(rule (alias toy) (action (diff toy.automaton.exp toy.automaton)))

(rule (alias toy)
  (action (diff toy.automaton.resolved.exp toy.automaton.resolved)))

(rule (alias toy) (action (diff toy.conflicts.exp toy.conflicts)))

(rule (target tptp2cime.opp.out) (deps tptp2cime.mly)
  (action
    (with-outputs-to tptp2cime.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias tptp2cime) (action (diff tptp2cime.opp.exp tptp2cime.opp.out)))

(rule
  (targets tptp2cime.out tptp2cime.automaton tptp2cime.automaton.resolved
    tptp2cime.conflicts tptp2cime.timings)
  (deps tptp2cime.mly)
  (action
    (with-outputs-to tptp2cime.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to tptp2cime.timings %{deps})))))

(rule (alias tptp2cime) (action (diff tptp2cime.exp tptp2cime.out)))

(rule (alias tptp2cime)
  (action (diff tptp2cime.automaton.exp tptp2cime.automaton)))

(rule (alias tptp2cime)
  (action
    (diff tptp2cime.automaton.resolved.exp tptp2cime.automaton.resolved)))

(rule (alias tptp2cime)
  (action (diff tptp2cime.conflicts.exp tptp2cime.conflicts)))

(rule (target typage.opp.out) (deps typage.mly)
  (action
    (with-outputs-to typage.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias typage) (action (diff typage.opp.exp typage.opp.out)))

(rule
  (targets typage.out typage.automaton typage.automaton.resolved
    typage.conflicts typage.timings)
  (deps typage.mly)
  (action
    (with-outputs-to typage.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to typage.timings %{deps})))))

(rule (alias typage) (action (diff typage.exp typage.out)))

(rule (alias typage) (action (diff typage.automaton.exp typage.automaton)))

(rule (alias typage)
  (action (diff typage.automaton.resolved.exp typage.automaton.resolved)))

(rule (alias typage) (action (diff typage.conflicts.exp typage.conflicts)))

(rule (target typed-freshml.opp.out) (deps typed-freshml.mly)
  (action
    (with-outputs-to typed-freshml.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias typed-freshml)
  (action (diff typed-freshml.opp.exp typed-freshml.opp.out)))

(rule
  (targets typed-freshml.out typed-freshml.automaton
    typed-freshml.automaton.resolved typed-freshml.conflicts
    typed-freshml.timings)
  (deps typed-freshml.mly)
  (action
    (with-outputs-to typed-freshml.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to typed-freshml.timings %{deps})))))

(rule (alias typed-freshml)
  (action (diff typed-freshml.exp typed-freshml.out)))

(rule (alias typed-freshml)
  (action (diff typed-freshml.automaton.exp typed-freshml.automaton)))

(rule (alias typed-freshml)
  (action
    (diff typed-freshml.automaton.resolved.exp
      typed-freshml.automaton.resolved)))

(rule (alias typed-freshml)
  (action (diff typed-freshml.conflicts.exp typed-freshml.conflicts)))

(rule (target undetermined_sort.opp.out) (deps undetermined_sort.mly)
  (action
    (with-outputs-to undetermined_sort.opp.out
      (with-accepted-exit-codes 0
        (run menhir --only-preprocess %{read-lines:undetermined_sort.flags}
          %{deps})))))

(rule (alias undetermined_sort)
  (action (diff undetermined_sort.opp.exp undetermined_sort.opp.out)))

(rule
  (targets undetermined_sort.out undetermined_sort.automaton
    undetermined_sort.automaton.resolved undetermined_sort.conflicts
    undetermined_sort.timings)
  (deps undetermined_sort.mly)
  (action
    (with-outputs-to undetermined_sort.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to undetermined_sort.timings
          %{read-lines:undetermined_sort.flags} %{deps})))))

(rule (alias undetermined_sort)
  (action (diff undetermined_sort.exp undetermined_sort.out)))

(rule (alias undetermined_sort)
  (action (diff undetermined_sort.automaton.exp undetermined_sort.automaton)))

(rule (alias undetermined_sort)
  (action
    (diff undetermined_sort.automaton.resolved.exp
      undetermined_sort.automaton.resolved)))

(rule (alias undetermined_sort)
  (action (diff undetermined_sort.conflicts.exp undetermined_sort.conflicts)))

(rule (target unigram.opp.out) (deps unigram.mly)
  (action
    (with-outputs-to unigram.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias unigram) (action (diff unigram.opp.exp unigram.opp.out)))

(rule
  (targets unigram.out unigram.automaton unigram.automaton.resolved
    unigram.conflicts unigram.timings)
  (deps unigram.mly)
  (action
    (with-outputs-to unigram.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to unigram.timings %{deps})))))

(rule (alias unigram) (action (diff unigram.exp unigram.out)))

(rule (alias unigram)
  (action (diff unigram.automaton.exp unigram.automaton)))

(rule (alias unigram)
  (action (diff unigram.automaton.resolved.exp unigram.automaton.resolved)))

(rule (alias unigram)
  (action (diff unigram.conflicts.exp unigram.conflicts)))

(rule (target unreachable-symbol.opp.out) (deps unreachable-symbol.mly)
  (action
    (with-outputs-to unreachable-symbol.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias unreachable-symbol)
  (action (diff unreachable-symbol.opp.exp unreachable-symbol.opp.out)))

(rule
  (targets unreachable-symbol.out unreachable-symbol.automaton
    unreachable-symbol.automaton.resolved unreachable-symbol.conflicts
    unreachable-symbol.timings)
  (deps unreachable-symbol.mly)
  (action
    (with-outputs-to unreachable-symbol.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to unreachable-symbol.timings %{deps})))))

(rule (alias unreachable-symbol)
  (action (diff unreachable-symbol.exp unreachable-symbol.out)))

(rule (alias unreachable-symbol)
  (action
    (diff unreachable-symbol.automaton.exp unreachable-symbol.automaton)))

(rule (alias unreachable-symbol)
  (action
    (diff unreachable-symbol.automaton.resolved.exp
      unreachable-symbol.automaton.resolved)))

(rule (alias unreachable-symbol)
  (action
    (diff unreachable-symbol.conflicts.exp unreachable-symbol.conflicts)))

(rule (target unused-attribute.opp.out) (deps unused-attribute.mly)
  (action
    (with-outputs-to unused-attribute.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias unused-attribute)
  (action (diff unused-attribute.opp.exp unused-attribute.opp.out)))

(rule
  (targets unused-attribute.out unused-attribute.automaton
    unused-attribute.automaton.resolved unused-attribute.conflicts
    unused-attribute.timings)
  (deps unused-attribute.mly)
  (action
    (with-outputs-to unused-attribute.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to unused-attribute.timings %{deps})))))

(rule (alias unused-attribute)
  (action (diff unused-attribute.exp unused-attribute.out)))

(rule (alias unused-attribute)
  (action (diff unused-attribute.automaton.exp unused-attribute.automaton)))

(rule (alias unused-attribute)
  (action
    (diff unused-attribute.automaton.resolved.exp
      unused-attribute.automaton.resolved)))

(rule (alias unused-attribute)
  (action (diff unused-attribute.conflicts.exp unused-attribute.conflicts)))

(rule (target unused-pseudo-token.opp.out) (deps unused-pseudo-token.mly)
  (action
    (with-outputs-to unused-pseudo-token.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias unused-pseudo-token)
  (action (diff unused-pseudo-token.opp.exp unused-pseudo-token.opp.out)))

(rule
  (targets unused-pseudo-token.out unused-pseudo-token.automaton
    unused-pseudo-token.automaton.resolved unused-pseudo-token.conflicts
    unused-pseudo-token.timings)
  (deps unused-pseudo-token.mly)
  (action
    (with-outputs-to unused-pseudo-token.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to unused-pseudo-token.timings %{deps})))))

(rule (alias unused-pseudo-token)
  (action (diff unused-pseudo-token.exp unused-pseudo-token.out)))

(rule (alias unused-pseudo-token)
  (action
    (diff unused-pseudo-token.automaton.exp unused-pseudo-token.automaton)))

(rule (alias unused-pseudo-token)
  (action
    (diff unused-pseudo-token.automaton.resolved.exp
      unused-pseudo-token.automaton.resolved)))

(rule (alias unused-pseudo-token)
  (action
    (diff unused-pseudo-token.conflicts.exp unused-pseudo-token.conflicts)))

(rule (target unused-token1.opp.out) (deps unused-token1.mly)
  (action
    (with-outputs-to unused-token1.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias unused-token1)
  (action (diff unused-token1.opp.exp unused-token1.opp.out)))

(rule
  (targets unused-token1.out unused-token1.automaton
    unused-token1.automaton.resolved unused-token1.conflicts
    unused-token1.timings)
  (deps unused-token1.mly)
  (action
    (with-outputs-to unused-token1.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to unused-token1.timings %{deps})))))

(rule (alias unused-token1)
  (action (diff unused-token1.exp unused-token1.out)))

(rule (alias unused-token1)
  (action (diff unused-token1.automaton.exp unused-token1.automaton)))

(rule (alias unused-token1)
  (action
    (diff unused-token1.automaton.resolved.exp
      unused-token1.automaton.resolved)))

(rule (alias unused-token1)
  (action (diff unused-token1.conflicts.exp unused-token1.conflicts)))

(rule (target unused-value.opp.out) (deps unused-value.mly)
  (action
    (with-outputs-to unused-value.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias unused-value)
  (action (diff unused-value.opp.exp unused-value.opp.out)))

(rule
  (targets unused-value.out unused-value.automaton
    unused-value.automaton.resolved unused-value.conflicts
    unused-value.timings)
  (deps unused-value.mly)
  (action
    (with-outputs-to unused-value.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to unused-value.timings %{deps})))))

(rule (alias unused-value) (action (diff unused-value.exp unused-value.out)))

(rule (alias unused-value)
  (action (diff unused-value.automaton.exp unused-value.automaton)))

(rule (alias unused-value)
  (action
    (diff unused-value.automaton.resolved.exp
      unused-value.automaton.resolved)))

(rule (alias unused-value)
  (action (diff unused-value.conflicts.exp unused-value.conflicts)))

(rule (target uppercase.opp.out) (deps uppercase.mly)
  (action
    (with-outputs-to uppercase.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias uppercase) (action (diff uppercase.opp.exp uppercase.opp.out)))

(rule
  (targets uppercase.out uppercase.automaton uppercase.automaton.resolved
    uppercase.conflicts uppercase.timings)
  (deps uppercase.mly)
  (action
    (with-outputs-to uppercase.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to uppercase.timings %{deps})))))

(rule (alias uppercase) (action (diff uppercase.exp uppercase.out)))

(rule (alias uppercase)
  (action (diff uppercase.automaton.exp uppercase.automaton)))

(rule (alias uppercase)
  (action
    (diff uppercase.automaton.resolved.exp uppercase.automaton.resolved)))

(rule (alias uppercase)
  (action (diff uppercase.conflicts.exp uppercase.conflicts)))

(rule (target useless-priorities.opp.out) (deps useless-priorities.mly)
  (action
    (with-outputs-to useless-priorities.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias useless-priorities)
  (action (diff useless-priorities.opp.exp useless-priorities.opp.out)))

(rule
  (targets useless-priorities.out useless-priorities.automaton
    useless-priorities.automaton.resolved useless-priorities.conflicts
    useless-priorities.timings)
  (deps useless-priorities.mly)
  (action
    (with-outputs-to useless-priorities.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to useless-priorities.timings %{deps})))))

(rule (alias useless-priorities)
  (action (diff useless-priorities.exp useless-priorities.out)))

(rule (alias useless-priorities)
  (action
    (diff useless-priorities.automaton.exp useless-priorities.automaton)))

(rule (alias useless-priorities)
  (action
    (diff useless-priorities.automaton.resolved.exp
      useless-priorities.automaton.resolved)))

(rule (alias useless-priorities)
  (action
    (diff useless-priorities.conflicts.exp useless-priorities.conflicts)))

(rule (target useless-pseudo-token.opp.out) (deps useless-pseudo-token.mly)
  (action
    (with-outputs-to useless-pseudo-token.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias useless-pseudo-token)
  (action (diff useless-pseudo-token.opp.exp useless-pseudo-token.opp.out)))

(rule
  (targets useless-pseudo-token.out useless-pseudo-token.automaton
    useless-pseudo-token.automaton.resolved useless-pseudo-token.conflicts
    useless-pseudo-token.timings)
  (deps useless-pseudo-token.mly)
  (action
    (with-outputs-to useless-pseudo-token.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to useless-pseudo-token.timings %{deps})))))

(rule (alias useless-pseudo-token)
  (action (diff useless-pseudo-token.exp useless-pseudo-token.out)))

(rule (alias useless-pseudo-token)
  (action
    (diff useless-pseudo-token.automaton.exp useless-pseudo-token.automaton)))

(rule (alias useless-pseudo-token)
  (action
    (diff useless-pseudo-token.automaton.resolved.exp
      useless-pseudo-token.automaton.resolved)))

(rule (alias useless-pseudo-token)
  (action
    (diff useless-pseudo-token.conflicts.exp useless-pseudo-token.conflicts)))

(rule (target verilog.opp.out) (deps verilog.mly)
  (action
    (with-outputs-to verilog.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias verilog) (action (diff verilog.opp.exp verilog.opp.out)))

(rule
  (targets verilog.out verilog.automaton verilog.automaton.resolved
    verilog.conflicts verilog.timings)
  (deps verilog.mly)
  (action
    (with-outputs-to verilog.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to verilog.timings %{deps})))))

(rule (alias verilog) (action (diff verilog.exp verilog.out)))

(rule (alias verilog)
  (action (diff verilog.automaton.exp verilog.automaton)))

(rule (alias verilog)
  (action (diff verilog.automaton.resolved.exp verilog.automaton.resolved)))

(rule (alias verilog)
  (action (diff verilog.conflicts.exp verilog.conflicts)))

(rule (target wallace.opp.out) (deps wallace.mly)
  (action
    (with-outputs-to wallace.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias wallace) (action (diff wallace.opp.exp wallace.opp.out)))

(rule
  (targets wallace.out wallace.automaton wallace.automaton.resolved
    wallace.conflicts wallace.timings)
  (deps wallace.mly)
  (action
    (with-outputs-to wallace.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to wallace.timings %{deps})))))

(rule (alias wallace) (action (diff wallace.exp wallace.out)))

(rule (alias wallace)
  (action (diff wallace.automaton.exp wallace.automaton)))

(rule (alias wallace)
  (action (diff wallace.automaton.resolved.exp wallace.automaton.resolved)))

(rule (alias wallace)
  (action (diff wallace.conflicts.exp wallace.conflicts)))

(rule (target wasm.1.0-parser.opp.out) (deps wasm.1.0-parser.mly)
  (action
    (with-outputs-to wasm.1.0-parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias wasm.1.0-parser)
  (action (diff wasm.1.0-parser.opp.exp wasm.1.0-parser.opp.out)))

(rule
  (targets wasm.1.0-parser.out wasm.1.0-parser.automaton
    wasm.1.0-parser.automaton.resolved wasm.1.0-parser.conflicts
    wasm.1.0-parser.timings)
  (deps wasm.1.0-parser.mly)
  (action
    (with-outputs-to wasm.1.0-parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to wasm.1.0-parser.timings %{deps})))))

(rule (alias wasm.1.0-parser)
  (action (diff wasm.1.0-parser.exp wasm.1.0-parser.out)))

(rule (alias wasm.1.0-parser)
  (action (diff wasm.1.0-parser.automaton.exp wasm.1.0-parser.automaton)))

(rule (alias wasm.1.0-parser)
  (action
    (diff wasm.1.0-parser.automaton.resolved.exp
      wasm.1.0-parser.automaton.resolved)))

(rule (alias wasm.1.0-parser)
  (action (diff wasm.1.0-parser.conflicts.exp wasm.1.0-parser.conflicts)))

(rule (target webidl.1.4-parser00.opp.out)
  (deps webidl.1.4-parser00.mly webidl.1.4-parser01.mly
    webidl.1.4-parser03.mly webidl.1.4-parser04.mly)
  (action
    (with-outputs-to webidl.1.4-parser00.opp.out
      (with-accepted-exit-codes 0
        (run menhir --base webidl.1.4-parser00 --only-preprocess %{deps})))))

(rule (alias webidl.1.4-parser00)
  (action (diff webidl.1.4-parser00.opp.exp webidl.1.4-parser00.opp.out)))

(rule
  (targets webidl.1.4-parser00.out webidl.1.4-parser00.automaton
    webidl.1.4-parser00.automaton.resolved webidl.1.4-parser00.conflicts
    webidl.1.4-parser00.timings)
  (deps webidl.1.4-parser00.mly webidl.1.4-parser01.mly
    webidl.1.4-parser03.mly webidl.1.4-parser04.mly)
  (action
    (with-outputs-to webidl.1.4-parser00.out
      (with-accepted-exit-codes 0
        (run menhir --base webidl.1.4-parser00 --dump --dump-resolved
          --explain -lg 2 -la 2 -lc 2 --timings-to
          webidl.1.4-parser00.timings %{deps})))))

(rule (alias webidl.1.4-parser00)
  (action (diff webidl.1.4-parser00.exp webidl.1.4-parser00.out)))

(rule (alias webidl.1.4-parser00)
  (action
    (diff webidl.1.4-parser00.automaton.exp webidl.1.4-parser00.automaton)))

(rule (alias webidl.1.4-parser00)
  (action
    (diff webidl.1.4-parser00.automaton.resolved.exp
      webidl.1.4-parser00.automaton.resolved)))

(rule (alias webidl.1.4-parser00)
  (action
    (diff webidl.1.4-parser00.conflicts.exp webidl.1.4-parser00.conflicts)))

(rule (target why-clparser.opp.out) (deps why-clparser.mly)
  (action
    (with-outputs-to why-clparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias why-clparser)
  (action (diff why-clparser.opp.exp why-clparser.opp.out)))

(rule
  (targets why-clparser.out why-clparser.automaton
    why-clparser.automaton.resolved why-clparser.conflicts
    why-clparser.timings)
  (deps why-clparser.mly)
  (action
    (with-outputs-to why-clparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to why-clparser.timings %{deps})))))

(rule (alias why-clparser) (action (diff why-clparser.exp why-clparser.out)))

(rule (alias why-clparser)
  (action (diff why-clparser.automaton.exp why-clparser.automaton)))

(rule (alias why-clparser)
  (action
    (diff why-clparser.automaton.resolved.exp
      why-clparser.automaton.resolved)))

(rule (alias why-clparser)
  (action (diff why-clparser.conflicts.exp why-clparser.conflicts)))

(rule (target why-cparser.opp.out) (deps why-cparser.mly)
  (action
    (with-outputs-to why-cparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias why-cparser)
  (action (diff why-cparser.opp.exp why-cparser.opp.out)))

(rule
  (targets why-cparser.out why-cparser.automaton
    why-cparser.automaton.resolved why-cparser.conflicts why-cparser.timings)
  (deps why-cparser.mly)
  (action
    (with-outputs-to why-cparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to why-cparser.timings %{deps})))))

(rule (alias why-cparser) (action (diff why-cparser.exp why-cparser.out)))

(rule (alias why-cparser)
  (action (diff why-cparser.automaton.exp why-cparser.automaton)))

(rule (alias why-cparser)
  (action
    (diff why-cparser.automaton.resolved.exp why-cparser.automaton.resolved)))

(rule (alias why-cparser)
  (action (diff why-cparser.conflicts.exp why-cparser.conflicts)))

(rule (target why3.opp.out) (deps why3.mly)
  (action
    (with-outputs-to why3.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias why3) (action (diff why3.opp.exp why3.opp.out)))

(rule
  (targets why3.out why3.automaton why3.automaton.resolved why3.conflicts
    why3.timings)
  (deps why3.mly)
  (action
    (with-outputs-to why3.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to why3.timings %{deps})))))

(rule (alias why3) (action (diff why3.exp why3.out)))

(rule (alias why3) (action (diff why3.automaton.exp why3.automaton)))

(rule (alias why3)
  (action (diff why3.automaton.resolved.exp why3.automaton.resolved)))

(rule (alias why3) (action (diff why3.conflicts.exp why3.conflicts)))

(rule (target why3.1.1.0-py_parser.opp.out) (deps why3.1.1.0-py_parser.mly)
  (action
    (with-outputs-to why3.1.1.0-py_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias why3.1.1.0-py_parser)
  (action (diff why3.1.1.0-py_parser.opp.exp why3.1.1.0-py_parser.opp.out)))

(rule
  (targets why3.1.1.0-py_parser.out why3.1.1.0-py_parser.automaton
    why3.1.1.0-py_parser.automaton.resolved why3.1.1.0-py_parser.conflicts
    why3.1.1.0-py_parser.timings)
  (deps why3.1.1.0-py_parser.mly)
  (action
    (with-outputs-to why3.1.1.0-py_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to why3.1.1.0-py_parser.timings %{deps})))))

(rule (alias why3.1.1.0-py_parser)
  (action (diff why3.1.1.0-py_parser.exp why3.1.1.0-py_parser.out)))

(rule (alias why3.1.1.0-py_parser)
  (action
    (diff why3.1.1.0-py_parser.automaton.exp why3.1.1.0-py_parser.automaton)))

(rule (alias why3.1.1.0-py_parser)
  (action
    (diff why3.1.1.0-py_parser.automaton.resolved.exp
      why3.1.1.0-py_parser.automaton.resolved)))

(rule (alias why3.1.1.0-py_parser)
  (action
    (diff why3.1.1.0-py_parser.conflicts.exp why3.1.1.0-py_parser.conflicts)))

(rule (target xpath_parser.opp.out) (deps xpath_parser.mly)
  (action
    (with-outputs-to xpath_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias xpath_parser)
  (action (diff xpath_parser.opp.exp xpath_parser.opp.out)))

(rule
  (targets xpath_parser.out xpath_parser.automaton
    xpath_parser.automaton.resolved xpath_parser.conflicts
    xpath_parser.timings)
  (deps xpath_parser.mly)
  (action
    (with-outputs-to xpath_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to xpath_parser.timings %{deps})))))

(rule (alias xpath_parser) (action (diff xpath_parser.exp xpath_parser.out)))

(rule (alias xpath_parser)
  (action (diff xpath_parser.automaton.exp xpath_parser.automaton)))

(rule (alias xpath_parser)
  (action
    (diff xpath_parser.automaton.resolved.exp
      xpath_parser.automaton.resolved)))

(rule (alias xpath_parser)
  (action (diff xpath_parser.conflicts.exp xpath_parser.conflicts)))

(rule (target yann.opp.out) (deps yann.mly)
  (action
    (with-outputs-to yann.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias yann) (action (diff yann.opp.exp yann.opp.out)))

(rule
  (targets yann.out yann.automaton yann.automaton.resolved yann.conflicts
    yann.timings)
  (deps yann.mly)
  (action
    (with-outputs-to yann.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to yann.timings %{deps})))))

(rule (alias yann) (action (diff yann.exp yann.out)))

(rule (alias yann) (action (diff yann.automaton.exp yann.automaton)))

(rule (alias yann)
  (action (diff yann.automaton.resolved.exp yann.automaton.resolved)))

(rule (alias yann) (action (diff yann.conflicts.exp yann.conflicts)))

(rule (target yaparser.opp.out) (deps yaparser.mly)
  (action
    (with-outputs-to yaparser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias yaparser) (action (diff yaparser.opp.exp yaparser.opp.out)))

(rule
  (targets yaparser.out yaparser.automaton yaparser.automaton.resolved
    yaparser.conflicts yaparser.timings)
  (deps yaparser.mly)
  (action
    (with-outputs-to yaparser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to yaparser.timings %{deps})))))

(rule (alias yaparser) (action (diff yaparser.exp yaparser.out)))

(rule (alias yaparser)
  (action (diff yaparser.automaton.exp yaparser.automaton)))

(rule (alias yaparser)
  (action (diff yaparser.automaton.resolved.exp yaparser.automaton.resolved)))

(rule (alias yaparser)
  (action (diff yaparser.conflicts.exp yaparser.conflicts)))

(rule (target zenon.opp.out) (deps zenon.mly)
  (action
    (with-outputs-to zenon.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias zenon) (action (diff zenon.opp.exp zenon.opp.out)))

(rule
  (targets zenon.out zenon.automaton zenon.automaton.resolved zenon.conflicts
    zenon.timings)
  (deps zenon.mly)
  (action
    (with-outputs-to zenon.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to zenon.timings %{deps})))))

(rule (alias zenon) (action (diff zenon.exp zenon.out)))

(rule (alias zenon) (action (diff zenon.automaton.exp zenon.automaton)))

(rule (alias zenon)
  (action (diff zenon.automaton.resolved.exp zenon.automaton.resolved)))

(rule (alias zenon) (action (diff zenon.conflicts.exp zenon.conflicts)))

(rule (target zenon.0.8.4-parsecoq.opp.out) (deps zenon.0.8.4-parsecoq.mly)
  (action
    (with-outputs-to zenon.0.8.4-parsecoq.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias zenon.0.8.4-parsecoq)
  (action (diff zenon.0.8.4-parsecoq.opp.exp zenon.0.8.4-parsecoq.opp.out)))

(rule
  (targets zenon.0.8.4-parsecoq.out zenon.0.8.4-parsecoq.automaton
    zenon.0.8.4-parsecoq.automaton.resolved zenon.0.8.4-parsecoq.conflicts
    zenon.0.8.4-parsecoq.timings)
  (deps zenon.0.8.4-parsecoq.mly)
  (action
    (with-outputs-to zenon.0.8.4-parsecoq.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to zenon.0.8.4-parsecoq.timings %{deps})))))

(rule (alias zenon.0.8.4-parsecoq)
  (action (diff zenon.0.8.4-parsecoq.exp zenon.0.8.4-parsecoq.out)))

(rule (alias zenon.0.8.4-parsecoq)
  (action
    (diff zenon.0.8.4-parsecoq.automaton.exp zenon.0.8.4-parsecoq.automaton)))

(rule (alias zenon.0.8.4-parsecoq)
  (action
    (diff zenon.0.8.4-parsecoq.automaton.resolved.exp
      zenon.0.8.4-parsecoq.automaton.resolved)))

(rule (alias zenon.0.8.4-parsecoq)
  (action
    (diff zenon.0.8.4-parsecoq.conflicts.exp zenon.0.8.4-parsecoq.conflicts)))

(rule (target zipperposition.1.5-Parse_dk.opp.out)
  (deps zipperposition.1.5-Parse_dk.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_dk.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias zipperposition.1.5-Parse_dk)
  (action
    (diff zipperposition.1.5-Parse_dk.opp.exp
      zipperposition.1.5-Parse_dk.opp.out)))

(rule
  (targets zipperposition.1.5-Parse_dk.out
    zipperposition.1.5-Parse_dk.automaton
    zipperposition.1.5-Parse_dk.automaton.resolved
    zipperposition.1.5-Parse_dk.conflicts
    zipperposition.1.5-Parse_dk.timings)
  (deps zipperposition.1.5-Parse_dk.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_dk.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to zipperposition.1.5-Parse_dk.timings %{deps})))))

(rule (alias zipperposition.1.5-Parse_dk)
  (action
    (diff zipperposition.1.5-Parse_dk.exp zipperposition.1.5-Parse_dk.out)))

(rule (alias zipperposition.1.5-Parse_dk)
  (action
    (diff zipperposition.1.5-Parse_dk.automaton.exp
      zipperposition.1.5-Parse_dk.automaton)))

(rule (alias zipperposition.1.5-Parse_dk)
  (action
    (diff zipperposition.1.5-Parse_dk.automaton.resolved.exp
      zipperposition.1.5-Parse_dk.automaton.resolved)))

(rule (alias zipperposition.1.5-Parse_dk)
  (action
    (diff zipperposition.1.5-Parse_dk.conflicts.exp
      zipperposition.1.5-Parse_dk.conflicts)))

(rule (target zipperposition.1.5-Parse_tptp.opp.out)
  (deps zipperposition.1.5-Parse_tptp.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_tptp.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias zipperposition.1.5-Parse_tptp)
  (action
    (diff zipperposition.1.5-Parse_tptp.opp.exp
      zipperposition.1.5-Parse_tptp.opp.out)))

(rule
  (targets zipperposition.1.5-Parse_tptp.out
    zipperposition.1.5-Parse_tptp.automaton
    zipperposition.1.5-Parse_tptp.automaton.resolved
    zipperposition.1.5-Parse_tptp.conflicts
    zipperposition.1.5-Parse_tptp.timings)
  (deps zipperposition.1.5-Parse_tptp.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_tptp.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to zipperposition.1.5-Parse_tptp.timings %{deps})))))

(rule (alias zipperposition.1.5-Parse_tptp)
  (action
    (diff zipperposition.1.5-Parse_tptp.exp
      zipperposition.1.5-Parse_tptp.out)))

(rule (alias zipperposition.1.5-Parse_tptp)
  (action
    (diff zipperposition.1.5-Parse_tptp.automaton.exp
      zipperposition.1.5-Parse_tptp.automaton)))

(rule (alias zipperposition.1.5-Parse_tptp)
  (action
    (diff zipperposition.1.5-Parse_tptp.automaton.resolved.exp
      zipperposition.1.5-Parse_tptp.automaton.resolved)))

(rule (alias zipperposition.1.5-Parse_tptp)
  (action
    (diff zipperposition.1.5-Parse_tptp.conflicts.exp
      zipperposition.1.5-Parse_tptp.conflicts)))

(rule (target zipperposition.1.5-Parse_zf.opp.out)
  (deps zipperposition.1.5-Parse_zf.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_zf.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias zipperposition.1.5-Parse_zf)
  (action
    (diff zipperposition.1.5-Parse_zf.opp.exp
      zipperposition.1.5-Parse_zf.opp.out)))

(rule
  (targets zipperposition.1.5-Parse_zf.out
    zipperposition.1.5-Parse_zf.automaton
    zipperposition.1.5-Parse_zf.automaton.resolved
    zipperposition.1.5-Parse_zf.conflicts
    zipperposition.1.5-Parse_zf.timings)
  (deps zipperposition.1.5-Parse_zf.mly)
  (action
    (with-outputs-to zipperposition.1.5-Parse_zf.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to zipperposition.1.5-Parse_zf.timings %{deps})))))

(rule (alias zipperposition.1.5-Parse_zf)
  (action
    (diff zipperposition.1.5-Parse_zf.exp zipperposition.1.5-Parse_zf.out)))

(rule (alias zipperposition.1.5-Parse_zf)
  (action
    (diff zipperposition.1.5-Parse_zf.automaton.exp
      zipperposition.1.5-Parse_zf.automaton)))

(rule (alias zipperposition.1.5-Parse_zf)
  (action
    (diff zipperposition.1.5-Parse_zf.automaton.resolved.exp
      zipperposition.1.5-Parse_zf.automaton.resolved)))

(rule (alias zipperposition.1.5-Parse_zf)
  (action
    (diff zipperposition.1.5-Parse_zf.conflicts.exp
      zipperposition.1.5-Parse_zf.conflicts)))

(rule (target zipperposition.1.5-Tip_parser.opp.out)
  (deps zipperposition.1.5-Tip_parser.mly)
  (action
    (with-outputs-to zipperposition.1.5-Tip_parser.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias zipperposition.1.5-Tip_parser)
  (action
    (diff zipperposition.1.5-Tip_parser.opp.exp
      zipperposition.1.5-Tip_parser.opp.out)))

(rule
  (targets zipperposition.1.5-Tip_parser.out
    zipperposition.1.5-Tip_parser.automaton
    zipperposition.1.5-Tip_parser.automaton.resolved
    zipperposition.1.5-Tip_parser.conflicts
    zipperposition.1.5-Tip_parser.timings)
  (deps zipperposition.1.5-Tip_parser.mly)
  (action
    (with-outputs-to zipperposition.1.5-Tip_parser.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to zipperposition.1.5-Tip_parser.timings %{deps})))))

(rule (alias zipperposition.1.5-Tip_parser)
  (action
    (diff zipperposition.1.5-Tip_parser.exp
      zipperposition.1.5-Tip_parser.out)))

(rule (alias zipperposition.1.5-Tip_parser)
  (action
    (diff zipperposition.1.5-Tip_parser.automaton.exp
      zipperposition.1.5-Tip_parser.automaton)))

(rule (alias zipperposition.1.5-Tip_parser)
  (action
    (diff zipperposition.1.5-Tip_parser.automaton.resolved.exp
      zipperposition.1.5-Tip_parser.automaton.resolved)))

(rule (alias zipperposition.1.5-Tip_parser)
  (action
    (diff zipperposition.1.5-Tip_parser.conflicts.exp
      zipperposition.1.5-Tip_parser.conflicts)))

(rule (target zyvaall.opp.out) (deps zyvaall.mly)
  (action
    (with-outputs-to zyvaall.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias zyvaall) (action (diff zyvaall.opp.exp zyvaall.opp.out)))

(rule
  (targets zyvaall.out zyvaall.automaton zyvaall.automaton.resolved
    zyvaall.conflicts zyvaall.timings)
  (deps zyvaall.mly)
  (action
    (with-outputs-to zyvaall.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to zyvaall.timings %{deps})))))

(rule (alias zyvaall) (action (diff zyvaall.exp zyvaall.out)))

(rule (alias zyvaall)
  (action (diff zyvaall.automaton.exp zyvaall.automaton)))

(rule (alias zyvaall)
  (action (diff zyvaall.automaton.resolved.exp zyvaall.automaton.resolved)))

(rule (alias zyvaall)
  (action (diff zyvaall.conflicts.exp zyvaall.conflicts)))

(rule (target zyvaflo.opp.out) (deps zyvaflo.mly)
  (action
    (with-outputs-to zyvaflo.opp.out
      (with-accepted-exit-codes 0 (run menhir --only-preprocess %{deps})))))

(rule (alias zyvaflo) (action (diff zyvaflo.opp.exp zyvaflo.opp.out)))

(rule
  (targets zyvaflo.out zyvaflo.automaton zyvaflo.automaton.resolved
    zyvaflo.conflicts zyvaflo.timings)
  (deps zyvaflo.mly)
  (action
    (with-outputs-to zyvaflo.out
      (with-accepted-exit-codes 0
        (run menhir --dump --dump-resolved --explain -lg 2 -la 2 -lc 2
          --timings-to zyvaflo.timings %{deps})))))

(rule (alias zyvaflo) (action (diff zyvaflo.exp zyvaflo.out)))

(rule (alias zyvaflo)
  (action (diff zyvaflo.automaton.exp zyvaflo.automaton)))

(rule (alias zyvaflo)
  (action (diff zyvaflo.automaton.resolved.exp zyvaflo.automaton.resolved)))

(rule (alias zyvaflo)
  (action (diff zyvaflo.conflicts.exp zyvaflo.conflicts)))

(alias (name test)
  (deps
    (alias JSParse)
    (alias K3Parser)
    (alias KaSim.4.0.0-kappaParser)
    (alias KaSim.4.0.0-kparser4)
    (alias albatross)
    (alias alphaCaml)
    (alias alphaCaml-demos-interactive)
    (alias alphaCaml-demos-mixins)
    (alias alphaCaml-demos-poplmark)
    (alias alphaprolog)
    (alias amalthea)
    (alias andromeda)
    (alias anonymous)
    (alias anonymous-nested)
    (alias anonymous-param)
    (alias anonymous-param-redundant)
    (alias apron.20160125-apron_parser)
    (alias atd_parser)
    (alias attapl-deptypes)
    (alias attapl-mini)
    (alias attributes)
    (alias attributes-expansion)
    (alias bamboo.0.0.03-parser)
    (alias bare-bones)
    (alias basile)
    (alias batsh.0.0.6-parser_yacc)
    (alias bauer)
    (alias belloeil)
    (alias bibtex2html.1.99-bibtex_parser)
    (alias bibtex_parser)
    (alias bison-mysterious-conflict)
    (alias bodin)
    (alias bodin_inlined)
    (alias boomerang-bparser)
    (alias boris-mini)
    (alias boris-mini-no-eos)
    (alias bran)
    (alias c)
    (alias c_unambiguous)
    (alias calc)
    (alias calc-anonymous)
    (alias calc-ast)
    (alias calc-locations)
    (alias calc-never-useful)
    (alias calc-new-syntax)
    (alias camltemplate.1.0.2-ctParser)
    (alias camomile.1.0.1-colParser)
    (alias ccss.1.6-parser)
    (alias charrua-client.0.9-dhcp_parser)
    (alias christian)
    (alias cigen-cparser)
    (alias cil-cparser)
    (alias cil-formatparse)
    (alias cime-coq)
    (alias cime-genpoly)
    (alias cime-parameterized-signatures)
    (alias cime-poly)
    (alias cime-poly-interp)
    (alias cime-signature)
    (alias cime-syntax)
    (alias cime-term)
    (alias cime-terms)
    (alias cime-terms-signature)
    (alias cime-theory)
    (alias cime-toplevel)
    (alias cime-word)
    (alias cminor)
    (alias cocci)
    (alias coccinelle.1.0.2-parser_c)
    (alias coccinelle.1.0.2-parser_cocci_menhir)
    (alias coercion-constraint)
    (alias coercion-mini)
    (alias cohttp.1.2.0-accept_parser)
    (alias compcert_pre_parser)
    (alias compcert_pre_parser_canonical)
    (alias compcert_pre_parser_new)
    (alias compsyn)
    (alias condition_parser)
    (alias confluence)
    (alias confluence-fnf)
    (alias confluence-psl)
    (alias couac)
    (alias cppo_ocamlbuild.1.6.0-cppo_parser)
    (alias cubicle.1.1.2-parser)
    (alias cudf.0.9-cudf_type_parser)
    (alias cutdown)
    (alias dario)
    (alias datalog.0.5.2-topDownParser)
    (alias dbforge.2.0.1-sqml_parser)
    (alias debian-formats.0.1.1-DF822_parser)
    (alias dedukti.2.6.0-menhir_parser)
    (alias diy.5.01-ARMParser)
    (alias dml)
    (alias dns_zone_parser)
    (alias doc-ock-xml.1.2.1-docOckXmlParser)
    (alias docOckXmlParser)
    (alias dolmen.0.2-parseDimacs)
    (alias dolmen.0.2-parseTptp)
    (alias dule)
    (alias dune.1.4.0-opamBaseParser)
    (alias duplicated_prec)
    (alias efuns)
    (alias electrod.0.1.7-Parser)
    (alias electrum00)
    (alias empty-action)
    (alias end-of-stream-conflict)
    (alias execparser)
    (alias expansion_ok)
    (alias expansion_unused)
    (alias featherweight)
    (alias fibonacci)
    (alias filiot)
    (alias flowcaml)
    (alias flowcaml-docgen)
    (alias focc-pure-def)
    (alias foo)
    (alias fork)
    (alias fp)
    (alias frama-c-base.20170501-logic_parser)
    (alias framac-cparser)
    (alias framac-print_api-grammar)
    (alias fsharp)
    (alias fslexpars)
    (alias fstar)
    (alias fstar.0.9.6.0~alpha1-parse)
    (alias fsyaccpars)
    (alias gdb.0.3-gdbmi_parser)
    (alias gettext.0.3.8-gettextPo_parser)
    (alias godiva)
    (alias gromit)
    (alias grune924)
    (alias heptagon.1.05.00-hept_parser)
    (alias herdtools7.7.51-AArch64Parser)
    (alias herdtools7.7.51-ARMParser)
    (alias herdtools7.7.51-CParser)
    (alias herdtools7.7.51-LISAParser)
    (alias herdtools7.7.51-PPCParser)
    (alias herdtools7.7.51-RISCVParser)
    (alias herdtools7.7.51-X86Parser)
    (alias herdtools7.7.51-modelParser)
    (alias herdtools7.7.51-stateParser)
    (alias hmx-multi)
    (alias hmx-sets)
    (alias ho)
    (alias htparser)
    (alias hydro.0.7.1-hgen_parser)
    (alias ibal)
    (alias ics)
    (alias idl_parser)
    (alias ilpars)
    (alias imaplet-lwt.0.1.9-parser)
    (alias infinite)
    (alias inline-multi-level)
    (alias inline-multi-sons)
    (alias inline-position)
    (alias inline-rename)
    (alias inline-shift)
    (alias inline-test)
    (alias inline-with-dollar)
    (alias inlined-dollar)
    (alias inlining-capture)
    (alias inliningWithSideEffects)
    (alias issue21_longer)
    (alias issue21_shorter)
    (alias jasmc)
    (alias java)
    (alias jingoo.1.2.9-jg_parser)
    (alias jml)
    (alias jocaml)
    (alias jocaml-ambients)
    (alias jocaml-new-parser)
    (alias joe_parser2)
    (alias jparser)
    (alias js_of_ocaml.3.2.0-js_parser)
    (alias judicael)
    (alias julia)
    (alias ketti)
    (alias kimmit)
    (alias kremlin.0.9.6.0-parser)
    (alias labltk-compiler)
    (alias labltk-ppyac)
    (alias labrys.0.1-parser)
    (alias lambdapi.1.0-menhir_parser)
    (alias lambdoc_rlambtex_parser)
    (alias ldap.2.4.0-ldap_filterparser)
    (alias lem)
    (alias liberty_parser)
    (alias link)
    (alias links)
    (alias links.0.8-jsonparse)
    (alias links.0.8-parser)
    (alias links.0.8-xmlParser)
    (alias liquidsoap.1.3.4-lang_parser)
    (alias llparse)
    (alias logic_parser)
    (alias logtk.0.8.1-parse_theory)
    (alias loop)
    (alias lr-but-not-lalr)
    (alias ltlparser)
    (alias lustre-v6.1.737-lv6parser)
    (alias lustreParser)
    (alias lutin.2.56-lutParser)
    (alias macrodown)
    (alias maple)
    (alias mcc-fc)
    (alias mcc-fj)
    (alias mcc-frontends)
    (alias mcc-mc)
    (alias mcc-moogle)
    (alias mcc-naml)
    (alias mcc-pascal)
    (alias mcc-pasqual)
    (alias mcc-phobos)
    (alias mcc-prof)
    (alias mcc-python)
    (alias memcad.1.0.0-mc_parser)
    (alias metaocaml)
    (alias mezzo)
    (alias mezzo_canonical)
    (alias mezzo_inclusion_only)
    (alias miniCparser)
    (alias miniMLparser)
    (alias mlpost.0.8.2-pfb_parser)
    (alias modelica)
    (alias modelyze)
    (alias modulo)
    (alias morbig.0.9.1-parser)
    (alias mpri)
    (alias multi-token-alias-0)
    (alias multiple-functor)
    (alias name-clash-1)
    (alias netsem)
    (alias nexus)
    (alias nml-ip-parser)
    (alias no-end-of-stream-conflict)
    (alias no_future)
    (alias nunchaku.0.6-Parser)
    (alias nunchaku.0.6-TPTP_parser)
    (alias nunchaku.0.6-Tip_parser)
    (alias obc)
    (alias obc-sym)
    (alias obelisk.0.3.2-zelus)
    (alias ocaml)
    (alias ocaml-base-compiler.4.07.1-parsecmm)
    (alias ocaml-debugger)
    (alias ocaml-lex)
    (alias ocaml-protoc.1.2.0-pb_parsing_parser)
    (alias ocaml-test-Lex)
    (alias ocaml-testasmcomp-cmm)
    (alias ocaml_lua_parser)
    (alias ocaml_parser_menhir)
    (alias ocamldoc-odoc)
    (alias ocamldoc-odoc_text)
    (alias ocamlweb-yacc)
    (alias ocapic.3.3-parser)
    (alias oclisp)
    (alias octavius.1.2.0-octParser)
    (alias odds.1.0-parser)
    (alias oflux)
    (alias ojacare)
    (alias ollvm.0.99-ollvm_parser)
    (alias omake.0.9.8.7-omake_shell_parse)
    (alias omake_ast_parse)
    (alias omake_shell_parse)
    (alias on-error-reduce-inlined)
    (alias on-error-reduce-unreachable)
    (alias opam-doc.0.9.3-info_parser)
    (alias option2)
    (alias options)
    (alias orpie.1.6.0-txtin_parser)
    (alias osdp.0.6.0-pa_parser)
    (alias pager)
    (alias pair-new-syntax)
    (alias parameterized-nonterminal)
    (alias parse_xquery)
    (alias parser_cocci_menhir)
    (alias parser_cpp)
    (alias parser_css)
    (alias parser_java)
    (alias parser_js)
    (alias parser_php)
    (alias parser_raw)
    (alias partest)
    (alias permutation)
    (alias permutation-growth)
    (alias petit-1)
    (alias petr4)
    (alias photos)
    (alias phpparser)
    (alias pippijn)
    (alias pre_parser)
    (alias prec_inline)
    (alias private-and-public-1)
    (alias promelaparser)
    (alias promelaparser_withexps)
    (alias prooflang)
    (alias proverif.2.00-parser)
    (alias proverif.2.00-pitparser)
    (alias psmt2-frontend.0.1-smtlib_parser)
    (alias public-1)
    (alias public-inline-1)
    (alias pxp-m2parsergen)
    (alias pxp-ucs2_to_utf8)
    (alias rdf_sparql_parser)
    (alias reason.3.3.7-reason_parser)
    (alias reason_parser)
    (alias regstab.2.0.0-parser)
    (alias rfsm.1.0-main_parser)
    (alias rml.1.09.05-parser)
    (alias ruby18_parser)
    (alias sage)
    (alias scilabParser)
    (alias self)
    (alias self_ground)
    (alias sibylfs-lem.0.4.0-parser)
    (alias simnml)
    (alias simple-if-conflict)
    (alias simple-if-conflict-no-eos)
    (alias solidity)
    (alias spike)
    (alias split-public-symbol)
    (alias split-public-symbol-with-renaming)
    (alias sqlgg.0.4.5-sql_parser)
    (alias statverif.1.97pl1.1-piparser)
    (alias subiso)
    (alias subtle-conflict-pager)
    (alias swdogen.0.1.0-swgparser)
    (alias symbolstartofs)
    (alias symbolstartpos)
    (alias sysver)
    (alias talparser)
    (alias tilde-used-warning)
    (alias tony-rc_parse)
    (alias tony-xmlparse)
    (alias touist.3.5.0-parser)
    (alias toy)
    (alias tptp2cime)
    (alias typage)
    (alias typed-freshml)
    (alias undetermined_sort)
    (alias unigram)
    (alias unreachable-symbol)
    (alias unused-attribute)
    (alias unused-pseudo-token)
    (alias unused-token1)
    (alias unused-value)
    (alias uppercase)
    (alias useless-priorities)
    (alias useless-pseudo-token)
    (alias verilog)
    (alias wallace)
    (alias wasm.1.0-parser)
    (alias webidl.1.4-parser00)
    (alias why-clparser)
    (alias why-cparser)
    (alias why3)
    (alias why3.1.1.0-py_parser)
    (alias xpath_parser)
    (alias yann)
    (alias yaparser)
    (alias zenon)
    (alias zenon.0.8.4-parsecoq)
    (alias zipperposition.1.5-Parse_dk)
    (alias zipperposition.1.5-Parse_tptp)
    (alias zipperposition.1.5-Parse_zf)
    (alias zipperposition.1.5-Tip_parser)
    (alias zyvaall)
    (alias zyvaflo)))

