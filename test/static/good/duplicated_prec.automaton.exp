State 0:
expr_eoi' -> . expr_eoi [ # ]
-- On Ident shift to state 1
-- On expr_eoi shift to state 2
-- On expr shift to state 3

State 1:
expr -> Ident . [ Rparen Lparen Eoi Colon ]
-- On Rparen reduce production expr -> Ident 
-- On Lparen reduce production expr -> Ident 
-- On Eoi reduce production expr -> Ident 
-- On Colon reduce production expr -> Ident 

State 2:
expr_eoi' -> expr_eoi . [ # ]
-- On # accept expr_eoi

State 3:
expr -> expr . Colon type_expr [ Lparen Eoi Colon ]
expr -> expr . Lparen expr Rparen [ Lparen Eoi Colon ]
expr_eoi -> expr . Eoi [ # ]
-- On Lparen shift to state 4
-- On Eoi shift to state 14
-- On Colon shift to state 7

State 4:
expr -> expr Lparen . expr Rparen [ Rparen Lparen Eoi Colon ]
-- On Ident shift to state 1
-- On expr shift to state 5

State 5:
expr -> expr . Colon type_expr [ Rparen Lparen Colon ]
expr -> expr . Lparen expr Rparen [ Rparen Lparen Colon ]
expr -> expr Lparen expr . Rparen [ Rparen Lparen Eoi Colon ]
-- On Rparen shift to state 6
-- On Lparen shift to state 4
-- On Colon shift to state 7

State 6:
expr -> expr Lparen expr Rparen . [ Rparen Lparen Eoi Colon ]
-- On Rparen reduce production expr -> expr Lparen expr Rparen 
-- On Lparen reduce production expr -> expr Lparen expr Rparen 
-- On Eoi reduce production expr -> expr Lparen expr Rparen 
-- On Colon reduce production expr -> expr Lparen expr Rparen 

State 7:
expr -> expr Colon . type_expr [ Rparen Lparen Eoi Colon ]
-- On Typevar shift to state 8
-- On Ident shift to state 9
-- On type_expr shift to state 13

State 8:
type_expr -> Typevar . [ Rparen Lparen Eoi Colon ]
-- On Rparen reduce production type_expr -> Typevar 
-- On Lparen reduce production type_expr -> Typevar 
-- On Eoi reduce production type_expr -> Typevar 
-- On Colon reduce production type_expr -> Typevar 

State 9:
type_expr -> Ident . [ Rparen Lparen Eoi Colon ]
type_expr -> Ident . Lparen type_expr Rparen [ Rparen Lparen Eoi Colon ]
-- On Lparen shift to state 10
-- On Rparen reduce production type_expr -> Ident 
-- On Eoi reduce production type_expr -> Ident 
-- On Colon reduce production type_expr -> Ident 

State 10:
type_expr -> Ident Lparen . type_expr Rparen [ Rparen Lparen Eoi Colon ]
-- On Typevar shift to state 8
-- On Ident shift to state 9
-- On type_expr shift to state 11

State 11:
type_expr -> Ident Lparen type_expr . Rparen [ Rparen Lparen Eoi Colon ]
-- On Rparen shift to state 12

State 12:
type_expr -> Ident Lparen type_expr Rparen . [ Rparen Lparen Eoi Colon ]
-- On Rparen reduce production type_expr -> Ident Lparen type_expr Rparen 
-- On Lparen reduce production type_expr -> Ident Lparen type_expr Rparen 
-- On Eoi reduce production type_expr -> Ident Lparen type_expr Rparen 
-- On Colon reduce production type_expr -> Ident Lparen type_expr Rparen 

State 13:
expr -> expr Colon type_expr . [ Rparen Lparen Eoi Colon ]
-- On Rparen reduce production expr -> expr Colon type_expr 
-- On Lparen reduce production expr -> expr Colon type_expr 
-- On Eoi reduce production expr -> expr Colon type_expr 
-- On Colon reduce production expr -> expr Colon type_expr 

State 14:
expr_eoi -> expr Eoi . [ # ]
-- On # reduce production expr_eoi -> expr Eoi 

