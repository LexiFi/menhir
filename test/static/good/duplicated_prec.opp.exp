%start expr_eoi
%token Colon
%token Eoi
%token Ident
%token Lparen
%token Rparen
%token Typevar
%left type_
%left Lparen
%type <unit> expr_eoi
%%

expr_eoi:
  _1 = expr _2 = Eoi
    {                   ()}

type_expr:
  _1 = Ident %prec type_
    {let _2 =     ( None ) in
                                                      ()} [@name none_delimited_Lparen_type_expr_Rparen_]
| _1 = Ident _1_inlined1 = Lparen x = type_expr _3 = Rparen %prec type_
    {let _2 =
  let x =     ( x ) in
      ( Some x )
in
                                                      ()} [@name some_delimited_Lparen_type_expr_Rparen_]
| _1 = Typevar
    {          ()}

expr:
  _1 = Ident
    {        ()}
| _1 = expr _2 = Colon _3 = type_expr
    {                       ()}
| _1 = expr _2 = Lparen _3 = expr _4 = Rparen
    {                          ()}

%%
