State 0:
## Known stack suffix:
##
## LR(1) items:
parse_problem' -> . parse_problem [ # ]
## Transitions:
-- On UNIV shift to state 1
-- On universe shift to state 15
-- On parse_problem shift to state 318
## Reductions:

State 1:
## Known stack suffix:
## UNIV
## LR(1) items:
universe -> UNIV . COLON LBRACE list(urelements) RBRACE [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV . COLON LBRACE list(urelements) RBRACE SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On COLON shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## UNIV COLON
## LR(1) items:
universe -> UNIV COLON . LBRACE list(urelements) RBRACE [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV COLON . LBRACE list(urelements) RBRACE SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On LBRACE shift to state 3
## Reductions:

State 3:
## Known stack suffix:
## UNIV COLON LBRACE
## LR(1) items:
universe -> UNIV COLON LBRACE . list(urelements) RBRACE [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV COLON LBRACE . list(urelements) RBRACE SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On PLAIN_ID shift to state 4
-- On NUMBER shift to state 5
-- On IDX_ID shift to state 6
-- On urelements shift to state 9
-- On list(urelements) shift to state 12
-- On interval shift to state 11
## Reductions:
-- On RBRACE reduce production list(urelements) ->

State 4:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
urelements -> PLAIN_ID . [ RBRACE PLAIN_ID NUMBER IDX_ID ]
## Transitions:
## Reductions:
-- On RBRACE reduce production urelements -> PLAIN_ID
-- On PLAIN_ID reduce production urelements -> PLAIN_ID
-- On NUMBER reduce production urelements -> PLAIN_ID
-- On IDX_ID reduce production urelements -> PLAIN_ID

State 5:
## Known stack suffix:
## NUMBER
## LR(1) items:
urelements -> NUMBER . [ RBRACE PLAIN_ID NUMBER IDX_ID ]
## Transitions:
## Reductions:
-- On RBRACE reduce production urelements -> NUMBER
-- On PLAIN_ID reduce production urelements -> NUMBER
-- On NUMBER reduce production urelements -> NUMBER
-- On IDX_ID reduce production urelements -> NUMBER

State 6:
## Known stack suffix:
## IDX_ID
## LR(1) items:
interval -> IDX_ID . DOTDOT IDX_ID [ RBRACE PLAIN_ID NUMBER IDX_ID ]
urelements -> IDX_ID . [ RBRACE PLAIN_ID NUMBER IDX_ID ]
## Transitions:
-- On DOTDOT shift to state 7
## Reductions:
-- On RBRACE reduce production urelements -> IDX_ID
-- On PLAIN_ID reduce production urelements -> IDX_ID
-- On NUMBER reduce production urelements -> IDX_ID
-- On IDX_ID reduce production urelements -> IDX_ID

State 7:
## Known stack suffix:
## IDX_ID DOTDOT
## LR(1) items:
interval -> IDX_ID DOTDOT . IDX_ID [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
-- On IDX_ID shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## IDX_ID DOTDOT IDX_ID
## LR(1) items:
interval -> IDX_ID DOTDOT IDX_ID . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Reductions:
-- On RBRACE reduce production interval -> IDX_ID DOTDOT IDX_ID
-- On PLAIN_ID reduce production interval -> IDX_ID DOTDOT IDX_ID
-- On NUMBER reduce production interval -> IDX_ID DOTDOT IDX_ID
-- On LPAREN reduce production interval -> IDX_ID DOTDOT IDX_ID
-- On IDX_ID reduce production interval -> IDX_ID DOTDOT IDX_ID

State 9:
## Known stack suffix:
## urelements
## LR(1) items:
list(urelements) -> urelements . list(urelements) [ RBRACE ]
## Transitions:
-- On PLAIN_ID shift to state 4
-- On NUMBER shift to state 5
-- On IDX_ID shift to state 6
-- On urelements shift to state 9
-- On list(urelements) shift to state 10
-- On interval shift to state 11
## Reductions:
-- On RBRACE reduce production list(urelements) ->

State 10:
## Known stack suffix:
## urelements list(urelements)
## LR(1) items:
list(urelements) -> urelements list(urelements) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production list(urelements) -> urelements list(urelements)

State 11:
## Known stack suffix:
## interval
## LR(1) items:
urelements -> interval . [ RBRACE PLAIN_ID NUMBER IDX_ID ]
## Transitions:
## Reductions:
-- On RBRACE reduce production urelements -> interval
-- On PLAIN_ID reduce production urelements -> interval
-- On NUMBER reduce production urelements -> interval
-- On IDX_ID reduce production urelements -> interval

State 12:
## Known stack suffix:
## UNIV COLON LBRACE list(urelements)
## LR(1) items:
universe -> UNIV COLON LBRACE list(urelements) . RBRACE [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV COLON LBRACE list(urelements) . RBRACE SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On RBRACE shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## UNIV COLON LBRACE list(urelements) RBRACE
## LR(1) items:
universe -> UNIV COLON LBRACE list(urelements) RBRACE . [ VAR SYM RUN INVARIANT INST CONST ]
universe -> UNIV COLON LBRACE list(urelements) RBRACE . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 14
## Reductions:
-- On VAR reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE
-- On SYM reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE
-- On RUN reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE
-- On INVARIANT reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE
-- On INST reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE
-- On CONST reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE

State 14:
## Known stack suffix:
## UNIV COLON LBRACE list(urelements) RBRACE SEMI
## LR(1) items:
universe -> UNIV COLON LBRACE list(urelements) RBRACE SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Reductions:
-- On VAR reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE SEMI
-- On SYM reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE SEMI
-- On RUN reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE SEMI
-- On INVARIANT reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE SEMI
-- On INST reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE SEMI
-- On CONST reduce production universe -> UNIV COLON LBRACE list(urelements) RBRACE SEMI

State 15:
## Known stack suffix:
## universe
## LR(1) items:
parse_problem -> universe . list(declaration) nonempty_list(paragraph) EOF [ # ]
## Transitions:
-- On VAR shift to state 16
-- On CONST shift to state 63
-- On list(declaration) shift to state 71
-- On declaration shift to state 316
## Reductions:
-- On SYM reduce production list(declaration) ->
-- On RUN reduce production list(declaration) ->
-- On INVARIANT reduce production list(declaration) ->
-- On INST reduce production list(declaration) ->

State 16:
## Known stack suffix:
## VAR
## LR(1) items:
declaration -> VAR . PLAIN_ID colon_w_or_wo_arity bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR . PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR . PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR . PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On PLAIN_ID shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## VAR PLAIN_ID
## LR(1) items:
declaration -> VAR PLAIN_ID . colon_w_or_wo_arity bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID . colon_w_or_wo_arity bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID . colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID . colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On COLON_ARITY shift to state 18
-- On COLON shift to state 19
-- On colon_w_or_wo_arity shift to state 20
## Reductions:

State 18:
## Known stack suffix:
## COLON_ARITY
## LR(1) items:
colon_w_or_wo_arity -> COLON_ARITY . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Reductions:
-- On UNIV reduce production colon_w_or_wo_arity -> COLON_ARITY
-- On PLAIN_ID reduce production colon_w_or_wo_arity -> COLON_ARITY
-- On LPAREN reduce production colon_w_or_wo_arity -> COLON_ARITY
-- On LBRACE reduce production colon_w_or_wo_arity -> COLON_ARITY

State 19:
## Known stack suffix:
## COLON
## LR(1) items:
colon_w_or_wo_arity -> COLON . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Reductions:
-- On UNIV reduce production colon_w_or_wo_arity -> COLON
-- On PLAIN_ID reduce production colon_w_or_wo_arity -> COLON
-- On LPAREN reduce production colon_w_or_wo_arity -> COLON
-- On LBRACE reduce production colon_w_or_wo_arity -> COLON

State 20:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity . bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity . bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity . bound option(boundmult) bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity . bound option(boundmult) bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 51
## Reductions:

State 21:
## Known stack suffix:
## UNIV
## LR(1) items:
bound -> UNIV . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Reductions:
-- On VAR reduce production bound -> UNIV
-- On UNIV reduce production bound -> UNIV
-- On THEN reduce production bound -> UNIV
-- On SYM reduce production bound -> UNIV
-- On SEMI reduce production bound -> UNIV
-- On RUN reduce production bound -> UNIV
-- On RPAREN reduce production bound -> UNIV
-- On PLUS reduce production bound -> UNIV
-- On PLAIN_ID reduce production bound -> UNIV
-- On ONE reduce production bound -> UNIV
-- On LPAREN reduce production bound -> UNIV
-- On LONE reduce production bound -> UNIV
-- On LBRACE reduce production bound -> UNIV
-- On INVARIANT reduce production bound -> UNIV
-- On INST reduce production bound -> UNIV
-- On CONST reduce production bound -> UNIV
-- On ARROW reduce production bound -> UNIV

State 22:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
bound -> PLAIN_ID . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Reductions:
-- On VAR reduce production bound -> PLAIN_ID
-- On UNIV reduce production bound -> PLAIN_ID
-- On THEN reduce production bound -> PLAIN_ID
-- On SYM reduce production bound -> PLAIN_ID
-- On SEMI reduce production bound -> PLAIN_ID
-- On RUN reduce production bound -> PLAIN_ID
-- On RPAREN reduce production bound -> PLAIN_ID
-- On PLUS reduce production bound -> PLAIN_ID
-- On PLAIN_ID reduce production bound -> PLAIN_ID
-- On ONE reduce production bound -> PLAIN_ID
-- On LPAREN reduce production bound -> PLAIN_ID
-- On LONE reduce production bound -> PLAIN_ID
-- On LBRACE reduce production bound -> PLAIN_ID
-- On INVARIANT reduce production bound -> PLAIN_ID
-- On INST reduce production bound -> PLAIN_ID
-- On CONST reduce production bound -> PLAIN_ID
-- On ARROW reduce production bound -> PLAIN_ID

State 23:
## Known stack suffix:
## LPAREN
## LR(1) items:
bound -> LPAREN . bound RPAREN [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 41
## Reductions:

State 24:
## Known stack suffix:
## LBRACE
## LR(1) items:
bound -> LBRACE . list(element) RBRACE [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On LPAREN shift to state 27
-- On IDX_ID shift to state 33
-- On tuple shift to state 34
-- On list(element) shift to state 35
-- On interval shift to state 37
-- On element shift to state 38
-- On atom shift to state 40
## Reductions:
-- On RBRACE reduce production list(element) ->

State 25:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
atom -> PLAIN_ID . [ RPAREN RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Reductions:
-- On RPAREN reduce production atom -> PLAIN_ID
-- On RBRACE reduce production atom -> PLAIN_ID
-- On PLAIN_ID reduce production atom -> PLAIN_ID
-- On NUMBER reduce production atom -> PLAIN_ID
-- On LPAREN reduce production atom -> PLAIN_ID
-- On IDX_ID reduce production atom -> PLAIN_ID

State 26:
## Known stack suffix:
## NUMBER
## LR(1) items:
atom -> NUMBER . [ RPAREN RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Reductions:
-- On RPAREN reduce production atom -> NUMBER
-- On RBRACE reduce production atom -> NUMBER
-- On PLAIN_ID reduce production atom -> NUMBER
-- On NUMBER reduce production atom -> NUMBER
-- On LPAREN reduce production atom -> NUMBER
-- On IDX_ID reduce production atom -> NUMBER

State 27:
## Known stack suffix:
## LPAREN
## LR(1) items:
tuple -> LPAREN . nonempty_list(atom) RPAREN [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On IDX_ID shift to state 28
-- On nonempty_list(atom) shift to state 29
-- On atom shift to state 31
## Reductions:

State 28:
## Known stack suffix:
## IDX_ID
## LR(1) items:
atom -> IDX_ID . [ RPAREN PLAIN_ID NUMBER IDX_ID ]
## Transitions:
## Reductions:
-- On RPAREN reduce production atom -> IDX_ID
-- On PLAIN_ID reduce production atom -> IDX_ID
-- On NUMBER reduce production atom -> IDX_ID
-- On IDX_ID reduce production atom -> IDX_ID

State 29:
## Known stack suffix:
## LPAREN nonempty_list(atom)
## LR(1) items:
tuple -> LPAREN nonempty_list(atom) . RPAREN [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
-- On RPAREN shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## LPAREN nonempty_list(atom) RPAREN
## LR(1) items:
tuple -> LPAREN nonempty_list(atom) RPAREN . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Reductions:
-- On RBRACE reduce production tuple -> LPAREN nonempty_list(atom) RPAREN
-- On PLAIN_ID reduce production tuple -> LPAREN nonempty_list(atom) RPAREN
-- On NUMBER reduce production tuple -> LPAREN nonempty_list(atom) RPAREN
-- On LPAREN reduce production tuple -> LPAREN nonempty_list(atom) RPAREN
-- On IDX_ID reduce production tuple -> LPAREN nonempty_list(atom) RPAREN

State 31:
## Known stack suffix:
## atom
## LR(1) items:
nonempty_list(atom) -> atom . [ RPAREN ]
nonempty_list(atom) -> atom . nonempty_list(atom) [ RPAREN ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On IDX_ID shift to state 28
-- On nonempty_list(atom) shift to state 32
-- On atom shift to state 31
## Reductions:
-- On RPAREN reduce production nonempty_list(atom) -> atom

State 32:
## Known stack suffix:
## atom nonempty_list(atom)
## LR(1) items:
nonempty_list(atom) -> atom nonempty_list(atom) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN reduce production nonempty_list(atom) -> atom nonempty_list(atom)

State 33:
## Known stack suffix:
## IDX_ID
## LR(1) items:
atom -> IDX_ID . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
interval -> IDX_ID . DOTDOT IDX_ID [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
-- On DOTDOT shift to state 7
## Reductions:
-- On RBRACE reduce production atom -> IDX_ID
-- On PLAIN_ID reduce production atom -> IDX_ID
-- On NUMBER reduce production atom -> IDX_ID
-- On LPAREN reduce production atom -> IDX_ID
-- On IDX_ID reduce production atom -> IDX_ID

State 34:
## Known stack suffix:
## tuple
## LR(1) items:
element -> tuple . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Reductions:
-- On RBRACE reduce production element -> tuple
-- On PLAIN_ID reduce production element -> tuple
-- On NUMBER reduce production element -> tuple
-- On LPAREN reduce production element -> tuple
-- On IDX_ID reduce production element -> tuple

State 35:
## Known stack suffix:
## LBRACE list(element)
## LR(1) items:
bound -> LBRACE list(element) . RBRACE [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On RBRACE shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## LBRACE list(element) RBRACE
## LR(1) items:
bound -> LBRACE list(element) RBRACE . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Reductions:
-- On VAR reduce production bound -> LBRACE list(element) RBRACE
-- On UNIV reduce production bound -> LBRACE list(element) RBRACE
-- On THEN reduce production bound -> LBRACE list(element) RBRACE
-- On SYM reduce production bound -> LBRACE list(element) RBRACE
-- On SEMI reduce production bound -> LBRACE list(element) RBRACE
-- On RUN reduce production bound -> LBRACE list(element) RBRACE
-- On RPAREN reduce production bound -> LBRACE list(element) RBRACE
-- On PLUS reduce production bound -> LBRACE list(element) RBRACE
-- On PLAIN_ID reduce production bound -> LBRACE list(element) RBRACE
-- On ONE reduce production bound -> LBRACE list(element) RBRACE
-- On LPAREN reduce production bound -> LBRACE list(element) RBRACE
-- On LONE reduce production bound -> LBRACE list(element) RBRACE
-- On LBRACE reduce production bound -> LBRACE list(element) RBRACE
-- On INVARIANT reduce production bound -> LBRACE list(element) RBRACE
-- On INST reduce production bound -> LBRACE list(element) RBRACE
-- On CONST reduce production bound -> LBRACE list(element) RBRACE
-- On ARROW reduce production bound -> LBRACE list(element) RBRACE

State 37:
## Known stack suffix:
## interval
## LR(1) items:
element -> interval . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Reductions:
-- On RBRACE reduce production element -> interval
-- On PLAIN_ID reduce production element -> interval
-- On NUMBER reduce production element -> interval
-- On LPAREN reduce production element -> interval
-- On IDX_ID reduce production element -> interval

State 38:
## Known stack suffix:
## element
## LR(1) items:
list(element) -> element . list(element) [ RBRACE ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On LPAREN shift to state 27
-- On IDX_ID shift to state 33
-- On tuple shift to state 34
-- On list(element) shift to state 39
-- On interval shift to state 37
-- On element shift to state 38
-- On atom shift to state 40
## Reductions:
-- On RBRACE reduce production list(element) ->

State 39:
## Known stack suffix:
## element list(element)
## LR(1) items:
list(element) -> element list(element) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production list(element) -> element list(element)

State 40:
## Known stack suffix:
## atom
## LR(1) items:
element -> atom . [ RBRACE PLAIN_ID NUMBER LPAREN IDX_ID ]
## Transitions:
## Reductions:
-- On RBRACE reduce production element -> atom
-- On PLAIN_ID reduce production element -> atom
-- On NUMBER reduce production element -> atom
-- On LPAREN reduce production element -> atom
-- On IDX_ID reduce production element -> atom

State 41:
## Known stack suffix:
## LPAREN bound
## LR(1) items:
bound -> LPAREN bound . RPAREN [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . ARROW option(boundmult) bound [ RPAREN PLUS ARROW ]
bound -> bound . PLUS bound [ RPAREN PLUS ARROW ]
## Transitions:
-- On RPAREN shift to state 42
-- On PLUS shift to state 43
-- On ARROW shift to state 45
## Reductions:

State 42:
## Known stack suffix:
## LPAREN bound RPAREN
## LR(1) items:
bound -> LPAREN bound RPAREN . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Reductions:
-- On VAR reduce production bound -> LPAREN bound RPAREN
-- On UNIV reduce production bound -> LPAREN bound RPAREN
-- On THEN reduce production bound -> LPAREN bound RPAREN
-- On SYM reduce production bound -> LPAREN bound RPAREN
-- On SEMI reduce production bound -> LPAREN bound RPAREN
-- On RUN reduce production bound -> LPAREN bound RPAREN
-- On RPAREN reduce production bound -> LPAREN bound RPAREN
-- On PLUS reduce production bound -> LPAREN bound RPAREN
-- On PLAIN_ID reduce production bound -> LPAREN bound RPAREN
-- On ONE reduce production bound -> LPAREN bound RPAREN
-- On LPAREN reduce production bound -> LPAREN bound RPAREN
-- On LONE reduce production bound -> LPAREN bound RPAREN
-- On LBRACE reduce production bound -> LPAREN bound RPAREN
-- On INVARIANT reduce production bound -> LPAREN bound RPAREN
-- On INST reduce production bound -> LPAREN bound RPAREN
-- On CONST reduce production bound -> LPAREN bound RPAREN
-- On ARROW reduce production bound -> LPAREN bound RPAREN

State 43:
## Known stack suffix:
## bound PLUS
## LR(1) items:
bound -> bound PLUS . bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## bound PLUS bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound PLUS bound . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On ARROW shift to state 45
## Reductions:
-- On VAR reduce production bound -> bound PLUS bound
-- On UNIV reduce production bound -> bound PLUS bound
-- On THEN reduce production bound -> bound PLUS bound
-- On SYM reduce production bound -> bound PLUS bound
-- On SEMI reduce production bound -> bound PLUS bound
-- On RUN reduce production bound -> bound PLUS bound
-- On RPAREN reduce production bound -> bound PLUS bound
-- On PLUS reduce production bound -> bound PLUS bound
-- On PLAIN_ID reduce production bound -> bound PLUS bound
-- On ONE reduce production bound -> bound PLUS bound
-- On LPAREN reduce production bound -> bound PLUS bound
-- On LONE reduce production bound -> bound PLUS bound
-- On LBRACE reduce production bound -> bound PLUS bound
-- On INVARIANT reduce production bound -> bound PLUS bound
-- On INST reduce production bound -> bound PLUS bound
-- On CONST reduce production bound -> bound PLUS bound

State 45:
## Known stack suffix:
## bound ARROW
## LR(1) items:
bound -> bound ARROW . option(boundmult) bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On ONE shift to state 46
-- On LONE shift to state 47
-- On option(boundmult) shift to state 48
-- On boundmult shift to state 50
## Reductions:
-- On UNIV reduce production option(boundmult) ->
-- On PLAIN_ID reduce production option(boundmult) ->
-- On LPAREN reduce production option(boundmult) ->
-- On LBRACE reduce production option(boundmult) ->

State 46:
## Known stack suffix:
## ONE
## LR(1) items:
boundmult -> ONE . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Reductions:
-- On UNIV reduce production boundmult -> ONE
-- On PLAIN_ID reduce production boundmult -> ONE
-- On LPAREN reduce production boundmult -> ONE
-- On LBRACE reduce production boundmult -> ONE

State 47:
## Known stack suffix:
## LONE
## LR(1) items:
boundmult -> LONE . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Reductions:
-- On UNIV reduce production boundmult -> LONE
-- On PLAIN_ID reduce production boundmult -> LONE
-- On LPAREN reduce production boundmult -> LONE
-- On LBRACE reduce production boundmult -> LONE

State 48:
## Known stack suffix:
## bound ARROW option(boundmult)
## LR(1) items:
bound -> bound ARROW option(boundmult) . bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## bound ARROW option(boundmult) bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound ARROW option(boundmult) bound . [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV THEN SYM SEMI RUN RPAREN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
## Transitions:
## Reductions:
-- On VAR reduce production bound -> bound ARROW option(boundmult) bound
-- On UNIV reduce production bound -> bound ARROW option(boundmult) bound
-- On THEN reduce production bound -> bound ARROW option(boundmult) bound
-- On SYM reduce production bound -> bound ARROW option(boundmult) bound
-- On SEMI reduce production bound -> bound ARROW option(boundmult) bound
-- On RUN reduce production bound -> bound ARROW option(boundmult) bound
-- On RPAREN reduce production bound -> bound ARROW option(boundmult) bound
-- On PLUS reduce production bound -> bound ARROW option(boundmult) bound
-- On PLAIN_ID reduce production bound -> bound ARROW option(boundmult) bound
-- On ONE reduce production bound -> bound ARROW option(boundmult) bound
-- On LPAREN reduce production bound -> bound ARROW option(boundmult) bound
-- On LONE reduce production bound -> bound ARROW option(boundmult) bound
-- On LBRACE reduce production bound -> bound ARROW option(boundmult) bound
-- On INVARIANT reduce production bound -> bound ARROW option(boundmult) bound
-- On INST reduce production bound -> bound ARROW option(boundmult) bound
-- On CONST reduce production bound -> bound ARROW option(boundmult) bound
-- On ARROW reduce production bound -> bound ARROW option(boundmult) bound

State 50:
## Known stack suffix:
## boundmult
## LR(1) items:
option(boundmult) -> boundmult . [ UNIV PLAIN_ID LPAREN LBRACE ]
## Transitions:
## Reductions:
-- On UNIV reduce production option(boundmult) -> boundmult
-- On PLAIN_ID reduce production option(boundmult) -> boundmult
-- On LPAREN reduce production option(boundmult) -> boundmult
-- On LBRACE reduce production option(boundmult) -> boundmult

State 51:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV THEN SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV THEN SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound . option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound . option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound . option(boundmult) bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound . option(boundmult) bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On THEN shift to state 52
-- On PLUS shift to state 43
-- On ONE shift to state 46
-- On LONE shift to state 47
-- On ARROW shift to state 45
-- On option(next_scope) shift to state 56
-- On option(boundmult) shift to state 58
-- On next_scope shift to state 62
-- On boundmult shift to state 50
## Reductions:
-- On VAR reduce production option(next_scope) ->
-- On UNIV reduce production option(boundmult) ->
-- On SYM reduce production option(next_scope) ->
-- On SEMI reduce production option(next_scope) ->
-- On RUN reduce production option(next_scope) ->
-- On PLAIN_ID reduce production option(boundmult) ->
-- On LPAREN reduce production option(boundmult) ->
-- On LBRACE reduce production option(boundmult) ->
-- On INVARIANT reduce production option(next_scope) ->
-- On INST reduce production option(next_scope) ->
-- On CONST reduce production option(next_scope) ->

State 52:
## Known stack suffix:
## THEN
## LR(1) items:
next_scope -> THEN . bound [ VAR SYM SEMI RUN INVARIANT INST CONST ]
next_scope -> THEN . bound option(boundmult) bound [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## THEN bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
next_scope -> THEN bound . [ VAR SYM SEMI RUN INVARIANT INST CONST ]
next_scope -> THEN bound . option(boundmult) bound [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
-- On PLUS shift to state 43
-- On ONE shift to state 46
-- On LONE shift to state 47
-- On ARROW shift to state 45
-- On option(boundmult) shift to state 54
-- On boundmult shift to state 50
## Reductions:
-- On VAR reduce production next_scope -> THEN bound
-- On UNIV reduce production option(boundmult) ->
-- On SYM reduce production next_scope -> THEN bound
-- On SEMI reduce production next_scope -> THEN bound
-- On RUN reduce production next_scope -> THEN bound
-- On PLAIN_ID reduce production option(boundmult) ->
-- On LPAREN reduce production option(boundmult) ->
-- On LBRACE reduce production option(boundmult) ->
-- On INVARIANT reduce production next_scope -> THEN bound
-- On INST reduce production next_scope -> THEN bound
-- On CONST reduce production next_scope -> THEN bound

State 54:
## Known stack suffix:
## THEN bound option(boundmult)
## LR(1) items:
next_scope -> THEN bound option(boundmult) . bound [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## THEN bound option(boundmult) bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
next_scope -> THEN bound option(boundmult) bound . [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
-- On PLUS shift to state 43
-- On ARROW shift to state 45
## Reductions:
-- On VAR reduce production next_scope -> THEN bound option(boundmult) bound
-- On SYM reduce production next_scope -> THEN bound option(boundmult) bound
-- On SEMI reduce production next_scope -> THEN bound option(boundmult) bound
-- On RUN reduce production next_scope -> THEN bound option(boundmult) bound
-- On INVARIANT reduce production next_scope -> THEN bound option(boundmult) bound
-- On INST reduce production next_scope -> THEN bound option(boundmult) bound
-- On CONST reduce production next_scope -> THEN bound option(boundmult) bound

State 56:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope)
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) . [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 57
## Reductions:
-- On VAR reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope)
-- On SYM reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope)
-- On RUN reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope)
-- On INVARIANT reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope)
-- On INST reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope)
-- On CONST reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope)

State 57:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Reductions:
-- On VAR reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI
-- On SYM reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI
-- On RUN reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI
-- On INVARIANT reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI
-- On INST reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI
-- On CONST reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(next_scope) SEMI

State 58:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult)
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) . bound option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) . bound option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR THEN SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR THEN SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound . option(next_scope) [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound . option(next_scope) SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On THEN shift to state 52
-- On PLUS shift to state 43
-- On ARROW shift to state 45
-- On option(next_scope) shift to state 60
-- On next_scope shift to state 62
## Reductions:
-- On VAR reduce production option(next_scope) ->
-- On SYM reduce production option(next_scope) ->
-- On SEMI reduce production option(next_scope) ->
-- On RUN reduce production option(next_scope) ->
-- On INVARIANT reduce production option(next_scope) ->
-- On INST reduce production option(next_scope) ->
-- On CONST reduce production option(next_scope) ->

State 60:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope)
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) . [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 61
## Reductions:
-- On VAR reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope)
-- On SYM reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope)
-- On RUN reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope)
-- On INVARIANT reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope)
-- On INST reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope)
-- On CONST reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope)

State 61:
## Known stack suffix:
## VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI
## LR(1) items:
declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Reductions:
-- On VAR reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI
-- On SYM reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI
-- On RUN reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI
-- On INVARIANT reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI
-- On INST reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI
-- On CONST reduce production declaration -> VAR PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound option(next_scope) SEMI

State 62:
## Known stack suffix:
## next_scope
## LR(1) items:
option(next_scope) -> next_scope . [ VAR SYM SEMI RUN INVARIANT INST CONST ]
## Transitions:
## Reductions:
-- On VAR reduce production option(next_scope) -> next_scope
-- On SYM reduce production option(next_scope) -> next_scope
-- On SEMI reduce production option(next_scope) -> next_scope
-- On RUN reduce production option(next_scope) -> next_scope
-- On INVARIANT reduce production option(next_scope) -> next_scope
-- On INST reduce production option(next_scope) -> next_scope
-- On CONST reduce production option(next_scope) -> next_scope

State 63:
## Known stack suffix:
## CONST
## LR(1) items:
declaration -> CONST . PLAIN_ID colon_w_or_wo_arity bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST . PLAIN_ID colon_w_or_wo_arity bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST . PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST . PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On PLAIN_ID shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## CONST PLAIN_ID
## LR(1) items:
declaration -> CONST PLAIN_ID . colon_w_or_wo_arity bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID . colon_w_or_wo_arity bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID . colon_w_or_wo_arity bound option(boundmult) bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID . colon_w_or_wo_arity bound option(boundmult) bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On COLON_ARITY shift to state 18
-- On COLON shift to state 19
-- On colon_w_or_wo_arity shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity
## LR(1) items:
declaration -> CONST PLAIN_ID colon_w_or_wo_arity . bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity . bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity . bound option(boundmult) bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity . bound option(boundmult) bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR UNIV SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR UNIV SYM SEMI RUN PLUS PLAIN_ID ONE LPAREN LONE LBRACE INVARIANT INST CONST ARROW ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound . [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound . option(boundmult) bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound . option(boundmult) bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 67
-- On PLUS shift to state 43
-- On ONE shift to state 46
-- On LONE shift to state 47
-- On ARROW shift to state 45
-- On option(boundmult) shift to state 68
-- On boundmult shift to state 50
## Reductions:
-- On VAR reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound
-- On UNIV reduce production option(boundmult) ->
-- On SYM reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound
-- On RUN reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound
-- On PLAIN_ID reduce production option(boundmult) ->
-- On LPAREN reduce production option(boundmult) ->
-- On LBRACE reduce production option(boundmult) ->
-- On INVARIANT reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound
-- On INST reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound
-- On CONST reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound

State 67:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound SEMI
## LR(1) items:
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Reductions:
-- On VAR reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound SEMI
-- On SYM reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound SEMI
-- On RUN reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound SEMI
-- On INVARIANT reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound SEMI
-- On INST reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound SEMI
-- On CONST reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound SEMI

State 68:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult)
## LR(1) items:
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) . bound [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) . bound SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On UNIV shift to state 21
-- On PLAIN_ID shift to state 22
-- On LPAREN shift to state 23
-- On LBRACE shift to state 24
-- On bound shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound
## LR(1) items:
bound -> bound . ARROW option(boundmult) bound [ VAR SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
bound -> bound . PLUS bound [ VAR SYM SEMI RUN PLUS INVARIANT INST CONST ARROW ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound . [ VAR SYM RUN INVARIANT INST CONST ]
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound . SEMI [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
-- On SEMI shift to state 70
-- On PLUS shift to state 43
-- On ARROW shift to state 45
## Reductions:
-- On VAR reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound
-- On SYM reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound
-- On RUN reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound
-- On INVARIANT reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound
-- On INST reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound
-- On CONST reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound

State 70:
## Known stack suffix:
## CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI
## LR(1) items:
declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI . [ VAR SYM RUN INVARIANT INST CONST ]
## Transitions:
## Reductions:
-- On VAR reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI
-- On SYM reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI
-- On RUN reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI
-- On INVARIANT reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI
-- On INST reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI
-- On CONST reduce production declaration -> CONST PLAIN_ID colon_w_or_wo_arity bound option(boundmult) bound SEMI

State 71:
## Known stack suffix:
## universe list(declaration)
## LR(1) items:
parse_problem -> universe list(declaration) . nonempty_list(paragraph) EOF [ # ]
## Transitions:
-- On SYM shift to state 72
-- On RUN shift to state 89
-- On INVARIANT shift to state 296
-- On INST shift to state 298
-- On syms shift to state 310
-- On paragraph shift to state 311
-- On nonempty_list(paragraph) shift to state 314
-- On insts shift to state 313
## Reductions:

State 72:
## Known stack suffix:
## SYM
## LR(1) items:
syms -> SYM . nonempty_list(bracketed_symmetry) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On LBRACKET shift to state 73
-- On nonempty_list(bracketed_symmetry) shift to state 86
-- On bracketed_symmetry shift to state 87
## Reductions:

State 73:
## Known stack suffix:
## LBRACKET
## LR(1) items:
bracketed_symmetry -> LBRACKET . symmetry RBRACKET option(SEMI) [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
-- On LPAREN shift to state 74
-- On symmetry shift to state 77
-- On sym_element shift to state 81
-- On nonempty_list(sym_element) shift to state 83
## Reductions:

State 74:
## Known stack suffix:
## LPAREN
## LR(1) items:
sym_element -> LPAREN . nonempty_list(atom) RPAREN [ RBRACKET LTE LPAREN ]
## Transitions:
-- On PLAIN_ID shift to state 25
-- On NUMBER shift to state 26
-- On IDX_ID shift to state 28
-- On nonempty_list(atom) shift to state 75
-- On atom shift to state 31
## Reductions:

State 75:
## Known stack suffix:
## LPAREN nonempty_list(atom)
## LR(1) items:
sym_element -> LPAREN nonempty_list(atom) . RPAREN [ RBRACKET LTE LPAREN ]
## Transitions:
-- On RPAREN shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## LPAREN nonempty_list(atom) RPAREN
## LR(1) items:
sym_element -> LPAREN nonempty_list(atom) RPAREN . [ RBRACKET LTE LPAREN ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production sym_element -> LPAREN nonempty_list(atom) RPAREN
-- On LTE reduce production sym_element -> LPAREN nonempty_list(atom) RPAREN
-- On LPAREN reduce production sym_element -> LPAREN nonempty_list(atom) RPAREN

State 77:
## Known stack suffix:
## LBRACKET symmetry
## LR(1) items:
bracketed_symmetry -> LBRACKET symmetry . RBRACKET option(SEMI) [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
-- On RBRACKET shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## LBRACKET symmetry RBRACKET
## LR(1) items:
bracketed_symmetry -> LBRACKET symmetry RBRACKET . option(SEMI) [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
-- On SEMI shift to state 79
-- On option(SEMI) shift to state 80
## Reductions:
-- On SYM reduce production option(SEMI) ->
-- On RUN reduce production option(SEMI) ->
-- On LBRACKET reduce production option(SEMI) ->
-- On INVARIANT reduce production option(SEMI) ->
-- On INST reduce production option(SEMI) ->
-- On EOF reduce production option(SEMI) ->

State 79:
## Known stack suffix:
## SEMI
## LR(1) items:
option(SEMI) -> SEMI . [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production option(SEMI) -> SEMI
-- On RUN reduce production option(SEMI) -> SEMI
-- On LBRACKET reduce production option(SEMI) -> SEMI
-- On INVARIANT reduce production option(SEMI) -> SEMI
-- On INST reduce production option(SEMI) -> SEMI
-- On EOF reduce production option(SEMI) -> SEMI

State 80:
## Known stack suffix:
## LBRACKET symmetry RBRACKET option(SEMI)
## LR(1) items:
bracketed_symmetry -> LBRACKET symmetry RBRACKET option(SEMI) . [ SYM RUN LBRACKET INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production bracketed_symmetry -> LBRACKET symmetry RBRACKET option(SEMI)
-- On RUN reduce production bracketed_symmetry -> LBRACKET symmetry RBRACKET option(SEMI)
-- On LBRACKET reduce production bracketed_symmetry -> LBRACKET symmetry RBRACKET option(SEMI)
-- On INVARIANT reduce production bracketed_symmetry -> LBRACKET symmetry RBRACKET option(SEMI)
-- On INST reduce production bracketed_symmetry -> LBRACKET symmetry RBRACKET option(SEMI)
-- On EOF reduce production bracketed_symmetry -> LBRACKET symmetry RBRACKET option(SEMI)

State 81:
## Known stack suffix:
## sym_element
## LR(1) items:
nonempty_list(sym_element) -> sym_element . [ RBRACKET LTE ]
nonempty_list(sym_element) -> sym_element . nonempty_list(sym_element) [ RBRACKET LTE ]
## Transitions:
-- On LPAREN shift to state 74
-- On sym_element shift to state 81
-- On nonempty_list(sym_element) shift to state 82
## Reductions:
-- On RBRACKET reduce production nonempty_list(sym_element) -> sym_element
-- On LTE reduce production nonempty_list(sym_element) -> sym_element

State 82:
## Known stack suffix:
## sym_element nonempty_list(sym_element)
## LR(1) items:
nonempty_list(sym_element) -> sym_element nonempty_list(sym_element) . [ RBRACKET LTE ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production nonempty_list(sym_element) -> sym_element nonempty_list(sym_element)
-- On LTE reduce production nonempty_list(sym_element) -> sym_element nonempty_list(sym_element)

State 83:
## Known stack suffix:
## nonempty_list(sym_element)
## LR(1) items:
symmetry -> nonempty_list(sym_element) . LTE nonempty_list(sym_element) [ RBRACKET ]
## Transitions:
-- On LTE shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## nonempty_list(sym_element) LTE
## LR(1) items:
symmetry -> nonempty_list(sym_element) LTE . nonempty_list(sym_element) [ RBRACKET ]
## Transitions:
-- On LPAREN shift to state 74
-- On sym_element shift to state 81
-- On nonempty_list(sym_element) shift to state 85
## Reductions:

State 85:
## Known stack suffix:
## nonempty_list(sym_element) LTE nonempty_list(sym_element)
## LR(1) items:
symmetry -> nonempty_list(sym_element) LTE nonempty_list(sym_element) . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production symmetry -> nonempty_list(sym_element) LTE nonempty_list(sym_element)

State 86:
## Known stack suffix:
## SYM nonempty_list(bracketed_symmetry)
## LR(1) items:
syms -> SYM nonempty_list(bracketed_symmetry) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production syms -> SYM nonempty_list(bracketed_symmetry)
-- On RUN reduce production syms -> SYM nonempty_list(bracketed_symmetry)
-- On INVARIANT reduce production syms -> SYM nonempty_list(bracketed_symmetry)
-- On INST reduce production syms -> SYM nonempty_list(bracketed_symmetry)
-- On EOF reduce production syms -> SYM nonempty_list(bracketed_symmetry)

State 87:
## Known stack suffix:
## bracketed_symmetry
## LR(1) items:
nonempty_list(bracketed_symmetry) -> bracketed_symmetry . [ SYM RUN INVARIANT INST EOF ]
nonempty_list(bracketed_symmetry) -> bracketed_symmetry . nonempty_list(bracketed_symmetry) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On LBRACKET shift to state 73
-- On nonempty_list(bracketed_symmetry) shift to state 88
-- On bracketed_symmetry shift to state 87
## Reductions:
-- On SYM reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry
-- On RUN reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry
-- On INVARIANT reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry
-- On INST reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry
-- On EOF reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry

State 88:
## Known stack suffix:
## bracketed_symmetry nonempty_list(bracketed_symmetry)
## LR(1) items:
nonempty_list(bracketed_symmetry) -> bracketed_symmetry nonempty_list(bracketed_symmetry) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry nonempty_list(bracketed_symmetry)
-- On RUN reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry nonempty_list(bracketed_symmetry)
-- On INVARIANT reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry nonempty_list(bracketed_symmetry)
-- On INST reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry nonempty_list(bracketed_symmetry)
-- On EOF reduce production nonempty_list(bracketed_symmetry) -> bracketed_symmetry nonempty_list(bracketed_symmetry)

State 89:
## Known stack suffix:
## RUN
## LR(1) items:
paragraph -> RUN . nonempty_list(formula_semi) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On nonempty_list(formula_semi) shift to state 293
-- On iexpr shift to state 139
-- On formula_semi shift to state 294
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:

State 90:
## Known stack suffix:
## UNIV
## LR(1) items:
expr -> UNIV . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production expr -> UNIV
-- On UNIV reduce production expr -> UNIV
-- On TRUE reduce production expr -> UNIV
-- On TILDE reduce production expr -> UNIV
-- On SYM reduce production expr -> UNIV
-- On SUB reduce production expr -> UNIV
-- On STAR reduce production expr -> UNIV
-- On SOMETIME reduce production expr -> UNIV
-- On SOME reduce production expr -> UNIV
-- On SINCE reduce production expr -> UNIV
-- On SEMI reduce production expr -> UNIV
-- On RUN reduce production expr -> UNIV
-- On RPROJ reduce production expr -> UNIV
-- On RPAREN reduce production expr -> UNIV
-- On RELEASES reduce production expr -> UNIV
-- On RBRACKET reduce production expr -> UNIV
-- On RBRACE reduce production expr -> UNIV
-- On PRIME reduce production expr -> UNIV
-- On PREVIOUS reduce production expr -> UNIV
-- On PLUS reduce production expr -> UNIV
-- On PLAIN_ID reduce production expr -> UNIV
-- On OVERRIDE reduce production expr -> UNIV
-- On OR reduce production expr -> UNIV
-- On ONE reduce production expr -> UNIV
-- On ONCE reduce production expr -> UNIV
-- On NUMBER reduce production expr -> UNIV
-- On NOT_IN reduce production expr -> UNIV
-- On NOT reduce production expr -> UNIV
-- On NONE reduce production expr -> UNIV
-- On NO reduce production expr -> UNIV
-- On NEXT reduce production expr -> UNIV
-- On NEQ reduce production expr -> UNIV
-- On NEG reduce production expr -> UNIV
-- On MINUS reduce production expr -> UNIV
-- On LTE reduce production expr -> UNIV
-- On LT reduce production expr -> UNIV
-- On LPROJ reduce production expr -> UNIV
-- On LPAREN reduce production expr -> UNIV
-- On LONE reduce production expr -> UNIV
-- On LET reduce production expr -> UNIV
-- On LBRACKET reduce production expr -> UNIV
-- On LBRACE reduce production expr -> UNIV
-- On INVARIANT reduce production expr -> UNIV
-- On INTER reduce production expr -> UNIV
-- On INST reduce production expr -> UNIV
-- On IN reduce production expr -> UNIV
-- On IMPLIES reduce production expr -> UNIV
-- On IFF reduce production expr -> UNIV
-- On IDEN reduce production expr -> UNIV
-- On HISTORICALLY reduce production expr -> UNIV
-- On HAT reduce production expr -> UNIV
-- On HASH reduce production expr -> UNIV
-- On GTE reduce production expr -> UNIV
-- On GT reduce production expr -> UNIV
-- On FALSE reduce production expr -> UNIV
-- On EVENTUALLY reduce production expr -> UNIV
-- On EQ reduce production expr -> UNIV
-- On EOF reduce production expr -> UNIV
-- On ELSE reduce production expr -> UNIV
-- On DOT reduce production expr -> UNIV
-- On COMMA reduce production expr -> UNIV
-- On BAR reduce production expr -> UNIV
-- On ARROW reduce production expr -> UNIV
-- On AND reduce production expr -> UNIV
-- On ALWAYS reduce production expr -> UNIV
-- On ALL reduce production expr -> UNIV
-- On ADD reduce production expr -> UNIV

State 91:
## Known stack suffix:
## TRUE
## LR(1) items:
formula -> TRUE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> TRUE
-- On UNIV reduce production formula -> TRUE
-- On TRUE reduce production formula -> TRUE
-- On TILDE reduce production formula -> TRUE
-- On SYM reduce production formula -> TRUE
-- On SUB reduce production formula -> TRUE
-- On STAR reduce production formula -> TRUE
-- On SOMETIME reduce production formula -> TRUE
-- On SOME reduce production formula -> TRUE
-- On SINCE reduce production formula -> TRUE
-- On SEMI reduce production formula -> TRUE
-- On RUN reduce production formula -> TRUE
-- On RPAREN reduce production formula -> TRUE
-- On RELEASES reduce production formula -> TRUE
-- On RBRACE reduce production formula -> TRUE
-- On PREVIOUS reduce production formula -> TRUE
-- On PLAIN_ID reduce production formula -> TRUE
-- On OR reduce production formula -> TRUE
-- On ONE reduce production formula -> TRUE
-- On ONCE reduce production formula -> TRUE
-- On NUMBER reduce production formula -> TRUE
-- On NOT reduce production formula -> TRUE
-- On NONE reduce production formula -> TRUE
-- On NO reduce production formula -> TRUE
-- On NEXT reduce production formula -> TRUE
-- On NEG reduce production formula -> TRUE
-- On LPAREN reduce production formula -> TRUE
-- On LONE reduce production formula -> TRUE
-- On LET reduce production formula -> TRUE
-- On LBRACE reduce production formula -> TRUE
-- On INVARIANT reduce production formula -> TRUE
-- On INST reduce production formula -> TRUE
-- On IMPLIES reduce production formula -> TRUE
-- On IFF reduce production formula -> TRUE
-- On IDEN reduce production formula -> TRUE
-- On HISTORICALLY reduce production formula -> TRUE
-- On HAT reduce production formula -> TRUE
-- On HASH reduce production formula -> TRUE
-- On FALSE reduce production formula -> TRUE
-- On EVENTUALLY reduce production formula -> TRUE
-- On EOF reduce production formula -> TRUE
-- On ELSE reduce production formula -> TRUE
-- On AND reduce production formula -> TRUE
-- On ALWAYS reduce production formula -> TRUE
-- On ALL reduce production formula -> TRUE
-- On ADD reduce production formula -> TRUE

State 92:
## Known stack suffix:
## TILDE
## LR(1) items:
expr -> TILDE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 292
## Reductions:

State 93:
## Known stack suffix:
## SUB
## LR(1) items:
iexpr -> SUB . LBRACKET iexpr COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACKET shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## SUB LBRACKET
## LR(1) items:
iexpr -> SUB LBRACKET . iexpr COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 288
## Reductions:

State 95:
## Known stack suffix:
## NUMBER
## LR(1) items:
iexpr -> NUMBER . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production iexpr -> NUMBER
-- On UNIV reduce production iexpr -> NUMBER
-- On TRUE reduce production iexpr -> NUMBER
-- On TILDE reduce production iexpr -> NUMBER
-- On SYM reduce production iexpr -> NUMBER
-- On SUB reduce production iexpr -> NUMBER
-- On STAR reduce production iexpr -> NUMBER
-- On SOMETIME reduce production iexpr -> NUMBER
-- On SOME reduce production iexpr -> NUMBER
-- On SINCE reduce production iexpr -> NUMBER
-- On SEMI reduce production iexpr -> NUMBER
-- On RUN reduce production iexpr -> NUMBER
-- On RPAREN reduce production iexpr -> NUMBER
-- On RELEASES reduce production iexpr -> NUMBER
-- On RBRACKET reduce production iexpr -> NUMBER
-- On RBRACE reduce production iexpr -> NUMBER
-- On PREVIOUS reduce production iexpr -> NUMBER
-- On PLAIN_ID reduce production iexpr -> NUMBER
-- On OR reduce production iexpr -> NUMBER
-- On ONE reduce production iexpr -> NUMBER
-- On ONCE reduce production iexpr -> NUMBER
-- On NUMBER reduce production iexpr -> NUMBER
-- On NOT reduce production iexpr -> NUMBER
-- On NONE reduce production iexpr -> NUMBER
-- On NO reduce production iexpr -> NUMBER
-- On NEXT reduce production iexpr -> NUMBER
-- On NEQ reduce production iexpr -> NUMBER
-- On NEG reduce production iexpr -> NUMBER
-- On LTE reduce production iexpr -> NUMBER
-- On LT reduce production iexpr -> NUMBER
-- On LPAREN reduce production iexpr -> NUMBER
-- On LONE reduce production iexpr -> NUMBER
-- On LET reduce production iexpr -> NUMBER
-- On LBRACE reduce production iexpr -> NUMBER
-- On INVARIANT reduce production iexpr -> NUMBER
-- On INST reduce production iexpr -> NUMBER
-- On IMPLIES reduce production iexpr -> NUMBER
-- On IFF reduce production iexpr -> NUMBER
-- On IDEN reduce production iexpr -> NUMBER
-- On HISTORICALLY reduce production iexpr -> NUMBER
-- On HAT reduce production iexpr -> NUMBER
-- On HASH reduce production iexpr -> NUMBER
-- On GTE reduce production iexpr -> NUMBER
-- On GT reduce production iexpr -> NUMBER
-- On FALSE reduce production iexpr -> NUMBER
-- On EVENTUALLY reduce production iexpr -> NUMBER
-- On EQ reduce production iexpr -> NUMBER
-- On EOF reduce production iexpr -> NUMBER
-- On ELSE reduce production iexpr -> NUMBER
-- On COMMA reduce production iexpr -> NUMBER
-- On AND reduce production iexpr -> NUMBER
-- On ALWAYS reduce production iexpr -> NUMBER
-- On ALL reduce production iexpr -> NUMBER
-- On ADD reduce production iexpr -> NUMBER

State 96:
## Known stack suffix:
## NEG
## LR(1) items:
iexpr -> NEG . LBRACKET iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACKET shift to state 97
## Reductions:

State 97:
## Known stack suffix:
## NEG LBRACKET
## LR(1) items:
iexpr -> NEG LBRACKET . iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 286
## Reductions:

State 98:
## Known stack suffix:
## LPAREN
## LR(1) items:
iexpr -> LPAREN . iexpr RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 285
## Reductions:

State 99:
## Known stack suffix:
## HASH
## LR(1) items:
iexpr -> HASH . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 284
## Reductions:

State 100:
## Known stack suffix:
## STAR
## LR(1) items:
expr -> STAR . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 283
## Reductions:

State 101:
## Known stack suffix:
## SOMETIME
## LR(1) items:
formula -> SOMETIME . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 282
-- On expr shift to state 151
## Reductions:

State 102:
## Known stack suffix:
## SOME
## LR(1) items:
formula -> SOME . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> SOME . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> SOME . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 275
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 281
## Reductions:

State 103:
## Known stack suffix:
## PREVIOUS
## LR(1) items:
formula -> PREVIOUS . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 274
-- On expr shift to state 151
## Reductions:

State 104:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
expr -> PLAIN_ID . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production expr -> PLAIN_ID
-- On UNIV reduce production expr -> PLAIN_ID
-- On TRUE reduce production expr -> PLAIN_ID
-- On TILDE reduce production expr -> PLAIN_ID
-- On SYM reduce production expr -> PLAIN_ID
-- On SUB reduce production expr -> PLAIN_ID
-- On STAR reduce production expr -> PLAIN_ID
-- On SOMETIME reduce production expr -> PLAIN_ID
-- On SOME reduce production expr -> PLAIN_ID
-- On SINCE reduce production expr -> PLAIN_ID
-- On SEMI reduce production expr -> PLAIN_ID
-- On RUN reduce production expr -> PLAIN_ID
-- On RPROJ reduce production expr -> PLAIN_ID
-- On RPAREN reduce production expr -> PLAIN_ID
-- On RELEASES reduce production expr -> PLAIN_ID
-- On RBRACKET reduce production expr -> PLAIN_ID
-- On RBRACE reduce production expr -> PLAIN_ID
-- On PRIME reduce production expr -> PLAIN_ID
-- On PREVIOUS reduce production expr -> PLAIN_ID
-- On PLUS reduce production expr -> PLAIN_ID
-- On PLAIN_ID reduce production expr -> PLAIN_ID
-- On OVERRIDE reduce production expr -> PLAIN_ID
-- On OR reduce production expr -> PLAIN_ID
-- On ONE reduce production expr -> PLAIN_ID
-- On ONCE reduce production expr -> PLAIN_ID
-- On NUMBER reduce production expr -> PLAIN_ID
-- On NOT_IN reduce production expr -> PLAIN_ID
-- On NOT reduce production expr -> PLAIN_ID
-- On NONE reduce production expr -> PLAIN_ID
-- On NO reduce production expr -> PLAIN_ID
-- On NEXT reduce production expr -> PLAIN_ID
-- On NEQ reduce production expr -> PLAIN_ID
-- On NEG reduce production expr -> PLAIN_ID
-- On MINUS reduce production expr -> PLAIN_ID
-- On LTE reduce production expr -> PLAIN_ID
-- On LT reduce production expr -> PLAIN_ID
-- On LPROJ reduce production expr -> PLAIN_ID
-- On LPAREN reduce production expr -> PLAIN_ID
-- On LONE reduce production expr -> PLAIN_ID
-- On LET reduce production expr -> PLAIN_ID
-- On LBRACKET reduce production expr -> PLAIN_ID
-- On LBRACE reduce production expr -> PLAIN_ID
-- On INVARIANT reduce production expr -> PLAIN_ID
-- On INTER reduce production expr -> PLAIN_ID
-- On INST reduce production expr -> PLAIN_ID
-- On IN reduce production expr -> PLAIN_ID
-- On IMPLIES reduce production expr -> PLAIN_ID
-- On IFF reduce production expr -> PLAIN_ID
-- On IDEN reduce production expr -> PLAIN_ID
-- On HISTORICALLY reduce production expr -> PLAIN_ID
-- On HAT reduce production expr -> PLAIN_ID
-- On HASH reduce production expr -> PLAIN_ID
-- On GTE reduce production expr -> PLAIN_ID
-- On GT reduce production expr -> PLAIN_ID
-- On FALSE reduce production expr -> PLAIN_ID
-- On EVENTUALLY reduce production expr -> PLAIN_ID
-- On EQ reduce production expr -> PLAIN_ID
-- On EOF reduce production expr -> PLAIN_ID
-- On ELSE reduce production expr -> PLAIN_ID
-- On DOT reduce production expr -> PLAIN_ID
-- On COMMA reduce production expr -> PLAIN_ID
-- On BAR reduce production expr -> PLAIN_ID
-- On ARROW reduce production expr -> PLAIN_ID
-- On AND reduce production expr -> PLAIN_ID
-- On ALWAYS reduce production expr -> PLAIN_ID
-- On ALL reduce production expr -> PLAIN_ID
-- On ADD reduce production expr -> PLAIN_ID

State 105:
## Known stack suffix:
## ONE
## LR(1) items:
formula -> ONE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ONE . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ONE . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 267
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 273
## Reductions:

State 106:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
expr -> PLAIN_ID . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID . [ COLON ]
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID . COMMA separated_nonempty_list(COMMA,plain_id) [ COLON ]
## Transitions:
-- On COMMA shift to state 107
## Reductions:
-- On UNTIL reduce production expr -> PLAIN_ID
-- On UNIV reduce production expr -> PLAIN_ID
-- On TRUE reduce production expr -> PLAIN_ID
-- On TILDE reduce production expr -> PLAIN_ID
-- On SYM reduce production expr -> PLAIN_ID
-- On SUB reduce production expr -> PLAIN_ID
-- On STAR reduce production expr -> PLAIN_ID
-- On SOMETIME reduce production expr -> PLAIN_ID
-- On SOME reduce production expr -> PLAIN_ID
-- On SINCE reduce production expr -> PLAIN_ID
-- On SEMI reduce production expr -> PLAIN_ID
-- On RUN reduce production expr -> PLAIN_ID
-- On RPROJ reduce production expr -> PLAIN_ID
-- On RPAREN reduce production expr -> PLAIN_ID
-- On RELEASES reduce production expr -> PLAIN_ID
-- On RBRACE reduce production expr -> PLAIN_ID
-- On PRIME reduce production expr -> PLAIN_ID
-- On PREVIOUS reduce production expr -> PLAIN_ID
-- On PLUS reduce production expr -> PLAIN_ID
-- On PLAIN_ID reduce production expr -> PLAIN_ID
-- On OVERRIDE reduce production expr -> PLAIN_ID
-- On OR reduce production expr -> PLAIN_ID
-- On ONE reduce production expr -> PLAIN_ID
-- On ONCE reduce production expr -> PLAIN_ID
-- On NUMBER reduce production expr -> PLAIN_ID
-- On NOT_IN reduce production expr -> PLAIN_ID
-- On NOT reduce production expr -> PLAIN_ID
-- On NONE reduce production expr -> PLAIN_ID
-- On NO reduce production expr -> PLAIN_ID
-- On NEXT reduce production expr -> PLAIN_ID
-- On NEQ reduce production expr -> PLAIN_ID
-- On NEG reduce production expr -> PLAIN_ID
-- On MINUS reduce production expr -> PLAIN_ID
-- On LPROJ reduce production expr -> PLAIN_ID
-- On LPAREN reduce production expr -> PLAIN_ID
-- On LONE reduce production expr -> PLAIN_ID
-- On LET reduce production expr -> PLAIN_ID
-- On LBRACKET reduce production expr -> PLAIN_ID
-- On LBRACE reduce production expr -> PLAIN_ID
-- On INVARIANT reduce production expr -> PLAIN_ID
-- On INTER reduce production expr -> PLAIN_ID
-- On INST reduce production expr -> PLAIN_ID
-- On IN reduce production expr -> PLAIN_ID
-- On IMPLIES reduce production expr -> PLAIN_ID
-- On IFF reduce production expr -> PLAIN_ID
-- On IDEN reduce production expr -> PLAIN_ID
-- On HISTORICALLY reduce production expr -> PLAIN_ID
-- On HAT reduce production expr -> PLAIN_ID
-- On HASH reduce production expr -> PLAIN_ID
-- On FALSE reduce production expr -> PLAIN_ID
-- On EVENTUALLY reduce production expr -> PLAIN_ID
-- On EQ reduce production expr -> PLAIN_ID
-- On EOF reduce production expr -> PLAIN_ID
-- On ELSE reduce production expr -> PLAIN_ID
-- On DOT reduce production expr -> PLAIN_ID
-- On COLON reduce production separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID
-- On ARROW reduce production expr -> PLAIN_ID
-- On AND reduce production expr -> PLAIN_ID
-- On ALWAYS reduce production expr -> PLAIN_ID
-- On ALL reduce production expr -> PLAIN_ID
-- On ADD reduce production expr -> PLAIN_ID

State 107:
## Known stack suffix:
## PLAIN_ID COMMA
## LR(1) items:
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID COMMA . separated_nonempty_list(COMMA,plain_id) [ COLON ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On separated_nonempty_list(COMMA,plain_id) shift to state 109
## Reductions:

State 108:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID . [ COLON ]
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID . COMMA separated_nonempty_list(COMMA,plain_id) [ COLON ]
## Transitions:
-- On COMMA shift to state 107
## Reductions:
-- On COLON reduce production separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID

State 109:
## Known stack suffix:
## PLAIN_ID COMMA separated_nonempty_list(COMMA,plain_id)
## LR(1) items:
separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID COMMA separated_nonempty_list(COMMA,plain_id) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON reduce production separated_nonempty_list(COMMA,plain_id) -> PLAIN_ID COMMA separated_nonempty_list(COMMA,plain_id)

State 110:
## Known stack suffix:
## ONCE
## LR(1) items:
formula -> ONCE . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 266
-- On expr shift to state 151
## Reductions:

State 111:
## Known stack suffix:
## NOT
## LR(1) items:
formula -> NOT . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 265
-- On expr shift to state 151
## Reductions:

State 112:
## Known stack suffix:
## NONE
## LR(1) items:
expr -> NONE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production expr -> NONE
-- On UNIV reduce production expr -> NONE
-- On TRUE reduce production expr -> NONE
-- On TILDE reduce production expr -> NONE
-- On SYM reduce production expr -> NONE
-- On SUB reduce production expr -> NONE
-- On STAR reduce production expr -> NONE
-- On SOMETIME reduce production expr -> NONE
-- On SOME reduce production expr -> NONE
-- On SINCE reduce production expr -> NONE
-- On SEMI reduce production expr -> NONE
-- On RUN reduce production expr -> NONE
-- On RPROJ reduce production expr -> NONE
-- On RPAREN reduce production expr -> NONE
-- On RELEASES reduce production expr -> NONE
-- On RBRACKET reduce production expr -> NONE
-- On RBRACE reduce production expr -> NONE
-- On PRIME reduce production expr -> NONE
-- On PREVIOUS reduce production expr -> NONE
-- On PLUS reduce production expr -> NONE
-- On PLAIN_ID reduce production expr -> NONE
-- On OVERRIDE reduce production expr -> NONE
-- On OR reduce production expr -> NONE
-- On ONE reduce production expr -> NONE
-- On ONCE reduce production expr -> NONE
-- On NUMBER reduce production expr -> NONE
-- On NOT_IN reduce production expr -> NONE
-- On NOT reduce production expr -> NONE
-- On NONE reduce production expr -> NONE
-- On NO reduce production expr -> NONE
-- On NEXT reduce production expr -> NONE
-- On NEQ reduce production expr -> NONE
-- On NEG reduce production expr -> NONE
-- On MINUS reduce production expr -> NONE
-- On LTE reduce production expr -> NONE
-- On LT reduce production expr -> NONE
-- On LPROJ reduce production expr -> NONE
-- On LPAREN reduce production expr -> NONE
-- On LONE reduce production expr -> NONE
-- On LET reduce production expr -> NONE
-- On LBRACKET reduce production expr -> NONE
-- On LBRACE reduce production expr -> NONE
-- On INVARIANT reduce production expr -> NONE
-- On INTER reduce production expr -> NONE
-- On INST reduce production expr -> NONE
-- On IN reduce production expr -> NONE
-- On IMPLIES reduce production expr -> NONE
-- On IFF reduce production expr -> NONE
-- On IDEN reduce production expr -> NONE
-- On HISTORICALLY reduce production expr -> NONE
-- On HAT reduce production expr -> NONE
-- On HASH reduce production expr -> NONE
-- On GTE reduce production expr -> NONE
-- On GT reduce production expr -> NONE
-- On FALSE reduce production expr -> NONE
-- On EVENTUALLY reduce production expr -> NONE
-- On EQ reduce production expr -> NONE
-- On EOF reduce production expr -> NONE
-- On ELSE reduce production expr -> NONE
-- On DOT reduce production expr -> NONE
-- On COMMA reduce production expr -> NONE
-- On BAR reduce production expr -> NONE
-- On ARROW reduce production expr -> NONE
-- On AND reduce production expr -> NONE
-- On ALWAYS reduce production expr -> NONE
-- On ALL reduce production expr -> NONE
-- On ADD reduce production expr -> NONE

State 113:
## Known stack suffix:
## NO
## LR(1) items:
formula -> NO . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> NO . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> NO . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 258
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 264
## Reductions:

State 114:
## Known stack suffix:
## NEXT
## LR(1) items:
formula -> NEXT . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 257
-- On expr shift to state 151
## Reductions:

State 115:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LTE LT LPROJ LBRACKET INTER IN IMPLIES IFF GTE GT EQ ELSE DOT COMMA ARROW AND ]
formula -> LPAREN . formula RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
iexpr -> LPAREN . iexpr RPAREN [ RPAREN NEQ LTE LT GTE GT EQ ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 244
-- On formula shift to state 246
-- On expr shift to state 248
## Reductions:

State 116:
## Known stack suffix:
## LONE
## LR(1) items:
formula -> LONE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LONE . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LONE . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 250
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 256
## Reductions:

State 117:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> LPAREN . formula RPAREN [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
iexpr -> LPAREN . iexpr RPAREN [ NEQ LTE LT GTE GT EQ ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 244
-- On formula shift to state 246
-- On expr shift to state 248
## Reductions:

State 118:
## Known stack suffix:
## LET
## LR(1) items:
formula -> LET . separated_nonempty_list(COMMA,let_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LET . separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On PLAIN_ID shift to state 119
-- On separated_nonempty_list(COMMA,let_decl) shift to state 238
## Reductions:

State 119:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID . EQ expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID . EQ expr COMMA separated_nonempty_list(COMMA,let_decl) [ LBRACE BAR ]
## Transitions:
-- On EQ shift to state 120
## Reductions:

State 120:
## Known stack suffix:
## PLAIN_ID EQ
## LR(1) items:
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ . expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ . expr COMMA separated_nonempty_list(COMMA,let_decl) [ LBRACE BAR ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 235
## Reductions:

State 121:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> LBRACE . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> LBRACE . specification RBRACE [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 225
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 227
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE reduce production list(formula_semi) ->

State 122:
## Known stack suffix:
## LBRACE
## LR(1) items:
expr -> LBRACE . separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LTE LT LPROJ LBRACKET INTER IN IMPLIES IFF GTE GT EQ ELSE DOT COMMA ARROW AND ]
expr -> LBRACE . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LTE LT LPROJ LBRACKET INTER IN IMPLIES IFF GTE GT EQ ELSE DOT COMMA ARROW AND ]
formula -> LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 106
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On DISJ shift to state 130
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 225
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 227
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE reduce production list(formula_semi) ->

State 123:
## Known stack suffix:
## IDEN
## LR(1) items:
expr -> IDEN . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production expr -> IDEN
-- On UNIV reduce production expr -> IDEN
-- On TRUE reduce production expr -> IDEN
-- On TILDE reduce production expr -> IDEN
-- On SYM reduce production expr -> IDEN
-- On SUB reduce production expr -> IDEN
-- On STAR reduce production expr -> IDEN
-- On SOMETIME reduce production expr -> IDEN
-- On SOME reduce production expr -> IDEN
-- On SINCE reduce production expr -> IDEN
-- On SEMI reduce production expr -> IDEN
-- On RUN reduce production expr -> IDEN
-- On RPROJ reduce production expr -> IDEN
-- On RPAREN reduce production expr -> IDEN
-- On RELEASES reduce production expr -> IDEN
-- On RBRACKET reduce production expr -> IDEN
-- On RBRACE reduce production expr -> IDEN
-- On PRIME reduce production expr -> IDEN
-- On PREVIOUS reduce production expr -> IDEN
-- On PLUS reduce production expr -> IDEN
-- On PLAIN_ID reduce production expr -> IDEN
-- On OVERRIDE reduce production expr -> IDEN
-- On OR reduce production expr -> IDEN
-- On ONE reduce production expr -> IDEN
-- On ONCE reduce production expr -> IDEN
-- On NUMBER reduce production expr -> IDEN
-- On NOT_IN reduce production expr -> IDEN
-- On NOT reduce production expr -> IDEN
-- On NONE reduce production expr -> IDEN
-- On NO reduce production expr -> IDEN
-- On NEXT reduce production expr -> IDEN
-- On NEQ reduce production expr -> IDEN
-- On NEG reduce production expr -> IDEN
-- On MINUS reduce production expr -> IDEN
-- On LTE reduce production expr -> IDEN
-- On LT reduce production expr -> IDEN
-- On LPROJ reduce production expr -> IDEN
-- On LPAREN reduce production expr -> IDEN
-- On LONE reduce production expr -> IDEN
-- On LET reduce production expr -> IDEN
-- On LBRACKET reduce production expr -> IDEN
-- On LBRACE reduce production expr -> IDEN
-- On INVARIANT reduce production expr -> IDEN
-- On INTER reduce production expr -> IDEN
-- On INST reduce production expr -> IDEN
-- On IN reduce production expr -> IDEN
-- On IMPLIES reduce production expr -> IDEN
-- On IFF reduce production expr -> IDEN
-- On IDEN reduce production expr -> IDEN
-- On HISTORICALLY reduce production expr -> IDEN
-- On HAT reduce production expr -> IDEN
-- On HASH reduce production expr -> IDEN
-- On GTE reduce production expr -> IDEN
-- On GT reduce production expr -> IDEN
-- On FALSE reduce production expr -> IDEN
-- On EVENTUALLY reduce production expr -> IDEN
-- On EQ reduce production expr -> IDEN
-- On EOF reduce production expr -> IDEN
-- On ELSE reduce production expr -> IDEN
-- On DOT reduce production expr -> IDEN
-- On COMMA reduce production expr -> IDEN
-- On BAR reduce production expr -> IDEN
-- On ARROW reduce production expr -> IDEN
-- On AND reduce production expr -> IDEN
-- On ALWAYS reduce production expr -> IDEN
-- On ALL reduce production expr -> IDEN
-- On ADD reduce production expr -> IDEN

State 124:
## Known stack suffix:
## HISTORICALLY
## LR(1) items:
formula -> HISTORICALLY . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 224
-- On expr shift to state 151
## Reductions:

State 125:
## Known stack suffix:
## HAT
## LR(1) items:
expr -> HAT . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 223
## Reductions:

State 126:
## Known stack suffix:
## FALSE
## LR(1) items:
formula -> FALSE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> FALSE
-- On UNIV reduce production formula -> FALSE
-- On TRUE reduce production formula -> FALSE
-- On TILDE reduce production formula -> FALSE
-- On SYM reduce production formula -> FALSE
-- On SUB reduce production formula -> FALSE
-- On STAR reduce production formula -> FALSE
-- On SOMETIME reduce production formula -> FALSE
-- On SOME reduce production formula -> FALSE
-- On SINCE reduce production formula -> FALSE
-- On SEMI reduce production formula -> FALSE
-- On RUN reduce production formula -> FALSE
-- On RPAREN reduce production formula -> FALSE
-- On RELEASES reduce production formula -> FALSE
-- On RBRACE reduce production formula -> FALSE
-- On PREVIOUS reduce production formula -> FALSE
-- On PLAIN_ID reduce production formula -> FALSE
-- On OR reduce production formula -> FALSE
-- On ONE reduce production formula -> FALSE
-- On ONCE reduce production formula -> FALSE
-- On NUMBER reduce production formula -> FALSE
-- On NOT reduce production formula -> FALSE
-- On NONE reduce production formula -> FALSE
-- On NO reduce production formula -> FALSE
-- On NEXT reduce production formula -> FALSE
-- On NEG reduce production formula -> FALSE
-- On LPAREN reduce production formula -> FALSE
-- On LONE reduce production formula -> FALSE
-- On LET reduce production formula -> FALSE
-- On LBRACE reduce production formula -> FALSE
-- On INVARIANT reduce production formula -> FALSE
-- On INST reduce production formula -> FALSE
-- On IMPLIES reduce production formula -> FALSE
-- On IFF reduce production formula -> FALSE
-- On IDEN reduce production formula -> FALSE
-- On HISTORICALLY reduce production formula -> FALSE
-- On HAT reduce production formula -> FALSE
-- On HASH reduce production formula -> FALSE
-- On FALSE reduce production formula -> FALSE
-- On EVENTUALLY reduce production formula -> FALSE
-- On EOF reduce production formula -> FALSE
-- On ELSE reduce production formula -> FALSE
-- On AND reduce production formula -> FALSE
-- On ALWAYS reduce production formula -> FALSE
-- On ALL reduce production formula -> FALSE
-- On ADD reduce production formula -> FALSE

State 127:
## Known stack suffix:
## EVENTUALLY
## LR(1) items:
formula -> EVENTUALLY . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 222
-- On expr shift to state 151
## Reductions:

State 128:
## Known stack suffix:
## ALWAYS
## LR(1) items:
formula -> ALWAYS . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 221
-- On expr shift to state 151
## Reductions:

State 129:
## Known stack suffix:
## ALL
## LR(1) items:
formula -> ALL . separated_nonempty_list(COMMA,ae_decl) BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ALL . separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On DISJ shift to state 130
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 210
## Reductions:

State 130:
## Known stack suffix:
## DISJ
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ . separated_nonempty_list(COMMA,plain_id) COLON expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ . separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On separated_nonempty_list(COMMA,plain_id) shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id)
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) . COLON expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) . COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On COLON shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id) COLON
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON . expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON . expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 202
## Reductions:

State 133:
## Known stack suffix:
## ADD
## LR(1) items:
iexpr -> ADD . LBRACKET iexpr COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACKET shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## ADD LBRACKET
## LR(1) items:
iexpr -> ADD LBRACKET . iexpr COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## ADD LBRACKET iexpr
## LR(1) items:
iexpr -> ADD LBRACKET iexpr . COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On COMMA shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## ADD LBRACKET iexpr COMMA
## LR(1) items:
iexpr -> ADD LBRACKET iexpr COMMA . iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## ADD LBRACKET iexpr COMMA iexpr
## LR(1) items:
iexpr -> ADD LBRACKET iexpr COMMA iexpr . RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACKET shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## ADD LBRACKET iexpr COMMA iexpr RBRACKET
## LR(1) items:
iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On UNIV reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On TRUE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On TILDE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On SYM reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On SUB reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On STAR reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On SOMETIME reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On SOME reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On SINCE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On SEMI reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On RUN reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On RPAREN reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On RELEASES reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On RBRACKET reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On RBRACE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On PREVIOUS reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On PLAIN_ID reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On OR reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On ONE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On ONCE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On NUMBER reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On NOT reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On NONE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On NO reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On NEXT reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On NEQ reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On NEG reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On LTE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On LT reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On LPAREN reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On LONE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On LET reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On LBRACE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On INVARIANT reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On INST reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On IMPLIES reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On IFF reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On IDEN reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On HISTORICALLY reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On HAT reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On HASH reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On GTE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On GT reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On FALSE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On EVENTUALLY reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On EQ reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On EOF reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On ELSE reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On COMMA reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On AND reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On ALWAYS reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On ALL reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET
-- On ADD reduce production iexpr -> ADD LBRACKET iexpr COMMA iexpr RBRACKET

State 139:
## Known stack suffix:
## iexpr
## LR(1) items:
formula -> iexpr . icomp_op iexpr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On NEQ shift to state 140
-- On LTE shift to state 141
-- On LT shift to state 142
-- On GTE shift to state 143
-- On GT shift to state 144
-- On EQ shift to state 145
-- On icomp_op shift to state 146
## Reductions:

State 140:
## Known stack suffix:
## NEQ
## LR(1) items:
icomp_op -> NEQ . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Reductions:
-- On SUB reduce production icomp_op -> NEQ
-- On NUMBER reduce production icomp_op -> NEQ
-- On NEG reduce production icomp_op -> NEQ
-- On LPAREN reduce production icomp_op -> NEQ
-- On HASH reduce production icomp_op -> NEQ
-- On ADD reduce production icomp_op -> NEQ

State 141:
## Known stack suffix:
## LTE
## LR(1) items:
icomp_op -> LTE . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Reductions:
-- On SUB reduce production icomp_op -> LTE
-- On NUMBER reduce production icomp_op -> LTE
-- On NEG reduce production icomp_op -> LTE
-- On LPAREN reduce production icomp_op -> LTE
-- On HASH reduce production icomp_op -> LTE
-- On ADD reduce production icomp_op -> LTE

State 142:
## Known stack suffix:
## LT
## LR(1) items:
icomp_op -> LT . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Reductions:
-- On SUB reduce production icomp_op -> LT
-- On NUMBER reduce production icomp_op -> LT
-- On NEG reduce production icomp_op -> LT
-- On LPAREN reduce production icomp_op -> LT
-- On HASH reduce production icomp_op -> LT
-- On ADD reduce production icomp_op -> LT

State 143:
## Known stack suffix:
## GTE
## LR(1) items:
icomp_op -> GTE . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Reductions:
-- On SUB reduce production icomp_op -> GTE
-- On NUMBER reduce production icomp_op -> GTE
-- On NEG reduce production icomp_op -> GTE
-- On LPAREN reduce production icomp_op -> GTE
-- On HASH reduce production icomp_op -> GTE
-- On ADD reduce production icomp_op -> GTE

State 144:
## Known stack suffix:
## GT
## LR(1) items:
icomp_op -> GT . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Reductions:
-- On SUB reduce production icomp_op -> GT
-- On NUMBER reduce production icomp_op -> GT
-- On NEG reduce production icomp_op -> GT
-- On LPAREN reduce production icomp_op -> GT
-- On HASH reduce production icomp_op -> GT
-- On ADD reduce production icomp_op -> GT

State 145:
## Known stack suffix:
## EQ
## LR(1) items:
icomp_op -> EQ . [ SUB NUMBER NEG LPAREN HASH ADD ]
## Transitions:
## Reductions:
-- On SUB reduce production icomp_op -> EQ
-- On NUMBER reduce production icomp_op -> EQ
-- On NEG reduce production icomp_op -> EQ
-- On LPAREN reduce production icomp_op -> EQ
-- On HASH reduce production icomp_op -> EQ
-- On ADD reduce production icomp_op -> EQ

State 146:
## Known stack suffix:
## iexpr icomp_op
## LR(1) items:
formula -> iexpr icomp_op . iexpr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## iexpr icomp_op iexpr
## LR(1) items:
formula -> iexpr icomp_op iexpr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> iexpr icomp_op iexpr
-- On UNIV reduce production formula -> iexpr icomp_op iexpr
-- On TRUE reduce production formula -> iexpr icomp_op iexpr
-- On TILDE reduce production formula -> iexpr icomp_op iexpr
-- On SYM reduce production formula -> iexpr icomp_op iexpr
-- On SUB reduce production formula -> iexpr icomp_op iexpr
-- On STAR reduce production formula -> iexpr icomp_op iexpr
-- On SOMETIME reduce production formula -> iexpr icomp_op iexpr
-- On SOME reduce production formula -> iexpr icomp_op iexpr
-- On SINCE reduce production formula -> iexpr icomp_op iexpr
-- On SEMI reduce production formula -> iexpr icomp_op iexpr
-- On RUN reduce production formula -> iexpr icomp_op iexpr
-- On RPAREN reduce production formula -> iexpr icomp_op iexpr
-- On RELEASES reduce production formula -> iexpr icomp_op iexpr
-- On RBRACE reduce production formula -> iexpr icomp_op iexpr
-- On PREVIOUS reduce production formula -> iexpr icomp_op iexpr
-- On PLAIN_ID reduce production formula -> iexpr icomp_op iexpr
-- On OR reduce production formula -> iexpr icomp_op iexpr
-- On ONE reduce production formula -> iexpr icomp_op iexpr
-- On ONCE reduce production formula -> iexpr icomp_op iexpr
-- On NUMBER reduce production formula -> iexpr icomp_op iexpr
-- On NOT reduce production formula -> iexpr icomp_op iexpr
-- On NONE reduce production formula -> iexpr icomp_op iexpr
-- On NO reduce production formula -> iexpr icomp_op iexpr
-- On NEXT reduce production formula -> iexpr icomp_op iexpr
-- On NEG reduce production formula -> iexpr icomp_op iexpr
-- On LPAREN reduce production formula -> iexpr icomp_op iexpr
-- On LONE reduce production formula -> iexpr icomp_op iexpr
-- On LET reduce production formula -> iexpr icomp_op iexpr
-- On LBRACE reduce production formula -> iexpr icomp_op iexpr
-- On INVARIANT reduce production formula -> iexpr icomp_op iexpr
-- On INST reduce production formula -> iexpr icomp_op iexpr
-- On IMPLIES reduce production formula -> iexpr icomp_op iexpr
-- On IFF reduce production formula -> iexpr icomp_op iexpr
-- On IDEN reduce production formula -> iexpr icomp_op iexpr
-- On HISTORICALLY reduce production formula -> iexpr icomp_op iexpr
-- On HAT reduce production formula -> iexpr icomp_op iexpr
-- On HASH reduce production formula -> iexpr icomp_op iexpr
-- On FALSE reduce production formula -> iexpr icomp_op iexpr
-- On EVENTUALLY reduce production formula -> iexpr icomp_op iexpr
-- On EOF reduce production formula -> iexpr icomp_op iexpr
-- On ELSE reduce production formula -> iexpr icomp_op iexpr
-- On AND reduce production formula -> iexpr icomp_op iexpr
-- On ALWAYS reduce production formula -> iexpr icomp_op iexpr
-- On ALL reduce production formula -> iexpr icomp_op iexpr
-- On ADD reduce production formula -> iexpr icomp_op iexpr

State 148:
## Known stack suffix:
## formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . OR formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . IFF formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . UNTIL formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . RELEASES formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . SINCE formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 200
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:

State 149:
## Known stack suffix:
## formula UNTIL
## LR(1) items:
formula -> formula UNTIL . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 150
-- On expr shift to state 151
## Reductions:

State 150:
## Known stack suffix:
## formula UNTIL formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula UNTIL formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> formula UNTIL formula
-- On UNIV reduce production formula -> formula UNTIL formula
-- On TRUE reduce production formula -> formula UNTIL formula
-- On TILDE reduce production formula -> formula UNTIL formula
-- On SYM reduce production formula -> formula UNTIL formula
-- On SUB reduce production formula -> formula UNTIL formula
-- On STAR reduce production formula -> formula UNTIL formula
-- On SOMETIME reduce production formula -> formula UNTIL formula
-- On SOME reduce production formula -> formula UNTIL formula
-- On SINCE reduce production formula -> formula UNTIL formula
-- On SEMI reduce production formula -> formula UNTIL formula
-- On RUN reduce production formula -> formula UNTIL formula
-- On RPAREN reduce production formula -> formula UNTIL formula
-- On RELEASES reduce production formula -> formula UNTIL formula
-- On RBRACE reduce production formula -> formula UNTIL formula
-- On PREVIOUS reduce production formula -> formula UNTIL formula
-- On PLAIN_ID reduce production formula -> formula UNTIL formula
-- On OR reduce production formula -> formula UNTIL formula
-- On ONE reduce production formula -> formula UNTIL formula
-- On ONCE reduce production formula -> formula UNTIL formula
-- On NUMBER reduce production formula -> formula UNTIL formula
-- On NOT reduce production formula -> formula UNTIL formula
-- On NONE reduce production formula -> formula UNTIL formula
-- On NO reduce production formula -> formula UNTIL formula
-- On NEXT reduce production formula -> formula UNTIL formula
-- On NEG reduce production formula -> formula UNTIL formula
-- On LPAREN reduce production formula -> formula UNTIL formula
-- On LONE reduce production formula -> formula UNTIL formula
-- On LET reduce production formula -> formula UNTIL formula
-- On LBRACE reduce production formula -> formula UNTIL formula
-- On INVARIANT reduce production formula -> formula UNTIL formula
-- On INST reduce production formula -> formula UNTIL formula
-- On IMPLIES reduce production formula -> formula UNTIL formula
-- On IFF reduce production formula -> formula UNTIL formula
-- On IDEN reduce production formula -> formula UNTIL formula
-- On HISTORICALLY reduce production formula -> formula UNTIL formula
-- On HAT reduce production formula -> formula UNTIL formula
-- On HASH reduce production formula -> formula UNTIL formula
-- On FALSE reduce production formula -> formula UNTIL formula
-- On EVENTUALLY reduce production formula -> formula UNTIL formula
-- On EOF reduce production formula -> formula UNTIL formula
-- On ELSE reduce production formula -> formula UNTIL formula
-- On AND reduce production formula -> formula UNTIL formula
-- On ALWAYS reduce production formula -> formula UNTIL formula
-- On ALL reduce production formula -> formula UNTIL formula
-- On ADD reduce production formula -> formula UNTIL formula

State 151:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> expr . NOT_IN expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . IN expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . EQ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NEQ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:

State 152:
## Known stack suffix:
## expr RPROJ
## LR(1) items:
expr -> expr RPROJ . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## expr RPROJ expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr RPROJ expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
-- On LBRACKET shift to state 155
-- On DOT shift to state 165
## Reductions:
-- On UNTIL reduce production expr -> expr RPROJ expr
-- On UNIV reduce production expr -> expr RPROJ expr
-- On TRUE reduce production expr -> expr RPROJ expr
-- On TILDE reduce production expr -> expr RPROJ expr
-- On SYM reduce production expr -> expr RPROJ expr
-- On SUB reduce production expr -> expr RPROJ expr
-- On STAR reduce production expr -> expr RPROJ expr
-- On SOMETIME reduce production expr -> expr RPROJ expr
-- On SOME reduce production expr -> expr RPROJ expr
-- On SINCE reduce production expr -> expr RPROJ expr
-- On SEMI reduce production expr -> expr RPROJ expr
-- On RUN reduce production expr -> expr RPROJ expr
-- On RPROJ reduce production expr -> expr RPROJ expr
-- On RPAREN reduce production expr -> expr RPROJ expr
-- On RELEASES reduce production expr -> expr RPROJ expr
-- On RBRACKET reduce production expr -> expr RPROJ expr
-- On RBRACE reduce production expr -> expr RPROJ expr
-- On PREVIOUS reduce production expr -> expr RPROJ expr
-- On PLUS reduce production expr -> expr RPROJ expr
-- On PLAIN_ID reduce production expr -> expr RPROJ expr
-- On OVERRIDE reduce production expr -> expr RPROJ expr
-- On OR reduce production expr -> expr RPROJ expr
-- On ONE reduce production expr -> expr RPROJ expr
-- On ONCE reduce production expr -> expr RPROJ expr
-- On NUMBER reduce production expr -> expr RPROJ expr
-- On NOT_IN reduce production expr -> expr RPROJ expr
-- On NOT reduce production expr -> expr RPROJ expr
-- On NONE reduce production expr -> expr RPROJ expr
-- On NO reduce production expr -> expr RPROJ expr
-- On NEXT reduce production expr -> expr RPROJ expr
-- On NEQ reduce production expr -> expr RPROJ expr
-- On NEG reduce production expr -> expr RPROJ expr
-- On MINUS reduce production expr -> expr RPROJ expr
-- On LTE reduce production expr -> expr RPROJ expr
-- On LT reduce production expr -> expr RPROJ expr
-- On LPROJ reduce production expr -> expr RPROJ expr
-- On LPAREN reduce production expr -> expr RPROJ expr
-- On LONE reduce production expr -> expr RPROJ expr
-- On LET reduce production expr -> expr RPROJ expr
-- On LBRACE reduce production expr -> expr RPROJ expr
-- On INVARIANT reduce production expr -> expr RPROJ expr
-- On INTER reduce production expr -> expr RPROJ expr
-- On INST reduce production expr -> expr RPROJ expr
-- On IN reduce production expr -> expr RPROJ expr
-- On IMPLIES reduce production expr -> expr RPROJ expr
-- On IFF reduce production expr -> expr RPROJ expr
-- On IDEN reduce production expr -> expr RPROJ expr
-- On HISTORICALLY reduce production expr -> expr RPROJ expr
-- On HAT reduce production expr -> expr RPROJ expr
-- On HASH reduce production expr -> expr RPROJ expr
-- On GTE reduce production expr -> expr RPROJ expr
-- On GT reduce production expr -> expr RPROJ expr
-- On FALSE reduce production expr -> expr RPROJ expr
-- On EVENTUALLY reduce production expr -> expr RPROJ expr
-- On EQ reduce production expr -> expr RPROJ expr
-- On EOF reduce production expr -> expr RPROJ expr
-- On ELSE reduce production expr -> expr RPROJ expr
-- On COMMA reduce production expr -> expr RPROJ expr
-- On BAR reduce production expr -> expr RPROJ expr
-- On ARROW reduce production expr -> expr RPROJ expr
-- On AND reduce production expr -> expr RPROJ expr
-- On ALWAYS reduce production expr -> expr RPROJ expr
-- On ALL reduce production expr -> expr RPROJ expr
-- On ADD reduce production expr -> expr RPROJ expr

State 154:
## Known stack suffix:
## expr PRIME
## LR(1) items:
expr -> expr PRIME . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production expr -> expr PRIME
-- On UNIV reduce production expr -> expr PRIME
-- On TRUE reduce production expr -> expr PRIME
-- On TILDE reduce production expr -> expr PRIME
-- On SYM reduce production expr -> expr PRIME
-- On SUB reduce production expr -> expr PRIME
-- On STAR reduce production expr -> expr PRIME
-- On SOMETIME reduce production expr -> expr PRIME
-- On SOME reduce production expr -> expr PRIME
-- On SINCE reduce production expr -> expr PRIME
-- On SEMI reduce production expr -> expr PRIME
-- On RUN reduce production expr -> expr PRIME
-- On RPROJ reduce production expr -> expr PRIME
-- On RPAREN reduce production expr -> expr PRIME
-- On RELEASES reduce production expr -> expr PRIME
-- On RBRACKET reduce production expr -> expr PRIME
-- On RBRACE reduce production expr -> expr PRIME
-- On PRIME reduce production expr -> expr PRIME
-- On PREVIOUS reduce production expr -> expr PRIME
-- On PLUS reduce production expr -> expr PRIME
-- On PLAIN_ID reduce production expr -> expr PRIME
-- On OVERRIDE reduce production expr -> expr PRIME
-- On OR reduce production expr -> expr PRIME
-- On ONE reduce production expr -> expr PRIME
-- On ONCE reduce production expr -> expr PRIME
-- On NUMBER reduce production expr -> expr PRIME
-- On NOT_IN reduce production expr -> expr PRIME
-- On NOT reduce production expr -> expr PRIME
-- On NONE reduce production expr -> expr PRIME
-- On NO reduce production expr -> expr PRIME
-- On NEXT reduce production expr -> expr PRIME
-- On NEQ reduce production expr -> expr PRIME
-- On NEG reduce production expr -> expr PRIME
-- On MINUS reduce production expr -> expr PRIME
-- On LTE reduce production expr -> expr PRIME
-- On LT reduce production expr -> expr PRIME
-- On LPROJ reduce production expr -> expr PRIME
-- On LPAREN reduce production expr -> expr PRIME
-- On LONE reduce production expr -> expr PRIME
-- On LET reduce production expr -> expr PRIME
-- On LBRACKET reduce production expr -> expr PRIME
-- On LBRACE reduce production expr -> expr PRIME
-- On INVARIANT reduce production expr -> expr PRIME
-- On INTER reduce production expr -> expr PRIME
-- On INST reduce production expr -> expr PRIME
-- On IN reduce production expr -> expr PRIME
-- On IMPLIES reduce production expr -> expr PRIME
-- On IFF reduce production expr -> expr PRIME
-- On IDEN reduce production expr -> expr PRIME
-- On HISTORICALLY reduce production expr -> expr PRIME
-- On HAT reduce production expr -> expr PRIME
-- On HASH reduce production expr -> expr PRIME
-- On GTE reduce production expr -> expr PRIME
-- On GT reduce production expr -> expr PRIME
-- On FALSE reduce production expr -> expr PRIME
-- On EVENTUALLY reduce production expr -> expr PRIME
-- On EQ reduce production expr -> expr PRIME
-- On EOF reduce production expr -> expr PRIME
-- On ELSE reduce production expr -> expr PRIME
-- On DOT reduce production expr -> expr PRIME
-- On COMMA reduce production expr -> expr PRIME
-- On BAR reduce production expr -> expr PRIME
-- On ARROW reduce production expr -> expr PRIME
-- On AND reduce production expr -> expr PRIME
-- On ALWAYS reduce production expr -> expr PRIME
-- On ALL reduce production expr -> expr PRIME
-- On ADD reduce production expr -> expr PRIME

State 155:
## Known stack suffix:
## expr LBRACKET
## LR(1) items:
expr -> expr LBRACKET . separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,expr) shift to state 156
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 158
## Reductions:

State 156:
## Known stack suffix:
## expr LBRACKET separated_nonempty_list(COMMA,expr)
## LR(1) items:
expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) . RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACKET shift to state 157
## Reductions:

State 157:
## Known stack suffix:
## expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
## LR(1) items:
expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On UNIV reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On TRUE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On TILDE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On SYM reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On SUB reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On STAR reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On SOMETIME reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On SOME reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On SINCE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On SEMI reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On RUN reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On RPROJ reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On RPAREN reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On RELEASES reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On RBRACKET reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On RBRACE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On PRIME reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On PREVIOUS reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On PLUS reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On PLAIN_ID reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On OVERRIDE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On OR reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On ONE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On ONCE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On NUMBER reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On NOT_IN reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On NOT reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On NONE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On NO reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On NEXT reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On NEQ reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On NEG reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On MINUS reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On LTE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On LT reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On LPROJ reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On LPAREN reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On LONE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On LET reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On LBRACKET reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On LBRACE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On INVARIANT reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On INTER reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On INST reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On IN reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On IMPLIES reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On IFF reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On IDEN reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On HISTORICALLY reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On HAT reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On HASH reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On GTE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On GT reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On FALSE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On EVENTUALLY reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On EQ reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On EOF reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On ELSE reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On DOT reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On COMMA reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On BAR reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On ARROW reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On AND reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On ALWAYS reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On ALL reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET
-- On ADD reduce production expr -> expr LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET

State 158:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . INTER expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . LPROJ expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . RPROJ expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . ARROW expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . MINUS expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . DOT expr [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
expr -> expr . PRIME [ RPROJ RBRACKET PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT COMMA ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
separated_nonempty_list(COMMA,expr) -> expr . [ RBRACKET ]
separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RBRACKET ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On COMMA shift to state 181
-- On ARROW shift to state 169
## Reductions:
-- On RBRACKET reduce production separated_nonempty_list(COMMA,expr) -> expr

State 159:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr PLUS expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On OVERRIDE shift to state 161
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production expr -> expr PLUS expr
-- On UNIV reduce production expr -> expr PLUS expr
-- On TRUE reduce production expr -> expr PLUS expr
-- On TILDE reduce production expr -> expr PLUS expr
-- On SYM reduce production expr -> expr PLUS expr
-- On SUB reduce production expr -> expr PLUS expr
-- On STAR reduce production expr -> expr PLUS expr
-- On SOMETIME reduce production expr -> expr PLUS expr
-- On SOME reduce production expr -> expr PLUS expr
-- On SINCE reduce production expr -> expr PLUS expr
-- On SEMI reduce production expr -> expr PLUS expr
-- On RUN reduce production expr -> expr PLUS expr
-- On RPAREN reduce production expr -> expr PLUS expr
-- On RELEASES reduce production expr -> expr PLUS expr
-- On RBRACKET reduce production expr -> expr PLUS expr
-- On RBRACE reduce production expr -> expr PLUS expr
-- On PREVIOUS reduce production expr -> expr PLUS expr
-- On PLUS reduce production expr -> expr PLUS expr
-- On PLAIN_ID reduce production expr -> expr PLUS expr
-- On OR reduce production expr -> expr PLUS expr
-- On ONE reduce production expr -> expr PLUS expr
-- On ONCE reduce production expr -> expr PLUS expr
-- On NUMBER reduce production expr -> expr PLUS expr
-- On NOT_IN reduce production expr -> expr PLUS expr
-- On NOT reduce production expr -> expr PLUS expr
-- On NONE reduce production expr -> expr PLUS expr
-- On NO reduce production expr -> expr PLUS expr
-- On NEXT reduce production expr -> expr PLUS expr
-- On NEQ reduce production expr -> expr PLUS expr
-- On NEG reduce production expr -> expr PLUS expr
-- On MINUS reduce production expr -> expr PLUS expr
-- On LTE reduce production expr -> expr PLUS expr
-- On LT reduce production expr -> expr PLUS expr
-- On LPAREN reduce production expr -> expr PLUS expr
-- On LONE reduce production expr -> expr PLUS expr
-- On LET reduce production expr -> expr PLUS expr
-- On LBRACE reduce production expr -> expr PLUS expr
-- On INVARIANT reduce production expr -> expr PLUS expr
-- On INST reduce production expr -> expr PLUS expr
-- On IN reduce production expr -> expr PLUS expr
-- On IMPLIES reduce production expr -> expr PLUS expr
-- On IFF reduce production expr -> expr PLUS expr
-- On IDEN reduce production expr -> expr PLUS expr
-- On HISTORICALLY reduce production expr -> expr PLUS expr
-- On HAT reduce production expr -> expr PLUS expr
-- On HASH reduce production expr -> expr PLUS expr
-- On GTE reduce production expr -> expr PLUS expr
-- On GT reduce production expr -> expr PLUS expr
-- On FALSE reduce production expr -> expr PLUS expr
-- On EVENTUALLY reduce production expr -> expr PLUS expr
-- On EQ reduce production expr -> expr PLUS expr
-- On EOF reduce production expr -> expr PLUS expr
-- On ELSE reduce production expr -> expr PLUS expr
-- On COMMA reduce production expr -> expr PLUS expr
-- On BAR reduce production expr -> expr PLUS expr
-- On AND reduce production expr -> expr PLUS expr
-- On ALWAYS reduce production expr -> expr PLUS expr
-- On ALL reduce production expr -> expr PLUS expr
-- On ADD reduce production expr -> expr PLUS expr

State 161:
## Known stack suffix:
## expr OVERRIDE
## LR(1) items:
expr -> expr OVERRIDE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 162
## Reductions:

State 162:
## Known stack suffix:
## expr OVERRIDE expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr OVERRIDE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production expr -> expr OVERRIDE expr
-- On UNIV reduce production expr -> expr OVERRIDE expr
-- On TRUE reduce production expr -> expr OVERRIDE expr
-- On TILDE reduce production expr -> expr OVERRIDE expr
-- On SYM reduce production expr -> expr OVERRIDE expr
-- On SUB reduce production expr -> expr OVERRIDE expr
-- On STAR reduce production expr -> expr OVERRIDE expr
-- On SOMETIME reduce production expr -> expr OVERRIDE expr
-- On SOME reduce production expr -> expr OVERRIDE expr
-- On SINCE reduce production expr -> expr OVERRIDE expr
-- On SEMI reduce production expr -> expr OVERRIDE expr
-- On RUN reduce production expr -> expr OVERRIDE expr
-- On RPAREN reduce production expr -> expr OVERRIDE expr
-- On RELEASES reduce production expr -> expr OVERRIDE expr
-- On RBRACKET reduce production expr -> expr OVERRIDE expr
-- On RBRACE reduce production expr -> expr OVERRIDE expr
-- On PREVIOUS reduce production expr -> expr OVERRIDE expr
-- On PLUS reduce production expr -> expr OVERRIDE expr
-- On PLAIN_ID reduce production expr -> expr OVERRIDE expr
-- On OVERRIDE reduce production expr -> expr OVERRIDE expr
-- On OR reduce production expr -> expr OVERRIDE expr
-- On ONE reduce production expr -> expr OVERRIDE expr
-- On ONCE reduce production expr -> expr OVERRIDE expr
-- On NUMBER reduce production expr -> expr OVERRIDE expr
-- On NOT_IN reduce production expr -> expr OVERRIDE expr
-- On NOT reduce production expr -> expr OVERRIDE expr
-- On NONE reduce production expr -> expr OVERRIDE expr
-- On NO reduce production expr -> expr OVERRIDE expr
-- On NEXT reduce production expr -> expr OVERRIDE expr
-- On NEQ reduce production expr -> expr OVERRIDE expr
-- On NEG reduce production expr -> expr OVERRIDE expr
-- On MINUS reduce production expr -> expr OVERRIDE expr
-- On LTE reduce production expr -> expr OVERRIDE expr
-- On LT reduce production expr -> expr OVERRIDE expr
-- On LPAREN reduce production expr -> expr OVERRIDE expr
-- On LONE reduce production expr -> expr OVERRIDE expr
-- On LET reduce production expr -> expr OVERRIDE expr
-- On LBRACE reduce production expr -> expr OVERRIDE expr
-- On INVARIANT reduce production expr -> expr OVERRIDE expr
-- On INST reduce production expr -> expr OVERRIDE expr
-- On IN reduce production expr -> expr OVERRIDE expr
-- On IMPLIES reduce production expr -> expr OVERRIDE expr
-- On IFF reduce production expr -> expr OVERRIDE expr
-- On IDEN reduce production expr -> expr OVERRIDE expr
-- On HISTORICALLY reduce production expr -> expr OVERRIDE expr
-- On HAT reduce production expr -> expr OVERRIDE expr
-- On HASH reduce production expr -> expr OVERRIDE expr
-- On GTE reduce production expr -> expr OVERRIDE expr
-- On GT reduce production expr -> expr OVERRIDE expr
-- On FALSE reduce production expr -> expr OVERRIDE expr
-- On EVENTUALLY reduce production expr -> expr OVERRIDE expr
-- On EQ reduce production expr -> expr OVERRIDE expr
-- On EOF reduce production expr -> expr OVERRIDE expr
-- On ELSE reduce production expr -> expr OVERRIDE expr
-- On COMMA reduce production expr -> expr OVERRIDE expr
-- On BAR reduce production expr -> expr OVERRIDE expr
-- On AND reduce production expr -> expr OVERRIDE expr
-- On ALWAYS reduce production expr -> expr OVERRIDE expr
-- On ALL reduce production expr -> expr OVERRIDE expr
-- On ADD reduce production expr -> expr OVERRIDE expr

State 163:
## Known stack suffix:
## expr LPROJ
## LR(1) items:
expr -> expr LPROJ . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 164
## Reductions:

State 164:
## Known stack suffix:
## expr LPROJ expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr LPROJ expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On LBRACKET shift to state 155
-- On DOT shift to state 165
## Reductions:
-- On UNTIL reduce production expr -> expr LPROJ expr
-- On UNIV reduce production expr -> expr LPROJ expr
-- On TRUE reduce production expr -> expr LPROJ expr
-- On TILDE reduce production expr -> expr LPROJ expr
-- On SYM reduce production expr -> expr LPROJ expr
-- On SUB reduce production expr -> expr LPROJ expr
-- On STAR reduce production expr -> expr LPROJ expr
-- On SOMETIME reduce production expr -> expr LPROJ expr
-- On SOME reduce production expr -> expr LPROJ expr
-- On SINCE reduce production expr -> expr LPROJ expr
-- On SEMI reduce production expr -> expr LPROJ expr
-- On RUN reduce production expr -> expr LPROJ expr
-- On RPAREN reduce production expr -> expr LPROJ expr
-- On RELEASES reduce production expr -> expr LPROJ expr
-- On RBRACKET reduce production expr -> expr LPROJ expr
-- On RBRACE reduce production expr -> expr LPROJ expr
-- On PREVIOUS reduce production expr -> expr LPROJ expr
-- On PLUS reduce production expr -> expr LPROJ expr
-- On PLAIN_ID reduce production expr -> expr LPROJ expr
-- On OVERRIDE reduce production expr -> expr LPROJ expr
-- On OR reduce production expr -> expr LPROJ expr
-- On ONE reduce production expr -> expr LPROJ expr
-- On ONCE reduce production expr -> expr LPROJ expr
-- On NUMBER reduce production expr -> expr LPROJ expr
-- On NOT_IN reduce production expr -> expr LPROJ expr
-- On NOT reduce production expr -> expr LPROJ expr
-- On NONE reduce production expr -> expr LPROJ expr
-- On NO reduce production expr -> expr LPROJ expr
-- On NEXT reduce production expr -> expr LPROJ expr
-- On NEQ reduce production expr -> expr LPROJ expr
-- On NEG reduce production expr -> expr LPROJ expr
-- On MINUS reduce production expr -> expr LPROJ expr
-- On LTE reduce production expr -> expr LPROJ expr
-- On LT reduce production expr -> expr LPROJ expr
-- On LPROJ reduce production expr -> expr LPROJ expr
-- On LPAREN reduce production expr -> expr LPROJ expr
-- On LONE reduce production expr -> expr LPROJ expr
-- On LET reduce production expr -> expr LPROJ expr
-- On LBRACE reduce production expr -> expr LPROJ expr
-- On INVARIANT reduce production expr -> expr LPROJ expr
-- On INTER reduce production expr -> expr LPROJ expr
-- On INST reduce production expr -> expr LPROJ expr
-- On IN reduce production expr -> expr LPROJ expr
-- On IMPLIES reduce production expr -> expr LPROJ expr
-- On IFF reduce production expr -> expr LPROJ expr
-- On IDEN reduce production expr -> expr LPROJ expr
-- On HISTORICALLY reduce production expr -> expr LPROJ expr
-- On HAT reduce production expr -> expr LPROJ expr
-- On HASH reduce production expr -> expr LPROJ expr
-- On GTE reduce production expr -> expr LPROJ expr
-- On GT reduce production expr -> expr LPROJ expr
-- On FALSE reduce production expr -> expr LPROJ expr
-- On EVENTUALLY reduce production expr -> expr LPROJ expr
-- On EQ reduce production expr -> expr LPROJ expr
-- On EOF reduce production expr -> expr LPROJ expr
-- On ELSE reduce production expr -> expr LPROJ expr
-- On COMMA reduce production expr -> expr LPROJ expr
-- On BAR reduce production expr -> expr LPROJ expr
-- On ARROW reduce production expr -> expr LPROJ expr
-- On AND reduce production expr -> expr LPROJ expr
-- On ALWAYS reduce production expr -> expr LPROJ expr
-- On ALL reduce production expr -> expr LPROJ expr
-- On ADD reduce production expr -> expr LPROJ expr

State 165:
## Known stack suffix:
## expr DOT
## LR(1) items:
expr -> expr DOT . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 166
## Reductions:

State 166:
## Known stack suffix:
## expr DOT expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr DOT expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
## Reductions:
-- On UNTIL reduce production expr -> expr DOT expr
-- On UNIV reduce production expr -> expr DOT expr
-- On TRUE reduce production expr -> expr DOT expr
-- On TILDE reduce production expr -> expr DOT expr
-- On SYM reduce production expr -> expr DOT expr
-- On SUB reduce production expr -> expr DOT expr
-- On STAR reduce production expr -> expr DOT expr
-- On SOMETIME reduce production expr -> expr DOT expr
-- On SOME reduce production expr -> expr DOT expr
-- On SINCE reduce production expr -> expr DOT expr
-- On SEMI reduce production expr -> expr DOT expr
-- On RUN reduce production expr -> expr DOT expr
-- On RPROJ reduce production expr -> expr DOT expr
-- On RPAREN reduce production expr -> expr DOT expr
-- On RELEASES reduce production expr -> expr DOT expr
-- On RBRACKET reduce production expr -> expr DOT expr
-- On RBRACE reduce production expr -> expr DOT expr
-- On PREVIOUS reduce production expr -> expr DOT expr
-- On PLUS reduce production expr -> expr DOT expr
-- On PLAIN_ID reduce production expr -> expr DOT expr
-- On OVERRIDE reduce production expr -> expr DOT expr
-- On OR reduce production expr -> expr DOT expr
-- On ONE reduce production expr -> expr DOT expr
-- On ONCE reduce production expr -> expr DOT expr
-- On NUMBER reduce production expr -> expr DOT expr
-- On NOT_IN reduce production expr -> expr DOT expr
-- On NOT reduce production expr -> expr DOT expr
-- On NONE reduce production expr -> expr DOT expr
-- On NO reduce production expr -> expr DOT expr
-- On NEXT reduce production expr -> expr DOT expr
-- On NEQ reduce production expr -> expr DOT expr
-- On NEG reduce production expr -> expr DOT expr
-- On MINUS reduce production expr -> expr DOT expr
-- On LTE reduce production expr -> expr DOT expr
-- On LT reduce production expr -> expr DOT expr
-- On LPROJ reduce production expr -> expr DOT expr
-- On LPAREN reduce production expr -> expr DOT expr
-- On LONE reduce production expr -> expr DOT expr
-- On LET reduce production expr -> expr DOT expr
-- On LBRACKET reduce production expr -> expr DOT expr
-- On LBRACE reduce production expr -> expr DOT expr
-- On INVARIANT reduce production expr -> expr DOT expr
-- On INTER reduce production expr -> expr DOT expr
-- On INST reduce production expr -> expr DOT expr
-- On IN reduce production expr -> expr DOT expr
-- On IMPLIES reduce production expr -> expr DOT expr
-- On IFF reduce production expr -> expr DOT expr
-- On IDEN reduce production expr -> expr DOT expr
-- On HISTORICALLY reduce production expr -> expr DOT expr
-- On HAT reduce production expr -> expr DOT expr
-- On HASH reduce production expr -> expr DOT expr
-- On GTE reduce production expr -> expr DOT expr
-- On GT reduce production expr -> expr DOT expr
-- On FALSE reduce production expr -> expr DOT expr
-- On EVENTUALLY reduce production expr -> expr DOT expr
-- On EQ reduce production expr -> expr DOT expr
-- On EOF reduce production expr -> expr DOT expr
-- On ELSE reduce production expr -> expr DOT expr
-- On DOT reduce production expr -> expr DOT expr
-- On COMMA reduce production expr -> expr DOT expr
-- On BAR reduce production expr -> expr DOT expr
-- On ARROW reduce production expr -> expr DOT expr
-- On AND reduce production expr -> expr DOT expr
-- On ALWAYS reduce production expr -> expr DOT expr
-- On ALL reduce production expr -> expr DOT expr
-- On ADD reduce production expr -> expr DOT expr

State 167:
## Known stack suffix:
## expr INTER
## LR(1) items:
expr -> expr INTER . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 168
## Reductions:

State 168:
## Known stack suffix:
## expr INTER expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr INTER expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production expr -> expr INTER expr
-- On UNIV reduce production expr -> expr INTER expr
-- On TRUE reduce production expr -> expr INTER expr
-- On TILDE reduce production expr -> expr INTER expr
-- On SYM reduce production expr -> expr INTER expr
-- On SUB reduce production expr -> expr INTER expr
-- On STAR reduce production expr -> expr INTER expr
-- On SOMETIME reduce production expr -> expr INTER expr
-- On SOME reduce production expr -> expr INTER expr
-- On SINCE reduce production expr -> expr INTER expr
-- On SEMI reduce production expr -> expr INTER expr
-- On RUN reduce production expr -> expr INTER expr
-- On RPAREN reduce production expr -> expr INTER expr
-- On RELEASES reduce production expr -> expr INTER expr
-- On RBRACKET reduce production expr -> expr INTER expr
-- On RBRACE reduce production expr -> expr INTER expr
-- On PREVIOUS reduce production expr -> expr INTER expr
-- On PLUS reduce production expr -> expr INTER expr
-- On PLAIN_ID reduce production expr -> expr INTER expr
-- On OVERRIDE reduce production expr -> expr INTER expr
-- On OR reduce production expr -> expr INTER expr
-- On ONE reduce production expr -> expr INTER expr
-- On ONCE reduce production expr -> expr INTER expr
-- On NUMBER reduce production expr -> expr INTER expr
-- On NOT_IN reduce production expr -> expr INTER expr
-- On NOT reduce production expr -> expr INTER expr
-- On NONE reduce production expr -> expr INTER expr
-- On NO reduce production expr -> expr INTER expr
-- On NEXT reduce production expr -> expr INTER expr
-- On NEQ reduce production expr -> expr INTER expr
-- On NEG reduce production expr -> expr INTER expr
-- On MINUS reduce production expr -> expr INTER expr
-- On LTE reduce production expr -> expr INTER expr
-- On LT reduce production expr -> expr INTER expr
-- On LPAREN reduce production expr -> expr INTER expr
-- On LONE reduce production expr -> expr INTER expr
-- On LET reduce production expr -> expr INTER expr
-- On LBRACE reduce production expr -> expr INTER expr
-- On INVARIANT reduce production expr -> expr INTER expr
-- On INTER reduce production expr -> expr INTER expr
-- On INST reduce production expr -> expr INTER expr
-- On IN reduce production expr -> expr INTER expr
-- On IMPLIES reduce production expr -> expr INTER expr
-- On IFF reduce production expr -> expr INTER expr
-- On IDEN reduce production expr -> expr INTER expr
-- On HISTORICALLY reduce production expr -> expr INTER expr
-- On HAT reduce production expr -> expr INTER expr
-- On HASH reduce production expr -> expr INTER expr
-- On GTE reduce production expr -> expr INTER expr
-- On GT reduce production expr -> expr INTER expr
-- On FALSE reduce production expr -> expr INTER expr
-- On EVENTUALLY reduce production expr -> expr INTER expr
-- On EQ reduce production expr -> expr INTER expr
-- On EOF reduce production expr -> expr INTER expr
-- On ELSE reduce production expr -> expr INTER expr
-- On COMMA reduce production expr -> expr INTER expr
-- On BAR reduce production expr -> expr INTER expr
-- On AND reduce production expr -> expr INTER expr
-- On ALWAYS reduce production expr -> expr INTER expr
-- On ALL reduce production expr -> expr INTER expr
-- On ADD reduce production expr -> expr INTER expr

State 169:
## Known stack suffix:
## expr ARROW
## LR(1) items:
expr -> expr ARROW . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 170
## Reductions:

State 170:
## Known stack suffix:
## expr ARROW expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr ARROW expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On DOT shift to state 165
## Reductions:
-- On UNTIL reduce production expr -> expr ARROW expr
-- On UNIV reduce production expr -> expr ARROW expr
-- On TRUE reduce production expr -> expr ARROW expr
-- On TILDE reduce production expr -> expr ARROW expr
-- On SYM reduce production expr -> expr ARROW expr
-- On SUB reduce production expr -> expr ARROW expr
-- On STAR reduce production expr -> expr ARROW expr
-- On SOMETIME reduce production expr -> expr ARROW expr
-- On SOME reduce production expr -> expr ARROW expr
-- On SINCE reduce production expr -> expr ARROW expr
-- On SEMI reduce production expr -> expr ARROW expr
-- On RUN reduce production expr -> expr ARROW expr
-- On RPAREN reduce production expr -> expr ARROW expr
-- On RELEASES reduce production expr -> expr ARROW expr
-- On RBRACKET reduce production expr -> expr ARROW expr
-- On RBRACE reduce production expr -> expr ARROW expr
-- On PREVIOUS reduce production expr -> expr ARROW expr
-- On PLUS reduce production expr -> expr ARROW expr
-- On PLAIN_ID reduce production expr -> expr ARROW expr
-- On OVERRIDE reduce production expr -> expr ARROW expr
-- On OR reduce production expr -> expr ARROW expr
-- On ONE reduce production expr -> expr ARROW expr
-- On ONCE reduce production expr -> expr ARROW expr
-- On NUMBER reduce production expr -> expr ARROW expr
-- On NOT_IN reduce production expr -> expr ARROW expr
-- On NOT reduce production expr -> expr ARROW expr
-- On NONE reduce production expr -> expr ARROW expr
-- On NO reduce production expr -> expr ARROW expr
-- On NEXT reduce production expr -> expr ARROW expr
-- On NEQ reduce production expr -> expr ARROW expr
-- On NEG reduce production expr -> expr ARROW expr
-- On MINUS reduce production expr -> expr ARROW expr
-- On LTE reduce production expr -> expr ARROW expr
-- On LT reduce production expr -> expr ARROW expr
-- On LPAREN reduce production expr -> expr ARROW expr
-- On LONE reduce production expr -> expr ARROW expr
-- On LET reduce production expr -> expr ARROW expr
-- On LBRACE reduce production expr -> expr ARROW expr
-- On INVARIANT reduce production expr -> expr ARROW expr
-- On INTER reduce production expr -> expr ARROW expr
-- On INST reduce production expr -> expr ARROW expr
-- On IN reduce production expr -> expr ARROW expr
-- On IMPLIES reduce production expr -> expr ARROW expr
-- On IFF reduce production expr -> expr ARROW expr
-- On IDEN reduce production expr -> expr ARROW expr
-- On HISTORICALLY reduce production expr -> expr ARROW expr
-- On HAT reduce production expr -> expr ARROW expr
-- On HASH reduce production expr -> expr ARROW expr
-- On GTE reduce production expr -> expr ARROW expr
-- On GT reduce production expr -> expr ARROW expr
-- On FALSE reduce production expr -> expr ARROW expr
-- On EVENTUALLY reduce production expr -> expr ARROW expr
-- On EQ reduce production expr -> expr ARROW expr
-- On EOF reduce production expr -> expr ARROW expr
-- On ELSE reduce production expr -> expr ARROW expr
-- On COMMA reduce production expr -> expr ARROW expr
-- On BAR reduce production expr -> expr ARROW expr
-- On ARROW reduce production expr -> expr ARROW expr
-- On AND reduce production expr -> expr ARROW expr
-- On ALWAYS reduce production expr -> expr ARROW expr
-- On ALL reduce production expr -> expr ARROW expr
-- On ADD reduce production expr -> expr ARROW expr

State 171:
## Known stack suffix:
## expr NOT_IN
## LR(1) items:
formula -> expr NOT_IN . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 172
## Reductions:

State 172:
## Known stack suffix:
## expr NOT_IN expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr NOT_IN expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production formula -> expr NOT_IN expr
-- On UNIV reduce production formula -> expr NOT_IN expr
-- On TRUE reduce production formula -> expr NOT_IN expr
-- On TILDE reduce production formula -> expr NOT_IN expr
-- On SYM reduce production formula -> expr NOT_IN expr
-- On SUB reduce production formula -> expr NOT_IN expr
-- On STAR reduce production formula -> expr NOT_IN expr
-- On SOMETIME reduce production formula -> expr NOT_IN expr
-- On SOME reduce production formula -> expr NOT_IN expr
-- On SINCE reduce production formula -> expr NOT_IN expr
-- On SEMI reduce production formula -> expr NOT_IN expr
-- On RUN reduce production formula -> expr NOT_IN expr
-- On RPAREN reduce production formula -> expr NOT_IN expr
-- On RELEASES reduce production formula -> expr NOT_IN expr
-- On RBRACE reduce production formula -> expr NOT_IN expr
-- On PREVIOUS reduce production formula -> expr NOT_IN expr
-- On PLAIN_ID reduce production formula -> expr NOT_IN expr
-- On OR reduce production formula -> expr NOT_IN expr
-- On ONE reduce production formula -> expr NOT_IN expr
-- On ONCE reduce production formula -> expr NOT_IN expr
-- On NUMBER reduce production formula -> expr NOT_IN expr
-- On NOT reduce production formula -> expr NOT_IN expr
-- On NONE reduce production formula -> expr NOT_IN expr
-- On NO reduce production formula -> expr NOT_IN expr
-- On NEXT reduce production formula -> expr NOT_IN expr
-- On NEG reduce production formula -> expr NOT_IN expr
-- On LPAREN reduce production formula -> expr NOT_IN expr
-- On LONE reduce production formula -> expr NOT_IN expr
-- On LET reduce production formula -> expr NOT_IN expr
-- On LBRACE reduce production formula -> expr NOT_IN expr
-- On INVARIANT reduce production formula -> expr NOT_IN expr
-- On INST reduce production formula -> expr NOT_IN expr
-- On IMPLIES reduce production formula -> expr NOT_IN expr
-- On IFF reduce production formula -> expr NOT_IN expr
-- On IDEN reduce production formula -> expr NOT_IN expr
-- On HISTORICALLY reduce production formula -> expr NOT_IN expr
-- On HAT reduce production formula -> expr NOT_IN expr
-- On HASH reduce production formula -> expr NOT_IN expr
-- On FALSE reduce production formula -> expr NOT_IN expr
-- On EVENTUALLY reduce production formula -> expr NOT_IN expr
-- On EOF reduce production formula -> expr NOT_IN expr
-- On ELSE reduce production formula -> expr NOT_IN expr
-- On AND reduce production formula -> expr NOT_IN expr
-- On ALWAYS reduce production formula -> expr NOT_IN expr
-- On ALL reduce production formula -> expr NOT_IN expr
-- On ADD reduce production formula -> expr NOT_IN expr

State 173:
## Known stack suffix:
## expr NEQ
## LR(1) items:
formula -> expr NEQ . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 174
## Reductions:

State 174:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr NEQ expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production formula -> expr NEQ expr
-- On UNIV reduce production formula -> expr NEQ expr
-- On TRUE reduce production formula -> expr NEQ expr
-- On TILDE reduce production formula -> expr NEQ expr
-- On SYM reduce production formula -> expr NEQ expr
-- On SUB reduce production formula -> expr NEQ expr
-- On STAR reduce production formula -> expr NEQ expr
-- On SOMETIME reduce production formula -> expr NEQ expr
-- On SOME reduce production formula -> expr NEQ expr
-- On SINCE reduce production formula -> expr NEQ expr
-- On SEMI reduce production formula -> expr NEQ expr
-- On RUN reduce production formula -> expr NEQ expr
-- On RPAREN reduce production formula -> expr NEQ expr
-- On RELEASES reduce production formula -> expr NEQ expr
-- On RBRACE reduce production formula -> expr NEQ expr
-- On PREVIOUS reduce production formula -> expr NEQ expr
-- On PLAIN_ID reduce production formula -> expr NEQ expr
-- On OR reduce production formula -> expr NEQ expr
-- On ONE reduce production formula -> expr NEQ expr
-- On ONCE reduce production formula -> expr NEQ expr
-- On NUMBER reduce production formula -> expr NEQ expr
-- On NOT reduce production formula -> expr NEQ expr
-- On NONE reduce production formula -> expr NEQ expr
-- On NO reduce production formula -> expr NEQ expr
-- On NEXT reduce production formula -> expr NEQ expr
-- On NEG reduce production formula -> expr NEQ expr
-- On LPAREN reduce production formula -> expr NEQ expr
-- On LONE reduce production formula -> expr NEQ expr
-- On LET reduce production formula -> expr NEQ expr
-- On LBRACE reduce production formula -> expr NEQ expr
-- On INVARIANT reduce production formula -> expr NEQ expr
-- On INST reduce production formula -> expr NEQ expr
-- On IMPLIES reduce production formula -> expr NEQ expr
-- On IFF reduce production formula -> expr NEQ expr
-- On IDEN reduce production formula -> expr NEQ expr
-- On HISTORICALLY reduce production formula -> expr NEQ expr
-- On HAT reduce production formula -> expr NEQ expr
-- On HASH reduce production formula -> expr NEQ expr
-- On FALSE reduce production formula -> expr NEQ expr
-- On EVENTUALLY reduce production formula -> expr NEQ expr
-- On EOF reduce production formula -> expr NEQ expr
-- On ELSE reduce production formula -> expr NEQ expr
-- On AND reduce production formula -> expr NEQ expr
-- On ALWAYS reduce production formula -> expr NEQ expr
-- On ALL reduce production formula -> expr NEQ expr
-- On ADD reduce production formula -> expr NEQ expr

State 175:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 176
## Reductions:

State 176:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr MINUS expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On OVERRIDE shift to state 161
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production expr -> expr MINUS expr
-- On UNIV reduce production expr -> expr MINUS expr
-- On TRUE reduce production expr -> expr MINUS expr
-- On TILDE reduce production expr -> expr MINUS expr
-- On SYM reduce production expr -> expr MINUS expr
-- On SUB reduce production expr -> expr MINUS expr
-- On STAR reduce production expr -> expr MINUS expr
-- On SOMETIME reduce production expr -> expr MINUS expr
-- On SOME reduce production expr -> expr MINUS expr
-- On SINCE reduce production expr -> expr MINUS expr
-- On SEMI reduce production expr -> expr MINUS expr
-- On RUN reduce production expr -> expr MINUS expr
-- On RPAREN reduce production expr -> expr MINUS expr
-- On RELEASES reduce production expr -> expr MINUS expr
-- On RBRACKET reduce production expr -> expr MINUS expr
-- On RBRACE reduce production expr -> expr MINUS expr
-- On PREVIOUS reduce production expr -> expr MINUS expr
-- On PLUS reduce production expr -> expr MINUS expr
-- On PLAIN_ID reduce production expr -> expr MINUS expr
-- On OR reduce production expr -> expr MINUS expr
-- On ONE reduce production expr -> expr MINUS expr
-- On ONCE reduce production expr -> expr MINUS expr
-- On NUMBER reduce production expr -> expr MINUS expr
-- On NOT_IN reduce production expr -> expr MINUS expr
-- On NOT reduce production expr -> expr MINUS expr
-- On NONE reduce production expr -> expr MINUS expr
-- On NO reduce production expr -> expr MINUS expr
-- On NEXT reduce production expr -> expr MINUS expr
-- On NEQ reduce production expr -> expr MINUS expr
-- On NEG reduce production expr -> expr MINUS expr
-- On MINUS reduce production expr -> expr MINUS expr
-- On LTE reduce production expr -> expr MINUS expr
-- On LT reduce production expr -> expr MINUS expr
-- On LPAREN reduce production expr -> expr MINUS expr
-- On LONE reduce production expr -> expr MINUS expr
-- On LET reduce production expr -> expr MINUS expr
-- On LBRACE reduce production expr -> expr MINUS expr
-- On INVARIANT reduce production expr -> expr MINUS expr
-- On INST reduce production expr -> expr MINUS expr
-- On IN reduce production expr -> expr MINUS expr
-- On IMPLIES reduce production expr -> expr MINUS expr
-- On IFF reduce production expr -> expr MINUS expr
-- On IDEN reduce production expr -> expr MINUS expr
-- On HISTORICALLY reduce production expr -> expr MINUS expr
-- On HAT reduce production expr -> expr MINUS expr
-- On HASH reduce production expr -> expr MINUS expr
-- On GTE reduce production expr -> expr MINUS expr
-- On GT reduce production expr -> expr MINUS expr
-- On FALSE reduce production expr -> expr MINUS expr
-- On EVENTUALLY reduce production expr -> expr MINUS expr
-- On EQ reduce production expr -> expr MINUS expr
-- On EOF reduce production expr -> expr MINUS expr
-- On ELSE reduce production expr -> expr MINUS expr
-- On COMMA reduce production expr -> expr MINUS expr
-- On BAR reduce production expr -> expr MINUS expr
-- On AND reduce production expr -> expr MINUS expr
-- On ALWAYS reduce production expr -> expr MINUS expr
-- On ALL reduce production expr -> expr MINUS expr
-- On ADD reduce production expr -> expr MINUS expr

State 177:
## Known stack suffix:
## expr IN
## LR(1) items:
formula -> expr IN . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 178
## Reductions:

State 178:
## Known stack suffix:
## expr IN expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr IN expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production formula -> expr IN expr
-- On UNIV reduce production formula -> expr IN expr
-- On TRUE reduce production formula -> expr IN expr
-- On TILDE reduce production formula -> expr IN expr
-- On SYM reduce production formula -> expr IN expr
-- On SUB reduce production formula -> expr IN expr
-- On STAR reduce production formula -> expr IN expr
-- On SOMETIME reduce production formula -> expr IN expr
-- On SOME reduce production formula -> expr IN expr
-- On SINCE reduce production formula -> expr IN expr
-- On SEMI reduce production formula -> expr IN expr
-- On RUN reduce production formula -> expr IN expr
-- On RPAREN reduce production formula -> expr IN expr
-- On RELEASES reduce production formula -> expr IN expr
-- On RBRACE reduce production formula -> expr IN expr
-- On PREVIOUS reduce production formula -> expr IN expr
-- On PLAIN_ID reduce production formula -> expr IN expr
-- On OR reduce production formula -> expr IN expr
-- On ONE reduce production formula -> expr IN expr
-- On ONCE reduce production formula -> expr IN expr
-- On NUMBER reduce production formula -> expr IN expr
-- On NOT reduce production formula -> expr IN expr
-- On NONE reduce production formula -> expr IN expr
-- On NO reduce production formula -> expr IN expr
-- On NEXT reduce production formula -> expr IN expr
-- On NEG reduce production formula -> expr IN expr
-- On LPAREN reduce production formula -> expr IN expr
-- On LONE reduce production formula -> expr IN expr
-- On LET reduce production formula -> expr IN expr
-- On LBRACE reduce production formula -> expr IN expr
-- On INVARIANT reduce production formula -> expr IN expr
-- On INST reduce production formula -> expr IN expr
-- On IMPLIES reduce production formula -> expr IN expr
-- On IFF reduce production formula -> expr IN expr
-- On IDEN reduce production formula -> expr IN expr
-- On HISTORICALLY reduce production formula -> expr IN expr
-- On HAT reduce production formula -> expr IN expr
-- On HASH reduce production formula -> expr IN expr
-- On FALSE reduce production formula -> expr IN expr
-- On EVENTUALLY reduce production formula -> expr IN expr
-- On EOF reduce production formula -> expr IN expr
-- On ELSE reduce production formula -> expr IN expr
-- On AND reduce production formula -> expr IN expr
-- On ALWAYS reduce production formula -> expr IN expr
-- On ALL reduce production formula -> expr IN expr
-- On ADD reduce production formula -> expr IN expr

State 179:
## Known stack suffix:
## expr EQ
## LR(1) items:
formula -> expr EQ . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 180
## Reductions:

State 180:
## Known stack suffix:
## expr EQ expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr EQ expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production formula -> expr EQ expr
-- On UNIV reduce production formula -> expr EQ expr
-- On TRUE reduce production formula -> expr EQ expr
-- On TILDE reduce production formula -> expr EQ expr
-- On SYM reduce production formula -> expr EQ expr
-- On SUB reduce production formula -> expr EQ expr
-- On STAR reduce production formula -> expr EQ expr
-- On SOMETIME reduce production formula -> expr EQ expr
-- On SOME reduce production formula -> expr EQ expr
-- On SINCE reduce production formula -> expr EQ expr
-- On SEMI reduce production formula -> expr EQ expr
-- On RUN reduce production formula -> expr EQ expr
-- On RPAREN reduce production formula -> expr EQ expr
-- On RELEASES reduce production formula -> expr EQ expr
-- On RBRACE reduce production formula -> expr EQ expr
-- On PREVIOUS reduce production formula -> expr EQ expr
-- On PLAIN_ID reduce production formula -> expr EQ expr
-- On OR reduce production formula -> expr EQ expr
-- On ONE reduce production formula -> expr EQ expr
-- On ONCE reduce production formula -> expr EQ expr
-- On NUMBER reduce production formula -> expr EQ expr
-- On NOT reduce production formula -> expr EQ expr
-- On NONE reduce production formula -> expr EQ expr
-- On NO reduce production formula -> expr EQ expr
-- On NEXT reduce production formula -> expr EQ expr
-- On NEG reduce production formula -> expr EQ expr
-- On LPAREN reduce production formula -> expr EQ expr
-- On LONE reduce production formula -> expr EQ expr
-- On LET reduce production formula -> expr EQ expr
-- On LBRACE reduce production formula -> expr EQ expr
-- On INVARIANT reduce production formula -> expr EQ expr
-- On INST reduce production formula -> expr EQ expr
-- On IMPLIES reduce production formula -> expr EQ expr
-- On IFF reduce production formula -> expr EQ expr
-- On IDEN reduce production formula -> expr EQ expr
-- On HISTORICALLY reduce production formula -> expr EQ expr
-- On HAT reduce production formula -> expr EQ expr
-- On HASH reduce production formula -> expr EQ expr
-- On FALSE reduce production formula -> expr EQ expr
-- On EVENTUALLY reduce production formula -> expr EQ expr
-- On EOF reduce production formula -> expr EQ expr
-- On ELSE reduce production formula -> expr EQ expr
-- On AND reduce production formula -> expr EQ expr
-- On ALWAYS reduce production formula -> expr EQ expr
-- On ALL reduce production formula -> expr EQ expr
-- On ADD reduce production formula -> expr EQ expr

State 181:
## Known stack suffix:
## expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RBRACKET ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On separated_nonempty_list(COMMA,expr) shift to state 182
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 158
## Reductions:

State 182:
## Known stack suffix:
## expr COMMA separated_nonempty_list(COMMA,expr)
## LR(1) items:
separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr) . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET reduce production separated_nonempty_list(COMMA,expr) -> expr COMMA separated_nonempty_list(COMMA,expr)

State 183:
## Known stack suffix:
## formula SINCE
## LR(1) items:
formula -> formula SINCE . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 184
-- On expr shift to state 151
## Reductions:

State 184:
## Known stack suffix:
## formula SINCE formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula SINCE formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> formula SINCE formula
-- On UNIV reduce production formula -> formula SINCE formula
-- On TRUE reduce production formula -> formula SINCE formula
-- On TILDE reduce production formula -> formula SINCE formula
-- On SYM reduce production formula -> formula SINCE formula
-- On SUB reduce production formula -> formula SINCE formula
-- On STAR reduce production formula -> formula SINCE formula
-- On SOMETIME reduce production formula -> formula SINCE formula
-- On SOME reduce production formula -> formula SINCE formula
-- On SINCE reduce production formula -> formula SINCE formula
-- On SEMI reduce production formula -> formula SINCE formula
-- On RUN reduce production formula -> formula SINCE formula
-- On RPAREN reduce production formula -> formula SINCE formula
-- On RELEASES reduce production formula -> formula SINCE formula
-- On RBRACE reduce production formula -> formula SINCE formula
-- On PREVIOUS reduce production formula -> formula SINCE formula
-- On PLAIN_ID reduce production formula -> formula SINCE formula
-- On OR reduce production formula -> formula SINCE formula
-- On ONE reduce production formula -> formula SINCE formula
-- On ONCE reduce production formula -> formula SINCE formula
-- On NUMBER reduce production formula -> formula SINCE formula
-- On NOT reduce production formula -> formula SINCE formula
-- On NONE reduce production formula -> formula SINCE formula
-- On NO reduce production formula -> formula SINCE formula
-- On NEXT reduce production formula -> formula SINCE formula
-- On NEG reduce production formula -> formula SINCE formula
-- On LPAREN reduce production formula -> formula SINCE formula
-- On LONE reduce production formula -> formula SINCE formula
-- On LET reduce production formula -> formula SINCE formula
-- On LBRACE reduce production formula -> formula SINCE formula
-- On INVARIANT reduce production formula -> formula SINCE formula
-- On INST reduce production formula -> formula SINCE formula
-- On IMPLIES reduce production formula -> formula SINCE formula
-- On IFF reduce production formula -> formula SINCE formula
-- On IDEN reduce production formula -> formula SINCE formula
-- On HISTORICALLY reduce production formula -> formula SINCE formula
-- On HAT reduce production formula -> formula SINCE formula
-- On HASH reduce production formula -> formula SINCE formula
-- On FALSE reduce production formula -> formula SINCE formula
-- On EVENTUALLY reduce production formula -> formula SINCE formula
-- On EOF reduce production formula -> formula SINCE formula
-- On ELSE reduce production formula -> formula SINCE formula
-- On AND reduce production formula -> formula SINCE formula
-- On ALWAYS reduce production formula -> formula SINCE formula
-- On ALL reduce production formula -> formula SINCE formula
-- On ADD reduce production formula -> formula SINCE formula

State 185:
## Known stack suffix:
## formula RELEASES
## LR(1) items:
formula -> formula RELEASES . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 186
-- On expr shift to state 151
## Reductions:

State 186:
## Known stack suffix:
## formula RELEASES formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula RELEASES formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> formula RELEASES formula
-- On UNIV reduce production formula -> formula RELEASES formula
-- On TRUE reduce production formula -> formula RELEASES formula
-- On TILDE reduce production formula -> formula RELEASES formula
-- On SYM reduce production formula -> formula RELEASES formula
-- On SUB reduce production formula -> formula RELEASES formula
-- On STAR reduce production formula -> formula RELEASES formula
-- On SOMETIME reduce production formula -> formula RELEASES formula
-- On SOME reduce production formula -> formula RELEASES formula
-- On SINCE reduce production formula -> formula RELEASES formula
-- On SEMI reduce production formula -> formula RELEASES formula
-- On RUN reduce production formula -> formula RELEASES formula
-- On RPAREN reduce production formula -> formula RELEASES formula
-- On RELEASES reduce production formula -> formula RELEASES formula
-- On RBRACE reduce production formula -> formula RELEASES formula
-- On PREVIOUS reduce production formula -> formula RELEASES formula
-- On PLAIN_ID reduce production formula -> formula RELEASES formula
-- On OR reduce production formula -> formula RELEASES formula
-- On ONE reduce production formula -> formula RELEASES formula
-- On ONCE reduce production formula -> formula RELEASES formula
-- On NUMBER reduce production formula -> formula RELEASES formula
-- On NOT reduce production formula -> formula RELEASES formula
-- On NONE reduce production formula -> formula RELEASES formula
-- On NO reduce production formula -> formula RELEASES formula
-- On NEXT reduce production formula -> formula RELEASES formula
-- On NEG reduce production formula -> formula RELEASES formula
-- On LPAREN reduce production formula -> formula RELEASES formula
-- On LONE reduce production formula -> formula RELEASES formula
-- On LET reduce production formula -> formula RELEASES formula
-- On LBRACE reduce production formula -> formula RELEASES formula
-- On INVARIANT reduce production formula -> formula RELEASES formula
-- On INST reduce production formula -> formula RELEASES formula
-- On IMPLIES reduce production formula -> formula RELEASES formula
-- On IFF reduce production formula -> formula RELEASES formula
-- On IDEN reduce production formula -> formula RELEASES formula
-- On HISTORICALLY reduce production formula -> formula RELEASES formula
-- On HAT reduce production formula -> formula RELEASES formula
-- On HASH reduce production formula -> formula RELEASES formula
-- On FALSE reduce production formula -> formula RELEASES formula
-- On EVENTUALLY reduce production formula -> formula RELEASES formula
-- On EOF reduce production formula -> formula RELEASES formula
-- On ELSE reduce production formula -> formula RELEASES formula
-- On AND reduce production formula -> formula RELEASES formula
-- On ALWAYS reduce production formula -> formula RELEASES formula
-- On ALL reduce production formula -> formula RELEASES formula
-- On ADD reduce production formula -> formula RELEASES formula

State 187:
## Known stack suffix:
## formula OR
## LR(1) items:
formula -> formula OR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 188
-- On expr shift to state 151
## Reductions:

State 188:
## Known stack suffix:
## formula OR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula OR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> formula OR formula
-- On TRUE reduce production formula -> formula OR formula
-- On TILDE reduce production formula -> formula OR formula
-- On SYM reduce production formula -> formula OR formula
-- On SUB reduce production formula -> formula OR formula
-- On STAR reduce production formula -> formula OR formula
-- On SOMETIME reduce production formula -> formula OR formula
-- On SOME reduce production formula -> formula OR formula
-- On SEMI reduce production formula -> formula OR formula
-- On RUN reduce production formula -> formula OR formula
-- On RPAREN reduce production formula -> formula OR formula
-- On RBRACE reduce production formula -> formula OR formula
-- On PREVIOUS reduce production formula -> formula OR formula
-- On PLAIN_ID reduce production formula -> formula OR formula
-- On OR reduce production formula -> formula OR formula
-- On ONE reduce production formula -> formula OR formula
-- On ONCE reduce production formula -> formula OR formula
-- On NUMBER reduce production formula -> formula OR formula
-- On NOT reduce production formula -> formula OR formula
-- On NONE reduce production formula -> formula OR formula
-- On NO reduce production formula -> formula OR formula
-- On NEXT reduce production formula -> formula OR formula
-- On NEG reduce production formula -> formula OR formula
-- On LPAREN reduce production formula -> formula OR formula
-- On LONE reduce production formula -> formula OR formula
-- On LET reduce production formula -> formula OR formula
-- On LBRACE reduce production formula -> formula OR formula
-- On INVARIANT reduce production formula -> formula OR formula
-- On INST reduce production formula -> formula OR formula
-- On IDEN reduce production formula -> formula OR formula
-- On HISTORICALLY reduce production formula -> formula OR formula
-- On HAT reduce production formula -> formula OR formula
-- On HASH reduce production formula -> formula OR formula
-- On FALSE reduce production formula -> formula OR formula
-- On EVENTUALLY reduce production formula -> formula OR formula
-- On EOF reduce production formula -> formula OR formula
-- On ELSE reduce production formula -> formula OR formula
-- On ALWAYS reduce production formula -> formula OR formula
-- On ALL reduce production formula -> formula OR formula
-- On ADD reduce production formula -> formula OR formula

State 189:
## Known stack suffix:
## formula IMPLIES
## LR(1) items:
expr -> formula IMPLIES . expr ELSE expr [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN IMPLIES IFF EQ ELSE DOT COMMA ARROW AND ]
formula -> formula IMPLIES . formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IMPLIES . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 190
-- On expr shift to state 195
## Reductions:

State 190:
## Known stack suffix:
## formula IMPLIES formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IMPLIES formula . ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IMPLIES formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On IMPLIES shift to state 189
-- On ELSE shift to state 191
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> formula IMPLIES formula
-- On TRUE reduce production formula -> formula IMPLIES formula
-- On TILDE reduce production formula -> formula IMPLIES formula
-- On SYM reduce production formula -> formula IMPLIES formula
-- On SUB reduce production formula -> formula IMPLIES formula
-- On STAR reduce production formula -> formula IMPLIES formula
-- On SOMETIME reduce production formula -> formula IMPLIES formula
-- On SOME reduce production formula -> formula IMPLIES formula
-- On SEMI reduce production formula -> formula IMPLIES formula
-- On RUN reduce production formula -> formula IMPLIES formula
-- On RPAREN reduce production formula -> formula IMPLIES formula
-- On RBRACE reduce production formula -> formula IMPLIES formula
-- On PREVIOUS reduce production formula -> formula IMPLIES formula
-- On PLAIN_ID reduce production formula -> formula IMPLIES formula
-- On OR reduce production formula -> formula IMPLIES formula
-- On ONE reduce production formula -> formula IMPLIES formula
-- On ONCE reduce production formula -> formula IMPLIES formula
-- On NUMBER reduce production formula -> formula IMPLIES formula
-- On NOT reduce production formula -> formula IMPLIES formula
-- On NONE reduce production formula -> formula IMPLIES formula
-- On NO reduce production formula -> formula IMPLIES formula
-- On NEXT reduce production formula -> formula IMPLIES formula
-- On NEG reduce production formula -> formula IMPLIES formula
-- On LPAREN reduce production formula -> formula IMPLIES formula
-- On LONE reduce production formula -> formula IMPLIES formula
-- On LET reduce production formula -> formula IMPLIES formula
-- On LBRACE reduce production formula -> formula IMPLIES formula
-- On INVARIANT reduce production formula -> formula IMPLIES formula
-- On INST reduce production formula -> formula IMPLIES formula
-- On IFF reduce production formula -> formula IMPLIES formula
-- On IDEN reduce production formula -> formula IMPLIES formula
-- On HISTORICALLY reduce production formula -> formula IMPLIES formula
-- On HAT reduce production formula -> formula IMPLIES formula
-- On HASH reduce production formula -> formula IMPLIES formula
-- On FALSE reduce production formula -> formula IMPLIES formula
-- On EVENTUALLY reduce production formula -> formula IMPLIES formula
-- On EOF reduce production formula -> formula IMPLIES formula
-- On ALWAYS reduce production formula -> formula IMPLIES formula
-- On ALL reduce production formula -> formula IMPLIES formula
-- On ADD reduce production formula -> formula IMPLIES formula

State 191:
## Known stack suffix:
## formula IMPLIES formula ELSE
## LR(1) items:
formula -> formula IMPLIES formula ELSE . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 192
-- On expr shift to state 151
## Reductions:

State 192:
## Known stack suffix:
## formula IMPLIES formula ELSE formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IMPLIES formula ELSE formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On IMPLIES shift to state 189
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> formula IMPLIES formula ELSE formula
-- On TRUE reduce production formula -> formula IMPLIES formula ELSE formula
-- On TILDE reduce production formula -> formula IMPLIES formula ELSE formula
-- On SYM reduce production formula -> formula IMPLIES formula ELSE formula
-- On SUB reduce production formula -> formula IMPLIES formula ELSE formula
-- On STAR reduce production formula -> formula IMPLIES formula ELSE formula
-- On SOMETIME reduce production formula -> formula IMPLIES formula ELSE formula
-- On SOME reduce production formula -> formula IMPLIES formula ELSE formula
-- On SEMI reduce production formula -> formula IMPLIES formula ELSE formula
-- On RUN reduce production formula -> formula IMPLIES formula ELSE formula
-- On RPAREN reduce production formula -> formula IMPLIES formula ELSE formula
-- On RBRACE reduce production formula -> formula IMPLIES formula ELSE formula
-- On PREVIOUS reduce production formula -> formula IMPLIES formula ELSE formula
-- On PLAIN_ID reduce production formula -> formula IMPLIES formula ELSE formula
-- On OR reduce production formula -> formula IMPLIES formula ELSE formula
-- On ONE reduce production formula -> formula IMPLIES formula ELSE formula
-- On ONCE reduce production formula -> formula IMPLIES formula ELSE formula
-- On NUMBER reduce production formula -> formula IMPLIES formula ELSE formula
-- On NOT reduce production formula -> formula IMPLIES formula ELSE formula
-- On NONE reduce production formula -> formula IMPLIES formula ELSE formula
-- On NO reduce production formula -> formula IMPLIES formula ELSE formula
-- On NEXT reduce production formula -> formula IMPLIES formula ELSE formula
-- On NEG reduce production formula -> formula IMPLIES formula ELSE formula
-- On LPAREN reduce production formula -> formula IMPLIES formula ELSE formula
-- On LONE reduce production formula -> formula IMPLIES formula ELSE formula
-- On LET reduce production formula -> formula IMPLIES formula ELSE formula
-- On LBRACE reduce production formula -> formula IMPLIES formula ELSE formula
-- On INVARIANT reduce production formula -> formula IMPLIES formula ELSE formula
-- On INST reduce production formula -> formula IMPLIES formula ELSE formula
-- On IFF reduce production formula -> formula IMPLIES formula ELSE formula
-- On IDEN reduce production formula -> formula IMPLIES formula ELSE formula
-- On HISTORICALLY reduce production formula -> formula IMPLIES formula ELSE formula
-- On HAT reduce production formula -> formula IMPLIES formula ELSE formula
-- On HASH reduce production formula -> formula IMPLIES formula ELSE formula
-- On FALSE reduce production formula -> formula IMPLIES formula ELSE formula
-- On EVENTUALLY reduce production formula -> formula IMPLIES formula ELSE formula
-- On EOF reduce production formula -> formula IMPLIES formula ELSE formula
-- On ELSE reduce production formula -> formula IMPLIES formula ELSE formula
-- On ALWAYS reduce production formula -> formula IMPLIES formula ELSE formula
-- On ALL reduce production formula -> formula IMPLIES formula ELSE formula
-- On ADD reduce production formula -> formula IMPLIES formula ELSE formula

State 193:
## Known stack suffix:
## formula AND
## LR(1) items:
formula -> formula AND . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 194
-- On expr shift to state 151
## Reductions:

State 194:
## Known stack suffix:
## formula AND formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula AND formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
## Reductions:
-- On UNIV reduce production formula -> formula AND formula
-- On TRUE reduce production formula -> formula AND formula
-- On TILDE reduce production formula -> formula AND formula
-- On SYM reduce production formula -> formula AND formula
-- On SUB reduce production formula -> formula AND formula
-- On STAR reduce production formula -> formula AND formula
-- On SOMETIME reduce production formula -> formula AND formula
-- On SOME reduce production formula -> formula AND formula
-- On SEMI reduce production formula -> formula AND formula
-- On RUN reduce production formula -> formula AND formula
-- On RPAREN reduce production formula -> formula AND formula
-- On RBRACE reduce production formula -> formula AND formula
-- On PREVIOUS reduce production formula -> formula AND formula
-- On PLAIN_ID reduce production formula -> formula AND formula
-- On OR reduce production formula -> formula AND formula
-- On ONE reduce production formula -> formula AND formula
-- On ONCE reduce production formula -> formula AND formula
-- On NUMBER reduce production formula -> formula AND formula
-- On NOT reduce production formula -> formula AND formula
-- On NONE reduce production formula -> formula AND formula
-- On NO reduce production formula -> formula AND formula
-- On NEXT reduce production formula -> formula AND formula
-- On NEG reduce production formula -> formula AND formula
-- On LPAREN reduce production formula -> formula AND formula
-- On LONE reduce production formula -> formula AND formula
-- On LET reduce production formula -> formula AND formula
-- On LBRACE reduce production formula -> formula AND formula
-- On INVARIANT reduce production formula -> formula AND formula
-- On INST reduce production formula -> formula AND formula
-- On IMPLIES reduce production formula -> formula AND formula
-- On IFF reduce production formula -> formula AND formula
-- On IDEN reduce production formula -> formula AND formula
-- On HISTORICALLY reduce production formula -> formula AND formula
-- On HAT reduce production formula -> formula AND formula
-- On HASH reduce production formula -> formula AND formula
-- On FALSE reduce production formula -> formula AND formula
-- On EVENTUALLY reduce production formula -> formula AND formula
-- On EOF reduce production formula -> formula AND formula
-- On ELSE reduce production formula -> formula AND formula
-- On AND reduce production formula -> formula AND formula
-- On ALWAYS reduce production formula -> formula AND formula
-- On ALL reduce production formula -> formula AND formula
-- On ADD reduce production formula -> formula AND formula

State 195:
## Known stack suffix:
## formula IMPLIES expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> formula IMPLIES expr . ELSE expr [ UNTIL SINCE RPROJ RPAREN RELEASES RBRACKET PRIME PLUS OVERRIDE OR NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN IMPLIES IFF EQ ELSE DOT COMMA ARROW AND ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
formula -> expr . NOT_IN expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . IN expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . EQ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NEQ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On ELSE shift to state 196
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:

State 196:
## Known stack suffix:
## formula IMPLIES expr ELSE
## LR(1) items:
expr -> formula IMPLIES expr ELSE . expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 197
## Reductions:

State 197:
## Known stack suffix:
## formula IMPLIES expr ELSE expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> formula IMPLIES expr ELSE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production expr -> formula IMPLIES expr ELSE expr
-- On UNIV reduce production expr -> formula IMPLIES expr ELSE expr
-- On TRUE reduce production expr -> formula IMPLIES expr ELSE expr
-- On TILDE reduce production expr -> formula IMPLIES expr ELSE expr
-- On SYM reduce production expr -> formula IMPLIES expr ELSE expr
-- On SUB reduce production expr -> formula IMPLIES expr ELSE expr
-- On STAR reduce production expr -> formula IMPLIES expr ELSE expr
-- On SOMETIME reduce production expr -> formula IMPLIES expr ELSE expr
-- On SOME reduce production expr -> formula IMPLIES expr ELSE expr
-- On SINCE reduce production expr -> formula IMPLIES expr ELSE expr
-- On SEMI reduce production expr -> formula IMPLIES expr ELSE expr
-- On RUN reduce production expr -> formula IMPLIES expr ELSE expr
-- On RPAREN reduce production expr -> formula IMPLIES expr ELSE expr
-- On RELEASES reduce production expr -> formula IMPLIES expr ELSE expr
-- On RBRACKET reduce production expr -> formula IMPLIES expr ELSE expr
-- On RBRACE reduce production expr -> formula IMPLIES expr ELSE expr
-- On PREVIOUS reduce production expr -> formula IMPLIES expr ELSE expr
-- On PLAIN_ID reduce production expr -> formula IMPLIES expr ELSE expr
-- On OR reduce production expr -> formula IMPLIES expr ELSE expr
-- On ONE reduce production expr -> formula IMPLIES expr ELSE expr
-- On ONCE reduce production expr -> formula IMPLIES expr ELSE expr
-- On NUMBER reduce production expr -> formula IMPLIES expr ELSE expr
-- On NOT reduce production expr -> formula IMPLIES expr ELSE expr
-- On NONE reduce production expr -> formula IMPLIES expr ELSE expr
-- On NO reduce production expr -> formula IMPLIES expr ELSE expr
-- On NEXT reduce production expr -> formula IMPLIES expr ELSE expr
-- On NEG reduce production expr -> formula IMPLIES expr ELSE expr
-- On LTE reduce production expr -> formula IMPLIES expr ELSE expr
-- On LT reduce production expr -> formula IMPLIES expr ELSE expr
-- On LPAREN reduce production expr -> formula IMPLIES expr ELSE expr
-- On LONE reduce production expr -> formula IMPLIES expr ELSE expr
-- On LET reduce production expr -> formula IMPLIES expr ELSE expr
-- On LBRACE reduce production expr -> formula IMPLIES expr ELSE expr
-- On INVARIANT reduce production expr -> formula IMPLIES expr ELSE expr
-- On INST reduce production expr -> formula IMPLIES expr ELSE expr
-- On IMPLIES reduce production expr -> formula IMPLIES expr ELSE expr
-- On IFF reduce production expr -> formula IMPLIES expr ELSE expr
-- On IDEN reduce production expr -> formula IMPLIES expr ELSE expr
-- On HISTORICALLY reduce production expr -> formula IMPLIES expr ELSE expr
-- On HAT reduce production expr -> formula IMPLIES expr ELSE expr
-- On HASH reduce production expr -> formula IMPLIES expr ELSE expr
-- On GTE reduce production expr -> formula IMPLIES expr ELSE expr
-- On GT reduce production expr -> formula IMPLIES expr ELSE expr
-- On FALSE reduce production expr -> formula IMPLIES expr ELSE expr
-- On EVENTUALLY reduce production expr -> formula IMPLIES expr ELSE expr
-- On EOF reduce production expr -> formula IMPLIES expr ELSE expr
-- On ELSE reduce production expr -> formula IMPLIES expr ELSE expr
-- On COMMA reduce production expr -> formula IMPLIES expr ELSE expr
-- On BAR reduce production expr -> formula IMPLIES expr ELSE expr
-- On AND reduce production expr -> formula IMPLIES expr ELSE expr
-- On ALWAYS reduce production expr -> formula IMPLIES expr ELSE expr
-- On ALL reduce production expr -> formula IMPLIES expr ELSE expr
-- On ADD reduce production expr -> formula IMPLIES expr ELSE expr

State 198:
## Known stack suffix:
## formula IFF
## LR(1) items:
formula -> formula IFF . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 199
-- On expr shift to state 151
## Reductions:

State 199:
## Known stack suffix:
## formula IFF formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula IFF formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On IMPLIES shift to state 189
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> formula IFF formula
-- On TRUE reduce production formula -> formula IFF formula
-- On TILDE reduce production formula -> formula IFF formula
-- On SYM reduce production formula -> formula IFF formula
-- On SUB reduce production formula -> formula IFF formula
-- On STAR reduce production formula -> formula IFF formula
-- On SOMETIME reduce production formula -> formula IFF formula
-- On SOME reduce production formula -> formula IFF formula
-- On SEMI reduce production formula -> formula IFF formula
-- On RUN reduce production formula -> formula IFF formula
-- On RPAREN reduce production formula -> formula IFF formula
-- On RBRACE reduce production formula -> formula IFF formula
-- On PREVIOUS reduce production formula -> formula IFF formula
-- On PLAIN_ID reduce production formula -> formula IFF formula
-- On OR reduce production formula -> formula IFF formula
-- On ONE reduce production formula -> formula IFF formula
-- On ONCE reduce production formula -> formula IFF formula
-- On NUMBER reduce production formula -> formula IFF formula
-- On NOT reduce production formula -> formula IFF formula
-- On NONE reduce production formula -> formula IFF formula
-- On NO reduce production formula -> formula IFF formula
-- On NEXT reduce production formula -> formula IFF formula
-- On NEG reduce production formula -> formula IFF formula
-- On LPAREN reduce production formula -> formula IFF formula
-- On LONE reduce production formula -> formula IFF formula
-- On LET reduce production formula -> formula IFF formula
-- On LBRACE reduce production formula -> formula IFF formula
-- On INVARIANT reduce production formula -> formula IFF formula
-- On INST reduce production formula -> formula IFF formula
-- On IFF reduce production formula -> formula IFF formula
-- On IDEN reduce production formula -> formula IFF formula
-- On HISTORICALLY reduce production formula -> formula IFF formula
-- On HAT reduce production formula -> formula IFF formula
-- On HASH reduce production formula -> formula IFF formula
-- On FALSE reduce production formula -> formula IFF formula
-- On EVENTUALLY reduce production formula -> formula IFF formula
-- On EOF reduce production formula -> formula IFF formula
-- On ELSE reduce production formula -> formula IFF formula
-- On ALWAYS reduce production formula -> formula IFF formula
-- On ALL reduce production formula -> formula IFF formula
-- On ADD reduce production formula -> formula IFF formula

State 200:
## Known stack suffix:
## formula IMPLIES
## LR(1) items:
expr -> formula IMPLIES . expr ELSE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> formula IMPLIES . formula ELSE formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> formula IMPLIES . formula [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 190
-- On expr shift to state 201
## Reductions:

State 201:
## Known stack suffix:
## formula IMPLIES expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> formula IMPLIES expr . ELSE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ ELSE DOT ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF ELSE AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF ELSE AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF ELSE AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF ELSE AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On ELSE shift to state 196
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:

State 202:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id) COLON expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr . [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr . COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On COMMA shift to state 203
-- On ARROW shift to state 169
## Reductions:
-- On LBRACE reduce production separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr
-- On BAR reduce production separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr

State 203:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA . separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On DISJ shift to state 130
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 209
## Reductions:

State 204:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id)
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) . COLON expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) . COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On COLON shift to state 205
## Reductions:

State 205:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id) COLON
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON . expr [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON . expr COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 117
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 121
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 148
-- On expr shift to state 206
## Reductions:

State 206:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id) COLON expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr . [ LBRACE BAR ]
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr . COMMA separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On COMMA shift to state 207
-- On ARROW shift to state 169
## Reductions:
-- On LBRACE reduce production separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr
-- On BAR reduce production separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr

State 207:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id) COLON expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr COMMA . separated_nonempty_list(COMMA,ae_decl) [ LBRACE BAR ]
## Transitions:
-- On PLAIN_ID shift to state 108
-- On DISJ shift to state 130
-- On separated_nonempty_list(COMMA,plain_id) shift to state 204
-- On separated_nonempty_list(COMMA,ae_decl) shift to state 208
## Reductions:

State 208:
## Known stack suffix:
## separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) . [ LBRACE BAR ]
## Transitions:
## Reductions:
-- On LBRACE reduce production separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)
-- On BAR reduce production separated_nonempty_list(COMMA,ae_decl) -> separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)

State 209:
## Known stack suffix:
## DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl) . [ LBRACE BAR ]
## Transitions:
## Reductions:
-- On LBRACE reduce production separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)
-- On BAR reduce production separated_nonempty_list(COMMA,ae_decl) -> DISJ separated_nonempty_list(COMMA,plain_id) COLON expr COMMA separated_nonempty_list(COMMA,ae_decl)

State 210:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ALL separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 211
-- On BAR shift to state 219
## Reductions:

State 211:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 212
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE reduce production list(formula_semi) ->

State 212:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 213
## Reductions:

State 213:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On UNIV reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TRUE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TILDE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SYM reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SUB reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On STAR reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOMETIME reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOME reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SINCE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SEMI reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RUN reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RPAREN reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RELEASES reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RBRACE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PREVIOUS reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PLAIN_ID reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On OR reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONCE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NUMBER reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NOT reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NONE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NO reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEXT reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEG reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LPAREN reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LONE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LET reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LBRACE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INVARIANT reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INST reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IMPLIES reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IFF reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IDEN reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HISTORICALLY reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HAT reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HASH reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On FALSE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EVENTUALLY reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EOF reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ELSE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On AND reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALWAYS reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALL reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ADD reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 214:
## Known stack suffix:
## list(formula_semi)
## LR(1) items:
specification -> list(formula_semi) . [ SYM RUN RBRACE INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production specification -> list(formula_semi)
-- On RUN reduce production specification -> list(formula_semi)
-- On RBRACE reduce production specification -> list(formula_semi)
-- On INVARIANT reduce production specification -> list(formula_semi)
-- On INST reduce production specification -> list(formula_semi)
-- On EOF reduce production specification -> list(formula_semi)

State 215:
## Known stack suffix:
## formula_semi
## LR(1) items:
list(formula_semi) -> formula_semi . list(formula_semi) [ SYM RUN RBRACE INVARIANT INST EOF ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On list(formula_semi) shift to state 216
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On SYM reduce production list(formula_semi) ->
-- On RUN reduce production list(formula_semi) ->
-- On RBRACE reduce production list(formula_semi) ->
-- On INVARIANT reduce production list(formula_semi) ->
-- On INST reduce production list(formula_semi) ->
-- On EOF reduce production list(formula_semi) ->

State 216:
## Known stack suffix:
## formula_semi list(formula_semi)
## LR(1) items:
list(formula_semi) -> formula_semi list(formula_semi) . [ SYM RUN RBRACE INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production list(formula_semi) -> formula_semi list(formula_semi)
-- On RUN reduce production list(formula_semi) -> formula_semi list(formula_semi)
-- On RBRACE reduce production list(formula_semi) -> formula_semi list(formula_semi)
-- On INVARIANT reduce production list(formula_semi) -> formula_semi list(formula_semi)
-- On INST reduce production list(formula_semi) -> formula_semi list(formula_semi)
-- On EOF reduce production list(formula_semi) -> formula_semi list(formula_semi)

State 217:
## Known stack suffix:
## formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF AND ALWAYS ALL ADD ]
formula_semi -> formula . [ UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME RUN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ALWAYS ALL ADD ]
formula_semi -> formula . SEMI [ UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME RUN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On SEMI shift to state 218
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula_semi -> formula
-- On TRUE reduce production formula_semi -> formula
-- On TILDE reduce production formula_semi -> formula
-- On SYM reduce production formula_semi -> formula
-- On SUB reduce production formula_semi -> formula
-- On STAR reduce production formula_semi -> formula
-- On SOMETIME reduce production formula_semi -> formula
-- On SOME reduce production formula_semi -> formula
-- On RUN reduce production formula_semi -> formula
-- On RBRACE reduce production formula_semi -> formula
-- On PREVIOUS reduce production formula_semi -> formula
-- On PLAIN_ID reduce production formula_semi -> formula
-- On ONE reduce production formula_semi -> formula
-- On ONCE reduce production formula_semi -> formula
-- On NUMBER reduce production formula_semi -> formula
-- On NOT reduce production formula_semi -> formula
-- On NONE reduce production formula_semi -> formula
-- On NO reduce production formula_semi -> formula
-- On NEXT reduce production formula_semi -> formula
-- On NEG reduce production formula_semi -> formula
-- On LPAREN reduce production formula_semi -> formula
-- On LONE reduce production formula_semi -> formula
-- On LET reduce production formula_semi -> formula
-- On LBRACE reduce production formula_semi -> formula
-- On INVARIANT reduce production formula_semi -> formula
-- On INST reduce production formula_semi -> formula
-- On IDEN reduce production formula_semi -> formula
-- On HISTORICALLY reduce production formula_semi -> formula
-- On HAT reduce production formula_semi -> formula
-- On HASH reduce production formula_semi -> formula
-- On FALSE reduce production formula_semi -> formula
-- On EVENTUALLY reduce production formula_semi -> formula
-- On EOF reduce production formula_semi -> formula
-- On ALWAYS reduce production formula_semi -> formula
-- On ALL reduce production formula_semi -> formula
-- On ADD reduce production formula_semi -> formula

State 218:
## Known stack suffix:
## formula SEMI
## LR(1) items:
formula_semi -> formula SEMI . [ UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME RUN RBRACE PREVIOUS PLAIN_ID ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNIV reduce production formula_semi -> formula SEMI
-- On TRUE reduce production formula_semi -> formula SEMI
-- On TILDE reduce production formula_semi -> formula SEMI
-- On SYM reduce production formula_semi -> formula SEMI
-- On SUB reduce production formula_semi -> formula SEMI
-- On STAR reduce production formula_semi -> formula SEMI
-- On SOMETIME reduce production formula_semi -> formula SEMI
-- On SOME reduce production formula_semi -> formula SEMI
-- On RUN reduce production formula_semi -> formula SEMI
-- On RBRACE reduce production formula_semi -> formula SEMI
-- On PREVIOUS reduce production formula_semi -> formula SEMI
-- On PLAIN_ID reduce production formula_semi -> formula SEMI
-- On ONE reduce production formula_semi -> formula SEMI
-- On ONCE reduce production formula_semi -> formula SEMI
-- On NUMBER reduce production formula_semi -> formula SEMI
-- On NOT reduce production formula_semi -> formula SEMI
-- On NONE reduce production formula_semi -> formula SEMI
-- On NO reduce production formula_semi -> formula SEMI
-- On NEXT reduce production formula_semi -> formula SEMI
-- On NEG reduce production formula_semi -> formula SEMI
-- On LPAREN reduce production formula_semi -> formula SEMI
-- On LONE reduce production formula_semi -> formula SEMI
-- On LET reduce production formula_semi -> formula SEMI
-- On LBRACE reduce production formula_semi -> formula SEMI
-- On INVARIANT reduce production formula_semi -> formula SEMI
-- On INST reduce production formula_semi -> formula SEMI
-- On IDEN reduce production formula_semi -> formula SEMI
-- On HISTORICALLY reduce production formula_semi -> formula SEMI
-- On HAT reduce production formula_semi -> formula SEMI
-- On HASH reduce production formula_semi -> formula SEMI
-- On FALSE reduce production formula_semi -> formula SEMI
-- On EVENTUALLY reduce production formula_semi -> formula SEMI
-- On EOF reduce production formula_semi -> formula SEMI
-- On ALWAYS reduce production formula_semi -> formula SEMI
-- On ALL reduce production formula_semi -> formula SEMI
-- On ADD reduce production formula_semi -> formula SEMI

State 219:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 220
-- On expr shift to state 151
## Reductions:

State 220:
## Known stack suffix:
## ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TRUE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TILDE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SYM reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SUB reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On STAR reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOMETIME reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOME reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SEMI reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RUN reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RPAREN reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RBRACE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PREVIOUS reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PLAIN_ID reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONCE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NUMBER reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NOT reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NONE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NO reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEXT reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEG reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LPAREN reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LONE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LET reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LBRACE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INVARIANT reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INST reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On IDEN reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HISTORICALLY reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HAT reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HASH reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On FALSE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EVENTUALLY reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EOF reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ELSE reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALWAYS reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALL reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ADD reduce production formula -> ALL separated_nonempty_list(COMMA,ae_decl) BAR formula

State 221:
## Known stack suffix:
## ALWAYS formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> ALWAYS formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> ALWAYS formula
-- On UNIV reduce production formula -> ALWAYS formula
-- On TRUE reduce production formula -> ALWAYS formula
-- On TILDE reduce production formula -> ALWAYS formula
-- On SYM reduce production formula -> ALWAYS formula
-- On SUB reduce production formula -> ALWAYS formula
-- On STAR reduce production formula -> ALWAYS formula
-- On SOMETIME reduce production formula -> ALWAYS formula
-- On SOME reduce production formula -> ALWAYS formula
-- On SINCE reduce production formula -> ALWAYS formula
-- On SEMI reduce production formula -> ALWAYS formula
-- On RUN reduce production formula -> ALWAYS formula
-- On RPAREN reduce production formula -> ALWAYS formula
-- On RELEASES reduce production formula -> ALWAYS formula
-- On RBRACE reduce production formula -> ALWAYS formula
-- On PREVIOUS reduce production formula -> ALWAYS formula
-- On PLAIN_ID reduce production formula -> ALWAYS formula
-- On OR reduce production formula -> ALWAYS formula
-- On ONE reduce production formula -> ALWAYS formula
-- On ONCE reduce production formula -> ALWAYS formula
-- On NUMBER reduce production formula -> ALWAYS formula
-- On NOT reduce production formula -> ALWAYS formula
-- On NONE reduce production formula -> ALWAYS formula
-- On NO reduce production formula -> ALWAYS formula
-- On NEXT reduce production formula -> ALWAYS formula
-- On NEG reduce production formula -> ALWAYS formula
-- On LPAREN reduce production formula -> ALWAYS formula
-- On LONE reduce production formula -> ALWAYS formula
-- On LET reduce production formula -> ALWAYS formula
-- On LBRACE reduce production formula -> ALWAYS formula
-- On INVARIANT reduce production formula -> ALWAYS formula
-- On INST reduce production formula -> ALWAYS formula
-- On IMPLIES reduce production formula -> ALWAYS formula
-- On IFF reduce production formula -> ALWAYS formula
-- On IDEN reduce production formula -> ALWAYS formula
-- On HISTORICALLY reduce production formula -> ALWAYS formula
-- On HAT reduce production formula -> ALWAYS formula
-- On HASH reduce production formula -> ALWAYS formula
-- On FALSE reduce production formula -> ALWAYS formula
-- On EVENTUALLY reduce production formula -> ALWAYS formula
-- On EOF reduce production formula -> ALWAYS formula
-- On ELSE reduce production formula -> ALWAYS formula
-- On AND reduce production formula -> ALWAYS formula
-- On ALWAYS reduce production formula -> ALWAYS formula
-- On ALL reduce production formula -> ALWAYS formula
-- On ADD reduce production formula -> ALWAYS formula

State 222:
## Known stack suffix:
## EVENTUALLY formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> EVENTUALLY formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> EVENTUALLY formula
-- On UNIV reduce production formula -> EVENTUALLY formula
-- On TRUE reduce production formula -> EVENTUALLY formula
-- On TILDE reduce production formula -> EVENTUALLY formula
-- On SYM reduce production formula -> EVENTUALLY formula
-- On SUB reduce production formula -> EVENTUALLY formula
-- On STAR reduce production formula -> EVENTUALLY formula
-- On SOMETIME reduce production formula -> EVENTUALLY formula
-- On SOME reduce production formula -> EVENTUALLY formula
-- On SINCE reduce production formula -> EVENTUALLY formula
-- On SEMI reduce production formula -> EVENTUALLY formula
-- On RUN reduce production formula -> EVENTUALLY formula
-- On RPAREN reduce production formula -> EVENTUALLY formula
-- On RELEASES reduce production formula -> EVENTUALLY formula
-- On RBRACE reduce production formula -> EVENTUALLY formula
-- On PREVIOUS reduce production formula -> EVENTUALLY formula
-- On PLAIN_ID reduce production formula -> EVENTUALLY formula
-- On OR reduce production formula -> EVENTUALLY formula
-- On ONE reduce production formula -> EVENTUALLY formula
-- On ONCE reduce production formula -> EVENTUALLY formula
-- On NUMBER reduce production formula -> EVENTUALLY formula
-- On NOT reduce production formula -> EVENTUALLY formula
-- On NONE reduce production formula -> EVENTUALLY formula
-- On NO reduce production formula -> EVENTUALLY formula
-- On NEXT reduce production formula -> EVENTUALLY formula
-- On NEG reduce production formula -> EVENTUALLY formula
-- On LPAREN reduce production formula -> EVENTUALLY formula
-- On LONE reduce production formula -> EVENTUALLY formula
-- On LET reduce production formula -> EVENTUALLY formula
-- On LBRACE reduce production formula -> EVENTUALLY formula
-- On INVARIANT reduce production formula -> EVENTUALLY formula
-- On INST reduce production formula -> EVENTUALLY formula
-- On IMPLIES reduce production formula -> EVENTUALLY formula
-- On IFF reduce production formula -> EVENTUALLY formula
-- On IDEN reduce production formula -> EVENTUALLY formula
-- On HISTORICALLY reduce production formula -> EVENTUALLY formula
-- On HAT reduce production formula -> EVENTUALLY formula
-- On HASH reduce production formula -> EVENTUALLY formula
-- On FALSE reduce production formula -> EVENTUALLY formula
-- On EVENTUALLY reduce production formula -> EVENTUALLY formula
-- On EOF reduce production formula -> EVENTUALLY formula
-- On ELSE reduce production formula -> EVENTUALLY formula
-- On AND reduce production formula -> EVENTUALLY formula
-- On ALWAYS reduce production formula -> EVENTUALLY formula
-- On ALL reduce production formula -> EVENTUALLY formula
-- On ADD reduce production formula -> EVENTUALLY formula

State 223:
## Known stack suffix:
## HAT expr
## LR(1) items:
expr -> HAT expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
## Reductions:
-- On UNTIL reduce production expr -> HAT expr
-- On UNIV reduce production expr -> HAT expr
-- On TRUE reduce production expr -> HAT expr
-- On TILDE reduce production expr -> HAT expr
-- On SYM reduce production expr -> HAT expr
-- On SUB reduce production expr -> HAT expr
-- On STAR reduce production expr -> HAT expr
-- On SOMETIME reduce production expr -> HAT expr
-- On SOME reduce production expr -> HAT expr
-- On SINCE reduce production expr -> HAT expr
-- On SEMI reduce production expr -> HAT expr
-- On RUN reduce production expr -> HAT expr
-- On RPROJ reduce production expr -> HAT expr
-- On RPAREN reduce production expr -> HAT expr
-- On RELEASES reduce production expr -> HAT expr
-- On RBRACKET reduce production expr -> HAT expr
-- On RBRACE reduce production expr -> HAT expr
-- On PREVIOUS reduce production expr -> HAT expr
-- On PLUS reduce production expr -> HAT expr
-- On PLAIN_ID reduce production expr -> HAT expr
-- On OVERRIDE reduce production expr -> HAT expr
-- On OR reduce production expr -> HAT expr
-- On ONE reduce production expr -> HAT expr
-- On ONCE reduce production expr -> HAT expr
-- On NUMBER reduce production expr -> HAT expr
-- On NOT_IN reduce production expr -> HAT expr
-- On NOT reduce production expr -> HAT expr
-- On NONE reduce production expr -> HAT expr
-- On NO reduce production expr -> HAT expr
-- On NEXT reduce production expr -> HAT expr
-- On NEQ reduce production expr -> HAT expr
-- On NEG reduce production expr -> HAT expr
-- On MINUS reduce production expr -> HAT expr
-- On LTE reduce production expr -> HAT expr
-- On LT reduce production expr -> HAT expr
-- On LPROJ reduce production expr -> HAT expr
-- On LPAREN reduce production expr -> HAT expr
-- On LONE reduce production expr -> HAT expr
-- On LET reduce production expr -> HAT expr
-- On LBRACKET reduce production expr -> HAT expr
-- On LBRACE reduce production expr -> HAT expr
-- On INVARIANT reduce production expr -> HAT expr
-- On INTER reduce production expr -> HAT expr
-- On INST reduce production expr -> HAT expr
-- On IN reduce production expr -> HAT expr
-- On IMPLIES reduce production expr -> HAT expr
-- On IFF reduce production expr -> HAT expr
-- On IDEN reduce production expr -> HAT expr
-- On HISTORICALLY reduce production expr -> HAT expr
-- On HAT reduce production expr -> HAT expr
-- On HASH reduce production expr -> HAT expr
-- On GTE reduce production expr -> HAT expr
-- On GT reduce production expr -> HAT expr
-- On FALSE reduce production expr -> HAT expr
-- On EVENTUALLY reduce production expr -> HAT expr
-- On EQ reduce production expr -> HAT expr
-- On EOF reduce production expr -> HAT expr
-- On ELSE reduce production expr -> HAT expr
-- On DOT reduce production expr -> HAT expr
-- On COMMA reduce production expr -> HAT expr
-- On BAR reduce production expr -> HAT expr
-- On ARROW reduce production expr -> HAT expr
-- On AND reduce production expr -> HAT expr
-- On ALWAYS reduce production expr -> HAT expr
-- On ALL reduce production expr -> HAT expr
-- On ADD reduce production expr -> HAT expr

State 224:
## Known stack suffix:
## HISTORICALLY formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> HISTORICALLY formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> HISTORICALLY formula
-- On UNIV reduce production formula -> HISTORICALLY formula
-- On TRUE reduce production formula -> HISTORICALLY formula
-- On TILDE reduce production formula -> HISTORICALLY formula
-- On SYM reduce production formula -> HISTORICALLY formula
-- On SUB reduce production formula -> HISTORICALLY formula
-- On STAR reduce production formula -> HISTORICALLY formula
-- On SOMETIME reduce production formula -> HISTORICALLY formula
-- On SOME reduce production formula -> HISTORICALLY formula
-- On SINCE reduce production formula -> HISTORICALLY formula
-- On SEMI reduce production formula -> HISTORICALLY formula
-- On RUN reduce production formula -> HISTORICALLY formula
-- On RPAREN reduce production formula -> HISTORICALLY formula
-- On RELEASES reduce production formula -> HISTORICALLY formula
-- On RBRACE reduce production formula -> HISTORICALLY formula
-- On PREVIOUS reduce production formula -> HISTORICALLY formula
-- On PLAIN_ID reduce production formula -> HISTORICALLY formula
-- On OR reduce production formula -> HISTORICALLY formula
-- On ONE reduce production formula -> HISTORICALLY formula
-- On ONCE reduce production formula -> HISTORICALLY formula
-- On NUMBER reduce production formula -> HISTORICALLY formula
-- On NOT reduce production formula -> HISTORICALLY formula
-- On NONE reduce production formula -> HISTORICALLY formula
-- On NO reduce production formula -> HISTORICALLY formula
-- On NEXT reduce production formula -> HISTORICALLY formula
-- On NEG reduce production formula -> HISTORICALLY formula
-- On LPAREN reduce production formula -> HISTORICALLY formula
-- On LONE reduce production formula -> HISTORICALLY formula
-- On LET reduce production formula -> HISTORICALLY formula
-- On LBRACE reduce production formula -> HISTORICALLY formula
-- On INVARIANT reduce production formula -> HISTORICALLY formula
-- On INST reduce production formula -> HISTORICALLY formula
-- On IMPLIES reduce production formula -> HISTORICALLY formula
-- On IFF reduce production formula -> HISTORICALLY formula
-- On IDEN reduce production formula -> HISTORICALLY formula
-- On HISTORICALLY reduce production formula -> HISTORICALLY formula
-- On HAT reduce production formula -> HISTORICALLY formula
-- On HASH reduce production formula -> HISTORICALLY formula
-- On FALSE reduce production formula -> HISTORICALLY formula
-- On EVENTUALLY reduce production formula -> HISTORICALLY formula
-- On EOF reduce production formula -> HISTORICALLY formula
-- On ELSE reduce production formula -> HISTORICALLY formula
-- On AND reduce production formula -> HISTORICALLY formula
-- On ALWAYS reduce production formula -> HISTORICALLY formula
-- On ALL reduce production formula -> HISTORICALLY formula
-- On ADD reduce production formula -> HISTORICALLY formula

State 225:
## Known stack suffix:
## LBRACE specification
## LR(1) items:
formula -> LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 226
## Reductions:

State 226:
## Known stack suffix:
## LBRACE specification RBRACE
## LR(1) items:
formula -> LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> LBRACE specification RBRACE
-- On UNIV reduce production formula -> LBRACE specification RBRACE
-- On TRUE reduce production formula -> LBRACE specification RBRACE
-- On TILDE reduce production formula -> LBRACE specification RBRACE
-- On SYM reduce production formula -> LBRACE specification RBRACE
-- On SUB reduce production formula -> LBRACE specification RBRACE
-- On STAR reduce production formula -> LBRACE specification RBRACE
-- On SOMETIME reduce production formula -> LBRACE specification RBRACE
-- On SOME reduce production formula -> LBRACE specification RBRACE
-- On SINCE reduce production formula -> LBRACE specification RBRACE
-- On SEMI reduce production formula -> LBRACE specification RBRACE
-- On RUN reduce production formula -> LBRACE specification RBRACE
-- On RPAREN reduce production formula -> LBRACE specification RBRACE
-- On RELEASES reduce production formula -> LBRACE specification RBRACE
-- On RBRACE reduce production formula -> LBRACE specification RBRACE
-- On PREVIOUS reduce production formula -> LBRACE specification RBRACE
-- On PLAIN_ID reduce production formula -> LBRACE specification RBRACE
-- On OR reduce production formula -> LBRACE specification RBRACE
-- On ONE reduce production formula -> LBRACE specification RBRACE
-- On ONCE reduce production formula -> LBRACE specification RBRACE
-- On NUMBER reduce production formula -> LBRACE specification RBRACE
-- On NOT reduce production formula -> LBRACE specification RBRACE
-- On NONE reduce production formula -> LBRACE specification RBRACE
-- On NO reduce production formula -> LBRACE specification RBRACE
-- On NEXT reduce production formula -> LBRACE specification RBRACE
-- On NEG reduce production formula -> LBRACE specification RBRACE
-- On LPAREN reduce production formula -> LBRACE specification RBRACE
-- On LONE reduce production formula -> LBRACE specification RBRACE
-- On LET reduce production formula -> LBRACE specification RBRACE
-- On LBRACE reduce production formula -> LBRACE specification RBRACE
-- On INVARIANT reduce production formula -> LBRACE specification RBRACE
-- On INST reduce production formula -> LBRACE specification RBRACE
-- On IMPLIES reduce production formula -> LBRACE specification RBRACE
-- On IFF reduce production formula -> LBRACE specification RBRACE
-- On IDEN reduce production formula -> LBRACE specification RBRACE
-- On HISTORICALLY reduce production formula -> LBRACE specification RBRACE
-- On HAT reduce production formula -> LBRACE specification RBRACE
-- On HASH reduce production formula -> LBRACE specification RBRACE
-- On FALSE reduce production formula -> LBRACE specification RBRACE
-- On EVENTUALLY reduce production formula -> LBRACE specification RBRACE
-- On EOF reduce production formula -> LBRACE specification RBRACE
-- On ELSE reduce production formula -> LBRACE specification RBRACE
-- On AND reduce production formula -> LBRACE specification RBRACE
-- On ALWAYS reduce production formula -> LBRACE specification RBRACE
-- On ALL reduce production formula -> LBRACE specification RBRACE
-- On ADD reduce production formula -> LBRACE specification RBRACE

State 227:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) . BAR formula RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 228
-- On BAR shift to state 232
## Reductions:

State 228:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 229
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE reduce production list(formula_semi) ->

State 229:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 230
## Reductions:

State 230:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 231
## Reductions:

State 231:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On UNIV reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On TRUE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On TILDE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On SYM reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On SUB reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On STAR reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On SOMETIME reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On SOME reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On SINCE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On SEMI reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On RUN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On RPROJ reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On RPAREN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On RELEASES reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On RBRACKET reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On RBRACE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On PRIME reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On PREVIOUS reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On PLUS reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On PLAIN_ID reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On OVERRIDE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On OR reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On ONE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On ONCE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On NUMBER reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On NOT_IN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On NOT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On NONE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On NO reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On NEXT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On NEQ reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On NEG reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On MINUS reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On LTE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On LT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On LPROJ reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On LPAREN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On LONE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On LET reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On LBRACKET reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On LBRACE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On INVARIANT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On INTER reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On INST reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On IN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On IMPLIES reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On IFF reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On IDEN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On HISTORICALLY reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On HAT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On HASH reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On GTE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On GT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On FALSE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On EVENTUALLY reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On EQ reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On EOF reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On ELSE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On DOT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On COMMA reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On BAR reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On ARROW reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On AND reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On ALWAYS reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On ALL reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE
-- On ADD reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE RBRACE

State 232:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR . formula RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 233
-- On expr shift to state 151
## Reductions:

State 233:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . OR formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . IFF formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . UNTIL formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . RELEASES formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . SINCE formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula [ UNTIL SINCE RELEASES RBRACE OR IMPLIES IFF AND ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On RBRACE shift to state 234
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:

State 234:
## Known stack suffix:
## LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
## LR(1) items:
expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On UNIV reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On TRUE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On TILDE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On SYM reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On SUB reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On STAR reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On SOMETIME reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On SOME reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On SINCE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On SEMI reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On RUN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On RPROJ reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On RPAREN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On RELEASES reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On RBRACKET reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On RBRACE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On PRIME reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On PREVIOUS reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On PLUS reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On PLAIN_ID reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On OVERRIDE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On OR reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On ONE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On ONCE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On NUMBER reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On NOT_IN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On NOT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On NONE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On NO reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On NEXT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On NEQ reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On NEG reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On MINUS reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On LTE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On LT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On LPROJ reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On LPAREN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On LONE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On LET reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On LBRACKET reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On LBRACE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On INVARIANT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On INTER reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On INST reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On IN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On IMPLIES reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On IFF reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On IDEN reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On HISTORICALLY reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On HAT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On HASH reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On GTE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On GT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On FALSE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On EVENTUALLY reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On EQ reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On EOF reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On ELSE reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On DOT reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On COMMA reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On BAR reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On ARROW reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On AND reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On ALWAYS reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On ALL reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE
-- On ADD reduce production expr -> LBRACE separated_nonempty_list(COMMA,ae_decl) BAR formula RBRACE

State 235:
## Known stack suffix:
## PLAIN_ID EQ expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . INTER expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . RPROJ expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . ARROW expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . MINUS expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . DOT expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
expr -> expr . PRIME [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET LBRACE INTER IN EQ DOT COMMA BAR ARROW ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr . [ LBRACE BAR ]
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr . COMMA separated_nonempty_list(COMMA,let_decl) [ LBRACE BAR ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On COMMA shift to state 236
-- On ARROW shift to state 169
## Reductions:
-- On LBRACE reduce production separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr
-- On BAR reduce production separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr

State 236:
## Known stack suffix:
## PLAIN_ID EQ expr COMMA
## LR(1) items:
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr COMMA . separated_nonempty_list(COMMA,let_decl) [ LBRACE BAR ]
## Transitions:
-- On PLAIN_ID shift to state 119
-- On separated_nonempty_list(COMMA,let_decl) shift to state 237
## Reductions:

State 237:
## Known stack suffix:
## PLAIN_ID EQ expr COMMA separated_nonempty_list(COMMA,let_decl)
## LR(1) items:
separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr COMMA separated_nonempty_list(COMMA,let_decl) . [ LBRACE BAR ]
## Transitions:
## Reductions:
-- On LBRACE reduce production separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr COMMA separated_nonempty_list(COMMA,let_decl)
-- On BAR reduce production separated_nonempty_list(COMMA,let_decl) -> PLAIN_ID EQ expr COMMA separated_nonempty_list(COMMA,let_decl)

State 238:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl)
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LET separated_nonempty_list(COMMA,let_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 239
-- On BAR shift to state 242
## Reductions:

State 239:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) LBRACE
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 240
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE reduce production list(formula_semi) ->

State 240:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) LBRACE specification
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 241
## Reductions:

State 241:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On UNIV reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On TRUE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On TILDE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On SYM reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On SUB reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On STAR reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On SOMETIME reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On SOME reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On SINCE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On SEMI reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On RUN reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On RPAREN reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On RELEASES reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On RBRACE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On PREVIOUS reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On PLAIN_ID reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On OR reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On ONE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On ONCE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On NUMBER reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On NOT reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On NONE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On NO reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On NEXT reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On NEG reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On LPAREN reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On LONE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On LET reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On LBRACE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On INVARIANT reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On INST reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On IMPLIES reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On IFF reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On IDEN reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On HISTORICALLY reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On HAT reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On HASH reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On FALSE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On EVENTUALLY reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On EOF reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On ELSE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On AND reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On ALWAYS reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On ALL reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE
-- On ADD reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) LBRACE specification RBRACE

State 242:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) BAR
## LR(1) items:
formula -> LET separated_nonempty_list(COMMA,let_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 243
-- On expr shift to state 151
## Reductions:

State 243:
## Known stack suffix:
## LET separated_nonempty_list(COMMA,let_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On TRUE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On TILDE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On SYM reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On SUB reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On STAR reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On SOMETIME reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On SOME reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On SEMI reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On RUN reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On RPAREN reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On RBRACE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On PREVIOUS reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On PLAIN_ID reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On ONE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On ONCE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On NUMBER reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On NOT reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On NONE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On NO reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On NEXT reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On NEG reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On LPAREN reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On LONE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On LET reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On LBRACE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On INVARIANT reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On INST reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On IDEN reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On HISTORICALLY reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On HAT reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On HASH reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On FALSE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On EVENTUALLY reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On EOF reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On ELSE reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On ALWAYS reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On ALL reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula
-- On ADD reduce production formula -> LET separated_nonempty_list(COMMA,let_decl) BAR formula

State 244:
## Known stack suffix:
## LPAREN iexpr
## LR(1) items:
formula -> iexpr . icomp_op iexpr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
iexpr -> LPAREN iexpr . RPAREN [ RPAREN NEQ LTE LT GTE GT EQ ]
## Transitions:
-- On RPAREN shift to state 245
-- On NEQ shift to state 140
-- On LTE shift to state 141
-- On LT shift to state 142
-- On GTE shift to state 143
-- On GT shift to state 144
-- On EQ shift to state 145
-- On icomp_op shift to state 146
## Reductions:

State 245:
## Known stack suffix:
## LPAREN iexpr RPAREN
## LR(1) items:
iexpr -> LPAREN iexpr RPAREN . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production iexpr -> LPAREN iexpr RPAREN
-- On UNIV reduce production iexpr -> LPAREN iexpr RPAREN
-- On TRUE reduce production iexpr -> LPAREN iexpr RPAREN
-- On TILDE reduce production iexpr -> LPAREN iexpr RPAREN
-- On SYM reduce production iexpr -> LPAREN iexpr RPAREN
-- On SUB reduce production iexpr -> LPAREN iexpr RPAREN
-- On STAR reduce production iexpr -> LPAREN iexpr RPAREN
-- On SOMETIME reduce production iexpr -> LPAREN iexpr RPAREN
-- On SOME reduce production iexpr -> LPAREN iexpr RPAREN
-- On SINCE reduce production iexpr -> LPAREN iexpr RPAREN
-- On SEMI reduce production iexpr -> LPAREN iexpr RPAREN
-- On RUN reduce production iexpr -> LPAREN iexpr RPAREN
-- On RPAREN reduce production iexpr -> LPAREN iexpr RPAREN
-- On RELEASES reduce production iexpr -> LPAREN iexpr RPAREN
-- On RBRACKET reduce production iexpr -> LPAREN iexpr RPAREN
-- On RBRACE reduce production iexpr -> LPAREN iexpr RPAREN
-- On PREVIOUS reduce production iexpr -> LPAREN iexpr RPAREN
-- On PLAIN_ID reduce production iexpr -> LPAREN iexpr RPAREN
-- On OR reduce production iexpr -> LPAREN iexpr RPAREN
-- On ONE reduce production iexpr -> LPAREN iexpr RPAREN
-- On ONCE reduce production iexpr -> LPAREN iexpr RPAREN
-- On NUMBER reduce production iexpr -> LPAREN iexpr RPAREN
-- On NOT reduce production iexpr -> LPAREN iexpr RPAREN
-- On NONE reduce production iexpr -> LPAREN iexpr RPAREN
-- On NO reduce production iexpr -> LPAREN iexpr RPAREN
-- On NEXT reduce production iexpr -> LPAREN iexpr RPAREN
-- On NEQ reduce production iexpr -> LPAREN iexpr RPAREN
-- On NEG reduce production iexpr -> LPAREN iexpr RPAREN
-- On LTE reduce production iexpr -> LPAREN iexpr RPAREN
-- On LT reduce production iexpr -> LPAREN iexpr RPAREN
-- On LPAREN reduce production iexpr -> LPAREN iexpr RPAREN
-- On LONE reduce production iexpr -> LPAREN iexpr RPAREN
-- On LET reduce production iexpr -> LPAREN iexpr RPAREN
-- On LBRACE reduce production iexpr -> LPAREN iexpr RPAREN
-- On INVARIANT reduce production iexpr -> LPAREN iexpr RPAREN
-- On INST reduce production iexpr -> LPAREN iexpr RPAREN
-- On IMPLIES reduce production iexpr -> LPAREN iexpr RPAREN
-- On IFF reduce production iexpr -> LPAREN iexpr RPAREN
-- On IDEN reduce production iexpr -> LPAREN iexpr RPAREN
-- On HISTORICALLY reduce production iexpr -> LPAREN iexpr RPAREN
-- On HAT reduce production iexpr -> LPAREN iexpr RPAREN
-- On HASH reduce production iexpr -> LPAREN iexpr RPAREN
-- On GTE reduce production iexpr -> LPAREN iexpr RPAREN
-- On GT reduce production iexpr -> LPAREN iexpr RPAREN
-- On FALSE reduce production iexpr -> LPAREN iexpr RPAREN
-- On EVENTUALLY reduce production iexpr -> LPAREN iexpr RPAREN
-- On EQ reduce production iexpr -> LPAREN iexpr RPAREN
-- On EOF reduce production iexpr -> LPAREN iexpr RPAREN
-- On ELSE reduce production iexpr -> LPAREN iexpr RPAREN
-- On COMMA reduce production iexpr -> LPAREN iexpr RPAREN
-- On AND reduce production iexpr -> LPAREN iexpr RPAREN
-- On ALWAYS reduce production iexpr -> LPAREN iexpr RPAREN
-- On ALL reduce production iexpr -> LPAREN iexpr RPAREN
-- On ADD reduce production iexpr -> LPAREN iexpr RPAREN

State 246:
## Known stack suffix:
## LPAREN formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . OR formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . IFF formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . UNTIL formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . RELEASES formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . SINCE formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> formula . IMPLIES formula [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> LPAREN formula . RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RPAREN shift to state 247
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:

State 247:
## Known stack suffix:
## LPAREN formula RPAREN
## LR(1) items:
formula -> LPAREN formula RPAREN . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> LPAREN formula RPAREN
-- On UNIV reduce production formula -> LPAREN formula RPAREN
-- On TRUE reduce production formula -> LPAREN formula RPAREN
-- On TILDE reduce production formula -> LPAREN formula RPAREN
-- On SYM reduce production formula -> LPAREN formula RPAREN
-- On SUB reduce production formula -> LPAREN formula RPAREN
-- On STAR reduce production formula -> LPAREN formula RPAREN
-- On SOMETIME reduce production formula -> LPAREN formula RPAREN
-- On SOME reduce production formula -> LPAREN formula RPAREN
-- On SINCE reduce production formula -> LPAREN formula RPAREN
-- On SEMI reduce production formula -> LPAREN formula RPAREN
-- On RUN reduce production formula -> LPAREN formula RPAREN
-- On RPAREN reduce production formula -> LPAREN formula RPAREN
-- On RELEASES reduce production formula -> LPAREN formula RPAREN
-- On RBRACE reduce production formula -> LPAREN formula RPAREN
-- On PREVIOUS reduce production formula -> LPAREN formula RPAREN
-- On PLAIN_ID reduce production formula -> LPAREN formula RPAREN
-- On OR reduce production formula -> LPAREN formula RPAREN
-- On ONE reduce production formula -> LPAREN formula RPAREN
-- On ONCE reduce production formula -> LPAREN formula RPAREN
-- On NUMBER reduce production formula -> LPAREN formula RPAREN
-- On NOT reduce production formula -> LPAREN formula RPAREN
-- On NONE reduce production formula -> LPAREN formula RPAREN
-- On NO reduce production formula -> LPAREN formula RPAREN
-- On NEXT reduce production formula -> LPAREN formula RPAREN
-- On NEG reduce production formula -> LPAREN formula RPAREN
-- On LPAREN reduce production formula -> LPAREN formula RPAREN
-- On LONE reduce production formula -> LPAREN formula RPAREN
-- On LET reduce production formula -> LPAREN formula RPAREN
-- On LBRACE reduce production formula -> LPAREN formula RPAREN
-- On INVARIANT reduce production formula -> LPAREN formula RPAREN
-- On INST reduce production formula -> LPAREN formula RPAREN
-- On IMPLIES reduce production formula -> LPAREN formula RPAREN
-- On IFF reduce production formula -> LPAREN formula RPAREN
-- On IDEN reduce production formula -> LPAREN formula RPAREN
-- On HISTORICALLY reduce production formula -> LPAREN formula RPAREN
-- On HAT reduce production formula -> LPAREN formula RPAREN
-- On HASH reduce production formula -> LPAREN formula RPAREN
-- On FALSE reduce production formula -> LPAREN formula RPAREN
-- On EVENTUALLY reduce production formula -> LPAREN formula RPAREN
-- On EOF reduce production formula -> LPAREN formula RPAREN
-- On ELSE reduce production formula -> LPAREN formula RPAREN
-- On AND reduce production formula -> LPAREN formula RPAREN
-- On ALWAYS reduce production formula -> LPAREN formula RPAREN
-- On ALL reduce production formula -> LPAREN formula RPAREN
-- On ADD reduce production formula -> LPAREN formula RPAREN

State 248:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . INTER expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . OVERRIDE expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . LPROJ expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . RPROJ expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . ARROW expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . MINUS expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . DOT expr [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> expr . PRIME [ RPROJ RPAREN PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
expr -> LPAREN expr . RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RPAREN RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On RPAREN shift to state 249
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:

State 249:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production expr -> LPAREN expr RPAREN
-- On UNIV reduce production expr -> LPAREN expr RPAREN
-- On TRUE reduce production expr -> LPAREN expr RPAREN
-- On TILDE reduce production expr -> LPAREN expr RPAREN
-- On SYM reduce production expr -> LPAREN expr RPAREN
-- On SUB reduce production expr -> LPAREN expr RPAREN
-- On STAR reduce production expr -> LPAREN expr RPAREN
-- On SOMETIME reduce production expr -> LPAREN expr RPAREN
-- On SOME reduce production expr -> LPAREN expr RPAREN
-- On SINCE reduce production expr -> LPAREN expr RPAREN
-- On SEMI reduce production expr -> LPAREN expr RPAREN
-- On RUN reduce production expr -> LPAREN expr RPAREN
-- On RPROJ reduce production expr -> LPAREN expr RPAREN
-- On RPAREN reduce production expr -> LPAREN expr RPAREN
-- On RELEASES reduce production expr -> LPAREN expr RPAREN
-- On RBRACKET reduce production expr -> LPAREN expr RPAREN
-- On RBRACE reduce production expr -> LPAREN expr RPAREN
-- On PRIME reduce production expr -> LPAREN expr RPAREN
-- On PREVIOUS reduce production expr -> LPAREN expr RPAREN
-- On PLUS reduce production expr -> LPAREN expr RPAREN
-- On PLAIN_ID reduce production expr -> LPAREN expr RPAREN
-- On OVERRIDE reduce production expr -> LPAREN expr RPAREN
-- On OR reduce production expr -> LPAREN expr RPAREN
-- On ONE reduce production expr -> LPAREN expr RPAREN
-- On ONCE reduce production expr -> LPAREN expr RPAREN
-- On NUMBER reduce production expr -> LPAREN expr RPAREN
-- On NOT_IN reduce production expr -> LPAREN expr RPAREN
-- On NOT reduce production expr -> LPAREN expr RPAREN
-- On NONE reduce production expr -> LPAREN expr RPAREN
-- On NO reduce production expr -> LPAREN expr RPAREN
-- On NEXT reduce production expr -> LPAREN expr RPAREN
-- On NEQ reduce production expr -> LPAREN expr RPAREN
-- On NEG reduce production expr -> LPAREN expr RPAREN
-- On MINUS reduce production expr -> LPAREN expr RPAREN
-- On LTE reduce production expr -> LPAREN expr RPAREN
-- On LT reduce production expr -> LPAREN expr RPAREN
-- On LPROJ reduce production expr -> LPAREN expr RPAREN
-- On LPAREN reduce production expr -> LPAREN expr RPAREN
-- On LONE reduce production expr -> LPAREN expr RPAREN
-- On LET reduce production expr -> LPAREN expr RPAREN
-- On LBRACKET reduce production expr -> LPAREN expr RPAREN
-- On LBRACE reduce production expr -> LPAREN expr RPAREN
-- On INVARIANT reduce production expr -> LPAREN expr RPAREN
-- On INTER reduce production expr -> LPAREN expr RPAREN
-- On INST reduce production expr -> LPAREN expr RPAREN
-- On IN reduce production expr -> LPAREN expr RPAREN
-- On IMPLIES reduce production expr -> LPAREN expr RPAREN
-- On IFF reduce production expr -> LPAREN expr RPAREN
-- On IDEN reduce production expr -> LPAREN expr RPAREN
-- On HISTORICALLY reduce production expr -> LPAREN expr RPAREN
-- On HAT reduce production expr -> LPAREN expr RPAREN
-- On HASH reduce production expr -> LPAREN expr RPAREN
-- On GTE reduce production expr -> LPAREN expr RPAREN
-- On GT reduce production expr -> LPAREN expr RPAREN
-- On FALSE reduce production expr -> LPAREN expr RPAREN
-- On EVENTUALLY reduce production expr -> LPAREN expr RPAREN
-- On EQ reduce production expr -> LPAREN expr RPAREN
-- On EOF reduce production expr -> LPAREN expr RPAREN
-- On ELSE reduce production expr -> LPAREN expr RPAREN
-- On DOT reduce production expr -> LPAREN expr RPAREN
-- On COMMA reduce production expr -> LPAREN expr RPAREN
-- On BAR reduce production expr -> LPAREN expr RPAREN
-- On ARROW reduce production expr -> LPAREN expr RPAREN
-- On AND reduce production expr -> LPAREN expr RPAREN
-- On ALWAYS reduce production expr -> LPAREN expr RPAREN
-- On ALL reduce production expr -> LPAREN expr RPAREN
-- On ADD reduce production expr -> LPAREN expr RPAREN

State 250:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LONE separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 251
-- On BAR shift to state 254
## Reductions:

State 251:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 252
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE reduce production list(formula_semi) ->

State 252:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 253
## Reductions:

State 253:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On UNIV reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TRUE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TILDE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SYM reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SUB reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On STAR reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOMETIME reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOME reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SINCE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SEMI reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RUN reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RPAREN reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RELEASES reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RBRACE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PREVIOUS reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PLAIN_ID reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On OR reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONCE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NUMBER reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NOT reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NONE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NO reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEXT reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEG reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LPAREN reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LONE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LET reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LBRACE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INVARIANT reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INST reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IMPLIES reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IFF reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IDEN reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HISTORICALLY reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HAT reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HASH reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On FALSE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EVENTUALLY reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EOF reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ELSE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On AND reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALWAYS reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALL reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ADD reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 254:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 255
-- On expr shift to state 151
## Reductions:

State 255:
## Known stack suffix:
## LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TRUE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TILDE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SYM reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SUB reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On STAR reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOMETIME reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOME reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SEMI reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RUN reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RPAREN reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RBRACE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PREVIOUS reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PLAIN_ID reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONCE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NUMBER reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NOT reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NONE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NO reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEXT reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEG reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LPAREN reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LONE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LET reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LBRACE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INVARIANT reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INST reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On IDEN reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HISTORICALLY reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HAT reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HASH reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On FALSE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EVENTUALLY reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EOF reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ELSE reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALWAYS reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALL reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ADD reduce production formula -> LONE separated_nonempty_list(COMMA,ae_decl) BAR formula

State 256:
## Known stack suffix:
## LONE expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> LONE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production formula -> LONE expr
-- On UNIV reduce production formula -> LONE expr
-- On TRUE reduce production formula -> LONE expr
-- On TILDE reduce production formula -> LONE expr
-- On SYM reduce production formula -> LONE expr
-- On SUB reduce production formula -> LONE expr
-- On STAR reduce production formula -> LONE expr
-- On SOMETIME reduce production formula -> LONE expr
-- On SOME reduce production formula -> LONE expr
-- On SINCE reduce production formula -> LONE expr
-- On SEMI reduce production formula -> LONE expr
-- On RUN reduce production formula -> LONE expr
-- On RPAREN reduce production formula -> LONE expr
-- On RELEASES reduce production formula -> LONE expr
-- On RBRACE reduce production formula -> LONE expr
-- On PREVIOUS reduce production formula -> LONE expr
-- On PLAIN_ID reduce production formula -> LONE expr
-- On OR reduce production formula -> LONE expr
-- On ONE reduce production formula -> LONE expr
-- On ONCE reduce production formula -> LONE expr
-- On NUMBER reduce production formula -> LONE expr
-- On NOT reduce production formula -> LONE expr
-- On NONE reduce production formula -> LONE expr
-- On NO reduce production formula -> LONE expr
-- On NEXT reduce production formula -> LONE expr
-- On NEG reduce production formula -> LONE expr
-- On LPAREN reduce production formula -> LONE expr
-- On LONE reduce production formula -> LONE expr
-- On LET reduce production formula -> LONE expr
-- On LBRACE reduce production formula -> LONE expr
-- On INVARIANT reduce production formula -> LONE expr
-- On INST reduce production formula -> LONE expr
-- On IMPLIES reduce production formula -> LONE expr
-- On IFF reduce production formula -> LONE expr
-- On IDEN reduce production formula -> LONE expr
-- On HISTORICALLY reduce production formula -> LONE expr
-- On HAT reduce production formula -> LONE expr
-- On HASH reduce production formula -> LONE expr
-- On FALSE reduce production formula -> LONE expr
-- On EVENTUALLY reduce production formula -> LONE expr
-- On EOF reduce production formula -> LONE expr
-- On ELSE reduce production formula -> LONE expr
-- On AND reduce production formula -> LONE expr
-- On ALWAYS reduce production formula -> LONE expr
-- On ALL reduce production formula -> LONE expr
-- On ADD reduce production formula -> LONE expr

State 257:
## Known stack suffix:
## NEXT formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> NEXT formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> NEXT formula
-- On UNIV reduce production formula -> NEXT formula
-- On TRUE reduce production formula -> NEXT formula
-- On TILDE reduce production formula -> NEXT formula
-- On SYM reduce production formula -> NEXT formula
-- On SUB reduce production formula -> NEXT formula
-- On STAR reduce production formula -> NEXT formula
-- On SOMETIME reduce production formula -> NEXT formula
-- On SOME reduce production formula -> NEXT formula
-- On SINCE reduce production formula -> NEXT formula
-- On SEMI reduce production formula -> NEXT formula
-- On RUN reduce production formula -> NEXT formula
-- On RPAREN reduce production formula -> NEXT formula
-- On RELEASES reduce production formula -> NEXT formula
-- On RBRACE reduce production formula -> NEXT formula
-- On PREVIOUS reduce production formula -> NEXT formula
-- On PLAIN_ID reduce production formula -> NEXT formula
-- On OR reduce production formula -> NEXT formula
-- On ONE reduce production formula -> NEXT formula
-- On ONCE reduce production formula -> NEXT formula
-- On NUMBER reduce production formula -> NEXT formula
-- On NOT reduce production formula -> NEXT formula
-- On NONE reduce production formula -> NEXT formula
-- On NO reduce production formula -> NEXT formula
-- On NEXT reduce production formula -> NEXT formula
-- On NEG reduce production formula -> NEXT formula
-- On LPAREN reduce production formula -> NEXT formula
-- On LONE reduce production formula -> NEXT formula
-- On LET reduce production formula -> NEXT formula
-- On LBRACE reduce production formula -> NEXT formula
-- On INVARIANT reduce production formula -> NEXT formula
-- On INST reduce production formula -> NEXT formula
-- On IMPLIES reduce production formula -> NEXT formula
-- On IFF reduce production formula -> NEXT formula
-- On IDEN reduce production formula -> NEXT formula
-- On HISTORICALLY reduce production formula -> NEXT formula
-- On HAT reduce production formula -> NEXT formula
-- On HASH reduce production formula -> NEXT formula
-- On FALSE reduce production formula -> NEXT formula
-- On EVENTUALLY reduce production formula -> NEXT formula
-- On EOF reduce production formula -> NEXT formula
-- On ELSE reduce production formula -> NEXT formula
-- On AND reduce production formula -> NEXT formula
-- On ALWAYS reduce production formula -> NEXT formula
-- On ALL reduce production formula -> NEXT formula
-- On ADD reduce production formula -> NEXT formula

State 258:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> NO separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 259
-- On BAR shift to state 262
## Reductions:

State 259:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 260
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE reduce production list(formula_semi) ->

State 260:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 261
## Reductions:

State 261:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On UNIV reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TRUE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TILDE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SYM reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SUB reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On STAR reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOMETIME reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOME reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SINCE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SEMI reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RUN reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RPAREN reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RELEASES reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RBRACE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PREVIOUS reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PLAIN_ID reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On OR reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONCE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NUMBER reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NOT reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NONE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NO reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEXT reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEG reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LPAREN reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LONE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LET reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LBRACE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INVARIANT reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INST reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IMPLIES reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IFF reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IDEN reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HISTORICALLY reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HAT reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HASH reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On FALSE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EVENTUALLY reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EOF reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ELSE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On AND reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALWAYS reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALL reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ADD reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 262:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 263
-- On expr shift to state 151
## Reductions:

State 263:
## Known stack suffix:
## NO separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TRUE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TILDE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SYM reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SUB reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On STAR reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOMETIME reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOME reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SEMI reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RUN reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RPAREN reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RBRACE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PREVIOUS reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PLAIN_ID reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONCE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NUMBER reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NOT reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NONE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NO reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEXT reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEG reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LPAREN reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LONE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LET reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LBRACE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INVARIANT reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INST reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On IDEN reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HISTORICALLY reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HAT reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HASH reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On FALSE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EVENTUALLY reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EOF reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ELSE reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALWAYS reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALL reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ADD reduce production formula -> NO separated_nonempty_list(COMMA,ae_decl) BAR formula

State 264:
## Known stack suffix:
## NO expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> NO expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production formula -> NO expr
-- On UNIV reduce production formula -> NO expr
-- On TRUE reduce production formula -> NO expr
-- On TILDE reduce production formula -> NO expr
-- On SYM reduce production formula -> NO expr
-- On SUB reduce production formula -> NO expr
-- On STAR reduce production formula -> NO expr
-- On SOMETIME reduce production formula -> NO expr
-- On SOME reduce production formula -> NO expr
-- On SINCE reduce production formula -> NO expr
-- On SEMI reduce production formula -> NO expr
-- On RUN reduce production formula -> NO expr
-- On RPAREN reduce production formula -> NO expr
-- On RELEASES reduce production formula -> NO expr
-- On RBRACE reduce production formula -> NO expr
-- On PREVIOUS reduce production formula -> NO expr
-- On PLAIN_ID reduce production formula -> NO expr
-- On OR reduce production formula -> NO expr
-- On ONE reduce production formula -> NO expr
-- On ONCE reduce production formula -> NO expr
-- On NUMBER reduce production formula -> NO expr
-- On NOT reduce production formula -> NO expr
-- On NONE reduce production formula -> NO expr
-- On NO reduce production formula -> NO expr
-- On NEXT reduce production formula -> NO expr
-- On NEG reduce production formula -> NO expr
-- On LPAREN reduce production formula -> NO expr
-- On LONE reduce production formula -> NO expr
-- On LET reduce production formula -> NO expr
-- On LBRACE reduce production formula -> NO expr
-- On INVARIANT reduce production formula -> NO expr
-- On INST reduce production formula -> NO expr
-- On IMPLIES reduce production formula -> NO expr
-- On IFF reduce production formula -> NO expr
-- On IDEN reduce production formula -> NO expr
-- On HISTORICALLY reduce production formula -> NO expr
-- On HAT reduce production formula -> NO expr
-- On HASH reduce production formula -> NO expr
-- On FALSE reduce production formula -> NO expr
-- On EVENTUALLY reduce production formula -> NO expr
-- On EOF reduce production formula -> NO expr
-- On ELSE reduce production formula -> NO expr
-- On AND reduce production formula -> NO expr
-- On ALWAYS reduce production formula -> NO expr
-- On ALL reduce production formula -> NO expr
-- On ADD reduce production formula -> NO expr

State 265:
## Known stack suffix:
## NOT formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> NOT formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> NOT formula
-- On UNIV reduce production formula -> NOT formula
-- On TRUE reduce production formula -> NOT formula
-- On TILDE reduce production formula -> NOT formula
-- On SYM reduce production formula -> NOT formula
-- On SUB reduce production formula -> NOT formula
-- On STAR reduce production formula -> NOT formula
-- On SOMETIME reduce production formula -> NOT formula
-- On SOME reduce production formula -> NOT formula
-- On SINCE reduce production formula -> NOT formula
-- On SEMI reduce production formula -> NOT formula
-- On RUN reduce production formula -> NOT formula
-- On RPAREN reduce production formula -> NOT formula
-- On RELEASES reduce production formula -> NOT formula
-- On RBRACE reduce production formula -> NOT formula
-- On PREVIOUS reduce production formula -> NOT formula
-- On PLAIN_ID reduce production formula -> NOT formula
-- On OR reduce production formula -> NOT formula
-- On ONE reduce production formula -> NOT formula
-- On ONCE reduce production formula -> NOT formula
-- On NUMBER reduce production formula -> NOT formula
-- On NOT reduce production formula -> NOT formula
-- On NONE reduce production formula -> NOT formula
-- On NO reduce production formula -> NOT formula
-- On NEXT reduce production formula -> NOT formula
-- On NEG reduce production formula -> NOT formula
-- On LPAREN reduce production formula -> NOT formula
-- On LONE reduce production formula -> NOT formula
-- On LET reduce production formula -> NOT formula
-- On LBRACE reduce production formula -> NOT formula
-- On INVARIANT reduce production formula -> NOT formula
-- On INST reduce production formula -> NOT formula
-- On IMPLIES reduce production formula -> NOT formula
-- On IFF reduce production formula -> NOT formula
-- On IDEN reduce production formula -> NOT formula
-- On HISTORICALLY reduce production formula -> NOT formula
-- On HAT reduce production formula -> NOT formula
-- On HASH reduce production formula -> NOT formula
-- On FALSE reduce production formula -> NOT formula
-- On EVENTUALLY reduce production formula -> NOT formula
-- On EOF reduce production formula -> NOT formula
-- On ELSE reduce production formula -> NOT formula
-- On AND reduce production formula -> NOT formula
-- On ALWAYS reduce production formula -> NOT formula
-- On ALL reduce production formula -> NOT formula
-- On ADD reduce production formula -> NOT formula

State 266:
## Known stack suffix:
## ONCE formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> ONCE formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> ONCE formula
-- On UNIV reduce production formula -> ONCE formula
-- On TRUE reduce production formula -> ONCE formula
-- On TILDE reduce production formula -> ONCE formula
-- On SYM reduce production formula -> ONCE formula
-- On SUB reduce production formula -> ONCE formula
-- On STAR reduce production formula -> ONCE formula
-- On SOMETIME reduce production formula -> ONCE formula
-- On SOME reduce production formula -> ONCE formula
-- On SINCE reduce production formula -> ONCE formula
-- On SEMI reduce production formula -> ONCE formula
-- On RUN reduce production formula -> ONCE formula
-- On RPAREN reduce production formula -> ONCE formula
-- On RELEASES reduce production formula -> ONCE formula
-- On RBRACE reduce production formula -> ONCE formula
-- On PREVIOUS reduce production formula -> ONCE formula
-- On PLAIN_ID reduce production formula -> ONCE formula
-- On OR reduce production formula -> ONCE formula
-- On ONE reduce production formula -> ONCE formula
-- On ONCE reduce production formula -> ONCE formula
-- On NUMBER reduce production formula -> ONCE formula
-- On NOT reduce production formula -> ONCE formula
-- On NONE reduce production formula -> ONCE formula
-- On NO reduce production formula -> ONCE formula
-- On NEXT reduce production formula -> ONCE formula
-- On NEG reduce production formula -> ONCE formula
-- On LPAREN reduce production formula -> ONCE formula
-- On LONE reduce production formula -> ONCE formula
-- On LET reduce production formula -> ONCE formula
-- On LBRACE reduce production formula -> ONCE formula
-- On INVARIANT reduce production formula -> ONCE formula
-- On INST reduce production formula -> ONCE formula
-- On IMPLIES reduce production formula -> ONCE formula
-- On IFF reduce production formula -> ONCE formula
-- On IDEN reduce production formula -> ONCE formula
-- On HISTORICALLY reduce production formula -> ONCE formula
-- On HAT reduce production formula -> ONCE formula
-- On HASH reduce production formula -> ONCE formula
-- On FALSE reduce production formula -> ONCE formula
-- On EVENTUALLY reduce production formula -> ONCE formula
-- On EOF reduce production formula -> ONCE formula
-- On ELSE reduce production formula -> ONCE formula
-- On AND reduce production formula -> ONCE formula
-- On ALWAYS reduce production formula -> ONCE formula
-- On ALL reduce production formula -> ONCE formula
-- On ADD reduce production formula -> ONCE formula

State 267:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ONE separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 268
-- On BAR shift to state 271
## Reductions:

State 268:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 269
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE reduce production list(formula_semi) ->

State 269:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 270
## Reductions:

State 270:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On UNIV reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TRUE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TILDE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SYM reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SUB reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On STAR reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOMETIME reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOME reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SINCE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SEMI reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RUN reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RPAREN reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RELEASES reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RBRACE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PREVIOUS reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PLAIN_ID reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On OR reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONCE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NUMBER reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NOT reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NONE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NO reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEXT reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEG reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LPAREN reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LONE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LET reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LBRACE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INVARIANT reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INST reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IMPLIES reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IFF reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IDEN reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HISTORICALLY reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HAT reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HASH reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On FALSE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EVENTUALLY reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EOF reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ELSE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On AND reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALWAYS reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALL reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ADD reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 271:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 272
-- On expr shift to state 151
## Reductions:

State 272:
## Known stack suffix:
## ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TRUE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TILDE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SYM reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SUB reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On STAR reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOMETIME reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOME reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SEMI reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RUN reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RPAREN reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RBRACE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PREVIOUS reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PLAIN_ID reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONCE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NUMBER reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NOT reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NONE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NO reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEXT reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEG reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LPAREN reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LONE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LET reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LBRACE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INVARIANT reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INST reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On IDEN reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HISTORICALLY reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HAT reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HASH reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On FALSE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EVENTUALLY reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EOF reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ELSE reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALWAYS reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALL reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ADD reduce production formula -> ONE separated_nonempty_list(COMMA,ae_decl) BAR formula

State 273:
## Known stack suffix:
## ONE expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> ONE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production formula -> ONE expr
-- On UNIV reduce production formula -> ONE expr
-- On TRUE reduce production formula -> ONE expr
-- On TILDE reduce production formula -> ONE expr
-- On SYM reduce production formula -> ONE expr
-- On SUB reduce production formula -> ONE expr
-- On STAR reduce production formula -> ONE expr
-- On SOMETIME reduce production formula -> ONE expr
-- On SOME reduce production formula -> ONE expr
-- On SINCE reduce production formula -> ONE expr
-- On SEMI reduce production formula -> ONE expr
-- On RUN reduce production formula -> ONE expr
-- On RPAREN reduce production formula -> ONE expr
-- On RELEASES reduce production formula -> ONE expr
-- On RBRACE reduce production formula -> ONE expr
-- On PREVIOUS reduce production formula -> ONE expr
-- On PLAIN_ID reduce production formula -> ONE expr
-- On OR reduce production formula -> ONE expr
-- On ONE reduce production formula -> ONE expr
-- On ONCE reduce production formula -> ONE expr
-- On NUMBER reduce production formula -> ONE expr
-- On NOT reduce production formula -> ONE expr
-- On NONE reduce production formula -> ONE expr
-- On NO reduce production formula -> ONE expr
-- On NEXT reduce production formula -> ONE expr
-- On NEG reduce production formula -> ONE expr
-- On LPAREN reduce production formula -> ONE expr
-- On LONE reduce production formula -> ONE expr
-- On LET reduce production formula -> ONE expr
-- On LBRACE reduce production formula -> ONE expr
-- On INVARIANT reduce production formula -> ONE expr
-- On INST reduce production formula -> ONE expr
-- On IMPLIES reduce production formula -> ONE expr
-- On IFF reduce production formula -> ONE expr
-- On IDEN reduce production formula -> ONE expr
-- On HISTORICALLY reduce production formula -> ONE expr
-- On HAT reduce production formula -> ONE expr
-- On HASH reduce production formula -> ONE expr
-- On FALSE reduce production formula -> ONE expr
-- On EVENTUALLY reduce production formula -> ONE expr
-- On EOF reduce production formula -> ONE expr
-- On ELSE reduce production formula -> ONE expr
-- On AND reduce production formula -> ONE expr
-- On ALWAYS reduce production formula -> ONE expr
-- On ALL reduce production formula -> ONE expr
-- On ADD reduce production formula -> ONE expr

State 274:
## Known stack suffix:
## PREVIOUS formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> PREVIOUS formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> PREVIOUS formula
-- On UNIV reduce production formula -> PREVIOUS formula
-- On TRUE reduce production formula -> PREVIOUS formula
-- On TILDE reduce production formula -> PREVIOUS formula
-- On SYM reduce production formula -> PREVIOUS formula
-- On SUB reduce production formula -> PREVIOUS formula
-- On STAR reduce production formula -> PREVIOUS formula
-- On SOMETIME reduce production formula -> PREVIOUS formula
-- On SOME reduce production formula -> PREVIOUS formula
-- On SINCE reduce production formula -> PREVIOUS formula
-- On SEMI reduce production formula -> PREVIOUS formula
-- On RUN reduce production formula -> PREVIOUS formula
-- On RPAREN reduce production formula -> PREVIOUS formula
-- On RELEASES reduce production formula -> PREVIOUS formula
-- On RBRACE reduce production formula -> PREVIOUS formula
-- On PREVIOUS reduce production formula -> PREVIOUS formula
-- On PLAIN_ID reduce production formula -> PREVIOUS formula
-- On OR reduce production formula -> PREVIOUS formula
-- On ONE reduce production formula -> PREVIOUS formula
-- On ONCE reduce production formula -> PREVIOUS formula
-- On NUMBER reduce production formula -> PREVIOUS formula
-- On NOT reduce production formula -> PREVIOUS formula
-- On NONE reduce production formula -> PREVIOUS formula
-- On NO reduce production formula -> PREVIOUS formula
-- On NEXT reduce production formula -> PREVIOUS formula
-- On NEG reduce production formula -> PREVIOUS formula
-- On LPAREN reduce production formula -> PREVIOUS formula
-- On LONE reduce production formula -> PREVIOUS formula
-- On LET reduce production formula -> PREVIOUS formula
-- On LBRACE reduce production formula -> PREVIOUS formula
-- On INVARIANT reduce production formula -> PREVIOUS formula
-- On INST reduce production formula -> PREVIOUS formula
-- On IMPLIES reduce production formula -> PREVIOUS formula
-- On IFF reduce production formula -> PREVIOUS formula
-- On IDEN reduce production formula -> PREVIOUS formula
-- On HISTORICALLY reduce production formula -> PREVIOUS formula
-- On HAT reduce production formula -> PREVIOUS formula
-- On HASH reduce production formula -> PREVIOUS formula
-- On FALSE reduce production formula -> PREVIOUS formula
-- On EVENTUALLY reduce production formula -> PREVIOUS formula
-- On EOF reduce production formula -> PREVIOUS formula
-- On ELSE reduce production formula -> PREVIOUS formula
-- On AND reduce production formula -> PREVIOUS formula
-- On ALWAYS reduce production formula -> PREVIOUS formula
-- On ALL reduce production formula -> PREVIOUS formula
-- On ADD reduce production formula -> PREVIOUS formula

State 275:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl)
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) . BAR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> SOME separated_nonempty_list(COMMA,ae_decl) . LBRACE specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On LBRACE shift to state 276
-- On BAR shift to state 279
## Reductions:

State 276:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) LBRACE
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE . specification RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 277
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On RBRACE reduce production list(formula_semi) ->

State 277:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification . RBRACE [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACE shift to state 278
## Reductions:

State 278:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On UNIV reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TRUE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On TILDE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SYM reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SUB reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On STAR reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOMETIME reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SOME reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SINCE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On SEMI reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RUN reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RPAREN reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RELEASES reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On RBRACE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PREVIOUS reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On PLAIN_ID reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On OR reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ONCE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NUMBER reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NOT reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NONE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NO reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEXT reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On NEG reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LPAREN reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LONE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LET reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On LBRACE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INVARIANT reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On INST reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IMPLIES reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IFF reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On IDEN reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HISTORICALLY reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HAT reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On HASH reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On FALSE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EVENTUALLY reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On EOF reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ELSE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On AND reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALWAYS reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ALL reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE
-- On ADD reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) LBRACE specification RBRACE

State 279:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) BAR
## LR(1) items:
formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR . formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On iexpr shift to state 139
-- On formula shift to state 280
-- On expr shift to state 151
## Reductions:

State 280:
## Known stack suffix:
## SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
-- On UNTIL shift to state 149
-- On SINCE shift to state 183
-- On RELEASES shift to state 185
-- On OR shift to state 187
-- On IMPLIES shift to state 189
-- On IFF shift to state 198
-- On AND shift to state 193
## Reductions:
-- On UNIV reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TRUE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On TILDE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SYM reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SUB reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On STAR reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOMETIME reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SOME reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On SEMI reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RUN reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RPAREN reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On RBRACE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PREVIOUS reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On PLAIN_ID reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ONCE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NUMBER reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NOT reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NONE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NO reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEXT reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On NEG reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LPAREN reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LONE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LET reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On LBRACE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INVARIANT reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On INST reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On IDEN reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HISTORICALLY reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HAT reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On HASH reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On FALSE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EVENTUALLY reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On EOF reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ELSE reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALWAYS reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ALL reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula
-- On ADD reduce production formula -> SOME separated_nonempty_list(COMMA,ae_decl) BAR formula

State 281:
## Known stack suffix:
## SOME expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EQ EOF ELSE DOT ARROW AND ALWAYS ALL ADD ]
formula -> SOME expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On NEQ shift to state 173
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On EQ shift to state 179
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production formula -> SOME expr
-- On UNIV reduce production formula -> SOME expr
-- On TRUE reduce production formula -> SOME expr
-- On TILDE reduce production formula -> SOME expr
-- On SYM reduce production formula -> SOME expr
-- On SUB reduce production formula -> SOME expr
-- On STAR reduce production formula -> SOME expr
-- On SOMETIME reduce production formula -> SOME expr
-- On SOME reduce production formula -> SOME expr
-- On SINCE reduce production formula -> SOME expr
-- On SEMI reduce production formula -> SOME expr
-- On RUN reduce production formula -> SOME expr
-- On RPAREN reduce production formula -> SOME expr
-- On RELEASES reduce production formula -> SOME expr
-- On RBRACE reduce production formula -> SOME expr
-- On PREVIOUS reduce production formula -> SOME expr
-- On PLAIN_ID reduce production formula -> SOME expr
-- On OR reduce production formula -> SOME expr
-- On ONE reduce production formula -> SOME expr
-- On ONCE reduce production formula -> SOME expr
-- On NUMBER reduce production formula -> SOME expr
-- On NOT reduce production formula -> SOME expr
-- On NONE reduce production formula -> SOME expr
-- On NO reduce production formula -> SOME expr
-- On NEXT reduce production formula -> SOME expr
-- On NEG reduce production formula -> SOME expr
-- On LPAREN reduce production formula -> SOME expr
-- On LONE reduce production formula -> SOME expr
-- On LET reduce production formula -> SOME expr
-- On LBRACE reduce production formula -> SOME expr
-- On INVARIANT reduce production formula -> SOME expr
-- On INST reduce production formula -> SOME expr
-- On IMPLIES reduce production formula -> SOME expr
-- On IFF reduce production formula -> SOME expr
-- On IDEN reduce production formula -> SOME expr
-- On HISTORICALLY reduce production formula -> SOME expr
-- On HAT reduce production formula -> SOME expr
-- On HASH reduce production formula -> SOME expr
-- On FALSE reduce production formula -> SOME expr
-- On EVENTUALLY reduce production formula -> SOME expr
-- On EOF reduce production formula -> SOME expr
-- On ELSE reduce production formula -> SOME expr
-- On AND reduce production formula -> SOME expr
-- On ALWAYS reduce production formula -> SOME expr
-- On ALL reduce production formula -> SOME expr
-- On ADD reduce production formula -> SOME expr

State 282:
## Known stack suffix:
## SOMETIME formula
## LR(1) items:
expr -> formula . IMPLIES expr ELSE expr [ RPROJ PRIME PLUS OVERRIDE NOT_IN NEQ MINUS LPROJ LBRACKET INTER IN EQ DOT ARROW ]
formula -> SOMETIME formula . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . AND formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . OR formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IFF formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . UNTIL formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . RELEASES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . SINCE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula ELSE formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
formula -> formula . IMPLIES formula [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production formula -> SOMETIME formula
-- On UNIV reduce production formula -> SOMETIME formula
-- On TRUE reduce production formula -> SOMETIME formula
-- On TILDE reduce production formula -> SOMETIME formula
-- On SYM reduce production formula -> SOMETIME formula
-- On SUB reduce production formula -> SOMETIME formula
-- On STAR reduce production formula -> SOMETIME formula
-- On SOMETIME reduce production formula -> SOMETIME formula
-- On SOME reduce production formula -> SOMETIME formula
-- On SINCE reduce production formula -> SOMETIME formula
-- On SEMI reduce production formula -> SOMETIME formula
-- On RUN reduce production formula -> SOMETIME formula
-- On RPAREN reduce production formula -> SOMETIME formula
-- On RELEASES reduce production formula -> SOMETIME formula
-- On RBRACE reduce production formula -> SOMETIME formula
-- On PREVIOUS reduce production formula -> SOMETIME formula
-- On PLAIN_ID reduce production formula -> SOMETIME formula
-- On OR reduce production formula -> SOMETIME formula
-- On ONE reduce production formula -> SOMETIME formula
-- On ONCE reduce production formula -> SOMETIME formula
-- On NUMBER reduce production formula -> SOMETIME formula
-- On NOT reduce production formula -> SOMETIME formula
-- On NONE reduce production formula -> SOMETIME formula
-- On NO reduce production formula -> SOMETIME formula
-- On NEXT reduce production formula -> SOMETIME formula
-- On NEG reduce production formula -> SOMETIME formula
-- On LPAREN reduce production formula -> SOMETIME formula
-- On LONE reduce production formula -> SOMETIME formula
-- On LET reduce production formula -> SOMETIME formula
-- On LBRACE reduce production formula -> SOMETIME formula
-- On INVARIANT reduce production formula -> SOMETIME formula
-- On INST reduce production formula -> SOMETIME formula
-- On IMPLIES reduce production formula -> SOMETIME formula
-- On IFF reduce production formula -> SOMETIME formula
-- On IDEN reduce production formula -> SOMETIME formula
-- On HISTORICALLY reduce production formula -> SOMETIME formula
-- On HAT reduce production formula -> SOMETIME formula
-- On HASH reduce production formula -> SOMETIME formula
-- On FALSE reduce production formula -> SOMETIME formula
-- On EVENTUALLY reduce production formula -> SOMETIME formula
-- On EOF reduce production formula -> SOMETIME formula
-- On ELSE reduce production formula -> SOMETIME formula
-- On AND reduce production formula -> SOMETIME formula
-- On ALWAYS reduce production formula -> SOMETIME formula
-- On ALL reduce production formula -> SOMETIME formula
-- On ADD reduce production formula -> SOMETIME formula

State 283:
## Known stack suffix:
## STAR expr
## LR(1) items:
expr -> STAR expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
## Reductions:
-- On UNTIL reduce production expr -> STAR expr
-- On UNIV reduce production expr -> STAR expr
-- On TRUE reduce production expr -> STAR expr
-- On TILDE reduce production expr -> STAR expr
-- On SYM reduce production expr -> STAR expr
-- On SUB reduce production expr -> STAR expr
-- On STAR reduce production expr -> STAR expr
-- On SOMETIME reduce production expr -> STAR expr
-- On SOME reduce production expr -> STAR expr
-- On SINCE reduce production expr -> STAR expr
-- On SEMI reduce production expr -> STAR expr
-- On RUN reduce production expr -> STAR expr
-- On RPROJ reduce production expr -> STAR expr
-- On RPAREN reduce production expr -> STAR expr
-- On RELEASES reduce production expr -> STAR expr
-- On RBRACKET reduce production expr -> STAR expr
-- On RBRACE reduce production expr -> STAR expr
-- On PREVIOUS reduce production expr -> STAR expr
-- On PLUS reduce production expr -> STAR expr
-- On PLAIN_ID reduce production expr -> STAR expr
-- On OVERRIDE reduce production expr -> STAR expr
-- On OR reduce production expr -> STAR expr
-- On ONE reduce production expr -> STAR expr
-- On ONCE reduce production expr -> STAR expr
-- On NUMBER reduce production expr -> STAR expr
-- On NOT_IN reduce production expr -> STAR expr
-- On NOT reduce production expr -> STAR expr
-- On NONE reduce production expr -> STAR expr
-- On NO reduce production expr -> STAR expr
-- On NEXT reduce production expr -> STAR expr
-- On NEQ reduce production expr -> STAR expr
-- On NEG reduce production expr -> STAR expr
-- On MINUS reduce production expr -> STAR expr
-- On LTE reduce production expr -> STAR expr
-- On LT reduce production expr -> STAR expr
-- On LPROJ reduce production expr -> STAR expr
-- On LPAREN reduce production expr -> STAR expr
-- On LONE reduce production expr -> STAR expr
-- On LET reduce production expr -> STAR expr
-- On LBRACKET reduce production expr -> STAR expr
-- On LBRACE reduce production expr -> STAR expr
-- On INVARIANT reduce production expr -> STAR expr
-- On INTER reduce production expr -> STAR expr
-- On INST reduce production expr -> STAR expr
-- On IN reduce production expr -> STAR expr
-- On IMPLIES reduce production expr -> STAR expr
-- On IFF reduce production expr -> STAR expr
-- On IDEN reduce production expr -> STAR expr
-- On HISTORICALLY reduce production expr -> STAR expr
-- On HAT reduce production expr -> STAR expr
-- On HASH reduce production expr -> STAR expr
-- On GTE reduce production expr -> STAR expr
-- On GT reduce production expr -> STAR expr
-- On FALSE reduce production expr -> STAR expr
-- On EVENTUALLY reduce production expr -> STAR expr
-- On EQ reduce production expr -> STAR expr
-- On EOF reduce production expr -> STAR expr
-- On ELSE reduce production expr -> STAR expr
-- On DOT reduce production expr -> STAR expr
-- On COMMA reduce production expr -> STAR expr
-- On BAR reduce production expr -> STAR expr
-- On ARROW reduce production expr -> STAR expr
-- On AND reduce production expr -> STAR expr
-- On ALWAYS reduce production expr -> STAR expr
-- On ALL reduce production expr -> STAR expr
-- On ADD reduce production expr -> STAR expr

State 284:
## Known stack suffix:
## HASH expr
## LR(1) items:
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
iexpr -> HASH expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RPROJ shift to state 152
-- On PRIME shift to state 154
-- On PLUS shift to state 159
-- On OVERRIDE shift to state 161
-- On NOT_IN shift to state 171
-- On MINUS shift to state 175
-- On LPROJ shift to state 163
-- On LBRACKET shift to state 155
-- On INTER shift to state 167
-- On IN shift to state 177
-- On DOT shift to state 165
-- On ARROW shift to state 169
## Reductions:
-- On UNTIL reduce production iexpr -> HASH expr
-- On UNIV reduce production iexpr -> HASH expr
-- On TRUE reduce production iexpr -> HASH expr
-- On TILDE reduce production iexpr -> HASH expr
-- On SYM reduce production iexpr -> HASH expr
-- On SUB reduce production iexpr -> HASH expr
-- On STAR reduce production iexpr -> HASH expr
-- On SOMETIME reduce production iexpr -> HASH expr
-- On SOME reduce production iexpr -> HASH expr
-- On SINCE reduce production iexpr -> HASH expr
-- On SEMI reduce production iexpr -> HASH expr
-- On RUN reduce production iexpr -> HASH expr
-- On RPAREN reduce production iexpr -> HASH expr
-- On RELEASES reduce production iexpr -> HASH expr
-- On RBRACKET reduce production iexpr -> HASH expr
-- On RBRACE reduce production iexpr -> HASH expr
-- On PREVIOUS reduce production iexpr -> HASH expr
-- On PLAIN_ID reduce production iexpr -> HASH expr
-- On OR reduce production iexpr -> HASH expr
-- On ONE reduce production iexpr -> HASH expr
-- On ONCE reduce production iexpr -> HASH expr
-- On NUMBER reduce production iexpr -> HASH expr
-- On NOT reduce production iexpr -> HASH expr
-- On NONE reduce production iexpr -> HASH expr
-- On NO reduce production iexpr -> HASH expr
-- On NEXT reduce production iexpr -> HASH expr
-- On NEQ reduce production iexpr -> HASH expr
-- On NEG reduce production iexpr -> HASH expr
-- On LTE reduce production iexpr -> HASH expr
-- On LT reduce production iexpr -> HASH expr
-- On LPAREN reduce production iexpr -> HASH expr
-- On LONE reduce production iexpr -> HASH expr
-- On LET reduce production iexpr -> HASH expr
-- On LBRACE reduce production iexpr -> HASH expr
-- On INVARIANT reduce production iexpr -> HASH expr
-- On INST reduce production iexpr -> HASH expr
-- On IMPLIES reduce production iexpr -> HASH expr
-- On IFF reduce production iexpr -> HASH expr
-- On IDEN reduce production iexpr -> HASH expr
-- On HISTORICALLY reduce production iexpr -> HASH expr
-- On HAT reduce production iexpr -> HASH expr
-- On HASH reduce production iexpr -> HASH expr
-- On GTE reduce production iexpr -> HASH expr
-- On GT reduce production iexpr -> HASH expr
-- On FALSE reduce production iexpr -> HASH expr
-- On EVENTUALLY reduce production iexpr -> HASH expr
-- On EQ reduce production iexpr -> HASH expr
-- On EOF reduce production iexpr -> HASH expr
-- On ELSE reduce production iexpr -> HASH expr
-- On COMMA reduce production iexpr -> HASH expr
-- On AND reduce production iexpr -> HASH expr
-- On ALWAYS reduce production iexpr -> HASH expr
-- On ALL reduce production iexpr -> HASH expr
-- On ADD reduce production iexpr -> HASH expr

State 285:
## Known stack suffix:
## LPAREN iexpr
## LR(1) items:
iexpr -> LPAREN iexpr . RPAREN [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEG LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH FALSE EVENTUALLY EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RPAREN shift to state 245
## Reductions:

State 286:
## Known stack suffix:
## NEG LBRACKET iexpr
## LR(1) items:
iexpr -> NEG LBRACKET iexpr . RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACKET shift to state 287
## Reductions:

State 287:
## Known stack suffix:
## NEG LBRACKET iexpr RBRACKET
## LR(1) items:
iexpr -> NEG LBRACKET iexpr RBRACKET . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On UNIV reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On TRUE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On TILDE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On SYM reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On SUB reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On STAR reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On SOMETIME reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On SOME reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On SINCE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On SEMI reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On RUN reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On RPAREN reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On RELEASES reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On RBRACKET reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On RBRACE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On PREVIOUS reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On PLAIN_ID reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On OR reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On ONE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On ONCE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On NUMBER reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On NOT reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On NONE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On NO reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On NEXT reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On NEQ reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On NEG reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On LTE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On LT reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On LPAREN reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On LONE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On LET reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On LBRACE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On INVARIANT reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On INST reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On IMPLIES reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On IFF reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On IDEN reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On HISTORICALLY reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On HAT reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On HASH reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On GTE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On GT reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On FALSE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On EVENTUALLY reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On EQ reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On EOF reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On ELSE reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On COMMA reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On AND reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On ALWAYS reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On ALL reduce production iexpr -> NEG LBRACKET iexpr RBRACKET
-- On ADD reduce production iexpr -> NEG LBRACKET iexpr RBRACKET

State 288:
## Known stack suffix:
## SUB LBRACKET iexpr
## LR(1) items:
iexpr -> SUB LBRACKET iexpr . COMMA iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On COMMA shift to state 289
## Reductions:

State 289:
## Known stack suffix:
## SUB LBRACKET iexpr COMMA
## LR(1) items:
iexpr -> SUB LBRACKET iexpr COMMA . iexpr RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On SUB shift to state 93
-- On NUMBER shift to state 95
-- On NEG shift to state 96
-- On LPAREN shift to state 98
-- On HASH shift to state 99
-- On ADD shift to state 133
-- On iexpr shift to state 290
## Reductions:

State 290:
## Known stack suffix:
## SUB LBRACKET iexpr COMMA iexpr
## LR(1) items:
iexpr -> SUB LBRACKET iexpr COMMA iexpr . RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
-- On RBRACKET shift to state 291
## Reductions:

State 291:
## Known stack suffix:
## SUB LBRACKET iexpr COMMA iexpr RBRACKET
## LR(1) items:
iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPAREN RELEASES RBRACKET RBRACE PREVIOUS PLAIN_ID OR ONE ONCE NUMBER NOT NONE NO NEXT NEQ NEG LTE LT LPAREN LONE LET LBRACE INVARIANT INST IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE COMMA AND ALWAYS ALL ADD ]
## Transitions:
## Reductions:
-- On UNTIL reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On UNIV reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On TRUE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On TILDE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On SYM reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On SUB reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On STAR reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On SOMETIME reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On SOME reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On SINCE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On SEMI reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On RUN reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On RPAREN reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On RELEASES reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On RBRACKET reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On RBRACE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On PREVIOUS reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On PLAIN_ID reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On OR reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On ONE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On ONCE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On NUMBER reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On NOT reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On NONE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On NO reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On NEXT reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On NEQ reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On NEG reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On LTE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On LT reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On LPAREN reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On LONE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On LET reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On LBRACE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On INVARIANT reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On INST reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On IMPLIES reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On IFF reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On IDEN reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On HISTORICALLY reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On HAT reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On HASH reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On GTE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On GT reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On FALSE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On EVENTUALLY reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On EQ reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On EOF reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On ELSE reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On COMMA reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On AND reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On ALWAYS reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On ALL reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET
-- On ADD reduce production iexpr -> SUB LBRACKET iexpr COMMA iexpr RBRACKET

State 292:
## Known stack suffix:
## TILDE expr
## LR(1) items:
expr -> TILDE expr . [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PLUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . INTER expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . OVERRIDE expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . RPROJ expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . ARROW expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . MINUS expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . DOT expr [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . LBRACKET separated_nonempty_list(COMMA,expr) RBRACKET [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
expr -> expr . PRIME [ UNTIL UNIV TRUE TILDE SYM SUB STAR SOMETIME SOME SINCE SEMI RUN RPROJ RPAREN RELEASES RBRACKET RBRACE PRIME PREVIOUS PLUS PLAIN_ID OVERRIDE OR ONE ONCE NUMBER NOT_IN NOT NONE NO NEXT NEQ NEG MINUS LTE LT LPROJ LPAREN LONE LET LBRACKET LBRACE INVARIANT INTER INST IN IMPLIES IFF IDEN HISTORICALLY HAT HASH GTE GT FALSE EVENTUALLY EQ EOF ELSE DOT COMMA BAR ARROW AND ALWAYS ALL ADD ]
formula -> expr . NOT_IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . IN expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . EQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
formula -> expr . NEQ expr [ UNTIL SINCE RELEASES OR IMPLIES IFF AND ]
## Transitions:
-- On PRIME shift to state 154
## Reductions:
-- On UNTIL reduce production expr -> TILDE expr
-- On UNIV reduce production expr -> TILDE expr
-- On TRUE reduce production expr -> TILDE expr
-- On TILDE reduce production expr -> TILDE expr
-- On SYM reduce production expr -> TILDE expr
-- On SUB reduce production expr -> TILDE expr
-- On STAR reduce production expr -> TILDE expr
-- On SOMETIME reduce production expr -> TILDE expr
-- On SOME reduce production expr -> TILDE expr
-- On SINCE reduce production expr -> TILDE expr
-- On SEMI reduce production expr -> TILDE expr
-- On RUN reduce production expr -> TILDE expr
-- On RPROJ reduce production expr -> TILDE expr
-- On RPAREN reduce production expr -> TILDE expr
-- On RELEASES reduce production expr -> TILDE expr
-- On RBRACKET reduce production expr -> TILDE expr
-- On RBRACE reduce production expr -> TILDE expr
-- On PREVIOUS reduce production expr -> TILDE expr
-- On PLUS reduce production expr -> TILDE expr
-- On PLAIN_ID reduce production expr -> TILDE expr
-- On OVERRIDE reduce production expr -> TILDE expr
-- On OR reduce production expr -> TILDE expr
-- On ONE reduce production expr -> TILDE expr
-- On ONCE reduce production expr -> TILDE expr
-- On NUMBER reduce production expr -> TILDE expr
-- On NOT_IN reduce production expr -> TILDE expr
-- On NOT reduce production expr -> TILDE expr
-- On NONE reduce production expr -> TILDE expr
-- On NO reduce production expr -> TILDE expr
-- On NEXT reduce production expr -> TILDE expr
-- On NEQ reduce production expr -> TILDE expr
-- On NEG reduce production expr -> TILDE expr
-- On MINUS reduce production expr -> TILDE expr
-- On LTE reduce production expr -> TILDE expr
-- On LT reduce production expr -> TILDE expr
-- On LPROJ reduce production expr -> TILDE expr
-- On LPAREN reduce production expr -> TILDE expr
-- On LONE reduce production expr -> TILDE expr
-- On LET reduce production expr -> TILDE expr
-- On LBRACKET reduce production expr -> TILDE expr
-- On LBRACE reduce production expr -> TILDE expr
-- On INVARIANT reduce production expr -> TILDE expr
-- On INTER reduce production expr -> TILDE expr
-- On INST reduce production expr -> TILDE expr
-- On IN reduce production expr -> TILDE expr
-- On IMPLIES reduce production expr -> TILDE expr
-- On IFF reduce production expr -> TILDE expr
-- On IDEN reduce production expr -> TILDE expr
-- On HISTORICALLY reduce production expr -> TILDE expr
-- On HAT reduce production expr -> TILDE expr
-- On HASH reduce production expr -> TILDE expr
-- On GTE reduce production expr -> TILDE expr
-- On GT reduce production expr -> TILDE expr
-- On FALSE reduce production expr -> TILDE expr
-- On EVENTUALLY reduce production expr -> TILDE expr
-- On EQ reduce production expr -> TILDE expr
-- On EOF reduce production expr -> TILDE expr
-- On ELSE reduce production expr -> TILDE expr
-- On DOT reduce production expr -> TILDE expr
-- On COMMA reduce production expr -> TILDE expr
-- On BAR reduce production expr -> TILDE expr
-- On ARROW reduce production expr -> TILDE expr
-- On AND reduce production expr -> TILDE expr
-- On ALWAYS reduce production expr -> TILDE expr
-- On ALL reduce production expr -> TILDE expr
-- On ADD reduce production expr -> TILDE expr

State 293:
## Known stack suffix:
## RUN nonempty_list(formula_semi)
## LR(1) items:
paragraph -> RUN nonempty_list(formula_semi) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production paragraph -> RUN nonempty_list(formula_semi)
-- On RUN reduce production paragraph -> RUN nonempty_list(formula_semi)
-- On INVARIANT reduce production paragraph -> RUN nonempty_list(formula_semi)
-- On INST reduce production paragraph -> RUN nonempty_list(formula_semi)
-- On EOF reduce production paragraph -> RUN nonempty_list(formula_semi)

State 294:
## Known stack suffix:
## formula_semi
## LR(1) items:
nonempty_list(formula_semi) -> formula_semi . [ SYM RUN INVARIANT INST EOF ]
nonempty_list(formula_semi) -> formula_semi . nonempty_list(formula_semi) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On nonempty_list(formula_semi) shift to state 295
-- On iexpr shift to state 139
-- On formula_semi shift to state 294
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On SYM reduce production nonempty_list(formula_semi) -> formula_semi
-- On RUN reduce production nonempty_list(formula_semi) -> formula_semi
-- On INVARIANT reduce production nonempty_list(formula_semi) -> formula_semi
-- On INST reduce production nonempty_list(formula_semi) -> formula_semi
-- On EOF reduce production nonempty_list(formula_semi) -> formula_semi

State 295:
## Known stack suffix:
## formula_semi nonempty_list(formula_semi)
## LR(1) items:
nonempty_list(formula_semi) -> formula_semi nonempty_list(formula_semi) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production nonempty_list(formula_semi) -> formula_semi nonempty_list(formula_semi)
-- On RUN reduce production nonempty_list(formula_semi) -> formula_semi nonempty_list(formula_semi)
-- On INVARIANT reduce production nonempty_list(formula_semi) -> formula_semi nonempty_list(formula_semi)
-- On INST reduce production nonempty_list(formula_semi) -> formula_semi nonempty_list(formula_semi)
-- On EOF reduce production nonempty_list(formula_semi) -> formula_semi nonempty_list(formula_semi)

State 296:
## Known stack suffix:
## INVARIANT
## LR(1) items:
paragraph -> INVARIANT . specification [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On UNIV shift to state 90
-- On TRUE shift to state 91
-- On TILDE shift to state 92
-- On SUB shift to state 93
-- On STAR shift to state 100
-- On SOMETIME shift to state 101
-- On SOME shift to state 102
-- On PREVIOUS shift to state 103
-- On PLAIN_ID shift to state 104
-- On ONE shift to state 105
-- On ONCE shift to state 110
-- On NUMBER shift to state 95
-- On NOT shift to state 111
-- On NONE shift to state 112
-- On NO shift to state 113
-- On NEXT shift to state 114
-- On NEG shift to state 96
-- On LPAREN shift to state 115
-- On LONE shift to state 116
-- On LET shift to state 118
-- On LBRACE shift to state 122
-- On IDEN shift to state 123
-- On HISTORICALLY shift to state 124
-- On HAT shift to state 125
-- On HASH shift to state 99
-- On FALSE shift to state 126
-- On EVENTUALLY shift to state 127
-- On ALWAYS shift to state 128
-- On ALL shift to state 129
-- On ADD shift to state 133
-- On specification shift to state 297
-- On list(formula_semi) shift to state 214
-- On iexpr shift to state 139
-- On formula_semi shift to state 215
-- On formula shift to state 217
-- On expr shift to state 151
## Reductions:
-- On SYM reduce production list(formula_semi) ->
-- On RUN reduce production list(formula_semi) ->
-- On INVARIANT reduce production list(formula_semi) ->
-- On INST reduce production list(formula_semi) ->
-- On EOF reduce production list(formula_semi) ->

State 297:
## Known stack suffix:
## INVARIANT specification
## LR(1) items:
paragraph -> INVARIANT specification . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production paragraph -> INVARIANT specification
-- On RUN reduce production paragraph -> INVARIANT specification
-- On INVARIANT reduce production paragraph -> INVARIANT specification
-- On INST reduce production paragraph -> INVARIANT specification
-- On EOF reduce production paragraph -> INVARIANT specification

State 298:
## Known stack suffix:
## INST
## LR(1) items:
insts -> INST . nonempty_list(inst) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On PLAIN_ID shift to state 299
-- On nonempty_list(inst) shift to state 307
-- On inst shift to state 308
## Reductions:

State 299:
## Known stack suffix:
## PLAIN_ID
## LR(1) items:
inst -> PLAIN_ID . EQ LBRACE list(tuple) RBRACE [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID . EQ LBRACE list(tuple) RBRACE SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On EQ shift to state 300
## Reductions:

State 300:
## Known stack suffix:
## PLAIN_ID EQ
## LR(1) items:
inst -> PLAIN_ID EQ . LBRACE list(tuple) RBRACE [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID EQ . LBRACE list(tuple) RBRACE SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On LBRACE shift to state 301
## Reductions:

State 301:
## Known stack suffix:
## PLAIN_ID EQ LBRACE
## LR(1) items:
inst -> PLAIN_ID EQ LBRACE . list(tuple) RBRACE [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID EQ LBRACE . list(tuple) RBRACE SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On LPAREN shift to state 27
-- On tuple shift to state 302
-- On list(tuple) shift to state 304
## Reductions:
-- On RBRACE reduce production list(tuple) ->

State 302:
## Known stack suffix:
## tuple
## LR(1) items:
list(tuple) -> tuple . list(tuple) [ RBRACE ]
## Transitions:
-- On LPAREN shift to state 27
-- On tuple shift to state 302
-- On list(tuple) shift to state 303
## Reductions:
-- On RBRACE reduce production list(tuple) ->

State 303:
## Known stack suffix:
## tuple list(tuple)
## LR(1) items:
list(tuple) -> tuple list(tuple) . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE reduce production list(tuple) -> tuple list(tuple)

State 304:
## Known stack suffix:
## PLAIN_ID EQ LBRACE list(tuple)
## LR(1) items:
inst -> PLAIN_ID EQ LBRACE list(tuple) . RBRACE [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID EQ LBRACE list(tuple) . RBRACE SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On RBRACE shift to state 305
## Reductions:

State 305:
## Known stack suffix:
## PLAIN_ID EQ LBRACE list(tuple) RBRACE
## LR(1) items:
inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE . [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE . SEMI [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
-- On SEMI shift to state 306
## Reductions:
-- On SYM reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE
-- On RUN reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE
-- On PLAIN_ID reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE
-- On INVARIANT reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE
-- On INST reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE
-- On EOF reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE

State 306:
## Known stack suffix:
## PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI
## LR(1) items:
inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI . [ SYM RUN PLAIN_ID INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI
-- On RUN reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI
-- On PLAIN_ID reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI
-- On INVARIANT reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI
-- On INST reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI
-- On EOF reduce production inst -> PLAIN_ID EQ LBRACE list(tuple) RBRACE SEMI

State 307:
## Known stack suffix:
## INST nonempty_list(inst)
## LR(1) items:
insts -> INST nonempty_list(inst) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production insts -> INST nonempty_list(inst)
-- On RUN reduce production insts -> INST nonempty_list(inst)
-- On INVARIANT reduce production insts -> INST nonempty_list(inst)
-- On INST reduce production insts -> INST nonempty_list(inst)
-- On EOF reduce production insts -> INST nonempty_list(inst)

State 308:
## Known stack suffix:
## inst
## LR(1) items:
nonempty_list(inst) -> inst . [ SYM RUN INVARIANT INST EOF ]
nonempty_list(inst) -> inst . nonempty_list(inst) [ SYM RUN INVARIANT INST EOF ]
## Transitions:
-- On PLAIN_ID shift to state 299
-- On nonempty_list(inst) shift to state 309
-- On inst shift to state 308
## Reductions:
-- On SYM reduce production nonempty_list(inst) -> inst
-- On RUN reduce production nonempty_list(inst) -> inst
-- On INVARIANT reduce production nonempty_list(inst) -> inst
-- On INST reduce production nonempty_list(inst) -> inst
-- On EOF reduce production nonempty_list(inst) -> inst

State 309:
## Known stack suffix:
## inst nonempty_list(inst)
## LR(1) items:
nonempty_list(inst) -> inst nonempty_list(inst) . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production nonempty_list(inst) -> inst nonempty_list(inst)
-- On RUN reduce production nonempty_list(inst) -> inst nonempty_list(inst)
-- On INVARIANT reduce production nonempty_list(inst) -> inst nonempty_list(inst)
-- On INST reduce production nonempty_list(inst) -> inst nonempty_list(inst)
-- On EOF reduce production nonempty_list(inst) -> inst nonempty_list(inst)

State 310:
## Known stack suffix:
## syms
## LR(1) items:
paragraph -> syms . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production paragraph -> syms
-- On RUN reduce production paragraph -> syms
-- On INVARIANT reduce production paragraph -> syms
-- On INST reduce production paragraph -> syms
-- On EOF reduce production paragraph -> syms

State 311:
## Known stack suffix:
## paragraph
## LR(1) items:
nonempty_list(paragraph) -> paragraph . [ EOF ]
nonempty_list(paragraph) -> paragraph . nonempty_list(paragraph) [ EOF ]
## Transitions:
-- On SYM shift to state 72
-- On RUN shift to state 89
-- On INVARIANT shift to state 296
-- On INST shift to state 298
-- On syms shift to state 310
-- On paragraph shift to state 311
-- On nonempty_list(paragraph) shift to state 312
-- On insts shift to state 313
## Reductions:
-- On EOF reduce production nonempty_list(paragraph) -> paragraph

State 312:
## Known stack suffix:
## paragraph nonempty_list(paragraph)
## LR(1) items:
nonempty_list(paragraph) -> paragraph nonempty_list(paragraph) . [ EOF ]
## Transitions:
## Reductions:
-- On EOF reduce production nonempty_list(paragraph) -> paragraph nonempty_list(paragraph)

State 313:
## Known stack suffix:
## insts
## LR(1) items:
paragraph -> insts . [ SYM RUN INVARIANT INST EOF ]
## Transitions:
## Reductions:
-- On SYM reduce production paragraph -> insts
-- On RUN reduce production paragraph -> insts
-- On INVARIANT reduce production paragraph -> insts
-- On INST reduce production paragraph -> insts
-- On EOF reduce production paragraph -> insts

State 314:
## Known stack suffix:
## universe list(declaration) nonempty_list(paragraph)
## LR(1) items:
parse_problem -> universe list(declaration) nonempty_list(paragraph) . EOF [ # ]
## Transitions:
-- On EOF shift to state 315
## Reductions:

State 315:
## Known stack suffix:
## universe list(declaration) nonempty_list(paragraph) EOF
## LR(1) items:
parse_problem -> universe list(declaration) nonempty_list(paragraph) EOF . [ # ]
## Transitions:
## Reductions:
-- On # reduce production parse_problem -> universe list(declaration) nonempty_list(paragraph) EOF

State 316:
## Known stack suffix:
## declaration
## LR(1) items:
list(declaration) -> declaration . list(declaration) [ SYM RUN INVARIANT INST ]
## Transitions:
-- On VAR shift to state 16
-- On CONST shift to state 63
-- On list(declaration) shift to state 317
-- On declaration shift to state 316
## Reductions:
-- On SYM reduce production list(declaration) ->
-- On RUN reduce production list(declaration) ->
-- On INVARIANT reduce production list(declaration) ->
-- On INST reduce production list(declaration) ->

State 317:
## Known stack suffix:
## declaration list(declaration)
## LR(1) items:
list(declaration) -> declaration list(declaration) . [ SYM RUN INVARIANT INST ]
## Transitions:
## Reductions:
-- On SYM reduce production list(declaration) -> declaration list(declaration)
-- On RUN reduce production list(declaration) -> declaration list(declaration)
-- On INVARIANT reduce production list(declaration) -> declaration list(declaration)
-- On INST reduce production list(declaration) -> declaration list(declaration)

State 318:
## Known stack suffix:
## parse_problem
## LR(1) items:
parse_problem' -> parse_problem . [ # ]
## Transitions:
## Reductions:
-- On # accept parse_problem

